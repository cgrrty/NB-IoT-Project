
NB_IOT_MEGA324PA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000035c  00800100  00001e46  00001eda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000126  0080045c  0080045c  00002236  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002236  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002268  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000338  00000000  00000000  000022a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005640  00000000  00000000  000025e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a64  00000000  00000000  00007c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003a0b  00000000  00000000  00009684  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000be0  00000000  00000000  0000d090  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00015363  00000000  00000000  0000dc70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000429e  00000000  00000000  00022fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f0  00000000  00000000  00027271  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00005f57  00000000  00000000  00027561  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
       2:	00 00       	nop
       4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
       6:	00 00       	nop
       8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
       a:	00 00       	nop
       c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
       e:	00 00       	nop
      10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
      12:	00 00       	nop
      14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
      16:	00 00       	nop
      18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
      1a:	00 00       	nop
      1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
      1e:	00 00       	nop
      20:	39 c6       	rjmp	.+3186   	; 0xc94 <__vector_8>
      22:	00 00       	nop
      24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
      26:	00 00       	nop
      28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
      2a:	00 00       	nop
      2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
      2e:	00 00       	nop
      30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
      32:	00 00       	nop
      34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
      36:	00 00       	nop
      38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
      3a:	00 00       	nop
      3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
      3e:	00 00       	nop
      40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
      42:	00 00       	nop
      44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
      46:	00 00       	nop
      48:	42 c0       	rjmp	.+132    	; 0xce <__bad_interrupt>
      4a:	00 00       	nop
      4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
      4e:	00 00       	nop
      50:	e5 c5       	rjmp	.+3018   	; 0xc1c <__vector_20>
      52:	00 00       	nop
      54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
      56:	00 00       	nop
      58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
      5a:	00 00       	nop
      5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
      5e:	00 00       	nop
      60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
      62:	00 00       	nop
      64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
      66:	00 00       	nop
      68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
      6a:	00 00       	nop
      6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
      6e:	00 00       	nop
      70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
      72:	00 00       	nop
      74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
      76:	00 00       	nop
      78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d5 06       	cpc	r13, r21
      7e:	d9 06       	cpc	r13, r25
      80:	4e 07       	cpc	r20, r30
      82:	6a 07       	cpc	r22, r26
      84:	7a 07       	cpc	r23, r26
      86:	98 07       	cpc	r25, r24
      88:	e2 07       	cpc	r30, r18
      8a:	e6 07       	cpc	r30, r22
      8c:	ea 07       	cpc	r30, r26
      8e:	ee 07       	cpc	r30, r30
      90:	f3 07       	cpc	r31, r19
      92:	b5 08       	sbc	r11, r5

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d8 e0       	ldi	r29, 0x08	; 8
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	14 e0       	ldi	r17, 0x04	; 4
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e6 e4       	ldi	r30, 0x46	; 70
      a8:	fe e1       	ldi	r31, 0x1E	; 30
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0
      b0:	ac 35       	cpi	r26, 0x5C	; 92
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>

000000b6 <__do_clear_bss>:
      b6:	25 e0       	ldi	r18, 0x05	; 5
      b8:	ac e5       	ldi	r26, 0x5C	; 92
      ba:	b4 e0       	ldi	r27, 0x04	; 4
      bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
      be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
      c0:	a2 38       	cpi	r26, 0x82	; 130
      c2:	b2 07       	cpc	r27, r18
      c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
      c6:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <main>
      ca:	0c 94 21 0f 	jmp	0x1e42	; 0x1e42 <_exit>

000000ce <__bad_interrupt>:
      ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <EEOpen>:
#include "24c64.h"

void EEOpen()
{
	//Set up TWI Module
	TWBR = 1; //5; //Bit rate generator division factor
      d0:	81 e0       	ldi	r24, 0x01	; 1
      d2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	TWSR &= (~((1<<TWPS1)|(1<<TWPS0))); //VERIFY AGAINST FCPU AND MEMORY SPEED!!!!!
      d6:	e9 eb       	ldi	r30, 0xB9	; 185
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	8c 7f       	andi	r24, 0xFC	; 252
      de:	80 83       	st	Z, r24
      e0:	08 95       	ret

000000e2 <EEWriteByte>:
	//At 1MHz and 1 division factor and 1 in prescaler the clock frequency is approx 55kHz. Pull up resistor must be >1k.

}

uint8_t EEWriteByte(uint16_t address,uint8_t data)
{
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
      e6:	ec eb       	ldi	r30, 0xBC	; 188
      e8:	f0 e0       	ldi	r31, 0x00	; 0
      ea:	24 ea       	ldi	r18, 0xA4	; 164

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));

		//Check status
		if((TWSR & 0xF8) != 0x08)
      ec:	a9 eb       	ldi	r26, 0xB9	; 185
      ee:	b0 e0       	ldi	r27, 0x00	; 0
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
      f0:	cb eb       	ldi	r28, 0xBB	; 187
      f2:	d0 e0       	ldi	r29, 0x00	; 0
      f4:	40 ea       	ldi	r20, 0xA0	; 160

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
      f6:	34 e8       	ldi	r19, 0x84	; 132
uint8_t EEWriteByte(uint16_t address,uint8_t data)
{
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
      f8:	20 83       	st	Z, r18

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
      fa:	90 81       	ld	r25, Z
      fc:	99 23       	and	r25, r25
      fe:	ec f7       	brge	.-6      	; 0xfa <EEWriteByte+0x18>

		//Check status
		if((TWSR & 0xF8) != 0x08)
     100:	9c 91       	ld	r25, X
     102:	98 7f       	andi	r25, 0xF8	; 248
     104:	98 30       	cpi	r25, 0x08	; 8
     106:	b9 f5       	brne	.+110    	; 0x176 <EEWriteByte+0x94>
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     108:	48 83       	st	Y, r20

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     10a:	30 83       	st	Z, r19

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     10c:	90 81       	ld	r25, Z
     10e:	99 23       	and	r25, r25
     110:	ec f7       	brge	.-6      	; 0x10c <EEWriteByte+0x2a>
	
	}while((TWSR & 0xF8) != 0x18);
     112:	9c 91       	ld	r25, X
     114:	98 7f       	andi	r25, 0xF8	; 248
     116:	98 31       	cpi	r25, 0x18	; 24
     118:	79 f7       	brne	.-34     	; 0xf8 <EEWriteByte+0x16>
// 	//Check status
// 	if((TWSR & 0xF8) != 0x28)
// 		return FALSE;
// 
	//Now write ADDRL
	TWDR=(address);
     11a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     11e:	84 e8       	ldi	r24, 0x84	; 132
     120:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     124:	ec eb       	ldi	r30, 0xBC	; 188
     126:	f0 e0       	ldi	r31, 0x00	; 0
     128:	80 81       	ld	r24, Z
     12a:	88 23       	and	r24, r24
     12c:	ec f7       	brge	.-6      	; 0x128 <EEWriteByte+0x46>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     12e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     132:	88 7f       	andi	r24, 0xF8	; 248
     134:	88 32       	cpi	r24, 0x28	; 40
     136:	09 f5       	brne	.+66     	; 0x17a <EEWriteByte+0x98>
		return FALSE;

	//Now write DATA
	TWDR=(data);
     138:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     13c:	84 e8       	ldi	r24, 0x84	; 132
     13e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     142:	ec eb       	ldi	r30, 0xBC	; 188
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	80 81       	ld	r24, Z
     148:	88 23       	and	r24, r24
     14a:	ec f7       	brge	.-6      	; 0x146 <EEWriteByte+0x64>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     14c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     150:	88 7f       	andi	r24, 0xF8	; 248
     152:	88 32       	cpi	r24, 0x28	; 40
     154:	a1 f4       	brne	.+40     	; 0x17e <EEWriteByte+0x9c>
		return FALSE;

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     156:	84 e9       	ldi	r24, 0x94	; 148
     158:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
     15c:	ec eb       	ldi	r30, 0xBC	; 188
     15e:	f0 e0       	ldi	r31, 0x00	; 0
     160:	80 81       	ld	r24, Z
     162:	84 fd       	sbrc	r24, 4
     164:	fd cf       	rjmp	.-6      	; 0x160 <EEWriteByte+0x7e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     166:	8b ed       	ldi	r24, 0xDB	; 219
     168:	95 e0       	ldi	r25, 0x05	; 5
     16a:	01 97       	sbiw	r24, 0x01	; 1
     16c:	f1 f7       	brne	.-4      	; 0x16a <EEWriteByte+0x88>
     16e:	00 c0       	rjmp	.+0      	; 0x170 <EEWriteByte+0x8e>
     170:	00 00       	nop

	//Wait untill Writing is complete
	_delay_ms(6); //The datasheet had 5ms at max write cycle time.

	//Return TRUE
	return TRUE;
     172:	81 e0       	ldi	r24, 0x01	; 1
     174:	05 c0       	rjmp	.+10     	; 0x180 <EEWriteByte+0x9e>
		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));

		//Check status
		if((TWSR & 0xF8) != 0x08)
			return FALSE;
     176:	80 e0       	ldi	r24, 0x00	; 0
     178:	03 c0       	rjmp	.+6      	; 0x180 <EEWriteByte+0x9e>
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	01 c0       	rjmp	.+2      	; 0x180 <EEWriteByte+0x9e>
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     17e:	80 e0       	ldi	r24, 0x00	; 0
	_delay_ms(6); //The datasheet had 5ms at max write cycle time.

	//Return TRUE
	return TRUE;

}
     180:	df 91       	pop	r29
     182:	cf 91       	pop	r28
     184:	08 95       	ret

00000186 <EEReadByte>:

uint8_t EEReadByte(uint16_t address)
{
     186:	cf 93       	push	r28
     188:	df 93       	push	r29

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     18a:	ec eb       	ldi	r30, 0xBC	; 188
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	24 ea       	ldi	r18, 0xA4	; 164

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));

		//Check status
		if((TWSR & 0xF8) != 0x08)
     190:	a9 eb       	ldi	r26, 0xB9	; 185
     192:	b0 e0       	ldi	r27, 0x00	; 0
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     194:	cb eb       	ldi	r28, 0xBB	; 187
     196:	d0 e0       	ldi	r29, 0x00	; 0
     198:	40 ea       	ldi	r20, 0xA0	; 160

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     19a:	34 e8       	ldi	r19, 0x84	; 132

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     19c:	20 83       	st	Z, r18

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     19e:	90 81       	ld	r25, Z
     1a0:	99 23       	and	r25, r25
     1a2:	ec f7       	brge	.-6      	; 0x19e <EEReadByte+0x18>

		//Check status
		if((TWSR & 0xF8) != 0x08)
     1a4:	9c 91       	ld	r25, X
     1a6:	98 7f       	andi	r25, 0xF8	; 248
     1a8:	98 30       	cpi	r25, 0x08	; 8
     1aa:	09 f0       	breq	.+2      	; 0x1ae <EEReadByte+0x28>
     1ac:	4d c0       	rjmp	.+154    	; 0x248 <EEReadByte+0xc2>
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     1ae:	48 83       	st	Y, r20

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     1b0:	30 83       	st	Z, r19

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     1b2:	90 81       	ld	r25, Z
     1b4:	99 23       	and	r25, r25
     1b6:	ec f7       	brge	.-6      	; 0x1b2 <EEReadByte+0x2c>
	
	}while((TWSR & 0xF8) != 0x18);
     1b8:	9c 91       	ld	r25, X
     1ba:	98 7f       	andi	r25, 0xF8	; 248
     1bc:	98 31       	cpi	r25, 0x18	; 24
     1be:	71 f7       	brne	.-36     	; 0x19c <EEReadByte+0x16>
// 	//Check status
// 	if((TWSR & 0xF8) != 0x28)
// 		return FALSE;

	//Now write ADDRL
	TWDR=(address);
     1c0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     1c4:	84 e8       	ldi	r24, 0x84	; 132
     1c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     1ca:	ec eb       	ldi	r30, 0xBC	; 188
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	80 81       	ld	r24, Z
     1d0:	88 23       	and	r24, r24
     1d2:	ec f7       	brge	.-6      	; 0x1ce <EEReadByte+0x48>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     1d4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     1d8:	88 7f       	andi	r24, 0xF8	; 248
     1da:	88 32       	cpi	r24, 0x28	; 40
     1dc:	b9 f5       	brne	.+110    	; 0x24c <EEReadByte+0xc6>
	//*************************DUMMY WRITE SEQUENCE END **********************


	
	//Put Start Condition on TWI Bus
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     1de:	84 ea       	ldi	r24, 0xA4	; 164
     1e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     1e4:	ec eb       	ldi	r30, 0xBC	; 188
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	80 81       	ld	r24, Z
     1ea:	88 23       	and	r24, r24
     1ec:	ec f7       	brge	.-6      	; 0x1e8 <EEReadByte+0x62>

	//Check status
	if((TWSR & 0xF8) != 0x10)
     1ee:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     1f2:	88 7f       	andi	r24, 0xF8	; 248
     1f4:	80 31       	cpi	r24, 0x10	; 16
     1f6:	61 f5       	brne	.+88     	; 0x250 <EEReadByte+0xca>
		return FALSE;

	//Now write SLA+R
	//EEPROM @ 00h
	TWDR=0b10100001;	
     1f8:	81 ea       	ldi	r24, 0xA1	; 161
     1fa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     1fe:	84 e8       	ldi	r24, 0x84	; 132
     200:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     204:	ec eb       	ldi	r30, 0xBC	; 188
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	80 81       	ld	r24, Z
     20a:	88 23       	and	r24, r24
     20c:	ec f7       	brge	.-6      	; 0x208 <EEReadByte+0x82>

	//Check status
	if((TWSR & 0xF8) != 0x40)
     20e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     212:	88 7f       	andi	r24, 0xF8	; 248
     214:	80 34       	cpi	r24, 0x40	; 64
     216:	f1 f4       	brne	.+60     	; 0x254 <EEReadByte+0xce>
		return FALSE;

	//Now enable Reception of data by clearing TWINT
	TWCR=(1<<TWINT)|(1<<TWEN);
     218:	84 e8       	ldi	r24, 0x84	; 132
     21a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	//Wait till done
	while(!(TWCR & (1<<TWINT)));
     21e:	ec eb       	ldi	r30, 0xBC	; 188
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	80 81       	ld	r24, Z
     224:	88 23       	and	r24, r24
     226:	ec f7       	brge	.-6      	; 0x222 <EEReadByte+0x9c>

	//Check status
	if((TWSR & 0xF8) != 0x58)
     228:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     22c:	88 7f       	andi	r24, 0xF8	; 248
     22e:	88 35       	cpi	r24, 0x58	; 88
     230:	99 f4       	brne	.+38     	; 0x258 <EEReadByte+0xd2>
		return FALSE;

	//Read the data
	data=TWDR;
     232:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     236:	94 e9       	ldi	r25, 0x94	; 148
     238:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
     23c:	ec eb       	ldi	r30, 0xBC	; 188
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	90 81       	ld	r25, Z
     242:	94 fd       	sbrc	r25, 4
     244:	fd cf       	rjmp	.-6      	; 0x240 <EEReadByte+0xba>
     246:	09 c0       	rjmp	.+18     	; 0x25a <EEReadByte+0xd4>
		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));

		//Check status
		if((TWSR & 0xF8) != 0x08)
			return FALSE;
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	07 c0       	rjmp	.+14     	; 0x25a <EEReadByte+0xd4>
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	05 c0       	rjmp	.+10     	; 0x25a <EEReadByte+0xd4>
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x10)
		return FALSE;
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	03 c0       	rjmp	.+6      	; 0x25a <EEReadByte+0xd4>
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x40)
		return FALSE;
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	01 c0       	rjmp	.+2      	; 0x25a <EEReadByte+0xd4>
	//Wait till done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x58)
		return FALSE;
     258:	80 e0       	ldi	r24, 0x00	; 0
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));

	//Return TRUE
	return data;
}
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	08 95       	ret

00000260 <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	1f 92       	push	r1
     266:	cd b7       	in	r28, 0x3d	; 61
     268:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     26a:	9f b7       	in	r25, 0x3f	; 63
     26c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     26e:	f8 94       	cli
	return flags;
     270:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
     272:	82 30       	cpi	r24, 0x02	; 2
     274:	40 f4       	brcc	.+16     	; 0x286 <sysclk_enable_module+0x26>
		*(reg + port)  &= ~id;
     276:	e8 2f       	mov	r30, r24
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	ec 59       	subi	r30, 0x9C	; 156
     27c:	ff 4f       	sbci	r31, 0xFF	; 255
     27e:	60 95       	com	r22
     280:	80 81       	ld	r24, Z
     282:	68 23       	and	r22, r24
     284:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     286:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     288:	0f 90       	pop	r0
     28a:	df 91       	pop	r29
     28c:	cf 91       	pop	r28
     28e:	08 95       	ret

00000290 <usart_putchar>:
	}

	if (baud_offset != USART_BAUD_UNDEFINED) {
		usart->UBRR = baudctrl;
	}
}
     290:	fc 01       	movw	r30, r24
     292:	90 81       	ld	r25, Z
     294:	95 ff       	sbrs	r25, 5
     296:	fd cf       	rjmp	.-6      	; 0x292 <usart_putchar+0x2>
     298:	66 83       	std	Z+6, r22	; 0x06
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	08 95       	ret

0000029e <usart_getchar>:
     29e:	fc 01       	movw	r30, r24
     2a0:	90 81       	ld	r25, Z
     2a2:	99 23       	and	r25, r25
     2a4:	ec f7       	brge	.-6      	; 0x2a0 <usart_getchar+0x2>
     2a6:	86 81       	ldd	r24, Z+6	; 0x06
     2a8:	08 95       	ret

000002aa <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     2aa:	4f 92       	push	r4
     2ac:	5f 92       	push	r5
     2ae:	6f 92       	push	r6
     2b0:	7f 92       	push	r7
     2b2:	8f 92       	push	r8
     2b4:	9f 92       	push	r9
     2b6:	af 92       	push	r10
     2b8:	bf 92       	push	r11
     2ba:	cf 92       	push	r12
     2bc:	df 92       	push	r13
     2be:	ef 92       	push	r14
     2c0:	ff 92       	push	r15
     2c2:	0f 93       	push	r16
     2c4:	1f 93       	push	r17
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
     2ca:	ec 01       	movw	r28, r24
     2cc:	6a 01       	movw	r12, r20
     2ce:	7b 01       	movw	r14, r22

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
     2d0:	28 01       	movw	r4, r16
     2d2:	39 01       	movw	r6, r18
     2d4:	68 94       	set
     2d6:	12 f8       	bld	r1, 2
     2d8:	76 94       	lsr	r7
     2da:	67 94       	ror	r6
     2dc:	57 94       	ror	r5
     2de:	47 94       	ror	r4
     2e0:	16 94       	lsr	r1
     2e2:	d1 f7       	brne	.-12     	; 0x2d8 <usart_set_baudrate+0x2e>
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;

	if (usart->UCSRnA & USART_U2X_bm) {
     2e4:	88 81       	ld	r24, Y
     2e6:	81 fd       	sbrc	r24, 1
     2e8:	0e c0       	rjmp	.+28     	; 0x306 <usart_set_baudrate+0x5c>
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;
     2ea:	48 01       	movw	r8, r16
     2ec:	59 01       	movw	r10, r18
     2ee:	07 2e       	mov	r0, r23
     2f0:	73 e1       	ldi	r23, 0x13	; 19
     2f2:	b6 94       	lsr	r11
     2f4:	a7 94       	ror	r10
     2f6:	97 94       	ror	r9
     2f8:	87 94       	ror	r8
     2fa:	7a 95       	dec	r23
     2fc:	d1 f7       	brne	.-12     	; 0x2f2 <usart_set_baudrate+0x48>
     2fe:	70 2d       	mov	r23, r0

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
     300:	d3 01       	movw	r26, r6
     302:	c2 01       	movw	r24, r4
     304:	15 c0       	rjmp	.+42     	; 0x330 <usart_set_baudrate+0x86>
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;

	if (usart->UCSRnA & USART_U2X_bm) {
		max_rate /= 2;
     306:	d9 01       	movw	r26, r18
     308:	c8 01       	movw	r24, r16
     30a:	68 94       	set
     30c:	13 f8       	bld	r1, 3
     30e:	b6 95       	lsr	r27
     310:	a7 95       	ror	r26
     312:	97 95       	ror	r25
     314:	87 95       	ror	r24
     316:	16 94       	lsr	r1
     318:	d1 f7       	brne	.-12     	; 0x30e <usart_set_baudrate+0x64>
		min_rate /= 2;
     31a:	48 01       	movw	r8, r16
     31c:	59 01       	movw	r10, r18
     31e:	07 2e       	mov	r0, r23
     320:	74 e1       	ldi	r23, 0x14	; 20
     322:	b6 94       	lsr	r11
     324:	a7 94       	ror	r10
     326:	97 94       	ror	r9
     328:	87 94       	ror	r8
     32a:	7a 95       	dec	r23
     32c:	d1 f7       	brne	.-12     	; 0x322 <usart_set_baudrate+0x78>
     32e:	70 2d       	mov	r23, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     330:	8c 15       	cp	r24, r12
     332:	9d 05       	cpc	r25, r13
     334:	ae 05       	cpc	r26, r14
     336:	bf 05       	cpc	r27, r15
     338:	78 f1       	brcs	.+94     	; 0x398 <usart_set_baudrate+0xee>
     33a:	c8 14       	cp	r12, r8
     33c:	d9 04       	cpc	r13, r9
     33e:	ea 04       	cpc	r14, r10
     340:	fb 04       	cpc	r15, r11
     342:	60 f1       	brcs	.+88     	; 0x39c <usart_set_baudrate+0xf2>
		return false;
	}

	/* Check if double speed is enabled. */
	if (usart->UCSRnA & USART_U2X_bm) {
     344:	88 81       	ld	r24, Y
     346:	81 ff       	sbrs	r24, 1
     348:	10 c0       	rjmp	.+32     	; 0x36a <usart_set_baudrate+0xc0>
		baud *= 2;
		ubrr = (uint32_t)(cpu_hz / 8 / baud) - 1;
     34a:	a7 01       	movw	r20, r14
     34c:	96 01       	movw	r18, r12
     34e:	22 0f       	add	r18, r18
     350:	33 1f       	adc	r19, r19
     352:	44 1f       	adc	r20, r20
     354:	55 1f       	adc	r21, r21
     356:	c3 01       	movw	r24, r6
     358:	b2 01       	movw	r22, r4
     35a:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__udivmodsi4>
     35e:	da 01       	movw	r26, r20
     360:	c9 01       	movw	r24, r18
     362:	01 97       	sbiw	r24, 0x01	; 1
     364:	a1 09       	sbc	r26, r1
     366:	b1 09       	sbc	r27, r1
     368:	13 c0       	rjmp	.+38     	; 0x390 <usart_set_baudrate+0xe6>
	} else {
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
     36a:	c9 01       	movw	r24, r18
     36c:	b8 01       	movw	r22, r16
     36e:	68 94       	set
     370:	13 f8       	bld	r1, 3
     372:	96 95       	lsr	r25
     374:	87 95       	ror	r24
     376:	77 95       	ror	r23
     378:	67 95       	ror	r22
     37a:	16 94       	lsr	r1
     37c:	d1 f7       	brne	.-12     	; 0x372 <usart_set_baudrate+0xc8>
     37e:	a7 01       	movw	r20, r14
     380:	96 01       	movw	r18, r12
     382:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__udivmodsi4>
     386:	da 01       	movw	r26, r20
     388:	c9 01       	movw	r24, r18
     38a:	01 97       	sbiw	r24, 0x01	; 1
     38c:	a1 09       	sbc	r26, r1
     38e:	b1 09       	sbc	r27, r1
	}

	usart->UBRR = ubrr;
     390:	9d 83       	std	Y+5, r25	; 0x05
     392:	8c 83       	std	Y+4, r24	; 0x04
	return true;
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	03 c0       	rjmp	.+6      	; 0x39e <usart_set_baudrate+0xf4>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	01 c0       	rjmp	.+2      	; 0x39e <usart_set_baudrate+0xf4>
     39c:	80 e0       	ldi	r24, 0x00	; 0
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
	}

	usart->UBRR = ubrr;
	return true;
}
     39e:	df 91       	pop	r29
     3a0:	cf 91       	pop	r28
     3a2:	1f 91       	pop	r17
     3a4:	0f 91       	pop	r16
     3a6:	ff 90       	pop	r15
     3a8:	ef 90       	pop	r14
     3aa:	df 90       	pop	r13
     3ac:	cf 90       	pop	r12
     3ae:	bf 90       	pop	r11
     3b0:	af 90       	pop	r10
     3b2:	9f 90       	pop	r9
     3b4:	8f 90       	pop	r8
     3b6:	7f 90       	pop	r7
     3b8:	6f 90       	pop	r6
     3ba:	5f 90       	pop	r5
     3bc:	4f 90       	pop	r4
     3be:	08 95       	ret

000003c0 <usart_init_rs232>:
 *
 * \retval true if the initialization was successful
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     3c0:	0f 93       	push	r16
     3c2:	1f 93       	push	r17
     3c4:	cf 93       	push	r28
     3c6:	df 93       	push	r29
     3c8:	ec 01       	movw	r28, r24
     3ca:	8b 01       	movw	r16, r22
 * \brief usart Pointer to an USART module.
 */
static inline void usart_enable_module_clock(USART_t *usart)
{
#ifdef USART0
	if ((uintptr_t)usart == (uintptr_t)&UCSR0A) {
     3cc:	80 3c       	cpi	r24, 0xC0	; 192
     3ce:	91 05       	cpc	r25, r1
     3d0:	19 f4       	brne	.+6      	; 0x3d8 <usart_init_rs232+0x18>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
     3d2:	62 e0       	ldi	r22, 0x02	; 2
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	44 df       	rcall	.-376    	; 0x260 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_UMSEL01_gm)) | usartmode;
     3d8:	8a 81       	ldd	r24, Y+2	; 0x02
     3da:	8f 73       	andi	r24, 0x3F	; 63
     3dc:	8a 83       	std	Y+2, r24	; 0x02
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
	bool result;
	usart_enable_module_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
     3de:	f8 01       	movw	r30, r16
     3e0:	26 81       	ldd	r18, Z+6	; 0x06
     3e2:	35 81       	ldd	r19, Z+5	; 0x05
     3e4:	84 81       	ldd	r24, Z+4	; 0x04
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->UCSRnC
		= ((usart)->UCSRnC &
     3e6:	9a 81       	ldd	r25, Y+2	; 0x02
     3e8:	48 2f       	mov	r20, r24
     3ea:	43 70       	andi	r20, 0x03	; 3
     3ec:	44 0f       	add	r20, r20
     3ee:	99 7f       	andi	r25, 0xF9	; 249
     3f0:	94 2b       	or	r25, r20
     3f2:	9a 83       	std	Y+2, r25	; 0x02
			(~USART_CHSIZE01C_gm)) | ((charSize & 0x03)
			<< USART_CHSIZE01C_gp);
	(usart)->UCSRnB
		= ((usart)->UCSRnB &
     3f4:	99 81       	ldd	r25, Y+1	; 0x01
     3f6:	84 70       	andi	r24, 0x04	; 4
     3f8:	88 0f       	add	r24, r24
     3fa:	88 0f       	add	r24, r24
     3fc:	9b 7f       	andi	r25, 0xFB	; 251
     3fe:	89 2b       	or	r24, r25
     400:	89 83       	std	Y+1, r24	; 0x01
			(~USART_CHSIZE2_bm)) | ((charSize & 0x04)
			<< USART_CHSIZE2_bp);

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_PMODE_gm)) | parityMode;
     402:	8a 81       	ldd	r24, Y+2	; 0x02
     404:	8f 7c       	andi	r24, 0xCF	; 207
     406:	83 2b       	or	r24, r19
     408:	8a 83       	std	Y+2, r24	; 0x02

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_STOPB_bm)) | (twoStopBits
     40a:	9a 81       	ldd	r25, Y+2	; 0x02
     40c:	97 7f       	andi	r25, 0xF7	; 247
     40e:	82 2f       	mov	r24, r18
     410:	88 0f       	add	r24, r24
     412:	88 0f       	add	r24, r24
     414:	88 0f       	add	r24, r24
     416:	89 2b       	or	r24, r25
     418:	8a 83       	std	Y+2, r24	; 0x02
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate,
     41a:	40 81       	ld	r20, Z
     41c:	51 81       	ldd	r21, Z+1	; 0x01
     41e:	62 81       	ldd	r22, Z+2	; 0x02
     420:	73 81       	ldd	r23, Z+3	; 0x03
     422:	00 e4       	ldi	r16, 0x40	; 64
     424:	12 e4       	ldi	r17, 0x42	; 66
     426:	2f e0       	ldi	r18, 0x0F	; 15
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	ce 01       	movw	r24, r28
     42c:	3e df       	rcall	.-388    	; 0x2aa <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_TXEN_bm;
     42e:	99 81       	ldd	r25, Y+1	; 0x01
     430:	98 60       	ori	r25, 0x08	; 8
     432:	99 83       	std	Y+1, r25	; 0x01
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_RXEN_bm;
     434:	99 81       	ldd	r25, Y+1	; 0x01
     436:	90 61       	ori	r25, 0x10	; 16
     438:	99 83       	std	Y+1, r25	; 0x01
			sysclk_get_source_clock_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	return result;
}
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	1f 91       	pop	r17
     440:	0f 91       	pop	r16
     442:	08 95       	ret

00000444 <loadcell_min_max_tran>:
 *  Author: jan.rune.herheim
 */ 

#include "loadcell_logger.h"

uint8_t loadcell_min_max_tran(uint16_t current_value, uint16_t *data_array) {
     444:	fb 01       	movw	r30, r22
	
	//find tran
	signed int tran = 0; //could go positive and negative, and could store a 15 bits number, hence enough for our 12 bits results.
	//uint16_t tran_abs = 0;
	
	tran = current_value - *(data_array + POSITION_PREV); //tran = current - previous
     446:	22 81       	ldd	r18, Z+2	; 0x02
     448:	33 81       	ldd	r19, Z+3	; 0x03
     44a:	ac 01       	movw	r20, r24
     44c:	42 1b       	sub	r20, r18
     44e:	53 0b       	sbc	r21, r19
     450:	9a 01       	movw	r18, r20
	if ((abs(tran) > abs(*(data_array+POSITION_TRAN_MAX))) & (*(data_array+POSITION_ACCU_CNT) > 0)) //first step is not valid due to only one value.
     452:	da 01       	movw	r26, r20
     454:	22 f4       	brpl	.+8      	; 0x45e <loadcell_min_max_tran+0x1a>
     456:	aa 27       	eor	r26, r26
     458:	bb 27       	eor	r27, r27
     45a:	a4 1b       	sub	r26, r20
     45c:	b5 0b       	sbc	r27, r21
     45e:	42 85       	ldd	r20, Z+10	; 0x0a
     460:	53 85       	ldd	r21, Z+11	; 0x0b
     462:	55 23       	and	r21, r21
     464:	1c f4       	brge	.+6      	; 0x46c <loadcell_min_max_tran+0x28>
     466:	51 95       	neg	r21
     468:	41 95       	neg	r20
     46a:	51 09       	sbc	r21, r1
     46c:	61 e0       	ldi	r22, 0x01	; 1
     46e:	4a 17       	cp	r20, r26
     470:	5b 07       	cpc	r21, r27
     472:	0c f0       	brlt	.+2      	; 0x476 <loadcell_min_max_tran+0x32>
     474:	60 e0       	ldi	r22, 0x00	; 0
     476:	66 23       	and	r22, r22
     478:	51 f0       	breq	.+20     	; 0x48e <loadcell_min_max_tran+0x4a>
     47a:	41 e0       	ldi	r20, 0x01	; 1
     47c:	62 89       	ldd	r22, Z+18	; 0x12
     47e:	73 89       	ldd	r23, Z+19	; 0x13
     480:	67 2b       	or	r22, r23
     482:	09 f4       	brne	.+2      	; 0x486 <loadcell_min_max_tran+0x42>
     484:	40 e0       	ldi	r20, 0x00	; 0
     486:	44 23       	and	r20, r20
     488:	11 f0       	breq	.+4      	; 0x48e <loadcell_min_max_tran+0x4a>
// 			}
// 			tran_abs |= (1<<11); //flip the MSB of the 12 bits word to set the negative sign.
// 			tran = tran_abs;
// 		}
		
		*(data_array+POSITION_TRAN_MAX) = tran; //store new tran max.
     48a:	33 87       	std	Z+11, r19	; 0x0b
     48c:	22 87       	std	Z+10, r18	; 0x0a
	}
	
	//find min and max
	if (current_value < *(data_array+POSITION_MIN))
     48e:	26 81       	ldd	r18, Z+6	; 0x06
     490:	37 81       	ldd	r19, Z+7	; 0x07
     492:	82 17       	cp	r24, r18
     494:	93 07       	cpc	r25, r19
     496:	10 f4       	brcc	.+4      	; 0x49c <loadcell_min_max_tran+0x58>
	{
		*(data_array+POSITION_MIN) = current_value; //store new min value.
     498:	97 83       	std	Z+7, r25	; 0x07
     49a:	86 83       	std	Z+6, r24	; 0x06
	}
	if (current_value > *(data_array+POSITION_MAX))
     49c:	20 85       	ldd	r18, Z+8	; 0x08
     49e:	31 85       	ldd	r19, Z+9	; 0x09
     4a0:	28 17       	cp	r18, r24
     4a2:	39 07       	cpc	r19, r25
     4a4:	10 f4       	brcc	.+4      	; 0x4aa <loadcell_min_max_tran+0x66>
	{
		*(data_array+POSITION_MAX) = current_value; //Store new max.
     4a6:	91 87       	std	Z+9, r25	; 0x09
     4a8:	80 87       	std	Z+8, r24	; 0x08
	}
}
     4aa:	08 95       	ret

000004ac <__portable_avr_delay_cycles>:
	wdt_reset();
	//rtc_init_period(2); //using RTC as sampler timer.
	//wdt_enable(9);
	rtc_init_period(1);
	//sleep_enable();
}
     4ac:	04 c0       	rjmp	.+8      	; 0x4b6 <__portable_avr_delay_cycles+0xa>
     4ae:	61 50       	subi	r22, 0x01	; 1
     4b0:	71 09       	sbc	r23, r1
     4b2:	81 09       	sbc	r24, r1
     4b4:	91 09       	sbc	r25, r1
     4b6:	61 15       	cp	r22, r1
     4b8:	71 05       	cpc	r23, r1
     4ba:	81 05       	cpc	r24, r1
     4bc:	91 05       	cpc	r25, r1
     4be:	b9 f7       	brne	.-18     	; 0x4ae <__portable_avr_delay_cycles+0x2>
     4c0:	08 95       	ret

000004c2 <usart_tx_at>:
     4c2:	0f 93       	push	r16
     4c4:	1f 93       	push	r17
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	eb 01       	movw	r28, r22
     4cc:	68 81       	ld	r22, Y
     4ce:	66 23       	and	r22, r22
     4d0:	39 f0       	breq	.+14     	; 0x4e0 <usart_tx_at+0x1e>
     4d2:	8c 01       	movw	r16, r24
     4d4:	21 96       	adiw	r28, 0x01	; 1
     4d6:	c8 01       	movw	r24, r16
     4d8:	db de       	rcall	.-586    	; 0x290 <usart_putchar>
     4da:	69 91       	ld	r22, Y+
     4dc:	61 11       	cpse	r22, r1
     4de:	fb cf       	rjmp	.-10     	; 0x4d6 <usart_tx_at+0x14>
     4e0:	df 91       	pop	r29
     4e2:	cf 91       	pop	r28
     4e4:	1f 91       	pop	r17
     4e6:	0f 91       	pop	r16
     4e8:	08 95       	ret

000004ea <reset_tx_data>:
     4ea:	44 23       	and	r20, r20
     4ec:	61 f0       	breq	.+24     	; 0x506 <reset_tx_data+0x1c>
     4ee:	a6 2f       	mov	r26, r22
     4f0:	b7 2f       	mov	r27, r23
     4f2:	e8 2f       	mov	r30, r24
     4f4:	f9 2f       	mov	r31, r25
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	2d 91       	ld	r18, X+
     4fa:	3d 91       	ld	r19, X+
     4fc:	21 93       	st	Z+, r18
     4fe:	31 93       	st	Z+, r19
     500:	8f 5f       	subi	r24, 0xFF	; 255
     502:	48 13       	cpse	r20, r24
     504:	f9 cf       	rjmp	.-14     	; 0x4f8 <reset_tx_data+0xe>
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	08 95       	ret

0000050a <reset_char_array>:
     50a:	66 23       	and	r22, r22
     50c:	59 f0       	breq	.+22     	; 0x524 <reset_char_array+0x1a>
     50e:	fc 01       	movw	r30, r24
     510:	61 50       	subi	r22, 0x01	; 1
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	6f 5f       	subi	r22, 0xFF	; 255
     516:	7f 4f       	sbci	r23, 0xFF	; 255
     518:	86 0f       	add	r24, r22
     51a:	97 1f       	adc	r25, r23
     51c:	11 92       	st	Z+, r1
     51e:	e8 17       	cp	r30, r24
     520:	f9 07       	cpc	r31, r25
     522:	e1 f7       	brne	.-8      	; 0x51c <reset_char_array+0x12>
     524:	08 95       	ret

00000526 <reset_all_data>:
     526:	64 e6       	ldi	r22, 0x64	; 100
     528:	8b e5       	ldi	r24, 0x5B	; 91
     52a:	95 e0       	ldi	r25, 0x05	; 5
     52c:	ee df       	rcall	.-36     	; 0x50a <reset_char_array>
     52e:	64 e6       	ldi	r22, 0x64	; 100
     530:	80 e6       	ldi	r24, 0x60	; 96
     532:	94 e0       	ldi	r25, 0x04	; 4
     534:	ea df       	rcall	.-44     	; 0x50a <reset_char_array>
     536:	41 e1       	ldi	r20, 0x11	; 17
     538:	67 e3       	ldi	r22, 0x37	; 55
     53a:	73 e0       	ldi	r23, 0x03	; 3
     53c:	80 e6       	ldi	r24, 0x60	; 96
     53e:	95 e0       	ldi	r25, 0x05	; 5
     540:	d4 cf       	rjmp	.-88     	; 0x4ea <reset_tx_data>
     542:	08 95       	ret

00000544 <rtc_init_period>:
     544:	14 be       	out	0x34, r1	; 52
     546:	e0 e6       	ldi	r30, 0x60	; 96
     548:	f0 e0       	ldi	r31, 0x00	; 0
     54a:	88 e1       	ldi	r24, 0x18	; 24
     54c:	80 83       	st	Z, r24
     54e:	80 e6       	ldi	r24, 0x60	; 96
     550:	80 83       	st	Z, r24
     552:	08 95       	ret

00000554 <loadcell_pins_init>:
     554:	09 9a       	sbi	0x01, 1	; 1
     556:	11 98       	cbi	0x02, 1	; 2
     558:	08 95       	ret

0000055a <radio_pins_init>:
     55a:	54 9a       	sbi	0x0a, 4	; 10
     55c:	55 98       	cbi	0x0a, 5	; 10
     55e:	08 95       	ret

00000560 <eeprom_pins_init>:
     560:	39 9a       	sbi	0x07, 1	; 7
     562:	38 9a       	sbi	0x07, 0	; 7
     564:	3e 9a       	sbi	0x07, 6	; 7
     566:	41 9a       	sbi	0x08, 1	; 8
     568:	40 9a       	sbi	0x08, 0	; 8
     56a:	46 9a       	sbi	0x08, 6	; 8
     56c:	08 95       	ret

0000056e <my_delay_10ms>:
     56e:	cf 93       	push	r28
     570:	88 23       	and	r24, r24
     572:	41 f0       	breq	.+16     	; 0x584 <my_delay_10ms+0x16>
     574:	c8 2f       	mov	r28, r24
     576:	63 e8       	ldi	r22, 0x83	; 131
     578:	76 e0       	ldi	r23, 0x06	; 6
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	96 df       	rcall	.-212    	; 0x4ac <__portable_avr_delay_cycles>
     580:	c1 50       	subi	r28, 0x01	; 1
     582:	c9 f7       	brne	.-14     	; 0x576 <my_delay_10ms+0x8>
     584:	cf 91       	pop	r28
     586:	08 95       	ret

00000588 <loadcell_power_on>:
     588:	11 9a       	sbi	0x02, 1	; 2
     58a:	66 e3       	ldi	r22, 0x36	; 54
     58c:	75 e0       	ldi	r23, 0x05	; 5
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	8c cf       	rjmp	.-232    	; 0x4ac <__portable_avr_delay_cycles>
     594:	08 95       	ret

00000596 <loadcell_power_off>:
     596:	11 98       	cbi	0x02, 1	; 2
     598:	08 95       	ret

0000059a <radio_power_on>:
     59a:	1f 93       	push	r17
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	5c 98       	cbi	0x0b, 4	; 11
     5a2:	6b e1       	ldi	r22, 0x1B	; 27
     5a4:	71 e4       	ldi	r23, 0x41	; 65
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	80 df       	rcall	.-256    	; 0x4ac <__portable_avr_delay_cycles>
     5ac:	5c 9a       	sbi	0x0b, 4	; 11
     5ae:	6b e0       	ldi	r22, 0x0B	; 11
     5b0:	7b e8       	ldi	r23, 0x8B	; 139
     5b2:	82 e0       	ldi	r24, 0x02	; 2
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	7a df       	rcall	.-268    	; 0x4ac <__portable_avr_delay_cycles>
     5b8:	5c 98       	cbi	0x0b, 4	; 11
     5ba:	4d 99       	sbic	0x09, 5	; 9
     5bc:	16 c0       	rjmp	.+44     	; 0x5ea <radio_power_on+0x50>
     5be:	c0 e0       	ldi	r28, 0x00	; 0
     5c0:	d1 e0       	ldi	r29, 0x01	; 1
     5c2:	10 e0       	ldi	r17, 0x00	; 0
     5c4:	66 e3       	ldi	r22, 0x36	; 54
     5c6:	72 e8       	ldi	r23, 0x82	; 130
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	6f df       	rcall	.-290    	; 0x4ac <__portable_avr_delay_cycles>
     5ce:	cf 5f       	subi	r28, 0xFF	; 255
     5d0:	89 b1       	in	r24, 0x09	; 9
     5d2:	85 fb       	bst	r24, 5
     5d4:	88 27       	eor	r24, r24
     5d6:	80 f9       	bld	r24, 0
     5d8:	8d 17       	cp	r24, r29
     5da:	41 f0       	breq	.+16     	; 0x5ec <radio_power_on+0x52>
     5dc:	8d 2f       	mov	r24, r29
     5de:	cb 31       	cpi	r28, 0x1B	; 27
     5e0:	08 f0       	brcs	.+2      	; 0x5e4 <radio_power_on+0x4a>
     5e2:	81 2f       	mov	r24, r17
     5e4:	81 11       	cpse	r24, r1
     5e6:	ee cf       	rjmp	.-36     	; 0x5c4 <radio_power_on+0x2a>
     5e8:	01 c0       	rjmp	.+2      	; 0x5ec <radio_power_on+0x52>
     5ea:	c0 e0       	ldi	r28, 0x00	; 0
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	cb 31       	cpi	r28, 0x1B	; 27
     5f0:	09 f0       	breq	.+2      	; 0x5f4 <radio_power_on+0x5a>
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	1f 91       	pop	r17
     5fa:	08 95       	ret

000005fc <radio_power_off>:
     5fc:	ff 92       	push	r15
     5fe:	0f 93       	push	r16
     600:	1f 93       	push	r17
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	c0 e0       	ldi	r28, 0x00	; 0
     608:	01 e0       	ldi	r16, 0x01	; 1
     60a:	f1 2c       	mov	r15, r1
     60c:	d0 2f       	mov	r29, r16
     60e:	1f 2d       	mov	r17, r15
     610:	5c 98       	cbi	0x0b, 4	; 11
     612:	5c 9a       	sbi	0x0b, 4	; 11
     614:	80 e5       	ldi	r24, 0x50	; 80
     616:	ab df       	rcall	.-170    	; 0x56e <my_delay_10ms>
     618:	5c 98       	cbi	0x0b, 4	; 11
     61a:	4d 9b       	sbis	0x09, 5	; 9
     61c:	14 c0       	rjmp	.+40     	; 0x646 <radio_power_off+0x4a>
     61e:	80 2f       	mov	r24, r16
     620:	cc 30       	cpi	r28, 0x0C	; 12
     622:	08 f0       	brcs	.+2      	; 0x626 <radio_power_off+0x2a>
     624:	8f 2d       	mov	r24, r15
     626:	88 23       	and	r24, r24
     628:	71 f0       	breq	.+28     	; 0x646 <radio_power_off+0x4a>
     62a:	6b e0       	ldi	r22, 0x0B	; 11
     62c:	7b e8       	ldi	r23, 0x8B	; 139
     62e:	82 e0       	ldi	r24, 0x02	; 2
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	3c df       	rcall	.-392    	; 0x4ac <__portable_avr_delay_cycles>
     634:	cf 5f       	subi	r28, 0xFF	; 255
     636:	4d 9b       	sbis	0x09, 5	; 9
     638:	06 c0       	rjmp	.+12     	; 0x646 <radio_power_off+0x4a>
     63a:	8d 2f       	mov	r24, r29
     63c:	cc 30       	cpi	r28, 0x0C	; 12
     63e:	08 f0       	brcs	.+2      	; 0x642 <radio_power_off+0x46>
     640:	81 2f       	mov	r24, r17
     642:	81 11       	cpse	r24, r1
     644:	f2 cf       	rjmp	.-28     	; 0x62a <radio_power_off+0x2e>
     646:	cb 31       	cpi	r28, 0x1B	; 27
     648:	19 f3       	breq	.-58     	; 0x610 <radio_power_off+0x14>
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	df 91       	pop	r29
     64e:	cf 91       	pop	r28
     650:	1f 91       	pop	r17
     652:	0f 91       	pop	r16
     654:	ff 90       	pop	r15
     656:	08 95       	ret

00000658 <radio_power_off_at>:
     658:	1f 93       	push	r17
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	4d 9b       	sbis	0x09, 5	; 9
     660:	2d c0       	rjmp	.+90     	; 0x6bc <radio_power_off_at+0x64>
     662:	c0 e0       	ldi	r28, 0x00	; 0
     664:	d1 e0       	ldi	r29, 0x01	; 1
     666:	10 e0       	ldi	r17, 0x00	; 0
     668:	6a e3       	ldi	r22, 0x3A	; 58
     66a:	71 e0       	ldi	r23, 0x01	; 1
     66c:	88 ec       	ldi	r24, 0xC8	; 200
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	28 df       	rcall	.-432    	; 0x4c2 <usart_tx_at>
     672:	6a e3       	ldi	r22, 0x3A	; 58
     674:	71 e0       	ldi	r23, 0x01	; 1
     676:	80 ec       	ldi	r24, 0xC0	; 192
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	23 df       	rcall	.-442    	; 0x4c2 <usart_tx_at>
     67c:	6b e2       	ldi	r22, 0x2B	; 43
     67e:	7c e2       	ldi	r23, 0x2C	; 44
     680:	8a e0       	ldi	r24, 0x0A	; 10
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	13 df       	rcall	.-474    	; 0x4ac <__portable_avr_delay_cycles>
     686:	4d 9b       	sbis	0x09, 5	; 9
     688:	0f c0       	rjmp	.+30     	; 0x6a8 <radio_power_off_at+0x50>
     68a:	66 e4       	ldi	r22, 0x46	; 70
     68c:	71 e0       	ldi	r23, 0x01	; 1
     68e:	88 ec       	ldi	r24, 0xC8	; 200
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	17 df       	rcall	.-466    	; 0x4c2 <usart_tx_at>
     694:	66 e4       	ldi	r22, 0x46	; 70
     696:	71 e0       	ldi	r23, 0x01	; 1
     698:	80 ec       	ldi	r24, 0xC0	; 192
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	12 df       	rcall	.-476    	; 0x4c2 <usart_tx_at>
     69e:	61 e4       	ldi	r22, 0x41	; 65
     6a0:	72 e4       	ldi	r23, 0x42	; 66
     6a2:	8f e0       	ldi	r24, 0x0F	; 15
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	02 df       	rcall	.-508    	; 0x4ac <__portable_avr_delay_cycles>
     6a8:	cf 5f       	subi	r28, 0xFF	; 255
     6aa:	4d 9b       	sbis	0x09, 5	; 9
     6ac:	08 c0       	rjmp	.+16     	; 0x6be <radio_power_off_at+0x66>
     6ae:	8d 2f       	mov	r24, r29
     6b0:	cb 31       	cpi	r28, 0x1B	; 27
     6b2:	08 f0       	brcs	.+2      	; 0x6b6 <radio_power_off_at+0x5e>
     6b4:	81 2f       	mov	r24, r17
     6b6:	81 11       	cpse	r24, r1
     6b8:	d7 cf       	rjmp	.-82     	; 0x668 <radio_power_off_at+0x10>
     6ba:	01 c0       	rjmp	.+2      	; 0x6be <radio_power_off_at+0x66>
     6bc:	c0 e0       	ldi	r28, 0x00	; 0
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	cb 31       	cpi	r28, 0x1B	; 27
     6c2:	09 f0       	breq	.+2      	; 0x6c6 <radio_power_off_at+0x6e>
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	1f 91       	pop	r17
     6cc:	08 95       	ret

000006ce <adc_10_to_12_bits>:
     6ce:	cf 92       	push	r12
     6d0:	df 92       	push	r13
     6d2:	ff 92       	push	r15
     6d4:	0f 93       	push	r16
     6d6:	1f 93       	push	r17
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
     6dc:	cd b7       	in	r28, 0x3d	; 61
     6de:	de b7       	in	r29, 0x3e	; 62
     6e0:	27 97       	sbiw	r28, 0x07	; 7
     6e2:	0f b6       	in	r0, 0x3f	; 63
     6e4:	f8 94       	cli
     6e6:	de bf       	out	0x3e, r29	; 62
     6e8:	0f be       	out	0x3f, r0	; 63
     6ea:	cd bf       	out	0x3d, r28	; 61
     6ec:	1a 82       	std	Y+2, r1	; 0x02
     6ee:	19 82       	std	Y+1, r1	; 0x01
     6f0:	93 e8       	ldi	r25, 0x83	; 131
     6f2:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     6f6:	68 94       	set
     6f8:	ff 24       	eor	r15, r15
     6fa:	f4 f8       	bld	r15, 4
     6fc:	0c e7       	ldi	r16, 0x7C	; 124
     6fe:	10 e0       	ldi	r17, 0x00	; 0
     700:	ea e7       	ldi	r30, 0x7A	; 122
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	0f 2e       	mov	r0, r31
     706:	f8 e7       	ldi	r31, 0x78	; 120
     708:	cf 2e       	mov	r12, r31
     70a:	d1 2c       	mov	r13, r1
     70c:	f0 2d       	mov	r31, r0
     70e:	80 6c       	ori	r24, 0xC0	; 192
     710:	1c c0       	rjmp	.+56     	; 0x74a <adc_10_to_12_bits+0x7c>
     712:	d8 01       	movw	r26, r16
     714:	8c 93       	st	X, r24
     716:	90 81       	ld	r25, Z
     718:	90 64       	ori	r25, 0x40	; 64
     71a:	90 83       	st	Z, r25
     71c:	90 81       	ld	r25, Z
     71e:	96 fd       	sbrc	r25, 6
     720:	fd cf       	rjmp	.-6      	; 0x71c <adc_10_to_12_bits+0x4e>
     722:	d6 01       	movw	r26, r12
     724:	6d 91       	ld	r22, X+
     726:	7c 91       	ld	r23, X
     728:	46 0f       	add	r20, r22
     72a:	57 1f       	adc	r21, r23
     72c:	21 50       	subi	r18, 0x01	; 1
     72e:	89 f7       	brne	.-30     	; 0x712 <adc_10_to_12_bits+0x44>
     730:	29 81       	ldd	r18, Y+1	; 0x01
     732:	3a 81       	ldd	r19, Y+2	; 0x02
     734:	56 95       	lsr	r21
     736:	47 95       	ror	r20
     738:	56 95       	lsr	r21
     73a:	47 95       	ror	r20
     73c:	42 0f       	add	r20, r18
     73e:	53 1f       	adc	r21, r19
     740:	5a 83       	std	Y+2, r21	; 0x02
     742:	49 83       	std	Y+1, r20	; 0x01
     744:	fa 94       	dec	r15
     746:	ff 20       	and	r15, r15
     748:	21 f0       	breq	.+8      	; 0x752 <adc_10_to_12_bits+0x84>
     74a:	24 e0       	ldi	r18, 0x04	; 4
     74c:	40 e0       	ldi	r20, 0x00	; 0
     74e:	50 e0       	ldi	r21, 0x00	; 0
     750:	e0 cf       	rjmp	.-64     	; 0x712 <adc_10_to_12_bits+0x44>
     752:	89 81       	ldd	r24, Y+1	; 0x01
     754:	9a 81       	ldd	r25, Y+2	; 0x02
     756:	96 95       	lsr	r25
     758:	87 95       	ror	r24
     75a:	96 95       	lsr	r25
     75c:	87 95       	ror	r24
     75e:	9a 83       	std	Y+2, r25	; 0x02
     760:	89 83       	std	Y+1, r24	; 0x01
     762:	29 81       	ldd	r18, Y+1	; 0x01
     764:	3a 81       	ldd	r19, Y+2	; 0x02
     766:	a8 eb       	ldi	r26, 0xB8	; 184
     768:	be e3       	ldi	r27, 0x3E	; 62
     76a:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <__umulhisi3>
     76e:	dc 01       	movw	r26, r24
     770:	cb 01       	movw	r24, r22
     772:	90 5e       	subi	r25, 0xE0	; 224
     774:	af 4f       	sbci	r26, 0xFF	; 255
     776:	bf 4f       	sbci	r27, 0xFF	; 255
     778:	88 0f       	add	r24, r24
     77a:	99 1f       	adc	r25, r25
     77c:	aa 1f       	adc	r26, r26
     77e:	bb 1f       	adc	r27, r27
     780:	88 0f       	add	r24, r24
     782:	99 1f       	adc	r25, r25
     784:	aa 1f       	adc	r26, r26
     786:	bb 1f       	adc	r27, r27
     788:	cd 01       	movw	r24, r26
     78a:	bb 27       	eor	r27, r27
     78c:	97 fd       	sbrc	r25, 7
     78e:	b0 95       	com	r27
     790:	ab 2f       	mov	r26, r27
     792:	9a 83       	std	Y+2, r25	; 0x02
     794:	89 83       	std	Y+1, r24	; 0x01
     796:	1c 82       	std	Y+4, r1	; 0x04
     798:	1b 82       	std	Y+3, r1	; 0x03
     79a:	fe 01       	movw	r30, r28
     79c:	35 96       	adiw	r30, 0x05	; 5
     79e:	83 e0       	ldi	r24, 0x03	; 3
     7a0:	df 01       	movw	r26, r30
     7a2:	1d 92       	st	X+, r1
     7a4:	8a 95       	dec	r24
     7a6:	e9 f7       	brne	.-6      	; 0x7a2 <adc_10_to_12_bits+0xd4>
     7a8:	65 e0       	ldi	r22, 0x05	; 5
     7aa:	ce 01       	movw	r24, r28
     7ac:	03 96       	adiw	r24, 0x03	; 3
     7ae:	ad de       	rcall	.-678    	; 0x50a <reset_char_array>
     7b0:	89 81       	ldd	r24, Y+1	; 0x01
     7b2:	9a 81       	ldd	r25, Y+2	; 0x02
     7b4:	4a e0       	ldi	r20, 0x0A	; 10
     7b6:	be 01       	movw	r22, r28
     7b8:	6d 5f       	subi	r22, 0xFD	; 253
     7ba:	7f 4f       	sbci	r23, 0xFF	; 255
     7bc:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__itoa_ncheck>
     7c0:	6d ec       	ldi	r22, 0xCD	; 205
     7c2:	72 e0       	ldi	r23, 0x02	; 2
     7c4:	88 ec       	ldi	r24, 0xC8	; 200
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	7c de       	rcall	.-776    	; 0x4c2 <usart_tx_at>
     7ca:	be 01       	movw	r22, r28
     7cc:	6d 5f       	subi	r22, 0xFD	; 253
     7ce:	7f 4f       	sbci	r23, 0xFF	; 255
     7d0:	88 ec       	ldi	r24, 0xC8	; 200
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	76 de       	rcall	.-788    	; 0x4c2 <usart_tx_at>
     7d6:	6d ec       	ldi	r22, 0xCD	; 205
     7d8:	72 e0       	ldi	r23, 0x02	; 2
     7da:	88 ec       	ldi	r24, 0xC8	; 200
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	71 de       	rcall	.-798    	; 0x4c2 <usart_tx_at>
     7e0:	89 81       	ldd	r24, Y+1	; 0x01
     7e2:	9a 81       	ldd	r25, Y+2	; 0x02
     7e4:	27 96       	adiw	r28, 0x07	; 7
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	f8 94       	cli
     7ea:	de bf       	out	0x3e, r29	; 62
     7ec:	0f be       	out	0x3f, r0	; 63
     7ee:	cd bf       	out	0x3d, r28	; 61
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	ff 90       	pop	r15
     7fa:	df 90       	pop	r13
     7fc:	cf 90       	pop	r12
     7fe:	08 95       	ret

00000800 <at_get_radio_network_time>:
     800:	ef 92       	push	r14
     802:	ff 92       	push	r15
     804:	0f 93       	push	r16
     806:	1f 93       	push	r17
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	00 d0       	rcall	.+0      	; 0x80e <at_get_radio_network_time+0xe>
     80e:	1f 92       	push	r1
     810:	cd b7       	in	r28, 0x3d	; 61
     812:	de b7       	in	r29, 0x3e	; 62
     814:	1a 82       	std	Y+2, r1	; 0x02
     816:	19 82       	std	Y+1, r1	; 0x01
     818:	1b 82       	std	Y+3, r1	; 0x03
     81a:	0f 2e       	mov	r0, r31
     81c:	fe ee       	ldi	r31, 0xEE	; 238
     81e:	ef 2e       	mov	r14, r31
     820:	f4 e0       	ldi	r31, 0x04	; 4
     822:	ff 2e       	mov	r15, r31
     824:	f0 2d       	mov	r31, r0
     826:	0a e0       	ldi	r16, 0x0A	; 10
     828:	10 e0       	ldi	r17, 0x00	; 0
     82a:	f7 01       	movw	r30, r14
     82c:	31 97       	sbiw	r30, 0x01	; 1
     82e:	80 81       	ld	r24, Z
     830:	89 83       	std	Y+1, r24	; 0x01
     832:	f7 01       	movw	r30, r14
     834:	80 81       	ld	r24, Z
     836:	8a 83       	std	Y+2, r24	; 0x02
     838:	ce 01       	movw	r24, r28
     83a:	01 96       	adiw	r24, 0x01	; 1
     83c:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <atoi>
     840:	f8 01       	movw	r30, r16
     842:	ee 0f       	add	r30, r30
     844:	ff 1f       	adc	r31, r31
     846:	e0 5a       	subi	r30, 0xA0	; 160
     848:	fa 4f       	sbci	r31, 0xFA	; 250
     84a:	91 83       	std	Z+1, r25	; 0x01
     84c:	80 83       	st	Z, r24
     84e:	f3 e0       	ldi	r31, 0x03	; 3
     850:	ef 0e       	add	r14, r31
     852:	f1 1c       	adc	r15, r1
     854:	0f 5f       	subi	r16, 0xFF	; 255
     856:	1f 4f       	sbci	r17, 0xFF	; 255
     858:	00 31       	cpi	r16, 0x10	; 16
     85a:	11 05       	cpc	r17, r1
     85c:	31 f7       	brne	.-52     	; 0x82a <at_get_radio_network_time+0x2a>
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	1f 91       	pop	r17
     86a:	0f 91       	pop	r16
     86c:	ff 90       	pop	r15
     86e:	ef 90       	pop	r14
     870:	08 95       	ret

00000872 <tx_at_response>:
     872:	0f 93       	push	r16
     874:	1f 93       	push	r17
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	ec 01       	movw	r28, r24
     87c:	88 85       	ldd	r24, Y+8	; 0x08
     87e:	88 23       	and	r24, r24
     880:	09 f4       	brne	.+2      	; 0x884 <tx_at_response+0x12>
     882:	77 c0       	rjmp	.+238    	; 0x972 <__stack+0x73>
     884:	10 e0       	ldi	r17, 0x00	; 0
     886:	00 e0       	ldi	r16, 0x00	; 0
     888:	60 e8       	ldi	r22, 0x80	; 128
     88a:	8b ed       	ldi	r24, 0xDB	; 219
     88c:	94 e0       	ldi	r25, 0x04	; 4
     88e:	3d de       	rcall	.-902    	; 0x50a <reset_char_array>
     890:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <response_counter>
     894:	8c 81       	ldd	r24, Y+4	; 0x04
     896:	9d 81       	ldd	r25, Y+5	; 0x05
     898:	ae 81       	ldd	r26, Y+6	; 0x06
     89a:	bf 81       	ldd	r27, Y+7	; 0x07
     89c:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <response_timeout>
     8a0:	90 93 d0 04 	sts	0x04D0, r25	; 0x8004d0 <response_timeout+0x1>
     8a4:	a0 93 d1 04 	sts	0x04D1, r26	; 0x8004d1 <response_timeout+0x2>
     8a8:	b0 93 d2 04 	sts	0x04D2, r27	; 0x8004d2 <response_timeout+0x3>
     8ac:	10 92 cb 04 	sts	0x04CB, r1	; 0x8004cb <response_timeout_counter>
     8b0:	10 92 cc 04 	sts	0x04CC, r1	; 0x8004cc <response_timeout_counter+0x1>
     8b4:	10 92 cd 04 	sts	0x04CD, r1	; 0x8004cd <response_timeout_counter+0x2>
     8b8:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <response_timeout_counter+0x3>
     8bc:	68 81       	ld	r22, Y
     8be:	79 81       	ldd	r23, Y+1	; 0x01
     8c0:	80 ec       	ldi	r24, 0xC0	; 192
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	fe dd       	rcall	.-1028   	; 0x4c2 <usart_tx_at>
     8c6:	78 94       	sei
     8c8:	e0 ec       	ldi	r30, 0xC0	; 192
     8ca:	f0 e0       	ldi	r31, 0x00	; 0
     8cc:	81 81       	ldd	r24, Z+1	; 0x01
     8ce:	80 68       	ori	r24, 0x80	; 128
     8d0:	81 83       	std	Z+1, r24	; 0x01
     8d2:	40 91 cb 04 	lds	r20, 0x04CB	; 0x8004cb <response_timeout_counter>
     8d6:	50 91 cc 04 	lds	r21, 0x04CC	; 0x8004cc <response_timeout_counter+0x1>
     8da:	60 91 cd 04 	lds	r22, 0x04CD	; 0x8004cd <response_timeout_counter+0x2>
     8de:	70 91 ce 04 	lds	r23, 0x04CE	; 0x8004ce <response_timeout_counter+0x3>
     8e2:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <response_timeout>
     8e6:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <response_timeout+0x1>
     8ea:	a0 91 d1 04 	lds	r26, 0x04D1	; 0x8004d1 <response_timeout+0x2>
     8ee:	b0 91 d2 04 	lds	r27, 0x04D2	; 0x8004d2 <response_timeout+0x3>
     8f2:	48 17       	cp	r20, r24
     8f4:	59 07       	cpc	r21, r25
     8f6:	6a 07       	cpc	r22, r26
     8f8:	7b 07       	cpc	r23, r27
     8fa:	98 f5       	brcc	.+102    	; 0x962 <__stack+0x63>
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	37 de       	rcall	.-914    	; 0x56e <my_delay_10ms>
     900:	6a 81       	ldd	r22, Y+2	; 0x02
     902:	7b 81       	ldd	r23, Y+3	; 0x03
     904:	8b ed       	ldi	r24, 0xDB	; 219
     906:	94 e0       	ldi	r25, 0x04	; 4
     908:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <strstr>
     90c:	89 2b       	or	r24, r25
     90e:	99 f5       	brne	.+102    	; 0x976 <__stack+0x77>
     910:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <response_timeout_counter>
     914:	90 91 cc 04 	lds	r25, 0x04CC	; 0x8004cc <response_timeout_counter+0x1>
     918:	a0 91 cd 04 	lds	r26, 0x04CD	; 0x8004cd <response_timeout_counter+0x2>
     91c:	b0 91 ce 04 	lds	r27, 0x04CE	; 0x8004ce <response_timeout_counter+0x3>
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	a1 1d       	adc	r26, r1
     924:	b1 1d       	adc	r27, r1
     926:	80 93 cb 04 	sts	0x04CB, r24	; 0x8004cb <response_timeout_counter>
     92a:	90 93 cc 04 	sts	0x04CC, r25	; 0x8004cc <response_timeout_counter+0x1>
     92e:	a0 93 cd 04 	sts	0x04CD, r26	; 0x8004cd <response_timeout_counter+0x2>
     932:	b0 93 ce 04 	sts	0x04CE, r27	; 0x8004ce <response_timeout_counter+0x3>
     936:	40 91 cb 04 	lds	r20, 0x04CB	; 0x8004cb <response_timeout_counter>
     93a:	50 91 cc 04 	lds	r21, 0x04CC	; 0x8004cc <response_timeout_counter+0x1>
     93e:	60 91 cd 04 	lds	r22, 0x04CD	; 0x8004cd <response_timeout_counter+0x2>
     942:	70 91 ce 04 	lds	r23, 0x04CE	; 0x8004ce <response_timeout_counter+0x3>
     946:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <response_timeout>
     94a:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <response_timeout+0x1>
     94e:	a0 91 d1 04 	lds	r26, 0x04D1	; 0x8004d1 <response_timeout+0x2>
     952:	b0 91 d2 04 	lds	r27, 0x04D2	; 0x8004d2 <response_timeout+0x3>
     956:	48 17       	cp	r20, r24
     958:	59 07       	cpc	r21, r25
     95a:	6a 07       	cpc	r22, r26
     95c:	7b 07       	cpc	r23, r27
     95e:	70 f2       	brcs	.-100    	; 0x8fc <tx_at_response+0x8a>
     960:	01 e0       	ldi	r16, 0x01	; 1
     962:	8e e1       	ldi	r24, 0x1E	; 30
     964:	04 de       	rcall	.-1016   	; 0x56e <my_delay_10ms>
     966:	1f 5f       	subi	r17, 0xFF	; 255
     968:	88 85       	ldd	r24, Y+8	; 0x08
     96a:	18 17       	cp	r17, r24
     96c:	08 f4       	brcc	.+2      	; 0x970 <__stack+0x71>
     96e:	8c cf       	rjmp	.-232    	; 0x888 <tx_at_response+0x16>
     970:	03 c0       	rjmp	.+6      	; 0x978 <__stack+0x79>
     972:	00 e0       	ldi	r16, 0x00	; 0
     974:	01 c0       	rjmp	.+2      	; 0x978 <__stack+0x79>
     976:	00 e0       	ldi	r16, 0x00	; 0
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	f9 dd       	rcall	.-1038   	; 0x56e <my_delay_10ms>
     97c:	e0 ec       	ldi	r30, 0xC0	; 192
     97e:	f0 e0       	ldi	r31, 0x00	; 0
     980:	81 81       	ldd	r24, Z+1	; 0x01
     982:	8f 77       	andi	r24, 0x7F	; 127
     984:	81 83       	std	Z+1, r24	; 0x01
     986:	6b ed       	ldi	r22, 0xDB	; 219
     988:	74 e0       	ldi	r23, 0x04	; 4
     98a:	88 ec       	ldi	r24, 0xC8	; 200
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	99 dd       	rcall	.-1230   	; 0x4c2 <usart_tx_at>
     990:	80 2f       	mov	r24, r16
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	1f 91       	pop	r17
     998:	0f 91       	pop	r16
     99a:	08 95       	ret

0000099c <tx_data_response>:
     99c:	ef 92       	push	r14
     99e:	ff 92       	push	r15
     9a0:	0f 93       	push	r16
     9a2:	1f 93       	push	r17
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	7c 01       	movw	r14, r24
     9aa:	8b 01       	movw	r16, r22
     9ac:	60 e8       	ldi	r22, 0x80	; 128
     9ae:	8b ed       	ldi	r24, 0xDB	; 219
     9b0:	94 e0       	ldi	r25, 0x04	; 4
     9b2:	ab dd       	rcall	.-1194   	; 0x50a <reset_char_array>
     9b4:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <response_counter>
     9b8:	10 16       	cp	r1, r16
     9ba:	11 06       	cpc	r1, r17
     9bc:	74 f4       	brge	.+28     	; 0x9da <tx_data_response+0x3e>
     9be:	c0 e0       	ldi	r28, 0x00	; 0
     9c0:	f7 01       	movw	r30, r14
     9c2:	ec 0f       	add	r30, r28
     9c4:	f1 1d       	adc	r31, r1
     9c6:	60 81       	ld	r22, Z
     9c8:	80 ec       	ldi	r24, 0xC0	; 192
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	61 dc       	rcall	.-1854   	; 0x290 <usart_putchar>
     9ce:	cf 5f       	subi	r28, 0xFF	; 255
     9d0:	8c 2f       	mov	r24, r28
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	80 17       	cp	r24, r16
     9d6:	91 07       	cpc	r25, r17
     9d8:	9c f3       	brlt	.-26     	; 0x9c0 <tx_data_response+0x24>
     9da:	60 e0       	ldi	r22, 0x00	; 0
     9dc:	80 ec       	ldi	r24, 0xC0	; 192
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	57 dc       	rcall	.-1874   	; 0x290 <usart_putchar>
     9e2:	78 94       	sei
     9e4:	c0 ec       	ldi	r28, 0xC0	; 192
     9e6:	d0 e0       	ldi	r29, 0x00	; 0
     9e8:	89 81       	ldd	r24, Y+1	; 0x01
     9ea:	80 68       	ori	r24, 0x80	; 128
     9ec:	89 83       	std	Y+1, r24	; 0x01
     9ee:	8e e1       	ldi	r24, 0x1E	; 30
     9f0:	be dd       	rcall	.-1156   	; 0x56e <my_delay_10ms>
     9f2:	89 81       	ldd	r24, Y+1	; 0x01
     9f4:	8f 77       	andi	r24, 0x7F	; 127
     9f6:	89 83       	std	Y+1, r24	; 0x01
     9f8:	6b ed       	ldi	r22, 0xDB	; 219
     9fa:	74 e0       	ldi	r23, 0x04	; 4
     9fc:	88 ec       	ldi	r24, 0xC8	; 200
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	60 dd       	rcall	.-1344   	; 0x4c2 <usart_tx_at>
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	1f 91       	pop	r17
     a0a:	0f 91       	pop	r16
     a0c:	ff 90       	pop	r15
     a0e:	ef 90       	pop	r14
     a10:	08 95       	ret

00000a12 <data_to_char>:
     a12:	7f 92       	push	r7
     a14:	8f 92       	push	r8
     a16:	9f 92       	push	r9
     a18:	af 92       	push	r10
     a1a:	bf 92       	push	r11
     a1c:	cf 92       	push	r12
     a1e:	df 92       	push	r13
     a20:	ef 92       	push	r14
     a22:	ff 92       	push	r15
     a24:	0f 93       	push	r16
     a26:	1f 93       	push	r17
     a28:	cf 93       	push	r28
     a2a:	df 93       	push	r29
     a2c:	00 d0       	rcall	.+0      	; 0xa2e <data_to_char+0x1c>
     a2e:	00 d0       	rcall	.+0      	; 0xa30 <data_to_char+0x1e>
     a30:	1f 92       	push	r1
     a32:	cd b7       	in	r28, 0x3d	; 61
     a34:	de b7       	in	r29, 0x3e	; 62
     a36:	6c 01       	movw	r12, r24
     a38:	1a 82       	std	Y+2, r1	; 0x02
     a3a:	19 82       	std	Y+1, r1	; 0x01
     a3c:	fe 01       	movw	r30, r28
     a3e:	33 96       	adiw	r30, 0x03	; 3
     a40:	93 e0       	ldi	r25, 0x03	; 3
     a42:	df 01       	movw	r26, r30
     a44:	1d 92       	st	X+, r1
     a46:	9a 95       	dec	r25
     a48:	e9 f7       	brne	.-6      	; 0xa44 <data_to_char+0x32>
     a4a:	e6 2e       	mov	r14, r22
     a4c:	f1 2c       	mov	r15, r1
     a4e:	b1 e0       	ldi	r27, 0x01	; 1
     a50:	eb 1a       	sub	r14, r27
     a52:	f1 08       	sbc	r15, r1
     a54:	5a f1       	brmi	.+86     	; 0xaac <data_to_char+0x9a>
     a56:	49 01       	movw	r8, r18
     a58:	5a 01       	movw	r10, r20
     a5a:	00 e0       	ldi	r16, 0x00	; 0
     a5c:	10 e0       	ldi	r17, 0x00	; 0
     a5e:	71 2c       	mov	r7, r1
     a60:	e7 2d       	mov	r30, r7
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	ee 0f       	add	r30, r30
     a66:	ff 1f       	adc	r31, r31
     a68:	ec 0d       	add	r30, r12
     a6a:	fd 1d       	adc	r31, r13
     a6c:	a4 01       	movw	r20, r8
     a6e:	be 01       	movw	r22, r28
     a70:	6f 5f       	subi	r22, 0xFF	; 255
     a72:	7f 4f       	sbci	r23, 0xFF	; 255
     a74:	80 81       	ld	r24, Z
     a76:	91 81       	ldd	r25, Z+1	; 0x01
     a78:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <itoa>
     a7c:	c8 01       	movw	r24, r16
     a7e:	88 0f       	add	r24, r24
     a80:	99 1f       	adc	r25, r25
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	80 0f       	add	r24, r16
     a88:	91 1f       	adc	r25, r17
     a8a:	be 01       	movw	r22, r28
     a8c:	6f 5f       	subi	r22, 0xFF	; 255
     a8e:	7f 4f       	sbci	r23, 0xFF	; 255
     a90:	8a 0d       	add	r24, r10
     a92:	9b 1d       	adc	r25, r11
     a94:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <strcpy>
     a98:	65 e0       	ldi	r22, 0x05	; 5
     a9a:	ce 01       	movw	r24, r28
     a9c:	01 96       	adiw	r24, 0x01	; 1
     a9e:	35 dd       	rcall	.-1430   	; 0x50a <reset_char_array>
     aa0:	73 94       	inc	r7
     aa2:	07 2d       	mov	r16, r7
     aa4:	10 e0       	ldi	r17, 0x00	; 0
     aa6:	e0 16       	cp	r14, r16
     aa8:	f1 06       	cpc	r15, r17
     aaa:	d4 f6       	brge	.-76     	; 0xa60 <data_to_char+0x4e>
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	0f 90       	pop	r0
     ab0:	0f 90       	pop	r0
     ab2:	0f 90       	pop	r0
     ab4:	0f 90       	pop	r0
     ab6:	0f 90       	pop	r0
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	1f 91       	pop	r17
     abe:	0f 91       	pop	r16
     ac0:	ff 90       	pop	r15
     ac2:	ef 90       	pop	r14
     ac4:	df 90       	pop	r13
     ac6:	cf 90       	pop	r12
     ac8:	bf 90       	pop	r11
     aca:	af 90       	pop	r10
     acc:	9f 90       	pop	r9
     ace:	8f 90       	pop	r8
     ad0:	7f 90       	pop	r7
     ad2:	08 95       	ret

00000ad4 <at_rf_status>:
     ad4:	8a e3       	ldi	r24, 0x3A	; 58
     ad6:	94 e0       	ldi	r25, 0x04	; 4
     ad8:	cc de       	rcall	.-616    	; 0x872 <tx_at_response>
     ada:	91 e0       	ldi	r25, 0x01	; 1
     adc:	81 30       	cpi	r24, 0x01	; 1
     ade:	09 f0       	breq	.+2      	; 0xae2 <at_rf_status+0xe>
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	89 2f       	mov	r24, r25
     ae4:	08 95       	ret

00000ae6 <at_rf_gprs>:
     ae6:	81 e3       	ldi	r24, 0x31	; 49
     ae8:	94 e0       	ldi	r25, 0x04	; 4
     aea:	c3 de       	rcall	.-634    	; 0x872 <tx_at_response>
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 95       	ret

00000af0 <at_rf_connect>:
     af0:	af 92       	push	r10
     af2:	bf 92       	push	r11
     af4:	cf 92       	push	r12
     af6:	df 92       	push	r13
     af8:	ef 92       	push	r14
     afa:	ff 92       	push	r15
     afc:	0f 93       	push	r16
     afe:	1f 93       	push	r17
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
     b04:	f1 2c       	mov	r15, r1
     b06:	ee 24       	eor	r14, r14
     b08:	e3 94       	inc	r14
     b0a:	68 94       	set
     b0c:	dd 24       	eor	r13, r13
     b0e:	d2 f8       	bld	r13, 2
     b10:	09 ee       	ldi	r16, 0xE9	; 233
     b12:	13 e0       	ldi	r17, 0x03	; 3
     b14:	c1 2c       	mov	r12, r1
     b16:	0f 2e       	mov	r0, r31
     b18:	f3 e0       	ldi	r31, 0x03	; 3
     b1a:	bf 2e       	mov	r11, r31
     b1c:	f0 2d       	mov	r31, r0
     b1e:	68 94       	set
     b20:	aa 24       	eor	r10, r10
     b22:	a1 f8       	bld	r10, 1
     b24:	82 30       	cpi	r24, 0x02	; 2
     b26:	61 f1       	breq	.+88     	; 0xb80 <at_rf_connect+0x90>
     b28:	28 f4       	brcc	.+10     	; 0xb34 <at_rf_connect+0x44>
     b2a:	88 23       	and	r24, r24
     b2c:	49 f0       	breq	.+18     	; 0xb40 <at_rf_connect+0x50>
     b2e:	81 30       	cpi	r24, 0x01	; 1
     b30:	b9 f0       	breq	.+46     	; 0xb60 <at_rf_connect+0x70>
     b32:	f8 cf       	rjmp	.-16     	; 0xb24 <at_rf_connect+0x34>
     b34:	83 30       	cpi	r24, 0x03	; 3
     b36:	59 f1       	breq	.+86     	; 0xb8e <at_rf_connect+0x9e>
     b38:	84 30       	cpi	r24, 0x04	; 4
     b3a:	09 f4       	brne	.+2      	; 0xb3e <at_rf_connect+0x4e>
     b3c:	43 c0       	rjmp	.+134    	; 0xbc4 <at_rf_connect+0xd4>
     b3e:	f2 cf       	rjmp	.-28     	; 0xb24 <at_rf_connect+0x34>
     b40:	cf e8       	ldi	r28, 0x8F	; 143
     b42:	d3 e0       	ldi	r29, 0x03	; 3
     b44:	ce 01       	movw	r24, r28
     b46:	95 de       	rcall	.-726    	; 0x872 <tx_at_response>
     b48:	29 96       	adiw	r28, 0x09	; 9
     b4a:	0c 17       	cp	r16, r28
     b4c:	1d 07       	cpc	r17, r29
     b4e:	d1 f7       	brne	.-12     	; 0xb44 <at_rf_connect+0x54>
     b50:	88 e2       	ldi	r24, 0x28	; 40
     b52:	94 e0       	ldi	r25, 0x04	; 4
     b54:	8e de       	rcall	.-740    	; 0x872 <tx_at_response>
     b56:	81 11       	cpse	r24, r1
     b58:	24 c0       	rjmp	.+72     	; 0xba2 <at_rf_connect+0xb2>
     b5a:	52 de       	rcall	.-860    	; 0x800 <at_get_radio_network_time>
     b5c:	8e 2d       	mov	r24, r14
     b5e:	e2 cf       	rjmp	.-60     	; 0xb24 <at_rf_connect+0x34>
     b60:	8b ef       	ldi	r24, 0xFB	; 251
     b62:	93 e0       	ldi	r25, 0x03	; 3
     b64:	86 de       	rcall	.-756    	; 0x872 <tx_at_response>
     b66:	88 23       	and	r24, r24
     b68:	f1 f0       	breq	.+60     	; 0xba6 <at_rf_connect+0xb6>
     b6a:	c8 01       	movw	r24, r16
     b6c:	82 de       	rcall	.-764    	; 0x872 <tx_at_response>
     b6e:	88 23       	and	r24, r24
     b70:	e9 f0       	breq	.+58     	; 0xbac <at_rf_connect+0xbc>
     b72:	82 ef       	ldi	r24, 0xF2	; 242
     b74:	93 e0       	ldi	r25, 0x03	; 3
     b76:	7d de       	rcall	.-774    	; 0x872 <tx_at_response>
     b78:	88 23       	and	r24, r24
     b7a:	d9 f0       	breq	.+54     	; 0xbb2 <at_rf_connect+0xc2>
     b7c:	8a 2d       	mov	r24, r10
     b7e:	d2 cf       	rjmp	.-92     	; 0xb24 <at_rf_connect+0x34>
     b80:	8d e0       	ldi	r24, 0x0D	; 13
     b82:	94 e0       	ldi	r25, 0x04	; 4
     b84:	76 de       	rcall	.-788    	; 0x872 <tx_at_response>
     b86:	88 23       	and	r24, r24
     b88:	b9 f0       	breq	.+46     	; 0xbb8 <at_rf_connect+0xc8>
     b8a:	8e 2d       	mov	r24, r14
     b8c:	cb cf       	rjmp	.-106    	; 0xb24 <at_rf_connect+0x34>
     b8e:	86 e1       	ldi	r24, 0x16	; 22
     b90:	94 e0       	ldi	r25, 0x04	; 4
     b92:	6f de       	rcall	.-802    	; 0x872 <tx_at_response>
     b94:	81 30       	cpi	r24, 0x01	; 1
     b96:	99 f0       	breq	.+38     	; 0xbbe <at_rf_connect+0xce>
     b98:	8f e1       	ldi	r24, 0x1F	; 31
     b9a:	94 e0       	ldi	r25, 0x04	; 4
     b9c:	6a de       	rcall	.-812    	; 0x872 <tx_at_response>
     b9e:	8d 2d       	mov	r24, r13
     ba0:	c1 cf       	rjmp	.-126    	; 0xb24 <at_rf_connect+0x34>
     ba2:	8e 2d       	mov	r24, r14
     ba4:	bf cf       	rjmp	.-130    	; 0xb24 <at_rf_connect+0x34>
     ba6:	fc 2c       	mov	r15, r12
     ba8:	8b 2d       	mov	r24, r11
     baa:	bc cf       	rjmp	.-136    	; 0xb24 <at_rf_connect+0x34>
     bac:	fc 2c       	mov	r15, r12
     bae:	8b 2d       	mov	r24, r11
     bb0:	b9 cf       	rjmp	.-142    	; 0xb24 <at_rf_connect+0x34>
     bb2:	fc 2c       	mov	r15, r12
     bb4:	8b 2d       	mov	r24, r11
     bb6:	b6 cf       	rjmp	.-148    	; 0xb24 <at_rf_connect+0x34>
     bb8:	fc 2c       	mov	r15, r12
     bba:	8d 2d       	mov	r24, r13
     bbc:	b3 cf       	rjmp	.-154    	; 0xb24 <at_rf_connect+0x34>
     bbe:	fe 2c       	mov	r15, r14
     bc0:	8d 2d       	mov	r24, r13
     bc2:	b0 cf       	rjmp	.-160    	; 0xb24 <at_rf_connect+0x34>
     bc4:	8f 2d       	mov	r24, r15
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	1f 91       	pop	r17
     bcc:	0f 91       	pop	r16
     bce:	ff 90       	pop	r15
     bd0:	ef 90       	pop	r14
     bd2:	df 90       	pop	r13
     bd4:	cf 90       	pop	r12
     bd6:	bf 90       	pop	r11
     bd8:	af 90       	pop	r10
     bda:	08 95       	ret

00000bdc <tx>:
     bdc:	0f 93       	push	r16
     bde:	1f 93       	push	r17
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	ec 01       	movw	r28, r24
     be6:	8b 01       	movw	r16, r22
     be8:	84 e7       	ldi	r24, 0x74	; 116
     bea:	93 e0       	ldi	r25, 0x03	; 3
     bec:	42 de       	rcall	.-892    	; 0x872 <tx_at_response>
     bee:	b8 01       	movw	r22, r16
     bf0:	ce 01       	movw	r24, r28
     bf2:	d4 de       	rcall	.-600    	; 0x99c <tx_data_response>
     bf4:	8d e7       	ldi	r24, 0x7D	; 125
     bf6:	93 e0       	ldi	r25, 0x03	; 3
     bf8:	3c de       	rcall	.-904    	; 0x872 <tx_at_response>
     bfa:	86 e8       	ldi	r24, 0x86	; 134
     bfc:	93 e0       	ldi	r25, 0x03	; 3
     bfe:	39 de       	rcall	.-910    	; 0x872 <tx_at_response>
     c00:	89 e5       	ldi	r24, 0x59	; 89
     c02:	93 e0       	ldi	r25, 0x03	; 3
     c04:	36 de       	rcall	.-916    	; 0x872 <tx_at_response>
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	08 95       	ret

00000c12 <at_rf_disconnect>:
     c12:	82 e6       	ldi	r24, 0x62	; 98
     c14:	93 e0       	ldi	r25, 0x03	; 3
     c16:	2d de       	rcall	.-934    	; 0x872 <tx_at_response>
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	08 95       	ret

00000c1c <__vector_20>:
     c1c:	1f 92       	push	r1
     c1e:	0f 92       	push	r0
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	0f 92       	push	r0
     c24:	11 24       	eor	r1, r1
     c26:	2f 93       	push	r18
     c28:	3f 93       	push	r19
     c2a:	4f 93       	push	r20
     c2c:	5f 93       	push	r21
     c2e:	6f 93       	push	r22
     c30:	7f 93       	push	r23
     c32:	8f 93       	push	r24
     c34:	9f 93       	push	r25
     c36:	af 93       	push	r26
     c38:	bf 93       	push	r27
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	ef 93       	push	r30
     c40:	ff 93       	push	r31
     c42:	c0 91 d3 04 	lds	r28, 0x04D3	; 0x8004d3 <response_counter>
     c46:	d0 e0       	ldi	r29, 0x00	; 0
     c48:	c5 52       	subi	r28, 0x25	; 37
     c4a:	db 4f       	sbci	r29, 0xFB	; 251
     c4c:	80 ec       	ldi	r24, 0xC0	; 192
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	26 db       	rcall	.-2484   	; 0x29e <usart_getchar>
     c52:	88 83       	st	Y, r24
     c54:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <response_counter>
     c58:	8f 5f       	subi	r24, 0xFF	; 255
     c5a:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <response_counter>
     c5e:	10 92 cb 04 	sts	0x04CB, r1	; 0x8004cb <response_timeout_counter>
     c62:	10 92 cc 04 	sts	0x04CC, r1	; 0x8004cc <response_timeout_counter+0x1>
     c66:	10 92 cd 04 	sts	0x04CD, r1	; 0x8004cd <response_timeout_counter+0x2>
     c6a:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <response_timeout_counter+0x3>
     c6e:	ff 91       	pop	r31
     c70:	ef 91       	pop	r30
     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
     c76:	bf 91       	pop	r27
     c78:	af 91       	pop	r26
     c7a:	9f 91       	pop	r25
     c7c:	8f 91       	pop	r24
     c7e:	7f 91       	pop	r23
     c80:	6f 91       	pop	r22
     c82:	5f 91       	pop	r21
     c84:	4f 91       	pop	r20
     c86:	3f 91       	pop	r19
     c88:	2f 91       	pop	r18
     c8a:	0f 90       	pop	r0
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	0f 90       	pop	r0
     c90:	1f 90       	pop	r1
     c92:	18 95       	reti

00000c94 <__vector_8>:

//main_function()
//jalla() // 
ISR(WDT_vect)
{
     c94:	1f 92       	push	r1
     c96:	0f 92       	push	r0
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	0f 92       	push	r0
     c9c:	11 24       	eor	r1, r1
     c9e:	2f 92       	push	r2
     ca0:	3f 92       	push	r3
     ca2:	4f 92       	push	r4
     ca4:	5f 92       	push	r5
     ca6:	6f 92       	push	r6
     ca8:	7f 92       	push	r7
     caa:	8f 92       	push	r8
     cac:	9f 92       	push	r9
     cae:	af 92       	push	r10
     cb0:	bf 92       	push	r11
     cb2:	cf 92       	push	r12
     cb4:	df 92       	push	r13
     cb6:	ef 92       	push	r14
     cb8:	ff 92       	push	r15
     cba:	0f 93       	push	r16
     cbc:	1f 93       	push	r17
     cbe:	2f 93       	push	r18
     cc0:	3f 93       	push	r19
     cc2:	4f 93       	push	r20
     cc4:	5f 93       	push	r21
     cc6:	6f 93       	push	r22
     cc8:	7f 93       	push	r23
     cca:	8f 93       	push	r24
     ccc:	9f 93       	push	r25
     cce:	af 93       	push	r26
     cd0:	bf 93       	push	r27
     cd2:	ef 93       	push	r30
     cd4:	ff 93       	push	r31
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	29 97       	sbiw	r28, 0x09	; 9
     ce0:	de bf       	out	0x3e, r29	; 62
     ce2:	cd bf       	out	0x3d, r28	; 61
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	f8 94       	cli
     ce8:	a8 95       	wdr
     cea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     cee:	88 61       	ori	r24, 0x18	; 24
     cf0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     cf4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     cf8:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
	wdt_counter++; //watchdog set at 1 second timeout
     cfa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     cfe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     d02:	01 96       	adiw	r24, 0x01	; 1
     d04:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     d08:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	
	#ifdef DEBUG
		usart_tx_at(USART_TERMINAL, RESPONSE_FOOTER); //DEBUG
     d0c:	6d ec       	ldi	r22, 0xCD	; 205
     d0e:	72 e0       	ldi	r23, 0x02	; 2
     d10:	88 ec       	ldi	r24, 0xC8	; 200
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	d6 db       	rcall	.-2132   	; 0x4c2 <usart_tx_at>
		usart_putchar(USART_TERMINAL, (0x30+wdt_counter)); //DEBUG
     d16:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     d1a:	60 5d       	subi	r22, 0xD0	; 208
     d1c:	88 ec       	ldi	r24, 0xC8	; 200
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	b7 da       	rcall	.-2706   	; 0x290 <usart_putchar>
		usart_tx_at(USART_TERMINAL, RESPONSE_FOOTER); //DEBUG	
     d22:	6d ec       	ldi	r22, 0xCD	; 205
     d24:	72 e0       	ldi	r23, 0x02	; 2
     d26:	88 ec       	ldi	r24, 0xC8	; 200
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	cb db       	rcall	.-2154   	; 0x4c2 <usart_tx_at>
	#endif // DEBUG
	
	if (wdt_counter < WAKEUP_RATE)
     d2c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     d30:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     d34:	89 2b       	or	r24, r25
     d36:	09 f4       	brne	.+2      	; 0xd3a <__vector_8+0xa6>
     d38:	29 c2       	rjmp	.+1106   	; 0x118c <__vector_8+0x4f8>
	{
		goto END;
	} else {wdt_counter = 0;} //reset counter if limit is reached.
     d3a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
     d3e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	
	RTC_ISR_ACTIVE = 1;
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	80 93 c6 04 	sts	0x04C6, r24	; 0x8004c6 <RTC_ISR_ACTIVE>
				controller_next_state = READ_EXT_DATA;
				RTC_ISR_ACTIVE = 0; //FINISHED, break LOOP!
				break;
			
			default:
				controller_next_state = RESET_REGISTERS; //TRY RESET.
     d48:	0f 2e       	mov	r0, r31
     d4a:	fb e0       	ldi	r31, 0x0B	; 11
     d4c:	2f 2e       	mov	r2, r31
     d4e:	f0 2d       	mov	r31, r0
				radio_power_off_at(); //radio power down
				controller_next_state = STORE_EXT_MEM;
				break;
			
			case STORE_EXT_MEM:
				tx_data[POSITION_TIME] = 0; //reset accumulation counter if something???????????????
     d50:	00 e6       	ldi	r16, 0x60	; 96
     d52:	15 e0       	ldi	r17, 0x05	; 5
// 					usart_tx_at(USART_TERMINAL, RESPONSE_HEADER);
// 					usart_tx_at(USART_TERMINAL, myval);
// 					usart_tx_at(USART_TERMINAL, RESPONSE_FOOTER);
				#endif // DEBUG
				
				if (  (EXT_EEPROM_ADDR_MAX - ext_eeprom_address) < 16) //Address overflow
     d54:	cc 24       	eor	r12, r12
     d56:	ca 94       	dec	r12
     d58:	d1 2c       	mov	r13, r1
				EXT_EEPROM_PORT |= (1<<EXT_EEPROM_WP); //DISABLE WRITING TO MEM
				
				
				
				#ifdef DEBUG //read from memory
					char myval[5] = "";
     d5a:	0f 2e       	mov	r0, r31
     d5c:	f3 e0       	ldi	r31, 0x03	; 3
     d5e:	5f 2e       	mov	r5, r31
     d60:	f0 2d       	mov	r31, r0
     d62:	4e 01       	movw	r8, r28
     d64:	23 e0       	ldi	r18, 0x03	; 3
     d66:	82 0e       	add	r8, r18
     d68:	91 1c       	adc	r9, r1
 				{
// 					//tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_DISNNECT); //set failure status
// 					controller_next_state = RF_POWER_OFF; // RF_DISCONNECT; //if failure go to disconnect
// 					break;
 				}
				controller_next_state = RF_POWER_OFF;
     d6a:	0f 2e       	mov	r0, r31
     d6c:	f9 e0       	ldi	r31, 0x09	; 9
     d6e:	3f 2e       	mov	r3, r31
     d70:	f0 2d       	mov	r31, r0
				}
				controller_next_state = GENERATE_PACKAGE;
				break;
			
			case GENERATE_PACKAGE:
				transfer_data_package_counter = 2;
     d72:	41 2c       	mov	r4, r1
				controller_next_state = MEASURE;
				break;
			
			case MEASURE:
				PRR0 &= ~(1<<PRADC); //enable adc clock
				ADCSRA |= (1<<ADEN); //enable adc
     d74:	0f 2e       	mov	r0, r31
     d76:	fa e7       	ldi	r31, 0x7A	; 122
     d78:	ef 2e       	mov	r14, r31
     d7a:	f1 2c       	mov	r15, r1
     d7c:	f0 2d       	mov	r31, r0
		ADCSRB &= ~(1 << MUX5);
	}

	ADMUX = ((uint8_t)input & ADC_MUX_MASK) | (uint8_t)vref;
#else
	ADMUX = (uint8_t)input | (uint8_t)vref;
     d7e:	0f 2e       	mov	r0, r31
     d80:	fc e7       	ldi	r31, 0x7C	; 124
     d82:	af 2e       	mov	r10, r31
     d84:	b1 2c       	mov	r11, r1
     d86:	f0 2d       	mov	r31, r0
	ADCSRA |= (1 << ADSC);

	while ((ADCSRA & (1 << ADSC))) {
		/* wait for conversion complete */
	}
	return ADC;
     d88:	0f 2e       	mov	r0, r31
     d8a:	f8 e7       	ldi	r31, 0x78	; 120
     d8c:	6f 2e       	mov	r6, r31
     d8e:	71 2c       	mov	r7, r1
     d90:	f0 2d       	mov	r31, r0
	
	RTC_ISR_ACTIVE = 1;
	while (RTC_ISR_ACTIVE == 1)
	{
		
		switch(controller_state) {
     d92:	e0 91 d7 04 	lds	r30, 0x04D7	; 0x8004d7 <controller_state>
     d96:	8e 2f       	mov	r24, r30
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	8c 30       	cpi	r24, 0x0C	; 12
     d9c:	91 05       	cpc	r25, r1
     d9e:	08 f0       	brcs	.+2      	; 0xda2 <__vector_8+0x10e>
     da0:	ea c1       	rjmp	.+980    	; 0x1176 <__vector_8+0x4e2>
     da2:	fc 01       	movw	r30, r24
     da4:	e2 5c       	subi	r30, 0xC2	; 194
     da6:	ff 4f       	sbci	r31, 0xFF	; 255
     da8:	a0 c7       	rjmp	.+3904   	; 0x1cea <__tablejump2__>
			
			case READ_EXT_DATA:
				controller_next_state = MEASURE;
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	80 93 d6 04 	sts	0x04D6, r24	; 0x8004d6 <controller_next_state>
				break;
     db0:	e4 c1       	rjmp	.+968    	; 0x117a <__vector_8+0x4e6>
			
			case MEASURE:
				PRR0 &= ~(1<<PRADC); //enable adc clock
     db2:	e4 e6       	ldi	r30, 0x64	; 100
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	8e 7f       	andi	r24, 0xFE	; 254
     dba:	80 83       	st	Z, r24
				ADCSRA |= (1<<ADEN); //enable adc
     dbc:	f7 01       	movw	r30, r14
     dbe:	80 81       	ld	r24, Z
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL///////////////////////////
				loadcell_power_on();
     dc0:	80 68       	ori	r24, 0x80	; 128
     dc2:	80 83       	st	Z, r24
				tx_data[POSITION_CURRENT] = adc_10_to_12_bits(ADC_MUX_ADC0); //NEED TO FIX ADC CONVERSINS!!!!!!!!
     dc4:	e1 db       	rcall	.-2110   	; 0x588 <loadcell_power_on>
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	82 dc       	rcall	.-1788   	; 0x6ce <adc_10_to_12_bits>
     dca:	f8 01       	movw	r30, r16
     dcc:	91 83       	std	Z+1, r25	; 0x01
     dce:	80 83       	st	Z, r24
		ADCSRB &= ~(1 << MUX5);
	}

	ADMUX = ((uint8_t)input & ADC_MUX_MASK) | (uint8_t)vref;
#else
	ADMUX = (uint8_t)input | (uint8_t)vref;
     dd0:	8e e5       	ldi	r24, 0x5E	; 94
     dd2:	f5 01       	movw	r30, r10
     dd4:	80 83       	st	Z, r24
#endif
	ADCSRA |= (1 << ADSC);
     dd6:	f7 01       	movw	r30, r14
     dd8:	80 81       	ld	r24, Z
     dda:	80 64       	ori	r24, 0x40	; 64
     ddc:	80 83       	st	Z, r24

	while ((ADCSRA & (1 << ADSC))) {
     dde:	f7 01       	movw	r30, r14
     de0:	80 81       	ld	r24, Z
     de2:	86 fd       	sbrc	r24, 6
		/* wait for conversion complete */
	}
	return ADC;
     de4:	fc cf       	rjmp	.-8      	; 0xdde <__vector_8+0x14a>
     de6:	f3 01       	movw	r30, r6
// 				tx_data[POSITION_ANA3] = adc_result_average(ADC_MUX_ADC3, ADC_NUM_AVG); //
// 				tx_data[POSITION_ANA4] = adc_result_average(ADC_MUX_ADC4, ADC_NUM_AVG); //
// 				tx_data[POSITION_ANA5] = adc_result_average(ADC_MUX_ADC5, ADC_NUM_AVG); //
// 				//tx_data[POSITION_TEMP] = adc_result_average(ADC_MUX_TEMPSENSE, 1); //PIN CHANGE HAVE NO EFFECT ON ADCB
 				//tx_data[POSITION_VDD] = adc_result_average(ADC_MUX_1V1, 1); //PIN CHANGE HAVE NO EFFECT ON ADCB
				 tx_data[POSITION_VDD] = ((1.05*1024)/(adc_read_10bit(ADC_MUX_1V1, ADC_VREF_AVCC)))*1000; //PIN CHANGE HAVE NO EFFECT ON ADCB
     de8:	60 81       	ld	r22, Z
     dea:	71 81       	ldd	r23, Z+1	; 0x01
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	69 d6       	rcall	.+3282   	; 0x1ac4 <__floatunsisf>
     df2:	9b 01       	movw	r18, r22
     df4:	ac 01       	movw	r20, r24
     df6:	66 e6       	ldi	r22, 0x66	; 102
     df8:	76 e6       	ldi	r23, 0x66	; 102
     dfa:	86 e8       	ldi	r24, 0x86	; 134
     dfc:	94 e4       	ldi	r25, 0x44	; 68
     dfe:	ce d5       	rcall	.+2972   	; 0x199c <__divsf3>
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	4a e7       	ldi	r20, 0x7A	; 122
     e06:	54 e4       	ldi	r21, 0x44	; 68
     e08:	eb d6       	rcall	.+3542   	; 0x1be0 <__mulsf3>
     e0a:	30 d6       	rcall	.+3168   	; 0x1a6c <__fixunssfsi>
     e0c:	f8 01       	movw	r30, r16
				
				ADCSRA &= ~(1<<ADEN); //disable adc
     e0e:	77 87       	std	Z+15, r23	; 0x0f
     e10:	66 87       	std	Z+14, r22	; 0x0e
     e12:	f7 01       	movw	r30, r14
				PRR0 |= (1<<PRADC); //disable ADC clock
     e14:	80 81       	ld	r24, Z
     e16:	8f 77       	andi	r24, 0x7F	; 127
     e18:	80 83       	st	Z, r24
     e1a:	e4 e6       	ldi	r30, 0x64	; 100
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
				 
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL///////////////////////////
				loadcell_power_off();
     e1e:	80 81       	ld	r24, Z
     e20:	81 60       	ori	r24, 0x01	; 1
				//////////////////////////////////////////////////////////////////////////
				
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				accu_data += tx_data[POSITION_CURRENT]; //controller_measure(9, &tx_data); //measure with averaging, and accumulate.
     e22:	80 83       	st	Z, r24
     e24:	b8 db       	rcall	.-2192   	; 0x596 <loadcell_power_off>
     e26:	f8 01       	movw	r30, r16
     e28:	20 81       	ld	r18, Z
     e2a:	31 81       	ldd	r19, Z+1	; 0x01
     e2c:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <accu_data>
     e30:	90 91 c8 04 	lds	r25, 0x04C8	; 0x8004c8 <accu_data+0x1>
     e34:	a0 91 c9 04 	lds	r26, 0x04C9	; 0x8004c9 <accu_data+0x2>
     e38:	b0 91 ca 04 	lds	r27, 0x04CA	; 0x8004ca <accu_data+0x3>
     e3c:	82 0f       	add	r24, r18
     e3e:	93 1f       	adc	r25, r19
     e40:	a1 1d       	adc	r26, r1
     e42:	b1 1d       	adc	r27, r1
     e44:	80 93 c7 04 	sts	0x04C7, r24	; 0x8004c7 <accu_data>
     e48:	90 93 c8 04 	sts	0x04C8, r25	; 0x8004c8 <accu_data+0x1>
     e4c:	a0 93 c9 04 	sts	0x04C9, r26	; 0x8004c9 <accu_data+0x2>
				loadcell_min_max_tran(tx_data[POSITION_CURRENT], &tx_data); //check if new value should be stored in min, max and tran.
     e50:	b0 93 ca 04 	sts	0x04CA, r27	; 0x8004ca <accu_data+0x3>
     e54:	80 81       	ld	r24, Z
     e56:	91 81       	ldd	r25, Z+1	; 0x01
				tx_data[POSITION_PREV] = tx_data[POSITION_CURRENT]; //store adc value for next measurement.
     e58:	b8 01       	movw	r22, r16
     e5a:	f4 da       	rcall	.-2584   	; 0x444 <loadcell_min_max_tran>
     e5c:	f8 01       	movw	r30, r16
     e5e:	80 81       	ld	r24, Z
     e60:	91 81       	ldd	r25, Z+1	; 0x01
				///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				
				transmit_counter++;		
     e62:	93 83       	std	Z+3, r25	; 0x03
     e64:	82 83       	std	Z+2, r24	; 0x02
     e66:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <transmit_counter>
     e6a:	90 91 d5 04 	lds	r25, 0x04D5	; 0x8004d5 <transmit_counter+0x1>
     e6e:	01 96       	adiw	r24, 0x01	; 1
     e70:	90 93 d5 04 	sts	0x04D5, r25	; 0x8004d5 <transmit_counter+0x1>
				tx_data[POSITION_TIME] = transmit_counter; //increase timestamp counter.
     e74:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <transmit_counter>
			
				if (transmit_counter >= (TRANSMIT_RATE/WAKEUP_RATE)) //if accumulation limit is reached.
     e78:	93 8b       	std	Z+19, r25	; 0x13
     e7a:	82 8b       	std	Z+18, r24	; 0x12
     e7c:	86 39       	cpi	r24, 0x96	; 150
				{
					transmit_counter = 0; //reset counter
     e7e:	91 05       	cpc	r25, r1
     e80:	40 f0       	brcs	.+16     	; 0xe92 <__vector_8+0x1fe>
     e82:	10 92 d5 04 	sts	0x04D5, r1	; 0x8004d5 <transmit_counter+0x1>
					controller_next_state = CALC; //limit reached, go to next
     e86:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <transmit_counter>
     e8a:	82 e0       	ldi	r24, 0x02	; 2
     e8c:	80 93 d6 04 	sts	0x04D6, r24	; 0x8004d6 <controller_next_state>
					} else {
					controller_next_state = READ_EXT_DATA; //Start from top again
     e90:	74 c1       	rjmp	.+744    	; 0x117a <__vector_8+0x4e6>
					RTC_ISR_ACTIVE = 0; //Break loop and go to sleep again
     e92:	10 92 d6 04 	sts	0x04D6, r1	; 0x8004d6 <controller_next_state>
     e96:	10 92 c6 04 	sts	0x04C6, r1	; 0x8004c6 <RTC_ISR_ACTIVE>
				}
				break;
			
			case CALC:
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				tx_data[POSITION_AVG] = controller_calc_avg(accu_data, tx_data[POSITION_TIME]); //calc and store average.
     e9a:	6f c1       	rjmp	.+734    	; 0x117a <__vector_8+0x4e6>


uint16_t controller_calc_avg(uint32_t data, uint16_t cnt) {
	uint16_t avg = 0;
	
	avg = data/cnt;
     e9c:	f8 01       	movw	r30, r16
     e9e:	22 89       	ldd	r18, Z+18	; 0x12
     ea0:	33 89       	ldd	r19, Z+19	; 0x13
     ea2:	40 e0       	ldi	r20, 0x00	; 0
     ea4:	50 e0       	ldi	r21, 0x00	; 0
     ea6:	60 91 c7 04 	lds	r22, 0x04C7	; 0x8004c7 <accu_data>
     eaa:	70 91 c8 04 	lds	r23, 0x04C8	; 0x8004c8 <accu_data+0x1>
     eae:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <accu_data+0x2>
     eb2:	90 91 ca 04 	lds	r25, 0x04CA	; 0x8004ca <accu_data+0x3>
				}
				break;
			
			case CALC:
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				tx_data[POSITION_AVG] = controller_calc_avg(accu_data, tx_data[POSITION_TIME]); //calc and store average.
     eb6:	f7 d6       	rcall	.+3566   	; 0x1ca6 <__udivmodsi4>
				accu_data = 0; //reset parameters
     eb8:	f8 01       	movw	r30, r16
     eba:	35 83       	std	Z+5, r19	; 0x05
     ebc:	24 83       	std	Z+4, r18	; 0x04
     ebe:	10 92 c7 04 	sts	0x04C7, r1	; 0x8004c7 <accu_data>
     ec2:	10 92 c8 04 	sts	0x04C8, r1	; 0x8004c8 <accu_data+0x1>
     ec6:	10 92 c9 04 	sts	0x04C9, r1	; 0x8004c9 <accu_data+0x2>
				///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				controller_next_state = RF_POWER_ON;
     eca:	10 92 ca 04 	sts	0x04CA, r1	; 0x8004ca <accu_data+0x3>
				break;
			
			case RF_POWER_ON:
				if (radio_power_on() == 1) //power on and check if it fails
     ece:	50 92 d6 04 	sts	0x04D6, r5	; 0x8004d6 <controller_next_state>
     ed2:	53 c1       	rjmp	.+678    	; 0x117a <__vector_8+0x4e6>
 				{
					
 					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_POWER_ON); //set failure status
     ed4:	62 db       	rcall	.-2364   	; 0x59a <radio_power_on>
     ed6:	81 30       	cpi	r24, 0x01	; 1
     ed8:	49 f4       	brne	.+18     	; 0xeec <__vector_8+0x258>
     eda:	f8 01       	movw	r30, r16
     edc:	80 a1       	ldd	r24, Z+32	; 0x20
 					controller_next_state = RF_POWER_OFF; //if failure go to power off
     ede:	91 a1       	ldd	r25, Z+33	; 0x21
     ee0:	81 60       	ori	r24, 0x01	; 1
 					break;
     ee2:	91 a3       	std	Z+33, r25	; 0x21
 				}
				controller_next_state = RF_CONNECT;
     ee4:	80 a3       	std	Z+32, r24	; 0x20
     ee6:	30 92 d6 04 	sts	0x04D6, r3	; 0x8004d6 <controller_next_state>
				break;
			
			case RF_CONNECT: //NEED MORE POWER!!!!!!
				if (at_rf_status() == 1)
     eea:	47 c1       	rjmp	.+654    	; 0x117a <__vector_8+0x4e6>
     eec:	84 e0       	ldi	r24, 0x04	; 4
				{
					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_STATUS); //set failure status
     eee:	80 93 d6 04 	sts	0x04D6, r24	; 0x8004d6 <controller_next_state>
     ef2:	43 c1       	rjmp	.+646    	; 0x117a <__vector_8+0x4e6>
     ef4:	ef dd       	rcall	.-1058   	; 0xad4 <at_rf_status>
     ef6:	81 30       	cpi	r24, 0x01	; 1
     ef8:	49 f4       	brne	.+18     	; 0xf0c <__vector_8+0x278>
					controller_next_state = RF_POWER_OFF; // RF_DISCONNECT; //if failure go to disconnect
     efa:	f8 01       	movw	r30, r16
     efc:	80 a1       	ldd	r24, Z+32	; 0x20
					break;
     efe:	91 a1       	ldd	r25, Z+33	; 0x21
				}
				 
				at_rf_gprs();
     f00:	80 62       	ori	r24, 0x20	; 32
     f02:	91 a3       	std	Z+33, r25	; 0x21
				if (at_rf_connect(0) != 0) //Connect to network. MAKE STATUS REPORT FROM THIS!!!!!!!
     f04:	80 a3       	std	Z+32, r24	; 0x20
     f06:	30 92 d6 04 	sts	0x04D6, r3	; 0x8004d6 <controller_next_state>
     f0a:	37 c1       	rjmp	.+622    	; 0x117a <__vector_8+0x4e6>
     f0c:	ec dd       	rcall	.-1064   	; 0xae6 <at_rf_gprs>
				{
					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_CONNECT); //set failure status
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	ef dd       	rcall	.-1058   	; 0xaf0 <at_rf_connect>
     f12:	88 23       	and	r24, r24
     f14:	49 f0       	breq	.+18     	; 0xf28 <__vector_8+0x294>
     f16:	f8 01       	movw	r30, r16
     f18:	80 a1       	ldd	r24, Z+32	; 0x20
					controller_next_state = RF_POWER_OFF; // RF_DISCONNECT; //if failure go to disconnect
     f1a:	91 a1       	ldd	r25, Z+33	; 0x21
     f1c:	82 60       	ori	r24, 0x02	; 2
					break;
     f1e:	91 a3       	std	Z+33, r25	; 0x21
				}
				controller_next_state = GENERATE_PACKAGE;
     f20:	80 a3       	std	Z+32, r24	; 0x20
     f22:	30 92 d6 04 	sts	0x04D6, r3	; 0x8004d6 <controller_next_state>
				break;
			
			case GENERATE_PACKAGE:
				transfer_data_package_counter = 2;
     f26:	29 c1       	rjmp	.+594    	; 0x117a <__vector_8+0x4e6>
     f28:	85 e0       	ldi	r24, 0x05	; 5
     f2a:	80 93 d6 04 	sts	0x04D6, r24	; 0x8004d6 <controller_next_state>
     f2e:	25 c1       	rjmp	.+586    	; 0x117a <__vector_8+0x4e6>
     f30:	f2 e0       	ldi	r31, 0x02	; 2
				while (transfer_data_package_counter < 5)
 				{
					data_to_char(&tx_data[transfer_data_package_counter], 1, &tx_data_bytes, TRANSFER_DATA_BASE); //data to ascii
     f32:	f0 93 5c 04 	sts	0x045C, r31	; 0x80045c <__data_end>
     f36:	40 92 5d 04 	sts	0x045D, r4	; 0x80045d <__data_end+0x1>
     f3a:	82 e0       	ldi	r24, 0x02	; 2
     f3c:	94 2d       	mov	r25, r4
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	2a e0       	ldi	r18, 0x0A	; 10
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	4b e5       	ldi	r20, 0x5B	; 91
     f48:	55 e0       	ldi	r21, 0x05	; 5
     f4a:	61 e0       	ldi	r22, 0x01	; 1
     f4c:	80 5a       	subi	r24, 0xA0	; 160
     f4e:	9a 4f       	sbci	r25, 0xFA	; 250
     f50:	60 dd       	rcall	.-1344   	; 0xa12 <data_to_char>
     f52:	4a e0       	ldi	r20, 0x0A	; 10
     f54:	68 ed       	ldi	r22, 0xD8	; 216
					itoa(transfer_data_package_counter, mqtt_sub_topic, 10); //counter to text for sub-topic
					transfer_data_length_package = mqtt_packet(&tx_data_bytes, &tx_data_package, TRANSFER_DATA_SIZE_PACKAGE, &mqtt_sub_topic); //convert ascii data to MQTT package.
     f56:	74 e0       	ldi	r23, 0x04	; 4
     f58:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <__data_end>
     f5c:	90 91 5d 04 	lds	r25, 0x045D	; 0x80045d <__data_end+0x1>
     f60:	35 d7       	rcall	.+3690   	; 0x1dcc <__itoa_ncheck>
     f62:	28 ed       	ldi	r18, 0xD8	; 216
     f64:	34 e0       	ldi	r19, 0x04	; 4
     f66:	44 e6       	ldi	r20, 0x64	; 100
     f68:	50 e0       	ldi	r21, 0x00	; 0
     f6a:	60 e6       	ldi	r22, 0x60	; 96
								
					if (transfer_data_package_counter > 2)
     f6c:	74 e0       	ldi	r23, 0x04	; 4
     f6e:	8b e5       	ldi	r24, 0x5B	; 91
     f70:	95 e0       	ldi	r25, 0x05	; 5
     f72:	73 d4       	rcall	.+2278   	; 0x185a <mqtt_packet>
     f74:	90 93 5f 04 	sts	0x045F, r25	; 0x80045f <transfer_data_length_package+0x1>
					{
						at_rf_connect(1); ////status for open new connection
     f78:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <transfer_data_length_package>
     f7c:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <__data_end>
					}
					
					tx(&tx_data_package, transfer_data_length_package); //transmit package. GENERATE STATUS FROM THIS.
     f80:	90 91 5d 04 	lds	r25, 0x045D	; 0x80045d <__data_end+0x1>
     f84:	03 97       	sbiw	r24, 0x03	; 3
     f86:	14 f0       	brlt	.+4      	; 0xf8c <__vector_8+0x2f8>
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	b2 dd       	rcall	.-1180   	; 0xaf0 <at_rf_connect>
     f8c:	60 91 5e 04 	lds	r22, 0x045E	; 0x80045e <transfer_data_length_package>
					reset_char_array(&mqtt_sub_topic, 3);
     f90:	70 91 5f 04 	lds	r23, 0x045F	; 0x80045f <transfer_data_length_package+0x1>
     f94:	80 e6       	ldi	r24, 0x60	; 96
     f96:	94 e0       	ldi	r25, 0x04	; 4
// 						itoa(transfer_data_length_package, package_lenght, 10);
// 						strcpy(mystring, package_lenght);
// 						usart_tx_at(USART_TERMINAL, mystring);
					#endif // DEBUG

					transfer_data_package_counter++;
     f98:	21 de       	rcall	.-958    	; 0xbdc <tx>
     f9a:	65 2d       	mov	r22, r5
     f9c:	88 ed       	ldi	r24, 0xD8	; 216
     f9e:	94 e0       	ldi	r25, 0x04	; 4
     fa0:	b4 da       	rcall	.-2712   	; 0x50a <reset_char_array>
     fa2:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <__data_end>
				controller_next_state = GENERATE_PACKAGE;
				break;
			
			case GENERATE_PACKAGE:
				transfer_data_package_counter = 2;
				while (transfer_data_package_counter < 5)
     fa6:	90 91 5d 04 	lds	r25, 0x045D	; 0x80045d <__data_end+0x1>
     faa:	01 96       	adiw	r24, 0x01	; 1
     fac:	90 93 5d 04 	sts	0x045D, r25	; 0x80045d <__data_end+0x1>
					#endif // DEBUG

					transfer_data_package_counter++;
					
				}
				controller_next_state = TX_DATA;
     fb0:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <__data_end>
				break;
     fb4:	85 30       	cpi	r24, 0x05	; 5
			
			case TX_DATA:
				controller_next_state = RX_DATA;
     fb6:	91 05       	cpc	r25, r1
     fb8:	0c f4       	brge	.+2      	; 0xfbc <__vector_8+0x328>
     fba:	c1 cf       	rjmp	.-126    	; 0xf3e <__vector_8+0x2aa>
				break;
     fbc:	86 e0       	ldi	r24, 0x06	; 6
			
			case RX_DATA:
				controller_next_state = RF_DISCONNECT;
     fbe:	80 93 d6 04 	sts	0x04D6, r24	; 0x8004d6 <controller_next_state>
     fc2:	db c0       	rjmp	.+438    	; 0x117a <__vector_8+0x4e6>
				break;
     fc4:	87 e0       	ldi	r24, 0x07	; 7
			
			case RF_DISCONNECT:
 				if (at_rf_disconnect() != 0) //Status will not be transmitted, but could probably be stored for later.
     fc6:	80 93 d6 04 	sts	0x04D6, r24	; 0x8004d6 <controller_next_state>
 				{
// 					//tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_DISNNECT); //set failure status
// 					controller_next_state = RF_POWER_OFF; // RF_DISCONNECT; //if failure go to disconnect
// 					break;
 				}
				controller_next_state = RF_POWER_OFF;
     fca:	d7 c0       	rjmp	.+430    	; 0x117a <__vector_8+0x4e6>
     fcc:	28 e0       	ldi	r18, 0x08	; 8
				break;
     fce:	20 93 d6 04 	sts	0x04D6, r18	; 0x8004d6 <controller_next_state>
			
			case RF_POWER_OFF:
				radio_power_off_at(); //radio power down
     fd2:	d3 c0       	rjmp	.+422    	; 0x117a <__vector_8+0x4e6>
				controller_next_state = STORE_EXT_MEM;
     fd4:	1e de       	rcall	.-964    	; 0xc12 <at_rf_disconnect>
     fd6:	30 92 d6 04 	sts	0x04D6, r3	; 0x8004d6 <controller_next_state>
				break;
     fda:	cf c0       	rjmp	.+414    	; 0x117a <__vector_8+0x4e6>
			
			case STORE_EXT_MEM:
				tx_data[POSITION_TIME] = 0; //reset accumulation counter if something???????????????
     fdc:	3d db       	rcall	.-2438   	; 0x658 <radio_power_off_at>
     fde:	8a e0       	ldi	r24, 0x0A	; 10
     fe0:	80 93 d6 04 	sts	0x04D6, r24	; 0x8004d6 <controller_next_state>
// 					usart_tx_at(USART_TERMINAL, RESPONSE_HEADER);
// 					usart_tx_at(USART_TERMINAL, myval);
// 					usart_tx_at(USART_TERMINAL, RESPONSE_FOOTER);
				#endif // DEBUG
				
				if (  (EXT_EEPROM_ADDR_MAX - ext_eeprom_address) < 16) //Address overflow
     fe4:	ca c0       	rjmp	.+404    	; 0x117a <__vector_8+0x4e6>
     fe6:	f8 01       	movw	r30, r16
     fe8:	13 8a       	std	Z+19, r1	; 0x13
     fea:	12 8a       	std	Z+18, r1	; 0x12
     fec:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <ext_eeprom_address>
				{
					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_EEPROM_ADDR_OVF); //set failure status
     ff0:	96 01       	movw	r18, r12
     ff2:	28 1b       	sub	r18, r24
     ff4:	31 09       	sbc	r19, r1
     ff6:	20 31       	cpi	r18, 0x10	; 16
				}
				
				if ( (EXT_EEPROM_TIME_MAX - ext_eeprom_timestamp) < 16) //Timestamp overflow
     ff8:	31 05       	cpc	r19, r1
     ffa:	2c f4       	brge	.+10     	; 0x1006 <__vector_8+0x372>
     ffc:	80 a1       	ldd	r24, Z+32	; 0x20
     ffe:	91 a1       	ldd	r25, Z+33	; 0x21
    1000:	88 60       	ori	r24, 0x08	; 8
    1002:	91 a3       	std	Z+33, r25	; 0x21
    1004:	80 a3       	std	Z+32, r24	; 0x20
				{
					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_EEPROM_TIME_OVF); //set failure status
    1006:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <ext_eeprom_timestamp>
    100a:	f6 01       	movw	r30, r12
    100c:	e8 1b       	sub	r30, r24
    100e:	f1 09       	sbc	r31, r1
				}
				//Write status to mem before resetting data
				EXT_EEPROM_PORT &= ~(1<<EXT_EEPROM_WP); //ENABLE WRITING TO MEM
    1010:	70 97       	sbiw	r30, 0x10	; 16
				EEWriteByte(ext_eeprom_address, ext_eeprom_timestamp); //write timestamp
    1012:	34 f4       	brge	.+12     	; 0x1020 <__vector_8+0x38c>
    1014:	f8 01       	movw	r30, r16
    1016:	80 a1       	ldd	r24, Z+32	; 0x20
    1018:	91 a1       	ldd	r25, Z+33	; 0x21
    101a:	80 61       	ori	r24, 0x10	; 16
    101c:	91 a3       	std	Z+33, r25	; 0x21
    101e:	80 a3       	std	Z+32, r24	; 0x20
				ext_eeprom_timestamp++; //increment timestamp by 1
    1020:	46 98       	cbi	0x08, 6	; 8
    1022:	60 91 c4 04 	lds	r22, 0x04C4	; 0x8004c4 <ext_eeprom_timestamp>
    1026:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <ext_eeprom_address>
				ext_eeprom_address++; //increment address by 1.
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	5a d8       	rcall	.-3916   	; 0xe2 <EEWriteByte>
    102e:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <ext_eeprom_timestamp>
				EEWriteByte(ext_eeprom_address, tx_data[POSITION_STATUS]&0xff); //write status from previous phase. COULD BE PUT SOMEWHERE ELSE!!!!!!
    1032:	8f 5f       	subi	r24, 0xFF	; 255
    1034:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <ext_eeprom_timestamp>
    1038:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <ext_eeprom_address>
    103c:	8f 5f       	subi	r24, 0xFF	; 255
    103e:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <ext_eeprom_address>
				ext_eeprom_address++; //increment address by 1.
    1042:	f8 01       	movw	r30, r16
    1044:	60 a1       	ldd	r22, Z+32	; 0x20
    1046:	71 a1       	ldd	r23, Z+33	; 0x21
    1048:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <ext_eeprom_address>
				EEWriteByte(ext_eeprom_address, (tx_data[POSITION_AVG]&0xff)); //write low byte of avg
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	49 d8       	rcall	.-3950   	; 0xe2 <EEWriteByte>
    1050:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <ext_eeprom_address>
    1054:	8f 5f       	subi	r24, 0xFF	; 255
    1056:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <ext_eeprom_address>
				ext_eeprom_address++; //increment address by 1.
    105a:	f8 01       	movw	r30, r16
    105c:	64 81       	ldd	r22, Z+4	; 0x04
    105e:	75 81       	ldd	r23, Z+5	; 0x05
    1060:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <ext_eeprom_address>
				EEWriteByte(ext_eeprom_address, ((tx_data[POSITION_AVG]>>8)&0xff)); //write high byte of avg
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	3d d8       	rcall	.-3974   	; 0xe2 <EEWriteByte>
    1068:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <ext_eeprom_address>
    106c:	8f 5f       	subi	r24, 0xFF	; 255
    106e:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <ext_eeprom_address>
				ext_eeprom_address++; //increment address by 1. SHOULD THE ADDRESS BE STORED SOMEWHERE??????????????????????
    1072:	f8 01       	movw	r30, r16
    1074:	84 81       	ldd	r24, Z+4	; 0x04
    1076:	95 81       	ldd	r25, Z+5	; 0x05
    1078:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <ext_eeprom_address>
				EEWriteByte(ext_eeprom_address, (tx_data[POSITION_MIN]&0xff)); //write low byte of avg
    107c:	69 2f       	mov	r22, r25
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	30 d8       	rcall	.-4000   	; 0xe2 <EEWriteByte>
    1082:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <ext_eeprom_address>
    1086:	8f 5f       	subi	r24, 0xFF	; 255
    1088:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <ext_eeprom_address>
				ext_eeprom_address++; //increment address by 1.
    108c:	f8 01       	movw	r30, r16
    108e:	66 81       	ldd	r22, Z+6	; 0x06
    1090:	77 81       	ldd	r23, Z+7	; 0x07
    1092:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <ext_eeprom_address>
				EEWriteByte(ext_eeprom_address, ((tx_data[POSITION_MIN]>>8)&0xff)); //write high byte of avg
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	24 d8       	rcall	.-4024   	; 0xe2 <EEWriteByte>
    109a:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <ext_eeprom_address>
    109e:	8f 5f       	subi	r24, 0xFF	; 255
    10a0:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <ext_eeprom_address>
    10a4:	f8 01       	movw	r30, r16
				ext_eeprom_address++; //increment address by 1. SHOULD THE ADDRESS BE STORED SOMEWHERE??????????????????????
    10a6:	86 81       	ldd	r24, Z+6	; 0x06
    10a8:	97 81       	ldd	r25, Z+7	; 0x07
    10aa:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <ext_eeprom_address>
    10ae:	69 2f       	mov	r22, r25
				EEWriteByte(ext_eeprom_address, (tx_data[POSITION_MAX]&0xff)); //write low byte of avg
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	17 d8       	rcall	.-4050   	; 0xe2 <EEWriteByte>
    10b4:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <ext_eeprom_address>
    10b8:	8f 5f       	subi	r24, 0xFF	; 255
    10ba:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <ext_eeprom_address>
    10be:	f8 01       	movw	r30, r16
				ext_eeprom_address++; //increment address by 1.
    10c0:	60 85       	ldd	r22, Z+8	; 0x08
    10c2:	71 85       	ldd	r23, Z+9	; 0x09
    10c4:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <ext_eeprom_address>
				EEWriteByte(ext_eeprom_address, ((tx_data[POSITION_MAX]>>8)&0xff)); //write high byte of avg
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	0b d8       	rcall	.-4074   	; 0xe2 <EEWriteByte>
    10cc:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <ext_eeprom_address>
    10d0:	8f 5f       	subi	r24, 0xFF	; 255
    10d2:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <ext_eeprom_address>
				ext_eeprom_address++; //increment address by 1. SHOULD THE ADDRESS BE STORED SOMEWHERE??????????????????????
    10d6:	f8 01       	movw	r30, r16
    10d8:	80 85       	ldd	r24, Z+8	; 0x08
    10da:	91 85       	ldd	r25, Z+9	; 0x09
    10dc:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <ext_eeprom_address>
				//WRITE A STATUS BIT IF OVERFLOW.
				EXT_EEPROM_PORT |= (1<<EXT_EEPROM_WP); //DISABLE WRITING TO MEM
    10e0:	69 2f       	mov	r22, r25
				
				
				
				#ifdef DEBUG //read from memory
					char myval[5] = "";
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	0e 94 71 00 	call	0xe2	; 0xe2 <EEWriteByte>
    10e8:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <ext_eeprom_address>
    10ec:	8f 5f       	subi	r24, 0xFF	; 255
    10ee:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <ext_eeprom_address>
					reset_char_array(myval, 5);
    10f2:	46 9a       	sbi	0x08, 6	; 8
    10f4:	1a 82       	std	Y+2, r1	; 0x02
    10f6:	19 82       	std	Y+1, r1	; 0x01
    10f8:	f4 01       	movw	r30, r8
					volatile uint8_t eeprom_data_lo = 0;
    10fa:	25 2d       	mov	r18, r5
					volatile uint8_t eeprom_data_hi = 0;
					volatile uint16_t eeprom_data_comb = 0;
    10fc:	11 92       	st	Z+, r1
					
					eeprom_data_lo = EEReadByte(ext_eeprom_address-6);
    10fe:	2a 95       	dec	r18
    1100:	e9 f7       	brne	.-6      	; 0x10fc <__vector_8+0x468>
    1102:	65 e0       	ldi	r22, 0x05	; 5
    1104:	ce 01       	movw	r24, r28
    1106:	01 96       	adiw	r24, 0x01	; 1
    1108:	00 da       	rcall	.-3072   	; 0x50a <reset_char_array>
					eeprom_data_hi = EEReadByte(ext_eeprom_address-5);
    110a:	19 86       	std	Y+9, r1	; 0x09
    110c:	18 86       	std	Y+8, r1	; 0x08
    110e:	1f 82       	std	Y+7, r1	; 0x07
    1110:	1e 82       	std	Y+6, r1	; 0x06
    1112:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <ext_eeprom_address>
 					eeprom_data_comb = eeprom_data_hi<<8 | eeprom_data_lo;
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	06 97       	sbiw	r24, 0x06	; 6
    111a:	35 d8       	rcall	.-3990   	; 0x186 <EEReadByte>
					itoa(eeprom_data_comb, myval, 10);
    111c:	89 87       	std	Y+9, r24	; 0x09
    111e:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <ext_eeprom_address>
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	05 97       	sbiw	r24, 0x05	; 5
    1126:	2f d8       	rcall	.-4002   	; 0x186 <EEReadByte>
    1128:	88 87       	std	Y+8, r24	; 0x08
    112a:	28 85       	ldd	r18, Y+8	; 0x08
					
					usart_tx_at(USART_TERMINAL, RESPONSE_HEADER);
    112c:	89 85       	ldd	r24, Y+9	; 0x09
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	92 2b       	or	r25, r18
    1132:	9f 83       	std	Y+7, r25	; 0x07
    1134:	8e 83       	std	Y+6, r24	; 0x06
    1136:	8e 81       	ldd	r24, Y+6	; 0x06
					usart_tx_at(USART_TERMINAL, myval);
    1138:	9f 81       	ldd	r25, Y+7	; 0x07
    113a:	4a e0       	ldi	r20, 0x0A	; 10
    113c:	be 01       	movw	r22, r28
    113e:	6f 5f       	subi	r22, 0xFF	; 255
    1140:	7f 4f       	sbci	r23, 0xFF	; 255
    1142:	44 d6       	rcall	.+3208   	; 0x1dcc <__itoa_ncheck>
					usart_tx_at(USART_TERMINAL, RESPONSE_FOOTER);
    1144:	6d ec       	ldi	r22, 0xCD	; 205
    1146:	72 e0       	ldi	r23, 0x02	; 2
    1148:	88 ec       	ldi	r24, 0xC8	; 200
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	ba d9       	rcall	.-3212   	; 0x4c2 <usart_tx_at>
    114e:	be 01       	movw	r22, r28
					
				#endif // DEBUG
				
				
								
				controller_next_state = RESET_REGISTERS;
    1150:	6f 5f       	subi	r22, 0xFF	; 255
    1152:	7f 4f       	sbci	r23, 0xFF	; 255
				break;
    1154:	88 ec       	ldi	r24, 0xC8	; 200
				
			case RESET_REGISTERS:
				reset_all_data(); //reset all arrays
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	b4 d9       	rcall	.-3224   	; 0x4c2 <usart_tx_at>
				controller_next_state = READ_EXT_DATA;
    115a:	6d ec       	ldi	r22, 0xCD	; 205
    115c:	72 e0       	ldi	r23, 0x02	; 2
				RTC_ISR_ACTIVE = 0; //FINISHED, break LOOP!
    115e:	88 ec       	ldi	r24, 0xC8	; 200
    1160:	90 e0       	ldi	r25, 0x00	; 0
				break;
    1162:	af d9       	rcall	.-3234   	; 0x4c2 <usart_tx_at>
			
			default:
				controller_next_state = RESET_REGISTERS; //TRY RESET.
    1164:	20 92 d6 04 	sts	0x04D6, r2	; 0x8004d6 <controller_next_state>
				break;
		}
		
		controller_state = controller_next_state; //NEXT STATE => STATE
    1168:	08 c0       	rjmp	.+16     	; 0x117a <__vector_8+0x4e6>
    116a:	dd d9       	rcall	.-3142   	; 0x526 <reset_all_data>
    116c:	10 92 d6 04 	sts	0x04D6, r1	; 0x8004d6 <controller_next_state>
	{
		goto END;
	} else {wdt_counter = 0;} //reset counter if limit is reached.
	
	RTC_ISR_ACTIVE = 1;
	while (RTC_ISR_ACTIVE == 1)
    1170:	10 92 c6 04 	sts	0x04C6, r1	; 0x8004c6 <RTC_ISR_ACTIVE>
    1174:	02 c0       	rjmp	.+4      	; 0x117a <__vector_8+0x4e6>
    1176:	20 92 d6 04 	sts	0x04D6, r2	; 0x8004d6 <controller_next_state>
		
	}

	END:
	
	wdt_reset();
    117a:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <controller_next_state>
	//wdt_enable();
	rtc_init_period(1);
    117e:	80 93 d7 04 	sts	0x04D7, r24	; 0x8004d7 <controller_state>
    1182:	80 91 c6 04 	lds	r24, 0x04C6	; 0x8004c6 <RTC_ISR_ACTIVE>
	return;
	
}
    1186:	81 30       	cpi	r24, 0x01	; 1
    1188:	09 f4       	brne	.+2      	; 0x118c <__vector_8+0x4f8>
    118a:	03 ce       	rjmp	.-1018   	; 0xd92 <__vector_8+0xfe>
    118c:	a8 95       	wdr
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	d8 d9       	rcall	.-3152   	; 0x544 <rtc_init_period>
    1194:	29 96       	adiw	r28, 0x09	; 9
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	cd bf       	out	0x3d, r28	; 61
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	ff 91       	pop	r31
    11a6:	ef 91       	pop	r30
    11a8:	bf 91       	pop	r27
    11aa:	af 91       	pop	r26
    11ac:	9f 91       	pop	r25
    11ae:	8f 91       	pop	r24
    11b0:	7f 91       	pop	r23
    11b2:	6f 91       	pop	r22
    11b4:	5f 91       	pop	r21
    11b6:	4f 91       	pop	r20
    11b8:	3f 91       	pop	r19
    11ba:	2f 91       	pop	r18
    11bc:	1f 91       	pop	r17
    11be:	0f 91       	pop	r16
    11c0:	ff 90       	pop	r15
    11c2:	ef 90       	pop	r14
    11c4:	df 90       	pop	r13
    11c6:	cf 90       	pop	r12
    11c8:	bf 90       	pop	r11
    11ca:	af 90       	pop	r10
    11cc:	9f 90       	pop	r9
    11ce:	8f 90       	pop	r8
    11d0:	7f 90       	pop	r7
    11d2:	6f 90       	pop	r6
    11d4:	5f 90       	pop	r5
    11d6:	4f 90       	pop	r4
    11d8:	3f 90       	pop	r3
    11da:	2f 90       	pop	r2
    11dc:	0f 90       	pop	r0
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	0f 90       	pop	r0
    11e2:	1f 90       	pop	r1
    11e4:	18 95       	reti

000011e6 <main>:
/*! \brief Main function.
 */
int main(void)
{
	//disables interrupts
	cli();
    11e6:	f8 94       	cli
	
	//sysclk_init();
	//PRR0 |= (1<<PRTWI) | (1<<PRTIM2) | (1<<PRTIM0) | (1<<PRTIM1) | (1<<PRSPI) | (1<<PRADC);
	PRR0 |= (1<<PRTIM2) | (1<<PRTIM0) | (1<<PRTIM1) | (1<<PRSPI) | (1<<PRADC);
    11e8:	c4 e6       	ldi	r28, 0x64	; 100
    11ea:	d0 e0       	ldi	r29, 0x00	; 0
    11ec:	88 81       	ld	r24, Y
    11ee:	8d 66       	ori	r24, 0x6D	; 109
    11f0:	88 83       	st	Y, r24
	//MCUCR &= ~(1<<PUD);
// 	MCUCR = 0x60;
// 	MCUCR = 0x40;
		
	//USART
	usart_init_rs232(USART_RADIO, &USART_OPTIONS); //Radio UART
    11f2:	62 e0       	ldi	r22, 0x02	; 2
    11f4:	71 e0       	ldi	r23, 0x01	; 1
    11f6:	80 ec       	ldi	r24, 0xC0	; 192
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	e2 d8       	rcall	.-3644   	; 0x3c0 <usart_init_rs232>
	//sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
	PRR0 &= ~(1<<PRUSART0);
    11fc:	88 81       	ld	r24, Y
    11fe:	8d 7f       	andi	r24, 0xFD	; 253
    1200:	88 83       	st	Y, r24
	
	#ifdef DEBUG
		usart_init_rs232(USART_TERMINAL, &USART_OPTIONS); //Radio UART
    1202:	62 e0       	ldi	r22, 0x02	; 2
    1204:	71 e0       	ldi	r23, 0x01	; 1
    1206:	88 ec       	ldi	r24, 0xC8	; 200
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	da d8       	rcall	.-3660   	; 0x3c0 <usart_init_rs232>
		//sysclk_enable_module(POWER_RED_REG0, PRUSART1_bm);
		PRR0 &= ~(1<<PRUSART1);
    120c:	88 81       	ld	r24, Y
    120e:	8f 7e       	andi	r24, 0xEF	; 239
    1210:	88 83       	st	Y, r24
		usart_putchar(USART_TERMINAL, 0x40);
    1212:	60 e4       	ldi	r22, 0x40	; 64
    1214:	88 ec       	ldi	r24, 0xC8	; 200
    1216:	90 e0       	ldi	r25, 0x00	; 0
		usart_putchar(USART_TERMINAL, 0x41);
    1218:	3b d8       	rcall	.-3978   	; 0x290 <usart_putchar>
    121a:	61 e4       	ldi	r22, 0x41	; 65
    121c:	88 ec       	ldi	r24, 0xC8	; 200
    121e:	90 e0       	ldi	r25, 0x00	; 0
	#endif // DEBUG
	
	//initialise loadcell pins
	loadcell_pins_init();
    1220:	37 d8       	rcall	.-3986   	; 0x290 <usart_putchar>
 *
 * \param prescaler   ADC clock prescaler
 */
static inline void adc_init(enum adc_prescaler prescaler)
{
	ADCSRA = (uint8_t)prescaler | (1 << ADEN);
    1222:	98 d9       	rcall	.-3280   	; 0x554 <loadcell_pins_init>
    1224:	83 e8       	ldi	r24, 0x83	; 131
	//ADC setup
	adc_initialization();
	
	//EEPROM init
	//Chip runs at 1MHz, EEPROM could support up to 400kHz. A prescaler of 1 gives ~35kHz clock speed.
	eeprom_pins_init();
    1226:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	EEOpen();
    122a:	9a d9       	rcall	.-3276   	; 0x560 <eeprom_pins_init>
	//RESET REALLY NEEDED? COULD TAKE LONG TIME FOR LARGE MEMORIES
	//reset_ext_eeprom(255); //2^n - 1.
	
 	//initialize radio pins
 	delay_ms(100); //wait for voltages to settle
    122c:	0e 94 68 00 	call	0xd0	; 0xd0 <EEOpen>
    1230:	6b e1       	ldi	r22, 0x1B	; 27
 	radio_pins_init();
    1232:	71 e4       	ldi	r23, 0x41	; 65
 	delay_ms(100);
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	39 d9       	rcall	.-3470   	; 0x4ac <__portable_avr_delay_cycles>
    123a:	8f d9       	rcall	.-3298   	; 0x55a <radio_pins_init>

	//Shut down radio, might be on
	//FIND A SOLUTION THAT ALWAYS GUARANTEE POWER OFF OR POWER SLEEP, OR WHATEVER IS THE BEST OPTION.
	if( (STATUS_PORT & (1<<STATUS_PIN)) == 0x20 ) //have a counter and reset if fail
    123c:	6b e1       	ldi	r22, 0x1B	; 27
	{
		START:
		if(radio_power_off_at() == 1)
    123e:	71 e4       	ldi	r23, 0x41	; 65
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	90 e0       	ldi	r25, 0x00	; 0
		{
			radio_power_off();
    1244:	33 d9       	rcall	.-3482   	; 0x4ac <__portable_avr_delay_cycles>
    1246:	4d 9b       	sbis	0x09, 5	; 9
		}
		
		if( (STATUS_PORT & (1<<STATUS_PIN)) == 0x20 ) //if it won't turn off try again...
    1248:	06 c0       	rjmp	.+12     	; 0x1256 <main+0x70>
    124a:	06 da       	rcall	.-3060   	; 0x658 <radio_power_off_at>
			goto START;
		}
	}
	
	//reset all tx data and date
	reset_all_data(); //PROBLEM FIX!!!!!!!!!!!!!!!!!!!!!!
    124c:	81 30       	cpi	r24, 0x01	; 1
    124e:	09 f4       	brne	.+2      	; 0x1252 <main+0x6c>
	
	
	rtc_init_period(2); //using RTC as sampler timer.
    1250:	d5 d9       	rcall	.-3158   	; 0x5fc <radio_power_off>
    1252:	4d 99       	sbic	0x09, 5	; 9
    1254:	fa cf       	rjmp	.-12     	; 0x124a <main+0x64>
    1256:	67 d9       	rcall	.-3378   	; 0x526 <reset_all_data>
 	//wdt_reset();
 	//wdt_enable(WDTO_4S);
 	
	//Set sleep mode
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    1258:	82 e0       	ldi	r24, 0x02	; 2
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	73 d9       	rcall	.-3354   	; 0x544 <rtc_init_period>
    125e:	83 b7       	in	r24, 0x33	; 51
	//set_sleep_mode(SLEEP_MODE_PWR_SAVE);
	
	sei(); //enable interrupts
    1260:	81 7f       	andi	r24, 0xF1	; 241
	
	//go to sleep and let interrupts do the work...zzz....zzzz
	while (1)
	{
 		sleep_enable();
    1262:	84 60       	ori	r24, 0x04	; 4
    1264:	83 bf       	out	0x33, r24	; 51
    1266:	78 94       	sei
 		sleep_bod_disable();
    1268:	83 b7       	in	r24, 0x33	; 51
    126a:	81 60       	ori	r24, 0x01	; 1
    126c:	83 bf       	out	0x33, r24	; 51
    126e:	85 b7       	in	r24, 0x35	; 53
    1270:	80 66       	ori	r24, 0x60	; 96
 		sleep_cpu();
    1272:	85 bf       	out	0x35, r24	; 53
 		sleep_disable(); 	
    1274:	8f 7d       	andi	r24, 0xDF	; 223
    1276:	85 bf       	out	0x35, r24	; 53
    1278:	88 95       	sleep
    127a:	83 b7       	in	r24, 0x33	; 51
    127c:	8e 7f       	andi	r24, 0xFE	; 254
    127e:	83 bf       	out	0x33, r24	; 51
    1280:	f3 cf       	rjmp	.-26     	; 0x1268 <main+0x82>

00001282 <MQTTSerialize_connectLength>:

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    1282:	ef 92       	push	r14
    1284:	ff 92       	push	r15
    1286:	0f 93       	push	r16
    1288:	1f 93       	push	r17
    128a:	cf 93       	push	r28
    128c:	df 93       	push	r29
    128e:	ec 01       	movw	r28, r24
    1290:	8e 81       	ldd	r24, Y+6	; 0x06
    1292:	83 30       	cpi	r24, 0x03	; 3
    1294:	29 f0       	breq	.+10     	; 0x12a0 <MQTTSerialize_connectLength+0x1e>
    1296:	84 30       	cpi	r24, 0x04	; 4
    1298:	31 f4       	brne	.+12     	; 0x12a6 <MQTTSerialize_connectLength+0x24>
    129a:	0a e0       	ldi	r16, 0x0A	; 10
    129c:	10 e0       	ldi	r17, 0x00	; 0
    129e:	05 c0       	rjmp	.+10     	; 0x12aa <MQTTSerialize_connectLength+0x28>
    12a0:	0c e0       	ldi	r16, 0x0C	; 12
    12a2:	10 e0       	ldi	r17, 0x00	; 0
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <MQTTSerialize_connectLength+0x28>
    12a6:	00 e0       	ldi	r16, 0x00	; 0
    12a8:	10 e0       	ldi	r17, 0x00	; 0
    12aa:	4f 81       	ldd	r20, Y+7	; 0x07
    12ac:	58 85       	ldd	r21, Y+8	; 0x08
    12ae:	69 85       	ldd	r22, Y+9	; 0x09
    12b0:	7a 85       	ldd	r23, Y+10	; 0x0a
    12b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    12b4:	9c 85       	ldd	r25, Y+12	; 0x0c
    12b6:	fb d1       	rcall	.+1014   	; 0x16ae <MQTTstrlen>
    12b8:	02 96       	adiw	r24, 0x02	; 2
    12ba:	08 0f       	add	r16, r24
    12bc:	19 1f       	adc	r17, r25
    12be:	88 89       	ldd	r24, Y+16	; 0x10
    12c0:	88 23       	and	r24, r24
    12c2:	a1 f0       	breq	.+40     	; 0x12ec <MQTTSerialize_connectLength+0x6a>
    12c4:	4f 89       	ldd	r20, Y+23	; 0x17
    12c6:	58 8d       	ldd	r21, Y+24	; 0x18
    12c8:	69 8d       	ldd	r22, Y+25	; 0x19
    12ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12d0:	ee d1       	rcall	.+988    	; 0x16ae <MQTTstrlen>
    12d2:	7c 01       	movw	r14, r24
    12d4:	4d 8d       	ldd	r20, Y+29	; 0x1d
    12d6:	5e 8d       	ldd	r21, Y+30	; 0x1e
    12d8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    12da:	78 a1       	ldd	r23, Y+32	; 0x20
    12dc:	89 a1       	ldd	r24, Y+33	; 0x21
    12de:	9a a1       	ldd	r25, Y+34	; 0x22
    12e0:	e6 d1       	rcall	.+972    	; 0x16ae <MQTTstrlen>
    12e2:	8e 0d       	add	r24, r14
    12e4:	9f 1d       	adc	r25, r15
    12e6:	04 96       	adiw	r24, 0x04	; 4
    12e8:	08 0f       	add	r16, r24
    12ea:	19 1f       	adc	r17, r25
    12ec:	8d a1       	ldd	r24, Y+37	; 0x25
    12ee:	9e a1       	ldd	r25, Y+38	; 0x26
    12f0:	89 2b       	or	r24, r25
    12f2:	21 f4       	brne	.+8      	; 0x12fc <MQTTSerialize_connectLength+0x7a>
    12f4:	89 a5       	ldd	r24, Y+41	; 0x29
    12f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    12f8:	89 2b       	or	r24, r25
    12fa:	51 f0       	breq	.+20     	; 0x1310 <MQTTSerialize_connectLength+0x8e>
    12fc:	4d a1       	ldd	r20, Y+37	; 0x25
    12fe:	5e a1       	ldd	r21, Y+38	; 0x26
    1300:	6f a1       	ldd	r22, Y+39	; 0x27
    1302:	78 a5       	ldd	r23, Y+40	; 0x28
    1304:	89 a5       	ldd	r24, Y+41	; 0x29
    1306:	9a a5       	ldd	r25, Y+42	; 0x2a
    1308:	d2 d1       	rcall	.+932    	; 0x16ae <MQTTstrlen>
    130a:	02 96       	adiw	r24, 0x02	; 2
    130c:	08 0f       	add	r16, r24
    130e:	19 1f       	adc	r17, r25
    1310:	8b a5       	ldd	r24, Y+43	; 0x2b
    1312:	9c a5       	ldd	r25, Y+44	; 0x2c
    1314:	89 2b       	or	r24, r25
    1316:	21 f4       	brne	.+8      	; 0x1320 <MQTTSerialize_connectLength+0x9e>
    1318:	8f a5       	ldd	r24, Y+47	; 0x2f
    131a:	98 a9       	ldd	r25, Y+48	; 0x30
    131c:	89 2b       	or	r24, r25
    131e:	51 f0       	breq	.+20     	; 0x1334 <MQTTSerialize_connectLength+0xb2>
    1320:	4b a5       	ldd	r20, Y+43	; 0x2b
    1322:	5c a5       	ldd	r21, Y+44	; 0x2c
    1324:	6d a5       	ldd	r22, Y+45	; 0x2d
    1326:	7e a5       	ldd	r23, Y+46	; 0x2e
    1328:	8f a5       	ldd	r24, Y+47	; 0x2f
    132a:	98 a9       	ldd	r25, Y+48	; 0x30
    132c:	c0 d1       	rcall	.+896    	; 0x16ae <MQTTstrlen>
    132e:	02 96       	adiw	r24, 0x02	; 2
    1330:	08 0f       	add	r16, r24
    1332:	19 1f       	adc	r17, r25
    1334:	c8 01       	movw	r24, r16
    1336:	df 91       	pop	r29
    1338:	cf 91       	pop	r28
    133a:	1f 91       	pop	r17
    133c:	0f 91       	pop	r16
    133e:	ff 90       	pop	r15
    1340:	ef 90       	pop	r14
    1342:	08 95       	ret

00001344 <MQTTSerialize_connect>:
    1344:	af 92       	push	r10
    1346:	bf 92       	push	r11
    1348:	cf 92       	push	r12
    134a:	df 92       	push	r13
    134c:	ef 92       	push	r14
    134e:	ff 92       	push	r15
    1350:	0f 93       	push	r16
    1352:	1f 93       	push	r17
    1354:	cf 93       	push	r28
    1356:	df 93       	push	r29
    1358:	00 d0       	rcall	.+0      	; 0x135a <MQTTSerialize_connect+0x16>
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
    135e:	6c 01       	movw	r12, r24
    1360:	5b 01       	movw	r10, r22
    1362:	8a 01       	movw	r16, r20
    1364:	9a 83       	std	Y+2, r25	; 0x02
    1366:	89 83       	std	Y+1, r24	; 0x01
    1368:	ca 01       	movw	r24, r20
    136a:	8b df       	rcall	.-234    	; 0x1282 <MQTTSerialize_connectLength>
    136c:	7c 01       	movw	r14, r24
    136e:	03 d1       	rcall	.+518    	; 0x1576 <MQTTPacket_len>
    1370:	a8 16       	cp	r10, r24
    1372:	b9 06       	cpc	r11, r25
    1374:	0c f4       	brge	.+2      	; 0x1378 <MQTTSerialize_connect+0x34>
    1376:	9f c0       	rjmp	.+318    	; 0x14b6 <MQTTSerialize_connect+0x172>
    1378:	60 e1       	ldi	r22, 0x10	; 16
    137a:	ce 01       	movw	r24, r28
    137c:	01 96       	adiw	r24, 0x01	; 1
    137e:	0a d1       	rcall	.+532    	; 0x1594 <writeChar>
    1380:	b7 01       	movw	r22, r14
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	9a 81       	ldd	r25, Y+2	; 0x02
    1386:	d1 d0       	rcall	.+418    	; 0x152a <MQTTPacket_encode>
    1388:	29 81       	ldd	r18, Y+1	; 0x01
    138a:	3a 81       	ldd	r19, Y+2	; 0x02
    138c:	82 0f       	add	r24, r18
    138e:	93 1f       	adc	r25, r19
    1390:	9a 83       	std	Y+2, r25	; 0x02
    1392:	89 83       	std	Y+1, r24	; 0x01
    1394:	f8 01       	movw	r30, r16
    1396:	86 81       	ldd	r24, Z+6	; 0x06
    1398:	84 30       	cpi	r24, 0x04	; 4
    139a:	51 f4       	brne	.+20     	; 0x13b0 <MQTTSerialize_connect+0x6c>
    139c:	6c e4       	ldi	r22, 0x4C	; 76
    139e:	74 e0       	ldi	r23, 0x04	; 4
    13a0:	ce 01       	movw	r24, r28
    13a2:	01 96       	adiw	r24, 0x01	; 1
    13a4:	20 d1       	rcall	.+576    	; 0x15e6 <writeCString>
    13a6:	64 e0       	ldi	r22, 0x04	; 4
    13a8:	ce 01       	movw	r24, r28
    13aa:	01 96       	adiw	r24, 0x01	; 1
    13ac:	f3 d0       	rcall	.+486    	; 0x1594 <writeChar>
    13ae:	09 c0       	rjmp	.+18     	; 0x13c2 <MQTTSerialize_connect+0x7e>
    13b0:	61 e5       	ldi	r22, 0x51	; 81
    13b2:	74 e0       	ldi	r23, 0x04	; 4
    13b4:	ce 01       	movw	r24, r28
    13b6:	01 96       	adiw	r24, 0x01	; 1
    13b8:	16 d1       	rcall	.+556    	; 0x15e6 <writeCString>
    13ba:	63 e0       	ldi	r22, 0x03	; 3
    13bc:	ce 01       	movw	r24, r28
    13be:	01 96       	adiw	r24, 0x01	; 1
    13c0:	e9 d0       	rcall	.+466    	; 0x1594 <writeChar>
    13c2:	f1 2c       	mov	r15, r1
    13c4:	f8 01       	movw	r30, r16
    13c6:	87 85       	ldd	r24, Z+15	; 0x0f
    13c8:	80 fb       	bst	r24, 0
    13ca:	f1 f8       	bld	r15, 1
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 89       	ldd	r25, Z+16	; 0x10
    13d0:	91 11       	cpse	r25, r1
    13d2:	01 c0       	rjmp	.+2      	; 0x13d6 <MQTTSerialize_connect+0x92>
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	80 fb       	bst	r24, 0
    13d8:	f2 f8       	bld	r15, 2
    13da:	f2 fe       	sbrs	r15, 2
    13dc:	0d c0       	rjmp	.+26     	; 0x13f8 <MQTTSerialize_connect+0xb4>
    13de:	f8 01       	movw	r30, r16
    13e0:	84 a1       	ldd	r24, Z+36	; 0x24
    13e2:	83 70       	andi	r24, 0x03	; 3
    13e4:	88 0f       	add	r24, r24
    13e6:	88 0f       	add	r24, r24
    13e8:	88 0f       	add	r24, r24
    13ea:	9f 2d       	mov	r25, r15
    13ec:	97 7e       	andi	r25, 0xE7	; 231
    13ee:	f9 2e       	mov	r15, r25
    13f0:	f8 2a       	or	r15, r24
    13f2:	83 a1       	ldd	r24, Z+35	; 0x23
    13f4:	80 fb       	bst	r24, 0
    13f6:	f5 f8       	bld	r15, 5
    13f8:	f8 01       	movw	r30, r16
    13fa:	85 a1       	ldd	r24, Z+37	; 0x25
    13fc:	96 a1       	ldd	r25, Z+38	; 0x26
    13fe:	89 2b       	or	r24, r25
    1400:	21 f4       	brne	.+8      	; 0x140a <MQTTSerialize_connect+0xc6>
    1402:	81 a5       	ldd	r24, Z+41	; 0x29
    1404:	92 a5       	ldd	r25, Z+42	; 0x2a
    1406:	89 2b       	or	r24, r25
    1408:	11 f0       	breq	.+4      	; 0x140e <MQTTSerialize_connect+0xca>
    140a:	68 94       	set
    140c:	f7 f8       	bld	r15, 7
    140e:	f8 01       	movw	r30, r16
    1410:	83 a5       	ldd	r24, Z+43	; 0x2b
    1412:	94 a5       	ldd	r25, Z+44	; 0x2c
    1414:	89 2b       	or	r24, r25
    1416:	21 f4       	brne	.+8      	; 0x1420 <MQTTSerialize_connect+0xdc>
    1418:	87 a5       	ldd	r24, Z+47	; 0x2f
    141a:	90 a9       	ldd	r25, Z+48	; 0x30
    141c:	89 2b       	or	r24, r25
    141e:	11 f0       	breq	.+4      	; 0x1424 <MQTTSerialize_connect+0xe0>
    1420:	68 94       	set
    1422:	f6 f8       	bld	r15, 6
    1424:	6f 2d       	mov	r22, r15
    1426:	ce 01       	movw	r24, r28
    1428:	01 96       	adiw	r24, 0x01	; 1
    142a:	b4 d0       	rcall	.+360    	; 0x1594 <writeChar>
    142c:	f8 01       	movw	r30, r16
    142e:	65 85       	ldd	r22, Z+13	; 0x0d
    1430:	76 85       	ldd	r23, Z+14	; 0x0e
    1432:	ce 01       	movw	r24, r28
    1434:	01 96       	adiw	r24, 0x01	; 1
    1436:	b8 d0       	rcall	.+368    	; 0x15a8 <writeInt>
    1438:	f8 01       	movw	r30, r16
    143a:	27 81       	ldd	r18, Z+7	; 0x07
    143c:	30 85       	ldd	r19, Z+8	; 0x08
    143e:	41 85       	ldd	r20, Z+9	; 0x09
    1440:	52 85       	ldd	r21, Z+10	; 0x0a
    1442:	63 85       	ldd	r22, Z+11	; 0x0b
    1444:	74 85       	ldd	r23, Z+12	; 0x0c
    1446:	ce 01       	movw	r24, r28
    1448:	01 96       	adiw	r24, 0x01	; 1
    144a:	f2 d0       	rcall	.+484    	; 0x1630 <writeMQTTString>
    144c:	f8 01       	movw	r30, r16
    144e:	80 89       	ldd	r24, Z+16	; 0x10
    1450:	88 23       	and	r24, r24
    1452:	99 f0       	breq	.+38     	; 0x147a <MQTTSerialize_connect+0x136>
    1454:	27 89       	ldd	r18, Z+23	; 0x17
    1456:	30 8d       	ldd	r19, Z+24	; 0x18
    1458:	41 8d       	ldd	r20, Z+25	; 0x19
    145a:	52 8d       	ldd	r21, Z+26	; 0x1a
    145c:	63 8d       	ldd	r22, Z+27	; 0x1b
    145e:	74 8d       	ldd	r23, Z+28	; 0x1c
    1460:	ce 01       	movw	r24, r28
    1462:	01 96       	adiw	r24, 0x01	; 1
    1464:	e5 d0       	rcall	.+458    	; 0x1630 <writeMQTTString>
    1466:	f8 01       	movw	r30, r16
    1468:	25 8d       	ldd	r18, Z+29	; 0x1d
    146a:	36 8d       	ldd	r19, Z+30	; 0x1e
    146c:	47 8d       	ldd	r20, Z+31	; 0x1f
    146e:	50 a1       	ldd	r21, Z+32	; 0x20
    1470:	61 a1       	ldd	r22, Z+33	; 0x21
    1472:	72 a1       	ldd	r23, Z+34	; 0x22
    1474:	ce 01       	movw	r24, r28
    1476:	01 96       	adiw	r24, 0x01	; 1
    1478:	db d0       	rcall	.+438    	; 0x1630 <writeMQTTString>
    147a:	ef 2c       	mov	r14, r15
    147c:	ff 20       	and	r15, r15
    147e:	54 f4       	brge	.+20     	; 0x1494 <MQTTSerialize_connect+0x150>
    1480:	f8 01       	movw	r30, r16
    1482:	25 a1       	ldd	r18, Z+37	; 0x25
    1484:	36 a1       	ldd	r19, Z+38	; 0x26
    1486:	47 a1       	ldd	r20, Z+39	; 0x27
    1488:	50 a5       	ldd	r21, Z+40	; 0x28
    148a:	61 a5       	ldd	r22, Z+41	; 0x29
    148c:	72 a5       	ldd	r23, Z+42	; 0x2a
    148e:	ce 01       	movw	r24, r28
    1490:	01 96       	adiw	r24, 0x01	; 1
    1492:	ce d0       	rcall	.+412    	; 0x1630 <writeMQTTString>
    1494:	e6 fe       	sbrs	r14, 6
    1496:	0a c0       	rjmp	.+20     	; 0x14ac <MQTTSerialize_connect+0x168>
    1498:	f8 01       	movw	r30, r16
    149a:	23 a5       	ldd	r18, Z+43	; 0x2b
    149c:	34 a5       	ldd	r19, Z+44	; 0x2c
    149e:	45 a5       	ldd	r20, Z+45	; 0x2d
    14a0:	56 a5       	ldd	r21, Z+46	; 0x2e
    14a2:	67 a5       	ldd	r22, Z+47	; 0x2f
    14a4:	70 a9       	ldd	r23, Z+48	; 0x30
    14a6:	ce 01       	movw	r24, r28
    14a8:	01 96       	adiw	r24, 0x01	; 1
    14aa:	c2 d0       	rcall	.+388    	; 0x1630 <writeMQTTString>
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	9a 81       	ldd	r25, Y+2	; 0x02
    14b0:	8c 19       	sub	r24, r12
    14b2:	9d 09       	sbc	r25, r13
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <MQTTSerialize_connect+0x176>
    14b6:	8e ef       	ldi	r24, 0xFE	; 254
    14b8:	9f ef       	ldi	r25, 0xFF	; 255
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
    14c2:	1f 91       	pop	r17
    14c4:	0f 91       	pop	r16
    14c6:	ff 90       	pop	r15
    14c8:	ef 90       	pop	r14
    14ca:	df 90       	pop	r13
    14cc:	cf 90       	pop	r12
    14ce:	bf 90       	pop	r11
    14d0:	af 90       	pop	r10
    14d2:	08 95       	ret

000014d4 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
    14d4:	0f 93       	push	r16
    14d6:	1f 93       	push	r17
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
    14dc:	00 d0       	rcall	.+0      	; 0x14de <MQTTSerialize_zero+0xa>
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
    14e2:	9a 83       	std	Y+2, r25	; 0x02
    14e4:	89 83       	std	Y+1, r24	; 0x01

	FUNC_ENTRY;
	if (buflen < 2)
    14e6:	62 30       	cpi	r22, 0x02	; 2
    14e8:	71 05       	cpc	r23, r1
    14ea:	9c f0       	brlt	.+38     	; 0x1512 <MQTTSerialize_zero+0x3e>
    14ec:	8c 01       	movw	r16, r24
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
    14ee:	64 2f       	mov	r22, r20
    14f0:	62 95       	swap	r22
    14f2:	60 7f       	andi	r22, 0xF0	; 240
	writeChar(&ptr, header.byte); /* write header */
    14f4:	ce 01       	movw	r24, r28
    14f6:	01 96       	adiw	r24, 0x01	; 1
    14f8:	4d d0       	rcall	.+154    	; 0x1594 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
    14fa:	60 e0       	ldi	r22, 0x00	; 0
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	9a 81       	ldd	r25, Y+2	; 0x02
    1502:	13 d0       	rcall	.+38     	; 0x152a <MQTTPacket_encode>
	rc = ptr - buf;
    1504:	29 81       	ldd	r18, Y+1	; 0x01
    1506:	3a 81       	ldd	r19, Y+2	; 0x02
    1508:	82 0f       	add	r24, r18
    150a:	93 1f       	adc	r25, r19
    150c:	80 1b       	sub	r24, r16
    150e:	91 0b       	sbc	r25, r17
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <MQTTSerialize_zero+0x42>
	unsigned char *ptr = buf;

	FUNC_ENTRY;
	if (buflen < 2)
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    1512:	8e ef       	ldi	r24, 0xFE	; 254
    1514:	9f ef       	ldi	r25, 0xFF	; 255
	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
	rc = ptr - buf;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	df 91       	pop	r29
    151c:	cf 91       	pop	r28
    151e:	1f 91       	pop	r17
    1520:	0f 91       	pop	r16
    1522:	08 95       	ret

00001524 <MQTTSerialize_disconnect>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
    1524:	4e e0       	ldi	r20, 0x0E	; 14
    1526:	d6 cf       	rjmp	.-84     	; 0x14d4 <MQTTSerialize_zero>
}
    1528:	08 95       	ret

0000152a <MQTTPacket_encode>:
		}
	}
	mqttstring->cstring = NULL;
	FUNC_EXIT_RC(rc);
	return rc;
}
    152a:	dc 01       	movw	r26, r24
    152c:	e0 e0       	ldi	r30, 0x00	; 0
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	9b 01       	movw	r18, r22
    1532:	2f 77       	andi	r18, 0x7F	; 127
    1534:	30 78       	andi	r19, 0x80	; 128
    1536:	33 23       	and	r19, r19
    1538:	34 f4       	brge	.+12     	; 0x1546 <MQTTPacket_encode+0x1c>
    153a:	21 50       	subi	r18, 0x01	; 1
    153c:	31 09       	sbc	r19, r1
    153e:	20 68       	ori	r18, 0x80	; 128
    1540:	3f 6f       	ori	r19, 0xFF	; 255
    1542:	2f 5f       	subi	r18, 0xFF	; 255
    1544:	3f 4f       	sbci	r19, 0xFF	; 255
    1546:	ab 01       	movw	r20, r22
    1548:	77 23       	and	r23, r23
    154a:	14 f4       	brge	.+4      	; 0x1550 <MQTTPacket_encode+0x26>
    154c:	41 58       	subi	r20, 0x81	; 129
    154e:	5f 4f       	sbci	r21, 0xFF	; 255
    1550:	ba 01       	movw	r22, r20
    1552:	66 0f       	add	r22, r22
    1554:	67 2f       	mov	r22, r23
    1556:	66 1f       	adc	r22, r22
    1558:	77 0b       	sbc	r23, r23
    155a:	16 16       	cp	r1, r22
    155c:	17 06       	cpc	r1, r23
    155e:	24 f4       	brge	.+8      	; 0x1568 <MQTTPacket_encode+0x3e>
    1560:	31 96       	adiw	r30, 0x01	; 1
    1562:	20 68       	ori	r18, 0x80	; 128
    1564:	2d 93       	st	X+, r18
    1566:	e4 cf       	rjmp	.-56     	; 0x1530 <MQTTPacket_encode+0x6>
    1568:	dc 01       	movw	r26, r24
    156a:	ae 0f       	add	r26, r30
    156c:	bf 1f       	adc	r27, r31
    156e:	2c 93       	st	X, r18
    1570:	cf 01       	movw	r24, r30
    1572:	01 96       	adiw	r24, 0x01	; 1
    1574:	08 95       	ret

00001576 <MQTTPacket_len>:
    1576:	9c 01       	movw	r18, r24
    1578:	2f 5f       	subi	r18, 0xFF	; 255
    157a:	3f 4f       	sbci	r19, 0xFF	; 255
    157c:	20 38       	cpi	r18, 0x80	; 128
    157e:	31 05       	cpc	r19, r1
    1580:	14 f4       	brge	.+4      	; 0x1586 <MQTTPacket_len+0x10>
    1582:	02 96       	adiw	r24, 0x02	; 2
    1584:	08 95       	ret
    1586:	21 15       	cp	r18, r1
    1588:	30 44       	sbci	r19, 0x40	; 64
    158a:	14 f4       	brge	.+4      	; 0x1590 <MQTTPacket_len+0x1a>
    158c:	03 96       	adiw	r24, 0x03	; 3
    158e:	08 95       	ret
    1590:	04 96       	adiw	r24, 0x04	; 4
    1592:	08 95       	ret

00001594 <writeChar>:
    1594:	fc 01       	movw	r30, r24
    1596:	a0 81       	ld	r26, Z
    1598:	b1 81       	ldd	r27, Z+1	; 0x01
    159a:	6c 93       	st	X, r22
    159c:	80 81       	ld	r24, Z
    159e:	91 81       	ldd	r25, Z+1	; 0x01
    15a0:	01 96       	adiw	r24, 0x01	; 1
    15a2:	91 83       	std	Z+1, r25	; 0x01
    15a4:	80 83       	st	Z, r24
    15a6:	08 95       	ret

000015a8 <writeInt>:
    15a8:	fc 01       	movw	r30, r24
    15aa:	a0 81       	ld	r26, Z
    15ac:	b1 81       	ldd	r27, Z+1	; 0x01
    15ae:	cb 01       	movw	r24, r22
    15b0:	77 23       	and	r23, r23
    15b2:	14 f4       	brge	.+4      	; 0x15b8 <writeInt+0x10>
    15b4:	81 50       	subi	r24, 0x01	; 1
    15b6:	9f 4f       	sbci	r25, 0xFF	; 255
    15b8:	9c 93       	st	X, r25
    15ba:	a0 81       	ld	r26, Z
    15bc:	b1 81       	ldd	r27, Z+1	; 0x01
    15be:	cd 01       	movw	r24, r26
    15c0:	01 96       	adiw	r24, 0x01	; 1
    15c2:	91 83       	std	Z+1, r25	; 0x01
    15c4:	80 83       	st	Z, r24
    15c6:	70 78       	andi	r23, 0x80	; 128
    15c8:	77 23       	and	r23, r23
    15ca:	2c f4       	brge	.+10     	; 0x15d6 <writeInt+0x2e>
    15cc:	61 50       	subi	r22, 0x01	; 1
    15ce:	71 09       	sbc	r23, r1
    15d0:	7f 6f       	ori	r23, 0xFF	; 255
    15d2:	6f 5f       	subi	r22, 0xFF	; 255
    15d4:	7f 4f       	sbci	r23, 0xFF	; 255
    15d6:	11 96       	adiw	r26, 0x01	; 1
    15d8:	6c 93       	st	X, r22
    15da:	80 81       	ld	r24, Z
    15dc:	91 81       	ldd	r25, Z+1	; 0x01
    15de:	01 96       	adiw	r24, 0x01	; 1
    15e0:	91 83       	std	Z+1, r25	; 0x01
    15e2:	80 83       	st	Z, r24
    15e4:	08 95       	ret

000015e6 <writeCString>:
    15e6:	ef 92       	push	r14
    15e8:	ff 92       	push	r15
    15ea:	0f 93       	push	r16
    15ec:	1f 93       	push	r17
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
    15f2:	8c 01       	movw	r16, r24
    15f4:	7b 01       	movw	r14, r22
    15f6:	eb 01       	movw	r28, r22
    15f8:	09 90       	ld	r0, Y+
    15fa:	00 20       	and	r0, r0
    15fc:	e9 f7       	brne	.-6      	; 0x15f8 <writeCString+0x12>
    15fe:	21 97       	sbiw	r28, 0x01	; 1
    1600:	c6 1b       	sub	r28, r22
    1602:	d7 0b       	sbc	r29, r23
    1604:	be 01       	movw	r22, r28
    1606:	d0 df       	rcall	.-96     	; 0x15a8 <writeInt>
    1608:	ae 01       	movw	r20, r28
    160a:	b7 01       	movw	r22, r14
    160c:	f8 01       	movw	r30, r16
    160e:	80 81       	ld	r24, Z
    1610:	91 81       	ldd	r25, Z+1	; 0x01
    1612:	9d d3       	rcall	.+1850   	; 0x1d4e <memcpy>
    1614:	f8 01       	movw	r30, r16
    1616:	80 81       	ld	r24, Z
    1618:	91 81       	ldd	r25, Z+1	; 0x01
    161a:	c8 0f       	add	r28, r24
    161c:	d9 1f       	adc	r29, r25
    161e:	d1 83       	std	Z+1, r29	; 0x01
    1620:	c0 83       	st	Z, r28
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	1f 91       	pop	r17
    1628:	0f 91       	pop	r16
    162a:	ff 90       	pop	r15
    162c:	ef 90       	pop	r14
    162e:	08 95       	ret

00001630 <writeMQTTString>:
    1630:	ef 92       	push	r14
    1632:	ff 92       	push	r15
    1634:	0f 93       	push	r16
    1636:	1f 93       	push	r17
    1638:	cf 93       	push	r28
    163a:	df 93       	push	r29
    163c:	00 d0       	rcall	.+0      	; 0x163e <writeMQTTString+0xe>
    163e:	00 d0       	rcall	.+0      	; 0x1640 <writeMQTTString+0x10>
    1640:	00 d0       	rcall	.+0      	; 0x1642 <writeMQTTString+0x12>
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
    1646:	7c 01       	movw	r14, r24
    1648:	29 83       	std	Y+1, r18	; 0x01
    164a:	3a 83       	std	Y+2, r19	; 0x02
    164c:	4b 83       	std	Y+3, r20	; 0x03
    164e:	5c 83       	std	Y+4, r21	; 0x04
    1650:	6d 83       	std	Y+5, r22	; 0x05
    1652:	7e 83       	std	Y+6, r23	; 0x06
    1654:	0b 81       	ldd	r16, Y+3	; 0x03
    1656:	1c 81       	ldd	r17, Y+4	; 0x04
    1658:	10 16       	cp	r1, r16
    165a:	11 06       	cpc	r1, r17
    165c:	8c f4       	brge	.+34     	; 0x1680 <writeMQTTString+0x50>
    165e:	b8 01       	movw	r22, r16
    1660:	a3 df       	rcall	.-186    	; 0x15a8 <writeInt>
    1662:	6d 81       	ldd	r22, Y+5	; 0x05
    1664:	7e 81       	ldd	r23, Y+6	; 0x06
    1666:	a8 01       	movw	r20, r16
    1668:	f7 01       	movw	r30, r14
    166a:	80 81       	ld	r24, Z
    166c:	91 81       	ldd	r25, Z+1	; 0x01
    166e:	6f d3       	rcall	.+1758   	; 0x1d4e <memcpy>
    1670:	f7 01       	movw	r30, r14
    1672:	80 81       	ld	r24, Z
    1674:	91 81       	ldd	r25, Z+1	; 0x01
    1676:	08 0f       	add	r16, r24
    1678:	19 1f       	adc	r17, r25
    167a:	11 83       	std	Z+1, r17	; 0x01
    167c:	00 83       	st	Z, r16
    167e:	0a c0       	rjmp	.+20     	; 0x1694 <writeMQTTString+0x64>
    1680:	69 81       	ldd	r22, Y+1	; 0x01
    1682:	7a 81       	ldd	r23, Y+2	; 0x02
    1684:	61 15       	cp	r22, r1
    1686:	71 05       	cpc	r23, r1
    1688:	11 f0       	breq	.+4      	; 0x168e <writeMQTTString+0x5e>
    168a:	ad df       	rcall	.-166    	; 0x15e6 <writeCString>
    168c:	03 c0       	rjmp	.+6      	; 0x1694 <writeMQTTString+0x64>
    168e:	60 e0       	ldi	r22, 0x00	; 0
    1690:	70 e0       	ldi	r23, 0x00	; 0
    1692:	8a df       	rcall	.-236    	; 0x15a8 <writeInt>
    1694:	26 96       	adiw	r28, 0x06	; 6
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	de bf       	out	0x3e, r29	; 62
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	cd bf       	out	0x3d, r28	; 61
    16a0:	df 91       	pop	r29
    16a2:	cf 91       	pop	r28
    16a4:	1f 91       	pop	r17
    16a6:	0f 91       	pop	r16
    16a8:	ff 90       	pop	r15
    16aa:	ef 90       	pop	r14
    16ac:	08 95       	ret

000016ae <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
    16ae:	cf 93       	push	r28
    16b0:	df 93       	push	r29
    16b2:	00 d0       	rcall	.+0      	; 0x16b4 <MQTTstrlen+0x6>
    16b4:	00 d0       	rcall	.+0      	; 0x16b6 <MQTTstrlen+0x8>
    16b6:	00 d0       	rcall	.+0      	; 0x16b8 <MQTTstrlen+0xa>
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	49 83       	std	Y+1, r20	; 0x01
    16be:	5a 83       	std	Y+2, r21	; 0x02
    16c0:	6b 83       	std	Y+3, r22	; 0x03
    16c2:	7c 83       	std	Y+4, r23	; 0x04
    16c4:	8d 83       	std	Y+5, r24	; 0x05
    16c6:	9e 83       	std	Y+6, r25	; 0x06
    16c8:	a9 81       	ldd	r26, Y+1	; 0x01
    16ca:	ba 81       	ldd	r27, Y+2	; 0x02
	int rc = 0;

	if (mqttstring.cstring)
    16cc:	10 97       	sbiw	r26, 0x00	; 0
    16ce:	49 f0       	breq	.+18     	; 0x16e2 <MQTTstrlen+0x34>
		rc = strlen(mqttstring.cstring);
    16d0:	fd 01       	movw	r30, r26
    16d2:	01 90       	ld	r0, Z+
    16d4:	00 20       	and	r0, r0
    16d6:	e9 f7       	brne	.-6      	; 0x16d2 <MQTTstrlen+0x24>
    16d8:	31 97       	sbiw	r30, 0x01	; 1
    16da:	cf 01       	movw	r24, r30
    16dc:	8a 1b       	sub	r24, r26
    16de:	9b 0b       	sbc	r25, r27
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <MQTTstrlen+0x38>
	else
		rc = mqttstring.lenstring.len;
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	9c 81       	ldd	r25, Y+4	; 0x04
	return rc;
}
    16e6:	26 96       	adiw	r28, 0x06	; 6
    16e8:	0f b6       	in	r0, 0x3f	; 63
    16ea:	f8 94       	cli
    16ec:	de bf       	out	0x3e, r29	; 62
    16ee:	0f be       	out	0x3f, r0	; 63
    16f0:	cd bf       	out	0x3d, r28	; 61
    16f2:	df 91       	pop	r29
    16f4:	cf 91       	pop	r28
    16f6:	08 95       	ret

000016f8 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
    16f8:	ef 92       	push	r14
    16fa:	ff 92       	push	r15
    16fc:	0f 93       	push	r16
    16fe:	1f 93       	push	r17
    1700:	cf 93       	push	r28
    1702:	df 93       	push	r29
    1704:	00 d0       	rcall	.+0      	; 0x1706 <MQTTSerialize_publishLength+0xe>
    1706:	00 d0       	rcall	.+0      	; 0x1708 <MQTTSerialize_publishLength+0x10>
    1708:	00 d0       	rcall	.+0      	; 0x170a <MQTTSerialize_publishLength+0x12>
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
    170e:	7c 01       	movw	r14, r24
    1710:	f4 2f       	mov	r31, r20
    1712:	e5 2f       	mov	r30, r21
    1714:	86 2f       	mov	r24, r22
    1716:	97 2f       	mov	r25, r23
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
    1718:	42 2f       	mov	r20, r18
    171a:	53 2f       	mov	r21, r19
    171c:	6f 2f       	mov	r22, r31
    171e:	7e 2f       	mov	r23, r30
    1720:	c6 df       	rcall	.-116    	; 0x16ae <MQTTstrlen>
    1722:	02 96       	adiw	r24, 0x02	; 2
    1724:	80 0f       	add	r24, r16
    1726:	91 1f       	adc	r25, r17
	if (qos > 0)
    1728:	1e 14       	cp	r1, r14
    172a:	1f 04       	cpc	r1, r15
    172c:	0c f4       	brge	.+2      	; 0x1730 <MQTTSerialize_publishLength+0x38>
		len += 2; /* packetid */
    172e:	02 96       	adiw	r24, 0x02	; 2
	return len;
}
    1730:	26 96       	adiw	r28, 0x06	; 6
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	de bf       	out	0x3e, r29	; 62
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	cd bf       	out	0x3d, r28	; 61
    173c:	df 91       	pop	r29
    173e:	cf 91       	pop	r28
    1740:	1f 91       	pop	r17
    1742:	0f 91       	pop	r16
    1744:	ff 90       	pop	r15
    1746:	ef 90       	pop	r14
    1748:	08 95       	ret

0000174a <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
    174a:	2f 92       	push	r2
    174c:	3f 92       	push	r3
    174e:	4f 92       	push	r4
    1750:	5f 92       	push	r5
    1752:	6f 92       	push	r6
    1754:	7f 92       	push	r7
    1756:	8f 92       	push	r8
    1758:	9f 92       	push	r9
    175a:	af 92       	push	r10
    175c:	bf 92       	push	r11
    175e:	cf 92       	push	r12
    1760:	df 92       	push	r13
    1762:	ef 92       	push	r14
    1764:	ff 92       	push	r15
    1766:	0f 93       	push	r16
    1768:	1f 93       	push	r17
    176a:	cf 93       	push	r28
    176c:	df 93       	push	r29
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	2a 97       	sbiw	r28, 0x0a	; 10
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	f8 94       	cli
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	cd bf       	out	0x3d, r28	; 61
    177e:	2c 01       	movw	r4, r24
    1780:	1b 01       	movw	r2, r22
    1782:	49 87       	std	Y+9, r20	; 0x09
    1784:	39 01       	movw	r6, r18
    1786:	0a 87       	std	Y+10, r16	; 0x0a
    1788:	28 2d       	mov	r18, r8
    178a:	8b 82       	std	Y+3, r8	; 0x03
    178c:	39 2d       	mov	r19, r9
    178e:	9c 82       	std	Y+4, r9	; 0x04
    1790:	4a 2d       	mov	r20, r10
    1792:	ad 82       	std	Y+5, r10	; 0x05
    1794:	5b 2d       	mov	r21, r11
    1796:	be 82       	std	Y+6, r11	; 0x06
    1798:	6c 2d       	mov	r22, r12
    179a:	cf 82       	std	Y+7, r12	; 0x07
    179c:	7d 2d       	mov	r23, r13
    179e:	d8 86       	std	Y+8, r13	; 0x08
    17a0:	c9 a0       	ldd	r12, Y+33	; 0x21
    17a2:	da a0       	ldd	r13, Y+34	; 0x22
	unsigned char *ptr = buf;
    17a4:	9a 83       	std	Y+2, r25	; 0x02
    17a6:	89 83       	std	Y+1, r24	; 0x01
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
    17a8:	86 01       	movw	r16, r12
    17aa:	c3 01       	movw	r24, r6
    17ac:	a5 df       	rcall	.-182    	; 0x16f8 <MQTTSerialize_publishLength>
    17ae:	8c 01       	movw	r16, r24
    17b0:	e2 de       	rcall	.-572    	; 0x1576 <MQTTPacket_len>
    17b2:	28 16       	cp	r2, r24
    17b4:	39 06       	cpc	r3, r25
    17b6:	b4 f1       	brlt	.+108    	; 0x1824 <MQTTSerialize_publish+0xda>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
    17b8:	60 e3       	ldi	r22, 0x30	; 48
	header.bits.dup = dup;
    17ba:	89 85       	ldd	r24, Y+9	; 0x09
    17bc:	80 fb       	bst	r24, 0
    17be:	63 f9       	bld	r22, 3
	header.bits.qos = qos;
    17c0:	86 2d       	mov	r24, r6
    17c2:	83 70       	andi	r24, 0x03	; 3
    17c4:	88 0f       	add	r24, r24
    17c6:	69 7f       	andi	r22, 0xF9	; 249
    17c8:	68 2b       	or	r22, r24
	header.bits.retain = retained;
    17ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    17cc:	80 fb       	bst	r24, 0
	writeChar(&ptr, header.byte); /* write header */
    17ce:	60 f9       	bld	r22, 0
    17d0:	ce 01       	movw	r24, r28

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
    17d2:	01 96       	adiw	r24, 0x01	; 1
    17d4:	df de       	rcall	.-578    	; 0x1594 <writeChar>
    17d6:	b8 01       	movw	r22, r16
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	9a 81       	ldd	r25, Y+2	; 0x02
    17dc:	a6 de       	rcall	.-692    	; 0x152a <MQTTPacket_encode>
    17de:	29 81       	ldd	r18, Y+1	; 0x01
    17e0:	3a 81       	ldd	r19, Y+2	; 0x02
    17e2:	82 0f       	add	r24, r18
    17e4:	93 1f       	adc	r25, r19

	writeMQTTString(&ptr, topicName);
    17e6:	9a 83       	std	Y+2, r25	; 0x02
    17e8:	89 83       	std	Y+1, r24	; 0x01
    17ea:	2b 81       	ldd	r18, Y+3	; 0x03
    17ec:	3c 81       	ldd	r19, Y+4	; 0x04
    17ee:	4d 81       	ldd	r20, Y+5	; 0x05
    17f0:	5e 81       	ldd	r21, Y+6	; 0x06
    17f2:	6f 81       	ldd	r22, Y+7	; 0x07
    17f4:	78 85       	ldd	r23, Y+8	; 0x08
    17f6:	ce 01       	movw	r24, r28

	if (qos > 0)
    17f8:	01 96       	adiw	r24, 0x01	; 1
    17fa:	1a df       	rcall	.-460    	; 0x1630 <writeMQTTString>
		writeInt(&ptr, packetid);
    17fc:	16 14       	cp	r1, r6
    17fe:	17 04       	cpc	r1, r7
    1800:	24 f4       	brge	.+8      	; 0x180a <MQTTSerialize_publish+0xc0>
    1802:	b7 01       	movw	r22, r14

	memcpy(ptr, payload, payloadlen);
    1804:	ce 01       	movw	r24, r28
    1806:	01 96       	adiw	r24, 0x01	; 1
    1808:	cf de       	rcall	.-610    	; 0x15a8 <writeInt>
    180a:	a6 01       	movw	r20, r12
    180c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    180e:	78 a1       	ldd	r23, Y+32	; 0x20
    1810:	89 81       	ldd	r24, Y+1	; 0x01
	ptr += payloadlen;

	rc = ptr - buf;
    1812:	9a 81       	ldd	r25, Y+2	; 0x02
    1814:	9c d2       	rcall	.+1336   	; 0x1d4e <memcpy>
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	9a 81       	ldd	r25, Y+2	; 0x02
    181a:	8c 0d       	add	r24, r12
    181c:	9d 1d       	adc	r25, r13
    181e:	84 19       	sub	r24, r4
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    1820:	95 09       	sbc	r25, r5
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <MQTTSerialize_publish+0xde>
	rc = ptr - buf;

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    1824:	8e ef       	ldi	r24, 0xFE	; 254
    1826:	9f ef       	ldi	r25, 0xFF	; 255
    1828:	2a 96       	adiw	r28, 0x0a	; 10
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	f8 94       	cli
    182e:	de bf       	out	0x3e, r29	; 62
    1830:	0f be       	out	0x3f, r0	; 63
    1832:	cd bf       	out	0x3d, r28	; 61
    1834:	df 91       	pop	r29
    1836:	cf 91       	pop	r28
    1838:	1f 91       	pop	r17
    183a:	0f 91       	pop	r16
    183c:	ff 90       	pop	r15
    183e:	ef 90       	pop	r14
    1840:	df 90       	pop	r13
    1842:	cf 90       	pop	r12
    1844:	bf 90       	pop	r11
    1846:	af 90       	pop	r10
    1848:	9f 90       	pop	r9
    184a:	8f 90       	pop	r8
    184c:	7f 90       	pop	r7
    184e:	6f 90       	pop	r6
    1850:	5f 90       	pop	r5
    1852:	4f 90       	pop	r4
    1854:	3f 90       	pop	r3
    1856:	2f 90       	pop	r2
    1858:	08 95       	ret

0000185a <mqtt_packet>:
#include "string.h"
#include "MQTT_functions.h" 

/////////////MQTT////////////////////
int mqtt_packet(char *payload, char *package, int buflen, char *sub_topic)
{
    185a:	2f 92       	push	r2
    185c:	3f 92       	push	r3
    185e:	4f 92       	push	r4
    1860:	5f 92       	push	r5
    1862:	6f 92       	push	r6
    1864:	7f 92       	push	r7
    1866:	8f 92       	push	r8
    1868:	9f 92       	push	r9
    186a:	af 92       	push	r10
    186c:	bf 92       	push	r11
    186e:	cf 92       	push	r12
    1870:	df 92       	push	r13
    1872:	ef 92       	push	r14
    1874:	ff 92       	push	r15
    1876:	0f 93       	push	r16
    1878:	1f 93       	push	r17
    187a:	cf 93       	push	r28
    187c:	df 93       	push	r29
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
    1882:	ed 97       	sbiw	r28, 0x3d	; 61
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	f8 94       	cli
    1888:	de bf       	out	0x3e, r29	; 62
    188a:	0f be       	out	0x3f, r0	; 63
    188c:	cd bf       	out	0x3d, r28	; 61
    188e:	b8 2e       	mov	r11, r24
    1890:	a9 2e       	mov	r10, r25
    1892:	1b 01       	movw	r2, r22
    1894:	2a 01       	movw	r4, r20
    1896:	79 01       	movw	r14, r18
	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
    1898:	81 e3       	ldi	r24, 0x31	; 49
    189a:	e9 e0       	ldi	r30, 0x09	; 9
    189c:	f1 e0       	ldi	r31, 0x01	; 1
    189e:	de 01       	movw	r26, r28
    18a0:	11 96       	adiw	r26, 0x01	; 1
    18a2:	01 90       	ld	r0, Z+
    18a4:	0d 92       	st	X+, r0
    18a6:	8a 95       	dec	r24
    18a8:	e1 f7       	brne	.-8      	; 0x18a2 <mqtt_packet+0x48>
	
	//volatile int buflen = sizeof(&package);
	//char buf[256];
	//buflen = sizeof(buf);
	MQTTString topicString = MQTTString_initializer;
    18aa:	1d aa       	std	Y+53, r1	; 0x35
    18ac:	1c aa       	std	Y+52, r1	; 0x34
    18ae:	1f aa       	std	Y+55, r1	; 0x37
    18b0:	1e aa       	std	Y+54, r1	; 0x36
	
	int payloadlen = strlen(payload);
    18b2:	eb 2d       	mov	r30, r11
    18b4:	f9 2f       	mov	r31, r25
    18b6:	df 01       	movw	r26, r30
    18b8:	0d 90       	ld	r0, X+
    18ba:	00 20       	and	r0, r0
    18bc:	e9 f7       	brne	.-6      	; 0x18b8 <mqtt_packet+0x5e>
    18be:	11 97       	sbiw	r26, 0x01	; 1
    18c0:	8d 01       	movw	r16, r26
    18c2:	0e 1b       	sub	r16, r30
    18c4:	1f 0b       	sbc	r17, r31
	int len = 0;
	
	data.clientID.cstring = "LE";
    18c6:	88 e5       	ldi	r24, 0x58	; 88
    18c8:	94 e0       	ldi	r25, 0x04	; 4
    18ca:	99 87       	std	Y+9, r25	; 0x09
    18cc:	88 87       	std	Y+8, r24	; 0x08
	//data.clientID.cstring = MQTT_TOPIC; //FIX SO THIS ONE WORKS, COULD BE AN ADDITIONAL INPUT.
	data.keepAliveInterval = 20;
    18ce:	84 e1       	ldi	r24, 0x14	; 20
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	9f 87       	std	Y+15, r25	; 0x0f
    18d4:	8e 87       	std	Y+14, r24	; 0x0e
	data.cleansession = 1;
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	88 8b       	std	Y+16, r24	; 0x10
	data.username.cstring = "";
    18da:	8f ec       	ldi	r24, 0xCF	; 207
    18dc:	92 e0       	ldi	r25, 0x02	; 2
    18de:	9f a3       	std	Y+39, r25	; 0x27
    18e0:	8e a3       	std	Y+38, r24	; 0x26
	data.password.cstring = "";
    18e2:	9d a7       	std	Y+45, r25	; 0x2d
    18e4:	8c a7       	std	Y+44, r24	; 0x2c
	data.MQTTVersion = 4;
    18e6:	84 e0       	ldi	r24, 0x04	; 4
    18e8:	8f 83       	std	Y+7, r24	; 0x07

	len = MQTTSerialize_connect((unsigned char *)package, buflen, &data);
    18ea:	ae 01       	movw	r20, r28
    18ec:	4f 5f       	subi	r20, 0xFF	; 255
    18ee:	5f 4f       	sbci	r21, 0xFF	; 255
    18f0:	b2 01       	movw	r22, r4
    18f2:	c1 01       	movw	r24, r2
    18f4:	27 dd       	rcall	.-1458   	; 0x1344 <MQTTSerialize_connect>
    18f6:	3c 01       	movw	r6, r24
	
	//topicString.cstring = "LE/0"; //MAKE A GENERAL CONFIGUREATION OF THIS PARAMETER
	char main_sub_topic[6] = "LE/";
    18f8:	8c e4       	ldi	r24, 0x4C	; 76
    18fa:	95 e4       	ldi	r25, 0x45	; 69
    18fc:	99 af       	std	Y+57, r25	; 0x39
    18fe:	88 af       	std	Y+56, r24	; 0x38
    1900:	8f e2       	ldi	r24, 0x2F	; 47
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	9b af       	std	Y+59, r25	; 0x3b
    1906:	8a af       	std	Y+58, r24	; 0x3a
    1908:	1d ae       	std	Y+61, r1	; 0x3d
    190a:	1c ae       	std	Y+60, r1	; 0x3c
	strcat(main_sub_topic, sub_topic);
    190c:	6e 01       	movw	r12, r28
    190e:	88 e3       	ldi	r24, 0x38	; 56
    1910:	c8 0e       	add	r12, r24
    1912:	d1 1c       	adc	r13, r1
    1914:	b7 01       	movw	r22, r14
    1916:	c6 01       	movw	r24, r12
    1918:	23 d2       	rcall	.+1094   	; 0x1d60 <strcat>
	topicString.cstring = main_sub_topic;
    191a:	db aa       	std	Y+51, r13	; 0x33
    191c:	ca aa       	std	Y+50, r12	; 0x32
	
	
	len += MQTTSerialize_publish((unsigned char *)(package + len), buflen - len, 0, 0, 0, 0, topicString, (unsigned char *)payload, payloadlen);
    191e:	b2 01       	movw	r22, r4
    1920:	66 19       	sub	r22, r6
    1922:	77 09       	sbc	r23, r7
    1924:	1f 93       	push	r17
    1926:	0f 93       	push	r16
    1928:	af 92       	push	r10
    192a:	bf 92       	push	r11
    192c:	8a a8       	ldd	r8, Y+50	; 0x32
    192e:	9b a8       	ldd	r9, Y+51	; 0x33
    1930:	ac a8       	ldd	r10, Y+52	; 0x34
    1932:	bd a8       	ldd	r11, Y+53	; 0x35
    1934:	ce a8       	ldd	r12, Y+54	; 0x36
    1936:	df a8       	ldd	r13, Y+55	; 0x37
    1938:	e1 2c       	mov	r14, r1
    193a:	f1 2c       	mov	r15, r1
    193c:	00 e0       	ldi	r16, 0x00	; 0
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e0       	ldi	r20, 0x00	; 0
    1944:	c1 01       	movw	r24, r2
    1946:	86 0d       	add	r24, r6
    1948:	97 1d       	adc	r25, r7
    194a:	ff de       	rcall	.-514    	; 0x174a <MQTTSerialize_publish>
    194c:	68 0e       	add	r6, r24
    194e:	79 1e       	adc	r7, r25
		
	len += MQTTSerialize_disconnect((unsigned char *)(package + len), buflen - len);
    1950:	b2 01       	movw	r22, r4
    1952:	66 19       	sub	r22, r6
    1954:	77 09       	sbc	r23, r7
    1956:	c1 01       	movw	r24, r2
    1958:	86 0d       	add	r24, r6
    195a:	97 1d       	adc	r25, r7
    195c:	e3 dd       	rcall	.-1082   	; 0x1524 <MQTTSerialize_disconnect>
	
	//exit:
	
	//return 0;
	return len;
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
}
    1966:	86 0d       	add	r24, r6
    1968:	97 1d       	adc	r25, r7
    196a:	ed 96       	adiw	r28, 0x3d	; 61
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	f8 94       	cli
    1970:	de bf       	out	0x3e, r29	; 62
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	cd bf       	out	0x3d, r28	; 61
    1976:	df 91       	pop	r29
    1978:	cf 91       	pop	r28
    197a:	1f 91       	pop	r17
    197c:	0f 91       	pop	r16
    197e:	ff 90       	pop	r15
    1980:	ef 90       	pop	r14
    1982:	df 90       	pop	r13
    1984:	cf 90       	pop	r12
    1986:	bf 90       	pop	r11
    1988:	af 90       	pop	r10
    198a:	9f 90       	pop	r9
    198c:	8f 90       	pop	r8
    198e:	7f 90       	pop	r7
    1990:	6f 90       	pop	r6
    1992:	5f 90       	pop	r5
    1994:	4f 90       	pop	r4
    1996:	3f 90       	pop	r3
    1998:	2f 90       	pop	r2
    199a:	08 95       	ret

0000199c <__divsf3>:
    199c:	0c d0       	rcall	.+24     	; 0x19b6 <__divsf3x>
    199e:	e6 c0       	rjmp	.+460    	; 0x1b6c <__fp_round>
    19a0:	de d0       	rcall	.+444    	; 0x1b5e <__fp_pscB>
    19a2:	40 f0       	brcs	.+16     	; 0x19b4 <__divsf3+0x18>
    19a4:	d5 d0       	rcall	.+426    	; 0x1b50 <__fp_pscA>
    19a6:	30 f0       	brcs	.+12     	; 0x19b4 <__divsf3+0x18>
    19a8:	21 f4       	brne	.+8      	; 0x19b2 <__divsf3+0x16>
    19aa:	5f 3f       	cpi	r21, 0xFF	; 255
    19ac:	19 f0       	breq	.+6      	; 0x19b4 <__divsf3+0x18>
    19ae:	c7 c0       	rjmp	.+398    	; 0x1b3e <__fp_inf>
    19b0:	51 11       	cpse	r21, r1
    19b2:	10 c1       	rjmp	.+544    	; 0x1bd4 <__fp_szero>
    19b4:	ca c0       	rjmp	.+404    	; 0x1b4a <__fp_nan>

000019b6 <__divsf3x>:
    19b6:	eb d0       	rcall	.+470    	; 0x1b8e <__fp_split3>
    19b8:	98 f3       	brcs	.-26     	; 0x19a0 <__divsf3+0x4>

000019ba <__divsf3_pse>:
    19ba:	99 23       	and	r25, r25
    19bc:	c9 f3       	breq	.-14     	; 0x19b0 <__divsf3+0x14>
    19be:	55 23       	and	r21, r21
    19c0:	b1 f3       	breq	.-20     	; 0x19ae <__divsf3+0x12>
    19c2:	95 1b       	sub	r25, r21
    19c4:	55 0b       	sbc	r21, r21
    19c6:	bb 27       	eor	r27, r27
    19c8:	aa 27       	eor	r26, r26
    19ca:	62 17       	cp	r22, r18
    19cc:	73 07       	cpc	r23, r19
    19ce:	84 07       	cpc	r24, r20
    19d0:	38 f0       	brcs	.+14     	; 0x19e0 <__divsf3_pse+0x26>
    19d2:	9f 5f       	subi	r25, 0xFF	; 255
    19d4:	5f 4f       	sbci	r21, 0xFF	; 255
    19d6:	22 0f       	add	r18, r18
    19d8:	33 1f       	adc	r19, r19
    19da:	44 1f       	adc	r20, r20
    19dc:	aa 1f       	adc	r26, r26
    19de:	a9 f3       	breq	.-22     	; 0x19ca <__divsf3_pse+0x10>
    19e0:	33 d0       	rcall	.+102    	; 0x1a48 <__divsf3_pse+0x8e>
    19e2:	0e 2e       	mov	r0, r30
    19e4:	3a f0       	brmi	.+14     	; 0x19f4 <__divsf3_pse+0x3a>
    19e6:	e0 e8       	ldi	r30, 0x80	; 128
    19e8:	30 d0       	rcall	.+96     	; 0x1a4a <__divsf3_pse+0x90>
    19ea:	91 50       	subi	r25, 0x01	; 1
    19ec:	50 40       	sbci	r21, 0x00	; 0
    19ee:	e6 95       	lsr	r30
    19f0:	00 1c       	adc	r0, r0
    19f2:	ca f7       	brpl	.-14     	; 0x19e6 <__divsf3_pse+0x2c>
    19f4:	29 d0       	rcall	.+82     	; 0x1a48 <__divsf3_pse+0x8e>
    19f6:	fe 2f       	mov	r31, r30
    19f8:	27 d0       	rcall	.+78     	; 0x1a48 <__divsf3_pse+0x8e>
    19fa:	66 0f       	add	r22, r22
    19fc:	77 1f       	adc	r23, r23
    19fe:	88 1f       	adc	r24, r24
    1a00:	bb 1f       	adc	r27, r27
    1a02:	26 17       	cp	r18, r22
    1a04:	37 07       	cpc	r19, r23
    1a06:	48 07       	cpc	r20, r24
    1a08:	ab 07       	cpc	r26, r27
    1a0a:	b0 e8       	ldi	r27, 0x80	; 128
    1a0c:	09 f0       	breq	.+2      	; 0x1a10 <__divsf3_pse+0x56>
    1a0e:	bb 0b       	sbc	r27, r27
    1a10:	80 2d       	mov	r24, r0
    1a12:	bf 01       	movw	r22, r30
    1a14:	ff 27       	eor	r31, r31
    1a16:	93 58       	subi	r25, 0x83	; 131
    1a18:	5f 4f       	sbci	r21, 0xFF	; 255
    1a1a:	2a f0       	brmi	.+10     	; 0x1a26 <__divsf3_pse+0x6c>
    1a1c:	9e 3f       	cpi	r25, 0xFE	; 254
    1a1e:	51 05       	cpc	r21, r1
    1a20:	68 f0       	brcs	.+26     	; 0x1a3c <__divsf3_pse+0x82>
    1a22:	8d c0       	rjmp	.+282    	; 0x1b3e <__fp_inf>
    1a24:	d7 c0       	rjmp	.+430    	; 0x1bd4 <__fp_szero>
    1a26:	5f 3f       	cpi	r21, 0xFF	; 255
    1a28:	ec f3       	brlt	.-6      	; 0x1a24 <__divsf3_pse+0x6a>
    1a2a:	98 3e       	cpi	r25, 0xE8	; 232
    1a2c:	dc f3       	brlt	.-10     	; 0x1a24 <__divsf3_pse+0x6a>
    1a2e:	86 95       	lsr	r24
    1a30:	77 95       	ror	r23
    1a32:	67 95       	ror	r22
    1a34:	b7 95       	ror	r27
    1a36:	f7 95       	ror	r31
    1a38:	9f 5f       	subi	r25, 0xFF	; 255
    1a3a:	c9 f7       	brne	.-14     	; 0x1a2e <__divsf3_pse+0x74>
    1a3c:	88 0f       	add	r24, r24
    1a3e:	91 1d       	adc	r25, r1
    1a40:	96 95       	lsr	r25
    1a42:	87 95       	ror	r24
    1a44:	97 f9       	bld	r25, 7
    1a46:	08 95       	ret
    1a48:	e1 e0       	ldi	r30, 0x01	; 1
    1a4a:	66 0f       	add	r22, r22
    1a4c:	77 1f       	adc	r23, r23
    1a4e:	88 1f       	adc	r24, r24
    1a50:	bb 1f       	adc	r27, r27
    1a52:	62 17       	cp	r22, r18
    1a54:	73 07       	cpc	r23, r19
    1a56:	84 07       	cpc	r24, r20
    1a58:	ba 07       	cpc	r27, r26
    1a5a:	20 f0       	brcs	.+8      	; 0x1a64 <__divsf3_pse+0xaa>
    1a5c:	62 1b       	sub	r22, r18
    1a5e:	73 0b       	sbc	r23, r19
    1a60:	84 0b       	sbc	r24, r20
    1a62:	ba 0b       	sbc	r27, r26
    1a64:	ee 1f       	adc	r30, r30
    1a66:	88 f7       	brcc	.-30     	; 0x1a4a <__divsf3_pse+0x90>
    1a68:	e0 95       	com	r30
    1a6a:	08 95       	ret

00001a6c <__fixunssfsi>:
    1a6c:	98 d0       	rcall	.+304    	; 0x1b9e <__fp_splitA>
    1a6e:	88 f0       	brcs	.+34     	; 0x1a92 <__fixunssfsi+0x26>
    1a70:	9f 57       	subi	r25, 0x7F	; 127
    1a72:	90 f0       	brcs	.+36     	; 0x1a98 <__fixunssfsi+0x2c>
    1a74:	b9 2f       	mov	r27, r25
    1a76:	99 27       	eor	r25, r25
    1a78:	b7 51       	subi	r27, 0x17	; 23
    1a7a:	a0 f0       	brcs	.+40     	; 0x1aa4 <__fixunssfsi+0x38>
    1a7c:	d1 f0       	breq	.+52     	; 0x1ab2 <__fixunssfsi+0x46>
    1a7e:	66 0f       	add	r22, r22
    1a80:	77 1f       	adc	r23, r23
    1a82:	88 1f       	adc	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	1a f0       	brmi	.+6      	; 0x1a8e <__fixunssfsi+0x22>
    1a88:	ba 95       	dec	r27
    1a8a:	c9 f7       	brne	.-14     	; 0x1a7e <__fixunssfsi+0x12>
    1a8c:	12 c0       	rjmp	.+36     	; 0x1ab2 <__fixunssfsi+0x46>
    1a8e:	b1 30       	cpi	r27, 0x01	; 1
    1a90:	81 f0       	breq	.+32     	; 0x1ab2 <__fixunssfsi+0x46>
    1a92:	9f d0       	rcall	.+318    	; 0x1bd2 <__fp_zero>
    1a94:	b1 e0       	ldi	r27, 0x01	; 1
    1a96:	08 95       	ret
    1a98:	9c c0       	rjmp	.+312    	; 0x1bd2 <__fp_zero>
    1a9a:	67 2f       	mov	r22, r23
    1a9c:	78 2f       	mov	r23, r24
    1a9e:	88 27       	eor	r24, r24
    1aa0:	b8 5f       	subi	r27, 0xF8	; 248
    1aa2:	39 f0       	breq	.+14     	; 0x1ab2 <__fixunssfsi+0x46>
    1aa4:	b9 3f       	cpi	r27, 0xF9	; 249
    1aa6:	cc f3       	brlt	.-14     	; 0x1a9a <__fixunssfsi+0x2e>
    1aa8:	86 95       	lsr	r24
    1aaa:	77 95       	ror	r23
    1aac:	67 95       	ror	r22
    1aae:	b3 95       	inc	r27
    1ab0:	d9 f7       	brne	.-10     	; 0x1aa8 <__fixunssfsi+0x3c>
    1ab2:	3e f4       	brtc	.+14     	; 0x1ac2 <__fixunssfsi+0x56>
    1ab4:	90 95       	com	r25
    1ab6:	80 95       	com	r24
    1ab8:	70 95       	com	r23
    1aba:	61 95       	neg	r22
    1abc:	7f 4f       	sbci	r23, 0xFF	; 255
    1abe:	8f 4f       	sbci	r24, 0xFF	; 255
    1ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac2:	08 95       	ret

00001ac4 <__floatunsisf>:
    1ac4:	e8 94       	clt
    1ac6:	09 c0       	rjmp	.+18     	; 0x1ada <__floatsisf+0x12>

00001ac8 <__floatsisf>:
    1ac8:	97 fb       	bst	r25, 7
    1aca:	3e f4       	brtc	.+14     	; 0x1ada <__floatsisf+0x12>
    1acc:	90 95       	com	r25
    1ace:	80 95       	com	r24
    1ad0:	70 95       	com	r23
    1ad2:	61 95       	neg	r22
    1ad4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad8:	9f 4f       	sbci	r25, 0xFF	; 255
    1ada:	99 23       	and	r25, r25
    1adc:	a9 f0       	breq	.+42     	; 0x1b08 <__floatsisf+0x40>
    1ade:	f9 2f       	mov	r31, r25
    1ae0:	96 e9       	ldi	r25, 0x96	; 150
    1ae2:	bb 27       	eor	r27, r27
    1ae4:	93 95       	inc	r25
    1ae6:	f6 95       	lsr	r31
    1ae8:	87 95       	ror	r24
    1aea:	77 95       	ror	r23
    1aec:	67 95       	ror	r22
    1aee:	b7 95       	ror	r27
    1af0:	f1 11       	cpse	r31, r1
    1af2:	f8 cf       	rjmp	.-16     	; 0x1ae4 <__floatsisf+0x1c>
    1af4:	fa f4       	brpl	.+62     	; 0x1b34 <__floatsisf+0x6c>
    1af6:	bb 0f       	add	r27, r27
    1af8:	11 f4       	brne	.+4      	; 0x1afe <__floatsisf+0x36>
    1afa:	60 ff       	sbrs	r22, 0
    1afc:	1b c0       	rjmp	.+54     	; 0x1b34 <__floatsisf+0x6c>
    1afe:	6f 5f       	subi	r22, 0xFF	; 255
    1b00:	7f 4f       	sbci	r23, 0xFF	; 255
    1b02:	8f 4f       	sbci	r24, 0xFF	; 255
    1b04:	9f 4f       	sbci	r25, 0xFF	; 255
    1b06:	16 c0       	rjmp	.+44     	; 0x1b34 <__floatsisf+0x6c>
    1b08:	88 23       	and	r24, r24
    1b0a:	11 f0       	breq	.+4      	; 0x1b10 <__floatsisf+0x48>
    1b0c:	96 e9       	ldi	r25, 0x96	; 150
    1b0e:	11 c0       	rjmp	.+34     	; 0x1b32 <__floatsisf+0x6a>
    1b10:	77 23       	and	r23, r23
    1b12:	21 f0       	breq	.+8      	; 0x1b1c <__floatsisf+0x54>
    1b14:	9e e8       	ldi	r25, 0x8E	; 142
    1b16:	87 2f       	mov	r24, r23
    1b18:	76 2f       	mov	r23, r22
    1b1a:	05 c0       	rjmp	.+10     	; 0x1b26 <__floatsisf+0x5e>
    1b1c:	66 23       	and	r22, r22
    1b1e:	71 f0       	breq	.+28     	; 0x1b3c <__floatsisf+0x74>
    1b20:	96 e8       	ldi	r25, 0x86	; 134
    1b22:	86 2f       	mov	r24, r22
    1b24:	70 e0       	ldi	r23, 0x00	; 0
    1b26:	60 e0       	ldi	r22, 0x00	; 0
    1b28:	2a f0       	brmi	.+10     	; 0x1b34 <__floatsisf+0x6c>
    1b2a:	9a 95       	dec	r25
    1b2c:	66 0f       	add	r22, r22
    1b2e:	77 1f       	adc	r23, r23
    1b30:	88 1f       	adc	r24, r24
    1b32:	da f7       	brpl	.-10     	; 0x1b2a <__floatsisf+0x62>
    1b34:	88 0f       	add	r24, r24
    1b36:	96 95       	lsr	r25
    1b38:	87 95       	ror	r24
    1b3a:	97 f9       	bld	r25, 7
    1b3c:	08 95       	ret

00001b3e <__fp_inf>:
    1b3e:	97 f9       	bld	r25, 7
    1b40:	9f 67       	ori	r25, 0x7F	; 127
    1b42:	80 e8       	ldi	r24, 0x80	; 128
    1b44:	70 e0       	ldi	r23, 0x00	; 0
    1b46:	60 e0       	ldi	r22, 0x00	; 0
    1b48:	08 95       	ret

00001b4a <__fp_nan>:
    1b4a:	9f ef       	ldi	r25, 0xFF	; 255
    1b4c:	80 ec       	ldi	r24, 0xC0	; 192
    1b4e:	08 95       	ret

00001b50 <__fp_pscA>:
    1b50:	00 24       	eor	r0, r0
    1b52:	0a 94       	dec	r0
    1b54:	16 16       	cp	r1, r22
    1b56:	17 06       	cpc	r1, r23
    1b58:	18 06       	cpc	r1, r24
    1b5a:	09 06       	cpc	r0, r25
    1b5c:	08 95       	ret

00001b5e <__fp_pscB>:
    1b5e:	00 24       	eor	r0, r0
    1b60:	0a 94       	dec	r0
    1b62:	12 16       	cp	r1, r18
    1b64:	13 06       	cpc	r1, r19
    1b66:	14 06       	cpc	r1, r20
    1b68:	05 06       	cpc	r0, r21
    1b6a:	08 95       	ret

00001b6c <__fp_round>:
    1b6c:	09 2e       	mov	r0, r25
    1b6e:	03 94       	inc	r0
    1b70:	00 0c       	add	r0, r0
    1b72:	11 f4       	brne	.+4      	; 0x1b78 <__fp_round+0xc>
    1b74:	88 23       	and	r24, r24
    1b76:	52 f0       	brmi	.+20     	; 0x1b8c <__fp_round+0x20>
    1b78:	bb 0f       	add	r27, r27
    1b7a:	40 f4       	brcc	.+16     	; 0x1b8c <__fp_round+0x20>
    1b7c:	bf 2b       	or	r27, r31
    1b7e:	11 f4       	brne	.+4      	; 0x1b84 <__fp_round+0x18>
    1b80:	60 ff       	sbrs	r22, 0
    1b82:	04 c0       	rjmp	.+8      	; 0x1b8c <__fp_round+0x20>
    1b84:	6f 5f       	subi	r22, 0xFF	; 255
    1b86:	7f 4f       	sbci	r23, 0xFF	; 255
    1b88:	8f 4f       	sbci	r24, 0xFF	; 255
    1b8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b8c:	08 95       	ret

00001b8e <__fp_split3>:
    1b8e:	57 fd       	sbrc	r21, 7
    1b90:	90 58       	subi	r25, 0x80	; 128
    1b92:	44 0f       	add	r20, r20
    1b94:	55 1f       	adc	r21, r21
    1b96:	59 f0       	breq	.+22     	; 0x1bae <__fp_splitA+0x10>
    1b98:	5f 3f       	cpi	r21, 0xFF	; 255
    1b9a:	71 f0       	breq	.+28     	; 0x1bb8 <__fp_splitA+0x1a>
    1b9c:	47 95       	ror	r20

00001b9e <__fp_splitA>:
    1b9e:	88 0f       	add	r24, r24
    1ba0:	97 fb       	bst	r25, 7
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	61 f0       	breq	.+24     	; 0x1bbe <__fp_splitA+0x20>
    1ba6:	9f 3f       	cpi	r25, 0xFF	; 255
    1ba8:	79 f0       	breq	.+30     	; 0x1bc8 <__fp_splitA+0x2a>
    1baa:	87 95       	ror	r24
    1bac:	08 95       	ret
    1bae:	12 16       	cp	r1, r18
    1bb0:	13 06       	cpc	r1, r19
    1bb2:	14 06       	cpc	r1, r20
    1bb4:	55 1f       	adc	r21, r21
    1bb6:	f2 cf       	rjmp	.-28     	; 0x1b9c <__fp_split3+0xe>
    1bb8:	46 95       	lsr	r20
    1bba:	f1 df       	rcall	.-30     	; 0x1b9e <__fp_splitA>
    1bbc:	08 c0       	rjmp	.+16     	; 0x1bce <__fp_splitA+0x30>
    1bbe:	16 16       	cp	r1, r22
    1bc0:	17 06       	cpc	r1, r23
    1bc2:	18 06       	cpc	r1, r24
    1bc4:	99 1f       	adc	r25, r25
    1bc6:	f1 cf       	rjmp	.-30     	; 0x1baa <__fp_splitA+0xc>
    1bc8:	86 95       	lsr	r24
    1bca:	71 05       	cpc	r23, r1
    1bcc:	61 05       	cpc	r22, r1
    1bce:	08 94       	sec
    1bd0:	08 95       	ret

00001bd2 <__fp_zero>:
    1bd2:	e8 94       	clt

00001bd4 <__fp_szero>:
    1bd4:	bb 27       	eor	r27, r27
    1bd6:	66 27       	eor	r22, r22
    1bd8:	77 27       	eor	r23, r23
    1bda:	cb 01       	movw	r24, r22
    1bdc:	97 f9       	bld	r25, 7
    1bde:	08 95       	ret

00001be0 <__mulsf3>:
    1be0:	0b d0       	rcall	.+22     	; 0x1bf8 <__mulsf3x>
    1be2:	c4 cf       	rjmp	.-120    	; 0x1b6c <__fp_round>
    1be4:	b5 df       	rcall	.-150    	; 0x1b50 <__fp_pscA>
    1be6:	28 f0       	brcs	.+10     	; 0x1bf2 <__mulsf3+0x12>
    1be8:	ba df       	rcall	.-140    	; 0x1b5e <__fp_pscB>
    1bea:	18 f0       	brcs	.+6      	; 0x1bf2 <__mulsf3+0x12>
    1bec:	95 23       	and	r25, r21
    1bee:	09 f0       	breq	.+2      	; 0x1bf2 <__mulsf3+0x12>
    1bf0:	a6 cf       	rjmp	.-180    	; 0x1b3e <__fp_inf>
    1bf2:	ab cf       	rjmp	.-170    	; 0x1b4a <__fp_nan>
    1bf4:	11 24       	eor	r1, r1
    1bf6:	ee cf       	rjmp	.-36     	; 0x1bd4 <__fp_szero>

00001bf8 <__mulsf3x>:
    1bf8:	ca df       	rcall	.-108    	; 0x1b8e <__fp_split3>
    1bfa:	a0 f3       	brcs	.-24     	; 0x1be4 <__mulsf3+0x4>

00001bfc <__mulsf3_pse>:
    1bfc:	95 9f       	mul	r25, r21
    1bfe:	d1 f3       	breq	.-12     	; 0x1bf4 <__mulsf3+0x14>
    1c00:	95 0f       	add	r25, r21
    1c02:	50 e0       	ldi	r21, 0x00	; 0
    1c04:	55 1f       	adc	r21, r21
    1c06:	62 9f       	mul	r22, r18
    1c08:	f0 01       	movw	r30, r0
    1c0a:	72 9f       	mul	r23, r18
    1c0c:	bb 27       	eor	r27, r27
    1c0e:	f0 0d       	add	r31, r0
    1c10:	b1 1d       	adc	r27, r1
    1c12:	63 9f       	mul	r22, r19
    1c14:	aa 27       	eor	r26, r26
    1c16:	f0 0d       	add	r31, r0
    1c18:	b1 1d       	adc	r27, r1
    1c1a:	aa 1f       	adc	r26, r26
    1c1c:	64 9f       	mul	r22, r20
    1c1e:	66 27       	eor	r22, r22
    1c20:	b0 0d       	add	r27, r0
    1c22:	a1 1d       	adc	r26, r1
    1c24:	66 1f       	adc	r22, r22
    1c26:	82 9f       	mul	r24, r18
    1c28:	22 27       	eor	r18, r18
    1c2a:	b0 0d       	add	r27, r0
    1c2c:	a1 1d       	adc	r26, r1
    1c2e:	62 1f       	adc	r22, r18
    1c30:	73 9f       	mul	r23, r19
    1c32:	b0 0d       	add	r27, r0
    1c34:	a1 1d       	adc	r26, r1
    1c36:	62 1f       	adc	r22, r18
    1c38:	83 9f       	mul	r24, r19
    1c3a:	a0 0d       	add	r26, r0
    1c3c:	61 1d       	adc	r22, r1
    1c3e:	22 1f       	adc	r18, r18
    1c40:	74 9f       	mul	r23, r20
    1c42:	33 27       	eor	r19, r19
    1c44:	a0 0d       	add	r26, r0
    1c46:	61 1d       	adc	r22, r1
    1c48:	23 1f       	adc	r18, r19
    1c4a:	84 9f       	mul	r24, r20
    1c4c:	60 0d       	add	r22, r0
    1c4e:	21 1d       	adc	r18, r1
    1c50:	82 2f       	mov	r24, r18
    1c52:	76 2f       	mov	r23, r22
    1c54:	6a 2f       	mov	r22, r26
    1c56:	11 24       	eor	r1, r1
    1c58:	9f 57       	subi	r25, 0x7F	; 127
    1c5a:	50 40       	sbci	r21, 0x00	; 0
    1c5c:	8a f0       	brmi	.+34     	; 0x1c80 <__mulsf3_pse+0x84>
    1c5e:	e1 f0       	breq	.+56     	; 0x1c98 <__mulsf3_pse+0x9c>
    1c60:	88 23       	and	r24, r24
    1c62:	4a f0       	brmi	.+18     	; 0x1c76 <__mulsf3_pse+0x7a>
    1c64:	ee 0f       	add	r30, r30
    1c66:	ff 1f       	adc	r31, r31
    1c68:	bb 1f       	adc	r27, r27
    1c6a:	66 1f       	adc	r22, r22
    1c6c:	77 1f       	adc	r23, r23
    1c6e:	88 1f       	adc	r24, r24
    1c70:	91 50       	subi	r25, 0x01	; 1
    1c72:	50 40       	sbci	r21, 0x00	; 0
    1c74:	a9 f7       	brne	.-22     	; 0x1c60 <__mulsf3_pse+0x64>
    1c76:	9e 3f       	cpi	r25, 0xFE	; 254
    1c78:	51 05       	cpc	r21, r1
    1c7a:	70 f0       	brcs	.+28     	; 0x1c98 <__mulsf3_pse+0x9c>
    1c7c:	60 cf       	rjmp	.-320    	; 0x1b3e <__fp_inf>
    1c7e:	aa cf       	rjmp	.-172    	; 0x1bd4 <__fp_szero>
    1c80:	5f 3f       	cpi	r21, 0xFF	; 255
    1c82:	ec f3       	brlt	.-6      	; 0x1c7e <__mulsf3_pse+0x82>
    1c84:	98 3e       	cpi	r25, 0xE8	; 232
    1c86:	dc f3       	brlt	.-10     	; 0x1c7e <__mulsf3_pse+0x82>
    1c88:	86 95       	lsr	r24
    1c8a:	77 95       	ror	r23
    1c8c:	67 95       	ror	r22
    1c8e:	b7 95       	ror	r27
    1c90:	f7 95       	ror	r31
    1c92:	e7 95       	ror	r30
    1c94:	9f 5f       	subi	r25, 0xFF	; 255
    1c96:	c1 f7       	brne	.-16     	; 0x1c88 <__mulsf3_pse+0x8c>
    1c98:	fe 2b       	or	r31, r30
    1c9a:	88 0f       	add	r24, r24
    1c9c:	91 1d       	adc	r25, r1
    1c9e:	96 95       	lsr	r25
    1ca0:	87 95       	ror	r24
    1ca2:	97 f9       	bld	r25, 7
    1ca4:	08 95       	ret

00001ca6 <__udivmodsi4>:
    1ca6:	a1 e2       	ldi	r26, 0x21	; 33
    1ca8:	1a 2e       	mov	r1, r26
    1caa:	aa 1b       	sub	r26, r26
    1cac:	bb 1b       	sub	r27, r27
    1cae:	fd 01       	movw	r30, r26
    1cb0:	0d c0       	rjmp	.+26     	; 0x1ccc <__udivmodsi4_ep>

00001cb2 <__udivmodsi4_loop>:
    1cb2:	aa 1f       	adc	r26, r26
    1cb4:	bb 1f       	adc	r27, r27
    1cb6:	ee 1f       	adc	r30, r30
    1cb8:	ff 1f       	adc	r31, r31
    1cba:	a2 17       	cp	r26, r18
    1cbc:	b3 07       	cpc	r27, r19
    1cbe:	e4 07       	cpc	r30, r20
    1cc0:	f5 07       	cpc	r31, r21
    1cc2:	20 f0       	brcs	.+8      	; 0x1ccc <__udivmodsi4_ep>
    1cc4:	a2 1b       	sub	r26, r18
    1cc6:	b3 0b       	sbc	r27, r19
    1cc8:	e4 0b       	sbc	r30, r20
    1cca:	f5 0b       	sbc	r31, r21

00001ccc <__udivmodsi4_ep>:
    1ccc:	66 1f       	adc	r22, r22
    1cce:	77 1f       	adc	r23, r23
    1cd0:	88 1f       	adc	r24, r24
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	1a 94       	dec	r1
    1cd6:	69 f7       	brne	.-38     	; 0x1cb2 <__udivmodsi4_loop>
    1cd8:	60 95       	com	r22
    1cda:	70 95       	com	r23
    1cdc:	80 95       	com	r24
    1cde:	90 95       	com	r25
    1ce0:	9b 01       	movw	r18, r22
    1ce2:	ac 01       	movw	r20, r24
    1ce4:	bd 01       	movw	r22, r26
    1ce6:	cf 01       	movw	r24, r30
    1ce8:	08 95       	ret

00001cea <__tablejump2__>:
    1cea:	ee 0f       	add	r30, r30
    1cec:	ff 1f       	adc	r31, r31
    1cee:	05 90       	lpm	r0, Z+
    1cf0:	f4 91       	lpm	r31, Z
    1cf2:	e0 2d       	mov	r30, r0
    1cf4:	09 94       	ijmp

00001cf6 <__umulhisi3>:
    1cf6:	a2 9f       	mul	r26, r18
    1cf8:	b0 01       	movw	r22, r0
    1cfa:	b3 9f       	mul	r27, r19
    1cfc:	c0 01       	movw	r24, r0
    1cfe:	a3 9f       	mul	r26, r19
    1d00:	70 0d       	add	r23, r0
    1d02:	81 1d       	adc	r24, r1
    1d04:	11 24       	eor	r1, r1
    1d06:	91 1d       	adc	r25, r1
    1d08:	b2 9f       	mul	r27, r18
    1d0a:	70 0d       	add	r23, r0
    1d0c:	81 1d       	adc	r24, r1
    1d0e:	11 24       	eor	r1, r1
    1d10:	91 1d       	adc	r25, r1
    1d12:	08 95       	ret

00001d14 <atoi>:
    1d14:	fc 01       	movw	r30, r24
    1d16:	88 27       	eor	r24, r24
    1d18:	99 27       	eor	r25, r25
    1d1a:	e8 94       	clt
    1d1c:	21 91       	ld	r18, Z+
    1d1e:	20 32       	cpi	r18, 0x20	; 32
    1d20:	e9 f3       	breq	.-6      	; 0x1d1c <atoi+0x8>
    1d22:	29 30       	cpi	r18, 0x09	; 9
    1d24:	10 f0       	brcs	.+4      	; 0x1d2a <atoi+0x16>
    1d26:	2e 30       	cpi	r18, 0x0E	; 14
    1d28:	c8 f3       	brcs	.-14     	; 0x1d1c <atoi+0x8>
    1d2a:	2b 32       	cpi	r18, 0x2B	; 43
    1d2c:	39 f0       	breq	.+14     	; 0x1d3c <atoi+0x28>
    1d2e:	2d 32       	cpi	r18, 0x2D	; 45
    1d30:	31 f4       	brne	.+12     	; 0x1d3e <atoi+0x2a>
    1d32:	68 94       	set
    1d34:	03 c0       	rjmp	.+6      	; 0x1d3c <atoi+0x28>
    1d36:	54 d0       	rcall	.+168    	; 0x1de0 <__mulhi_const_10>
    1d38:	82 0f       	add	r24, r18
    1d3a:	91 1d       	adc	r25, r1
    1d3c:	21 91       	ld	r18, Z+
    1d3e:	20 53       	subi	r18, 0x30	; 48
    1d40:	2a 30       	cpi	r18, 0x0A	; 10
    1d42:	c8 f3       	brcs	.-14     	; 0x1d36 <atoi+0x22>
    1d44:	1e f4       	brtc	.+6      	; 0x1d4c <atoi+0x38>
    1d46:	90 95       	com	r25
    1d48:	81 95       	neg	r24
    1d4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d4c:	08 95       	ret

00001d4e <memcpy>:
    1d4e:	fb 01       	movw	r30, r22
    1d50:	dc 01       	movw	r26, r24
    1d52:	02 c0       	rjmp	.+4      	; 0x1d58 <memcpy+0xa>
    1d54:	01 90       	ld	r0, Z+
    1d56:	0d 92       	st	X+, r0
    1d58:	41 50       	subi	r20, 0x01	; 1
    1d5a:	50 40       	sbci	r21, 0x00	; 0
    1d5c:	d8 f7       	brcc	.-10     	; 0x1d54 <memcpy+0x6>
    1d5e:	08 95       	ret

00001d60 <strcat>:
    1d60:	fb 01       	movw	r30, r22
    1d62:	dc 01       	movw	r26, r24
    1d64:	0d 90       	ld	r0, X+
    1d66:	00 20       	and	r0, r0
    1d68:	e9 f7       	brne	.-6      	; 0x1d64 <strcat+0x4>
    1d6a:	11 97       	sbiw	r26, 0x01	; 1
    1d6c:	01 90       	ld	r0, Z+
    1d6e:	0d 92       	st	X+, r0
    1d70:	00 20       	and	r0, r0
    1d72:	e1 f7       	brne	.-8      	; 0x1d6c <strcat+0xc>
    1d74:	08 95       	ret

00001d76 <strcpy>:
    1d76:	fb 01       	movw	r30, r22
    1d78:	dc 01       	movw	r26, r24
    1d7a:	01 90       	ld	r0, Z+
    1d7c:	0d 92       	st	X+, r0
    1d7e:	00 20       	and	r0, r0
    1d80:	e1 f7       	brne	.-8      	; 0x1d7a <strcpy+0x4>
    1d82:	08 95       	ret

00001d84 <strstr>:
    1d84:	fb 01       	movw	r30, r22
    1d86:	51 91       	ld	r21, Z+
    1d88:	55 23       	and	r21, r21
    1d8a:	a9 f0       	breq	.+42     	; 0x1db6 <strstr+0x32>
    1d8c:	bf 01       	movw	r22, r30
    1d8e:	dc 01       	movw	r26, r24
    1d90:	4d 91       	ld	r20, X+
    1d92:	45 17       	cp	r20, r21
    1d94:	41 11       	cpse	r20, r1
    1d96:	e1 f7       	brne	.-8      	; 0x1d90 <strstr+0xc>
    1d98:	59 f4       	brne	.+22     	; 0x1db0 <strstr+0x2c>
    1d9a:	cd 01       	movw	r24, r26
    1d9c:	01 90       	ld	r0, Z+
    1d9e:	00 20       	and	r0, r0
    1da0:	49 f0       	breq	.+18     	; 0x1db4 <strstr+0x30>
    1da2:	4d 91       	ld	r20, X+
    1da4:	40 15       	cp	r20, r0
    1da6:	41 11       	cpse	r20, r1
    1da8:	c9 f3       	breq	.-14     	; 0x1d9c <strstr+0x18>
    1daa:	fb 01       	movw	r30, r22
    1dac:	41 11       	cpse	r20, r1
    1dae:	ef cf       	rjmp	.-34     	; 0x1d8e <strstr+0xa>
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	08 95       	ret

00001db8 <itoa>:
    1db8:	45 32       	cpi	r20, 0x25	; 37
    1dba:	51 05       	cpc	r21, r1
    1dbc:	18 f4       	brcc	.+6      	; 0x1dc4 <itoa+0xc>
    1dbe:	42 30       	cpi	r20, 0x02	; 2
    1dc0:	08 f0       	brcs	.+2      	; 0x1dc4 <itoa+0xc>
    1dc2:	04 c0       	rjmp	.+8      	; 0x1dcc <__itoa_ncheck>
    1dc4:	fb 01       	movw	r30, r22
    1dc6:	10 82       	st	Z, r1
    1dc8:	cb 01       	movw	r24, r22
    1dca:	08 95       	ret

00001dcc <__itoa_ncheck>:
    1dcc:	bb 27       	eor	r27, r27
    1dce:	4a 30       	cpi	r20, 0x0A	; 10
    1dd0:	31 f4       	brne	.+12     	; 0x1dde <__itoa_ncheck+0x12>
    1dd2:	99 23       	and	r25, r25
    1dd4:	22 f4       	brpl	.+8      	; 0x1dde <__itoa_ncheck+0x12>
    1dd6:	bd e2       	ldi	r27, 0x2D	; 45
    1dd8:	90 95       	com	r25
    1dda:	81 95       	neg	r24
    1ddc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dde:	09 c0       	rjmp	.+18     	; 0x1df2 <__utoa_common>

00001de0 <__mulhi_const_10>:
    1de0:	7a e0       	ldi	r23, 0x0A	; 10
    1de2:	97 9f       	mul	r25, r23
    1de4:	90 2d       	mov	r25, r0
    1de6:	87 9f       	mul	r24, r23
    1de8:	80 2d       	mov	r24, r0
    1dea:	91 0d       	add	r25, r1
    1dec:	11 24       	eor	r1, r1
    1dee:	08 95       	ret

00001df0 <__utoa_ncheck>:
    1df0:	bb 27       	eor	r27, r27

00001df2 <__utoa_common>:
    1df2:	fb 01       	movw	r30, r22
    1df4:	55 27       	eor	r21, r21
    1df6:	aa 27       	eor	r26, r26
    1df8:	88 0f       	add	r24, r24
    1dfa:	99 1f       	adc	r25, r25
    1dfc:	aa 1f       	adc	r26, r26
    1dfe:	a4 17       	cp	r26, r20
    1e00:	10 f0       	brcs	.+4      	; 0x1e06 <__utoa_common+0x14>
    1e02:	a4 1b       	sub	r26, r20
    1e04:	83 95       	inc	r24
    1e06:	50 51       	subi	r21, 0x10	; 16
    1e08:	b9 f7       	brne	.-18     	; 0x1df8 <__utoa_common+0x6>
    1e0a:	a0 5d       	subi	r26, 0xD0	; 208
    1e0c:	aa 33       	cpi	r26, 0x3A	; 58
    1e0e:	08 f0       	brcs	.+2      	; 0x1e12 <__utoa_common+0x20>
    1e10:	a9 5d       	subi	r26, 0xD9	; 217
    1e12:	a1 93       	st	Z+, r26
    1e14:	00 97       	sbiw	r24, 0x00	; 0
    1e16:	79 f7       	brne	.-34     	; 0x1df6 <__utoa_common+0x4>
    1e18:	b1 11       	cpse	r27, r1
    1e1a:	b1 93       	st	Z+, r27
    1e1c:	11 92       	st	Z+, r1
    1e1e:	cb 01       	movw	r24, r22
    1e20:	00 c0       	rjmp	.+0      	; 0x1e22 <strrev>

00001e22 <strrev>:
    1e22:	dc 01       	movw	r26, r24
    1e24:	fc 01       	movw	r30, r24
    1e26:	67 2f       	mov	r22, r23
    1e28:	71 91       	ld	r23, Z+
    1e2a:	77 23       	and	r23, r23
    1e2c:	e1 f7       	brne	.-8      	; 0x1e26 <strrev+0x4>
    1e2e:	32 97       	sbiw	r30, 0x02	; 2
    1e30:	04 c0       	rjmp	.+8      	; 0x1e3a <strrev+0x18>
    1e32:	7c 91       	ld	r23, X
    1e34:	6d 93       	st	X+, r22
    1e36:	70 83       	st	Z, r23
    1e38:	62 91       	ld	r22, -Z
    1e3a:	ae 17       	cp	r26, r30
    1e3c:	bf 07       	cpc	r27, r31
    1e3e:	c8 f3       	brcs	.-14     	; 0x1e32 <strrev+0x10>
    1e40:	08 95       	ret

00001e42 <_exit>:
    1e42:	f8 94       	cli

00001e44 <__stop_program>:
    1e44:	ff cf       	rjmp	.-2      	; 0x1e44 <__stop_program>
