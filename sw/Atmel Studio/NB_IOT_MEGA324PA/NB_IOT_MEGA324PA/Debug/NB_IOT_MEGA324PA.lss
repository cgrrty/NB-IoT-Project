
NB_IOT_MEGA324PA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002fa  00800100  000015aa  0000163e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000124  008003fa  008003fa  00001938  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001938  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001968  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f8  00000000  00000000  000019a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004c83  00000000  00000000  00001ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001947  00000000  00000000  00006923  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003711  00000000  00000000  0000826a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ab4  00000000  00000000  0000b97c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00014f49  00000000  00000000  0000c430  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003dc9  00000000  00000000  00021379  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000298  00000000  00000000  00025142  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00005f73  00000000  00000000  000253da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
       2:	00 00       	nop
       4:	63 c0       	rjmp	.+198    	; 0xcc <__bad_interrupt>
       6:	00 00       	nop
       8:	61 c0       	rjmp	.+194    	; 0xcc <__bad_interrupt>
       a:	00 00       	nop
       c:	5f c0       	rjmp	.+190    	; 0xcc <__bad_interrupt>
       e:	00 00       	nop
      10:	5d c0       	rjmp	.+186    	; 0xcc <__bad_interrupt>
      12:	00 00       	nop
      14:	5b c0       	rjmp	.+182    	; 0xcc <__bad_interrupt>
      16:	00 00       	nop
      18:	59 c0       	rjmp	.+178    	; 0xcc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	57 c0       	rjmp	.+174    	; 0xcc <__bad_interrupt>
      1e:	00 00       	nop
      20:	9b c4       	rjmp	.+2358   	; 0x958 <__vector_8>
      22:	00 00       	nop
      24:	53 c0       	rjmp	.+166    	; 0xcc <__bad_interrupt>
      26:	00 00       	nop
      28:	51 c0       	rjmp	.+162    	; 0xcc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4f c0       	rjmp	.+158    	; 0xcc <__bad_interrupt>
      2e:	00 00       	nop
      30:	4d c0       	rjmp	.+154    	; 0xcc <__bad_interrupt>
      32:	00 00       	nop
      34:	4b c0       	rjmp	.+150    	; 0xcc <__bad_interrupt>
      36:	00 00       	nop
      38:	49 c0       	rjmp	.+146    	; 0xcc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	47 c0       	rjmp	.+142    	; 0xcc <__bad_interrupt>
      3e:	00 00       	nop
      40:	45 c0       	rjmp	.+138    	; 0xcc <__bad_interrupt>
      42:	00 00       	nop
      44:	43 c0       	rjmp	.+134    	; 0xcc <__bad_interrupt>
      46:	00 00       	nop
      48:	41 c0       	rjmp	.+130    	; 0xcc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3f c0       	rjmp	.+126    	; 0xcc <__bad_interrupt>
      4e:	00 00       	nop
      50:	47 c4       	rjmp	.+2190   	; 0x8e0 <__vector_20>
      52:	00 00       	nop
      54:	3b c0       	rjmp	.+118    	; 0xcc <__bad_interrupt>
      56:	00 00       	nop
      58:	39 c0       	rjmp	.+114    	; 0xcc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	37 c0       	rjmp	.+110    	; 0xcc <__bad_interrupt>
      5e:	00 00       	nop
      60:	35 c0       	rjmp	.+106    	; 0xcc <__bad_interrupt>
      62:	00 00       	nop
      64:	33 c0       	rjmp	.+102    	; 0xcc <__bad_interrupt>
      66:	00 00       	nop
      68:	31 c0       	rjmp	.+98     	; 0xcc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2f c0       	rjmp	.+94     	; 0xcc <__bad_interrupt>
      6e:	00 00       	nop
      70:	2d c0       	rjmp	.+90     	; 0xcc <__bad_interrupt>
      72:	00 00       	nop
      74:	2b c0       	rjmp	.+86     	; 0xcc <__bad_interrupt>
      76:	00 00       	nop
      78:	29 c0       	rjmp	.+82     	; 0xcc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	23 05       	cpc	r18, r3
      7e:	27 05       	cpc	r18, r7
      80:	71 05       	cpc	r23, r1
      82:	8d 05       	cpc	r24, r13
      84:	94 05       	cpc	r25, r4
      86:	99 05       	cpc	r25, r9
      88:	9e 05       	cpc	r25, r14
      8a:	01 06       	cpc	r0, r17
      8c:	05 06       	cpc	r0, r21
      8e:	09 06       	cpc	r0, r25
      90:	0d 06       	cpc	r0, r29
      92:	11 06       	cpc	r1, r17

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d8 e0       	ldi	r29, 0x08	; 8
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	13 e0       	ldi	r17, 0x03	; 3
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	ea ea       	ldi	r30, 0xAA	; 170
      a8:	f5 e1       	ldi	r31, 0x15	; 21
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0
      b0:	aa 3f       	cpi	r26, 0xFA	; 250
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>

000000b6 <__do_clear_bss>:
      b6:	25 e0       	ldi	r18, 0x05	; 5
      b8:	aa ef       	ldi	r26, 0xFA	; 250
      ba:	b3 e0       	ldi	r27, 0x03	; 3
      bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
      be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
      c0:	ae 31       	cpi	r26, 0x1E	; 30
      c2:	b2 07       	cpc	r27, r18
      c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
      c6:	e5 d5       	rcall	.+3018   	; 0xc92 <main>
      c8:	0c 94 d3 0a 	jmp	0x15a6	; 0x15a6 <_exit>

000000cc <__bad_interrupt>:
      cc:	99 cf       	rjmp	.-206    	; 0x0 <__vectors>

000000ce <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
      ce:	cf 93       	push	r28
      d0:	df 93       	push	r29
      d2:	1f 92       	push	r1
      d4:	cd b7       	in	r28, 0x3d	; 61
      d6:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
      d8:	9f b7       	in	r25, 0x3f	; 63
      da:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
      dc:	f8 94       	cli
	return flags;
      de:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
      e0:	82 30       	cpi	r24, 0x02	; 2
      e2:	40 f4       	brcc	.+16     	; 0xf4 <sysclk_enable_module+0x26>
		*(reg + port)  &= ~id;
      e4:	e8 2f       	mov	r30, r24
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	ec 59       	subi	r30, 0x9C	; 156
      ea:	ff 4f       	sbci	r31, 0xFF	; 255
      ec:	60 95       	com	r22
      ee:	80 81       	ld	r24, Z
      f0:	68 23       	and	r22, r24
      f2:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
      f4:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
      f6:	0f 90       	pop	r0
      f8:	df 91       	pop	r29
      fa:	cf 91       	pop	r28
      fc:	08 95       	ret

000000fe <usart_putchar>:
	}

	if (baud_offset != USART_BAUD_UNDEFINED) {
		usart->UBRR = baudctrl;
	}
}
      fe:	fc 01       	movw	r30, r24
     100:	90 81       	ld	r25, Z
     102:	95 ff       	sbrs	r25, 5
     104:	fd cf       	rjmp	.-6      	; 0x100 <usart_putchar+0x2>
     106:	66 83       	std	Z+6, r22	; 0x06
     108:	80 e0       	ldi	r24, 0x00	; 0
     10a:	08 95       	ret

0000010c <usart_getchar>:
     10c:	fc 01       	movw	r30, r24
     10e:	90 81       	ld	r25, Z
     110:	99 23       	and	r25, r25
     112:	ec f7       	brge	.-6      	; 0x10e <usart_getchar+0x2>
     114:	86 81       	ldd	r24, Z+6	; 0x06
     116:	08 95       	ret

00000118 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     118:	4f 92       	push	r4
     11a:	5f 92       	push	r5
     11c:	6f 92       	push	r6
     11e:	7f 92       	push	r7
     120:	8f 92       	push	r8
     122:	9f 92       	push	r9
     124:	af 92       	push	r10
     126:	bf 92       	push	r11
     128:	cf 92       	push	r12
     12a:	df 92       	push	r13
     12c:	ef 92       	push	r14
     12e:	ff 92       	push	r15
     130:	0f 93       	push	r16
     132:	1f 93       	push	r17
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
     138:	ec 01       	movw	r28, r24
     13a:	6a 01       	movw	r12, r20
     13c:	7b 01       	movw	r14, r22

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
     13e:	28 01       	movw	r4, r16
     140:	39 01       	movw	r6, r18
     142:	68 94       	set
     144:	12 f8       	bld	r1, 2
     146:	76 94       	lsr	r7
     148:	67 94       	ror	r6
     14a:	57 94       	ror	r5
     14c:	47 94       	ror	r4
     14e:	16 94       	lsr	r1
     150:	d1 f7       	brne	.-12     	; 0x146 <usart_set_baudrate+0x2e>
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;

	if (usart->UCSRnA & USART_U2X_bm) {
     152:	88 81       	ld	r24, Y
     154:	81 fd       	sbrc	r24, 1
     156:	0e c0       	rjmp	.+28     	; 0x174 <usart_set_baudrate+0x5c>
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;
     158:	48 01       	movw	r8, r16
     15a:	59 01       	movw	r10, r18
     15c:	07 2e       	mov	r0, r23
     15e:	73 e1       	ldi	r23, 0x13	; 19
     160:	b6 94       	lsr	r11
     162:	a7 94       	ror	r10
     164:	97 94       	ror	r9
     166:	87 94       	ror	r8
     168:	7a 95       	dec	r23
     16a:	d1 f7       	brne	.-12     	; 0x160 <usart_set_baudrate+0x48>
     16c:	70 2d       	mov	r23, r0

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
     16e:	d3 01       	movw	r26, r6
     170:	c2 01       	movw	r24, r4
     172:	15 c0       	rjmp	.+42     	; 0x19e <usart_set_baudrate+0x86>
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;

	if (usart->UCSRnA & USART_U2X_bm) {
		max_rate /= 2;
     174:	d9 01       	movw	r26, r18
     176:	c8 01       	movw	r24, r16
     178:	68 94       	set
     17a:	13 f8       	bld	r1, 3
     17c:	b6 95       	lsr	r27
     17e:	a7 95       	ror	r26
     180:	97 95       	ror	r25
     182:	87 95       	ror	r24
     184:	16 94       	lsr	r1
     186:	d1 f7       	brne	.-12     	; 0x17c <usart_set_baudrate+0x64>
		min_rate /= 2;
     188:	48 01       	movw	r8, r16
     18a:	59 01       	movw	r10, r18
     18c:	07 2e       	mov	r0, r23
     18e:	74 e1       	ldi	r23, 0x14	; 20
     190:	b6 94       	lsr	r11
     192:	a7 94       	ror	r10
     194:	97 94       	ror	r9
     196:	87 94       	ror	r8
     198:	7a 95       	dec	r23
     19a:	d1 f7       	brne	.-12     	; 0x190 <usart_set_baudrate+0x78>
     19c:	70 2d       	mov	r23, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     19e:	8c 15       	cp	r24, r12
     1a0:	9d 05       	cpc	r25, r13
     1a2:	ae 05       	cpc	r26, r14
     1a4:	bf 05       	cpc	r27, r15
     1a6:	78 f1       	brcs	.+94     	; 0x206 <usart_set_baudrate+0xee>
     1a8:	c8 14       	cp	r12, r8
     1aa:	d9 04       	cpc	r13, r9
     1ac:	ea 04       	cpc	r14, r10
     1ae:	fb 04       	cpc	r15, r11
     1b0:	60 f1       	brcs	.+88     	; 0x20a <usart_set_baudrate+0xf2>
		return false;
	}

	/* Check if double speed is enabled. */
	if (usart->UCSRnA & USART_U2X_bm) {
     1b2:	88 81       	ld	r24, Y
     1b4:	81 ff       	sbrs	r24, 1
     1b6:	10 c0       	rjmp	.+32     	; 0x1d8 <usart_set_baudrate+0xc0>
		baud *= 2;
		ubrr = (uint32_t)(cpu_hz / 8 / baud) - 1;
     1b8:	a7 01       	movw	r20, r14
     1ba:	96 01       	movw	r18, r12
     1bc:	22 0f       	add	r18, r18
     1be:	33 1f       	adc	r19, r19
     1c0:	44 1f       	adc	r20, r20
     1c2:	55 1f       	adc	r21, r21
     1c4:	c3 01       	movw	r24, r6
     1c6:	b2 01       	movw	r22, r4
     1c8:	0e 94 14 0a 	call	0x1428	; 0x1428 <__udivmodsi4>
     1cc:	da 01       	movw	r26, r20
     1ce:	c9 01       	movw	r24, r18
     1d0:	01 97       	sbiw	r24, 0x01	; 1
     1d2:	a1 09       	sbc	r26, r1
     1d4:	b1 09       	sbc	r27, r1
     1d6:	13 c0       	rjmp	.+38     	; 0x1fe <usart_set_baudrate+0xe6>
	} else {
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
     1d8:	c9 01       	movw	r24, r18
     1da:	b8 01       	movw	r22, r16
     1dc:	68 94       	set
     1de:	13 f8       	bld	r1, 3
     1e0:	96 95       	lsr	r25
     1e2:	87 95       	ror	r24
     1e4:	77 95       	ror	r23
     1e6:	67 95       	ror	r22
     1e8:	16 94       	lsr	r1
     1ea:	d1 f7       	brne	.-12     	; 0x1e0 <usart_set_baudrate+0xc8>
     1ec:	a7 01       	movw	r20, r14
     1ee:	96 01       	movw	r18, r12
     1f0:	0e 94 14 0a 	call	0x1428	; 0x1428 <__udivmodsi4>
     1f4:	da 01       	movw	r26, r20
     1f6:	c9 01       	movw	r24, r18
     1f8:	01 97       	sbiw	r24, 0x01	; 1
     1fa:	a1 09       	sbc	r26, r1
     1fc:	b1 09       	sbc	r27, r1
	}

	usart->UBRR = ubrr;
     1fe:	9d 83       	std	Y+5, r25	; 0x05
     200:	8c 83       	std	Y+4, r24	; 0x04
	return true;
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	03 c0       	rjmp	.+6      	; 0x20c <usart_set_baudrate+0xf4>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	01 c0       	rjmp	.+2      	; 0x20c <usart_set_baudrate+0xf4>
     20a:	80 e0       	ldi	r24, 0x00	; 0
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
	}

	usart->UBRR = ubrr;
	return true;
}
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	1f 91       	pop	r17
     212:	0f 91       	pop	r16
     214:	ff 90       	pop	r15
     216:	ef 90       	pop	r14
     218:	df 90       	pop	r13
     21a:	cf 90       	pop	r12
     21c:	bf 90       	pop	r11
     21e:	af 90       	pop	r10
     220:	9f 90       	pop	r9
     222:	8f 90       	pop	r8
     224:	7f 90       	pop	r7
     226:	6f 90       	pop	r6
     228:	5f 90       	pop	r5
     22a:	4f 90       	pop	r4
     22c:	08 95       	ret

0000022e <usart_init_rs232>:
 *
 * \retval true if the initialization was successful
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     22e:	0f 93       	push	r16
     230:	1f 93       	push	r17
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
     236:	ec 01       	movw	r28, r24
     238:	8b 01       	movw	r16, r22
 * \brief usart Pointer to an USART module.
 */
static inline void usart_enable_module_clock(USART_t *usart)
{
#ifdef USART0
	if ((uintptr_t)usart == (uintptr_t)&UCSR0A) {
     23a:	80 3c       	cpi	r24, 0xC0	; 192
     23c:	91 05       	cpc	r25, r1
     23e:	19 f4       	brne	.+6      	; 0x246 <usart_init_rs232+0x18>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
     240:	62 e0       	ldi	r22, 0x02	; 2
     242:	80 e0       	ldi	r24, 0x00	; 0
     244:	44 df       	rcall	.-376    	; 0xce <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_UMSEL01_gm)) | usartmode;
     246:	8a 81       	ldd	r24, Y+2	; 0x02
     248:	8f 73       	andi	r24, 0x3F	; 63
     24a:	8a 83       	std	Y+2, r24	; 0x02
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
	bool result;
	usart_enable_module_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
     24c:	f8 01       	movw	r30, r16
     24e:	26 81       	ldd	r18, Z+6	; 0x06
     250:	35 81       	ldd	r19, Z+5	; 0x05
     252:	84 81       	ldd	r24, Z+4	; 0x04
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->UCSRnC
		= ((usart)->UCSRnC &
     254:	9a 81       	ldd	r25, Y+2	; 0x02
     256:	48 2f       	mov	r20, r24
     258:	43 70       	andi	r20, 0x03	; 3
     25a:	44 0f       	add	r20, r20
     25c:	99 7f       	andi	r25, 0xF9	; 249
     25e:	94 2b       	or	r25, r20
     260:	9a 83       	std	Y+2, r25	; 0x02
			(~USART_CHSIZE01C_gm)) | ((charSize & 0x03)
			<< USART_CHSIZE01C_gp);
	(usart)->UCSRnB
		= ((usart)->UCSRnB &
     262:	99 81       	ldd	r25, Y+1	; 0x01
     264:	84 70       	andi	r24, 0x04	; 4
     266:	88 0f       	add	r24, r24
     268:	88 0f       	add	r24, r24
     26a:	9b 7f       	andi	r25, 0xFB	; 251
     26c:	89 2b       	or	r24, r25
     26e:	89 83       	std	Y+1, r24	; 0x01
			(~USART_CHSIZE2_bm)) | ((charSize & 0x04)
			<< USART_CHSIZE2_bp);

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_PMODE_gm)) | parityMode;
     270:	8a 81       	ldd	r24, Y+2	; 0x02
     272:	8f 7c       	andi	r24, 0xCF	; 207
     274:	83 2b       	or	r24, r19
     276:	8a 83       	std	Y+2, r24	; 0x02

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_STOPB_bm)) | (twoStopBits
     278:	9a 81       	ldd	r25, Y+2	; 0x02
     27a:	97 7f       	andi	r25, 0xF7	; 247
     27c:	82 2f       	mov	r24, r18
     27e:	88 0f       	add	r24, r24
     280:	88 0f       	add	r24, r24
     282:	88 0f       	add	r24, r24
     284:	89 2b       	or	r24, r25
     286:	8a 83       	std	Y+2, r24	; 0x02
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate,
     288:	40 81       	ld	r20, Z
     28a:	51 81       	ldd	r21, Z+1	; 0x01
     28c:	62 81       	ldd	r22, Z+2	; 0x02
     28e:	73 81       	ldd	r23, Z+3	; 0x03
     290:	00 e4       	ldi	r16, 0x40	; 64
     292:	12 e4       	ldi	r17, 0x42	; 66
     294:	2f e0       	ldi	r18, 0x0F	; 15
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	ce 01       	movw	r24, r28
     29a:	3e df       	rcall	.-388    	; 0x118 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_TXEN_bm;
     29c:	99 81       	ldd	r25, Y+1	; 0x01
     29e:	98 60       	ori	r25, 0x08	; 8
     2a0:	99 83       	std	Y+1, r25	; 0x01
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_RXEN_bm;
     2a2:	99 81       	ldd	r25, Y+1	; 0x01
     2a4:	90 61       	ori	r25, 0x10	; 16
     2a6:	99 83       	std	Y+1, r25	; 0x01
			sysclk_get_source_clock_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	return result;
}
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	1f 91       	pop	r17
     2ae:	0f 91       	pop	r16
     2b0:	08 95       	ret

000002b2 <loadcell_min_max_tran>:
 *  Author: jan.rune.herheim
 */ 

#include "loadcell_logger.h"

uint8_t loadcell_min_max_tran(uint16_t current_value, uint16_t *data_array) {
     2b2:	fb 01       	movw	r30, r22
	
	//find tran
	signed int tran = 0; //could go positive and negative, and could store a 15 bits number, hence enough for our 12 bits results.
	uint16_t tran_abs = 0;
	
	tran = current_value - *(data_array + POSITION_PREV); //tran = current - previous
     2b4:	22 81       	ldd	r18, Z+2	; 0x02
     2b6:	33 81       	ldd	r19, Z+3	; 0x03
     2b8:	ac 01       	movw	r20, r24
     2ba:	42 1b       	sub	r20, r18
     2bc:	53 0b       	sbc	r21, r19
     2be:	9a 01       	movw	r18, r20
	if ((abs(tran) > abs(*(data_array+POSITION_TRAN_MAX))) & (*(data_array+POSITION_ACCU_CNT) > 0)) //first step is not valid due to only one value.
     2c0:	22 f4       	brpl	.+8      	; 0x2ca <loadcell_min_max_tran+0x18>
     2c2:	44 27       	eor	r20, r20
     2c4:	55 27       	eor	r21, r21
     2c6:	42 1b       	sub	r20, r18
     2c8:	53 0b       	sbc	r21, r19
     2ca:	62 85       	ldd	r22, Z+10	; 0x0a
     2cc:	73 85       	ldd	r23, Z+11	; 0x0b
     2ce:	77 23       	and	r23, r23
     2d0:	1c f4       	brge	.+6      	; 0x2d8 <loadcell_min_max_tran+0x26>
     2d2:	71 95       	neg	r23
     2d4:	61 95       	neg	r22
     2d6:	71 09       	sbc	r23, r1
     2d8:	a1 e0       	ldi	r26, 0x01	; 1
     2da:	64 17       	cp	r22, r20
     2dc:	75 07       	cpc	r23, r21
     2de:	0c f0       	brlt	.+2      	; 0x2e2 <loadcell_min_max_tran+0x30>
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	aa 23       	and	r26, r26
     2e4:	a1 f0       	breq	.+40     	; 0x30e <loadcell_min_max_tran+0x5c>
     2e6:	61 e0       	ldi	r22, 0x01	; 1
     2e8:	a2 89       	ldd	r26, Z+18	; 0x12
     2ea:	b3 89       	ldd	r27, Z+19	; 0x13
     2ec:	ab 2b       	or	r26, r27
     2ee:	09 f4       	brne	.+2      	; 0x2f2 <loadcell_min_max_tran+0x40>
     2f0:	60 e0       	ldi	r22, 0x00	; 0
     2f2:	66 23       	and	r22, r22
     2f4:	61 f0       	breq	.+24     	; 0x30e <loadcell_min_max_tran+0x5c>
	{
		if (tran < 0)
     2f6:	33 23       	and	r19, r19
     2f8:	44 f4       	brge	.+16     	; 0x30a <loadcell_min_max_tran+0x58>
		{
			tran_abs = abs(tran); //check if >2047, if yes this is the max limit that could be transferred.
     2fa:	9a 01       	movw	r18, r20
			if (tran_abs >= 0x7ff) //if yes the set to max value
     2fc:	2f 3f       	cpi	r18, 0xFF	; 255
     2fe:	57 e0       	ldi	r21, 0x07	; 7
     300:	35 07       	cpc	r19, r21
     302:	10 f0       	brcs	.+4      	; 0x308 <loadcell_min_max_tran+0x56>
			{
				tran_abs = 0x7ff;
     304:	2f ef       	ldi	r18, 0xFF	; 255
     306:	37 e0       	ldi	r19, 0x07	; 7
			}
			tran_abs |= (1<<11); //flip the MSB of the 12 bits word to set the negative sign.
			tran = tran_abs;
     308:	38 60       	ori	r19, 0x08	; 8
		}
		
		*(data_array+POSITION_TRAN_MAX) = tran; //store new tran max.
     30a:	33 87       	std	Z+11, r19	; 0x0b
     30c:	22 87       	std	Z+10, r18	; 0x0a
	}
	
	//find min and max
	if (current_value < *(data_array+POSITION_MIN))
     30e:	26 81       	ldd	r18, Z+6	; 0x06
     310:	37 81       	ldd	r19, Z+7	; 0x07
     312:	82 17       	cp	r24, r18
     314:	93 07       	cpc	r25, r19
     316:	10 f4       	brcc	.+4      	; 0x31c <loadcell_min_max_tran+0x6a>
	{
		*(data_array+POSITION_MIN) = current_value; //store new min value.
     318:	97 83       	std	Z+7, r25	; 0x07
     31a:	86 83       	std	Z+6, r24	; 0x06
	}
	if (current_value > *(data_array+POSITION_MAX))
     31c:	20 85       	ldd	r18, Z+8	; 0x08
     31e:	31 85       	ldd	r19, Z+9	; 0x09
     320:	28 17       	cp	r18, r24
     322:	39 07       	cpc	r19, r25
     324:	10 f4       	brcc	.+4      	; 0x32a <loadcell_min_max_tran+0x78>
	{
		*(data_array+POSITION_MAX) = current_value; //Store new max.
     326:	91 87       	std	Z+9, r25	; 0x09
     328:	80 87       	std	Z+8, r24	; 0x08
	}
}
     32a:	08 95       	ret

0000032c <__portable_avr_delay_cycles>:
	wdt_reset();
	//rtc_init_period(2); //using RTC as sampler timer.
	//wdt_enable(9);
	rtc_init_period(1);
	//sleep_enable();
}
     32c:	04 c0       	rjmp	.+8      	; 0x336 <__portable_avr_delay_cycles+0xa>
     32e:	61 50       	subi	r22, 0x01	; 1
     330:	71 09       	sbc	r23, r1
     332:	81 09       	sbc	r24, r1
     334:	91 09       	sbc	r25, r1
     336:	61 15       	cp	r22, r1
     338:	71 05       	cpc	r23, r1
     33a:	81 05       	cpc	r24, r1
     33c:	91 05       	cpc	r25, r1
     33e:	b9 f7       	brne	.-18     	; 0x32e <__portable_avr_delay_cycles+0x2>
     340:	08 95       	ret

00000342 <usart_tx_at>:
     342:	0f 93       	push	r16
     344:	1f 93       	push	r17
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	eb 01       	movw	r28, r22
     34c:	68 81       	ld	r22, Y
     34e:	66 23       	and	r22, r22
     350:	39 f0       	breq	.+14     	; 0x360 <usart_tx_at+0x1e>
     352:	8c 01       	movw	r16, r24
     354:	21 96       	adiw	r28, 0x01	; 1
     356:	c8 01       	movw	r24, r16
     358:	d2 de       	rcall	.-604    	; 0xfe <usart_putchar>
     35a:	69 91       	ld	r22, Y+
     35c:	61 11       	cpse	r22, r1
     35e:	fb cf       	rjmp	.-10     	; 0x356 <usart_tx_at+0x14>
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	1f 91       	pop	r17
     366:	0f 91       	pop	r16
     368:	08 95       	ret

0000036a <reset_tx_data>:
     36a:	44 23       	and	r20, r20
     36c:	61 f0       	breq	.+24     	; 0x386 <reset_tx_data+0x1c>
     36e:	a6 2f       	mov	r26, r22
     370:	b7 2f       	mov	r27, r23
     372:	e8 2f       	mov	r30, r24
     374:	f9 2f       	mov	r31, r25
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	2d 91       	ld	r18, X+
     37a:	3d 91       	ld	r19, X+
     37c:	21 93       	st	Z+, r18
     37e:	31 93       	st	Z+, r19
     380:	8f 5f       	subi	r24, 0xFF	; 255
     382:	48 13       	cpse	r20, r24
     384:	f9 cf       	rjmp	.-14     	; 0x378 <reset_tx_data+0xe>
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	08 95       	ret

0000038a <reset_char_array>:
     38a:	66 23       	and	r22, r22
     38c:	59 f0       	breq	.+22     	; 0x3a4 <reset_char_array+0x1a>
     38e:	fc 01       	movw	r30, r24
     390:	61 50       	subi	r22, 0x01	; 1
     392:	70 e0       	ldi	r23, 0x00	; 0
     394:	6f 5f       	subi	r22, 0xFF	; 255
     396:	7f 4f       	sbci	r23, 0xFF	; 255
     398:	86 0f       	add	r24, r22
     39a:	97 1f       	adc	r25, r23
     39c:	11 92       	st	Z+, r1
     39e:	e8 17       	cp	r30, r24
     3a0:	f9 07       	cpc	r31, r25
     3a2:	e1 f7       	brne	.-8      	; 0x39c <reset_char_array+0x12>
     3a4:	08 95       	ret

000003a6 <reset_all_data>:
     3a6:	41 e1       	ldi	r20, 0x11	; 17
     3a8:	6c e0       	ldi	r22, 0x0C	; 12
     3aa:	73 e0       	ldi	r23, 0x03	; 3
     3ac:	8c ef       	ldi	r24, 0xFC	; 252
     3ae:	94 e0       	ldi	r25, 0x04	; 4
     3b0:	dc df       	rcall	.-72     	; 0x36a <reset_tx_data>
     3b2:	64 e6       	ldi	r22, 0x64	; 100
     3b4:	87 ef       	ldi	r24, 0xF7	; 247
     3b6:	94 e0       	ldi	r25, 0x04	; 4
     3b8:	e8 df       	rcall	.-48     	; 0x38a <reset_char_array>
     3ba:	64 e6       	ldi	r22, 0x64	; 100
     3bc:	8e ef       	ldi	r24, 0xFE	; 254
     3be:	93 e0       	ldi	r25, 0x03	; 3
     3c0:	e4 cf       	rjmp	.-56     	; 0x38a <reset_char_array>
     3c2:	08 95       	ret

000003c4 <rtc_init_period>:
     3c4:	14 be       	out	0x34, r1	; 52
     3c6:	e0 e6       	ldi	r30, 0x60	; 96
     3c8:	f0 e0       	ldi	r31, 0x00	; 0
     3ca:	88 e1       	ldi	r24, 0x18	; 24
     3cc:	80 83       	st	Z, r24
     3ce:	86 e4       	ldi	r24, 0x46	; 70
     3d0:	80 83       	st	Z, r24
     3d2:	08 95       	ret

000003d4 <loadcell_pins_init>:
     3d4:	56 9a       	sbi	0x0a, 6	; 10
     3d6:	5e 98       	cbi	0x0b, 6	; 11
     3d8:	08 95       	ret

000003da <radio_pins_init>:
     3da:	54 9a       	sbi	0x0a, 4	; 10
     3dc:	55 98       	cbi	0x0a, 5	; 10
     3de:	08 95       	ret

000003e0 <my_delay_10ms>:
     3e0:	cf 93       	push	r28
     3e2:	88 23       	and	r24, r24
     3e4:	41 f0       	breq	.+16     	; 0x3f6 <my_delay_10ms+0x16>
     3e6:	c8 2f       	mov	r28, r24
     3e8:	63 e8       	ldi	r22, 0x83	; 131
     3ea:	76 e0       	ldi	r23, 0x06	; 6
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	9d df       	rcall	.-198    	; 0x32c <__portable_avr_delay_cycles>
     3f2:	c1 50       	subi	r28, 0x01	; 1
     3f4:	c9 f7       	brne	.-14     	; 0x3e8 <my_delay_10ms+0x8>
     3f6:	cf 91       	pop	r28
     3f8:	08 95       	ret

000003fa <loadcell_power_on>:
     3fa:	5e 9a       	sbi	0x0b, 6	; 11
     3fc:	63 e8       	ldi	r22, 0x83	; 131
     3fe:	76 e0       	ldi	r23, 0x06	; 6
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	93 cf       	rjmp	.-218    	; 0x32c <__portable_avr_delay_cycles>
     406:	08 95       	ret

00000408 <loadcell_power_off>:
     408:	5e 98       	cbi	0x0b, 6	; 11
     40a:	08 95       	ret

0000040c <radio_power_on>:
     40c:	1f 93       	push	r17
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	5c 98       	cbi	0x0b, 4	; 11
     414:	67 ea       	ldi	r22, 0xA7	; 167
     416:	70 e0       	ldi	r23, 0x00	; 0
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	87 df       	rcall	.-242    	; 0x32c <__portable_avr_delay_cycles>
     41e:	5c 9a       	sbi	0x0b, 4	; 11
     420:	6b e1       	ldi	r22, 0x1B	; 27
     422:	71 e4       	ldi	r23, 0x41	; 65
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	81 df       	rcall	.-254    	; 0x32c <__portable_avr_delay_cycles>
     42a:	5c 98       	cbi	0x0b, 4	; 11
     42c:	6b e0       	ldi	r22, 0x0B	; 11
     42e:	7b e8       	ldi	r23, 0x8B	; 139
     430:	82 e0       	ldi	r24, 0x02	; 2
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	7b df       	rcall	.-266    	; 0x32c <__portable_avr_delay_cycles>
     436:	5c 9a       	sbi	0x0b, 4	; 11
     438:	4d 99       	sbic	0x09, 5	; 9
     43a:	16 c0       	rjmp	.+44     	; 0x468 <radio_power_on+0x5c>
     43c:	c0 e0       	ldi	r28, 0x00	; 0
     43e:	d1 e0       	ldi	r29, 0x01	; 1
     440:	10 e0       	ldi	r17, 0x00	; 0
     442:	66 e3       	ldi	r22, 0x36	; 54
     444:	72 e8       	ldi	r23, 0x82	; 130
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	70 df       	rcall	.-288    	; 0x32c <__portable_avr_delay_cycles>
     44c:	cf 5f       	subi	r28, 0xFF	; 255
     44e:	89 b1       	in	r24, 0x09	; 9
     450:	85 fb       	bst	r24, 5
     452:	88 27       	eor	r24, r24
     454:	80 f9       	bld	r24, 0
     456:	8d 17       	cp	r24, r29
     458:	41 f0       	breq	.+16     	; 0x46a <radio_power_on+0x5e>
     45a:	8d 2f       	mov	r24, r29
     45c:	cb 31       	cpi	r28, 0x1B	; 27
     45e:	08 f0       	brcs	.+2      	; 0x462 <radio_power_on+0x56>
     460:	81 2f       	mov	r24, r17
     462:	81 11       	cpse	r24, r1
     464:	ee cf       	rjmp	.-36     	; 0x442 <radio_power_on+0x36>
     466:	01 c0       	rjmp	.+2      	; 0x46a <radio_power_on+0x5e>
     468:	c0 e0       	ldi	r28, 0x00	; 0
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	cb 31       	cpi	r28, 0x1B	; 27
     46e:	09 f0       	breq	.+2      	; 0x472 <radio_power_on+0x66>
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	1f 91       	pop	r17
     478:	08 95       	ret

0000047a <radio_power_off_at>:
     47a:	1f 93       	push	r17
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	4d 9b       	sbis	0x09, 5	; 9
     482:	2f c0       	rjmp	.+94     	; 0x4e2 <radio_power_off_at+0x68>
     484:	c0 e0       	ldi	r28, 0x00	; 0
     486:	d1 e0       	ldi	r29, 0x01	; 1
     488:	10 e0       	ldi	r17, 0x00	; 0
     48a:	6a e3       	ldi	r22, 0x3A	; 58
     48c:	71 e0       	ldi	r23, 0x01	; 1
     48e:	88 ec       	ldi	r24, 0xC8	; 200
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	57 df       	rcall	.-338    	; 0x342 <usart_tx_at>
     494:	6a e3       	ldi	r22, 0x3A	; 58
     496:	71 e0       	ldi	r23, 0x01	; 1
     498:	80 ec       	ldi	r24, 0xC0	; 192
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	52 df       	rcall	.-348    	; 0x342 <usart_tx_at>
     49e:	5c 98       	cbi	0x0b, 4	; 11
     4a0:	6b e2       	ldi	r22, 0x2B	; 43
     4a2:	7c e2       	ldi	r23, 0x2C	; 44
     4a4:	8a e0       	ldi	r24, 0x0A	; 10
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	41 df       	rcall	.-382    	; 0x32c <__portable_avr_delay_cycles>
     4aa:	4d 9b       	sbis	0x09, 5	; 9
     4ac:	10 c0       	rjmp	.+32     	; 0x4ce <radio_power_off_at+0x54>
     4ae:	66 e4       	ldi	r22, 0x46	; 70
     4b0:	71 e0       	ldi	r23, 0x01	; 1
     4b2:	88 ec       	ldi	r24, 0xC8	; 200
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	45 df       	rcall	.-374    	; 0x342 <usart_tx_at>
     4b8:	66 e4       	ldi	r22, 0x46	; 70
     4ba:	71 e0       	ldi	r23, 0x01	; 1
     4bc:	80 ec       	ldi	r24, 0xC0	; 192
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	40 df       	rcall	.-384    	; 0x342 <usart_tx_at>
     4c2:	5c 98       	cbi	0x0b, 4	; 11
     4c4:	61 e4       	ldi	r22, 0x41	; 65
     4c6:	72 e4       	ldi	r23, 0x42	; 66
     4c8:	8f e0       	ldi	r24, 0x0F	; 15
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	2f df       	rcall	.-418    	; 0x32c <__portable_avr_delay_cycles>
     4ce:	cf 5f       	subi	r28, 0xFF	; 255
     4d0:	4d 9b       	sbis	0x09, 5	; 9
     4d2:	08 c0       	rjmp	.+16     	; 0x4e4 <radio_power_off_at+0x6a>
     4d4:	8d 2f       	mov	r24, r29
     4d6:	cb 31       	cpi	r28, 0x1B	; 27
     4d8:	08 f0       	brcs	.+2      	; 0x4dc <radio_power_off_at+0x62>
     4da:	81 2f       	mov	r24, r17
     4dc:	81 11       	cpse	r24, r1
     4de:	d5 cf       	rjmp	.-86     	; 0x48a <radio_power_off_at+0x10>
     4e0:	01 c0       	rjmp	.+2      	; 0x4e4 <radio_power_off_at+0x6a>
     4e2:	c0 e0       	ldi	r28, 0x00	; 0
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	cb 31       	cpi	r28, 0x1B	; 27
     4e8:	09 f0       	breq	.+2      	; 0x4ec <radio_power_off_at+0x72>
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	1f 91       	pop	r17
     4f2:	08 95       	ret

000004f4 <adc_result_average>:
     4f4:	6f 92       	push	r6
     4f6:	7f 92       	push	r7
     4f8:	8f 92       	push	r8
     4fa:	9f 92       	push	r9
     4fc:	af 92       	push	r10
     4fe:	bf 92       	push	r11
     500:	cf 92       	push	r12
     502:	df 92       	push	r13
     504:	ef 92       	push	r14
     506:	ff 92       	push	r15
     508:	0f 93       	push	r16
     50a:	1f 93       	push	r17
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	cd b7       	in	r28, 0x3d	; 61
     512:	de b7       	in	r29, 0x3e	; 62
     514:	0d b7       	in	r16, 0x3d	; 61
     516:	1e b7       	in	r17, 0x3e	; 62
     518:	46 2f       	mov	r20, r22
     51a:	50 e0       	ldi	r21, 0x00	; 0
     51c:	44 0f       	add	r20, r20
     51e:	55 1f       	adc	r21, r21
     520:	2d b7       	in	r18, 0x3d	; 61
     522:	3e b7       	in	r19, 0x3e	; 62
     524:	24 1b       	sub	r18, r20
     526:	35 0b       	sbc	r19, r21
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	f8 94       	cli
     52c:	3e bf       	out	0x3e, r19	; 62
     52e:	0f be       	out	0x3f, r0	; 63
     530:	2d bf       	out	0x3d, r18	; 61
     532:	ad b7       	in	r26, 0x3d	; 61
     534:	be b7       	in	r27, 0x3e	; 62
     536:	11 96       	adiw	r26, 0x01	; 1
     538:	e4 e6       	ldi	r30, 0x64	; 100
     53a:	f0 e0       	ldi	r31, 0x00	; 0
     53c:	90 81       	ld	r25, Z
     53e:	9e 7f       	andi	r25, 0xFE	; 254
     540:	90 83       	st	Z, r25
     542:	97 e8       	ldi	r25, 0x87	; 135
     544:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     548:	66 23       	and	r22, r22
     54a:	49 f1       	breq	.+82     	; 0x59e <adc_result_average+0xaa>
     54c:	3d 01       	movw	r6, r26
     54e:	81 2c       	mov	r8, r1
     550:	91 2c       	mov	r9, r1
     552:	54 01       	movw	r10, r8
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	0f 2e       	mov	r0, r31
     558:	fc e7       	ldi	r31, 0x7C	; 124
     55a:	cf 2e       	mov	r12, r31
     55c:	d1 2c       	mov	r13, r1
     55e:	f0 2d       	mov	r31, r0
     560:	80 64       	ori	r24, 0x40	; 64
     562:	ea e7       	ldi	r30, 0x7A	; 122
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	0f 2e       	mov	r0, r31
     568:	f8 e7       	ldi	r31, 0x78	; 120
     56a:	ef 2e       	mov	r14, r31
     56c:	f1 2c       	mov	r15, r1
     56e:	f0 2d       	mov	r31, r0
     570:	d6 01       	movw	r26, r12
     572:	8c 93       	st	X, r24
     574:	90 81       	ld	r25, Z
     576:	90 64       	ori	r25, 0x40	; 64
     578:	90 83       	st	Z, r25
     57a:	90 81       	ld	r25, Z
     57c:	96 fd       	sbrc	r25, 6
     57e:	fd cf       	rjmp	.-6      	; 0x57a <adc_result_average+0x86>
     580:	d7 01       	movw	r26, r14
     582:	4d 91       	ld	r20, X+
     584:	5c 91       	ld	r21, X
     586:	d3 01       	movw	r26, r6
     588:	4d 93       	st	X+, r20
     58a:	5d 93       	st	X+, r21
     58c:	3d 01       	movw	r6, r26
     58e:	84 0e       	add	r8, r20
     590:	95 1e       	adc	r9, r21
     592:	a1 1c       	adc	r10, r1
     594:	b1 1c       	adc	r11, r1
     596:	3f 5f       	subi	r19, 0xFF	; 255
     598:	63 13       	cpse	r22, r19
     59a:	ea cf       	rjmp	.-44     	; 0x570 <adc_result_average+0x7c>
     59c:	03 c0       	rjmp	.+6      	; 0x5a4 <adc_result_average+0xb0>
     59e:	81 2c       	mov	r8, r1
     5a0:	91 2c       	mov	r9, r1
     5a2:	54 01       	movw	r10, r8
     5a4:	26 2f       	mov	r18, r22
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	40 e0       	ldi	r20, 0x00	; 0
     5aa:	50 e0       	ldi	r21, 0x00	; 0
     5ac:	c5 01       	movw	r24, r10
     5ae:	b4 01       	movw	r22, r8
     5b0:	3b d7       	rcall	.+3702   	; 0x1428 <__udivmodsi4>
     5b2:	c9 01       	movw	r24, r18
     5b4:	0f b6       	in	r0, 0x3f	; 63
     5b6:	f8 94       	cli
     5b8:	1e bf       	out	0x3e, r17	; 62
     5ba:	0f be       	out	0x3f, r0	; 63
     5bc:	0d bf       	out	0x3d, r16	; 61
     5be:	df 91       	pop	r29
     5c0:	cf 91       	pop	r28
     5c2:	1f 91       	pop	r17
     5c4:	0f 91       	pop	r16
     5c6:	ff 90       	pop	r15
     5c8:	ef 90       	pop	r14
     5ca:	df 90       	pop	r13
     5cc:	cf 90       	pop	r12
     5ce:	bf 90       	pop	r11
     5d0:	af 90       	pop	r10
     5d2:	9f 90       	pop	r9
     5d4:	8f 90       	pop	r8
     5d6:	7f 90       	pop	r7
     5d8:	6f 90       	pop	r6
     5da:	08 95       	ret

000005dc <at_get_radio_network_time>:
     5dc:	ef 92       	push	r14
     5de:	ff 92       	push	r15
     5e0:	0f 93       	push	r16
     5e2:	1f 93       	push	r17
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
     5e8:	00 d0       	rcall	.+0      	; 0x5ea <at_get_radio_network_time+0xe>
     5ea:	1f 92       	push	r1
     5ec:	cd b7       	in	r28, 0x3d	; 61
     5ee:	de b7       	in	r29, 0x3e	; 62
     5f0:	1a 82       	std	Y+2, r1	; 0x02
     5f2:	19 82       	std	Y+1, r1	; 0x01
     5f4:	1b 82       	std	Y+3, r1	; 0x03
     5f6:	0f 2e       	mov	r0, r31
     5f8:	fa e8       	ldi	r31, 0x8A	; 138
     5fa:	ef 2e       	mov	r14, r31
     5fc:	f4 e0       	ldi	r31, 0x04	; 4
     5fe:	ff 2e       	mov	r15, r31
     600:	f0 2d       	mov	r31, r0
     602:	0a e0       	ldi	r16, 0x0A	; 10
     604:	10 e0       	ldi	r17, 0x00	; 0
     606:	f7 01       	movw	r30, r14
     608:	31 97       	sbiw	r30, 0x01	; 1
     60a:	80 81       	ld	r24, Z
     60c:	89 83       	std	Y+1, r24	; 0x01
     60e:	f7 01       	movw	r30, r14
     610:	80 81       	ld	r24, Z
     612:	8a 83       	std	Y+2, r24	; 0x02
     614:	ce 01       	movw	r24, r28
     616:	01 96       	adiw	r24, 0x01	; 1
     618:	2f d7       	rcall	.+3678   	; 0x1478 <atoi>
     61a:	f8 01       	movw	r30, r16
     61c:	ee 0f       	add	r30, r30
     61e:	ff 1f       	adc	r31, r31
     620:	e4 50       	subi	r30, 0x04	; 4
     622:	fb 4f       	sbci	r31, 0xFB	; 251
     624:	91 83       	std	Z+1, r25	; 0x01
     626:	80 83       	st	Z, r24
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	ef 0e       	add	r14, r31
     62c:	f1 1c       	adc	r15, r1
     62e:	0f 5f       	subi	r16, 0xFF	; 255
     630:	1f 4f       	sbci	r17, 0xFF	; 255
     632:	00 31       	cpi	r16, 0x10	; 16
     634:	11 05       	cpc	r17, r1
     636:	39 f7       	brne	.-50     	; 0x606 <at_get_radio_network_time+0x2a>
     638:	0f 90       	pop	r0
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	1f 91       	pop	r17
     644:	0f 91       	pop	r16
     646:	ff 90       	pop	r15
     648:	ef 90       	pop	r14
     64a:	08 95       	ret

0000064c <tx_at_response>:
     64c:	0f 93       	push	r16
     64e:	1f 93       	push	r17
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	ec 01       	movw	r28, r24
     656:	88 85       	ldd	r24, Y+8	; 0x08
     658:	88 23       	and	r24, r24
     65a:	09 f4       	brne	.+2      	; 0x65e <tx_at_response+0x12>
     65c:	62 c0       	rjmp	.+196    	; 0x722 <tx_at_response+0xd6>
     65e:	10 e0       	ldi	r17, 0x00	; 0
     660:	00 e0       	ldi	r16, 0x00	; 0
     662:	60 e8       	ldi	r22, 0x80	; 128
     664:	87 e7       	ldi	r24, 0x77	; 119
     666:	94 e0       	ldi	r25, 0x04	; 4
     668:	90 de       	rcall	.-736    	; 0x38a <reset_char_array>
     66a:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <response_counter>
     66e:	8c 81       	ldd	r24, Y+4	; 0x04
     670:	9d 81       	ldd	r25, Y+5	; 0x05
     672:	ae 81       	ldd	r26, Y+6	; 0x06
     674:	bf 81       	ldd	r27, Y+7	; 0x07
     676:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <response_timeout>
     67a:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <response_timeout+0x1>
     67e:	a0 93 6d 04 	sts	0x046D, r26	; 0x80046d <response_timeout+0x2>
     682:	b0 93 6e 04 	sts	0x046E, r27	; 0x80046e <response_timeout+0x3>
     686:	10 92 67 04 	sts	0x0467, r1	; 0x800467 <response_timeout_counter>
     68a:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <response_timeout_counter+0x1>
     68e:	10 92 69 04 	sts	0x0469, r1	; 0x800469 <response_timeout_counter+0x2>
     692:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <response_timeout_counter+0x3>
     696:	68 81       	ld	r22, Y
     698:	79 81       	ldd	r23, Y+1	; 0x01
     69a:	80 ec       	ldi	r24, 0xC0	; 192
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	51 de       	rcall	.-862    	; 0x342 <usart_tx_at>
     6a0:	78 94       	sei
     6a2:	e0 ec       	ldi	r30, 0xC0	; 192
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	81 81       	ldd	r24, Z+1	; 0x01
     6a8:	80 68       	ori	r24, 0x80	; 128
     6aa:	81 83       	std	Z+1, r24	; 0x01
     6ac:	1d c0       	rjmp	.+58     	; 0x6e8 <tx_at_response+0x9c>
     6ae:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <response_timeout_counter>
     6b2:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <response_timeout_counter+0x1>
     6b6:	a0 91 69 04 	lds	r26, 0x0469	; 0x800469 <response_timeout_counter+0x2>
     6ba:	b0 91 6a 04 	lds	r27, 0x046A	; 0x80046a <response_timeout_counter+0x3>
     6be:	01 96       	adiw	r24, 0x01	; 1
     6c0:	a1 1d       	adc	r26, r1
     6c2:	b1 1d       	adc	r27, r1
     6c4:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <response_timeout_counter>
     6c8:	90 93 68 04 	sts	0x0468, r25	; 0x800468 <response_timeout_counter+0x1>
     6cc:	a0 93 69 04 	sts	0x0469, r26	; 0x800469 <response_timeout_counter+0x2>
     6d0:	b0 93 6a 04 	sts	0x046A, r27	; 0x80046a <response_timeout_counter+0x3>
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	84 de       	rcall	.-760    	; 0x3e0 <my_delay_10ms>
     6d8:	6a 81       	ldd	r22, Y+2	; 0x02
     6da:	7b 81       	ldd	r23, Y+3	; 0x03
     6dc:	87 e7       	ldi	r24, 0x77	; 119
     6de:	94 e0       	ldi	r25, 0x04	; 4
     6e0:	03 d7       	rcall	.+3590   	; 0x14e8 <strstr>
     6e2:	01 e0       	ldi	r16, 0x01	; 1
     6e4:	89 2b       	or	r24, r25
     6e6:	f9 f4       	brne	.+62     	; 0x726 <tx_at_response+0xda>
     6e8:	40 91 67 04 	lds	r20, 0x0467	; 0x800467 <response_timeout_counter>
     6ec:	50 91 68 04 	lds	r21, 0x0468	; 0x800468 <response_timeout_counter+0x1>
     6f0:	60 91 69 04 	lds	r22, 0x0469	; 0x800469 <response_timeout_counter+0x2>
     6f4:	70 91 6a 04 	lds	r23, 0x046A	; 0x80046a <response_timeout_counter+0x3>
     6f8:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <response_timeout>
     6fc:	90 91 6c 04 	lds	r25, 0x046C	; 0x80046c <response_timeout+0x1>
     700:	a0 91 6d 04 	lds	r26, 0x046D	; 0x80046d <response_timeout+0x2>
     704:	b0 91 6e 04 	lds	r27, 0x046E	; 0x80046e <response_timeout+0x3>
     708:	48 17       	cp	r20, r24
     70a:	59 07       	cpc	r21, r25
     70c:	6a 07       	cpc	r22, r26
     70e:	7b 07       	cpc	r23, r27
     710:	70 f2       	brcs	.-100    	; 0x6ae <tx_at_response+0x62>
     712:	8e e1       	ldi	r24, 0x1E	; 30
     714:	65 de       	rcall	.-822    	; 0x3e0 <my_delay_10ms>
     716:	1f 5f       	subi	r17, 0xFF	; 255
     718:	88 85       	ldd	r24, Y+8	; 0x08
     71a:	18 17       	cp	r17, r24
     71c:	08 f4       	brcc	.+2      	; 0x720 <tx_at_response+0xd4>
     71e:	a1 cf       	rjmp	.-190    	; 0x662 <tx_at_response+0x16>
     720:	03 c0       	rjmp	.+6      	; 0x728 <tx_at_response+0xdc>
     722:	00 e0       	ldi	r16, 0x00	; 0
     724:	01 c0       	rjmp	.+2      	; 0x728 <tx_at_response+0xdc>
     726:	00 e0       	ldi	r16, 0x00	; 0
     728:	e0 ec       	ldi	r30, 0xC0	; 192
     72a:	f0 e0       	ldi	r31, 0x00	; 0
     72c:	81 81       	ldd	r24, Z+1	; 0x01
     72e:	8f 77       	andi	r24, 0x7F	; 127
     730:	81 83       	std	Z+1, r24	; 0x01
     732:	67 e7       	ldi	r22, 0x77	; 119
     734:	74 e0       	ldi	r23, 0x04	; 4
     736:	88 ec       	ldi	r24, 0xC8	; 200
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	03 de       	rcall	.-1018   	; 0x342 <usart_tx_at>
     73c:	80 2f       	mov	r24, r16
     73e:	df 91       	pop	r29
     740:	cf 91       	pop	r28
     742:	1f 91       	pop	r17
     744:	0f 91       	pop	r16
     746:	08 95       	ret

00000748 <data_to_char>:
     748:	7f 92       	push	r7
     74a:	8f 92       	push	r8
     74c:	9f 92       	push	r9
     74e:	af 92       	push	r10
     750:	bf 92       	push	r11
     752:	cf 92       	push	r12
     754:	df 92       	push	r13
     756:	ef 92       	push	r14
     758:	ff 92       	push	r15
     75a:	0f 93       	push	r16
     75c:	1f 93       	push	r17
     75e:	cf 93       	push	r28
     760:	df 93       	push	r29
     762:	00 d0       	rcall	.+0      	; 0x764 <data_to_char+0x1c>
     764:	00 d0       	rcall	.+0      	; 0x766 <data_to_char+0x1e>
     766:	1f 92       	push	r1
     768:	cd b7       	in	r28, 0x3d	; 61
     76a:	de b7       	in	r29, 0x3e	; 62
     76c:	6c 01       	movw	r12, r24
     76e:	1a 82       	std	Y+2, r1	; 0x02
     770:	19 82       	std	Y+1, r1	; 0x01
     772:	fe 01       	movw	r30, r28
     774:	33 96       	adiw	r30, 0x03	; 3
     776:	93 e0       	ldi	r25, 0x03	; 3
     778:	df 01       	movw	r26, r30
     77a:	1d 92       	st	X+, r1
     77c:	9a 95       	dec	r25
     77e:	e9 f7       	brne	.-6      	; 0x77a <data_to_char+0x32>
     780:	e6 2e       	mov	r14, r22
     782:	f1 2c       	mov	r15, r1
     784:	b1 e0       	ldi	r27, 0x01	; 1
     786:	eb 1a       	sub	r14, r27
     788:	f1 08       	sbc	r15, r1
     78a:	4a f1       	brmi	.+82     	; 0x7de <data_to_char+0x96>
     78c:	49 01       	movw	r8, r18
     78e:	5a 01       	movw	r10, r20
     790:	00 e0       	ldi	r16, 0x00	; 0
     792:	10 e0       	ldi	r17, 0x00	; 0
     794:	71 2c       	mov	r7, r1
     796:	e7 2d       	mov	r30, r7
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	ee 0f       	add	r30, r30
     79c:	ff 1f       	adc	r31, r31
     79e:	ec 0d       	add	r30, r12
     7a0:	fd 1d       	adc	r31, r13
     7a2:	a4 01       	movw	r20, r8
     7a4:	be 01       	movw	r22, r28
     7a6:	6f 5f       	subi	r22, 0xFF	; 255
     7a8:	7f 4f       	sbci	r23, 0xFF	; 255
     7aa:	80 81       	ld	r24, Z
     7ac:	91 81       	ldd	r25, Z+1	; 0x01
     7ae:	b6 d6       	rcall	.+3436   	; 0x151c <itoa>
     7b0:	c8 01       	movw	r24, r16
     7b2:	88 0f       	add	r24, r24
     7b4:	99 1f       	adc	r25, r25
     7b6:	88 0f       	add	r24, r24
     7b8:	99 1f       	adc	r25, r25
     7ba:	80 0f       	add	r24, r16
     7bc:	91 1f       	adc	r25, r17
     7be:	be 01       	movw	r22, r28
     7c0:	6f 5f       	subi	r22, 0xFF	; 255
     7c2:	7f 4f       	sbci	r23, 0xFF	; 255
     7c4:	8a 0d       	add	r24, r10
     7c6:	9b 1d       	adc	r25, r11
     7c8:	88 d6       	rcall	.+3344   	; 0x14da <strcpy>
     7ca:	65 e0       	ldi	r22, 0x05	; 5
     7cc:	ce 01       	movw	r24, r28
     7ce:	01 96       	adiw	r24, 0x01	; 1
     7d0:	dc dd       	rcall	.-1096   	; 0x38a <reset_char_array>
     7d2:	73 94       	inc	r7
     7d4:	07 2d       	mov	r16, r7
     7d6:	10 e0       	ldi	r17, 0x00	; 0
     7d8:	e0 16       	cp	r14, r16
     7da:	f1 06       	cpc	r15, r17
     7dc:	e4 f6       	brge	.-72     	; 0x796 <data_to_char+0x4e>
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	0f 90       	pop	r0
     7e2:	0f 90       	pop	r0
     7e4:	0f 90       	pop	r0
     7e6:	0f 90       	pop	r0
     7e8:	0f 90       	pop	r0
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	1f 91       	pop	r17
     7f0:	0f 91       	pop	r16
     7f2:	ff 90       	pop	r15
     7f4:	ef 90       	pop	r14
     7f6:	df 90       	pop	r13
     7f8:	cf 90       	pop	r12
     7fa:	bf 90       	pop	r11
     7fc:	af 90       	pop	r10
     7fe:	9f 90       	pop	r9
     800:	8f 90       	pop	r8
     802:	7f 90       	pop	r7
     804:	08 95       	ret

00000806 <at_rf_connect>:
     806:	1f 93       	push	r17
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	c4 e6       	ldi	r28, 0x64	; 100
     80e:	d3 e0       	ldi	r29, 0x03	; 3
     810:	10 e0       	ldi	r17, 0x00	; 0
     812:	ce 01       	movw	r24, r28
     814:	1b df       	rcall	.-458    	; 0x64c <tx_at_response>
     816:	81 11       	cpse	r24, r1
     818:	0c c0       	rjmp	.+24     	; 0x832 <at_rf_connect+0x2c>
     81a:	1f 5f       	subi	r17, 0xFF	; 255
     81c:	29 96       	adiw	r28, 0x09	; 9
     81e:	1e 30       	cpi	r17, 0x0E	; 14
     820:	c1 f7       	brne	.-16     	; 0x812 <at_rf_connect+0xc>
     822:	82 ee       	ldi	r24, 0xE2	; 226
     824:	93 e0       	ldi	r25, 0x03	; 3
     826:	12 df       	rcall	.-476    	; 0x64c <tx_at_response>
     828:	81 11       	cpse	r24, r1
     82a:	05 c0       	rjmp	.+10     	; 0x836 <at_rf_connect+0x30>
     82c:	d7 de       	rcall	.-594    	; 0x5dc <at_get_radio_network_time>
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	03 c0       	rjmp	.+6      	; 0x838 <at_rf_connect+0x32>
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	01 c0       	rjmp	.+2      	; 0x838 <at_rf_connect+0x32>
     836:	80 e2       	ldi	r24, 0x20	; 32
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	1f 91       	pop	r17
     83e:	08 95       	ret

00000840 <at_rf_disconnect>:
     840:	8e e2       	ldi	r24, 0x2E	; 46
     842:	93 e0       	ldi	r25, 0x03	; 3
     844:	03 df       	rcall	.-506    	; 0x64c <tx_at_response>
     846:	81 11       	cpse	r24, r1
     848:	03 c0       	rjmp	.+6      	; 0x850 <at_rf_disconnect+0x10>
     84a:	87 e3       	ldi	r24, 0x37	; 55
     84c:	93 e0       	ldi	r25, 0x03	; 3
     84e:	fe de       	rcall	.-516    	; 0x64c <tx_at_response>
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	08 95       	ret

00000854 <tx>:
     854:	cf 92       	push	r12
     856:	df 92       	push	r13
     858:	ef 92       	push	r14
     85a:	ff 92       	push	r15
     85c:	0f 93       	push	r16
     85e:	1f 93       	push	r17
     860:	cf 93       	push	r28
     862:	6c 01       	movw	r12, r24
     864:	7b 01       	movw	r14, r22
     866:	80 e4       	ldi	r24, 0x40	; 64
     868:	93 e0       	ldi	r25, 0x03	; 3
     86a:	f0 de       	rcall	.-544    	; 0x64c <tx_at_response>
     86c:	81 11       	cpse	r24, r1
     86e:	2b c0       	rjmp	.+86     	; 0x8c6 <tx+0x72>
     870:	89 e4       	ldi	r24, 0x49	; 73
     872:	93 e0       	ldi	r25, 0x03	; 3
     874:	eb de       	rcall	.-554    	; 0x64c <tx_at_response>
     876:	81 11       	cpse	r24, r1
     878:	28 c0       	rjmp	.+80     	; 0x8ca <tx+0x76>
     87a:	1e 14       	cp	r1, r14
     87c:	1f 04       	cpc	r1, r15
     87e:	a4 f4       	brge	.+40     	; 0x8a8 <tx+0x54>
     880:	c0 e0       	ldi	r28, 0x00	; 0
     882:	86 01       	movw	r16, r12
     884:	0c 0f       	add	r16, r28
     886:	11 1d       	adc	r17, r1
     888:	f8 01       	movw	r30, r16
     88a:	60 81       	ld	r22, Z
     88c:	80 ec       	ldi	r24, 0xC0	; 192
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	36 dc       	rcall	.-1940   	; 0xfe <usart_putchar>
     892:	f8 01       	movw	r30, r16
     894:	60 81       	ld	r22, Z
     896:	88 ec       	ldi	r24, 0xC8	; 200
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	31 dc       	rcall	.-1950   	; 0xfe <usart_putchar>
     89c:	cf 5f       	subi	r28, 0xFF	; 255
     89e:	8c 2f       	mov	r24, r28
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	8e 15       	cp	r24, r14
     8a4:	9f 05       	cpc	r25, r15
     8a6:	6c f3       	brlt	.-38     	; 0x882 <tx+0x2e>
     8a8:	68 ec       	ldi	r22, 0xC8	; 200
     8aa:	72 e0       	ldi	r23, 0x02	; 2
     8ac:	88 ec       	ldi	r24, 0xC8	; 200
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	48 dd       	rcall	.-1392   	; 0x342 <usart_tx_at>
     8b2:	82 e5       	ldi	r24, 0x52	; 82
     8b4:	93 e0       	ldi	r25, 0x03	; 3
     8b6:	ca de       	rcall	.-620    	; 0x64c <tx_at_response>
     8b8:	81 11       	cpse	r24, r1
     8ba:	09 c0       	rjmp	.+18     	; 0x8ce <tx+0x7a>
     8bc:	8b e5       	ldi	r24, 0x5B	; 91
     8be:	93 e0       	ldi	r25, 0x03	; 3
     8c0:	c5 de       	rcall	.-630    	; 0x64c <tx_at_response>
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	05 c0       	rjmp	.+10     	; 0x8d0 <tx+0x7c>
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	03 c0       	rjmp	.+6      	; 0x8d0 <tx+0x7c>
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	01 c0       	rjmp	.+2      	; 0x8d0 <tx+0x7c>
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	cf 91       	pop	r28
     8d2:	1f 91       	pop	r17
     8d4:	0f 91       	pop	r16
     8d6:	ff 90       	pop	r15
     8d8:	ef 90       	pop	r14
     8da:	df 90       	pop	r13
     8dc:	cf 90       	pop	r12
     8de:	08 95       	ret

000008e0 <__vector_20>:
     8e0:	1f 92       	push	r1
     8e2:	0f 92       	push	r0
     8e4:	0f b6       	in	r0, 0x3f	; 63
     8e6:	0f 92       	push	r0
     8e8:	11 24       	eor	r1, r1
     8ea:	2f 93       	push	r18
     8ec:	3f 93       	push	r19
     8ee:	4f 93       	push	r20
     8f0:	5f 93       	push	r21
     8f2:	6f 93       	push	r22
     8f4:	7f 93       	push	r23
     8f6:	8f 93       	push	r24
     8f8:	9f 93       	push	r25
     8fa:	af 93       	push	r26
     8fc:	bf 93       	push	r27
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
     902:	ef 93       	push	r30
     904:	ff 93       	push	r31
     906:	c0 91 6f 04 	lds	r28, 0x046F	; 0x80046f <response_counter>
     90a:	d0 e0       	ldi	r29, 0x00	; 0
     90c:	c9 58       	subi	r28, 0x89	; 137
     90e:	db 4f       	sbci	r29, 0xFB	; 251
     910:	80 ec       	ldi	r24, 0xC0	; 192
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	fb db       	rcall	.-2058   	; 0x10c <usart_getchar>
     916:	88 83       	st	Y, r24
     918:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <response_counter>
     91c:	8f 5f       	subi	r24, 0xFF	; 255
     91e:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <response_counter>
     922:	10 92 67 04 	sts	0x0467, r1	; 0x800467 <response_timeout_counter>
     926:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <response_timeout_counter+0x1>
     92a:	10 92 69 04 	sts	0x0469, r1	; 0x800469 <response_timeout_counter+0x2>
     92e:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <response_timeout_counter+0x3>
     932:	ff 91       	pop	r31
     934:	ef 91       	pop	r30
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	bf 91       	pop	r27
     93c:	af 91       	pop	r26
     93e:	9f 91       	pop	r25
     940:	8f 91       	pop	r24
     942:	7f 91       	pop	r23
     944:	6f 91       	pop	r22
     946:	5f 91       	pop	r21
     948:	4f 91       	pop	r20
     94a:	3f 91       	pop	r19
     94c:	2f 91       	pop	r18
     94e:	0f 90       	pop	r0
     950:	0f be       	out	0x3f, r0	; 63
     952:	0f 90       	pop	r0
     954:	1f 90       	pop	r1
     956:	18 95       	reti

00000958 <__vector_8>:

//main_function()
ISR(WDT_vect)
{
     958:	1f 92       	push	r1
     95a:	0f 92       	push	r0
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	0f 92       	push	r0
     960:	11 24       	eor	r1, r1
     962:	8f 92       	push	r8
     964:	9f 92       	push	r9
     966:	af 92       	push	r10
     968:	bf 92       	push	r11
     96a:	cf 92       	push	r12
     96c:	df 92       	push	r13
     96e:	ef 92       	push	r14
     970:	ff 92       	push	r15
     972:	0f 93       	push	r16
     974:	1f 93       	push	r17
     976:	2f 93       	push	r18
     978:	3f 93       	push	r19
     97a:	4f 93       	push	r20
     97c:	5f 93       	push	r21
     97e:	6f 93       	push	r22
     980:	7f 93       	push	r23
     982:	8f 93       	push	r24
     984:	9f 93       	push	r25
     986:	af 93       	push	r26
     988:	bf 93       	push	r27
     98a:	ef 93       	push	r30
     98c:	ff 93       	push	r31
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
     992:	cd b7       	in	r28, 0x3d	; 61
     994:	de b7       	in	r29, 0x3e	; 62
     996:	2a 97       	sbiw	r28, 0x0a	; 10
     998:	de bf       	out	0x3e, r29	; 62
     99a:	cd bf       	out	0x3d, r28	; 61
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     99c:	0f b6       	in	r0, 0x3f	; 63
     99e:	f8 94       	cli
     9a0:	a8 95       	wdr
     9a2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     9a6:	88 61       	ori	r24, 0x18	; 24
     9a8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     9ac:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     9b0:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
	wdt_counter++; //watchdog set at 1 second timeout
     9b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     9b6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     9c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	usart_tx_at(USART_TERMINAL, RESPONSE_FOOTER); //DEBUG
     9c4:	68 ec       	ldi	r22, 0xC8	; 200
     9c6:	72 e0       	ldi	r23, 0x02	; 2
     9c8:	88 ec       	ldi	r24, 0xC8	; 200
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	ba dc       	rcall	.-1676   	; 0x342 <usart_tx_at>
	usart_putchar(USART_TERMINAL, (0x30+wdt_counter)); //DEBUG
     9ce:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     9d2:	60 5d       	subi	r22, 0xD0	; 208
     9d4:	88 ec       	ldi	r24, 0xC8	; 200
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	92 db       	rcall	.-2268   	; 0xfe <usart_putchar>
	usart_tx_at(USART_TERMINAL, RESPONSE_FOOTER); //DEBUG
     9da:	68 ec       	ldi	r22, 0xC8	; 200
     9dc:	72 e0       	ldi	r23, 0x02	; 2
     9de:	88 ec       	ldi	r24, 0xC8	; 200
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	af dc       	rcall	.-1698   	; 0x342 <usart_tx_at>

	if (wdt_counter < WAKEUP_RATE)
     9e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     9e8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     9ec:	89 2b       	or	r24, r25
     9ee:	09 f4       	brne	.+2      	; 0x9f2 <__vector_8+0x9a>
     9f0:	29 c1       	rjmp	.+594    	; 0xc44 <__vector_8+0x2ec>
	{
		goto END;
	} else {wdt_counter = 0;} //reset counter if limit is reached.
     9f2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
     9f6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	
	RTC_ISR_ACTIVE = 1;
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <RTC_ISR_ACTIVE>
				controller_next_state = READ_EXT_DATA;
				RTC_ISR_ACTIVE = 0; //FINISHED, break LOOP!
				break;
			
			default:
				controller_next_state = RESET_REGISTERS; //TRY RESET.
     a00:	0f 2e       	mov	r0, r31
     a02:	fb e0       	ldi	r31, 0x0B	; 11
     a04:	9f 2e       	mov	r9, r31
     a06:	f0 2d       	mov	r31, r0
 				{
// 					//tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_DISNNECT); //set failure status
// 					controller_next_state = RF_POWER_OFF; // RF_DISCONNECT; //if failure go to disconnect
// 					break;
 				}
				controller_next_state = RF_POWER_OFF;
     a08:	0f 2e       	mov	r0, r31
     a0a:	fa e0       	ldi	r31, 0x0A	; 10
     a0c:	af 2e       	mov	r10, r31
     a0e:	f0 2d       	mov	r31, r0
 					transfer_data_length_package = mqtt_packet(&tx_data_bytes, &tx_data_package, TRANSFER_DATA_SIZE_PACKAGE, &mqtt_sub_topic); //convert ascii data to MQTT package.
					tx_at_response(&m95_connect[12]); //WHY NEED THIS ONE AGAIN? SEEMS TO SHUT DOWN TCP CONNECTION AFTER SENDING ONE MESSAGE.
					tx(&tx_data_package, transfer_data_length_package); //transmit package. GENERATE STATUS FROM THIS.
					
					#ifdef DEBUG //output package size
						char package_lenght[5] = "";
     a10:	0f 2e       	mov	r0, r31
     a12:	f3 e0       	ldi	r31, 0x03	; 3
     a14:	bf 2e       	mov	r11, r31
     a16:	f0 2d       	mov	r31, r0
     a18:	6e 01       	movw	r12, r28
     a1a:	88 e0       	ldi	r24, 0x08	; 8
     a1c:	c8 0e       	add	r12, r24
     a1e:	d1 1c       	adc	r13, r1
						char mystring[5] = "";
     a20:	7e 01       	movw	r14, r28
     a22:	e3 e0       	ldi	r30, 0x03	; 3
     a24:	ee 0e       	add	r14, r30
     a26:	f1 1c       	adc	r15, r1
 					transfer_data_length_package = mqtt_packet(&tx_data_bytes, &tx_data_package, TRANSFER_DATA_SIZE_PACKAGE, &mqtt_sub_topic); //convert ascii data to MQTT package.
					tx_at_response(&m95_connect[12]); //WHY NEED THIS ONE AGAIN? SEEMS TO SHUT DOWN TCP CONNECTION AFTER SENDING ONE MESSAGE.
					tx(&tx_data_package, transfer_data_length_package); //transmit package. GENERATE STATUS FROM THIS.
					
					#ifdef DEBUG //output package size
						char package_lenght[5] = "";
     a28:	8b 2c       	mov	r8, r11
				///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				controller_next_state = STORE_EXT_MEM;
				break;
			
			case STORE_EXT_MEM:
				tx_data[POSITION_TIME] = 0; //reset accumulation counter if something???????????????
     a2a:	0c ef       	ldi	r16, 0xFC	; 252
     a2c:	14 e0       	ldi	r17, 0x04	; 4
	
	RTC_ISR_ACTIVE = 1;
	while (RTC_ISR_ACTIVE == 1)
	{
		
		switch(controller_state) {
     a2e:	e0 91 73 04 	lds	r30, 0x0473	; 0x800473 <controller_state>
     a32:	8e 2f       	mov	r24, r30
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	8c 30       	cpi	r24, 0x0C	; 12
     a38:	91 05       	cpc	r25, r1
     a3a:	08 f0       	brcs	.+2      	; 0xa3e <__vector_8+0xe6>
     a3c:	f8 c0       	rjmp	.+496    	; 0xc2e <__vector_8+0x2d6>
     a3e:	fc 01       	movw	r30, r24
     a40:	e2 5c       	subi	r30, 0xC2	; 194
     a42:	ff 4f       	sbci	r31, 0xFF	; 255
			
			case READ_EXT_DATA:
				controller_next_state = MEASURE;
     a44:	13 c5       	rjmp	.+2598   	; 0x146c <__tablejump2__>
				break;
			
			case MEASURE:
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL///////////////////////////
				loadcell_power_on();
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <controller_next_state>
				//////////////////////////////////////////////////////////////////////////
				
				//GENERAL MEASUREMENTS
 				tx_data[POSITION_ANA0] = adc_result_average(ADC_MUX_ADC0, ADC_NUM_AVG); //NEED TO FIX ADC CONVERSINS!!!!!!!!
     a4c:	f2 c0       	rjmp	.+484    	; 0xc32 <__vector_8+0x2da>
     a4e:	d5 dc       	rcall	.-1622   	; 0x3fa <loadcell_power_on>
     a50:	69 e0       	ldi	r22, 0x09	; 9
     a52:	80 e0       	ldi	r24, 0x00	; 0
// 				tx_data[POSITION_ANA2] = adc_result_average(ADC_MUX_ADC2, ADC_NUM_AVG); //
// 				tx_data[POSITION_ANA3] = adc_result_average(ADC_MUX_ADC3, ADC_NUM_AVG); //
// 				tx_data[POSITION_ANA4] = adc_result_average(ADC_MUX_ADC4, ADC_NUM_AVG); //
// 				tx_data[POSITION_ANA5] = adc_result_average(ADC_MUX_ADC5, ADC_NUM_AVG); //
// 				//tx_data[POSITION_TEMP] = adc_result_average(ADC_MUX_TEMPSENSE, 1); //PIN CHANGE HAVE NO EFFECT ON ADCB
 				tx_data[POSITION_VDD] = adc_result_average(ADC_MUX_1V1, 1); //PIN CHANGE HAVE NO EFFECT ON ADCB
     a54:	4f dd       	rcall	.-1378   	; 0x4f4 <adc_result_average>
     a56:	f8 01       	movw	r30, r16
     a58:	91 83       	std	Z+1, r25	; 0x01
     a5a:	80 83       	st	Z, r24
     a5c:	61 e0       	ldi	r22, 0x01	; 1
     a5e:	8e e1       	ldi	r24, 0x1E	; 30
				 
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL///////////////////////////
				loadcell_power_off();
     a60:	49 dd       	rcall	.-1390   	; 0x4f4 <adc_result_average>
     a62:	f8 01       	movw	r30, r16
				//////////////////////////////////////////////////////////////////////////
				
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				accu_data += tx_data[POSITION_CURRENT]; //controller_measure(9, &tx_data); //measure with averaging, and accumulate.
     a64:	97 87       	std	Z+15, r25	; 0x0f
     a66:	86 87       	std	Z+14, r24	; 0x0e
     a68:	cf dc       	rcall	.-1634   	; 0x408 <loadcell_power_off>
     a6a:	f8 01       	movw	r30, r16
     a6c:	20 81       	ld	r18, Z
     a6e:	31 81       	ldd	r19, Z+1	; 0x01
     a70:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <accu_data>
     a74:	90 91 64 04 	lds	r25, 0x0464	; 0x800464 <accu_data+0x1>
     a78:	a0 91 65 04 	lds	r26, 0x0465	; 0x800465 <accu_data+0x2>
     a7c:	b0 91 66 04 	lds	r27, 0x0466	; 0x800466 <accu_data+0x3>
     a80:	82 0f       	add	r24, r18
     a82:	93 1f       	adc	r25, r19
     a84:	a1 1d       	adc	r26, r1
     a86:	b1 1d       	adc	r27, r1
     a88:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <accu_data>
     a8c:	90 93 64 04 	sts	0x0464, r25	; 0x800464 <accu_data+0x1>
				loadcell_min_max_tran(tx_data[POSITION_CURRENT], &tx_data); //check if new value should be stored in min, max and tran.
     a90:	a0 93 65 04 	sts	0x0465, r26	; 0x800465 <accu_data+0x2>
     a94:	b0 93 66 04 	sts	0x0466, r27	; 0x800466 <accu_data+0x3>
     a98:	80 81       	ld	r24, Z
				tx_data[POSITION_PREV] = tx_data[POSITION_CURRENT]; //store adc value for next measurement.
     a9a:	91 81       	ldd	r25, Z+1	; 0x01
     a9c:	b8 01       	movw	r22, r16
     a9e:	09 dc       	rcall	.-2030   	; 0x2b2 <loadcell_min_max_tran>
     aa0:	f8 01       	movw	r30, r16
     aa2:	80 81       	ld	r24, Z
				///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				
				transmit_counter++;		
     aa4:	91 81       	ldd	r25, Z+1	; 0x01
     aa6:	93 83       	std	Z+3, r25	; 0x03
     aa8:	82 83       	std	Z+2, r24	; 0x02
     aaa:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <transmit_counter>
     aae:	90 91 71 04 	lds	r25, 0x0471	; 0x800471 <transmit_counter+0x1>
     ab2:	01 96       	adiw	r24, 0x01	; 1
     ab4:	90 93 71 04 	sts	0x0471, r25	; 0x800471 <transmit_counter+0x1>
				tx_data[POSITION_TIME] = transmit_counter; //increase timestamp counter.
     ab8:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <transmit_counter>
			
				if (tx_data[POSITION_TIME] >= (TRANSMIT_RATE/WAKEUP_RATE)) //if accumulation limit is reached.
     abc:	93 8b       	std	Z+19, r25	; 0x13
     abe:	82 8b       	std	Z+18, r24	; 0x12
     ac0:	82 89       	ldd	r24, Z+18	; 0x12
				{
					transmit_counter = 0; //reset counter
     ac2:	93 89       	ldd	r25, Z+19	; 0x13
     ac4:	0a 97       	sbiw	r24, 0x0a	; 10
     ac6:	40 f0       	brcs	.+16     	; 0xad8 <__vector_8+0x180>
     ac8:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <transmit_counter+0x1>
					controller_next_state = CALC; //limit reached, go to next
     acc:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <transmit_counter>
     ad0:	82 e0       	ldi	r24, 0x02	; 2
					} else {
					controller_next_state = READ_EXT_DATA; //Start from top again
     ad2:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <controller_next_state>
					RTC_ISR_ACTIVE = 0; //Break loop and go to sleep again
     ad6:	ad c0       	rjmp	.+346    	; 0xc32 <__vector_8+0x2da>
     ad8:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <controller_next_state>
				}
				break;
			
			case CALC:
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				tx_data[POSITION_AVG] = controller_calc_avg(accu_data, tx_data[POSITION_TIME]); //calc and store average.
     adc:	10 92 62 04 	sts	0x0462, r1	; 0x800462 <RTC_ISR_ACTIVE>
     ae0:	a8 c0       	rjmp	.+336    	; 0xc32 <__vector_8+0x2da>


uint16_t controller_calc_avg(uint32_t data, uint16_t cnt) {
	uint16_t avg = 0;
	
	avg = data/cnt;
     ae2:	f8 01       	movw	r30, r16
     ae4:	22 89       	ldd	r18, Z+18	; 0x12
     ae6:	33 89       	ldd	r19, Z+19	; 0x13
     ae8:	40 e0       	ldi	r20, 0x00	; 0
     aea:	50 e0       	ldi	r21, 0x00	; 0
     aec:	60 91 63 04 	lds	r22, 0x0463	; 0x800463 <accu_data>
     af0:	70 91 64 04 	lds	r23, 0x0464	; 0x800464 <accu_data+0x1>
     af4:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <accu_data+0x2>
				}
				break;
			
			case CALC:
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				tx_data[POSITION_AVG] = controller_calc_avg(accu_data, tx_data[POSITION_TIME]); //calc and store average.
     af8:	90 91 66 04 	lds	r25, 0x0466	; 0x800466 <accu_data+0x3>
     afc:	95 d4       	rcall	.+2346   	; 0x1428 <__udivmodsi4>
				accu_data = 0; //reset parameters
     afe:	f8 01       	movw	r30, r16
     b00:	35 83       	std	Z+5, r19	; 0x05
     b02:	24 83       	std	Z+4, r18	; 0x04
     b04:	10 92 63 04 	sts	0x0463, r1	; 0x800463 <accu_data>
     b08:	10 92 64 04 	sts	0x0464, r1	; 0x800464 <accu_data+0x1>
				///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				controller_next_state = STORE_EXT_MEM;
     b0c:	10 92 65 04 	sts	0x0465, r1	; 0x800465 <accu_data+0x2>
				break;
			
			case STORE_EXT_MEM:
				tx_data[POSITION_TIME] = 0; //reset accumulation counter if something???????????????
     b10:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <accu_data+0x3>
				controller_next_state = RF_POWER_ON;
     b14:	80 92 72 04 	sts	0x0472, r8	; 0x800472 <controller_next_state>
     b18:	8c c0       	rjmp	.+280    	; 0xc32 <__vector_8+0x2da>
				break;
     b1a:	f8 01       	movw	r30, r16
			
			case RF_POWER_ON:
				if (radio_power_on() == 1) //power on and check if it fails
     b1c:	13 8a       	std	Z+19, r1	; 0x13
     b1e:	12 8a       	std	Z+18, r1	; 0x12
 				{
// 					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_POWER_ON); //set failure status
// 					controller_next_state = RF_POWER_OFF; //if failure go to power off
// 					break;
 				}
				controller_next_state = RF_CONNECT;
     b20:	84 e0       	ldi	r24, 0x04	; 4
     b22:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <controller_next_state>
				break;
     b26:	85 c0       	rjmp	.+266    	; 0xc32 <__vector_8+0x2da>
			
			case RF_CONNECT: //NEED MORE POWER!!!!!!
				if (at_rf_connect() != 0) //Connect to network. MAKE STATUS REPORT FROM THIS!!!!!!!
     b28:	71 dc       	rcall	.-1822   	; 0x40c <radio_power_on>
     b2a:	85 e0       	ldi	r24, 0x05	; 5
				{
// 					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_CONNECT); //set failure status
// 					controller_next_state = RF_POWER_OFF; // RF_DISCONNECT; //if failure go to disconnect
// 					break;
				}
				controller_next_state = GENERATE_PACKAGE;
     b2c:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <controller_next_state>
     b30:	80 c0       	rjmp	.+256    	; 0xc32 <__vector_8+0x2da>
				break;
     b32:	69 de       	rcall	.-814    	; 0x806 <at_rf_connect>
			
			case GENERATE_PACKAGE:
				transfer_data_package_counter = 0;
     b34:	86 e0       	ldi	r24, 0x06	; 6
     b36:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <controller_next_state>
     b3a:	7b c0       	rjmp	.+246    	; 0xc32 <__vector_8+0x2da>
     b3c:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <__data_end+0x1>
				while (transfer_data_package_counter < TX_DATA_SIZE)
				{
					data_to_char(&tx_data[transfer_data_package_counter], 1, &tx_data_bytes, TRANSFER_DATA_BASE); //data to ascii
     b40:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <__data_end>
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	88 0f       	add	r24, r24
     b4a:	99 1f       	adc	r25, r25
     b4c:	2a e0       	ldi	r18, 0x0A	; 10
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	47 ef       	ldi	r20, 0xF7	; 247
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     b52:	54 e0       	ldi	r21, 0x04	; 4
     b54:	61 e0       	ldi	r22, 0x01	; 1
     b56:	84 50       	subi	r24, 0x04	; 4
     b58:	9b 4f       	sbci	r25, 0xFB	; 251
     b5a:	f6 dd       	rcall	.-1044   	; 0x748 <data_to_char>
     b5c:	4a 2d       	mov	r20, r10
     b5e:	64 e7       	ldi	r22, 0x74	; 116
     b60:	74 e0       	ldi	r23, 0x04	; 4
					itoa(transfer_data_package_counter, mqtt_sub_topic, 10); //counter to text for sub-topic
 					transfer_data_length_package = mqtt_packet(&tx_data_bytes, &tx_data_package, TRANSFER_DATA_SIZE_PACKAGE, &mqtt_sub_topic); //convert ascii data to MQTT package.
     b62:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <__data_end>
     b66:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <__data_end+0x1>
     b6a:	e2 d4       	rcall	.+2500   	; 0x1530 <__itoa_ncheck>
     b6c:	24 e7       	ldi	r18, 0x74	; 116
     b6e:	34 e0       	ldi	r19, 0x04	; 4
     b70:	44 e6       	ldi	r20, 0x64	; 100
     b72:	50 e0       	ldi	r21, 0x00	; 0
     b74:	6e ef       	ldi	r22, 0xFE	; 254
     b76:	73 e0       	ldi	r23, 0x03	; 3
     b78:	87 ef       	ldi	r24, 0xF7	; 247
					tx_at_response(&m95_connect[12]); //WHY NEED THIS ONE AGAIN? SEEMS TO SHUT DOWN TCP CONNECTION AFTER SENDING ONE MESSAGE.
     b7a:	94 e0       	ldi	r25, 0x04	; 4
     b7c:	b3 d3       	rcall	.+1894   	; 0x12e4 <mqtt_packet>
     b7e:	90 93 fd 03 	sts	0x03FD, r25	; 0x8003fd <transfer_data_length_package+0x1>
					tx(&tx_data_package, transfer_data_length_package); //transmit package. GENERATE STATUS FROM THIS.
     b82:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <transfer_data_length_package>
     b86:	80 ed       	ldi	r24, 0xD0	; 208
     b88:	93 e0       	ldi	r25, 0x03	; 3
     b8a:	60 dd       	rcall	.-1344   	; 0x64c <tx_at_response>
     b8c:	60 91 fc 03 	lds	r22, 0x03FC	; 0x8003fc <transfer_data_length_package>
     b90:	70 91 fd 03 	lds	r23, 0x03FD	; 0x8003fd <transfer_data_length_package+0x1>
					
					#ifdef DEBUG //output package size
						char package_lenght[5] = "";
     b94:	8e ef       	ldi	r24, 0xFE	; 254
     b96:	93 e0       	ldi	r25, 0x03	; 3
     b98:	5d de       	rcall	.-838    	; 0x854 <tx>
     b9a:	1f 82       	std	Y+7, r1	; 0x07
     b9c:	1e 82       	std	Y+6, r1	; 0x06
						char mystring[5] = "";
     b9e:	f6 01       	movw	r30, r12
     ba0:	8b 2d       	mov	r24, r11
     ba2:	11 92       	st	Z+, r1
     ba4:	8a 95       	dec	r24
     ba6:	e9 f7       	brne	.-6      	; 0xba2 <__vector_8+0x24a>
     ba8:	1a 82       	std	Y+2, r1	; 0x02
     baa:	19 82       	std	Y+1, r1	; 0x01
     bac:	f7 01       	movw	r30, r14
     bae:	8b 2d       	mov	r24, r11
     bb0:	11 92       	st	Z+, r1
     bb2:	8a 95       	dec	r24
     bb4:	e9 f7       	brne	.-6      	; 0xbb0 <__vector_8+0x258>
     bb6:	4a 2d       	mov	r20, r10
     bb8:	be 01       	movw	r22, r28
     bba:	6a 5f       	subi	r22, 0xFA	; 250
						itoa(transfer_data_length_package, package_lenght, 10);
						strcpy(mystring, package_lenght);
     bbc:	7f 4f       	sbci	r23, 0xFF	; 255
     bbe:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <transfer_data_length_package>
     bc2:	90 91 fd 03 	lds	r25, 0x03FD	; 0x8003fd <transfer_data_length_package+0x1>
     bc6:	b4 d4       	rcall	.+2408   	; 0x1530 <__itoa_ncheck>
     bc8:	be 01       	movw	r22, r28
						usart_tx_at(USART_TERMINAL, mystring);
     bca:	6a 5f       	subi	r22, 0xFA	; 250
     bcc:	7f 4f       	sbci	r23, 0xFF	; 255
     bce:	ce 01       	movw	r24, r28
     bd0:	01 96       	adiw	r24, 0x01	; 1
     bd2:	83 d4       	rcall	.+2310   	; 0x14da <strcpy>
     bd4:	be 01       	movw	r22, r28
     bd6:	6f 5f       	subi	r22, 0xFF	; 255
					#endif // DEBUG

					transfer_data_package_counter++;
     bd8:	7f 4f       	sbci	r23, 0xFF	; 255
     bda:	88 ec       	ldi	r24, 0xC8	; 200
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	b1 db       	rcall	.-2206   	; 0x342 <usart_tx_at>
     be0:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <__data_end>
     be4:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <__data_end+0x1>
				controller_next_state = GENERATE_PACKAGE;
				break;
			
			case GENERATE_PACKAGE:
				transfer_data_package_counter = 0;
				while (transfer_data_package_counter < TX_DATA_SIZE)
     be8:	01 96       	adiw	r24, 0x01	; 1
					#endif // DEBUG

					transfer_data_package_counter++;
				}
				
				controller_next_state = TX_DATA;
     bea:	90 93 fb 03 	sts	0x03FB, r25	; 0x8003fb <__data_end+0x1>
				break;
     bee:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <__data_end>
			
			case TX_DATA:
				//GENERATE_PACKAGE AND TX_DATA IS MERGED => THIS CASE IS NOP.
				controller_next_state = RX_DATA;
     bf2:	81 31       	cpi	r24, 0x11	; 17
     bf4:	91 05       	cpc	r25, r1
				break;
     bf6:	0c f4       	brge	.+2      	; 0xbfa <__vector_8+0x2a2>
			
			case RX_DATA:
				controller_next_state = RF_DISCONNECT;
     bf8:	a7 cf       	rjmp	.-178    	; 0xb48 <__vector_8+0x1f0>
     bfa:	87 e0       	ldi	r24, 0x07	; 7
     bfc:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <controller_next_state>
				break;
			
			case RF_DISCONNECT:
 				if (at_rf_disconnect() != 0) //Status will not be transmitted, but could probably be stored for later.
     c00:	18 c0       	rjmp	.+48     	; 0xc32 <__vector_8+0x2da>
     c02:	88 e0       	ldi	r24, 0x08	; 8
 				{
// 					//tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_DISNNECT); //set failure status
// 					controller_next_state = RF_POWER_OFF; // RF_DISCONNECT; //if failure go to disconnect
// 					break;
 				}
				controller_next_state = RF_POWER_OFF;
     c04:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <controller_next_state>
				break;
     c08:	14 c0       	rjmp	.+40     	; 0xc32 <__vector_8+0x2da>
			
			case RF_POWER_OFF:
				radio_power_off_at(); //radio power down
     c0a:	89 e0       	ldi	r24, 0x09	; 9
     c0c:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <controller_next_state>
				controller_next_state = RESET_REGISTERS;
				break;
     c10:	10 c0       	rjmp	.+32     	; 0xc32 <__vector_8+0x2da>
			
			case RESET_REGISTERS:
				reset_all_data(); //reset all arrays
     c12:	16 de       	rcall	.-980    	; 0x840 <at_rf_disconnect>
     c14:	a0 92 72 04 	sts	0x0472, r10	; 0x800472 <controller_next_state>
				controller_next_state = READ_EXT_DATA;
     c18:	0c c0       	rjmp	.+24     	; 0xc32 <__vector_8+0x2da>
				RTC_ISR_ACTIVE = 0; //FINISHED, break LOOP!
     c1a:	2f dc       	rcall	.-1954   	; 0x47a <radio_power_off_at>
     c1c:	90 92 72 04 	sts	0x0472, r9	; 0x800472 <controller_next_state>
				break;
			
			default:
				controller_next_state = RESET_REGISTERS; //TRY RESET.
     c20:	08 c0       	rjmp	.+16     	; 0xc32 <__vector_8+0x2da>
     c22:	c1 db       	rcall	.-2174   	; 0x3a6 <reset_all_data>
				break;
		}
		
		controller_state = controller_next_state; //NEXT STATE => STATE
     c24:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <controller_next_state>
     c28:	10 92 62 04 	sts	0x0462, r1	; 0x800462 <RTC_ISR_ACTIVE>
	{
		goto END;
	} else {wdt_counter = 0;} //reset counter if limit is reached.
	
	RTC_ISR_ACTIVE = 1;
	while (RTC_ISR_ACTIVE == 1)
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <__vector_8+0x2da>
     c2e:	90 92 72 04 	sts	0x0472, r9	; 0x800472 <controller_next_state>
     c32:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <controller_next_state>
		
	}

	END:
	
	wdt_reset();
     c36:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <controller_state>
	//wdt_enable();
	rtc_init_period(1);
     c3a:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <RTC_ISR_ACTIVE>
     c3e:	81 30       	cpi	r24, 0x01	; 1
	return;
	
}
     c40:	09 f4       	brne	.+2      	; 0xc44 <__vector_8+0x2ec>
     c42:	f5 ce       	rjmp	.-534    	; 0xa2e <__vector_8+0xd6>
     c44:	a8 95       	wdr
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	bc db       	rcall	.-2184   	; 0x3c4 <rtc_init_period>
     c4c:	2a 96       	adiw	r28, 0x0a	; 10
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	f8 94       	cli
     c52:	de bf       	out	0x3e, r29	; 62
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	cd bf       	out	0x3d, r28	; 61
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	ff 91       	pop	r31
     c5e:	ef 91       	pop	r30
     c60:	bf 91       	pop	r27
     c62:	af 91       	pop	r26
     c64:	9f 91       	pop	r25
     c66:	8f 91       	pop	r24
     c68:	7f 91       	pop	r23
     c6a:	6f 91       	pop	r22
     c6c:	5f 91       	pop	r21
     c6e:	4f 91       	pop	r20
     c70:	3f 91       	pop	r19
     c72:	2f 91       	pop	r18
     c74:	1f 91       	pop	r17
     c76:	0f 91       	pop	r16
     c78:	ff 90       	pop	r15
     c7a:	ef 90       	pop	r14
     c7c:	df 90       	pop	r13
     c7e:	cf 90       	pop	r12
     c80:	bf 90       	pop	r11
     c82:	af 90       	pop	r10
     c84:	9f 90       	pop	r9
     c86:	8f 90       	pop	r8
     c88:	0f 90       	pop	r0
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	0f 90       	pop	r0
     c8e:	1f 90       	pop	r1
     c90:	18 95       	reti

00000c92 <main>:
		
	/* Initialize the board.
	 * The board-specific conf_board.h file contains the configuration of
	 * the board initialization.
	 */
	board_init();
     c92:	f8 94       	cli
}
#endif // DEBUG

static void adc_initialization(void)
{
	PRR0 &= ~(1<<PRADC); //enable ADC clock
     c94:	c8 d3       	rcall	.+1936   	; 0x1426 <board_init>
     c96:	e4 e6       	ldi	r30, 0x64	; 100
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	8e 7f       	andi	r24, 0xFE	; 254
 *
 * \param prescaler   ADC clock prescaler
 */
static inline void adc_init(enum adc_prescaler prescaler)
{
	ADCSRA = (uint8_t)prescaler | (1 << ADEN);
     c9e:	80 83       	st	Z, r24
     ca0:	87 e8       	ldi	r24, 0x87	; 135
     ca2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	//Enable The receiver and transmitter
	UCSR0B |= (1<<3);
	*/
	//////////////////////////////////////////////////////////////////////////
	//unsigned char data = 0x40;
	usart_init_rs232(USART_RADIO, &USART_OPTIONS); //Radio UART
     ca6:	62 e0       	ldi	r22, 0x02	; 2
     ca8:	71 e0       	ldi	r23, 0x01	; 1
     caa:	80 ec       	ldi	r24, 0xC0	; 192
	sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	bf da       	rcall	.-2690   	; 0x22e <usart_init_rs232>
     cb0:	62 e0       	ldi	r22, 0x02	; 2
	
	usart_init_rs232(USART_TERMINAL, &USART_OPTIONS); //Radio UART
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	0c da       	rcall	.-3048   	; 0xce <sysclk_enable_module>
     cb6:	62 e0       	ldi	r22, 0x02	; 2
     cb8:	71 e0       	ldi	r23, 0x01	; 1
	sysclk_enable_module(POWER_RED_REG0, PRUSART1_bm);
     cba:	88 ec       	ldi	r24, 0xC8	; 200
     cbc:	90 e0       	ldi	r25, 0x00	; 0
// 	
// 	//initialize radio pins
 	delay_s(1); //wait for voltages to settle
     cbe:	b7 da       	rcall	.-2706   	; 0x22e <usart_init_rs232>
     cc0:	60 e1       	ldi	r22, 0x10	; 16
     cc2:	80 e0       	ldi	r24, 0x00	; 0
 	radio_pins_init();
     cc4:	04 da       	rcall	.-3064   	; 0xce <sysclk_enable_module>
     cc6:	6b e0       	ldi	r22, 0x0B	; 11
     cc8:	7b e8       	ldi	r23, 0x8B	; 139
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	2e db       	rcall	.-2468   	; 0x32c <__portable_avr_delay_cycles>
     cd0:	84 db       	rcall	.-2296   	; 0x3da <radio_pins_init>
     cd2:	6b e0       	ldi	r22, 0x0B	; 11
     cd4:	7b e8       	ldi	r23, 0x8B	; 139
     cd6:	82 e0       	ldi	r24, 0x02	; 2
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	28 db       	rcall	.-2480   	; 0x32c <__portable_avr_delay_cycles>
     cdc:	7b db       	rcall	.-2314   	; 0x3d4 <loadcell_pins_init>
     cde:	cd db       	rcall	.-2150   	; 0x47a <radio_power_off_at>
     ce0:	62 db       	rcall	.-2364   	; 0x3a6 <reset_all_data>
     ce2:	82 e0       	ldi	r24, 0x02	; 2
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	6e db       	rcall	.-2340   	; 0x3c4 <rtc_init_period>
     ce8:	83 b7       	in	r24, 0x33	; 51
     cea:	81 7f       	andi	r24, 0xF1	; 241
     cec:	84 60       	ori	r24, 0x04	; 4
     cee:	83 bf       	out	0x33, r24	; 51
     cf0:	78 94       	sei
     cf2:	83 b7       	in	r24, 0x33	; 51
     cf4:	81 60       	ori	r24, 0x01	; 1
     cf6:	83 bf       	out	0x33, r24	; 51
     cf8:	85 b7       	in	r24, 0x35	; 53
     cfa:	80 66       	ori	r24, 0x60	; 96
     cfc:	85 bf       	out	0x35, r24	; 53
     cfe:	8f 7d       	andi	r24, 0xDF	; 223
     d00:	85 bf       	out	0x35, r24	; 53
     d02:	88 95       	sleep
     d04:	83 b7       	in	r24, 0x33	; 51
     d06:	8e 7f       	andi	r24, 0xFE	; 254
     d08:	83 bf       	out	0x33, r24	; 51
     d0a:	f3 cf       	rjmp	.-26     	; 0xcf2 <main+0x60>

00000d0c <MQTTSerialize_connectLength>:

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
     d0c:	ef 92       	push	r14
     d0e:	ff 92       	push	r15
     d10:	0f 93       	push	r16
     d12:	1f 93       	push	r17
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
     d18:	ec 01       	movw	r28, r24
     d1a:	8e 81       	ldd	r24, Y+6	; 0x06
     d1c:	83 30       	cpi	r24, 0x03	; 3
     d1e:	29 f0       	breq	.+10     	; 0xd2a <MQTTSerialize_connectLength+0x1e>
     d20:	84 30       	cpi	r24, 0x04	; 4
     d22:	31 f4       	brne	.+12     	; 0xd30 <MQTTSerialize_connectLength+0x24>
     d24:	0a e0       	ldi	r16, 0x0A	; 10
     d26:	10 e0       	ldi	r17, 0x00	; 0
     d28:	05 c0       	rjmp	.+10     	; 0xd34 <MQTTSerialize_connectLength+0x28>
     d2a:	0c e0       	ldi	r16, 0x0C	; 12
     d2c:	10 e0       	ldi	r17, 0x00	; 0
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <MQTTSerialize_connectLength+0x28>
     d30:	00 e0       	ldi	r16, 0x00	; 0
     d32:	10 e0       	ldi	r17, 0x00	; 0
     d34:	4f 81       	ldd	r20, Y+7	; 0x07
     d36:	58 85       	ldd	r21, Y+8	; 0x08
     d38:	69 85       	ldd	r22, Y+9	; 0x09
     d3a:	7a 85       	ldd	r23, Y+10	; 0x0a
     d3c:	8b 85       	ldd	r24, Y+11	; 0x0b
     d3e:	9c 85       	ldd	r25, Y+12	; 0x0c
     d40:	fb d1       	rcall	.+1014   	; 0x1138 <MQTTstrlen>
     d42:	02 96       	adiw	r24, 0x02	; 2
     d44:	08 0f       	add	r16, r24
     d46:	19 1f       	adc	r17, r25
     d48:	88 89       	ldd	r24, Y+16	; 0x10
     d4a:	88 23       	and	r24, r24
     d4c:	a1 f0       	breq	.+40     	; 0xd76 <MQTTSerialize_connectLength+0x6a>
     d4e:	4f 89       	ldd	r20, Y+23	; 0x17
     d50:	58 8d       	ldd	r21, Y+24	; 0x18
     d52:	69 8d       	ldd	r22, Y+25	; 0x19
     d54:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d56:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d58:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d5a:	ee d1       	rcall	.+988    	; 0x1138 <MQTTstrlen>
     d5c:	7c 01       	movw	r14, r24
     d5e:	4d 8d       	ldd	r20, Y+29	; 0x1d
     d60:	5e 8d       	ldd	r21, Y+30	; 0x1e
     d62:	6f 8d       	ldd	r22, Y+31	; 0x1f
     d64:	78 a1       	ldd	r23, Y+32	; 0x20
     d66:	89 a1       	ldd	r24, Y+33	; 0x21
     d68:	9a a1       	ldd	r25, Y+34	; 0x22
     d6a:	e6 d1       	rcall	.+972    	; 0x1138 <MQTTstrlen>
     d6c:	8e 0d       	add	r24, r14
     d6e:	9f 1d       	adc	r25, r15
     d70:	04 96       	adiw	r24, 0x04	; 4
     d72:	08 0f       	add	r16, r24
     d74:	19 1f       	adc	r17, r25
     d76:	8d a1       	ldd	r24, Y+37	; 0x25
     d78:	9e a1       	ldd	r25, Y+38	; 0x26
     d7a:	89 2b       	or	r24, r25
     d7c:	21 f4       	brne	.+8      	; 0xd86 <MQTTSerialize_connectLength+0x7a>
     d7e:	89 a5       	ldd	r24, Y+41	; 0x29
     d80:	9a a5       	ldd	r25, Y+42	; 0x2a
     d82:	89 2b       	or	r24, r25
     d84:	51 f0       	breq	.+20     	; 0xd9a <MQTTSerialize_connectLength+0x8e>
     d86:	4d a1       	ldd	r20, Y+37	; 0x25
     d88:	5e a1       	ldd	r21, Y+38	; 0x26
     d8a:	6f a1       	ldd	r22, Y+39	; 0x27
     d8c:	78 a5       	ldd	r23, Y+40	; 0x28
     d8e:	89 a5       	ldd	r24, Y+41	; 0x29
     d90:	9a a5       	ldd	r25, Y+42	; 0x2a
     d92:	d2 d1       	rcall	.+932    	; 0x1138 <MQTTstrlen>
     d94:	02 96       	adiw	r24, 0x02	; 2
     d96:	08 0f       	add	r16, r24
     d98:	19 1f       	adc	r17, r25
     d9a:	8b a5       	ldd	r24, Y+43	; 0x2b
     d9c:	9c a5       	ldd	r25, Y+44	; 0x2c
     d9e:	89 2b       	or	r24, r25
     da0:	21 f4       	brne	.+8      	; 0xdaa <MQTTSerialize_connectLength+0x9e>
     da2:	8f a5       	ldd	r24, Y+47	; 0x2f
     da4:	98 a9       	ldd	r25, Y+48	; 0x30
     da6:	89 2b       	or	r24, r25
     da8:	51 f0       	breq	.+20     	; 0xdbe <MQTTSerialize_connectLength+0xb2>
     daa:	4b a5       	ldd	r20, Y+43	; 0x2b
     dac:	5c a5       	ldd	r21, Y+44	; 0x2c
     dae:	6d a5       	ldd	r22, Y+45	; 0x2d
     db0:	7e a5       	ldd	r23, Y+46	; 0x2e
     db2:	8f a5       	ldd	r24, Y+47	; 0x2f
     db4:	98 a9       	ldd	r25, Y+48	; 0x30
     db6:	c0 d1       	rcall	.+896    	; 0x1138 <MQTTstrlen>
     db8:	02 96       	adiw	r24, 0x02	; 2
     dba:	08 0f       	add	r16, r24
     dbc:	19 1f       	adc	r17, r25
     dbe:	c8 01       	movw	r24, r16
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	1f 91       	pop	r17
     dc6:	0f 91       	pop	r16
     dc8:	ff 90       	pop	r15
     dca:	ef 90       	pop	r14
     dcc:	08 95       	ret

00000dce <MQTTSerialize_connect>:
     dce:	af 92       	push	r10
     dd0:	bf 92       	push	r11
     dd2:	cf 92       	push	r12
     dd4:	df 92       	push	r13
     dd6:	ef 92       	push	r14
     dd8:	ff 92       	push	r15
     dda:	0f 93       	push	r16
     ddc:	1f 93       	push	r17
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
     de2:	00 d0       	rcall	.+0      	; 0xde4 <MQTTSerialize_connect+0x16>
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	6c 01       	movw	r12, r24
     dea:	5b 01       	movw	r10, r22
     dec:	8a 01       	movw	r16, r20
     dee:	9a 83       	std	Y+2, r25	; 0x02
     df0:	89 83       	std	Y+1, r24	; 0x01
     df2:	ca 01       	movw	r24, r20
     df4:	8b df       	rcall	.-234    	; 0xd0c <MQTTSerialize_connectLength>
     df6:	7c 01       	movw	r14, r24
     df8:	03 d1       	rcall	.+518    	; 0x1000 <MQTTPacket_len>
     dfa:	a8 16       	cp	r10, r24
     dfc:	b9 06       	cpc	r11, r25
     dfe:	0c f4       	brge	.+2      	; 0xe02 <MQTTSerialize_connect+0x34>
     e00:	9f c0       	rjmp	.+318    	; 0xf40 <MQTTSerialize_connect+0x172>
     e02:	60 e1       	ldi	r22, 0x10	; 16
     e04:	ce 01       	movw	r24, r28
     e06:	01 96       	adiw	r24, 0x01	; 1
     e08:	0a d1       	rcall	.+532    	; 0x101e <writeChar>
     e0a:	b7 01       	movw	r22, r14
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	9a 81       	ldd	r25, Y+2	; 0x02
     e10:	d1 d0       	rcall	.+418    	; 0xfb4 <MQTTPacket_encode>
     e12:	29 81       	ldd	r18, Y+1	; 0x01
     e14:	3a 81       	ldd	r19, Y+2	; 0x02
     e16:	82 0f       	add	r24, r18
     e18:	93 1f       	adc	r25, r19
     e1a:	9a 83       	std	Y+2, r25	; 0x02
     e1c:	89 83       	std	Y+1, r24	; 0x01
     e1e:	f8 01       	movw	r30, r16
     e20:	86 81       	ldd	r24, Z+6	; 0x06
     e22:	84 30       	cpi	r24, 0x04	; 4
     e24:	51 f4       	brne	.+20     	; 0xe3a <MQTTSerialize_connect+0x6c>
     e26:	6b ee       	ldi	r22, 0xEB	; 235
     e28:	73 e0       	ldi	r23, 0x03	; 3
     e2a:	ce 01       	movw	r24, r28
     e2c:	01 96       	adiw	r24, 0x01	; 1
     e2e:	20 d1       	rcall	.+576    	; 0x1070 <writeCString>
     e30:	64 e0       	ldi	r22, 0x04	; 4
     e32:	ce 01       	movw	r24, r28
     e34:	01 96       	adiw	r24, 0x01	; 1
     e36:	f3 d0       	rcall	.+486    	; 0x101e <writeChar>
     e38:	09 c0       	rjmp	.+18     	; 0xe4c <MQTTSerialize_connect+0x7e>
     e3a:	60 ef       	ldi	r22, 0xF0	; 240
     e3c:	73 e0       	ldi	r23, 0x03	; 3
     e3e:	ce 01       	movw	r24, r28
     e40:	01 96       	adiw	r24, 0x01	; 1
     e42:	16 d1       	rcall	.+556    	; 0x1070 <writeCString>
     e44:	63 e0       	ldi	r22, 0x03	; 3
     e46:	ce 01       	movw	r24, r28
     e48:	01 96       	adiw	r24, 0x01	; 1
     e4a:	e9 d0       	rcall	.+466    	; 0x101e <writeChar>
     e4c:	f1 2c       	mov	r15, r1
     e4e:	f8 01       	movw	r30, r16
     e50:	87 85       	ldd	r24, Z+15	; 0x0f
     e52:	80 fb       	bst	r24, 0
     e54:	f1 f8       	bld	r15, 1
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	90 89       	ldd	r25, Z+16	; 0x10
     e5a:	91 11       	cpse	r25, r1
     e5c:	01 c0       	rjmp	.+2      	; 0xe60 <MQTTSerialize_connect+0x92>
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	80 fb       	bst	r24, 0
     e62:	f2 f8       	bld	r15, 2
     e64:	f2 fe       	sbrs	r15, 2
     e66:	0d c0       	rjmp	.+26     	; 0xe82 <MQTTSerialize_connect+0xb4>
     e68:	f8 01       	movw	r30, r16
     e6a:	84 a1       	ldd	r24, Z+36	; 0x24
     e6c:	83 70       	andi	r24, 0x03	; 3
     e6e:	88 0f       	add	r24, r24
     e70:	88 0f       	add	r24, r24
     e72:	88 0f       	add	r24, r24
     e74:	9f 2d       	mov	r25, r15
     e76:	97 7e       	andi	r25, 0xE7	; 231
     e78:	f9 2e       	mov	r15, r25
     e7a:	f8 2a       	or	r15, r24
     e7c:	83 a1       	ldd	r24, Z+35	; 0x23
     e7e:	80 fb       	bst	r24, 0
     e80:	f5 f8       	bld	r15, 5
     e82:	f8 01       	movw	r30, r16
     e84:	85 a1       	ldd	r24, Z+37	; 0x25
     e86:	96 a1       	ldd	r25, Z+38	; 0x26
     e88:	89 2b       	or	r24, r25
     e8a:	21 f4       	brne	.+8      	; 0xe94 <MQTTSerialize_connect+0xc6>
     e8c:	81 a5       	ldd	r24, Z+41	; 0x29
     e8e:	92 a5       	ldd	r25, Z+42	; 0x2a
     e90:	89 2b       	or	r24, r25
     e92:	11 f0       	breq	.+4      	; 0xe98 <MQTTSerialize_connect+0xca>
     e94:	68 94       	set
     e96:	f7 f8       	bld	r15, 7
     e98:	f8 01       	movw	r30, r16
     e9a:	83 a5       	ldd	r24, Z+43	; 0x2b
     e9c:	94 a5       	ldd	r25, Z+44	; 0x2c
     e9e:	89 2b       	or	r24, r25
     ea0:	21 f4       	brne	.+8      	; 0xeaa <MQTTSerialize_connect+0xdc>
     ea2:	87 a5       	ldd	r24, Z+47	; 0x2f
     ea4:	90 a9       	ldd	r25, Z+48	; 0x30
     ea6:	89 2b       	or	r24, r25
     ea8:	11 f0       	breq	.+4      	; 0xeae <MQTTSerialize_connect+0xe0>
     eaa:	68 94       	set
     eac:	f6 f8       	bld	r15, 6
     eae:	6f 2d       	mov	r22, r15
     eb0:	ce 01       	movw	r24, r28
     eb2:	01 96       	adiw	r24, 0x01	; 1
     eb4:	b4 d0       	rcall	.+360    	; 0x101e <writeChar>
     eb6:	f8 01       	movw	r30, r16
     eb8:	65 85       	ldd	r22, Z+13	; 0x0d
     eba:	76 85       	ldd	r23, Z+14	; 0x0e
     ebc:	ce 01       	movw	r24, r28
     ebe:	01 96       	adiw	r24, 0x01	; 1
     ec0:	b8 d0       	rcall	.+368    	; 0x1032 <writeInt>
     ec2:	f8 01       	movw	r30, r16
     ec4:	27 81       	ldd	r18, Z+7	; 0x07
     ec6:	30 85       	ldd	r19, Z+8	; 0x08
     ec8:	41 85       	ldd	r20, Z+9	; 0x09
     eca:	52 85       	ldd	r21, Z+10	; 0x0a
     ecc:	63 85       	ldd	r22, Z+11	; 0x0b
     ece:	74 85       	ldd	r23, Z+12	; 0x0c
     ed0:	ce 01       	movw	r24, r28
     ed2:	01 96       	adiw	r24, 0x01	; 1
     ed4:	f2 d0       	rcall	.+484    	; 0x10ba <writeMQTTString>
     ed6:	f8 01       	movw	r30, r16
     ed8:	80 89       	ldd	r24, Z+16	; 0x10
     eda:	88 23       	and	r24, r24
     edc:	99 f0       	breq	.+38     	; 0xf04 <MQTTSerialize_connect+0x136>
     ede:	27 89       	ldd	r18, Z+23	; 0x17
     ee0:	30 8d       	ldd	r19, Z+24	; 0x18
     ee2:	41 8d       	ldd	r20, Z+25	; 0x19
     ee4:	52 8d       	ldd	r21, Z+26	; 0x1a
     ee6:	63 8d       	ldd	r22, Z+27	; 0x1b
     ee8:	74 8d       	ldd	r23, Z+28	; 0x1c
     eea:	ce 01       	movw	r24, r28
     eec:	01 96       	adiw	r24, 0x01	; 1
     eee:	e5 d0       	rcall	.+458    	; 0x10ba <writeMQTTString>
     ef0:	f8 01       	movw	r30, r16
     ef2:	25 8d       	ldd	r18, Z+29	; 0x1d
     ef4:	36 8d       	ldd	r19, Z+30	; 0x1e
     ef6:	47 8d       	ldd	r20, Z+31	; 0x1f
     ef8:	50 a1       	ldd	r21, Z+32	; 0x20
     efa:	61 a1       	ldd	r22, Z+33	; 0x21
     efc:	72 a1       	ldd	r23, Z+34	; 0x22
     efe:	ce 01       	movw	r24, r28
     f00:	01 96       	adiw	r24, 0x01	; 1
     f02:	db d0       	rcall	.+438    	; 0x10ba <writeMQTTString>
     f04:	ef 2c       	mov	r14, r15
     f06:	ff 20       	and	r15, r15
     f08:	54 f4       	brge	.+20     	; 0xf1e <MQTTSerialize_connect+0x150>
     f0a:	f8 01       	movw	r30, r16
     f0c:	25 a1       	ldd	r18, Z+37	; 0x25
     f0e:	36 a1       	ldd	r19, Z+38	; 0x26
     f10:	47 a1       	ldd	r20, Z+39	; 0x27
     f12:	50 a5       	ldd	r21, Z+40	; 0x28
     f14:	61 a5       	ldd	r22, Z+41	; 0x29
     f16:	72 a5       	ldd	r23, Z+42	; 0x2a
     f18:	ce 01       	movw	r24, r28
     f1a:	01 96       	adiw	r24, 0x01	; 1
     f1c:	ce d0       	rcall	.+412    	; 0x10ba <writeMQTTString>
     f1e:	e6 fe       	sbrs	r14, 6
     f20:	0a c0       	rjmp	.+20     	; 0xf36 <MQTTSerialize_connect+0x168>
     f22:	f8 01       	movw	r30, r16
     f24:	23 a5       	ldd	r18, Z+43	; 0x2b
     f26:	34 a5       	ldd	r19, Z+44	; 0x2c
     f28:	45 a5       	ldd	r20, Z+45	; 0x2d
     f2a:	56 a5       	ldd	r21, Z+46	; 0x2e
     f2c:	67 a5       	ldd	r22, Z+47	; 0x2f
     f2e:	70 a9       	ldd	r23, Z+48	; 0x30
     f30:	ce 01       	movw	r24, r28
     f32:	01 96       	adiw	r24, 0x01	; 1
     f34:	c2 d0       	rcall	.+388    	; 0x10ba <writeMQTTString>
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	9a 81       	ldd	r25, Y+2	; 0x02
     f3a:	8c 19       	sub	r24, r12
     f3c:	9d 09       	sbc	r25, r13
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <MQTTSerialize_connect+0x176>
     f40:	8e ef       	ldi	r24, 0xFE	; 254
     f42:	9f ef       	ldi	r25, 0xFF	; 255
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	1f 91       	pop	r17
     f4e:	0f 91       	pop	r16
     f50:	ff 90       	pop	r15
     f52:	ef 90       	pop	r14
     f54:	df 90       	pop	r13
     f56:	cf 90       	pop	r12
     f58:	bf 90       	pop	r11
     f5a:	af 90       	pop	r10
     f5c:	08 95       	ret

00000f5e <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
     f5e:	0f 93       	push	r16
     f60:	1f 93       	push	r17
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	00 d0       	rcall	.+0      	; 0xf68 <MQTTSerialize_zero+0xa>
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
     f6c:	9a 83       	std	Y+2, r25	; 0x02
     f6e:	89 83       	std	Y+1, r24	; 0x01

	FUNC_ENTRY;
	if (buflen < 2)
     f70:	62 30       	cpi	r22, 0x02	; 2
     f72:	71 05       	cpc	r23, r1
     f74:	9c f0       	brlt	.+38     	; 0xf9c <MQTTSerialize_zero+0x3e>
     f76:	8c 01       	movw	r16, r24
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
     f78:	64 2f       	mov	r22, r20
     f7a:	62 95       	swap	r22
     f7c:	60 7f       	andi	r22, 0xF0	; 240
	writeChar(&ptr, header.byte); /* write header */
     f7e:	ce 01       	movw	r24, r28
     f80:	01 96       	adiw	r24, 0x01	; 1
     f82:	4d d0       	rcall	.+154    	; 0x101e <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	9a 81       	ldd	r25, Y+2	; 0x02
     f8c:	13 d0       	rcall	.+38     	; 0xfb4 <MQTTPacket_encode>
	rc = ptr - buf;
     f8e:	29 81       	ldd	r18, Y+1	; 0x01
     f90:	3a 81       	ldd	r19, Y+2	; 0x02
     f92:	82 0f       	add	r24, r18
     f94:	93 1f       	adc	r25, r19
     f96:	80 1b       	sub	r24, r16
     f98:	91 0b       	sbc	r25, r17
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <MQTTSerialize_zero+0x42>
	unsigned char *ptr = buf;

	FUNC_ENTRY;
	if (buflen < 2)
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
     f9c:	8e ef       	ldi	r24, 0xFE	; 254
     f9e:	9f ef       	ldi	r25, 0xFF	; 255
	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
	rc = ptr - buf;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	1f 91       	pop	r17
     faa:	0f 91       	pop	r16
     fac:	08 95       	ret

00000fae <MQTTSerialize_disconnect>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
     fae:	4e e0       	ldi	r20, 0x0E	; 14
     fb0:	d6 cf       	rjmp	.-84     	; 0xf5e <MQTTSerialize_zero>
}
     fb2:	08 95       	ret

00000fb4 <MQTTPacket_encode>:
		}
	}
	mqttstring->cstring = NULL;
	FUNC_EXIT_RC(rc);
	return rc;
}
     fb4:	dc 01       	movw	r26, r24
     fb6:	e0 e0       	ldi	r30, 0x00	; 0
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	9b 01       	movw	r18, r22
     fbc:	2f 77       	andi	r18, 0x7F	; 127
     fbe:	30 78       	andi	r19, 0x80	; 128
     fc0:	33 23       	and	r19, r19
     fc2:	34 f4       	brge	.+12     	; 0xfd0 <MQTTPacket_encode+0x1c>
     fc4:	21 50       	subi	r18, 0x01	; 1
     fc6:	31 09       	sbc	r19, r1
     fc8:	20 68       	ori	r18, 0x80	; 128
     fca:	3f 6f       	ori	r19, 0xFF	; 255
     fcc:	2f 5f       	subi	r18, 0xFF	; 255
     fce:	3f 4f       	sbci	r19, 0xFF	; 255
     fd0:	ab 01       	movw	r20, r22
     fd2:	77 23       	and	r23, r23
     fd4:	14 f4       	brge	.+4      	; 0xfda <MQTTPacket_encode+0x26>
     fd6:	41 58       	subi	r20, 0x81	; 129
     fd8:	5f 4f       	sbci	r21, 0xFF	; 255
     fda:	ba 01       	movw	r22, r20
     fdc:	66 0f       	add	r22, r22
     fde:	67 2f       	mov	r22, r23
     fe0:	66 1f       	adc	r22, r22
     fe2:	77 0b       	sbc	r23, r23
     fe4:	16 16       	cp	r1, r22
     fe6:	17 06       	cpc	r1, r23
     fe8:	24 f4       	brge	.+8      	; 0xff2 <MQTTPacket_encode+0x3e>
     fea:	31 96       	adiw	r30, 0x01	; 1
     fec:	20 68       	ori	r18, 0x80	; 128
     fee:	2d 93       	st	X+, r18
     ff0:	e4 cf       	rjmp	.-56     	; 0xfba <MQTTPacket_encode+0x6>
     ff2:	dc 01       	movw	r26, r24
     ff4:	ae 0f       	add	r26, r30
     ff6:	bf 1f       	adc	r27, r31
     ff8:	2c 93       	st	X, r18
     ffa:	cf 01       	movw	r24, r30
     ffc:	01 96       	adiw	r24, 0x01	; 1
     ffe:	08 95       	ret

00001000 <MQTTPacket_len>:
    1000:	9c 01       	movw	r18, r24
    1002:	2f 5f       	subi	r18, 0xFF	; 255
    1004:	3f 4f       	sbci	r19, 0xFF	; 255
    1006:	20 38       	cpi	r18, 0x80	; 128
    1008:	31 05       	cpc	r19, r1
    100a:	14 f4       	brge	.+4      	; 0x1010 <MQTTPacket_len+0x10>
    100c:	02 96       	adiw	r24, 0x02	; 2
    100e:	08 95       	ret
    1010:	21 15       	cp	r18, r1
    1012:	30 44       	sbci	r19, 0x40	; 64
    1014:	14 f4       	brge	.+4      	; 0x101a <MQTTPacket_len+0x1a>
    1016:	03 96       	adiw	r24, 0x03	; 3
    1018:	08 95       	ret
    101a:	04 96       	adiw	r24, 0x04	; 4
    101c:	08 95       	ret

0000101e <writeChar>:
    101e:	fc 01       	movw	r30, r24
    1020:	a0 81       	ld	r26, Z
    1022:	b1 81       	ldd	r27, Z+1	; 0x01
    1024:	6c 93       	st	X, r22
    1026:	80 81       	ld	r24, Z
    1028:	91 81       	ldd	r25, Z+1	; 0x01
    102a:	01 96       	adiw	r24, 0x01	; 1
    102c:	91 83       	std	Z+1, r25	; 0x01
    102e:	80 83       	st	Z, r24
    1030:	08 95       	ret

00001032 <writeInt>:
    1032:	fc 01       	movw	r30, r24
    1034:	a0 81       	ld	r26, Z
    1036:	b1 81       	ldd	r27, Z+1	; 0x01
    1038:	cb 01       	movw	r24, r22
    103a:	77 23       	and	r23, r23
    103c:	14 f4       	brge	.+4      	; 0x1042 <writeInt+0x10>
    103e:	81 50       	subi	r24, 0x01	; 1
    1040:	9f 4f       	sbci	r25, 0xFF	; 255
    1042:	9c 93       	st	X, r25
    1044:	a0 81       	ld	r26, Z
    1046:	b1 81       	ldd	r27, Z+1	; 0x01
    1048:	cd 01       	movw	r24, r26
    104a:	01 96       	adiw	r24, 0x01	; 1
    104c:	91 83       	std	Z+1, r25	; 0x01
    104e:	80 83       	st	Z, r24
    1050:	70 78       	andi	r23, 0x80	; 128
    1052:	77 23       	and	r23, r23
    1054:	2c f4       	brge	.+10     	; 0x1060 <writeInt+0x2e>
    1056:	61 50       	subi	r22, 0x01	; 1
    1058:	71 09       	sbc	r23, r1
    105a:	7f 6f       	ori	r23, 0xFF	; 255
    105c:	6f 5f       	subi	r22, 0xFF	; 255
    105e:	7f 4f       	sbci	r23, 0xFF	; 255
    1060:	11 96       	adiw	r26, 0x01	; 1
    1062:	6c 93       	st	X, r22
    1064:	80 81       	ld	r24, Z
    1066:	91 81       	ldd	r25, Z+1	; 0x01
    1068:	01 96       	adiw	r24, 0x01	; 1
    106a:	91 83       	std	Z+1, r25	; 0x01
    106c:	80 83       	st	Z, r24
    106e:	08 95       	ret

00001070 <writeCString>:
    1070:	ef 92       	push	r14
    1072:	ff 92       	push	r15
    1074:	0f 93       	push	r16
    1076:	1f 93       	push	r17
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	8c 01       	movw	r16, r24
    107e:	7b 01       	movw	r14, r22
    1080:	eb 01       	movw	r28, r22
    1082:	09 90       	ld	r0, Y+
    1084:	00 20       	and	r0, r0
    1086:	e9 f7       	brne	.-6      	; 0x1082 <writeCString+0x12>
    1088:	21 97       	sbiw	r28, 0x01	; 1
    108a:	c6 1b       	sub	r28, r22
    108c:	d7 0b       	sbc	r29, r23
    108e:	be 01       	movw	r22, r28
    1090:	d0 df       	rcall	.-96     	; 0x1032 <writeInt>
    1092:	ae 01       	movw	r20, r28
    1094:	b7 01       	movw	r22, r14
    1096:	f8 01       	movw	r30, r16
    1098:	80 81       	ld	r24, Z
    109a:	91 81       	ldd	r25, Z+1	; 0x01
    109c:	0a d2       	rcall	.+1044   	; 0x14b2 <memcpy>
    109e:	f8 01       	movw	r30, r16
    10a0:	80 81       	ld	r24, Z
    10a2:	91 81       	ldd	r25, Z+1	; 0x01
    10a4:	c8 0f       	add	r28, r24
    10a6:	d9 1f       	adc	r29, r25
    10a8:	d1 83       	std	Z+1, r29	; 0x01
    10aa:	c0 83       	st	Z, r28
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	1f 91       	pop	r17
    10b2:	0f 91       	pop	r16
    10b4:	ff 90       	pop	r15
    10b6:	ef 90       	pop	r14
    10b8:	08 95       	ret

000010ba <writeMQTTString>:
    10ba:	ef 92       	push	r14
    10bc:	ff 92       	push	r15
    10be:	0f 93       	push	r16
    10c0:	1f 93       	push	r17
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
    10c6:	00 d0       	rcall	.+0      	; 0x10c8 <writeMQTTString+0xe>
    10c8:	00 d0       	rcall	.+0      	; 0x10ca <writeMQTTString+0x10>
    10ca:	00 d0       	rcall	.+0      	; 0x10cc <writeMQTTString+0x12>
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	7c 01       	movw	r14, r24
    10d2:	29 83       	std	Y+1, r18	; 0x01
    10d4:	3a 83       	std	Y+2, r19	; 0x02
    10d6:	4b 83       	std	Y+3, r20	; 0x03
    10d8:	5c 83       	std	Y+4, r21	; 0x04
    10da:	6d 83       	std	Y+5, r22	; 0x05
    10dc:	7e 83       	std	Y+6, r23	; 0x06
    10de:	0b 81       	ldd	r16, Y+3	; 0x03
    10e0:	1c 81       	ldd	r17, Y+4	; 0x04
    10e2:	10 16       	cp	r1, r16
    10e4:	11 06       	cpc	r1, r17
    10e6:	8c f4       	brge	.+34     	; 0x110a <writeMQTTString+0x50>
    10e8:	b8 01       	movw	r22, r16
    10ea:	a3 df       	rcall	.-186    	; 0x1032 <writeInt>
    10ec:	6d 81       	ldd	r22, Y+5	; 0x05
    10ee:	7e 81       	ldd	r23, Y+6	; 0x06
    10f0:	a8 01       	movw	r20, r16
    10f2:	f7 01       	movw	r30, r14
    10f4:	80 81       	ld	r24, Z
    10f6:	91 81       	ldd	r25, Z+1	; 0x01
    10f8:	dc d1       	rcall	.+952    	; 0x14b2 <memcpy>
    10fa:	f7 01       	movw	r30, r14
    10fc:	80 81       	ld	r24, Z
    10fe:	91 81       	ldd	r25, Z+1	; 0x01
    1100:	08 0f       	add	r16, r24
    1102:	19 1f       	adc	r17, r25
    1104:	11 83       	std	Z+1, r17	; 0x01
    1106:	00 83       	st	Z, r16
    1108:	0a c0       	rjmp	.+20     	; 0x111e <writeMQTTString+0x64>
    110a:	69 81       	ldd	r22, Y+1	; 0x01
    110c:	7a 81       	ldd	r23, Y+2	; 0x02
    110e:	61 15       	cp	r22, r1
    1110:	71 05       	cpc	r23, r1
    1112:	11 f0       	breq	.+4      	; 0x1118 <writeMQTTString+0x5e>
    1114:	ad df       	rcall	.-166    	; 0x1070 <writeCString>
    1116:	03 c0       	rjmp	.+6      	; 0x111e <writeMQTTString+0x64>
    1118:	60 e0       	ldi	r22, 0x00	; 0
    111a:	70 e0       	ldi	r23, 0x00	; 0
    111c:	8a df       	rcall	.-236    	; 0x1032 <writeInt>
    111e:	26 96       	adiw	r28, 0x06	; 6
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	f8 94       	cli
    1124:	de bf       	out	0x3e, r29	; 62
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	cd bf       	out	0x3d, r28	; 61
    112a:	df 91       	pop	r29
    112c:	cf 91       	pop	r28
    112e:	1f 91       	pop	r17
    1130:	0f 91       	pop	r16
    1132:	ff 90       	pop	r15
    1134:	ef 90       	pop	r14
    1136:	08 95       	ret

00001138 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
    1138:	cf 93       	push	r28
    113a:	df 93       	push	r29
    113c:	00 d0       	rcall	.+0      	; 0x113e <MQTTstrlen+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <MQTTstrlen+0x8>
    1140:	00 d0       	rcall	.+0      	; 0x1142 <MQTTstrlen+0xa>
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    1146:	49 83       	std	Y+1, r20	; 0x01
    1148:	5a 83       	std	Y+2, r21	; 0x02
    114a:	6b 83       	std	Y+3, r22	; 0x03
    114c:	7c 83       	std	Y+4, r23	; 0x04
    114e:	8d 83       	std	Y+5, r24	; 0x05
    1150:	9e 83       	std	Y+6, r25	; 0x06
    1152:	a9 81       	ldd	r26, Y+1	; 0x01
    1154:	ba 81       	ldd	r27, Y+2	; 0x02
	int rc = 0;

	if (mqttstring.cstring)
    1156:	10 97       	sbiw	r26, 0x00	; 0
    1158:	49 f0       	breq	.+18     	; 0x116c <MQTTstrlen+0x34>
		rc = strlen(mqttstring.cstring);
    115a:	fd 01       	movw	r30, r26
    115c:	01 90       	ld	r0, Z+
    115e:	00 20       	and	r0, r0
    1160:	e9 f7       	brne	.-6      	; 0x115c <MQTTstrlen+0x24>
    1162:	31 97       	sbiw	r30, 0x01	; 1
    1164:	cf 01       	movw	r24, r30
    1166:	8a 1b       	sub	r24, r26
    1168:	9b 0b       	sbc	r25, r27
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <MQTTstrlen+0x38>
	else
		rc = mqttstring.lenstring.len;
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
	return rc;
}
    1170:	26 96       	adiw	r28, 0x06	; 6
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	de bf       	out	0x3e, r29	; 62
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	cd bf       	out	0x3d, r28	; 61
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	08 95       	ret

00001182 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
    1182:	ef 92       	push	r14
    1184:	ff 92       	push	r15
    1186:	0f 93       	push	r16
    1188:	1f 93       	push	r17
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	00 d0       	rcall	.+0      	; 0x1190 <MQTTSerialize_publishLength+0xe>
    1190:	00 d0       	rcall	.+0      	; 0x1192 <MQTTSerialize_publishLength+0x10>
    1192:	00 d0       	rcall	.+0      	; 0x1194 <MQTTSerialize_publishLength+0x12>
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	7c 01       	movw	r14, r24
    119a:	f4 2f       	mov	r31, r20
    119c:	e5 2f       	mov	r30, r21
    119e:	86 2f       	mov	r24, r22
    11a0:	97 2f       	mov	r25, r23
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
    11a2:	42 2f       	mov	r20, r18
    11a4:	53 2f       	mov	r21, r19
    11a6:	6f 2f       	mov	r22, r31
    11a8:	7e 2f       	mov	r23, r30
    11aa:	c6 df       	rcall	.-116    	; 0x1138 <MQTTstrlen>
    11ac:	02 96       	adiw	r24, 0x02	; 2
    11ae:	80 0f       	add	r24, r16
    11b0:	91 1f       	adc	r25, r17
	if (qos > 0)
    11b2:	1e 14       	cp	r1, r14
    11b4:	1f 04       	cpc	r1, r15
    11b6:	0c f4       	brge	.+2      	; 0x11ba <MQTTSerialize_publishLength+0x38>
		len += 2; /* packetid */
    11b8:	02 96       	adiw	r24, 0x02	; 2
	return len;
}
    11ba:	26 96       	adiw	r28, 0x06	; 6
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	cd bf       	out	0x3d, r28	; 61
    11c6:	df 91       	pop	r29
    11c8:	cf 91       	pop	r28
    11ca:	1f 91       	pop	r17
    11cc:	0f 91       	pop	r16
    11ce:	ff 90       	pop	r15
    11d0:	ef 90       	pop	r14
    11d2:	08 95       	ret

000011d4 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
    11d4:	2f 92       	push	r2
    11d6:	3f 92       	push	r3
    11d8:	4f 92       	push	r4
    11da:	5f 92       	push	r5
    11dc:	6f 92       	push	r6
    11de:	7f 92       	push	r7
    11e0:	8f 92       	push	r8
    11e2:	9f 92       	push	r9
    11e4:	af 92       	push	r10
    11e6:	bf 92       	push	r11
    11e8:	cf 92       	push	r12
    11ea:	df 92       	push	r13
    11ec:	ef 92       	push	r14
    11ee:	ff 92       	push	r15
    11f0:	0f 93       	push	r16
    11f2:	1f 93       	push	r17
    11f4:	cf 93       	push	r28
    11f6:	df 93       	push	r29
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
    11fc:	2a 97       	sbiw	r28, 0x0a	; 10
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	f8 94       	cli
    1202:	de bf       	out	0x3e, r29	; 62
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	cd bf       	out	0x3d, r28	; 61
    1208:	2c 01       	movw	r4, r24
    120a:	1b 01       	movw	r2, r22
    120c:	49 87       	std	Y+9, r20	; 0x09
    120e:	39 01       	movw	r6, r18
    1210:	0a 87       	std	Y+10, r16	; 0x0a
    1212:	28 2d       	mov	r18, r8
    1214:	8b 82       	std	Y+3, r8	; 0x03
    1216:	39 2d       	mov	r19, r9
    1218:	9c 82       	std	Y+4, r9	; 0x04
    121a:	4a 2d       	mov	r20, r10
    121c:	ad 82       	std	Y+5, r10	; 0x05
    121e:	5b 2d       	mov	r21, r11
    1220:	be 82       	std	Y+6, r11	; 0x06
    1222:	6c 2d       	mov	r22, r12
    1224:	cf 82       	std	Y+7, r12	; 0x07
    1226:	7d 2d       	mov	r23, r13
    1228:	d8 86       	std	Y+8, r13	; 0x08
    122a:	c9 a0       	ldd	r12, Y+33	; 0x21
    122c:	da a0       	ldd	r13, Y+34	; 0x22
	unsigned char *ptr = buf;
    122e:	9a 83       	std	Y+2, r25	; 0x02
    1230:	89 83       	std	Y+1, r24	; 0x01
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
    1232:	86 01       	movw	r16, r12
    1234:	c3 01       	movw	r24, r6
    1236:	a5 df       	rcall	.-182    	; 0x1182 <MQTTSerialize_publishLength>
    1238:	8c 01       	movw	r16, r24
    123a:	e2 de       	rcall	.-572    	; 0x1000 <MQTTPacket_len>
    123c:	28 16       	cp	r2, r24
    123e:	39 06       	cpc	r3, r25
    1240:	b4 f1       	brlt	.+108    	; 0x12ae <MQTTSerialize_publish+0xda>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
    1242:	60 e3       	ldi	r22, 0x30	; 48
	header.bits.dup = dup;
    1244:	89 85       	ldd	r24, Y+9	; 0x09
    1246:	80 fb       	bst	r24, 0
    1248:	63 f9       	bld	r22, 3
	header.bits.qos = qos;
    124a:	86 2d       	mov	r24, r6
    124c:	83 70       	andi	r24, 0x03	; 3
    124e:	88 0f       	add	r24, r24
    1250:	69 7f       	andi	r22, 0xF9	; 249
    1252:	68 2b       	or	r22, r24
	header.bits.retain = retained;
    1254:	8a 85       	ldd	r24, Y+10	; 0x0a
    1256:	80 fb       	bst	r24, 0
	writeChar(&ptr, header.byte); /* write header */
    1258:	60 f9       	bld	r22, 0
    125a:	ce 01       	movw	r24, r28

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
    125c:	01 96       	adiw	r24, 0x01	; 1
    125e:	df de       	rcall	.-578    	; 0x101e <writeChar>
    1260:	b8 01       	movw	r22, r16
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	9a 81       	ldd	r25, Y+2	; 0x02
    1266:	a6 de       	rcall	.-692    	; 0xfb4 <MQTTPacket_encode>
    1268:	29 81       	ldd	r18, Y+1	; 0x01
    126a:	3a 81       	ldd	r19, Y+2	; 0x02
    126c:	82 0f       	add	r24, r18
    126e:	93 1f       	adc	r25, r19

	writeMQTTString(&ptr, topicName);
    1270:	9a 83       	std	Y+2, r25	; 0x02
    1272:	89 83       	std	Y+1, r24	; 0x01
    1274:	2b 81       	ldd	r18, Y+3	; 0x03
    1276:	3c 81       	ldd	r19, Y+4	; 0x04
    1278:	4d 81       	ldd	r20, Y+5	; 0x05
    127a:	5e 81       	ldd	r21, Y+6	; 0x06
    127c:	6f 81       	ldd	r22, Y+7	; 0x07
    127e:	78 85       	ldd	r23, Y+8	; 0x08
    1280:	ce 01       	movw	r24, r28

	if (qos > 0)
    1282:	01 96       	adiw	r24, 0x01	; 1
    1284:	1a df       	rcall	.-460    	; 0x10ba <writeMQTTString>
		writeInt(&ptr, packetid);
    1286:	16 14       	cp	r1, r6
    1288:	17 04       	cpc	r1, r7
    128a:	24 f4       	brge	.+8      	; 0x1294 <MQTTSerialize_publish+0xc0>
    128c:	b7 01       	movw	r22, r14

	memcpy(ptr, payload, payloadlen);
    128e:	ce 01       	movw	r24, r28
    1290:	01 96       	adiw	r24, 0x01	; 1
    1292:	cf de       	rcall	.-610    	; 0x1032 <writeInt>
    1294:	a6 01       	movw	r20, r12
    1296:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1298:	78 a1       	ldd	r23, Y+32	; 0x20
    129a:	89 81       	ldd	r24, Y+1	; 0x01
	ptr += payloadlen;

	rc = ptr - buf;
    129c:	9a 81       	ldd	r25, Y+2	; 0x02
    129e:	09 d1       	rcall	.+530    	; 0x14b2 <memcpy>
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	9a 81       	ldd	r25, Y+2	; 0x02
    12a4:	8c 0d       	add	r24, r12
    12a6:	9d 1d       	adc	r25, r13
    12a8:	84 19       	sub	r24, r4
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    12aa:	95 09       	sbc	r25, r5
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <MQTTSerialize_publish+0xde>
	rc = ptr - buf;

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    12ae:	8e ef       	ldi	r24, 0xFE	; 254
    12b0:	9f ef       	ldi	r25, 0xFF	; 255
    12b2:	2a 96       	adiw	r28, 0x0a	; 10
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	f8 94       	cli
    12b8:	de bf       	out	0x3e, r29	; 62
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	cd bf       	out	0x3d, r28	; 61
    12be:	df 91       	pop	r29
    12c0:	cf 91       	pop	r28
    12c2:	1f 91       	pop	r17
    12c4:	0f 91       	pop	r16
    12c6:	ff 90       	pop	r15
    12c8:	ef 90       	pop	r14
    12ca:	df 90       	pop	r13
    12cc:	cf 90       	pop	r12
    12ce:	bf 90       	pop	r11
    12d0:	af 90       	pop	r10
    12d2:	9f 90       	pop	r9
    12d4:	8f 90       	pop	r8
    12d6:	7f 90       	pop	r7
    12d8:	6f 90       	pop	r6
    12da:	5f 90       	pop	r5
    12dc:	4f 90       	pop	r4
    12de:	3f 90       	pop	r3
    12e0:	2f 90       	pop	r2
    12e2:	08 95       	ret

000012e4 <mqtt_packet>:
#include "string.h"
#include "MQTT_functions.h" 

/////////////MQTT////////////////////
int mqtt_packet(char *payload, char *package, int buflen, char *sub_topic)
{
    12e4:	2f 92       	push	r2
    12e6:	3f 92       	push	r3
    12e8:	4f 92       	push	r4
    12ea:	5f 92       	push	r5
    12ec:	6f 92       	push	r6
    12ee:	7f 92       	push	r7
    12f0:	8f 92       	push	r8
    12f2:	9f 92       	push	r9
    12f4:	af 92       	push	r10
    12f6:	bf 92       	push	r11
    12f8:	cf 92       	push	r12
    12fa:	df 92       	push	r13
    12fc:	ef 92       	push	r14
    12fe:	ff 92       	push	r15
    1300:	0f 93       	push	r16
    1302:	1f 93       	push	r17
    1304:	cf 93       	push	r28
    1306:	df 93       	push	r29
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
    130c:	ed 97       	sbiw	r28, 0x3d	; 61
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	f8 94       	cli
    1312:	de bf       	out	0x3e, r29	; 62
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	cd bf       	out	0x3d, r28	; 61
    1318:	b8 2e       	mov	r11, r24
    131a:	a9 2e       	mov	r10, r25
    131c:	1b 01       	movw	r2, r22
    131e:	2a 01       	movw	r4, r20
    1320:	79 01       	movw	r14, r18
	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
    1322:	81 e3       	ldi	r24, 0x31	; 49
    1324:	e9 e0       	ldi	r30, 0x09	; 9
    1326:	f1 e0       	ldi	r31, 0x01	; 1
    1328:	de 01       	movw	r26, r28
    132a:	11 96       	adiw	r26, 0x01	; 1
    132c:	01 90       	ld	r0, Z+
    132e:	0d 92       	st	X+, r0
    1330:	8a 95       	dec	r24
    1332:	e1 f7       	brne	.-8      	; 0x132c <mqtt_packet+0x48>
	
	//volatile int buflen = sizeof(&package);
	char buf[256];
	//buflen = sizeof(buf);
	MQTTString topicString = MQTTString_initializer;
    1334:	1d aa       	std	Y+53, r1	; 0x35
    1336:	1c aa       	std	Y+52, r1	; 0x34
    1338:	1f aa       	std	Y+55, r1	; 0x37
    133a:	1e aa       	std	Y+54, r1	; 0x36
	
	int payloadlen = strlen(payload);
    133c:	eb 2d       	mov	r30, r11
    133e:	f9 2f       	mov	r31, r25
    1340:	df 01       	movw	r26, r30
    1342:	0d 90       	ld	r0, X+
    1344:	00 20       	and	r0, r0
    1346:	e9 f7       	brne	.-6      	; 0x1342 <mqtt_packet+0x5e>
    1348:	11 97       	sbiw	r26, 0x01	; 1
    134a:	8d 01       	movw	r16, r26
    134c:	0e 1b       	sub	r16, r30
    134e:	1f 0b       	sbc	r17, r31
	int len = 0;
	
	data.clientID.cstring = "LE";
    1350:	87 ef       	ldi	r24, 0xF7	; 247
    1352:	93 e0       	ldi	r25, 0x03	; 3
    1354:	99 87       	std	Y+9, r25	; 0x09
    1356:	88 87       	std	Y+8, r24	; 0x08
	//data.clientID.cstring = MQTT_TOPIC; //FIX SO THIS ONE WORKS, COULD BE AN ADDITIONAL INPUT.
	data.keepAliveInterval = 20;
    1358:	84 e1       	ldi	r24, 0x14	; 20
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	9f 87       	std	Y+15, r25	; 0x0f
    135e:	8e 87       	std	Y+14, r24	; 0x0e
	data.cleansession = 1;
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	88 8b       	std	Y+16, r24	; 0x10
	data.username.cstring = "";
    1364:	8a ec       	ldi	r24, 0xCA	; 202
    1366:	92 e0       	ldi	r25, 0x02	; 2
    1368:	9f a3       	std	Y+39, r25	; 0x27
    136a:	8e a3       	std	Y+38, r24	; 0x26
	data.password.cstring = "";
    136c:	9d a7       	std	Y+45, r25	; 0x2d
    136e:	8c a7       	std	Y+44, r24	; 0x2c
	data.MQTTVersion = 4;
    1370:	84 e0       	ldi	r24, 0x04	; 4
    1372:	8f 83       	std	Y+7, r24	; 0x07

	len = MQTTSerialize_connect((unsigned char *)package, buflen, &data);
    1374:	ae 01       	movw	r20, r28
    1376:	4f 5f       	subi	r20, 0xFF	; 255
    1378:	5f 4f       	sbci	r21, 0xFF	; 255
    137a:	b2 01       	movw	r22, r4
    137c:	c1 01       	movw	r24, r2
    137e:	27 dd       	rcall	.-1458   	; 0xdce <MQTTSerialize_connect>
    1380:	3c 01       	movw	r6, r24
	
	//topicString.cstring = "LE/0"; //MAKE A GENERAL CONFIGUREATION OF THIS PARAMETER
	char main_sub_topic[6] = "LE/";
    1382:	8c e4       	ldi	r24, 0x4C	; 76
    1384:	95 e4       	ldi	r25, 0x45	; 69
    1386:	99 af       	std	Y+57, r25	; 0x39
    1388:	88 af       	std	Y+56, r24	; 0x38
    138a:	8f e2       	ldi	r24, 0x2F	; 47
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	9b af       	std	Y+59, r25	; 0x3b
    1390:	8a af       	std	Y+58, r24	; 0x3a
    1392:	1d ae       	std	Y+61, r1	; 0x3d
    1394:	1c ae       	std	Y+60, r1	; 0x3c
	strcat(main_sub_topic, sub_topic);
    1396:	6e 01       	movw	r12, r28
    1398:	88 e3       	ldi	r24, 0x38	; 56
    139a:	c8 0e       	add	r12, r24
    139c:	d1 1c       	adc	r13, r1
    139e:	b7 01       	movw	r22, r14
    13a0:	c6 01       	movw	r24, r12
    13a2:	90 d0       	rcall	.+288    	; 0x14c4 <strcat>
	topicString.cstring = main_sub_topic;
    13a4:	db aa       	std	Y+51, r13	; 0x33
    13a6:	ca aa       	std	Y+50, r12	; 0x32
	
	
	len += MQTTSerialize_publish((unsigned char *)(package + len), buflen - len, 0, 0, 0, 0, topicString, (unsigned char *)payload, payloadlen);
    13a8:	b2 01       	movw	r22, r4
    13aa:	66 19       	sub	r22, r6
    13ac:	77 09       	sbc	r23, r7
    13ae:	1f 93       	push	r17
    13b0:	0f 93       	push	r16
    13b2:	af 92       	push	r10
    13b4:	bf 92       	push	r11
    13b6:	8a a8       	ldd	r8, Y+50	; 0x32
    13b8:	9b a8       	ldd	r9, Y+51	; 0x33
    13ba:	ac a8       	ldd	r10, Y+52	; 0x34
    13bc:	bd a8       	ldd	r11, Y+53	; 0x35
    13be:	ce a8       	ldd	r12, Y+54	; 0x36
    13c0:	df a8       	ldd	r13, Y+55	; 0x37
    13c2:	e1 2c       	mov	r14, r1
    13c4:	f1 2c       	mov	r15, r1
    13c6:	00 e0       	ldi	r16, 0x00	; 0
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	40 e0       	ldi	r20, 0x00	; 0
    13ce:	c1 01       	movw	r24, r2
    13d0:	86 0d       	add	r24, r6
    13d2:	97 1d       	adc	r25, r7
    13d4:	ff de       	rcall	.-514    	; 0x11d4 <MQTTSerialize_publish>
    13d6:	68 0e       	add	r6, r24
    13d8:	79 1e       	adc	r7, r25
		
	len += MQTTSerialize_disconnect((unsigned char *)(package + len), buflen - len);
    13da:	b2 01       	movw	r22, r4
    13dc:	66 19       	sub	r22, r6
    13de:	77 09       	sbc	r23, r7
    13e0:	c1 01       	movw	r24, r2
    13e2:	86 0d       	add	r24, r6
    13e4:	97 1d       	adc	r25, r7
    13e6:	e3 dd       	rcall	.-1082   	; 0xfae <MQTTSerialize_disconnect>
	
	exit:
	
	//return 0;
	return len;
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
}
    13f0:	86 0d       	add	r24, r6
    13f2:	97 1d       	adc	r25, r7
    13f4:	ed 96       	adiw	r28, 0x3d	; 61
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	f8 94       	cli
    13fa:	de bf       	out	0x3e, r29	; 62
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	cd bf       	out	0x3d, r28	; 61
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	1f 91       	pop	r17
    1406:	0f 91       	pop	r16
    1408:	ff 90       	pop	r15
    140a:	ef 90       	pop	r14
    140c:	df 90       	pop	r13
    140e:	cf 90       	pop	r12
    1410:	bf 90       	pop	r11
    1412:	af 90       	pop	r10
    1414:	9f 90       	pop	r9
    1416:	8f 90       	pop	r8
    1418:	7f 90       	pop	r7
    141a:	6f 90       	pop	r6
    141c:	5f 90       	pop	r5
    141e:	4f 90       	pop	r4
    1420:	3f 90       	pop	r3
    1422:	2f 90       	pop	r2
    1424:	08 95       	ret

00001426 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    1426:	08 95       	ret

00001428 <__udivmodsi4>:
    1428:	a1 e2       	ldi	r26, 0x21	; 33
    142a:	1a 2e       	mov	r1, r26
    142c:	aa 1b       	sub	r26, r26
    142e:	bb 1b       	sub	r27, r27
    1430:	fd 01       	movw	r30, r26
    1432:	0d c0       	rjmp	.+26     	; 0x144e <__udivmodsi4_ep>

00001434 <__udivmodsi4_loop>:
    1434:	aa 1f       	adc	r26, r26
    1436:	bb 1f       	adc	r27, r27
    1438:	ee 1f       	adc	r30, r30
    143a:	ff 1f       	adc	r31, r31
    143c:	a2 17       	cp	r26, r18
    143e:	b3 07       	cpc	r27, r19
    1440:	e4 07       	cpc	r30, r20
    1442:	f5 07       	cpc	r31, r21
    1444:	20 f0       	brcs	.+8      	; 0x144e <__udivmodsi4_ep>
    1446:	a2 1b       	sub	r26, r18
    1448:	b3 0b       	sbc	r27, r19
    144a:	e4 0b       	sbc	r30, r20
    144c:	f5 0b       	sbc	r31, r21

0000144e <__udivmodsi4_ep>:
    144e:	66 1f       	adc	r22, r22
    1450:	77 1f       	adc	r23, r23
    1452:	88 1f       	adc	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	1a 94       	dec	r1
    1458:	69 f7       	brne	.-38     	; 0x1434 <__udivmodsi4_loop>
    145a:	60 95       	com	r22
    145c:	70 95       	com	r23
    145e:	80 95       	com	r24
    1460:	90 95       	com	r25
    1462:	9b 01       	movw	r18, r22
    1464:	ac 01       	movw	r20, r24
    1466:	bd 01       	movw	r22, r26
    1468:	cf 01       	movw	r24, r30
    146a:	08 95       	ret

0000146c <__tablejump2__>:
    146c:	ee 0f       	add	r30, r30
    146e:	ff 1f       	adc	r31, r31
    1470:	05 90       	lpm	r0, Z+
    1472:	f4 91       	lpm	r31, Z
    1474:	e0 2d       	mov	r30, r0
    1476:	09 94       	ijmp

00001478 <atoi>:
    1478:	fc 01       	movw	r30, r24
    147a:	88 27       	eor	r24, r24
    147c:	99 27       	eor	r25, r25
    147e:	e8 94       	clt
    1480:	21 91       	ld	r18, Z+
    1482:	20 32       	cpi	r18, 0x20	; 32
    1484:	e9 f3       	breq	.-6      	; 0x1480 <atoi+0x8>
    1486:	29 30       	cpi	r18, 0x09	; 9
    1488:	10 f0       	brcs	.+4      	; 0x148e <atoi+0x16>
    148a:	2e 30       	cpi	r18, 0x0E	; 14
    148c:	c8 f3       	brcs	.-14     	; 0x1480 <atoi+0x8>
    148e:	2b 32       	cpi	r18, 0x2B	; 43
    1490:	39 f0       	breq	.+14     	; 0x14a0 <atoi+0x28>
    1492:	2d 32       	cpi	r18, 0x2D	; 45
    1494:	31 f4       	brne	.+12     	; 0x14a2 <atoi+0x2a>
    1496:	68 94       	set
    1498:	03 c0       	rjmp	.+6      	; 0x14a0 <atoi+0x28>
    149a:	54 d0       	rcall	.+168    	; 0x1544 <__mulhi_const_10>
    149c:	82 0f       	add	r24, r18
    149e:	91 1d       	adc	r25, r1
    14a0:	21 91       	ld	r18, Z+
    14a2:	20 53       	subi	r18, 0x30	; 48
    14a4:	2a 30       	cpi	r18, 0x0A	; 10
    14a6:	c8 f3       	brcs	.-14     	; 0x149a <atoi+0x22>
    14a8:	1e f4       	brtc	.+6      	; 0x14b0 <atoi+0x38>
    14aa:	90 95       	com	r25
    14ac:	81 95       	neg	r24
    14ae:	9f 4f       	sbci	r25, 0xFF	; 255
    14b0:	08 95       	ret

000014b2 <memcpy>:
    14b2:	fb 01       	movw	r30, r22
    14b4:	dc 01       	movw	r26, r24
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <memcpy+0xa>
    14b8:	01 90       	ld	r0, Z+
    14ba:	0d 92       	st	X+, r0
    14bc:	41 50       	subi	r20, 0x01	; 1
    14be:	50 40       	sbci	r21, 0x00	; 0
    14c0:	d8 f7       	brcc	.-10     	; 0x14b8 <memcpy+0x6>
    14c2:	08 95       	ret

000014c4 <strcat>:
    14c4:	fb 01       	movw	r30, r22
    14c6:	dc 01       	movw	r26, r24
    14c8:	0d 90       	ld	r0, X+
    14ca:	00 20       	and	r0, r0
    14cc:	e9 f7       	brne	.-6      	; 0x14c8 <strcat+0x4>
    14ce:	11 97       	sbiw	r26, 0x01	; 1
    14d0:	01 90       	ld	r0, Z+
    14d2:	0d 92       	st	X+, r0
    14d4:	00 20       	and	r0, r0
    14d6:	e1 f7       	brne	.-8      	; 0x14d0 <strcat+0xc>
    14d8:	08 95       	ret

000014da <strcpy>:
    14da:	fb 01       	movw	r30, r22
    14dc:	dc 01       	movw	r26, r24
    14de:	01 90       	ld	r0, Z+
    14e0:	0d 92       	st	X+, r0
    14e2:	00 20       	and	r0, r0
    14e4:	e1 f7       	brne	.-8      	; 0x14de <strcpy+0x4>
    14e6:	08 95       	ret

000014e8 <strstr>:
    14e8:	fb 01       	movw	r30, r22
    14ea:	51 91       	ld	r21, Z+
    14ec:	55 23       	and	r21, r21
    14ee:	a9 f0       	breq	.+42     	; 0x151a <strstr+0x32>
    14f0:	bf 01       	movw	r22, r30
    14f2:	dc 01       	movw	r26, r24
    14f4:	4d 91       	ld	r20, X+
    14f6:	45 17       	cp	r20, r21
    14f8:	41 11       	cpse	r20, r1
    14fa:	e1 f7       	brne	.-8      	; 0x14f4 <strstr+0xc>
    14fc:	59 f4       	brne	.+22     	; 0x1514 <strstr+0x2c>
    14fe:	cd 01       	movw	r24, r26
    1500:	01 90       	ld	r0, Z+
    1502:	00 20       	and	r0, r0
    1504:	49 f0       	breq	.+18     	; 0x1518 <strstr+0x30>
    1506:	4d 91       	ld	r20, X+
    1508:	40 15       	cp	r20, r0
    150a:	41 11       	cpse	r20, r1
    150c:	c9 f3       	breq	.-14     	; 0x1500 <strstr+0x18>
    150e:	fb 01       	movw	r30, r22
    1510:	41 11       	cpse	r20, r1
    1512:	ef cf       	rjmp	.-34     	; 0x14f2 <strstr+0xa>
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	01 97       	sbiw	r24, 0x01	; 1
    151a:	08 95       	ret

0000151c <itoa>:
    151c:	45 32       	cpi	r20, 0x25	; 37
    151e:	51 05       	cpc	r21, r1
    1520:	18 f4       	brcc	.+6      	; 0x1528 <itoa+0xc>
    1522:	42 30       	cpi	r20, 0x02	; 2
    1524:	08 f0       	brcs	.+2      	; 0x1528 <itoa+0xc>
    1526:	04 c0       	rjmp	.+8      	; 0x1530 <__itoa_ncheck>
    1528:	fb 01       	movw	r30, r22
    152a:	10 82       	st	Z, r1
    152c:	cb 01       	movw	r24, r22
    152e:	08 95       	ret

00001530 <__itoa_ncheck>:
    1530:	bb 27       	eor	r27, r27
    1532:	4a 30       	cpi	r20, 0x0A	; 10
    1534:	31 f4       	brne	.+12     	; 0x1542 <__itoa_ncheck+0x12>
    1536:	99 23       	and	r25, r25
    1538:	22 f4       	brpl	.+8      	; 0x1542 <__itoa_ncheck+0x12>
    153a:	bd e2       	ldi	r27, 0x2D	; 45
    153c:	90 95       	com	r25
    153e:	81 95       	neg	r24
    1540:	9f 4f       	sbci	r25, 0xFF	; 255
    1542:	09 c0       	rjmp	.+18     	; 0x1556 <__utoa_common>

00001544 <__mulhi_const_10>:
    1544:	7a e0       	ldi	r23, 0x0A	; 10
    1546:	97 9f       	mul	r25, r23
    1548:	90 2d       	mov	r25, r0
    154a:	87 9f       	mul	r24, r23
    154c:	80 2d       	mov	r24, r0
    154e:	91 0d       	add	r25, r1
    1550:	11 24       	eor	r1, r1
    1552:	08 95       	ret

00001554 <__utoa_ncheck>:
    1554:	bb 27       	eor	r27, r27

00001556 <__utoa_common>:
    1556:	fb 01       	movw	r30, r22
    1558:	55 27       	eor	r21, r21
    155a:	aa 27       	eor	r26, r26
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	aa 1f       	adc	r26, r26
    1562:	a4 17       	cp	r26, r20
    1564:	10 f0       	brcs	.+4      	; 0x156a <__utoa_common+0x14>
    1566:	a4 1b       	sub	r26, r20
    1568:	83 95       	inc	r24
    156a:	50 51       	subi	r21, 0x10	; 16
    156c:	b9 f7       	brne	.-18     	; 0x155c <__utoa_common+0x6>
    156e:	a0 5d       	subi	r26, 0xD0	; 208
    1570:	aa 33       	cpi	r26, 0x3A	; 58
    1572:	08 f0       	brcs	.+2      	; 0x1576 <__utoa_common+0x20>
    1574:	a9 5d       	subi	r26, 0xD9	; 217
    1576:	a1 93       	st	Z+, r26
    1578:	00 97       	sbiw	r24, 0x00	; 0
    157a:	79 f7       	brne	.-34     	; 0x155a <__utoa_common+0x4>
    157c:	b1 11       	cpse	r27, r1
    157e:	b1 93       	st	Z+, r27
    1580:	11 92       	st	Z+, r1
    1582:	cb 01       	movw	r24, r22
    1584:	00 c0       	rjmp	.+0      	; 0x1586 <strrev>

00001586 <strrev>:
    1586:	dc 01       	movw	r26, r24
    1588:	fc 01       	movw	r30, r24
    158a:	67 2f       	mov	r22, r23
    158c:	71 91       	ld	r23, Z+
    158e:	77 23       	and	r23, r23
    1590:	e1 f7       	brne	.-8      	; 0x158a <strrev+0x4>
    1592:	32 97       	sbiw	r30, 0x02	; 2
    1594:	04 c0       	rjmp	.+8      	; 0x159e <strrev+0x18>
    1596:	7c 91       	ld	r23, X
    1598:	6d 93       	st	X+, r22
    159a:	70 83       	st	Z, r23
    159c:	62 91       	ld	r22, -Z
    159e:	ae 17       	cp	r26, r30
    15a0:	bf 07       	cpc	r27, r31
    15a2:	c8 f3       	brcs	.-14     	; 0x1596 <strrev+0x10>
    15a4:	08 95       	ret

000015a6 <_exit>:
    15a6:	f8 94       	cli

000015a8 <__stop_program>:
    15a8:	ff cf       	rjmp	.-2      	; 0x15a8 <__stop_program>
