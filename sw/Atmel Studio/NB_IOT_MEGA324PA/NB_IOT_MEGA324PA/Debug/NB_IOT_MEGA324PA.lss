
NB_IOT_MEGA324PA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000300  00800100  00001d94  00001e28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011f  00800400  00800400  00002128  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002128  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002158  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000310  00000000  00000000  00002198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004fb9  00000000  00000000  000024a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000198f  00000000  00000000  00007461  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000383a  00000000  00000000  00008df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bcc  00000000  00000000  0000c62c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00014f1c  00000000  00000000  0000d1f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000443e  00000000  00000000  00022114  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  00026552  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00005f73  00000000  00000000  00026802  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8a c0       	rjmp	.+276    	; 0x116 <__ctors_end>
       2:	00 00       	nop
       4:	a4 c0       	rjmp	.+328    	; 0x14e <__bad_interrupt>
       6:	00 00       	nop
       8:	a2 c0       	rjmp	.+324    	; 0x14e <__bad_interrupt>
       a:	00 00       	nop
       c:	a0 c0       	rjmp	.+320    	; 0x14e <__bad_interrupt>
       e:	00 00       	nop
      10:	9e c0       	rjmp	.+316    	; 0x14e <__bad_interrupt>
      12:	00 00       	nop
      14:	9c c0       	rjmp	.+312    	; 0x14e <__bad_interrupt>
      16:	00 00       	nop
      18:	9a c0       	rjmp	.+308    	; 0x14e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	98 c0       	rjmp	.+304    	; 0x14e <__bad_interrupt>
      1e:	00 00       	nop
      20:	85 c5       	rjmp	.+2826   	; 0xb2c <__vector_8>
      22:	00 00       	nop
      24:	94 c0       	rjmp	.+296    	; 0x14e <__bad_interrupt>
      26:	00 00       	nop
      28:	92 c0       	rjmp	.+292    	; 0x14e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	90 c0       	rjmp	.+288    	; 0x14e <__bad_interrupt>
      2e:	00 00       	nop
      30:	8e c0       	rjmp	.+284    	; 0x14e <__bad_interrupt>
      32:	00 00       	nop
      34:	8c c0       	rjmp	.+280    	; 0x14e <__bad_interrupt>
      36:	00 00       	nop
      38:	8a c0       	rjmp	.+276    	; 0x14e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	88 c0       	rjmp	.+272    	; 0x14e <__bad_interrupt>
      3e:	00 00       	nop
      40:	86 c0       	rjmp	.+268    	; 0x14e <__bad_interrupt>
      42:	00 00       	nop
      44:	84 c0       	rjmp	.+264    	; 0x14e <__bad_interrupt>
      46:	00 00       	nop
      48:	82 c0       	rjmp	.+260    	; 0x14e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	80 c0       	rjmp	.+256    	; 0x14e <__bad_interrupt>
      4e:	00 00       	nop
      50:	31 c5       	rjmp	.+2658   	; 0xab4 <__vector_20>
      52:	00 00       	nop
      54:	7c c0       	rjmp	.+248    	; 0x14e <__bad_interrupt>
      56:	00 00       	nop
      58:	7a c0       	rjmp	.+244    	; 0x14e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	78 c0       	rjmp	.+240    	; 0x14e <__bad_interrupt>
      5e:	00 00       	nop
      60:	76 c0       	rjmp	.+236    	; 0x14e <__bad_interrupt>
      62:	00 00       	nop
      64:	74 c0       	rjmp	.+232    	; 0x14e <__bad_interrupt>
      66:	00 00       	nop
      68:	72 c0       	rjmp	.+228    	; 0x14e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	70 c0       	rjmp	.+224    	; 0x14e <__bad_interrupt>
      6e:	00 00       	nop
      70:	6e c0       	rjmp	.+220    	; 0x14e <__bad_interrupt>
      72:	00 00       	nop
      74:	6c c0       	rjmp	.+216    	; 0x14e <__bad_interrupt>
      76:	00 00       	nop
      78:	6a c0       	rjmp	.+212    	; 0x14e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	1b 06       	cpc	r1, r27
      7e:	1f 06       	cpc	r1, r31
      80:	66 06       	cpc	r6, r22
      82:	82 06       	cpc	r8, r18
      84:	89 06       	cpc	r8, r25
      86:	8d 06       	cpc	r8, r29
      88:	91 06       	cpc	r9, r17
      8a:	b0 06       	cpc	r11, r16
      8c:	bd 06       	cpc	r11, r29
      8e:	ca 06       	cpc	r12, r26
      90:	ce 06       	cpc	r12, r30
      92:	d2 06       	cpc	r13, r18
      94:	07 63       	ori	r16, 0x37	; 55
      96:	42 36       	cpi	r20, 0x62	; 98
      98:	b7 9b       	sbis	0x16, 7	; 22
      9a:	d8 a7       	std	Y+40, r29	; 0x28
      9c:	1a 39       	cpi	r17, 0x9A	; 154
      9e:	68 56       	subi	r22, 0x68	; 104
      a0:	18 ae       	std	Y+56, r1	; 0x38
      a2:	ba ab       	std	Y+50, r27	; 0x32
      a4:	55 8c       	ldd	r5, Z+29	; 0x1d
      a6:	1d 3c       	cpi	r17, 0xCD	; 205
      a8:	b7 cc       	rjmp	.-1682   	; 0xfffffa18 <__eeprom_end+0xff7efa18>
      aa:	57 63       	ori	r21, 0x37	; 55
      ac:	bd 6d       	ori	r27, 0xDD	; 221
      ae:	ed fd       	.word	0xfded	; ????
      b0:	75 3e       	cpi	r23, 0xE5	; 229
      b2:	f6 17       	cp	r31, r22
      b4:	72 31       	cpi	r23, 0x12	; 18
      b6:	bf 00       	.word	0x00bf	; ????
      b8:	00 00       	nop
      ba:	80 3f       	cpi	r24, 0xF0	; 240
      bc:	08 00       	.word	0x0008	; ????
      be:	00 00       	nop
      c0:	be 92       	st	-X, r11
      c2:	24 49       	sbci	r18, 0x94	; 148
      c4:	12 3e       	cpi	r17, 0xE2	; 226
      c6:	ab aa       	std	Y+51, r10	; 0x33
      c8:	aa 2a       	or	r10, r26
      ca:	be cd       	rjmp	.-1156   	; 0xfffffc48 <__eeprom_end+0xff7efc48>
      cc:	cc cc       	rjmp	.-1640   	; 0xfffffa66 <__eeprom_end+0xff7efa66>
      ce:	4c 3e       	cpi	r20, 0xEC	; 236
      d0:	00 00       	nop
      d2:	00 80       	ld	r0, Z
      d4:	be ab       	std	Y+54, r27	; 0x36
      d6:	aa aa       	std	Y+50, r10	; 0x32
      d8:	aa 3e       	cpi	r26, 0xEA	; 234
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	bf 00       	.word	0x00bf	; ????
      e0:	00 00       	nop
      e2:	80 3f       	cpi	r24, 0xF0	; 240
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	00 08       	sbc	r0, r0
      ea:	41 78       	andi	r20, 0x81	; 129
      ec:	d3 bb       	out	0x13, r29	; 19
      ee:	43 87       	std	Z+11, r20	; 0x0b
      f0:	d1 13       	cpse	r29, r17
      f2:	3d 19       	sub	r19, r13
      f4:	0e 3c       	cpi	r16, 0xCE	; 206
      f6:	c3 bd       	out	0x23, r28	; 35
      f8:	42 82       	std	Z+2, r4	; 0x02
      fa:	ad 2b       	or	r26, r29
      fc:	3e 68       	ori	r19, 0x8E	; 142
      fe:	ec 82       	std	Y+4, r14	; 0x04
     100:	76 be       	out	0x36, r7	; 54
     102:	d9 8f       	std	Y+25, r29	; 0x19
     104:	e1 a9       	ldd	r30, Z+49	; 0x31
     106:	3e 4c       	sbci	r19, 0xCE	; 206
     108:	80 ef       	ldi	r24, 0xF0	; 240
     10a:	ff be       	out	0x3f, r15	; 63
     10c:	01 c4       	rjmp	.+2050   	; 0x910 <__stack+0x11>
     10e:	ff 7f       	andi	r31, 0xFF	; 255
     110:	3f 00       	.word	0x003f	; ????
     112:	00 00       	nop
	...

00000116 <__ctors_end>:
     116:	11 24       	eor	r1, r1
     118:	1f be       	out	0x3f, r1	; 63
     11a:	cf ef       	ldi	r28, 0xFF	; 255
     11c:	d8 e0       	ldi	r29, 0x08	; 8
     11e:	de bf       	out	0x3e, r29	; 62
     120:	cd bf       	out	0x3d, r28	; 61

00000122 <__do_copy_data>:
     122:	14 e0       	ldi	r17, 0x04	; 4
     124:	a0 e0       	ldi	r26, 0x00	; 0
     126:	b1 e0       	ldi	r27, 0x01	; 1
     128:	e4 e9       	ldi	r30, 0x94	; 148
     12a:	fd e1       	ldi	r31, 0x1D	; 29
     12c:	02 c0       	rjmp	.+4      	; 0x132 <__do_copy_data+0x10>
     12e:	05 90       	lpm	r0, Z+
     130:	0d 92       	st	X+, r0
     132:	a0 30       	cpi	r26, 0x00	; 0
     134:	b1 07       	cpc	r27, r17
     136:	d9 f7       	brne	.-10     	; 0x12e <__do_copy_data+0xc>

00000138 <__do_clear_bss>:
     138:	25 e0       	ldi	r18, 0x05	; 5
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b4 e0       	ldi	r27, 0x04	; 4
     13e:	01 c0       	rjmp	.+2      	; 0x142 <.do_clear_bss_start>

00000140 <.do_clear_bss_loop>:
     140:	1d 92       	st	X+, r1

00000142 <.do_clear_bss_start>:
     142:	af 31       	cpi	r26, 0x1F	; 31
     144:	b2 07       	cpc	r27, r18
     146:	e1 f7       	brne	.-8      	; 0x140 <.do_clear_bss_loop>
     148:	61 d6       	rcall	.+3266   	; 0xe0c <main>
     14a:	0c 94 c8 0e 	jmp	0x1d90	; 0x1d90 <_exit>

0000014e <__bad_interrupt>:
     14e:	58 cf       	rjmp	.-336    	; 0x0 <__vectors>

00000150 <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	1f 92       	push	r1
     156:	cd b7       	in	r28, 0x3d	; 61
     158:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     15a:	9f b7       	in	r25, 0x3f	; 63
     15c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     15e:	f8 94       	cli
	return flags;
     160:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
     162:	82 30       	cpi	r24, 0x02	; 2
     164:	40 f4       	brcc	.+16     	; 0x176 <sysclk_enable_module+0x26>
		*(reg + port)  &= ~id;
     166:	e8 2f       	mov	r30, r24
     168:	f0 e0       	ldi	r31, 0x00	; 0
     16a:	ec 59       	subi	r30, 0x9C	; 156
     16c:	ff 4f       	sbci	r31, 0xFF	; 255
     16e:	60 95       	com	r22
     170:	80 81       	ld	r24, Z
     172:	68 23       	and	r22, r24
     174:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     176:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     178:	0f 90       	pop	r0
     17a:	df 91       	pop	r29
     17c:	cf 91       	pop	r28
     17e:	08 95       	ret

00000180 <usart_putchar>:
	}

	if (baud_offset != USART_BAUD_UNDEFINED) {
		usart->UBRR = baudctrl;
	}
}
     180:	fc 01       	movw	r30, r24
     182:	90 81       	ld	r25, Z
     184:	95 ff       	sbrs	r25, 5
     186:	fd cf       	rjmp	.-6      	; 0x182 <usart_putchar+0x2>
     188:	66 83       	std	Z+6, r22	; 0x06
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	08 95       	ret

0000018e <usart_getchar>:
     18e:	fc 01       	movw	r30, r24
     190:	90 81       	ld	r25, Z
     192:	99 23       	and	r25, r25
     194:	ec f7       	brge	.-6      	; 0x190 <usart_getchar+0x2>
     196:	86 81       	ldd	r24, Z+6	; 0x06
     198:	08 95       	ret

0000019a <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     19a:	4f 92       	push	r4
     19c:	5f 92       	push	r5
     19e:	6f 92       	push	r6
     1a0:	7f 92       	push	r7
     1a2:	8f 92       	push	r8
     1a4:	9f 92       	push	r9
     1a6:	af 92       	push	r10
     1a8:	bf 92       	push	r11
     1aa:	cf 92       	push	r12
     1ac:	df 92       	push	r13
     1ae:	ef 92       	push	r14
     1b0:	ff 92       	push	r15
     1b2:	0f 93       	push	r16
     1b4:	1f 93       	push	r17
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	ec 01       	movw	r28, r24
     1bc:	6a 01       	movw	r12, r20
     1be:	7b 01       	movw	r14, r22

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
     1c0:	28 01       	movw	r4, r16
     1c2:	39 01       	movw	r6, r18
     1c4:	68 94       	set
     1c6:	12 f8       	bld	r1, 2
     1c8:	76 94       	lsr	r7
     1ca:	67 94       	ror	r6
     1cc:	57 94       	ror	r5
     1ce:	47 94       	ror	r4
     1d0:	16 94       	lsr	r1
     1d2:	d1 f7       	brne	.-12     	; 0x1c8 <usart_set_baudrate+0x2e>
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;

	if (usart->UCSRnA & USART_U2X_bm) {
     1d4:	88 81       	ld	r24, Y
     1d6:	81 fd       	sbrc	r24, 1
     1d8:	0e c0       	rjmp	.+28     	; 0x1f6 <usart_set_baudrate+0x5c>
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;
     1da:	48 01       	movw	r8, r16
     1dc:	59 01       	movw	r10, r18
     1de:	07 2e       	mov	r0, r23
     1e0:	73 e1       	ldi	r23, 0x13	; 19
     1e2:	b6 94       	lsr	r11
     1e4:	a7 94       	ror	r10
     1e6:	97 94       	ror	r9
     1e8:	87 94       	ror	r8
     1ea:	7a 95       	dec	r23
     1ec:	d1 f7       	brne	.-12     	; 0x1e2 <usart_set_baudrate+0x48>
     1ee:	70 2d       	mov	r23, r0

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
     1f0:	d3 01       	movw	r26, r6
     1f2:	c2 01       	movw	r24, r4
     1f4:	15 c0       	rjmp	.+42     	; 0x220 <usart_set_baudrate+0x86>
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;

	if (usart->UCSRnA & USART_U2X_bm) {
		max_rate /= 2;
     1f6:	d9 01       	movw	r26, r18
     1f8:	c8 01       	movw	r24, r16
     1fa:	68 94       	set
     1fc:	13 f8       	bld	r1, 3
     1fe:	b6 95       	lsr	r27
     200:	a7 95       	ror	r26
     202:	97 95       	ror	r25
     204:	87 95       	ror	r24
     206:	16 94       	lsr	r1
     208:	d1 f7       	brne	.-12     	; 0x1fe <usart_set_baudrate+0x64>
		min_rate /= 2;
     20a:	48 01       	movw	r8, r16
     20c:	59 01       	movw	r10, r18
     20e:	07 2e       	mov	r0, r23
     210:	74 e1       	ldi	r23, 0x14	; 20
     212:	b6 94       	lsr	r11
     214:	a7 94       	ror	r10
     216:	97 94       	ror	r9
     218:	87 94       	ror	r8
     21a:	7a 95       	dec	r23
     21c:	d1 f7       	brne	.-12     	; 0x212 <usart_set_baudrate+0x78>
     21e:	70 2d       	mov	r23, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     220:	8c 15       	cp	r24, r12
     222:	9d 05       	cpc	r25, r13
     224:	ae 05       	cpc	r26, r14
     226:	bf 05       	cpc	r27, r15
     228:	78 f1       	brcs	.+94     	; 0x288 <usart_set_baudrate+0xee>
     22a:	c8 14       	cp	r12, r8
     22c:	d9 04       	cpc	r13, r9
     22e:	ea 04       	cpc	r14, r10
     230:	fb 04       	cpc	r15, r11
     232:	60 f1       	brcs	.+88     	; 0x28c <usart_set_baudrate+0xf2>
		return false;
	}

	/* Check if double speed is enabled. */
	if (usart->UCSRnA & USART_U2X_bm) {
     234:	88 81       	ld	r24, Y
     236:	81 ff       	sbrs	r24, 1
     238:	10 c0       	rjmp	.+32     	; 0x25a <usart_set_baudrate+0xc0>
		baud *= 2;
		ubrr = (uint32_t)(cpu_hz / 8 / baud) - 1;
     23a:	a7 01       	movw	r20, r14
     23c:	96 01       	movw	r18, r12
     23e:	22 0f       	add	r18, r18
     240:	33 1f       	adc	r19, r19
     242:	44 1f       	adc	r20, r20
     244:	55 1f       	adc	r21, r21
     246:	c3 01       	movw	r24, r6
     248:	b2 01       	movw	r22, r4
     24a:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__udivmodsi4>
     24e:	da 01       	movw	r26, r20
     250:	c9 01       	movw	r24, r18
     252:	01 97       	sbiw	r24, 0x01	; 1
     254:	a1 09       	sbc	r26, r1
     256:	b1 09       	sbc	r27, r1
     258:	13 c0       	rjmp	.+38     	; 0x280 <usart_set_baudrate+0xe6>
	} else {
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
     25a:	c9 01       	movw	r24, r18
     25c:	b8 01       	movw	r22, r16
     25e:	68 94       	set
     260:	13 f8       	bld	r1, 3
     262:	96 95       	lsr	r25
     264:	87 95       	ror	r24
     266:	77 95       	ror	r23
     268:	67 95       	ror	r22
     26a:	16 94       	lsr	r1
     26c:	d1 f7       	brne	.-12     	; 0x262 <usart_set_baudrate+0xc8>
     26e:	a7 01       	movw	r20, r14
     270:	96 01       	movw	r18, r12
     272:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__udivmodsi4>
     276:	da 01       	movw	r26, r20
     278:	c9 01       	movw	r24, r18
     27a:	01 97       	sbiw	r24, 0x01	; 1
     27c:	a1 09       	sbc	r26, r1
     27e:	b1 09       	sbc	r27, r1
	}

	usart->UBRR = ubrr;
     280:	9d 83       	std	Y+5, r25	; 0x05
     282:	8c 83       	std	Y+4, r24	; 0x04
	return true;
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	03 c0       	rjmp	.+6      	; 0x28e <usart_set_baudrate+0xf4>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	01 c0       	rjmp	.+2      	; 0x28e <usart_set_baudrate+0xf4>
     28c:	80 e0       	ldi	r24, 0x00	; 0
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
	}

	usart->UBRR = ubrr;
	return true;
}
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	1f 91       	pop	r17
     294:	0f 91       	pop	r16
     296:	ff 90       	pop	r15
     298:	ef 90       	pop	r14
     29a:	df 90       	pop	r13
     29c:	cf 90       	pop	r12
     29e:	bf 90       	pop	r11
     2a0:	af 90       	pop	r10
     2a2:	9f 90       	pop	r9
     2a4:	8f 90       	pop	r8
     2a6:	7f 90       	pop	r7
     2a8:	6f 90       	pop	r6
     2aa:	5f 90       	pop	r5
     2ac:	4f 90       	pop	r4
     2ae:	08 95       	ret

000002b0 <usart_init_rs232>:
 *
 * \retval true if the initialization was successful
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     2b0:	0f 93       	push	r16
     2b2:	1f 93       	push	r17
     2b4:	cf 93       	push	r28
     2b6:	df 93       	push	r29
     2b8:	ec 01       	movw	r28, r24
     2ba:	8b 01       	movw	r16, r22
 * \brief usart Pointer to an USART module.
 */
static inline void usart_enable_module_clock(USART_t *usart)
{
#ifdef USART0
	if ((uintptr_t)usart == (uintptr_t)&UCSR0A) {
     2bc:	80 3c       	cpi	r24, 0xC0	; 192
     2be:	91 05       	cpc	r25, r1
     2c0:	19 f4       	brne	.+6      	; 0x2c8 <usart_init_rs232+0x18>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
     2c2:	62 e0       	ldi	r22, 0x02	; 2
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	44 df       	rcall	.-376    	; 0x150 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_UMSEL01_gm)) | usartmode;
     2c8:	8a 81       	ldd	r24, Y+2	; 0x02
     2ca:	8f 73       	andi	r24, 0x3F	; 63
     2cc:	8a 83       	std	Y+2, r24	; 0x02
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
	bool result;
	usart_enable_module_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
     2ce:	f8 01       	movw	r30, r16
     2d0:	26 81       	ldd	r18, Z+6	; 0x06
     2d2:	35 81       	ldd	r19, Z+5	; 0x05
     2d4:	84 81       	ldd	r24, Z+4	; 0x04
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->UCSRnC
		= ((usart)->UCSRnC &
     2d6:	9a 81       	ldd	r25, Y+2	; 0x02
     2d8:	48 2f       	mov	r20, r24
     2da:	43 70       	andi	r20, 0x03	; 3
     2dc:	44 0f       	add	r20, r20
     2de:	99 7f       	andi	r25, 0xF9	; 249
     2e0:	94 2b       	or	r25, r20
     2e2:	9a 83       	std	Y+2, r25	; 0x02
			(~USART_CHSIZE01C_gm)) | ((charSize & 0x03)
			<< USART_CHSIZE01C_gp);
	(usart)->UCSRnB
		= ((usart)->UCSRnB &
     2e4:	99 81       	ldd	r25, Y+1	; 0x01
     2e6:	84 70       	andi	r24, 0x04	; 4
     2e8:	88 0f       	add	r24, r24
     2ea:	88 0f       	add	r24, r24
     2ec:	9b 7f       	andi	r25, 0xFB	; 251
     2ee:	89 2b       	or	r24, r25
     2f0:	89 83       	std	Y+1, r24	; 0x01
			(~USART_CHSIZE2_bm)) | ((charSize & 0x04)
			<< USART_CHSIZE2_bp);

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_PMODE_gm)) | parityMode;
     2f2:	8a 81       	ldd	r24, Y+2	; 0x02
     2f4:	8f 7c       	andi	r24, 0xCF	; 207
     2f6:	83 2b       	or	r24, r19
     2f8:	8a 83       	std	Y+2, r24	; 0x02

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_STOPB_bm)) | (twoStopBits
     2fa:	9a 81       	ldd	r25, Y+2	; 0x02
     2fc:	97 7f       	andi	r25, 0xF7	; 247
     2fe:	82 2f       	mov	r24, r18
     300:	88 0f       	add	r24, r24
     302:	88 0f       	add	r24, r24
     304:	88 0f       	add	r24, r24
     306:	89 2b       	or	r24, r25
     308:	8a 83       	std	Y+2, r24	; 0x02
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate,
     30a:	40 81       	ld	r20, Z
     30c:	51 81       	ldd	r21, Z+1	; 0x01
     30e:	62 81       	ldd	r22, Z+2	; 0x02
     310:	73 81       	ldd	r23, Z+3	; 0x03
     312:	00 e4       	ldi	r16, 0x40	; 64
     314:	12 e4       	ldi	r17, 0x42	; 66
     316:	2f e0       	ldi	r18, 0x0F	; 15
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	ce 01       	movw	r24, r28
     31c:	3e df       	rcall	.-388    	; 0x19a <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_TXEN_bm;
     31e:	99 81       	ldd	r25, Y+1	; 0x01
     320:	98 60       	ori	r25, 0x08	; 8
     322:	99 83       	std	Y+1, r25	; 0x01
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_RXEN_bm;
     324:	99 81       	ldd	r25, Y+1	; 0x01
     326:	90 61       	ori	r25, 0x10	; 16
     328:	99 83       	std	Y+1, r25	; 0x01
			sysclk_get_source_clock_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	return result;
}
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	1f 91       	pop	r17
     330:	0f 91       	pop	r16
     332:	08 95       	ret

00000334 <loadcell_min_max_tran>:
 *  Author: jan.rune.herheim
 */ 

#include "loadcell_logger.h"

uint8_t loadcell_min_max_tran(uint16_t current_value, uint16_t *data_array) {
     334:	fb 01       	movw	r30, r22
	
	//find tran
	signed int tran = 0; //could go positive and negative, and could store a 15 bits number, hence enough for our 12 bits results.
	uint16_t tran_abs = 0;
	
	tran = current_value - *(data_array + POSITION_PREV); //tran = current - previous
     336:	22 81       	ldd	r18, Z+2	; 0x02
     338:	33 81       	ldd	r19, Z+3	; 0x03
     33a:	ac 01       	movw	r20, r24
     33c:	42 1b       	sub	r20, r18
     33e:	53 0b       	sbc	r21, r19
     340:	9a 01       	movw	r18, r20
	if ((abs(tran) > abs(*(data_array+POSITION_TRAN_MAX))) & (*(data_array+POSITION_ACCU_CNT) > 0)) //first step is not valid due to only one value.
     342:	22 f4       	brpl	.+8      	; 0x34c <loadcell_min_max_tran+0x18>
     344:	44 27       	eor	r20, r20
     346:	55 27       	eor	r21, r21
     348:	42 1b       	sub	r20, r18
     34a:	53 0b       	sbc	r21, r19
     34c:	62 85       	ldd	r22, Z+10	; 0x0a
     34e:	73 85       	ldd	r23, Z+11	; 0x0b
     350:	77 23       	and	r23, r23
     352:	1c f4       	brge	.+6      	; 0x35a <loadcell_min_max_tran+0x26>
     354:	71 95       	neg	r23
     356:	61 95       	neg	r22
     358:	71 09       	sbc	r23, r1
     35a:	a1 e0       	ldi	r26, 0x01	; 1
     35c:	64 17       	cp	r22, r20
     35e:	75 07       	cpc	r23, r21
     360:	0c f0       	brlt	.+2      	; 0x364 <loadcell_min_max_tran+0x30>
     362:	a0 e0       	ldi	r26, 0x00	; 0
     364:	aa 23       	and	r26, r26
     366:	a1 f0       	breq	.+40     	; 0x390 <loadcell_min_max_tran+0x5c>
     368:	61 e0       	ldi	r22, 0x01	; 1
     36a:	a2 89       	ldd	r26, Z+18	; 0x12
     36c:	b3 89       	ldd	r27, Z+19	; 0x13
     36e:	ab 2b       	or	r26, r27
     370:	09 f4       	brne	.+2      	; 0x374 <loadcell_min_max_tran+0x40>
     372:	60 e0       	ldi	r22, 0x00	; 0
     374:	66 23       	and	r22, r22
     376:	61 f0       	breq	.+24     	; 0x390 <loadcell_min_max_tran+0x5c>
	{
		if (tran < 0)
     378:	33 23       	and	r19, r19
     37a:	44 f4       	brge	.+16     	; 0x38c <loadcell_min_max_tran+0x58>
		{
			tran_abs = abs(tran); //check if >2047, if yes this is the max limit that could be transferred.
     37c:	9a 01       	movw	r18, r20
			if (tran_abs >= 0x7ff) //if yes the set to max value
     37e:	2f 3f       	cpi	r18, 0xFF	; 255
     380:	57 e0       	ldi	r21, 0x07	; 7
     382:	35 07       	cpc	r19, r21
     384:	10 f0       	brcs	.+4      	; 0x38a <loadcell_min_max_tran+0x56>
			{
				tran_abs = 0x7ff;
     386:	2f ef       	ldi	r18, 0xFF	; 255
     388:	37 e0       	ldi	r19, 0x07	; 7
			}
			tran_abs |= (1<<11); //flip the MSB of the 12 bits word to set the negative sign.
			tran = tran_abs;
     38a:	38 60       	ori	r19, 0x08	; 8
		}
		
		*(data_array+POSITION_TRAN_MAX) = tran; //store new tran max.
     38c:	33 87       	std	Z+11, r19	; 0x0b
     38e:	22 87       	std	Z+10, r18	; 0x0a
	}
	
	//find min and max
	if (current_value < *(data_array+POSITION_MIN))
     390:	26 81       	ldd	r18, Z+6	; 0x06
     392:	37 81       	ldd	r19, Z+7	; 0x07
     394:	82 17       	cp	r24, r18
     396:	93 07       	cpc	r25, r19
     398:	10 f4       	brcc	.+4      	; 0x39e <loadcell_min_max_tran+0x6a>
	{
		*(data_array+POSITION_MIN) = current_value; //store new min value.
     39a:	97 83       	std	Z+7, r25	; 0x07
     39c:	86 83       	std	Z+6, r24	; 0x06
	}
	if (current_value > *(data_array+POSITION_MAX))
     39e:	20 85       	ldd	r18, Z+8	; 0x08
     3a0:	31 85       	ldd	r19, Z+9	; 0x09
     3a2:	28 17       	cp	r18, r24
     3a4:	39 07       	cpc	r19, r25
     3a6:	10 f4       	brcc	.+4      	; 0x3ac <loadcell_min_max_tran+0x78>
	{
		*(data_array+POSITION_MAX) = current_value; //Store new max.
     3a8:	91 87       	std	Z+9, r25	; 0x09
     3aa:	80 87       	std	Z+8, r24	; 0x08
	}
}
     3ac:	08 95       	ret

000003ae <__portable_avr_delay_cycles>:
	wdt_reset();
	//rtc_init_period(2); //using RTC as sampler timer.
	//wdt_enable(9);
	rtc_init_period(1);
	//sleep_enable();
}
     3ae:	04 c0       	rjmp	.+8      	; 0x3b8 <__portable_avr_delay_cycles+0xa>
     3b0:	61 50       	subi	r22, 0x01	; 1
     3b2:	71 09       	sbc	r23, r1
     3b4:	81 09       	sbc	r24, r1
     3b6:	91 09       	sbc	r25, r1
     3b8:	61 15       	cp	r22, r1
     3ba:	71 05       	cpc	r23, r1
     3bc:	81 05       	cpc	r24, r1
     3be:	91 05       	cpc	r25, r1
     3c0:	b9 f7       	brne	.-18     	; 0x3b0 <__portable_avr_delay_cycles+0x2>
     3c2:	08 95       	ret

000003c4 <usart_tx_at>:
     3c4:	0f 93       	push	r16
     3c6:	1f 93       	push	r17
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	eb 01       	movw	r28, r22
     3ce:	68 81       	ld	r22, Y
     3d0:	66 23       	and	r22, r22
     3d2:	39 f0       	breq	.+14     	; 0x3e2 <usart_tx_at+0x1e>
     3d4:	8c 01       	movw	r16, r24
     3d6:	21 96       	adiw	r28, 0x01	; 1
     3d8:	c8 01       	movw	r24, r16
     3da:	d2 de       	rcall	.-604    	; 0x180 <usart_putchar>
     3dc:	69 91       	ld	r22, Y+
     3de:	61 11       	cpse	r22, r1
     3e0:	fb cf       	rjmp	.-10     	; 0x3d8 <usart_tx_at+0x14>
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	1f 91       	pop	r17
     3e8:	0f 91       	pop	r16
     3ea:	08 95       	ret

000003ec <reset_tx_data>:
     3ec:	44 23       	and	r20, r20
     3ee:	61 f0       	breq	.+24     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3f0:	a6 2f       	mov	r26, r22
     3f2:	b7 2f       	mov	r27, r23
     3f4:	e8 2f       	mov	r30, r24
     3f6:	f9 2f       	mov	r31, r25
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	2d 91       	ld	r18, X+
     3fc:	3d 91       	ld	r19, X+
     3fe:	21 93       	st	Z+, r18
     400:	31 93       	st	Z+, r19
     402:	8f 5f       	subi	r24, 0xFF	; 255
     404:	48 13       	cpse	r20, r24
     406:	f9 cf       	rjmp	.-14     	; 0x3fa <reset_tx_data+0xe>
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	08 95       	ret

0000040c <reset_char_array>:
     40c:	66 23       	and	r22, r22
     40e:	59 f0       	breq	.+22     	; 0x426 <reset_char_array+0x1a>
     410:	fc 01       	movw	r30, r24
     412:	61 50       	subi	r22, 0x01	; 1
     414:	70 e0       	ldi	r23, 0x00	; 0
     416:	6f 5f       	subi	r22, 0xFF	; 255
     418:	7f 4f       	sbci	r23, 0xFF	; 255
     41a:	86 0f       	add	r24, r22
     41c:	97 1f       	adc	r25, r23
     41e:	11 92       	st	Z+, r1
     420:	e8 17       	cp	r30, r24
     422:	f9 07       	cpc	r31, r25
     424:	e1 f7       	brne	.-8      	; 0x41e <reset_char_array+0x12>
     426:	08 95       	ret

00000428 <reset_all_data>:
     428:	41 e1       	ldi	r20, 0x11	; 17
     42a:	6c e0       	ldi	r22, 0x0C	; 12
     42c:	73 e0       	ldi	r23, 0x03	; 3
     42e:	8d ef       	ldi	r24, 0xFD	; 253
     430:	94 e0       	ldi	r25, 0x04	; 4
     432:	dc df       	rcall	.-72     	; 0x3ec <reset_tx_data>
     434:	64 e6       	ldi	r22, 0x64	; 100
     436:	88 ef       	ldi	r24, 0xF8	; 248
     438:	94 e0       	ldi	r25, 0x04	; 4
     43a:	e8 df       	rcall	.-48     	; 0x40c <reset_char_array>
     43c:	64 e6       	ldi	r22, 0x64	; 100
     43e:	82 e0       	ldi	r24, 0x02	; 2
     440:	94 e0       	ldi	r25, 0x04	; 4
     442:	e4 cf       	rjmp	.-56     	; 0x40c <reset_char_array>
     444:	08 95       	ret

00000446 <rtc_init_period>:
     446:	14 be       	out	0x34, r1	; 52
     448:	e0 e6       	ldi	r30, 0x60	; 96
     44a:	f0 e0       	ldi	r31, 0x00	; 0
     44c:	88 e1       	ldi	r24, 0x18	; 24
     44e:	80 83       	st	Z, r24
     450:	86 e4       	ldi	r24, 0x46	; 70
     452:	80 83       	st	Z, r24
     454:	08 95       	ret

00000456 <loadcell_pins_init>:
     456:	56 9a       	sbi	0x0a, 6	; 10
     458:	5e 98       	cbi	0x0b, 6	; 11
     45a:	08 95       	ret

0000045c <radio_pins_init>:
     45c:	54 9a       	sbi	0x0a, 4	; 10
     45e:	55 98       	cbi	0x0a, 5	; 10
     460:	08 95       	ret

00000462 <my_delay_10ms>:
     462:	cf 93       	push	r28
     464:	88 23       	and	r24, r24
     466:	41 f0       	breq	.+16     	; 0x478 <my_delay_10ms+0x16>
     468:	c8 2f       	mov	r28, r24
     46a:	63 e8       	ldi	r22, 0x83	; 131
     46c:	76 e0       	ldi	r23, 0x06	; 6
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	9d df       	rcall	.-198    	; 0x3ae <__portable_avr_delay_cycles>
     474:	c1 50       	subi	r28, 0x01	; 1
     476:	c9 f7       	brne	.-14     	; 0x46a <my_delay_10ms+0x8>
     478:	cf 91       	pop	r28
     47a:	08 95       	ret

0000047c <loadcell_power_on>:
     47c:	5e 9a       	sbi	0x0b, 6	; 11
     47e:	63 e8       	ldi	r22, 0x83	; 131
     480:	76 e0       	ldi	r23, 0x06	; 6
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	93 cf       	rjmp	.-218    	; 0x3ae <__portable_avr_delay_cycles>
     488:	08 95       	ret

0000048a <loadcell_power_off>:
     48a:	5e 98       	cbi	0x0b, 6	; 11
     48c:	08 95       	ret

0000048e <radio_power_on>:
     48e:	1f 93       	push	r17
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	5c 98       	cbi	0x0b, 4	; 11
     496:	67 ea       	ldi	r22, 0xA7	; 167
     498:	70 e0       	ldi	r23, 0x00	; 0
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	87 df       	rcall	.-242    	; 0x3ae <__portable_avr_delay_cycles>
     4a0:	5c 9a       	sbi	0x0b, 4	; 11
     4a2:	6b e1       	ldi	r22, 0x1B	; 27
     4a4:	71 e4       	ldi	r23, 0x41	; 65
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	81 df       	rcall	.-254    	; 0x3ae <__portable_avr_delay_cycles>
     4ac:	5c 98       	cbi	0x0b, 4	; 11
     4ae:	6b e0       	ldi	r22, 0x0B	; 11
     4b0:	7b e8       	ldi	r23, 0x8B	; 139
     4b2:	82 e0       	ldi	r24, 0x02	; 2
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	7b df       	rcall	.-266    	; 0x3ae <__portable_avr_delay_cycles>
     4b8:	5c 9a       	sbi	0x0b, 4	; 11
     4ba:	4d 99       	sbic	0x09, 5	; 9
     4bc:	16 c0       	rjmp	.+44     	; 0x4ea <radio_power_on+0x5c>
     4be:	c0 e0       	ldi	r28, 0x00	; 0
     4c0:	d1 e0       	ldi	r29, 0x01	; 1
     4c2:	10 e0       	ldi	r17, 0x00	; 0
     4c4:	66 e3       	ldi	r22, 0x36	; 54
     4c6:	72 e8       	ldi	r23, 0x82	; 130
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	70 df       	rcall	.-288    	; 0x3ae <__portable_avr_delay_cycles>
     4ce:	cf 5f       	subi	r28, 0xFF	; 255
     4d0:	89 b1       	in	r24, 0x09	; 9
     4d2:	85 fb       	bst	r24, 5
     4d4:	88 27       	eor	r24, r24
     4d6:	80 f9       	bld	r24, 0
     4d8:	8d 17       	cp	r24, r29
     4da:	41 f0       	breq	.+16     	; 0x4ec <radio_power_on+0x5e>
     4dc:	8d 2f       	mov	r24, r29
     4de:	cb 31       	cpi	r28, 0x1B	; 27
     4e0:	08 f0       	brcs	.+2      	; 0x4e4 <radio_power_on+0x56>
     4e2:	81 2f       	mov	r24, r17
     4e4:	81 11       	cpse	r24, r1
     4e6:	ee cf       	rjmp	.-36     	; 0x4c4 <radio_power_on+0x36>
     4e8:	01 c0       	rjmp	.+2      	; 0x4ec <radio_power_on+0x5e>
     4ea:	c0 e0       	ldi	r28, 0x00	; 0
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	cb 31       	cpi	r28, 0x1B	; 27
     4f0:	09 f0       	breq	.+2      	; 0x4f4 <radio_power_on+0x66>
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	1f 91       	pop	r17
     4fa:	08 95       	ret

000004fc <radio_power_off_at>:
     4fc:	1f 93       	push	r17
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	4d 9b       	sbis	0x09, 5	; 9
     504:	2f c0       	rjmp	.+94     	; 0x564 <radio_power_off_at+0x68>
     506:	c0 e0       	ldi	r28, 0x00	; 0
     508:	d1 e0       	ldi	r29, 0x01	; 1
     50a:	10 e0       	ldi	r17, 0x00	; 0
     50c:	6a e3       	ldi	r22, 0x3A	; 58
     50e:	71 e0       	ldi	r23, 0x01	; 1
     510:	88 ec       	ldi	r24, 0xC8	; 200
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	57 df       	rcall	.-338    	; 0x3c4 <usart_tx_at>
     516:	6a e3       	ldi	r22, 0x3A	; 58
     518:	71 e0       	ldi	r23, 0x01	; 1
     51a:	80 ec       	ldi	r24, 0xC0	; 192
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	52 df       	rcall	.-348    	; 0x3c4 <usart_tx_at>
     520:	5c 98       	cbi	0x0b, 4	; 11
     522:	6b e2       	ldi	r22, 0x2B	; 43
     524:	7c e2       	ldi	r23, 0x2C	; 44
     526:	8a e0       	ldi	r24, 0x0A	; 10
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	41 df       	rcall	.-382    	; 0x3ae <__portable_avr_delay_cycles>
     52c:	4d 9b       	sbis	0x09, 5	; 9
     52e:	10 c0       	rjmp	.+32     	; 0x550 <radio_power_off_at+0x54>
     530:	66 e4       	ldi	r22, 0x46	; 70
     532:	71 e0       	ldi	r23, 0x01	; 1
     534:	88 ec       	ldi	r24, 0xC8	; 200
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	45 df       	rcall	.-374    	; 0x3c4 <usart_tx_at>
     53a:	66 e4       	ldi	r22, 0x46	; 70
     53c:	71 e0       	ldi	r23, 0x01	; 1
     53e:	80 ec       	ldi	r24, 0xC0	; 192
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	40 df       	rcall	.-384    	; 0x3c4 <usart_tx_at>
     544:	5c 98       	cbi	0x0b, 4	; 11
     546:	61 e4       	ldi	r22, 0x41	; 65
     548:	72 e4       	ldi	r23, 0x42	; 66
     54a:	8f e0       	ldi	r24, 0x0F	; 15
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	2f df       	rcall	.-418    	; 0x3ae <__portable_avr_delay_cycles>
     550:	cf 5f       	subi	r28, 0xFF	; 255
     552:	4d 9b       	sbis	0x09, 5	; 9
     554:	08 c0       	rjmp	.+16     	; 0x566 <radio_power_off_at+0x6a>
     556:	8d 2f       	mov	r24, r29
     558:	cb 31       	cpi	r28, 0x1B	; 27
     55a:	08 f0       	brcs	.+2      	; 0x55e <radio_power_off_at+0x62>
     55c:	81 2f       	mov	r24, r17
     55e:	81 11       	cpse	r24, r1
     560:	d5 cf       	rjmp	.-86     	; 0x50c <radio_power_off_at+0x10>
     562:	01 c0       	rjmp	.+2      	; 0x566 <radio_power_off_at+0x6a>
     564:	c0 e0       	ldi	r28, 0x00	; 0
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	cb 31       	cpi	r28, 0x1B	; 27
     56a:	09 f0       	breq	.+2      	; 0x56e <radio_power_off_at+0x72>
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	1f 91       	pop	r17
     574:	08 95       	ret

00000576 <adc_result_average>:
     576:	6f 92       	push	r6
     578:	7f 92       	push	r7
     57a:	8f 92       	push	r8
     57c:	9f 92       	push	r9
     57e:	af 92       	push	r10
     580:	bf 92       	push	r11
     582:	cf 92       	push	r12
     584:	df 92       	push	r13
     586:	ef 92       	push	r14
     588:	ff 92       	push	r15
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	cd b7       	in	r28, 0x3d	; 61
     594:	de b7       	in	r29, 0x3e	; 62
     596:	0d b7       	in	r16, 0x3d	; 61
     598:	1e b7       	in	r17, 0x3e	; 62
     59a:	46 2f       	mov	r20, r22
     59c:	50 e0       	ldi	r21, 0x00	; 0
     59e:	44 0f       	add	r20, r20
     5a0:	55 1f       	adc	r21, r21
     5a2:	2d b7       	in	r18, 0x3d	; 61
     5a4:	3e b7       	in	r19, 0x3e	; 62
     5a6:	24 1b       	sub	r18, r20
     5a8:	35 0b       	sbc	r19, r21
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	f8 94       	cli
     5ae:	3e bf       	out	0x3e, r19	; 62
     5b0:	0f be       	out	0x3f, r0	; 63
     5b2:	2d bf       	out	0x3d, r18	; 61
     5b4:	ad b7       	in	r26, 0x3d	; 61
     5b6:	be b7       	in	r27, 0x3e	; 62
     5b8:	11 96       	adiw	r26, 0x01	; 1
     5ba:	e4 e6       	ldi	r30, 0x64	; 100
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	90 81       	ld	r25, Z
     5c0:	9e 7f       	andi	r25, 0xFE	; 254
     5c2:	90 83       	st	Z, r25
     5c4:	97 e8       	ldi	r25, 0x87	; 135
     5c6:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     5ca:	66 23       	and	r22, r22
     5cc:	49 f1       	breq	.+82     	; 0x620 <adc_result_average+0xaa>
     5ce:	3d 01       	movw	r6, r26
     5d0:	81 2c       	mov	r8, r1
     5d2:	91 2c       	mov	r9, r1
     5d4:	54 01       	movw	r10, r8
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	0f 2e       	mov	r0, r31
     5da:	fc e7       	ldi	r31, 0x7C	; 124
     5dc:	cf 2e       	mov	r12, r31
     5de:	d1 2c       	mov	r13, r1
     5e0:	f0 2d       	mov	r31, r0
     5e2:	80 64       	ori	r24, 0x40	; 64
     5e4:	ea e7       	ldi	r30, 0x7A	; 122
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	0f 2e       	mov	r0, r31
     5ea:	f8 e7       	ldi	r31, 0x78	; 120
     5ec:	ef 2e       	mov	r14, r31
     5ee:	f1 2c       	mov	r15, r1
     5f0:	f0 2d       	mov	r31, r0
     5f2:	d6 01       	movw	r26, r12
     5f4:	8c 93       	st	X, r24
     5f6:	90 81       	ld	r25, Z
     5f8:	90 64       	ori	r25, 0x40	; 64
     5fa:	90 83       	st	Z, r25
     5fc:	90 81       	ld	r25, Z
     5fe:	96 fd       	sbrc	r25, 6
     600:	fd cf       	rjmp	.-6      	; 0x5fc <adc_result_average+0x86>
     602:	d7 01       	movw	r26, r14
     604:	4d 91       	ld	r20, X+
     606:	5c 91       	ld	r21, X
     608:	d3 01       	movw	r26, r6
     60a:	4d 93       	st	X+, r20
     60c:	5d 93       	st	X+, r21
     60e:	3d 01       	movw	r6, r26
     610:	84 0e       	add	r8, r20
     612:	95 1e       	adc	r9, r21
     614:	a1 1c       	adc	r10, r1
     616:	b1 1c       	adc	r11, r1
     618:	3f 5f       	subi	r19, 0xFF	; 255
     61a:	63 13       	cpse	r22, r19
     61c:	ea cf       	rjmp	.-44     	; 0x5f2 <adc_result_average+0x7c>
     61e:	03 c0       	rjmp	.+6      	; 0x626 <adc_result_average+0xb0>
     620:	81 2c       	mov	r8, r1
     622:	91 2c       	mov	r9, r1
     624:	54 01       	movw	r10, r8
     626:	26 2f       	mov	r18, r22
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	40 e0       	ldi	r20, 0x00	; 0
     62c:	50 e0       	ldi	r21, 0x00	; 0
     62e:	c5 01       	movw	r24, r10
     630:	b4 01       	movw	r22, r8
     632:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__udivmodsi4>
     636:	c9 01       	movw	r24, r18
     638:	0f b6       	in	r0, 0x3f	; 63
     63a:	f8 94       	cli
     63c:	1e bf       	out	0x3e, r17	; 62
     63e:	0f be       	out	0x3f, r0	; 63
     640:	0d bf       	out	0x3d, r16	; 61
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	1f 91       	pop	r17
     648:	0f 91       	pop	r16
     64a:	ff 90       	pop	r15
     64c:	ef 90       	pop	r14
     64e:	df 90       	pop	r13
     650:	cf 90       	pop	r12
     652:	bf 90       	pop	r11
     654:	af 90       	pop	r10
     656:	9f 90       	pop	r9
     658:	8f 90       	pop	r8
     65a:	7f 90       	pop	r7
     65c:	6f 90       	pop	r6
     65e:	08 95       	ret

00000660 <at_get_radio_network_time>:
     660:	ef 92       	push	r14
     662:	ff 92       	push	r15
     664:	0f 93       	push	r16
     666:	1f 93       	push	r17
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	00 d0       	rcall	.+0      	; 0x66e <at_get_radio_network_time+0xe>
     66e:	1f 92       	push	r1
     670:	cd b7       	in	r28, 0x3d	; 61
     672:	de b7       	in	r29, 0x3e	; 62
     674:	1a 82       	std	Y+2, r1	; 0x02
     676:	19 82       	std	Y+1, r1	; 0x01
     678:	1b 82       	std	Y+3, r1	; 0x03
     67a:	0f 2e       	mov	r0, r31
     67c:	fb e8       	ldi	r31, 0x8B	; 139
     67e:	ef 2e       	mov	r14, r31
     680:	f4 e0       	ldi	r31, 0x04	; 4
     682:	ff 2e       	mov	r15, r31
     684:	f0 2d       	mov	r31, r0
     686:	0a e0       	ldi	r16, 0x0A	; 10
     688:	10 e0       	ldi	r17, 0x00	; 0
     68a:	f7 01       	movw	r30, r14
     68c:	31 97       	sbiw	r30, 0x01	; 1
     68e:	80 81       	ld	r24, Z
     690:	89 83       	std	Y+1, r24	; 0x01
     692:	f7 01       	movw	r30, r14
     694:	80 81       	ld	r24, Z
     696:	8a 83       	std	Y+2, r24	; 0x02
     698:	ce 01       	movw	r24, r28
     69a:	01 96       	adiw	r24, 0x01	; 1
     69c:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <atoi>
     6a0:	f8 01       	movw	r30, r16
     6a2:	ee 0f       	add	r30, r30
     6a4:	ff 1f       	adc	r31, r31
     6a6:	e3 50       	subi	r30, 0x03	; 3
     6a8:	fb 4f       	sbci	r31, 0xFB	; 251
     6aa:	91 83       	std	Z+1, r25	; 0x01
     6ac:	80 83       	st	Z, r24
     6ae:	f3 e0       	ldi	r31, 0x03	; 3
     6b0:	ef 0e       	add	r14, r31
     6b2:	f1 1c       	adc	r15, r1
     6b4:	0f 5f       	subi	r16, 0xFF	; 255
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	00 31       	cpi	r16, 0x10	; 16
     6ba:	11 05       	cpc	r17, r1
     6bc:	31 f7       	brne	.-52     	; 0x68a <at_get_radio_network_time+0x2a>
     6be:	0f 90       	pop	r0
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	1f 91       	pop	r17
     6ca:	0f 91       	pop	r16
     6cc:	ff 90       	pop	r15
     6ce:	ef 90       	pop	r14
     6d0:	08 95       	ret

000006d2 <tx_at_response>:
     6d2:	0f 93       	push	r16
     6d4:	1f 93       	push	r17
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	ec 01       	movw	r28, r24
     6dc:	88 85       	ldd	r24, Y+8	; 0x08
     6de:	88 23       	and	r24, r24
     6e0:	09 f4       	brne	.+2      	; 0x6e4 <tx_at_response+0x12>
     6e2:	63 c0       	rjmp	.+198    	; 0x7aa <tx_at_response+0xd8>
     6e4:	10 e0       	ldi	r17, 0x00	; 0
     6e6:	00 e0       	ldi	r16, 0x00	; 0
     6e8:	60 e8       	ldi	r22, 0x80	; 128
     6ea:	88 e7       	ldi	r24, 0x78	; 120
     6ec:	94 e0       	ldi	r25, 0x04	; 4
     6ee:	8e de       	rcall	.-740    	; 0x40c <reset_char_array>
     6f0:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <response_counter>
     6f4:	8c 81       	ldd	r24, Y+4	; 0x04
     6f6:	9d 81       	ldd	r25, Y+5	; 0x05
     6f8:	ae 81       	ldd	r26, Y+6	; 0x06
     6fa:	bf 81       	ldd	r27, Y+7	; 0x07
     6fc:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <response_timeout>
     700:	90 93 70 04 	sts	0x0470, r25	; 0x800470 <response_timeout+0x1>
     704:	a0 93 71 04 	sts	0x0471, r26	; 0x800471 <response_timeout+0x2>
     708:	b0 93 72 04 	sts	0x0472, r27	; 0x800472 <response_timeout+0x3>
     70c:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <response_timeout_counter>
     710:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <response_timeout_counter+0x1>
     714:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <response_timeout_counter+0x2>
     718:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <response_timeout_counter+0x3>
     71c:	68 81       	ld	r22, Y
     71e:	79 81       	ldd	r23, Y+1	; 0x01
     720:	80 ec       	ldi	r24, 0xC0	; 192
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	4f de       	rcall	.-866    	; 0x3c4 <usart_tx_at>
     726:	78 94       	sei
     728:	e0 ec       	ldi	r30, 0xC0	; 192
     72a:	f0 e0       	ldi	r31, 0x00	; 0
     72c:	81 81       	ldd	r24, Z+1	; 0x01
     72e:	80 68       	ori	r24, 0x80	; 128
     730:	81 83       	std	Z+1, r24	; 0x01
     732:	1e c0       	rjmp	.+60     	; 0x770 <tx_at_response+0x9e>
     734:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <response_timeout_counter>
     738:	90 91 6c 04 	lds	r25, 0x046C	; 0x80046c <response_timeout_counter+0x1>
     73c:	a0 91 6d 04 	lds	r26, 0x046D	; 0x80046d <response_timeout_counter+0x2>
     740:	b0 91 6e 04 	lds	r27, 0x046E	; 0x80046e <response_timeout_counter+0x3>
     744:	01 96       	adiw	r24, 0x01	; 1
     746:	a1 1d       	adc	r26, r1
     748:	b1 1d       	adc	r27, r1
     74a:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <response_timeout_counter>
     74e:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <response_timeout_counter+0x1>
     752:	a0 93 6d 04 	sts	0x046D, r26	; 0x80046d <response_timeout_counter+0x2>
     756:	b0 93 6e 04 	sts	0x046E, r27	; 0x80046e <response_timeout_counter+0x3>
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	82 de       	rcall	.-764    	; 0x462 <my_delay_10ms>
     75e:	6a 81       	ldd	r22, Y+2	; 0x02
     760:	7b 81       	ldd	r23, Y+3	; 0x03
     762:	88 e7       	ldi	r24, 0x78	; 120
     764:	94 e0       	ldi	r25, 0x04	; 4
     766:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <strstr>
     76a:	01 e0       	ldi	r16, 0x01	; 1
     76c:	89 2b       	or	r24, r25
     76e:	f9 f4       	brne	.+62     	; 0x7ae <tx_at_response+0xdc>
     770:	40 91 6b 04 	lds	r20, 0x046B	; 0x80046b <response_timeout_counter>
     774:	50 91 6c 04 	lds	r21, 0x046C	; 0x80046c <response_timeout_counter+0x1>
     778:	60 91 6d 04 	lds	r22, 0x046D	; 0x80046d <response_timeout_counter+0x2>
     77c:	70 91 6e 04 	lds	r23, 0x046E	; 0x80046e <response_timeout_counter+0x3>
     780:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <response_timeout>
     784:	90 91 70 04 	lds	r25, 0x0470	; 0x800470 <response_timeout+0x1>
     788:	a0 91 71 04 	lds	r26, 0x0471	; 0x800471 <response_timeout+0x2>
     78c:	b0 91 72 04 	lds	r27, 0x0472	; 0x800472 <response_timeout+0x3>
     790:	48 17       	cp	r20, r24
     792:	59 07       	cpc	r21, r25
     794:	6a 07       	cpc	r22, r26
     796:	7b 07       	cpc	r23, r27
     798:	68 f2       	brcs	.-102    	; 0x734 <tx_at_response+0x62>
     79a:	8e e1       	ldi	r24, 0x1E	; 30
     79c:	62 de       	rcall	.-828    	; 0x462 <my_delay_10ms>
     79e:	1f 5f       	subi	r17, 0xFF	; 255
     7a0:	88 85       	ldd	r24, Y+8	; 0x08
     7a2:	18 17       	cp	r17, r24
     7a4:	08 f4       	brcc	.+2      	; 0x7a8 <tx_at_response+0xd6>
     7a6:	a0 cf       	rjmp	.-192    	; 0x6e8 <tx_at_response+0x16>
     7a8:	03 c0       	rjmp	.+6      	; 0x7b0 <tx_at_response+0xde>
     7aa:	00 e0       	ldi	r16, 0x00	; 0
     7ac:	01 c0       	rjmp	.+2      	; 0x7b0 <tx_at_response+0xde>
     7ae:	00 e0       	ldi	r16, 0x00	; 0
     7b0:	e0 ec       	ldi	r30, 0xC0	; 192
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	81 81       	ldd	r24, Z+1	; 0x01
     7b6:	8f 77       	andi	r24, 0x7F	; 127
     7b8:	81 83       	std	Z+1, r24	; 0x01
     7ba:	68 e7       	ldi	r22, 0x78	; 120
     7bc:	74 e0       	ldi	r23, 0x04	; 4
     7be:	88 ec       	ldi	r24, 0xC8	; 200
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	00 de       	rcall	.-1024   	; 0x3c4 <usart_tx_at>
     7c4:	80 2f       	mov	r24, r16
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	08 95       	ret

000007d0 <data_to_char>:
     7d0:	2f 92       	push	r2
     7d2:	3f 92       	push	r3
     7d4:	4f 92       	push	r4
     7d6:	5f 92       	push	r5
     7d8:	6f 92       	push	r6
     7da:	7f 92       	push	r7
     7dc:	8f 92       	push	r8
     7de:	9f 92       	push	r9
     7e0:	af 92       	push	r10
     7e2:	bf 92       	push	r11
     7e4:	cf 92       	push	r12
     7e6:	df 92       	push	r13
     7e8:	ef 92       	push	r14
     7ea:	ff 92       	push	r15
     7ec:	0f 93       	push	r16
     7ee:	1f 93       	push	r17
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	cd b7       	in	r28, 0x3d	; 61
     7f6:	de b7       	in	r29, 0x3e	; 62
     7f8:	63 97       	sbiw	r28, 0x13	; 19
     7fa:	0f b6       	in	r0, 0x3f	; 63
     7fc:	f8 94       	cli
     7fe:	de bf       	out	0x3e, r29	; 62
     800:	0f be       	out	0x3f, r0	; 63
     802:	cd bf       	out	0x3d, r28	; 61
     804:	9f 87       	std	Y+15, r25	; 0x0f
     806:	8e 87       	std	Y+14, r24	; 0x0e
     808:	3f 83       	std	Y+7, r19	; 0x07
     80a:	2e 83       	std	Y+6, r18	; 0x06
     80c:	1a 82       	std	Y+2, r1	; 0x02
     80e:	19 82       	std	Y+1, r1	; 0x01
     810:	fe 01       	movw	r30, r28
     812:	33 96       	adiw	r30, 0x03	; 3
     814:	83 e0       	ldi	r24, 0x03	; 3
     816:	df 01       	movw	r26, r30
     818:	1d 92       	st	X+, r1
     81a:	8a 95       	dec	r24
     81c:	e9 f7       	brne	.-6      	; 0x818 <data_to_char+0x48>
     81e:	e6 2e       	mov	r14, r22
     820:	f1 2c       	mov	r15, r1
     822:	f7 01       	movw	r30, r14
     824:	31 97       	sbiw	r30, 0x01	; 1
     826:	fb 8b       	std	Y+19, r31	; 0x13
     828:	ea 8b       	std	Y+18, r30	; 0x12
     82a:	e9 70       	andi	r30, 0x09	; 9
     82c:	ff 27       	eor	r31, r31
     82e:	f9 8b       	std	Y+17, r31	; 0x11
     830:	e8 8b       	std	Y+16, r30	; 0x10
     832:	10 e0       	ldi	r17, 0x00	; 0
     834:	0f 2e       	mov	r0, r31
     836:	f0 e3       	ldi	r31, 0x30	; 48
     838:	cf 2e       	mov	r12, r31
     83a:	d1 2c       	mov	r13, r1
     83c:	f0 2d       	mov	r31, r0
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	9f 81       	ldd	r25, Y+7	; 0x07
     842:	09 2e       	mov	r0, r25
     844:	00 0c       	add	r0, r0
     846:	aa 0b       	sbc	r26, r26
     848:	bb 0b       	sbc	r27, r27
     84a:	88 87       	std	Y+8, r24	; 0x08
     84c:	99 87       	std	Y+9, r25	; 0x09
     84e:	aa 87       	std	Y+10, r26	; 0x0a
     850:	bb 87       	std	Y+11, r27	; 0x0b
     852:	5d 87       	std	Y+13, r21	; 0x0d
     854:	4c 87       	std	Y+12, r20	; 0x0c
     856:	31 2e       	mov	r3, r17
     858:	47 c0       	rjmp	.+142    	; 0x8e8 <data_to_char+0x118>
     85a:	68 85       	ldd	r22, Y+8	; 0x08
     85c:	79 85       	ldd	r23, Y+9	; 0x09
     85e:	8a 85       	ldd	r24, Y+10	; 0x0a
     860:	9b 85       	ldd	r25, Y+11	; 0x0b
     862:	95 d6       	rcall	.+3370   	; 0x158e <__floatsisf>
     864:	2b 01       	movw	r4, r22
     866:	3c 01       	movw	r6, r24
     868:	b8 01       	movw	r22, r16
     86a:	01 2e       	mov	r0, r17
     86c:	00 0c       	add	r0, r0
     86e:	88 0b       	sbc	r24, r24
     870:	99 0b       	sbc	r25, r25
     872:	8d d6       	rcall	.+3354   	; 0x158e <__floatsisf>
     874:	9b 01       	movw	r18, r22
     876:	ac 01       	movw	r20, r24
     878:	c3 01       	movw	r24, r6
     87a:	b2 01       	movw	r22, r4
     87c:	eb d6       	rcall	.+3542   	; 0x1654 <pow>
     87e:	4b 01       	movw	r8, r22
     880:	5c 01       	movw	r10, r24
     882:	d7 01       	movw	r26, r14
     884:	6d 91       	ld	r22, X+
     886:	7c 91       	ld	r23, X
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	7e d6       	rcall	.+3324   	; 0x158a <__floatunsisf>
     88e:	a5 01       	movw	r20, r10
     890:	94 01       	movw	r18, r8
     892:	77 d6       	rcall	.+3310   	; 0x1582 <__cmpsf2>
     894:	88 23       	and	r24, r24
     896:	44 f4       	brge	.+16     	; 0x8a8 <data_to_char+0xd8>
     898:	ec 85       	ldd	r30, Y+12	; 0x0c
     89a:	fd 85       	ldd	r31, Y+13	; 0x0d
     89c:	01 90       	ld	r0, Z+
     89e:	00 20       	and	r0, r0
     8a0:	e9 f7       	brne	.-6      	; 0x89c <data_to_char+0xcc>
     8a2:	31 97       	sbiw	r30, 0x01	; 1
     8a4:	d1 82       	std	Z+1, r13	; 0x01
     8a6:	c0 82       	st	Z, r12
     8a8:	01 50       	subi	r16, 0x01	; 1
     8aa:	11 09       	sbc	r17, r1
     8ac:	b1 f6       	brne	.-84     	; 0x85a <data_to_char+0x8a>
     8ae:	4e 81       	ldd	r20, Y+6	; 0x06
     8b0:	5f 81       	ldd	r21, Y+7	; 0x07
     8b2:	be 01       	movw	r22, r28
     8b4:	6f 5f       	subi	r22, 0xFF	; 255
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	f7 01       	movw	r30, r14
     8ba:	80 81       	ld	r24, Z
     8bc:	91 81       	ldd	r25, Z+1	; 0x01
     8be:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <itoa>
     8c2:	be 01       	movw	r22, r28
     8c4:	6f 5f       	subi	r22, 0xFF	; 255
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	8c 85       	ldd	r24, Y+12	; 0x0c
     8ca:	9d 85       	ldd	r25, Y+13	; 0x0d
     8cc:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <strcat>
     8d0:	65 e0       	ldi	r22, 0x05	; 5
     8d2:	ce 01       	movw	r24, r28
     8d4:	01 96       	adiw	r24, 0x01	; 1
     8d6:	9a dd       	rcall	.-1228   	; 0x40c <reset_char_array>
     8d8:	33 94       	inc	r3
     8da:	83 2d       	mov	r24, r3
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	28 89       	ldd	r18, Y+16	; 0x10
     8e0:	39 89       	ldd	r19, Y+17	; 0x11
     8e2:	28 17       	cp	r18, r24
     8e4:	39 07       	cpc	r19, r25
     8e6:	5c f0       	brlt	.+22     	; 0x8fe <data_to_char+0x12e>
     8e8:	e3 2c       	mov	r14, r3
     8ea:	f1 2c       	mov	r15, r1
     8ec:	ee 0c       	add	r14, r14
     8ee:	ff 1c       	adc	r15, r15
     8f0:	8e 85       	ldd	r24, Y+14	; 0x0e
     8f2:	9f 85       	ldd	r25, Y+15	; 0x0f
     8f4:	e8 0e       	add	r14, r24
     8f6:	f9 1e       	adc	r15, r25
     8f8:	03 e0       	ldi	r16, 0x03	; 3
     8fa:	10 e0       	ldi	r17, 0x00	; 0
     8fc:	ae cf       	rjmp	.-164    	; 0x85a <data_to_char+0x8a>
     8fe:	2c 84       	ldd	r2, Y+12	; 0x0c
     900:	3d 84       	ldd	r3, Y+13	; 0x0d
     902:	ea 88       	ldd	r14, Y+18	; 0x12
     904:	fb 88       	ldd	r15, Y+19	; 0x13
     906:	90 e1       	ldi	r25, 0x10	; 16
     908:	e9 22       	and	r14, r25
     90a:	ff 24       	eor	r15, r15
     90c:	aa e0       	ldi	r26, 0x0A	; 10
     90e:	ea 16       	cp	r14, r26
     910:	f1 04       	cpc	r15, r1
     912:	54 f5       	brge	.+84     	; 0x968 <__stack+0x69>
     914:	4f c0       	rjmp	.+158    	; 0x9b4 <__stack+0xb5>
     916:	f1 01       	movw	r30, r2
     918:	01 90       	ld	r0, Z+
     91a:	00 20       	and	r0, r0
     91c:	e9 f7       	brne	.-6      	; 0x918 <__stack+0x19>
     91e:	31 97       	sbiw	r30, 0x01	; 1
     920:	b1 82       	std	Z+1, r11	; 0x01
     922:	a0 82       	st	Z, r10
     924:	4e 81       	ldd	r20, Y+6	; 0x06
     926:	5f 81       	ldd	r21, Y+7	; 0x07
     928:	be 01       	movw	r22, r28
     92a:	6f 5f       	subi	r22, 0xFF	; 255
     92c:	7f 4f       	sbci	r23, 0xFF	; 255
     92e:	f4 01       	movw	r30, r8
     930:	80 81       	ld	r24, Z
     932:	91 81       	ldd	r25, Z+1	; 0x01
     934:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <itoa>
     938:	be 01       	movw	r22, r28
     93a:	6f 5f       	subi	r22, 0xFF	; 255
     93c:	7f 4f       	sbci	r23, 0xFF	; 255
     93e:	c1 01       	movw	r24, r2
     940:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <strcat>
     944:	f1 01       	movw	r30, r2
     946:	01 90       	ld	r0, Z+
     948:	00 20       	and	r0, r0
     94a:	e9 f7       	brne	.-6      	; 0x946 <__stack+0x47>
     94c:	31 97       	sbiw	r30, 0x01	; 1
     94e:	d1 82       	std	Z+1, r13	; 0x01
     950:	c0 82       	st	Z, r12
     952:	65 e0       	ldi	r22, 0x05	; 5
     954:	ce 01       	movw	r24, r28
     956:	01 96       	adiw	r24, 0x01	; 1
     958:	59 dd       	rcall	.-1358   	; 0x40c <reset_char_array>
     95a:	1f 5f       	subi	r17, 0xFF	; 255
     95c:	81 2f       	mov	r24, r17
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	e8 16       	cp	r14, r24
     962:	f9 06       	cpc	r15, r25
     964:	84 f4       	brge	.+32     	; 0x986 <__stack+0x87>
     966:	26 c0       	rjmp	.+76     	; 0x9b4 <__stack+0xb5>
     968:	0f 2e       	mov	r0, r31
     96a:	fa e0       	ldi	r31, 0x0A	; 10
     96c:	9f 2e       	mov	r9, r31
     96e:	f0 2d       	mov	r31, r0
     970:	0f 2e       	mov	r0, r31
     972:	f0 e3       	ldi	r31, 0x30	; 48
     974:	af 2e       	mov	r10, r31
     976:	b1 2c       	mov	r11, r1
     978:	f0 2d       	mov	r31, r0
     97a:	0f 2e       	mov	r0, r31
     97c:	fc e2       	ldi	r31, 0x2C	; 44
     97e:	cf 2e       	mov	r12, r31
     980:	d1 2c       	mov	r13, r1
     982:	f0 2d       	mov	r31, r0
     984:	19 2d       	mov	r17, r9
     986:	81 2e       	mov	r8, r17
     988:	91 2c       	mov	r9, r1
     98a:	88 0c       	add	r8, r8
     98c:	99 1c       	adc	r9, r9
     98e:	2e 85       	ldd	r18, Y+14	; 0x0e
     990:	3f 85       	ldd	r19, Y+15	; 0x0f
     992:	82 0e       	add	r8, r18
     994:	93 1e       	adc	r9, r19
     996:	d4 01       	movw	r26, r8
     998:	6d 91       	ld	r22, X+
     99a:	7c 91       	ld	r23, X
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	f4 d5       	rcall	.+3048   	; 0x158a <__floatunsisf>
     9a2:	9b 01       	movw	r18, r22
     9a4:	ac 01       	movw	r20, r24
     9a6:	c3 01       	movw	r24, r6
     9a8:	b2 01       	movw	r22, r4
     9aa:	50 d6       	rcall	.+3232   	; 0x164c <__gesf2>
     9ac:	18 16       	cp	r1, r24
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__stack+0xb3>
     9b0:	b9 cf       	rjmp	.-142    	; 0x924 <__stack+0x25>
     9b2:	b1 cf       	rjmp	.-158    	; 0x916 <__stack+0x17>
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	63 96       	adiw	r28, 0x13	; 19
     9b8:	0f b6       	in	r0, 0x3f	; 63
     9ba:	f8 94       	cli
     9bc:	de bf       	out	0x3e, r29	; 62
     9be:	0f be       	out	0x3f, r0	; 63
     9c0:	cd bf       	out	0x3d, r28	; 61
     9c2:	df 91       	pop	r29
     9c4:	cf 91       	pop	r28
     9c6:	1f 91       	pop	r17
     9c8:	0f 91       	pop	r16
     9ca:	ff 90       	pop	r15
     9cc:	ef 90       	pop	r14
     9ce:	df 90       	pop	r13
     9d0:	cf 90       	pop	r12
     9d2:	bf 90       	pop	r11
     9d4:	af 90       	pop	r10
     9d6:	9f 90       	pop	r9
     9d8:	8f 90       	pop	r8
     9da:	7f 90       	pop	r7
     9dc:	6f 90       	pop	r6
     9de:	5f 90       	pop	r5
     9e0:	4f 90       	pop	r4
     9e2:	3f 90       	pop	r3
     9e4:	2f 90       	pop	r2
     9e6:	08 95       	ret

000009e8 <at_rf_connect>:
     9e8:	1f 93       	push	r17
     9ea:	cf 93       	push	r28
     9ec:	df 93       	push	r29
     9ee:	c4 e6       	ldi	r28, 0x64	; 100
     9f0:	d3 e0       	ldi	r29, 0x03	; 3
     9f2:	10 e0       	ldi	r17, 0x00	; 0
     9f4:	ce 01       	movw	r24, r28
     9f6:	6d de       	rcall	.-806    	; 0x6d2 <tx_at_response>
     9f8:	81 11       	cpse	r24, r1
     9fa:	0c c0       	rjmp	.+24     	; 0xa14 <at_rf_connect+0x2c>
     9fc:	1f 5f       	subi	r17, 0xFF	; 255
     9fe:	29 96       	adiw	r28, 0x09	; 9
     a00:	1e 30       	cpi	r17, 0x0E	; 14
     a02:	c1 f7       	brne	.-16     	; 0x9f4 <at_rf_connect+0xc>
     a04:	82 ee       	ldi	r24, 0xE2	; 226
     a06:	93 e0       	ldi	r25, 0x03	; 3
     a08:	64 de       	rcall	.-824    	; 0x6d2 <tx_at_response>
     a0a:	81 11       	cpse	r24, r1
     a0c:	05 c0       	rjmp	.+10     	; 0xa18 <at_rf_connect+0x30>
     a0e:	28 de       	rcall	.-944    	; 0x660 <at_get_radio_network_time>
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	03 c0       	rjmp	.+6      	; 0xa1a <at_rf_connect+0x32>
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	01 c0       	rjmp	.+2      	; 0xa1a <at_rf_connect+0x32>
     a18:	80 e2       	ldi	r24, 0x20	; 32
     a1a:	df 91       	pop	r29
     a1c:	cf 91       	pop	r28
     a1e:	1f 91       	pop	r17
     a20:	08 95       	ret

00000a22 <at_rf_disconnect>:
     a22:	8e e2       	ldi	r24, 0x2E	; 46
     a24:	93 e0       	ldi	r25, 0x03	; 3
     a26:	55 de       	rcall	.-854    	; 0x6d2 <tx_at_response>
     a28:	81 11       	cpse	r24, r1
     a2a:	03 c0       	rjmp	.+6      	; 0xa32 <at_rf_disconnect+0x10>
     a2c:	87 e3       	ldi	r24, 0x37	; 55
     a2e:	93 e0       	ldi	r25, 0x03	; 3
     a30:	50 de       	rcall	.-864    	; 0x6d2 <tx_at_response>
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	08 95       	ret

00000a36 <tx2>:
     a36:	cf 92       	push	r12
     a38:	df 92       	push	r13
     a3a:	ef 92       	push	r14
     a3c:	ff 92       	push	r15
     a3e:	0f 93       	push	r16
     a40:	1f 93       	push	r17
     a42:	cf 93       	push	r28
     a44:	6c 01       	movw	r12, r24
     a46:	7b 01       	movw	r14, r22
     a48:	80 e4       	ldi	r24, 0x40	; 64
     a4a:	93 e0       	ldi	r25, 0x03	; 3
     a4c:	42 de       	rcall	.-892    	; 0x6d2 <tx_at_response>
     a4e:	81 11       	cpse	r24, r1
     a50:	26 c0       	rjmp	.+76     	; 0xa9e <tx2+0x68>
     a52:	89 e4       	ldi	r24, 0x49	; 73
     a54:	93 e0       	ldi	r25, 0x03	; 3
     a56:	3d de       	rcall	.-902    	; 0x6d2 <tx_at_response>
     a58:	81 11       	cpse	r24, r1
     a5a:	23 c0       	rjmp	.+70     	; 0xaa2 <tx2+0x6c>
     a5c:	1e 14       	cp	r1, r14
     a5e:	1f 04       	cpc	r1, r15
     a60:	a4 f4       	brge	.+40     	; 0xa8a <tx2+0x54>
     a62:	c0 e0       	ldi	r28, 0x00	; 0
     a64:	86 01       	movw	r16, r12
     a66:	0c 0f       	add	r16, r28
     a68:	11 1d       	adc	r17, r1
     a6a:	f8 01       	movw	r30, r16
     a6c:	60 81       	ld	r22, Z
     a6e:	80 ec       	ldi	r24, 0xC0	; 192
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	86 db       	rcall	.-2292   	; 0x180 <usart_putchar>
     a74:	f8 01       	movw	r30, r16
     a76:	60 81       	ld	r22, Z
     a78:	88 ec       	ldi	r24, 0xC8	; 200
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	81 db       	rcall	.-2302   	; 0x180 <usart_putchar>
     a7e:	cf 5f       	subi	r28, 0xFF	; 255
     a80:	8c 2f       	mov	r24, r28
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	8e 15       	cp	r24, r14
     a86:	9f 05       	cpc	r25, r15
     a88:	6c f3       	brlt	.-38     	; 0xa64 <tx2+0x2e>
     a8a:	68 ec       	ldi	r22, 0xC8	; 200
     a8c:	72 e0       	ldi	r23, 0x02	; 2
     a8e:	88 ec       	ldi	r24, 0xC8	; 200
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	98 dc       	rcall	.-1744   	; 0x3c4 <usart_tx_at>
     a94:	82 e5       	ldi	r24, 0x52	; 82
     a96:	93 e0       	ldi	r25, 0x03	; 3
     a98:	1c de       	rcall	.-968    	; 0x6d2 <tx_at_response>
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	03 c0       	rjmp	.+6      	; 0xaa4 <tx2+0x6e>
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	01 c0       	rjmp	.+2      	; 0xaa4 <tx2+0x6e>
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	cf 91       	pop	r28
     aa6:	1f 91       	pop	r17
     aa8:	0f 91       	pop	r16
     aaa:	ff 90       	pop	r15
     aac:	ef 90       	pop	r14
     aae:	df 90       	pop	r13
     ab0:	cf 90       	pop	r12
     ab2:	08 95       	ret

00000ab4 <__vector_20>:
     ab4:	1f 92       	push	r1
     ab6:	0f 92       	push	r0
     ab8:	0f b6       	in	r0, 0x3f	; 63
     aba:	0f 92       	push	r0
     abc:	11 24       	eor	r1, r1
     abe:	2f 93       	push	r18
     ac0:	3f 93       	push	r19
     ac2:	4f 93       	push	r20
     ac4:	5f 93       	push	r21
     ac6:	6f 93       	push	r22
     ac8:	7f 93       	push	r23
     aca:	8f 93       	push	r24
     acc:	9f 93       	push	r25
     ace:	af 93       	push	r26
     ad0:	bf 93       	push	r27
     ad2:	cf 93       	push	r28
     ad4:	df 93       	push	r29
     ad6:	ef 93       	push	r30
     ad8:	ff 93       	push	r31
     ada:	c0 91 73 04 	lds	r28, 0x0473	; 0x800473 <response_counter>
     ade:	d0 e0       	ldi	r29, 0x00	; 0
     ae0:	c8 58       	subi	r28, 0x88	; 136
     ae2:	db 4f       	sbci	r29, 0xFB	; 251
     ae4:	80 ec       	ldi	r24, 0xC0	; 192
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	52 db       	rcall	.-2396   	; 0x18e <usart_getchar>
     aea:	88 83       	st	Y, r24
     aec:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <response_counter>
     af0:	8f 5f       	subi	r24, 0xFF	; 255
     af2:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <response_counter>
     af6:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <response_timeout_counter>
     afa:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <response_timeout_counter+0x1>
     afe:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <response_timeout_counter+0x2>
     b02:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <response_timeout_counter+0x3>
     b06:	ff 91       	pop	r31
     b08:	ef 91       	pop	r30
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	bf 91       	pop	r27
     b10:	af 91       	pop	r26
     b12:	9f 91       	pop	r25
     b14:	8f 91       	pop	r24
     b16:	7f 91       	pop	r23
     b18:	6f 91       	pop	r22
     b1a:	5f 91       	pop	r21
     b1c:	4f 91       	pop	r20
     b1e:	3f 91       	pop	r19
     b20:	2f 91       	pop	r18
     b22:	0f 90       	pop	r0
     b24:	0f be       	out	0x3f, r0	; 63
     b26:	0f 90       	pop	r0
     b28:	1f 90       	pop	r1
     b2a:	18 95       	reti

00000b2c <__vector_8>:

//main_function()
ISR(WDT_vect)
{
     b2c:	1f 92       	push	r1
     b2e:	0f 92       	push	r0
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	0f 92       	push	r0
     b34:	11 24       	eor	r1, r1
     b36:	6f 92       	push	r6
     b38:	7f 92       	push	r7
     b3a:	8f 92       	push	r8
     b3c:	9f 92       	push	r9
     b3e:	af 92       	push	r10
     b40:	bf 92       	push	r11
     b42:	cf 92       	push	r12
     b44:	df 92       	push	r13
     b46:	ef 92       	push	r14
     b48:	ff 92       	push	r15
     b4a:	0f 93       	push	r16
     b4c:	1f 93       	push	r17
     b4e:	2f 93       	push	r18
     b50:	3f 93       	push	r19
     b52:	4f 93       	push	r20
     b54:	5f 93       	push	r21
     b56:	6f 93       	push	r22
     b58:	7f 93       	push	r23
     b5a:	8f 93       	push	r24
     b5c:	9f 93       	push	r25
     b5e:	af 93       	push	r26
     b60:	bf 93       	push	r27
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
     b66:	ef 93       	push	r30
     b68:	ff 93       	push	r31
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	f8 94       	cli
     b6e:	a8 95       	wdr
     b70:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     b74:	88 61       	ori	r24, 0x18	; 24
     b76:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     b7a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     b7e:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
	wdt_counter++; //watchdog set at 1 second timeout
     b80:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     b84:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     b8e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	usart_tx_at(USART_TERMINAL, RESPONSE_FOOTER); //DEBUG
     b92:	68 ec       	ldi	r22, 0xC8	; 200
     b94:	72 e0       	ldi	r23, 0x02	; 2
     b96:	88 ec       	ldi	r24, 0xC8	; 200
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	14 dc       	rcall	.-2008   	; 0x3c4 <usart_tx_at>
	usart_putchar(USART_TERMINAL, (0x30+wdt_counter)); //DEBUG
     b9c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     ba0:	60 5d       	subi	r22, 0xD0	; 208
     ba2:	88 ec       	ldi	r24, 0xC8	; 200
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	ec da       	rcall	.-2600   	; 0x180 <usart_putchar>
	usart_tx_at(USART_TERMINAL, RESPONSE_FOOTER); //DEBUG
     ba8:	68 ec       	ldi	r22, 0xC8	; 200
     baa:	72 e0       	ldi	r23, 0x02	; 2
     bac:	88 ec       	ldi	r24, 0xC8	; 200
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	09 dc       	rcall	.-2030   	; 0x3c4 <usart_tx_at>

	if (wdt_counter < WAKEUP_RATE)
     bb2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     bb6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     bba:	89 2b       	or	r24, r25
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <__vector_8+0x94>
     bbe:	03 c1       	rjmp	.+518    	; 0xdc6 <__vector_8+0x29a>
	{
		goto END;
	} else {wdt_counter = 0;} //reset counter if limit is reached.
     bc0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
     bc4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	
	RTC_ISR_ACTIVE = 1;
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <RTC_ISR_ACTIVE>
				controller_next_state = READ_EXT_DATA;
				RTC_ISR_ACTIVE = 0; //FINISHED, break LOOP!
				break;
			
			default:
				controller_next_state = RESET_REGISTERS; //TRY RESET.
     bce:	0f 2e       	mov	r0, r31
     bd0:	fb e0       	ldi	r31, 0x0B	; 11
     bd2:	ef 2e       	mov	r14, r31
     bd4:	f0 2d       	mov	r31, r0
// 				{
// 					//tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_DISNNECT); //set failure status
// 					controller_next_state = RF_POWER_OFF; // RF_DISCONNECT; //if failure go to disconnect
// 					break;
// 				}
				controller_next_state = RF_POWER_OFF;
     bd6:	0f 2e       	mov	r0, r31
     bd8:	fa e0       	ldi	r31, 0x0A	; 10
     bda:	7f 2e       	mov	r7, r31
     bdc:	f0 2d       	mov	r31, r0
			case RX_DATA:
// 				tx_at_response(&m95_disconnect[0]); //WHY NEED THIS ONE AGAIN? SEEMS TO SHUT DOWN TCP CONNECTION AFTER SENDING ONE MESSAGE.
// 				tx_at_response(&m95_connect[11]); //WHY NEED THIS ONE AGAIN? SEEMS TO SHUT DOWN TCP CONNECTION AFTER SENDING ONE MESSAGE.
				tx_at_response(&m95_connect[12]); //WHY NEED THIS ONE AGAIN? SEEMS TO SHUT DOWN TCP CONNECTION AFTER SENDING ONE MESSAGE.
				tx2(&tx_data_package, transfer_data_length_package); //transmit package. GENERATE STATUS FROM THIS.
				controller_next_state = RF_DISCONNECT;
     bde:	0f 2e       	mov	r0, r31
     be0:	f9 e0       	ldi	r31, 0x09	; 9
     be2:	ff 2e       	mov	r15, r31
     be4:	f0 2d       	mov	r31, r0
				break;
			
			case TX_DATA:
				tx_at_response(&m95_connect[12]); //WHY NEED THIS ONE AGAIN? SEEMS TO SHUT DOWN TCP CONNECTION AFTER SENDING ONE MESSAGE.
				tx2(&tx_data_package, transfer_data_length_package); //transmit package. GENERATE STATUS FROM THIS.
				controller_next_state = RX_DATA;
     be6:	68 94       	set
     be8:	88 24       	eor	r8, r8
     bea:	83 f8       	bld	r8, 3
     bec:	04 e3       	ldi	r16, 0x34	; 52
     bee:	14 e0       	ldi	r17, 0x04	; 4
// 					char mystring2[5] = "";
// 					strcpy(mystring2, MQTT_TOPIC);
// 					strcat(mystring2, subtopic);
// 					usart_tx_at(USART_TERMINAL, mystring2);
				#endif // DEBUG
				controller_next_state = TX_DATA;
     bf0:	0f 2e       	mov	r0, r31
     bf2:	f7 e0       	ldi	r31, 0x07	; 7
     bf4:	9f 2e       	mov	r9, r31
     bf6:	f0 2d       	mov	r31, r0
				{
// 					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_CONNECT); //set failure status
// 					controller_next_state = RF_POWER_OFF; // RF_DISCONNECT; //if failure go to disconnect
// 					break;
				}
				controller_next_state = GENERATE_PACKAGE;
     bf8:	0f 2e       	mov	r0, r31
     bfa:	f6 e0       	ldi	r31, 0x06	; 6
     bfc:	af 2e       	mov	r10, r31
     bfe:	f0 2d       	mov	r31, r0
// 				{
// 					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_POWER_ON); //set failure status
// 					controller_next_state = RF_POWER_OFF; //if failure go to power off
// 					break;
// 				}
				controller_next_state = RF_CONNECT;
     c00:	0f 2e       	mov	r0, r31
     c02:	f5 e0       	ldi	r31, 0x05	; 5
     c04:	bf 2e       	mov	r11, r31
     c06:	f0 2d       	mov	r31, r0
				controller_next_state = STORE_EXT_MEM;
				break;
			
			case STORE_EXT_MEM:
				tx_data[POSITION_TIME] = 0; //reset accumulation counter if something???????????????
				controller_next_state = RF_POWER_ON;
     c08:	68 94       	set
     c0a:	cc 24       	eor	r12, r12
     c0c:	c2 f8       	bld	r12, 2
			case CALC:
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				tx_data[POSITION_AVG] = controller_calc_avg(accu_data, tx_data[POSITION_TIME]); //calc and store average.
				accu_data = 0; //reset parameters
				///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				controller_next_state = STORE_EXT_MEM;
     c0e:	0f 2e       	mov	r0, r31
     c10:	f3 e0       	ldi	r31, 0x03	; 3
     c12:	df 2e       	mov	r13, r31
     c14:	f0 2d       	mov	r31, r0
				tx_data[POSITION_TIME] = transmit_counter; //increase timestamp counter.
			
				if (tx_data[POSITION_TIME] >= (TRANSMIT_RATE/WAKEUP_RATE)) //if accumulation limit is reached.
				{
					transmit_counter = 0; //reset counter
					controller_next_state = CALC; //limit reached, go to next
     c16:	68 94       	set
     c18:	66 24       	eor	r6, r6
     c1a:	61 f8       	bld	r6, 1
	
	RTC_ISR_ACTIVE = 1;
	while (RTC_ISR_ACTIVE == 1)
	{
		
		switch(controller_state) {
     c1c:	e0 91 77 04 	lds	r30, 0x0477	; 0x800477 <controller_state>
     c20:	8e 2f       	mov	r24, r30
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	8c 30       	cpi	r24, 0x0C	; 12
     c26:	91 05       	cpc	r25, r1
     c28:	08 f0       	brcs	.+2      	; 0xc2c <__vector_8+0x100>
     c2a:	c2 c0       	rjmp	.+388    	; 0xdb0 <__vector_8+0x284>
     c2c:	fc 01       	movw	r30, r24
     c2e:	e2 5c       	subi	r30, 0xC2	; 194
     c30:	ff 4f       	sbci	r31, 0xFF	; 255
     c32:	0c 94 32 0e 	jmp	0x1c64	; 0x1c64 <__tablejump2__>
			
			case READ_EXT_DATA:
				controller_next_state = MEASURE;
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <controller_next_state>
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL///////////////////////////
				loadcell_power_on();
				//////////////////////////////////////////////////////////////////////////
				
				//GENERAL MEASUREMENTS
 				tx_data[POSITION_ANA0] = adc_result_average(ADC_MUX_ADC0, ADC_NUM_AVG); //NEED TO FIX ADC CONVERSINS!!!!!!!!
     c3c:	bb c0       	rjmp	.+374    	; 0xdb4 <__vector_8+0x288>
     c3e:	1e dc       	rcall	.-1988   	; 0x47c <loadcell_power_on>
     c40:	6f 2d       	mov	r22, r15
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	98 dc       	rcall	.-1744   	; 0x576 <adc_result_average>
     c46:	cd ef       	ldi	r28, 0xFD	; 253
// 				tx_data[POSITION_ANA2] = adc_result_average(ADC_MUX_ADC2, ADC_NUM_AVG); //
// 				tx_data[POSITION_ANA3] = adc_result_average(ADC_MUX_ADC3, ADC_NUM_AVG); //
// 				tx_data[POSITION_ANA4] = adc_result_average(ADC_MUX_ADC4, ADC_NUM_AVG); //
// 				tx_data[POSITION_ANA5] = adc_result_average(ADC_MUX_ADC5, ADC_NUM_AVG); //
// 				//tx_data[POSITION_TEMP] = adc_result_average(ADC_MUX_TEMPSENSE, 1); //PIN CHANGE HAVE NO EFFECT ON ADCB
 				tx_data[POSITION_VDD] = adc_result_average(ADC_MUX_1V1, 1); //PIN CHANGE HAVE NO EFFECT ON ADCB
     c48:	d4 e0       	ldi	r29, 0x04	; 4
     c4a:	99 83       	std	Y+1, r25	; 0x01
     c4c:	88 83       	st	Y, r24
     c4e:	61 e0       	ldi	r22, 0x01	; 1
     c50:	8e e1       	ldi	r24, 0x1E	; 30
				 
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL///////////////////////////
				loadcell_power_off();
     c52:	91 dc       	rcall	.-1758   	; 0x576 <adc_result_average>
     c54:	9f 87       	std	Y+15, r25	; 0x0f
				//////////////////////////////////////////////////////////////////////////
				
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				accu_data += tx_data[POSITION_CURRENT]; //controller_measure(9, &tx_data); //measure with averaging, and accumulate.
     c56:	8e 87       	std	Y+14, r24	; 0x0e
     c58:	18 dc       	rcall	.-2000   	; 0x48a <loadcell_power_off>
     c5a:	28 81       	ld	r18, Y
     c5c:	39 81       	ldd	r19, Y+1	; 0x01
     c5e:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <accu_data>
     c62:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <accu_data+0x1>
     c66:	a0 91 69 04 	lds	r26, 0x0469	; 0x800469 <accu_data+0x2>
     c6a:	b0 91 6a 04 	lds	r27, 0x046A	; 0x80046a <accu_data+0x3>
     c6e:	82 0f       	add	r24, r18
     c70:	93 1f       	adc	r25, r19
     c72:	a1 1d       	adc	r26, r1
     c74:	b1 1d       	adc	r27, r1
     c76:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <accu_data>
     c7a:	90 93 68 04 	sts	0x0468, r25	; 0x800468 <accu_data+0x1>
     c7e:	a0 93 69 04 	sts	0x0469, r26	; 0x800469 <accu_data+0x2>
				loadcell_min_max_tran(tx_data[POSITION_CURRENT], &tx_data); //check if new value should be stored in min, max and tran.
     c82:	b0 93 6a 04 	sts	0x046A, r27	; 0x80046a <accu_data+0x3>
     c86:	88 81       	ld	r24, Y
     c88:	99 81       	ldd	r25, Y+1	; 0x01
				tx_data[POSITION_PREV] = tx_data[POSITION_CURRENT]; //store adc value for next measurement.
     c8a:	be 01       	movw	r22, r28
     c8c:	53 db       	rcall	.-2394   	; 0x334 <loadcell_min_max_tran>
     c8e:	88 81       	ld	r24, Y
     c90:	99 81       	ldd	r25, Y+1	; 0x01
				///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				
				transmit_counter++;		
     c92:	9b 83       	std	Y+3, r25	; 0x03
     c94:	8a 83       	std	Y+2, r24	; 0x02
     c96:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <transmit_counter>
     c9a:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <transmit_counter+0x1>
     c9e:	01 96       	adiw	r24, 0x01	; 1
     ca0:	90 93 75 04 	sts	0x0475, r25	; 0x800475 <transmit_counter+0x1>
				tx_data[POSITION_TIME] = transmit_counter; //increase timestamp counter.
     ca4:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <transmit_counter>
			
				if (tx_data[POSITION_TIME] >= (TRANSMIT_RATE/WAKEUP_RATE)) //if accumulation limit is reached.
     ca8:	9b 8b       	std	Y+19, r25	; 0x13
     caa:	8a 8b       	std	Y+18, r24	; 0x12
     cac:	8a 89       	ldd	r24, Y+18	; 0x12
     cae:	9b 89       	ldd	r25, Y+19	; 0x13
				{
					transmit_counter = 0; //reset counter
     cb0:	89 2b       	or	r24, r25
     cb2:	39 f0       	breq	.+14     	; 0xcc2 <__vector_8+0x196>
     cb4:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <transmit_counter+0x1>
					controller_next_state = CALC; //limit reached, go to next
     cb8:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <transmit_counter>
     cbc:	60 92 76 04 	sts	0x0476, r6	; 0x800476 <controller_next_state>
					} else {
					controller_next_state = READ_EXT_DATA; //Start from top again
     cc0:	79 c0       	rjmp	.+242    	; 0xdb4 <__vector_8+0x288>
					RTC_ISR_ACTIVE = 0; //Break loop and go to sleep again
     cc2:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <controller_next_state>
     cc6:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <RTC_ISR_ACTIVE>
				}
				break;
			
			case CALC:
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				tx_data[POSITION_AVG] = controller_calc_avg(accu_data, tx_data[POSITION_TIME]); //calc and store average.
     cca:	74 c0       	rjmp	.+232    	; 0xdb4 <__vector_8+0x288>
     ccc:	cd ef       	ldi	r28, 0xFD	; 253
     cce:	d4 e0       	ldi	r29, 0x04	; 4


uint16_t controller_calc_avg(uint32_t data, uint16_t cnt) {
	uint16_t avg = 0;
	
	avg = data/cnt;
     cd0:	2a 89       	ldd	r18, Y+18	; 0x12
     cd2:	3b 89       	ldd	r19, Y+19	; 0x13
     cd4:	40 e0       	ldi	r20, 0x00	; 0
     cd6:	50 e0       	ldi	r21, 0x00	; 0
     cd8:	60 91 67 04 	lds	r22, 0x0467	; 0x800467 <accu_data>
     cdc:	70 91 68 04 	lds	r23, 0x0468	; 0x800468 <accu_data+0x1>
     ce0:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <accu_data+0x2>
     ce4:	90 91 6a 04 	lds	r25, 0x046A	; 0x80046a <accu_data+0x3>
				}
				break;
			
			case CALC:
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				tx_data[POSITION_AVG] = controller_calc_avg(accu_data, tx_data[POSITION_TIME]); //calc and store average.
     ce8:	9b d7       	rcall	.+3894   	; 0x1c20 <__udivmodsi4>
				accu_data = 0; //reset parameters
     cea:	3d 83       	std	Y+5, r19	; 0x05
     cec:	2c 83       	std	Y+4, r18	; 0x04
     cee:	10 92 67 04 	sts	0x0467, r1	; 0x800467 <accu_data>
     cf2:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <accu_data+0x1>
     cf6:	10 92 69 04 	sts	0x0469, r1	; 0x800469 <accu_data+0x2>
				///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				controller_next_state = STORE_EXT_MEM;
     cfa:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <accu_data+0x3>
				break;
			
			case STORE_EXT_MEM:
				tx_data[POSITION_TIME] = 0; //reset accumulation counter if something???????????????
     cfe:	d0 92 76 04 	sts	0x0476, r13	; 0x800476 <controller_next_state>
				controller_next_state = RF_POWER_ON;
     d02:	58 c0       	rjmp	.+176    	; 0xdb4 <__vector_8+0x288>
     d04:	10 92 10 05 	sts	0x0510, r1	; 0x800510 <tx_data+0x13>
				break;
			
			case RF_POWER_ON:
				radio_power_on();
     d08:	10 92 0f 05 	sts	0x050F, r1	; 0x80050f <tx_data+0x12>
// 				{
// 					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_POWER_ON); //set failure status
// 					controller_next_state = RF_POWER_OFF; //if failure go to power off
// 					break;
// 				}
				controller_next_state = RF_CONNECT;
     d0c:	c0 92 76 04 	sts	0x0476, r12	; 0x800476 <controller_next_state>
				break;
     d10:	51 c0       	rjmp	.+162    	; 0xdb4 <__vector_8+0x288>
			
			case RF_CONNECT: //NEED MORE POWER!!!!!!
				//at_rf_connect();
				if (at_rf_connect() != 0) //Connect to network. MAKE STATUS REPORT FROM THIS!!!!!!!
     d12:	bd db       	rcall	.-2182   	; 0x48e <radio_power_on>
				{
// 					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_CONNECT); //set failure status
// 					controller_next_state = RF_POWER_OFF; // RF_DISCONNECT; //if failure go to disconnect
// 					break;
				}
				controller_next_state = GENERATE_PACKAGE;
     d14:	b0 92 76 04 	sts	0x0476, r11	; 0x800476 <controller_next_state>
			
			case GENERATE_PACKAGE:
				
				
				//data_to_char(&tx_data, TX_DATA_SIZE, &tx_data_bytes, TRANSFER_DATA_BASE);
				data_to_char(&tx_data[0], 1, &tx_data_bytes, TRANSFER_DATA_BASE);
     d18:	4d c0       	rjmp	.+154    	; 0xdb4 <__vector_8+0x288>
     d1a:	66 de       	rcall	.-820    	; 0x9e8 <at_rf_connect>
     d1c:	a0 92 76 04 	sts	0x0476, r10	; 0x800476 <controller_next_state>
     d20:	49 c0       	rjmp	.+146    	; 0xdb4 <__vector_8+0x288>
     d22:	2a e0       	ldi	r18, 0x0A	; 10
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	48 ef       	ldi	r20, 0xF8	; 248
				//data_to_char2(&tx_data, TX_DATA_SIZE, &tx_data_bytes, TRANSFER_DATA_BASE);

				
 				transfer_data_length_package = mqtt_packet(&tx_data_bytes, &tx_data_package, TRANSFER_DATA_SIZE_PACKAGE); //convert ascii data to MQTT package.
     d28:	54 e0       	ldi	r21, 0x04	; 4
     d2a:	61 e0       	ldi	r22, 0x01	; 1
     d2c:	8d ef       	ldi	r24, 0xFD	; 253
     d2e:	94 e0       	ldi	r25, 0x04	; 4
     d30:	4f dd       	rcall	.-1378   	; 0x7d0 <data_to_char>
     d32:	44 e6       	ldi	r20, 0x64	; 100
     d34:	50 e0       	ldi	r21, 0x00	; 0
     d36:	62 e0       	ldi	r22, 0x02	; 2
     d38:	74 e0       	ldi	r23, 0x04	; 4
     d3a:	88 ef       	ldi	r24, 0xF8	; 248
     d3c:	94 e0       	ldi	r25, 0x04	; 4
     d3e:	8f d3       	rcall	.+1822   	; 0x145e <mqtt_packet>
					//usart_putchar(USART_TERMINAL, &tx_data_bytes[0]); //DEBUG
					//transfer_data_length_package = mqtt_packet(tx_data_bytes[i], &tx_data_package, TRANSFER_DATA_SIZE_PACKAGE); //convert ascii data to MQTT package.
					j = 0;
					while (j<50)
					{
						usart_putchar(USART_TERMINAL, tx_data_package[j]);
     d40:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <__data_end+0x1>
     d44:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__data_end>
				while (i < 1)
				{
					//usart_putchar(USART_TERMINAL, &tx_data_bytes[0]); //DEBUG
					//transfer_data_length_package = mqtt_packet(tx_data_bytes[i], &tx_data_package, TRANSFER_DATA_SIZE_PACKAGE); //convert ascii data to MQTT package.
					j = 0;
					while (j<50)
     d48:	c2 e0       	ldi	r28, 0x02	; 2
     d4a:	d4 e0       	ldi	r29, 0x04	; 4
// 					char mystring2[5] = "";
// 					strcpy(mystring2, MQTT_TOPIC);
// 					strcat(mystring2, subtopic);
// 					usart_tx_at(USART_TERMINAL, mystring2);
				#endif // DEBUG
				controller_next_state = TX_DATA;
     d4c:	69 91       	ld	r22, Y+
     d4e:	88 ec       	ldi	r24, 0xC8	; 200
				break;
     d50:	90 e0       	ldi	r25, 0x00	; 0
			
			case TX_DATA:
				tx_at_response(&m95_connect[12]); //WHY NEED THIS ONE AGAIN? SEEMS TO SHUT DOWN TCP CONNECTION AFTER SENDING ONE MESSAGE.
     d52:	16 da       	rcall	.-3028   	; 0x180 <usart_putchar>
     d54:	0c 17       	cp	r16, r28
     d56:	1d 07       	cpc	r17, r29
				tx2(&tx_data_package, transfer_data_length_package); //transmit package. GENERATE STATUS FROM THIS.
     d58:	c9 f7       	brne	.-14     	; 0xd4c <__vector_8+0x220>
     d5a:	90 92 76 04 	sts	0x0476, r9	; 0x800476 <controller_next_state>
     d5e:	2a c0       	rjmp	.+84     	; 0xdb4 <__vector_8+0x288>
     d60:	80 ed       	ldi	r24, 0xD0	; 208
     d62:	93 e0       	ldi	r25, 0x03	; 3
     d64:	b6 dc       	rcall	.-1684   	; 0x6d2 <tx_at_response>
				controller_next_state = RX_DATA;
     d66:	60 91 00 04 	lds	r22, 0x0400	; 0x800400 <__data_end>
				break;
			
			case RX_DATA:
// 				tx_at_response(&m95_disconnect[0]); //WHY NEED THIS ONE AGAIN? SEEMS TO SHUT DOWN TCP CONNECTION AFTER SENDING ONE MESSAGE.
// 				tx_at_response(&m95_connect[11]); //WHY NEED THIS ONE AGAIN? SEEMS TO SHUT DOWN TCP CONNECTION AFTER SENDING ONE MESSAGE.
				tx_at_response(&m95_connect[12]); //WHY NEED THIS ONE AGAIN? SEEMS TO SHUT DOWN TCP CONNECTION AFTER SENDING ONE MESSAGE.
     d6a:	70 91 01 04 	lds	r23, 0x0401	; 0x800401 <__data_end+0x1>
     d6e:	82 e0       	ldi	r24, 0x02	; 2
				tx2(&tx_data_package, transfer_data_length_package); //transmit package. GENERATE STATUS FROM THIS.
     d70:	94 e0       	ldi	r25, 0x04	; 4
     d72:	61 de       	rcall	.-830    	; 0xa36 <tx2>
     d74:	80 92 76 04 	sts	0x0476, r8	; 0x800476 <controller_next_state>
     d78:	1d c0       	rjmp	.+58     	; 0xdb4 <__vector_8+0x288>
     d7a:	80 ed       	ldi	r24, 0xD0	; 208
     d7c:	93 e0       	ldi	r25, 0x03	; 3
				controller_next_state = RF_DISCONNECT;
     d7e:	a9 dc       	rcall	.-1710   	; 0x6d2 <tx_at_response>
     d80:	60 91 00 04 	lds	r22, 0x0400	; 0x800400 <__data_end>
				break;
			
			case RF_DISCONNECT:
				at_rf_disconnect(); //Disconnect
     d84:	70 91 01 04 	lds	r23, 0x0401	; 0x800401 <__data_end+0x1>
// 				{
// 					//tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_DISNNECT); //set failure status
// 					controller_next_state = RF_POWER_OFF; // RF_DISCONNECT; //if failure go to disconnect
// 					break;
// 				}
				controller_next_state = RF_POWER_OFF;
     d88:	82 e0       	ldi	r24, 0x02	; 2
     d8a:	94 e0       	ldi	r25, 0x04	; 4
				break;
     d8c:	54 de       	rcall	.-856    	; 0xa36 <tx2>
			
			case RF_POWER_OFF:
				//delay_s(2);
				radio_power_off_at(); //radio power down
     d8e:	f0 92 76 04 	sts	0x0476, r15	; 0x800476 <controller_next_state>
				controller_next_state = RESET_REGISTERS;
     d92:	10 c0       	rjmp	.+32     	; 0xdb4 <__vector_8+0x288>
     d94:	46 de       	rcall	.-884    	; 0xa22 <at_rf_disconnect>
				break;
     d96:	70 92 76 04 	sts	0x0476, r7	; 0x800476 <controller_next_state>
			
			case RESET_REGISTERS:
				reset_all_data(); //reset all arrays
				controller_next_state = READ_EXT_DATA;
     d9a:	0c c0       	rjmp	.+24     	; 0xdb4 <__vector_8+0x288>
     d9c:	af db       	rcall	.-2210   	; 0x4fc <radio_power_off_at>
				RTC_ISR_ACTIVE = 0; //FINISHED, break LOOP!
     d9e:	e0 92 76 04 	sts	0x0476, r14	; 0x800476 <controller_next_state>
				break;
     da2:	08 c0       	rjmp	.+16     	; 0xdb4 <__vector_8+0x288>
			
			default:
				controller_next_state = RESET_REGISTERS; //TRY RESET.
     da4:	41 db       	rcall	.-2430   	; 0x428 <reset_all_data>
     da6:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <controller_next_state>
				break;
			
		}
		
		controller_state = controller_next_state; //NEXT STATE => STATE
     daa:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <RTC_ISR_ACTIVE>
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <__vector_8+0x288>
	{
		goto END;
	} else {wdt_counter = 0;} //reset counter if limit is reached.
	
	RTC_ISR_ACTIVE = 1;
	while (RTC_ISR_ACTIVE == 1)
     db0:	e0 92 76 04 	sts	0x0476, r14	; 0x800476 <controller_next_state>
     db4:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <controller_next_state>
     db8:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <controller_state>

	END:
	
	wdt_reset();
	//wdt_enable();
	rtc_init_period(1);
     dbc:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <RTC_ISR_ACTIVE>
     dc0:	81 30       	cpi	r24, 0x01	; 1
     dc2:	09 f4       	brne	.+2      	; 0xdc6 <__vector_8+0x29a>
	return;
	
}
     dc4:	2b cf       	rjmp	.-426    	; 0xc1c <__vector_8+0xf0>
     dc6:	a8 95       	wdr
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	3c db       	rcall	.-2440   	; 0x446 <rtc_init_period>
     dce:	ff 91       	pop	r31
     dd0:	ef 91       	pop	r30
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	bf 91       	pop	r27
     dd8:	af 91       	pop	r26
     dda:	9f 91       	pop	r25
     ddc:	8f 91       	pop	r24
     dde:	7f 91       	pop	r23
     de0:	6f 91       	pop	r22
     de2:	5f 91       	pop	r21
     de4:	4f 91       	pop	r20
     de6:	3f 91       	pop	r19
     de8:	2f 91       	pop	r18
     dea:	1f 91       	pop	r17
     dec:	0f 91       	pop	r16
     dee:	ff 90       	pop	r15
     df0:	ef 90       	pop	r14
     df2:	df 90       	pop	r13
     df4:	cf 90       	pop	r12
     df6:	bf 90       	pop	r11
     df8:	af 90       	pop	r10
     dfa:	9f 90       	pop	r9
     dfc:	8f 90       	pop	r8
     dfe:	7f 90       	pop	r7
     e00:	6f 90       	pop	r6
     e02:	0f 90       	pop	r0
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	0f 90       	pop	r0
     e08:	1f 90       	pop	r1
     e0a:	18 95       	reti

00000e0c <main>:
		
	/* Initialize the board.
	 * The board-specific conf_board.h file contains the configuration of
	 * the board initialization.
	 */
	board_init();
     e0c:	f8 94       	cli
}
#endif // DEBUG

static void adc_initialization(void)
{
	PRR0 &= ~(1<<PRADC); //enable ADC clock
     e0e:	b8 d3       	rcall	.+1904   	; 0x1580 <board_init>
     e10:	e4 e6       	ldi	r30, 0x64	; 100
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	8e 7f       	andi	r24, 0xFE	; 254
 *
 * \param prescaler   ADC clock prescaler
 */
static inline void adc_init(enum adc_prescaler prescaler)
{
	ADCSRA = (uint8_t)prescaler | (1 << ADEN);
     e18:	80 83       	st	Z, r24
     e1a:	87 e8       	ldi	r24, 0x87	; 135
     e1c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	//Enable The receiver and transmitter
	UCSR0B |= (1<<3);
	*/
	//////////////////////////////////////////////////////////////////////////
	//unsigned char data = 0x40;
	usart_init_rs232(USART_RADIO, &USART_OPTIONS); //Radio UART
     e20:	62 e0       	ldi	r22, 0x02	; 2
     e22:	71 e0       	ldi	r23, 0x01	; 1
     e24:	80 ec       	ldi	r24, 0xC0	; 192
	sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	43 da       	rcall	.-2938   	; 0x2b0 <usart_init_rs232>
     e2a:	62 e0       	ldi	r22, 0x02	; 2
	
	usart_init_rs232(USART_TERMINAL, &USART_OPTIONS); //Radio UART
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	90 d9       	rcall	.-3296   	; 0x150 <sysclk_enable_module>
     e30:	62 e0       	ldi	r22, 0x02	; 2
     e32:	71 e0       	ldi	r23, 0x01	; 1
	sysclk_enable_module(POWER_RED_REG0, PRUSART1_bm);
     e34:	88 ec       	ldi	r24, 0xC8	; 200
     e36:	90 e0       	ldi	r25, 0x00	; 0
// 	
// 	//initialize radio pins
 	delay_s(1); //wait for voltages to settle
     e38:	3b da       	rcall	.-2954   	; 0x2b0 <usart_init_rs232>
     e3a:	60 e1       	ldi	r22, 0x10	; 16
     e3c:	80 e0       	ldi	r24, 0x00	; 0
 	radio_pins_init();
     e3e:	88 d9       	rcall	.-3312   	; 0x150 <sysclk_enable_module>
     e40:	6b e0       	ldi	r22, 0x0B	; 11
     e42:	7b e8       	ldi	r23, 0x8B	; 139
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	b2 da       	rcall	.-2716   	; 0x3ae <__portable_avr_delay_cycles>
     e4a:	08 db       	rcall	.-2544   	; 0x45c <radio_pins_init>
     e4c:	6b e0       	ldi	r22, 0x0B	; 11
     e4e:	7b e8       	ldi	r23, 0x8B	; 139
     e50:	82 e0       	ldi	r24, 0x02	; 2
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	ac da       	rcall	.-2728   	; 0x3ae <__portable_avr_delay_cycles>
     e56:	ff da       	rcall	.-2562   	; 0x456 <loadcell_pins_init>
     e58:	51 db       	rcall	.-2398   	; 0x4fc <radio_power_off_at>
     e5a:	e6 da       	rcall	.-2612   	; 0x428 <reset_all_data>
     e5c:	82 e0       	ldi	r24, 0x02	; 2
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	f2 da       	rcall	.-2588   	; 0x446 <rtc_init_period>
     e62:	83 b7       	in	r24, 0x33	; 51
     e64:	81 7f       	andi	r24, 0xF1	; 241
     e66:	84 60       	ori	r24, 0x04	; 4
     e68:	83 bf       	out	0x33, r24	; 51
     e6a:	78 94       	sei
     e6c:	83 b7       	in	r24, 0x33	; 51
     e6e:	81 60       	ori	r24, 0x01	; 1
     e70:	83 bf       	out	0x33, r24	; 51
     e72:	85 b7       	in	r24, 0x35	; 53
     e74:	80 66       	ori	r24, 0x60	; 96
     e76:	85 bf       	out	0x35, r24	; 53
     e78:	8f 7d       	andi	r24, 0xDF	; 223
     e7a:	85 bf       	out	0x35, r24	; 53
     e7c:	88 95       	sleep
     e7e:	83 b7       	in	r24, 0x33	; 51
     e80:	8e 7f       	andi	r24, 0xFE	; 254
     e82:	83 bf       	out	0x33, r24	; 51
     e84:	f3 cf       	rjmp	.-26     	; 0xe6c <main+0x60>

00000e86 <MQTTSerialize_connectLength>:

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
     e86:	ef 92       	push	r14
     e88:	ff 92       	push	r15
     e8a:	0f 93       	push	r16
     e8c:	1f 93       	push	r17
     e8e:	cf 93       	push	r28
     e90:	df 93       	push	r29
     e92:	ec 01       	movw	r28, r24
     e94:	8e 81       	ldd	r24, Y+6	; 0x06
     e96:	83 30       	cpi	r24, 0x03	; 3
     e98:	29 f0       	breq	.+10     	; 0xea4 <MQTTSerialize_connectLength+0x1e>
     e9a:	84 30       	cpi	r24, 0x04	; 4
     e9c:	31 f4       	brne	.+12     	; 0xeaa <MQTTSerialize_connectLength+0x24>
     e9e:	0a e0       	ldi	r16, 0x0A	; 10
     ea0:	10 e0       	ldi	r17, 0x00	; 0
     ea2:	05 c0       	rjmp	.+10     	; 0xeae <MQTTSerialize_connectLength+0x28>
     ea4:	0c e0       	ldi	r16, 0x0C	; 12
     ea6:	10 e0       	ldi	r17, 0x00	; 0
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <MQTTSerialize_connectLength+0x28>
     eaa:	00 e0       	ldi	r16, 0x00	; 0
     eac:	10 e0       	ldi	r17, 0x00	; 0
     eae:	4f 81       	ldd	r20, Y+7	; 0x07
     eb0:	58 85       	ldd	r21, Y+8	; 0x08
     eb2:	69 85       	ldd	r22, Y+9	; 0x09
     eb4:	7a 85       	ldd	r23, Y+10	; 0x0a
     eb6:	8b 85       	ldd	r24, Y+11	; 0x0b
     eb8:	9c 85       	ldd	r25, Y+12	; 0x0c
     eba:	fb d1       	rcall	.+1014   	; 0x12b2 <MQTTstrlen>
     ebc:	02 96       	adiw	r24, 0x02	; 2
     ebe:	08 0f       	add	r16, r24
     ec0:	19 1f       	adc	r17, r25
     ec2:	88 89       	ldd	r24, Y+16	; 0x10
     ec4:	88 23       	and	r24, r24
     ec6:	a1 f0       	breq	.+40     	; 0xef0 <MQTTSerialize_connectLength+0x6a>
     ec8:	4f 89       	ldd	r20, Y+23	; 0x17
     eca:	58 8d       	ldd	r21, Y+24	; 0x18
     ecc:	69 8d       	ldd	r22, Y+25	; 0x19
     ece:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ed0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ed2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ed4:	ee d1       	rcall	.+988    	; 0x12b2 <MQTTstrlen>
     ed6:	7c 01       	movw	r14, r24
     ed8:	4d 8d       	ldd	r20, Y+29	; 0x1d
     eda:	5e 8d       	ldd	r21, Y+30	; 0x1e
     edc:	6f 8d       	ldd	r22, Y+31	; 0x1f
     ede:	78 a1       	ldd	r23, Y+32	; 0x20
     ee0:	89 a1       	ldd	r24, Y+33	; 0x21
     ee2:	9a a1       	ldd	r25, Y+34	; 0x22
     ee4:	e6 d1       	rcall	.+972    	; 0x12b2 <MQTTstrlen>
     ee6:	8e 0d       	add	r24, r14
     ee8:	9f 1d       	adc	r25, r15
     eea:	04 96       	adiw	r24, 0x04	; 4
     eec:	08 0f       	add	r16, r24
     eee:	19 1f       	adc	r17, r25
     ef0:	8d a1       	ldd	r24, Y+37	; 0x25
     ef2:	9e a1       	ldd	r25, Y+38	; 0x26
     ef4:	89 2b       	or	r24, r25
     ef6:	21 f4       	brne	.+8      	; 0xf00 <MQTTSerialize_connectLength+0x7a>
     ef8:	89 a5       	ldd	r24, Y+41	; 0x29
     efa:	9a a5       	ldd	r25, Y+42	; 0x2a
     efc:	89 2b       	or	r24, r25
     efe:	51 f0       	breq	.+20     	; 0xf14 <MQTTSerialize_connectLength+0x8e>
     f00:	4d a1       	ldd	r20, Y+37	; 0x25
     f02:	5e a1       	ldd	r21, Y+38	; 0x26
     f04:	6f a1       	ldd	r22, Y+39	; 0x27
     f06:	78 a5       	ldd	r23, Y+40	; 0x28
     f08:	89 a5       	ldd	r24, Y+41	; 0x29
     f0a:	9a a5       	ldd	r25, Y+42	; 0x2a
     f0c:	d2 d1       	rcall	.+932    	; 0x12b2 <MQTTstrlen>
     f0e:	02 96       	adiw	r24, 0x02	; 2
     f10:	08 0f       	add	r16, r24
     f12:	19 1f       	adc	r17, r25
     f14:	8b a5       	ldd	r24, Y+43	; 0x2b
     f16:	9c a5       	ldd	r25, Y+44	; 0x2c
     f18:	89 2b       	or	r24, r25
     f1a:	21 f4       	brne	.+8      	; 0xf24 <MQTTSerialize_connectLength+0x9e>
     f1c:	8f a5       	ldd	r24, Y+47	; 0x2f
     f1e:	98 a9       	ldd	r25, Y+48	; 0x30
     f20:	89 2b       	or	r24, r25
     f22:	51 f0       	breq	.+20     	; 0xf38 <MQTTSerialize_connectLength+0xb2>
     f24:	4b a5       	ldd	r20, Y+43	; 0x2b
     f26:	5c a5       	ldd	r21, Y+44	; 0x2c
     f28:	6d a5       	ldd	r22, Y+45	; 0x2d
     f2a:	7e a5       	ldd	r23, Y+46	; 0x2e
     f2c:	8f a5       	ldd	r24, Y+47	; 0x2f
     f2e:	98 a9       	ldd	r25, Y+48	; 0x30
     f30:	c0 d1       	rcall	.+896    	; 0x12b2 <MQTTstrlen>
     f32:	02 96       	adiw	r24, 0x02	; 2
     f34:	08 0f       	add	r16, r24
     f36:	19 1f       	adc	r17, r25
     f38:	c8 01       	movw	r24, r16
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	1f 91       	pop	r17
     f40:	0f 91       	pop	r16
     f42:	ff 90       	pop	r15
     f44:	ef 90       	pop	r14
     f46:	08 95       	ret

00000f48 <MQTTSerialize_connect>:
     f48:	af 92       	push	r10
     f4a:	bf 92       	push	r11
     f4c:	cf 92       	push	r12
     f4e:	df 92       	push	r13
     f50:	ef 92       	push	r14
     f52:	ff 92       	push	r15
     f54:	0f 93       	push	r16
     f56:	1f 93       	push	r17
     f58:	cf 93       	push	r28
     f5a:	df 93       	push	r29
     f5c:	00 d0       	rcall	.+0      	; 0xf5e <MQTTSerialize_connect+0x16>
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
     f62:	6c 01       	movw	r12, r24
     f64:	5b 01       	movw	r10, r22
     f66:	8a 01       	movw	r16, r20
     f68:	9a 83       	std	Y+2, r25	; 0x02
     f6a:	89 83       	std	Y+1, r24	; 0x01
     f6c:	ca 01       	movw	r24, r20
     f6e:	8b df       	rcall	.-234    	; 0xe86 <MQTTSerialize_connectLength>
     f70:	7c 01       	movw	r14, r24
     f72:	03 d1       	rcall	.+518    	; 0x117a <MQTTPacket_len>
     f74:	a8 16       	cp	r10, r24
     f76:	b9 06       	cpc	r11, r25
     f78:	0c f4       	brge	.+2      	; 0xf7c <MQTTSerialize_connect+0x34>
     f7a:	9f c0       	rjmp	.+318    	; 0x10ba <MQTTSerialize_connect+0x172>
     f7c:	60 e1       	ldi	r22, 0x10	; 16
     f7e:	ce 01       	movw	r24, r28
     f80:	01 96       	adiw	r24, 0x01	; 1
     f82:	0a d1       	rcall	.+532    	; 0x1198 <writeChar>
     f84:	b7 01       	movw	r22, r14
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	9a 81       	ldd	r25, Y+2	; 0x02
     f8a:	d1 d0       	rcall	.+418    	; 0x112e <MQTTPacket_encode>
     f8c:	29 81       	ldd	r18, Y+1	; 0x01
     f8e:	3a 81       	ldd	r19, Y+2	; 0x02
     f90:	82 0f       	add	r24, r18
     f92:	93 1f       	adc	r25, r19
     f94:	9a 83       	std	Y+2, r25	; 0x02
     f96:	89 83       	std	Y+1, r24	; 0x01
     f98:	f8 01       	movw	r30, r16
     f9a:	86 81       	ldd	r24, Z+6	; 0x06
     f9c:	84 30       	cpi	r24, 0x04	; 4
     f9e:	51 f4       	brne	.+20     	; 0xfb4 <MQTTSerialize_connect+0x6c>
     fa0:	6b ee       	ldi	r22, 0xEB	; 235
     fa2:	73 e0       	ldi	r23, 0x03	; 3
     fa4:	ce 01       	movw	r24, r28
     fa6:	01 96       	adiw	r24, 0x01	; 1
     fa8:	20 d1       	rcall	.+576    	; 0x11ea <writeCString>
     faa:	64 e0       	ldi	r22, 0x04	; 4
     fac:	ce 01       	movw	r24, r28
     fae:	01 96       	adiw	r24, 0x01	; 1
     fb0:	f3 d0       	rcall	.+486    	; 0x1198 <writeChar>
     fb2:	09 c0       	rjmp	.+18     	; 0xfc6 <MQTTSerialize_connect+0x7e>
     fb4:	60 ef       	ldi	r22, 0xF0	; 240
     fb6:	73 e0       	ldi	r23, 0x03	; 3
     fb8:	ce 01       	movw	r24, r28
     fba:	01 96       	adiw	r24, 0x01	; 1
     fbc:	16 d1       	rcall	.+556    	; 0x11ea <writeCString>
     fbe:	63 e0       	ldi	r22, 0x03	; 3
     fc0:	ce 01       	movw	r24, r28
     fc2:	01 96       	adiw	r24, 0x01	; 1
     fc4:	e9 d0       	rcall	.+466    	; 0x1198 <writeChar>
     fc6:	f1 2c       	mov	r15, r1
     fc8:	f8 01       	movw	r30, r16
     fca:	87 85       	ldd	r24, Z+15	; 0x0f
     fcc:	80 fb       	bst	r24, 0
     fce:	f1 f8       	bld	r15, 1
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 89       	ldd	r25, Z+16	; 0x10
     fd4:	91 11       	cpse	r25, r1
     fd6:	01 c0       	rjmp	.+2      	; 0xfda <MQTTSerialize_connect+0x92>
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	80 fb       	bst	r24, 0
     fdc:	f2 f8       	bld	r15, 2
     fde:	f2 fe       	sbrs	r15, 2
     fe0:	0d c0       	rjmp	.+26     	; 0xffc <MQTTSerialize_connect+0xb4>
     fe2:	f8 01       	movw	r30, r16
     fe4:	84 a1       	ldd	r24, Z+36	; 0x24
     fe6:	83 70       	andi	r24, 0x03	; 3
     fe8:	88 0f       	add	r24, r24
     fea:	88 0f       	add	r24, r24
     fec:	88 0f       	add	r24, r24
     fee:	9f 2d       	mov	r25, r15
     ff0:	97 7e       	andi	r25, 0xE7	; 231
     ff2:	f9 2e       	mov	r15, r25
     ff4:	f8 2a       	or	r15, r24
     ff6:	83 a1       	ldd	r24, Z+35	; 0x23
     ff8:	80 fb       	bst	r24, 0
     ffa:	f5 f8       	bld	r15, 5
     ffc:	f8 01       	movw	r30, r16
     ffe:	85 a1       	ldd	r24, Z+37	; 0x25
    1000:	96 a1       	ldd	r25, Z+38	; 0x26
    1002:	89 2b       	or	r24, r25
    1004:	21 f4       	brne	.+8      	; 0x100e <MQTTSerialize_connect+0xc6>
    1006:	81 a5       	ldd	r24, Z+41	; 0x29
    1008:	92 a5       	ldd	r25, Z+42	; 0x2a
    100a:	89 2b       	or	r24, r25
    100c:	11 f0       	breq	.+4      	; 0x1012 <MQTTSerialize_connect+0xca>
    100e:	68 94       	set
    1010:	f7 f8       	bld	r15, 7
    1012:	f8 01       	movw	r30, r16
    1014:	83 a5       	ldd	r24, Z+43	; 0x2b
    1016:	94 a5       	ldd	r25, Z+44	; 0x2c
    1018:	89 2b       	or	r24, r25
    101a:	21 f4       	brne	.+8      	; 0x1024 <MQTTSerialize_connect+0xdc>
    101c:	87 a5       	ldd	r24, Z+47	; 0x2f
    101e:	90 a9       	ldd	r25, Z+48	; 0x30
    1020:	89 2b       	or	r24, r25
    1022:	11 f0       	breq	.+4      	; 0x1028 <MQTTSerialize_connect+0xe0>
    1024:	68 94       	set
    1026:	f6 f8       	bld	r15, 6
    1028:	6f 2d       	mov	r22, r15
    102a:	ce 01       	movw	r24, r28
    102c:	01 96       	adiw	r24, 0x01	; 1
    102e:	b4 d0       	rcall	.+360    	; 0x1198 <writeChar>
    1030:	f8 01       	movw	r30, r16
    1032:	65 85       	ldd	r22, Z+13	; 0x0d
    1034:	76 85       	ldd	r23, Z+14	; 0x0e
    1036:	ce 01       	movw	r24, r28
    1038:	01 96       	adiw	r24, 0x01	; 1
    103a:	b8 d0       	rcall	.+368    	; 0x11ac <writeInt>
    103c:	f8 01       	movw	r30, r16
    103e:	27 81       	ldd	r18, Z+7	; 0x07
    1040:	30 85       	ldd	r19, Z+8	; 0x08
    1042:	41 85       	ldd	r20, Z+9	; 0x09
    1044:	52 85       	ldd	r21, Z+10	; 0x0a
    1046:	63 85       	ldd	r22, Z+11	; 0x0b
    1048:	74 85       	ldd	r23, Z+12	; 0x0c
    104a:	ce 01       	movw	r24, r28
    104c:	01 96       	adiw	r24, 0x01	; 1
    104e:	f2 d0       	rcall	.+484    	; 0x1234 <writeMQTTString>
    1050:	f8 01       	movw	r30, r16
    1052:	80 89       	ldd	r24, Z+16	; 0x10
    1054:	88 23       	and	r24, r24
    1056:	99 f0       	breq	.+38     	; 0x107e <MQTTSerialize_connect+0x136>
    1058:	27 89       	ldd	r18, Z+23	; 0x17
    105a:	30 8d       	ldd	r19, Z+24	; 0x18
    105c:	41 8d       	ldd	r20, Z+25	; 0x19
    105e:	52 8d       	ldd	r21, Z+26	; 0x1a
    1060:	63 8d       	ldd	r22, Z+27	; 0x1b
    1062:	74 8d       	ldd	r23, Z+28	; 0x1c
    1064:	ce 01       	movw	r24, r28
    1066:	01 96       	adiw	r24, 0x01	; 1
    1068:	e5 d0       	rcall	.+458    	; 0x1234 <writeMQTTString>
    106a:	f8 01       	movw	r30, r16
    106c:	25 8d       	ldd	r18, Z+29	; 0x1d
    106e:	36 8d       	ldd	r19, Z+30	; 0x1e
    1070:	47 8d       	ldd	r20, Z+31	; 0x1f
    1072:	50 a1       	ldd	r21, Z+32	; 0x20
    1074:	61 a1       	ldd	r22, Z+33	; 0x21
    1076:	72 a1       	ldd	r23, Z+34	; 0x22
    1078:	ce 01       	movw	r24, r28
    107a:	01 96       	adiw	r24, 0x01	; 1
    107c:	db d0       	rcall	.+438    	; 0x1234 <writeMQTTString>
    107e:	ef 2c       	mov	r14, r15
    1080:	ff 20       	and	r15, r15
    1082:	54 f4       	brge	.+20     	; 0x1098 <MQTTSerialize_connect+0x150>
    1084:	f8 01       	movw	r30, r16
    1086:	25 a1       	ldd	r18, Z+37	; 0x25
    1088:	36 a1       	ldd	r19, Z+38	; 0x26
    108a:	47 a1       	ldd	r20, Z+39	; 0x27
    108c:	50 a5       	ldd	r21, Z+40	; 0x28
    108e:	61 a5       	ldd	r22, Z+41	; 0x29
    1090:	72 a5       	ldd	r23, Z+42	; 0x2a
    1092:	ce 01       	movw	r24, r28
    1094:	01 96       	adiw	r24, 0x01	; 1
    1096:	ce d0       	rcall	.+412    	; 0x1234 <writeMQTTString>
    1098:	e6 fe       	sbrs	r14, 6
    109a:	0a c0       	rjmp	.+20     	; 0x10b0 <MQTTSerialize_connect+0x168>
    109c:	f8 01       	movw	r30, r16
    109e:	23 a5       	ldd	r18, Z+43	; 0x2b
    10a0:	34 a5       	ldd	r19, Z+44	; 0x2c
    10a2:	45 a5       	ldd	r20, Z+45	; 0x2d
    10a4:	56 a5       	ldd	r21, Z+46	; 0x2e
    10a6:	67 a5       	ldd	r22, Z+47	; 0x2f
    10a8:	70 a9       	ldd	r23, Z+48	; 0x30
    10aa:	ce 01       	movw	r24, r28
    10ac:	01 96       	adiw	r24, 0x01	; 1
    10ae:	c2 d0       	rcall	.+388    	; 0x1234 <writeMQTTString>
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	9a 81       	ldd	r25, Y+2	; 0x02
    10b4:	8c 19       	sub	r24, r12
    10b6:	9d 09       	sbc	r25, r13
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <MQTTSerialize_connect+0x176>
    10ba:	8e ef       	ldi	r24, 0xFE	; 254
    10bc:	9f ef       	ldi	r25, 0xFF	; 255
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	df 91       	pop	r29
    10c4:	cf 91       	pop	r28
    10c6:	1f 91       	pop	r17
    10c8:	0f 91       	pop	r16
    10ca:	ff 90       	pop	r15
    10cc:	ef 90       	pop	r14
    10ce:	df 90       	pop	r13
    10d0:	cf 90       	pop	r12
    10d2:	bf 90       	pop	r11
    10d4:	af 90       	pop	r10
    10d6:	08 95       	ret

000010d8 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
    10d8:	0f 93       	push	r16
    10da:	1f 93       	push	r17
    10dc:	cf 93       	push	r28
    10de:	df 93       	push	r29
    10e0:	00 d0       	rcall	.+0      	; 0x10e2 <MQTTSerialize_zero+0xa>
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
    10e6:	9a 83       	std	Y+2, r25	; 0x02
    10e8:	89 83       	std	Y+1, r24	; 0x01

	FUNC_ENTRY;
	if (buflen < 2)
    10ea:	62 30       	cpi	r22, 0x02	; 2
    10ec:	71 05       	cpc	r23, r1
    10ee:	9c f0       	brlt	.+38     	; 0x1116 <MQTTSerialize_zero+0x3e>
    10f0:	8c 01       	movw	r16, r24
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
    10f2:	64 2f       	mov	r22, r20
    10f4:	62 95       	swap	r22
    10f6:	60 7f       	andi	r22, 0xF0	; 240
	writeChar(&ptr, header.byte); /* write header */
    10f8:	ce 01       	movw	r24, r28
    10fa:	01 96       	adiw	r24, 0x01	; 1
    10fc:	4d d0       	rcall	.+154    	; 0x1198 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	70 e0       	ldi	r23, 0x00	; 0
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	9a 81       	ldd	r25, Y+2	; 0x02
    1106:	13 d0       	rcall	.+38     	; 0x112e <MQTTPacket_encode>
	rc = ptr - buf;
    1108:	29 81       	ldd	r18, Y+1	; 0x01
    110a:	3a 81       	ldd	r19, Y+2	; 0x02
    110c:	82 0f       	add	r24, r18
    110e:	93 1f       	adc	r25, r19
    1110:	80 1b       	sub	r24, r16
    1112:	91 0b       	sbc	r25, r17
    1114:	02 c0       	rjmp	.+4      	; 0x111a <MQTTSerialize_zero+0x42>
	unsigned char *ptr = buf;

	FUNC_ENTRY;
	if (buflen < 2)
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    1116:	8e ef       	ldi	r24, 0xFE	; 254
    1118:	9f ef       	ldi	r25, 0xFF	; 255
	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
	rc = ptr - buf;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	df 91       	pop	r29
    1120:	cf 91       	pop	r28
    1122:	1f 91       	pop	r17
    1124:	0f 91       	pop	r16
    1126:	08 95       	ret

00001128 <MQTTSerialize_disconnect>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
    1128:	4e e0       	ldi	r20, 0x0E	; 14
    112a:	d6 cf       	rjmp	.-84     	; 0x10d8 <MQTTSerialize_zero>
}
    112c:	08 95       	ret

0000112e <MQTTPacket_encode>:
		}
	}
	mqttstring->cstring = NULL;
	FUNC_EXIT_RC(rc);
	return rc;
}
    112e:	dc 01       	movw	r26, r24
    1130:	e0 e0       	ldi	r30, 0x00	; 0
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	9b 01       	movw	r18, r22
    1136:	2f 77       	andi	r18, 0x7F	; 127
    1138:	30 78       	andi	r19, 0x80	; 128
    113a:	33 23       	and	r19, r19
    113c:	34 f4       	brge	.+12     	; 0x114a <MQTTPacket_encode+0x1c>
    113e:	21 50       	subi	r18, 0x01	; 1
    1140:	31 09       	sbc	r19, r1
    1142:	20 68       	ori	r18, 0x80	; 128
    1144:	3f 6f       	ori	r19, 0xFF	; 255
    1146:	2f 5f       	subi	r18, 0xFF	; 255
    1148:	3f 4f       	sbci	r19, 0xFF	; 255
    114a:	ab 01       	movw	r20, r22
    114c:	77 23       	and	r23, r23
    114e:	14 f4       	brge	.+4      	; 0x1154 <MQTTPacket_encode+0x26>
    1150:	41 58       	subi	r20, 0x81	; 129
    1152:	5f 4f       	sbci	r21, 0xFF	; 255
    1154:	ba 01       	movw	r22, r20
    1156:	66 0f       	add	r22, r22
    1158:	67 2f       	mov	r22, r23
    115a:	66 1f       	adc	r22, r22
    115c:	77 0b       	sbc	r23, r23
    115e:	16 16       	cp	r1, r22
    1160:	17 06       	cpc	r1, r23
    1162:	24 f4       	brge	.+8      	; 0x116c <MQTTPacket_encode+0x3e>
    1164:	31 96       	adiw	r30, 0x01	; 1
    1166:	20 68       	ori	r18, 0x80	; 128
    1168:	2d 93       	st	X+, r18
    116a:	e4 cf       	rjmp	.-56     	; 0x1134 <MQTTPacket_encode+0x6>
    116c:	dc 01       	movw	r26, r24
    116e:	ae 0f       	add	r26, r30
    1170:	bf 1f       	adc	r27, r31
    1172:	2c 93       	st	X, r18
    1174:	cf 01       	movw	r24, r30
    1176:	01 96       	adiw	r24, 0x01	; 1
    1178:	08 95       	ret

0000117a <MQTTPacket_len>:
    117a:	9c 01       	movw	r18, r24
    117c:	2f 5f       	subi	r18, 0xFF	; 255
    117e:	3f 4f       	sbci	r19, 0xFF	; 255
    1180:	20 38       	cpi	r18, 0x80	; 128
    1182:	31 05       	cpc	r19, r1
    1184:	14 f4       	brge	.+4      	; 0x118a <MQTTPacket_len+0x10>
    1186:	02 96       	adiw	r24, 0x02	; 2
    1188:	08 95       	ret
    118a:	21 15       	cp	r18, r1
    118c:	30 44       	sbci	r19, 0x40	; 64
    118e:	14 f4       	brge	.+4      	; 0x1194 <MQTTPacket_len+0x1a>
    1190:	03 96       	adiw	r24, 0x03	; 3
    1192:	08 95       	ret
    1194:	04 96       	adiw	r24, 0x04	; 4
    1196:	08 95       	ret

00001198 <writeChar>:
    1198:	fc 01       	movw	r30, r24
    119a:	a0 81       	ld	r26, Z
    119c:	b1 81       	ldd	r27, Z+1	; 0x01
    119e:	6c 93       	st	X, r22
    11a0:	80 81       	ld	r24, Z
    11a2:	91 81       	ldd	r25, Z+1	; 0x01
    11a4:	01 96       	adiw	r24, 0x01	; 1
    11a6:	91 83       	std	Z+1, r25	; 0x01
    11a8:	80 83       	st	Z, r24
    11aa:	08 95       	ret

000011ac <writeInt>:
    11ac:	fc 01       	movw	r30, r24
    11ae:	a0 81       	ld	r26, Z
    11b0:	b1 81       	ldd	r27, Z+1	; 0x01
    11b2:	cb 01       	movw	r24, r22
    11b4:	77 23       	and	r23, r23
    11b6:	14 f4       	brge	.+4      	; 0x11bc <writeInt+0x10>
    11b8:	81 50       	subi	r24, 0x01	; 1
    11ba:	9f 4f       	sbci	r25, 0xFF	; 255
    11bc:	9c 93       	st	X, r25
    11be:	a0 81       	ld	r26, Z
    11c0:	b1 81       	ldd	r27, Z+1	; 0x01
    11c2:	cd 01       	movw	r24, r26
    11c4:	01 96       	adiw	r24, 0x01	; 1
    11c6:	91 83       	std	Z+1, r25	; 0x01
    11c8:	80 83       	st	Z, r24
    11ca:	70 78       	andi	r23, 0x80	; 128
    11cc:	77 23       	and	r23, r23
    11ce:	2c f4       	brge	.+10     	; 0x11da <writeInt+0x2e>
    11d0:	61 50       	subi	r22, 0x01	; 1
    11d2:	71 09       	sbc	r23, r1
    11d4:	7f 6f       	ori	r23, 0xFF	; 255
    11d6:	6f 5f       	subi	r22, 0xFF	; 255
    11d8:	7f 4f       	sbci	r23, 0xFF	; 255
    11da:	11 96       	adiw	r26, 0x01	; 1
    11dc:	6c 93       	st	X, r22
    11de:	80 81       	ld	r24, Z
    11e0:	91 81       	ldd	r25, Z+1	; 0x01
    11e2:	01 96       	adiw	r24, 0x01	; 1
    11e4:	91 83       	std	Z+1, r25	; 0x01
    11e6:	80 83       	st	Z, r24
    11e8:	08 95       	ret

000011ea <writeCString>:
    11ea:	ef 92       	push	r14
    11ec:	ff 92       	push	r15
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	8c 01       	movw	r16, r24
    11f8:	7b 01       	movw	r14, r22
    11fa:	eb 01       	movw	r28, r22
    11fc:	09 90       	ld	r0, Y+
    11fe:	00 20       	and	r0, r0
    1200:	e9 f7       	brne	.-6      	; 0x11fc <writeCString+0x12>
    1202:	21 97       	sbiw	r28, 0x01	; 1
    1204:	c6 1b       	sub	r28, r22
    1206:	d7 0b       	sbc	r29, r23
    1208:	be 01       	movw	r22, r28
    120a:	d0 df       	rcall	.-96     	; 0x11ac <writeInt>
    120c:	ae 01       	movw	r20, r28
    120e:	b7 01       	movw	r22, r14
    1210:	f8 01       	movw	r30, r16
    1212:	80 81       	ld	r24, Z
    1214:	91 81       	ldd	r25, Z+1	; 0x01
    1216:	49 d5       	rcall	.+2706   	; 0x1caa <memcpy>
    1218:	f8 01       	movw	r30, r16
    121a:	80 81       	ld	r24, Z
    121c:	91 81       	ldd	r25, Z+1	; 0x01
    121e:	c8 0f       	add	r28, r24
    1220:	d9 1f       	adc	r29, r25
    1222:	d1 83       	std	Z+1, r29	; 0x01
    1224:	c0 83       	st	Z, r28
    1226:	df 91       	pop	r29
    1228:	cf 91       	pop	r28
    122a:	1f 91       	pop	r17
    122c:	0f 91       	pop	r16
    122e:	ff 90       	pop	r15
    1230:	ef 90       	pop	r14
    1232:	08 95       	ret

00001234 <writeMQTTString>:
    1234:	ef 92       	push	r14
    1236:	ff 92       	push	r15
    1238:	0f 93       	push	r16
    123a:	1f 93       	push	r17
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
    1240:	00 d0       	rcall	.+0      	; 0x1242 <writeMQTTString+0xe>
    1242:	00 d0       	rcall	.+0      	; 0x1244 <writeMQTTString+0x10>
    1244:	00 d0       	rcall	.+0      	; 0x1246 <writeMQTTString+0x12>
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	7c 01       	movw	r14, r24
    124c:	29 83       	std	Y+1, r18	; 0x01
    124e:	3a 83       	std	Y+2, r19	; 0x02
    1250:	4b 83       	std	Y+3, r20	; 0x03
    1252:	5c 83       	std	Y+4, r21	; 0x04
    1254:	6d 83       	std	Y+5, r22	; 0x05
    1256:	7e 83       	std	Y+6, r23	; 0x06
    1258:	0b 81       	ldd	r16, Y+3	; 0x03
    125a:	1c 81       	ldd	r17, Y+4	; 0x04
    125c:	10 16       	cp	r1, r16
    125e:	11 06       	cpc	r1, r17
    1260:	8c f4       	brge	.+34     	; 0x1284 <writeMQTTString+0x50>
    1262:	b8 01       	movw	r22, r16
    1264:	a3 df       	rcall	.-186    	; 0x11ac <writeInt>
    1266:	6d 81       	ldd	r22, Y+5	; 0x05
    1268:	7e 81       	ldd	r23, Y+6	; 0x06
    126a:	a8 01       	movw	r20, r16
    126c:	f7 01       	movw	r30, r14
    126e:	80 81       	ld	r24, Z
    1270:	91 81       	ldd	r25, Z+1	; 0x01
    1272:	1b d5       	rcall	.+2614   	; 0x1caa <memcpy>
    1274:	f7 01       	movw	r30, r14
    1276:	80 81       	ld	r24, Z
    1278:	91 81       	ldd	r25, Z+1	; 0x01
    127a:	08 0f       	add	r16, r24
    127c:	19 1f       	adc	r17, r25
    127e:	11 83       	std	Z+1, r17	; 0x01
    1280:	00 83       	st	Z, r16
    1282:	0a c0       	rjmp	.+20     	; 0x1298 <writeMQTTString+0x64>
    1284:	69 81       	ldd	r22, Y+1	; 0x01
    1286:	7a 81       	ldd	r23, Y+2	; 0x02
    1288:	61 15       	cp	r22, r1
    128a:	71 05       	cpc	r23, r1
    128c:	11 f0       	breq	.+4      	; 0x1292 <writeMQTTString+0x5e>
    128e:	ad df       	rcall	.-166    	; 0x11ea <writeCString>
    1290:	03 c0       	rjmp	.+6      	; 0x1298 <writeMQTTString+0x64>
    1292:	60 e0       	ldi	r22, 0x00	; 0
    1294:	70 e0       	ldi	r23, 0x00	; 0
    1296:	8a df       	rcall	.-236    	; 0x11ac <writeInt>
    1298:	26 96       	adiw	r28, 0x06	; 6
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	de bf       	out	0x3e, r29	; 62
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	cd bf       	out	0x3d, r28	; 61
    12a4:	df 91       	pop	r29
    12a6:	cf 91       	pop	r28
    12a8:	1f 91       	pop	r17
    12aa:	0f 91       	pop	r16
    12ac:	ff 90       	pop	r15
    12ae:	ef 90       	pop	r14
    12b0:	08 95       	ret

000012b2 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	00 d0       	rcall	.+0      	; 0x12b8 <MQTTstrlen+0x6>
    12b8:	00 d0       	rcall	.+0      	; 0x12ba <MQTTstrlen+0x8>
    12ba:	00 d0       	rcall	.+0      	; 0x12bc <MQTTstrlen+0xa>
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
    12c0:	49 83       	std	Y+1, r20	; 0x01
    12c2:	5a 83       	std	Y+2, r21	; 0x02
    12c4:	6b 83       	std	Y+3, r22	; 0x03
    12c6:	7c 83       	std	Y+4, r23	; 0x04
    12c8:	8d 83       	std	Y+5, r24	; 0x05
    12ca:	9e 83       	std	Y+6, r25	; 0x06
    12cc:	a9 81       	ldd	r26, Y+1	; 0x01
    12ce:	ba 81       	ldd	r27, Y+2	; 0x02
	int rc = 0;

	if (mqttstring.cstring)
    12d0:	10 97       	sbiw	r26, 0x00	; 0
    12d2:	49 f0       	breq	.+18     	; 0x12e6 <MQTTstrlen+0x34>
		rc = strlen(mqttstring.cstring);
    12d4:	fd 01       	movw	r30, r26
    12d6:	01 90       	ld	r0, Z+
    12d8:	00 20       	and	r0, r0
    12da:	e9 f7       	brne	.-6      	; 0x12d6 <MQTTstrlen+0x24>
    12dc:	31 97       	sbiw	r30, 0x01	; 1
    12de:	cf 01       	movw	r24, r30
    12e0:	8a 1b       	sub	r24, r26
    12e2:	9b 0b       	sbc	r25, r27
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <MQTTstrlen+0x38>
	else
		rc = mqttstring.lenstring.len;
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	9c 81       	ldd	r25, Y+4	; 0x04
	return rc;
}
    12ea:	26 96       	adiw	r28, 0x06	; 6
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	f8 94       	cli
    12f0:	de bf       	out	0x3e, r29	; 62
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	cd bf       	out	0x3d, r28	; 61
    12f6:	df 91       	pop	r29
    12f8:	cf 91       	pop	r28
    12fa:	08 95       	ret

000012fc <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
    12fc:	ef 92       	push	r14
    12fe:	ff 92       	push	r15
    1300:	0f 93       	push	r16
    1302:	1f 93       	push	r17
    1304:	cf 93       	push	r28
    1306:	df 93       	push	r29
    1308:	00 d0       	rcall	.+0      	; 0x130a <MQTTSerialize_publishLength+0xe>
    130a:	00 d0       	rcall	.+0      	; 0x130c <MQTTSerialize_publishLength+0x10>
    130c:	00 d0       	rcall	.+0      	; 0x130e <MQTTSerialize_publishLength+0x12>
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	7c 01       	movw	r14, r24
    1314:	f4 2f       	mov	r31, r20
    1316:	e5 2f       	mov	r30, r21
    1318:	86 2f       	mov	r24, r22
    131a:	97 2f       	mov	r25, r23
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
    131c:	42 2f       	mov	r20, r18
    131e:	53 2f       	mov	r21, r19
    1320:	6f 2f       	mov	r22, r31
    1322:	7e 2f       	mov	r23, r30
    1324:	c6 df       	rcall	.-116    	; 0x12b2 <MQTTstrlen>
    1326:	02 96       	adiw	r24, 0x02	; 2
    1328:	80 0f       	add	r24, r16
    132a:	91 1f       	adc	r25, r17
	if (qos > 0)
    132c:	1e 14       	cp	r1, r14
    132e:	1f 04       	cpc	r1, r15
    1330:	0c f4       	brge	.+2      	; 0x1334 <MQTTSerialize_publishLength+0x38>
		len += 2; /* packetid */
    1332:	02 96       	adiw	r24, 0x02	; 2
	return len;
}
    1334:	26 96       	adiw	r28, 0x06	; 6
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	1f 91       	pop	r17
    1346:	0f 91       	pop	r16
    1348:	ff 90       	pop	r15
    134a:	ef 90       	pop	r14
    134c:	08 95       	ret

0000134e <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
    134e:	2f 92       	push	r2
    1350:	3f 92       	push	r3
    1352:	4f 92       	push	r4
    1354:	5f 92       	push	r5
    1356:	6f 92       	push	r6
    1358:	7f 92       	push	r7
    135a:	8f 92       	push	r8
    135c:	9f 92       	push	r9
    135e:	af 92       	push	r10
    1360:	bf 92       	push	r11
    1362:	cf 92       	push	r12
    1364:	df 92       	push	r13
    1366:	ef 92       	push	r14
    1368:	ff 92       	push	r15
    136a:	0f 93       	push	r16
    136c:	1f 93       	push	r17
    136e:	cf 93       	push	r28
    1370:	df 93       	push	r29
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
    1376:	2a 97       	sbiw	r28, 0x0a	; 10
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	f8 94       	cli
    137c:	de bf       	out	0x3e, r29	; 62
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	cd bf       	out	0x3d, r28	; 61
    1382:	2c 01       	movw	r4, r24
    1384:	1b 01       	movw	r2, r22
    1386:	49 87       	std	Y+9, r20	; 0x09
    1388:	39 01       	movw	r6, r18
    138a:	0a 87       	std	Y+10, r16	; 0x0a
    138c:	28 2d       	mov	r18, r8
    138e:	8b 82       	std	Y+3, r8	; 0x03
    1390:	39 2d       	mov	r19, r9
    1392:	9c 82       	std	Y+4, r9	; 0x04
    1394:	4a 2d       	mov	r20, r10
    1396:	ad 82       	std	Y+5, r10	; 0x05
    1398:	5b 2d       	mov	r21, r11
    139a:	be 82       	std	Y+6, r11	; 0x06
    139c:	6c 2d       	mov	r22, r12
    139e:	cf 82       	std	Y+7, r12	; 0x07
    13a0:	7d 2d       	mov	r23, r13
    13a2:	d8 86       	std	Y+8, r13	; 0x08
    13a4:	c9 a0       	ldd	r12, Y+33	; 0x21
    13a6:	da a0       	ldd	r13, Y+34	; 0x22
	unsigned char *ptr = buf;
    13a8:	9a 83       	std	Y+2, r25	; 0x02
    13aa:	89 83       	std	Y+1, r24	; 0x01
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
    13ac:	86 01       	movw	r16, r12
    13ae:	c3 01       	movw	r24, r6
    13b0:	a5 df       	rcall	.-182    	; 0x12fc <MQTTSerialize_publishLength>
    13b2:	8c 01       	movw	r16, r24
    13b4:	e2 de       	rcall	.-572    	; 0x117a <MQTTPacket_len>
    13b6:	28 16       	cp	r2, r24
    13b8:	39 06       	cpc	r3, r25
    13ba:	b4 f1       	brlt	.+108    	; 0x1428 <MQTTSerialize_publish+0xda>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
    13bc:	60 e3       	ldi	r22, 0x30	; 48
	header.bits.dup = dup;
    13be:	89 85       	ldd	r24, Y+9	; 0x09
    13c0:	80 fb       	bst	r24, 0
    13c2:	63 f9       	bld	r22, 3
	header.bits.qos = qos;
    13c4:	86 2d       	mov	r24, r6
    13c6:	83 70       	andi	r24, 0x03	; 3
    13c8:	88 0f       	add	r24, r24
    13ca:	69 7f       	andi	r22, 0xF9	; 249
    13cc:	68 2b       	or	r22, r24
	header.bits.retain = retained;
    13ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    13d0:	80 fb       	bst	r24, 0
	writeChar(&ptr, header.byte); /* write header */
    13d2:	60 f9       	bld	r22, 0
    13d4:	ce 01       	movw	r24, r28

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
    13d6:	01 96       	adiw	r24, 0x01	; 1
    13d8:	df de       	rcall	.-578    	; 0x1198 <writeChar>
    13da:	b8 01       	movw	r22, r16
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	9a 81       	ldd	r25, Y+2	; 0x02
    13e0:	a6 de       	rcall	.-692    	; 0x112e <MQTTPacket_encode>
    13e2:	29 81       	ldd	r18, Y+1	; 0x01
    13e4:	3a 81       	ldd	r19, Y+2	; 0x02
    13e6:	82 0f       	add	r24, r18
    13e8:	93 1f       	adc	r25, r19

	writeMQTTString(&ptr, topicName);
    13ea:	9a 83       	std	Y+2, r25	; 0x02
    13ec:	89 83       	std	Y+1, r24	; 0x01
    13ee:	2b 81       	ldd	r18, Y+3	; 0x03
    13f0:	3c 81       	ldd	r19, Y+4	; 0x04
    13f2:	4d 81       	ldd	r20, Y+5	; 0x05
    13f4:	5e 81       	ldd	r21, Y+6	; 0x06
    13f6:	6f 81       	ldd	r22, Y+7	; 0x07
    13f8:	78 85       	ldd	r23, Y+8	; 0x08
    13fa:	ce 01       	movw	r24, r28

	if (qos > 0)
    13fc:	01 96       	adiw	r24, 0x01	; 1
    13fe:	1a df       	rcall	.-460    	; 0x1234 <writeMQTTString>
		writeInt(&ptr, packetid);
    1400:	16 14       	cp	r1, r6
    1402:	17 04       	cpc	r1, r7
    1404:	24 f4       	brge	.+8      	; 0x140e <MQTTSerialize_publish+0xc0>
    1406:	b7 01       	movw	r22, r14

	memcpy(ptr, payload, payloadlen);
    1408:	ce 01       	movw	r24, r28
    140a:	01 96       	adiw	r24, 0x01	; 1
    140c:	cf de       	rcall	.-610    	; 0x11ac <writeInt>
    140e:	a6 01       	movw	r20, r12
    1410:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1412:	78 a1       	ldd	r23, Y+32	; 0x20
    1414:	89 81       	ldd	r24, Y+1	; 0x01
	ptr += payloadlen;

	rc = ptr - buf;
    1416:	9a 81       	ldd	r25, Y+2	; 0x02
    1418:	48 d4       	rcall	.+2192   	; 0x1caa <memcpy>
    141a:	89 81       	ldd	r24, Y+1	; 0x01
    141c:	9a 81       	ldd	r25, Y+2	; 0x02
    141e:	8c 0d       	add	r24, r12
    1420:	9d 1d       	adc	r25, r13
    1422:	84 19       	sub	r24, r4
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    1424:	95 09       	sbc	r25, r5
    1426:	02 c0       	rjmp	.+4      	; 0x142c <MQTTSerialize_publish+0xde>
	rc = ptr - buf;

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    1428:	8e ef       	ldi	r24, 0xFE	; 254
    142a:	9f ef       	ldi	r25, 0xFF	; 255
    142c:	2a 96       	adiw	r28, 0x0a	; 10
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	f8 94       	cli
    1432:	de bf       	out	0x3e, r29	; 62
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	cd bf       	out	0x3d, r28	; 61
    1438:	df 91       	pop	r29
    143a:	cf 91       	pop	r28
    143c:	1f 91       	pop	r17
    143e:	0f 91       	pop	r16
    1440:	ff 90       	pop	r15
    1442:	ef 90       	pop	r14
    1444:	df 90       	pop	r13
    1446:	cf 90       	pop	r12
    1448:	bf 90       	pop	r11
    144a:	af 90       	pop	r10
    144c:	9f 90       	pop	r9
    144e:	8f 90       	pop	r8
    1450:	7f 90       	pop	r7
    1452:	6f 90       	pop	r6
    1454:	5f 90       	pop	r5
    1456:	4f 90       	pop	r4
    1458:	3f 90       	pop	r3
    145a:	2f 90       	pop	r2
    145c:	08 95       	ret

0000145e <mqtt_packet>:
#include "string.h"
#include "MQTT_functions.h" 

/////////////MQTT////////////////////
int mqtt_packet(char *payload, char *package, int buflen)
{
    145e:	2f 92       	push	r2
    1460:	3f 92       	push	r3
    1462:	4f 92       	push	r4
    1464:	5f 92       	push	r5
    1466:	6f 92       	push	r6
    1468:	7f 92       	push	r7
    146a:	8f 92       	push	r8
    146c:	9f 92       	push	r9
    146e:	af 92       	push	r10
    1470:	bf 92       	push	r11
    1472:	cf 92       	push	r12
    1474:	df 92       	push	r13
    1476:	ef 92       	push	r14
    1478:	ff 92       	push	r15
    147a:	0f 93       	push	r16
    147c:	1f 93       	push	r17
    147e:	cf 93       	push	r28
    1480:	df 93       	push	r29
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
    1486:	e7 97       	sbiw	r28, 0x37	; 55
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	f8 94       	cli
    148c:	de bf       	out	0x3e, r29	; 62
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	cd bf       	out	0x3d, r28	; 61
    1492:	f8 2e       	mov	r15, r24
    1494:	e9 2e       	mov	r14, r25
    1496:	1b 01       	movw	r2, r22
    1498:	2a 01       	movw	r4, r20
	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
    149a:	81 e3       	ldi	r24, 0x31	; 49
    149c:	e9 e0       	ldi	r30, 0x09	; 9
    149e:	f1 e0       	ldi	r31, 0x01	; 1
    14a0:	de 01       	movw	r26, r28
    14a2:	11 96       	adiw	r26, 0x01	; 1
    14a4:	01 90       	ld	r0, Z+
    14a6:	0d 92       	st	X+, r0
    14a8:	8a 95       	dec	r24
    14aa:	e1 f7       	brne	.-8      	; 0x14a4 <mqtt_packet+0x46>
	
	//volatile int buflen = sizeof(&package);
	char buf[256];
	//buflen = sizeof(buf);
	MQTTString topicString = MQTTString_initializer;
    14ac:	1d aa       	std	Y+53, r1	; 0x35
    14ae:	1c aa       	std	Y+52, r1	; 0x34
    14b0:	1f aa       	std	Y+55, r1	; 0x37
    14b2:	1e aa       	std	Y+54, r1	; 0x36
	
	int payloadlen = strlen(payload);
    14b4:	ef 2d       	mov	r30, r15
    14b6:	f9 2f       	mov	r31, r25
    14b8:	df 01       	movw	r26, r30
    14ba:	0d 90       	ld	r0, X+
    14bc:	00 20       	and	r0, r0
    14be:	e9 f7       	brne	.-6      	; 0x14ba <mqtt_packet+0x5c>
    14c0:	11 97       	sbiw	r26, 0x01	; 1
    14c2:	8d 01       	movw	r16, r26
    14c4:	0e 1b       	sub	r16, r30
    14c6:	1f 0b       	sbc	r17, r31
	int len = 0;
	
	data.clientID.cstring = "LE";
    14c8:	87 ef       	ldi	r24, 0xF7	; 247
    14ca:	93 e0       	ldi	r25, 0x03	; 3
    14cc:	99 87       	std	Y+9, r25	; 0x09
    14ce:	88 87       	std	Y+8, r24	; 0x08
	data.keepAliveInterval = 20;
    14d0:	84 e1       	ldi	r24, 0x14	; 20
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	9f 87       	std	Y+15, r25	; 0x0f
    14d6:	8e 87       	std	Y+14, r24	; 0x0e
	data.cleansession = 1;
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	88 8b       	std	Y+16, r24	; 0x10
	data.username.cstring = "";
    14dc:	8a ec       	ldi	r24, 0xCA	; 202
    14de:	92 e0       	ldi	r25, 0x02	; 2
    14e0:	9f a3       	std	Y+39, r25	; 0x27
    14e2:	8e a3       	std	Y+38, r24	; 0x26
	data.password.cstring = "";
    14e4:	9d a7       	std	Y+45, r25	; 0x2d
    14e6:	8c a7       	std	Y+44, r24	; 0x2c
	data.MQTTVersion = 4;
    14e8:	84 e0       	ldi	r24, 0x04	; 4
    14ea:	8f 83       	std	Y+7, r24	; 0x07

	len = MQTTSerialize_connect((unsigned char *)package, buflen, &data);
    14ec:	ae 01       	movw	r20, r28
    14ee:	4f 5f       	subi	r20, 0xFF	; 255
    14f0:	5f 4f       	sbci	r21, 0xFF	; 255
    14f2:	b2 01       	movw	r22, r4
    14f4:	c1 01       	movw	r24, r2
    14f6:	28 dd       	rcall	.-1456   	; 0xf48 <MQTTSerialize_connect>
    14f8:	3c 01       	movw	r6, r24
	
	topicString.cstring = "LE/0"; //MAKE A GENERAL CONFIGUREATION OF THIS PARAMETER
    14fa:	8a ef       	ldi	r24, 0xFA	; 250
    14fc:	93 e0       	ldi	r25, 0x03	; 3
    14fe:	9b ab       	std	Y+51, r25	; 0x33
    1500:	8a ab       	std	Y+50, r24	; 0x32
// 	strcpy(mystring, topic);
// 	strcat(mystring, subtopic);
// 	topicString.cstring = mystring;
	
	
	len += MQTTSerialize_publish((unsigned char *)(package + len), buflen - len, 0, 0, 0, 0, topicString, (unsigned char *)payload, payloadlen);
    1502:	b2 01       	movw	r22, r4
    1504:	66 19       	sub	r22, r6
    1506:	77 09       	sbc	r23, r7
    1508:	1f 93       	push	r17
    150a:	0f 93       	push	r16
    150c:	ef 92       	push	r14
    150e:	ff 92       	push	r15
    1510:	8a a8       	ldd	r8, Y+50	; 0x32
    1512:	9b a8       	ldd	r9, Y+51	; 0x33
    1514:	ac a8       	ldd	r10, Y+52	; 0x34
    1516:	bd a8       	ldd	r11, Y+53	; 0x35
    1518:	ce a8       	ldd	r12, Y+54	; 0x36
    151a:	df a8       	ldd	r13, Y+55	; 0x37
    151c:	e1 2c       	mov	r14, r1
    151e:	f1 2c       	mov	r15, r1
    1520:	00 e0       	ldi	r16, 0x00	; 0
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	40 e0       	ldi	r20, 0x00	; 0
    1528:	c1 01       	movw	r24, r2
    152a:	86 0d       	add	r24, r6
    152c:	97 1d       	adc	r25, r7
    152e:	0f df       	rcall	.-482    	; 0x134e <MQTTSerialize_publish>
    1530:	68 0e       	add	r6, r24
    1532:	79 1e       	adc	r7, r25
		
	len += MQTTSerialize_disconnect((unsigned char *)(package + len), buflen - len);
    1534:	b2 01       	movw	r22, r4
    1536:	66 19       	sub	r22, r6
    1538:	77 09       	sbc	r23, r7
    153a:	c1 01       	movw	r24, r2
    153c:	86 0d       	add	r24, r6
    153e:	97 1d       	adc	r25, r7
    1540:	f3 dd       	rcall	.-1050   	; 0x1128 <MQTTSerialize_disconnect>
	
	exit:
	
	//return 0;
	return len;
    1542:	0f 90       	pop	r0
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
}
    154a:	86 0d       	add	r24, r6
    154c:	97 1d       	adc	r25, r7
    154e:	e7 96       	adiw	r28, 0x37	; 55
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	f8 94       	cli
    1554:	de bf       	out	0x3e, r29	; 62
    1556:	0f be       	out	0x3f, r0	; 63
    1558:	cd bf       	out	0x3d, r28	; 61
    155a:	df 91       	pop	r29
    155c:	cf 91       	pop	r28
    155e:	1f 91       	pop	r17
    1560:	0f 91       	pop	r16
    1562:	ff 90       	pop	r15
    1564:	ef 90       	pop	r14
    1566:	df 90       	pop	r13
    1568:	cf 90       	pop	r12
    156a:	bf 90       	pop	r11
    156c:	af 90       	pop	r10
    156e:	9f 90       	pop	r9
    1570:	8f 90       	pop	r8
    1572:	7f 90       	pop	r7
    1574:	6f 90       	pop	r6
    1576:	5f 90       	pop	r5
    1578:	4f 90       	pop	r4
    157a:	3f 90       	pop	r3
    157c:	2f 90       	pop	r2
    157e:	08 95       	ret

00001580 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    1580:	08 95       	ret

00001582 <__cmpsf2>:
    1582:	40 d0       	rcall	.+128    	; 0x1604 <__fp_cmp>
    1584:	08 f4       	brcc	.+2      	; 0x1588 <__cmpsf2+0x6>
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	08 95       	ret

0000158a <__floatunsisf>:
    158a:	e8 94       	clt
    158c:	09 c0       	rjmp	.+18     	; 0x15a0 <__floatsisf+0x12>

0000158e <__floatsisf>:
    158e:	97 fb       	bst	r25, 7
    1590:	3e f4       	brtc	.+14     	; 0x15a0 <__floatsisf+0x12>
    1592:	90 95       	com	r25
    1594:	80 95       	com	r24
    1596:	70 95       	com	r23
    1598:	61 95       	neg	r22
    159a:	7f 4f       	sbci	r23, 0xFF	; 255
    159c:	8f 4f       	sbci	r24, 0xFF	; 255
    159e:	9f 4f       	sbci	r25, 0xFF	; 255
    15a0:	99 23       	and	r25, r25
    15a2:	a9 f0       	breq	.+42     	; 0x15ce <__floatsisf+0x40>
    15a4:	f9 2f       	mov	r31, r25
    15a6:	96 e9       	ldi	r25, 0x96	; 150
    15a8:	bb 27       	eor	r27, r27
    15aa:	93 95       	inc	r25
    15ac:	f6 95       	lsr	r31
    15ae:	87 95       	ror	r24
    15b0:	77 95       	ror	r23
    15b2:	67 95       	ror	r22
    15b4:	b7 95       	ror	r27
    15b6:	f1 11       	cpse	r31, r1
    15b8:	f8 cf       	rjmp	.-16     	; 0x15aa <__floatsisf+0x1c>
    15ba:	fa f4       	brpl	.+62     	; 0x15fa <__floatsisf+0x6c>
    15bc:	bb 0f       	add	r27, r27
    15be:	11 f4       	brne	.+4      	; 0x15c4 <__floatsisf+0x36>
    15c0:	60 ff       	sbrs	r22, 0
    15c2:	1b c0       	rjmp	.+54     	; 0x15fa <__floatsisf+0x6c>
    15c4:	6f 5f       	subi	r22, 0xFF	; 255
    15c6:	7f 4f       	sbci	r23, 0xFF	; 255
    15c8:	8f 4f       	sbci	r24, 0xFF	; 255
    15ca:	9f 4f       	sbci	r25, 0xFF	; 255
    15cc:	16 c0       	rjmp	.+44     	; 0x15fa <__floatsisf+0x6c>
    15ce:	88 23       	and	r24, r24
    15d0:	11 f0       	breq	.+4      	; 0x15d6 <__floatsisf+0x48>
    15d2:	96 e9       	ldi	r25, 0x96	; 150
    15d4:	11 c0       	rjmp	.+34     	; 0x15f8 <__floatsisf+0x6a>
    15d6:	77 23       	and	r23, r23
    15d8:	21 f0       	breq	.+8      	; 0x15e2 <__floatsisf+0x54>
    15da:	9e e8       	ldi	r25, 0x8E	; 142
    15dc:	87 2f       	mov	r24, r23
    15de:	76 2f       	mov	r23, r22
    15e0:	05 c0       	rjmp	.+10     	; 0x15ec <__floatsisf+0x5e>
    15e2:	66 23       	and	r22, r22
    15e4:	71 f0       	breq	.+28     	; 0x1602 <__floatsisf+0x74>
    15e6:	96 e8       	ldi	r25, 0x86	; 134
    15e8:	86 2f       	mov	r24, r22
    15ea:	70 e0       	ldi	r23, 0x00	; 0
    15ec:	60 e0       	ldi	r22, 0x00	; 0
    15ee:	2a f0       	brmi	.+10     	; 0x15fa <__floatsisf+0x6c>
    15f0:	9a 95       	dec	r25
    15f2:	66 0f       	add	r22, r22
    15f4:	77 1f       	adc	r23, r23
    15f6:	88 1f       	adc	r24, r24
    15f8:	da f7       	brpl	.-10     	; 0x15f0 <__floatsisf+0x62>
    15fa:	88 0f       	add	r24, r24
    15fc:	96 95       	lsr	r25
    15fe:	87 95       	ror	r24
    1600:	97 f9       	bld	r25, 7
    1602:	08 95       	ret

00001604 <__fp_cmp>:
    1604:	99 0f       	add	r25, r25
    1606:	00 08       	sbc	r0, r0
    1608:	55 0f       	add	r21, r21
    160a:	aa 0b       	sbc	r26, r26
    160c:	e0 e8       	ldi	r30, 0x80	; 128
    160e:	fe ef       	ldi	r31, 0xFE	; 254
    1610:	16 16       	cp	r1, r22
    1612:	17 06       	cpc	r1, r23
    1614:	e8 07       	cpc	r30, r24
    1616:	f9 07       	cpc	r31, r25
    1618:	c0 f0       	brcs	.+48     	; 0x164a <__fp_cmp+0x46>
    161a:	12 16       	cp	r1, r18
    161c:	13 06       	cpc	r1, r19
    161e:	e4 07       	cpc	r30, r20
    1620:	f5 07       	cpc	r31, r21
    1622:	98 f0       	brcs	.+38     	; 0x164a <__fp_cmp+0x46>
    1624:	62 1b       	sub	r22, r18
    1626:	73 0b       	sbc	r23, r19
    1628:	84 0b       	sbc	r24, r20
    162a:	95 0b       	sbc	r25, r21
    162c:	39 f4       	brne	.+14     	; 0x163c <__fp_cmp+0x38>
    162e:	0a 26       	eor	r0, r26
    1630:	61 f0       	breq	.+24     	; 0x164a <__fp_cmp+0x46>
    1632:	23 2b       	or	r18, r19
    1634:	24 2b       	or	r18, r20
    1636:	25 2b       	or	r18, r21
    1638:	21 f4       	brne	.+8      	; 0x1642 <__fp_cmp+0x3e>
    163a:	08 95       	ret
    163c:	0a 26       	eor	r0, r26
    163e:	09 f4       	brne	.+2      	; 0x1642 <__fp_cmp+0x3e>
    1640:	a1 40       	sbci	r26, 0x01	; 1
    1642:	a6 95       	lsr	r26
    1644:	8f ef       	ldi	r24, 0xFF	; 255
    1646:	81 1d       	adc	r24, r1
    1648:	81 1d       	adc	r24, r1
    164a:	08 95       	ret

0000164c <__gesf2>:
    164c:	db df       	rcall	.-74     	; 0x1604 <__fp_cmp>
    164e:	08 f4       	brcc	.+2      	; 0x1652 <__gesf2+0x6>
    1650:	8f ef       	ldi	r24, 0xFF	; 255
    1652:	08 95       	ret

00001654 <pow>:
    1654:	fa 01       	movw	r30, r20
    1656:	ee 0f       	add	r30, r30
    1658:	ff 1f       	adc	r31, r31
    165a:	30 96       	adiw	r30, 0x00	; 0
    165c:	21 05       	cpc	r18, r1
    165e:	31 05       	cpc	r19, r1
    1660:	99 f1       	breq	.+102    	; 0x16c8 <pow+0x74>
    1662:	61 15       	cp	r22, r1
    1664:	71 05       	cpc	r23, r1
    1666:	61 f4       	brne	.+24     	; 0x1680 <pow+0x2c>
    1668:	80 38       	cpi	r24, 0x80	; 128
    166a:	bf e3       	ldi	r27, 0x3F	; 63
    166c:	9b 07       	cpc	r25, r27
    166e:	49 f1       	breq	.+82     	; 0x16c2 <pow+0x6e>
    1670:	68 94       	set
    1672:	90 38       	cpi	r25, 0x80	; 128
    1674:	81 05       	cpc	r24, r1
    1676:	61 f0       	breq	.+24     	; 0x1690 <pow+0x3c>
    1678:	80 38       	cpi	r24, 0x80	; 128
    167a:	bf ef       	ldi	r27, 0xFF	; 255
    167c:	9b 07       	cpc	r25, r27
    167e:	41 f0       	breq	.+16     	; 0x1690 <pow+0x3c>
    1680:	99 23       	and	r25, r25
    1682:	42 f5       	brpl	.+80     	; 0x16d4 <pow+0x80>
    1684:	ff 3f       	cpi	r31, 0xFF	; 255
    1686:	e1 05       	cpc	r30, r1
    1688:	31 05       	cpc	r19, r1
    168a:	21 05       	cpc	r18, r1
    168c:	11 f1       	breq	.+68     	; 0x16d2 <pow+0x7e>
    168e:	e8 94       	clt
    1690:	08 94       	sec
    1692:	e7 95       	ror	r30
    1694:	d9 01       	movw	r26, r18
    1696:	aa 23       	and	r26, r26
    1698:	29 f4       	brne	.+10     	; 0x16a4 <pow+0x50>
    169a:	ab 2f       	mov	r26, r27
    169c:	be 2f       	mov	r27, r30
    169e:	f8 5f       	subi	r31, 0xF8	; 248
    16a0:	d0 f3       	brcs	.-12     	; 0x1696 <pow+0x42>
    16a2:	10 c0       	rjmp	.+32     	; 0x16c4 <pow+0x70>
    16a4:	ff 5f       	subi	r31, 0xFF	; 255
    16a6:	70 f4       	brcc	.+28     	; 0x16c4 <pow+0x70>
    16a8:	a6 95       	lsr	r26
    16aa:	e0 f7       	brcc	.-8      	; 0x16a4 <pow+0x50>
    16ac:	f7 39       	cpi	r31, 0x97	; 151
    16ae:	50 f0       	brcs	.+20     	; 0x16c4 <pow+0x70>
    16b0:	19 f0       	breq	.+6      	; 0x16b8 <pow+0x64>
    16b2:	ff 3a       	cpi	r31, 0xAF	; 175
    16b4:	38 f4       	brcc	.+14     	; 0x16c4 <pow+0x70>
    16b6:	9f 77       	andi	r25, 0x7F	; 127
    16b8:	9f 93       	push	r25
    16ba:	0c d0       	rcall	.+24     	; 0x16d4 <pow+0x80>
    16bc:	0f 90       	pop	r0
    16be:	07 fc       	sbrc	r0, 7
    16c0:	90 58       	subi	r25, 0x80	; 128
    16c2:	08 95       	ret
    16c4:	3e f0       	brts	.+14     	; 0x16d4 <pow+0x80>
    16c6:	49 c0       	rjmp	.+146    	; 0x175a <__fp_nan>
    16c8:	60 e0       	ldi	r22, 0x00	; 0
    16ca:	70 e0       	ldi	r23, 0x00	; 0
    16cc:	80 e8       	ldi	r24, 0x80	; 128
    16ce:	9f e3       	ldi	r25, 0x3F	; 63
    16d0:	08 95       	ret
    16d2:	4f e7       	ldi	r20, 0x7F	; 127
    16d4:	9f 77       	andi	r25, 0x7F	; 127
    16d6:	5f 93       	push	r21
    16d8:	4f 93       	push	r20
    16da:	3f 93       	push	r19
    16dc:	2f 93       	push	r18
    16de:	d0 d0       	rcall	.+416    	; 0x1880 <log>
    16e0:	2f 91       	pop	r18
    16e2:	3f 91       	pop	r19
    16e4:	4f 91       	pop	r20
    16e6:	5f 91       	pop	r21
    16e8:	3e d1       	rcall	.+636    	; 0x1966 <__mulsf3>
    16ea:	05 c0       	rjmp	.+10     	; 0x16f6 <exp>
    16ec:	19 f4       	brne	.+6      	; 0x16f4 <pow+0xa0>
    16ee:	0e f0       	brts	.+2      	; 0x16f2 <pow+0x9e>
    16f0:	2e c0       	rjmp	.+92     	; 0x174e <__fp_inf>
    16f2:	7d c0       	rjmp	.+250    	; 0x17ee <__fp_zero>
    16f4:	32 c0       	rjmp	.+100    	; 0x175a <__fp_nan>

000016f6 <exp>:
    16f6:	61 d0       	rcall	.+194    	; 0x17ba <__fp_splitA>
    16f8:	c8 f3       	brcs	.-14     	; 0x16ec <pow+0x98>
    16fa:	96 38       	cpi	r25, 0x86	; 134
    16fc:	c0 f7       	brcc	.-16     	; 0x16ee <pow+0x9a>
    16fe:	07 f8       	bld	r0, 7
    1700:	0f 92       	push	r0
    1702:	e8 94       	clt
    1704:	2b e3       	ldi	r18, 0x3B	; 59
    1706:	3a ea       	ldi	r19, 0xAA	; 170
    1708:	48 eb       	ldi	r20, 0xB8	; 184
    170a:	5f e7       	ldi	r21, 0x7F	; 127
    170c:	3a d1       	rcall	.+628    	; 0x1982 <__mulsf3_pse>
    170e:	0f 92       	push	r0
    1710:	0f 92       	push	r0
    1712:	0f 92       	push	r0
    1714:	4d b7       	in	r20, 0x3d	; 61
    1716:	5e b7       	in	r21, 0x3e	; 62
    1718:	0f 92       	push	r0
    171a:	f2 d0       	rcall	.+484    	; 0x1900 <modf>
    171c:	e4 e9       	ldi	r30, 0x94	; 148
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	1f d0       	rcall	.+62     	; 0x1760 <__fp_powser>
    1722:	4f 91       	pop	r20
    1724:	5f 91       	pop	r21
    1726:	ef 91       	pop	r30
    1728:	ff 91       	pop	r31
    172a:	e5 95       	asr	r30
    172c:	ee 1f       	adc	r30, r30
    172e:	ff 1f       	adc	r31, r31
    1730:	49 f0       	breq	.+18     	; 0x1744 <exp+0x4e>
    1732:	fe 57       	subi	r31, 0x7E	; 126
    1734:	e0 68       	ori	r30, 0x80	; 128
    1736:	44 27       	eor	r20, r20
    1738:	ee 0f       	add	r30, r30
    173a:	44 1f       	adc	r20, r20
    173c:	fa 95       	dec	r31
    173e:	e1 f7       	brne	.-8      	; 0x1738 <exp+0x42>
    1740:	41 95       	neg	r20
    1742:	55 0b       	sbc	r21, r21
    1744:	64 d0       	rcall	.+200    	; 0x180e <ldexp>
    1746:	0f 90       	pop	r0
    1748:	07 fe       	sbrs	r0, 7
    174a:	58 c0       	rjmp	.+176    	; 0x17fc <inverse>
    174c:	08 95       	ret

0000174e <__fp_inf>:
    174e:	97 f9       	bld	r25, 7
    1750:	9f 67       	ori	r25, 0x7F	; 127
    1752:	80 e8       	ldi	r24, 0x80	; 128
    1754:	70 e0       	ldi	r23, 0x00	; 0
    1756:	60 e0       	ldi	r22, 0x00	; 0
    1758:	08 95       	ret

0000175a <__fp_nan>:
    175a:	9f ef       	ldi	r25, 0xFF	; 255
    175c:	80 ec       	ldi	r24, 0xC0	; 192
    175e:	08 95       	ret

00001760 <__fp_powser>:
    1760:	df 93       	push	r29
    1762:	cf 93       	push	r28
    1764:	1f 93       	push	r17
    1766:	0f 93       	push	r16
    1768:	ff 92       	push	r15
    176a:	ef 92       	push	r14
    176c:	df 92       	push	r13
    176e:	7b 01       	movw	r14, r22
    1770:	8c 01       	movw	r16, r24
    1772:	68 94       	set
    1774:	05 c0       	rjmp	.+10     	; 0x1780 <__fp_powser+0x20>
    1776:	da 2e       	mov	r13, r26
    1778:	ef 01       	movw	r28, r30
    177a:	01 d1       	rcall	.+514    	; 0x197e <__mulsf3x>
    177c:	fe 01       	movw	r30, r28
    177e:	e8 94       	clt
    1780:	a5 91       	lpm	r26, Z+
    1782:	25 91       	lpm	r18, Z+
    1784:	35 91       	lpm	r19, Z+
    1786:	45 91       	lpm	r20, Z+
    1788:	55 91       	lpm	r21, Z+
    178a:	ae f3       	brts	.-22     	; 0x1776 <__fp_powser+0x16>
    178c:	ef 01       	movw	r28, r30
    178e:	60 d1       	rcall	.+704    	; 0x1a50 <__addsf3x>
    1790:	fe 01       	movw	r30, r28
    1792:	97 01       	movw	r18, r14
    1794:	a8 01       	movw	r20, r16
    1796:	da 94       	dec	r13
    1798:	79 f7       	brne	.-34     	; 0x1778 <__fp_powser+0x18>
    179a:	df 90       	pop	r13
    179c:	ef 90       	pop	r14
    179e:	ff 90       	pop	r15
    17a0:	0f 91       	pop	r16
    17a2:	1f 91       	pop	r17
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	08 95       	ret

000017aa <__fp_split3>:
    17aa:	57 fd       	sbrc	r21, 7
    17ac:	90 58       	subi	r25, 0x80	; 128
    17ae:	44 0f       	add	r20, r20
    17b0:	55 1f       	adc	r21, r21
    17b2:	59 f0       	breq	.+22     	; 0x17ca <__fp_splitA+0x10>
    17b4:	5f 3f       	cpi	r21, 0xFF	; 255
    17b6:	71 f0       	breq	.+28     	; 0x17d4 <__fp_splitA+0x1a>
    17b8:	47 95       	ror	r20

000017ba <__fp_splitA>:
    17ba:	88 0f       	add	r24, r24
    17bc:	97 fb       	bst	r25, 7
    17be:	99 1f       	adc	r25, r25
    17c0:	61 f0       	breq	.+24     	; 0x17da <__fp_splitA+0x20>
    17c2:	9f 3f       	cpi	r25, 0xFF	; 255
    17c4:	79 f0       	breq	.+30     	; 0x17e4 <__fp_splitA+0x2a>
    17c6:	87 95       	ror	r24
    17c8:	08 95       	ret
    17ca:	12 16       	cp	r1, r18
    17cc:	13 06       	cpc	r1, r19
    17ce:	14 06       	cpc	r1, r20
    17d0:	55 1f       	adc	r21, r21
    17d2:	f2 cf       	rjmp	.-28     	; 0x17b8 <__fp_split3+0xe>
    17d4:	46 95       	lsr	r20
    17d6:	f1 df       	rcall	.-30     	; 0x17ba <__fp_splitA>
    17d8:	08 c0       	rjmp	.+16     	; 0x17ea <__fp_splitA+0x30>
    17da:	16 16       	cp	r1, r22
    17dc:	17 06       	cpc	r1, r23
    17de:	18 06       	cpc	r1, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	f1 cf       	rjmp	.-30     	; 0x17c6 <__fp_splitA+0xc>
    17e4:	86 95       	lsr	r24
    17e6:	71 05       	cpc	r23, r1
    17e8:	61 05       	cpc	r22, r1
    17ea:	08 94       	sec
    17ec:	08 95       	ret

000017ee <__fp_zero>:
    17ee:	e8 94       	clt

000017f0 <__fp_szero>:
    17f0:	bb 27       	eor	r27, r27
    17f2:	66 27       	eor	r22, r22
    17f4:	77 27       	eor	r23, r23
    17f6:	cb 01       	movw	r24, r22
    17f8:	97 f9       	bld	r25, 7
    17fa:	08 95       	ret

000017fc <inverse>:
    17fc:	9b 01       	movw	r18, r22
    17fe:	ac 01       	movw	r20, r24
    1800:	60 e0       	ldi	r22, 0x00	; 0
    1802:	70 e0       	ldi	r23, 0x00	; 0
    1804:	80 e8       	ldi	r24, 0x80	; 128
    1806:	9f e3       	ldi	r25, 0x3F	; 63
    1808:	76 c1       	rjmp	.+748    	; 0x1af6 <__divsf3>
    180a:	a1 cf       	rjmp	.-190    	; 0x174e <__fp_inf>
    180c:	dc c1       	rjmp	.+952    	; 0x1bc6 <__fp_mpack>

0000180e <ldexp>:
    180e:	d5 df       	rcall	.-86     	; 0x17ba <__fp_splitA>
    1810:	e8 f3       	brcs	.-6      	; 0x180c <inverse+0x10>
    1812:	99 23       	and	r25, r25
    1814:	d9 f3       	breq	.-10     	; 0x180c <inverse+0x10>
    1816:	94 0f       	add	r25, r20
    1818:	51 1d       	adc	r21, r1
    181a:	bb f3       	brvs	.-18     	; 0x180a <inverse+0xe>
    181c:	91 50       	subi	r25, 0x01	; 1
    181e:	50 40       	sbci	r21, 0x00	; 0
    1820:	94 f0       	brlt	.+36     	; 0x1846 <ldexp+0x38>
    1822:	59 f0       	breq	.+22     	; 0x183a <ldexp+0x2c>
    1824:	88 23       	and	r24, r24
    1826:	32 f0       	brmi	.+12     	; 0x1834 <ldexp+0x26>
    1828:	66 0f       	add	r22, r22
    182a:	77 1f       	adc	r23, r23
    182c:	88 1f       	adc	r24, r24
    182e:	91 50       	subi	r25, 0x01	; 1
    1830:	50 40       	sbci	r21, 0x00	; 0
    1832:	c1 f7       	brne	.-16     	; 0x1824 <ldexp+0x16>
    1834:	9e 3f       	cpi	r25, 0xFE	; 254
    1836:	51 05       	cpc	r21, r1
    1838:	44 f7       	brge	.-48     	; 0x180a <inverse+0xe>
    183a:	88 0f       	add	r24, r24
    183c:	91 1d       	adc	r25, r1
    183e:	96 95       	lsr	r25
    1840:	87 95       	ror	r24
    1842:	97 f9       	bld	r25, 7
    1844:	08 95       	ret
    1846:	5f 3f       	cpi	r21, 0xFF	; 255
    1848:	ac f0       	brlt	.+42     	; 0x1874 <ldexp+0x66>
    184a:	98 3e       	cpi	r25, 0xE8	; 232
    184c:	9c f0       	brlt	.+38     	; 0x1874 <ldexp+0x66>
    184e:	bb 27       	eor	r27, r27
    1850:	86 95       	lsr	r24
    1852:	77 95       	ror	r23
    1854:	67 95       	ror	r22
    1856:	b7 95       	ror	r27
    1858:	08 f4       	brcc	.+2      	; 0x185c <ldexp+0x4e>
    185a:	b1 60       	ori	r27, 0x01	; 1
    185c:	93 95       	inc	r25
    185e:	c1 f7       	brne	.-16     	; 0x1850 <ldexp+0x42>
    1860:	bb 0f       	add	r27, r27
    1862:	58 f7       	brcc	.-42     	; 0x183a <ldexp+0x2c>
    1864:	11 f4       	brne	.+4      	; 0x186a <ldexp+0x5c>
    1866:	60 ff       	sbrs	r22, 0
    1868:	e8 cf       	rjmp	.-48     	; 0x183a <ldexp+0x2c>
    186a:	6f 5f       	subi	r22, 0xFF	; 255
    186c:	7f 4f       	sbci	r23, 0xFF	; 255
    186e:	8f 4f       	sbci	r24, 0xFF	; 255
    1870:	9f 4f       	sbci	r25, 0xFF	; 255
    1872:	e3 cf       	rjmp	.-58     	; 0x183a <ldexp+0x2c>
    1874:	bd cf       	rjmp	.-134    	; 0x17f0 <__fp_szero>
    1876:	0e f0       	brts	.+2      	; 0x187a <ldexp+0x6c>
    1878:	a6 c1       	rjmp	.+844    	; 0x1bc6 <__fp_mpack>
    187a:	6f cf       	rjmp	.-290    	; 0x175a <__fp_nan>
    187c:	68 94       	set
    187e:	67 cf       	rjmp	.-306    	; 0x174e <__fp_inf>

00001880 <log>:
    1880:	9c df       	rcall	.-200    	; 0x17ba <__fp_splitA>
    1882:	c8 f3       	brcs	.-14     	; 0x1876 <ldexp+0x68>
    1884:	99 23       	and	r25, r25
    1886:	d1 f3       	breq	.-12     	; 0x187c <ldexp+0x6e>
    1888:	c6 f3       	brts	.-16     	; 0x187a <ldexp+0x6c>
    188a:	df 93       	push	r29
    188c:	cf 93       	push	r28
    188e:	1f 93       	push	r17
    1890:	0f 93       	push	r16
    1892:	ff 92       	push	r15
    1894:	c9 2f       	mov	r28, r25
    1896:	dd 27       	eor	r29, r29
    1898:	88 23       	and	r24, r24
    189a:	2a f0       	brmi	.+10     	; 0x18a6 <log+0x26>
    189c:	21 97       	sbiw	r28, 0x01	; 1
    189e:	66 0f       	add	r22, r22
    18a0:	77 1f       	adc	r23, r23
    18a2:	88 1f       	adc	r24, r24
    18a4:	da f7       	brpl	.-10     	; 0x189c <log+0x1c>
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	40 e8       	ldi	r20, 0x80	; 128
    18ac:	5f eb       	ldi	r21, 0xBF	; 191
    18ae:	9f e3       	ldi	r25, 0x3F	; 63
    18b0:	88 39       	cpi	r24, 0x98	; 152
    18b2:	20 f0       	brcs	.+8      	; 0x18bc <log+0x3c>
    18b4:	80 3e       	cpi	r24, 0xE0	; 224
    18b6:	30 f0       	brcs	.+12     	; 0x18c4 <log+0x44>
    18b8:	21 96       	adiw	r28, 0x01	; 1
    18ba:	8f 77       	andi	r24, 0x7F	; 127
    18bc:	b8 d0       	rcall	.+368    	; 0x1a2e <__addsf3>
    18be:	ec eb       	ldi	r30, 0xBC	; 188
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	03 c0       	rjmp	.+6      	; 0x18ca <log+0x4a>
    18c4:	b4 d0       	rcall	.+360    	; 0x1a2e <__addsf3>
    18c6:	e9 ee       	ldi	r30, 0xE9	; 233
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	4a df       	rcall	.-364    	; 0x1760 <__fp_powser>
    18cc:	8b 01       	movw	r16, r22
    18ce:	be 01       	movw	r22, r28
    18d0:	ec 01       	movw	r28, r24
    18d2:	fb 2e       	mov	r15, r27
    18d4:	6f 57       	subi	r22, 0x7F	; 127
    18d6:	71 09       	sbc	r23, r1
    18d8:	75 95       	asr	r23
    18da:	77 1f       	adc	r23, r23
    18dc:	88 0b       	sbc	r24, r24
    18de:	99 0b       	sbc	r25, r25
    18e0:	56 de       	rcall	.-852    	; 0x158e <__floatsisf>
    18e2:	28 e1       	ldi	r18, 0x18	; 24
    18e4:	32 e7       	ldi	r19, 0x72	; 114
    18e6:	41 e3       	ldi	r20, 0x31	; 49
    18e8:	5f e3       	ldi	r21, 0x3F	; 63
    18ea:	49 d0       	rcall	.+146    	; 0x197e <__mulsf3x>
    18ec:	af 2d       	mov	r26, r15
    18ee:	98 01       	movw	r18, r16
    18f0:	ae 01       	movw	r20, r28
    18f2:	ff 90       	pop	r15
    18f4:	0f 91       	pop	r16
    18f6:	1f 91       	pop	r17
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	a9 d0       	rcall	.+338    	; 0x1a50 <__addsf3x>
    18fe:	7f c1       	rjmp	.+766    	; 0x1bfe <__fp_round>

00001900 <modf>:
    1900:	fa 01       	movw	r30, r20
    1902:	dc 01       	movw	r26, r24
    1904:	aa 0f       	add	r26, r26
    1906:	bb 1f       	adc	r27, r27
    1908:	9b 01       	movw	r18, r22
    190a:	ac 01       	movw	r20, r24
    190c:	bf 57       	subi	r27, 0x7F	; 127
    190e:	28 f4       	brcc	.+10     	; 0x191a <modf+0x1a>
    1910:	22 27       	eor	r18, r18
    1912:	33 27       	eor	r19, r19
    1914:	44 27       	eor	r20, r20
    1916:	50 78       	andi	r21, 0x80	; 128
    1918:	1f c0       	rjmp	.+62     	; 0x1958 <modf+0x58>
    191a:	b7 51       	subi	r27, 0x17	; 23
    191c:	88 f4       	brcc	.+34     	; 0x1940 <modf+0x40>
    191e:	ab 2f       	mov	r26, r27
    1920:	00 24       	eor	r0, r0
    1922:	46 95       	lsr	r20
    1924:	37 95       	ror	r19
    1926:	27 95       	ror	r18
    1928:	01 1c       	adc	r0, r1
    192a:	a3 95       	inc	r26
    192c:	d2 f3       	brmi	.-12     	; 0x1922 <modf+0x22>
    192e:	00 20       	and	r0, r0
    1930:	69 f0       	breq	.+26     	; 0x194c <modf+0x4c>
    1932:	22 0f       	add	r18, r18
    1934:	33 1f       	adc	r19, r19
    1936:	44 1f       	adc	r20, r20
    1938:	b3 95       	inc	r27
    193a:	da f3       	brmi	.-10     	; 0x1932 <modf+0x32>
    193c:	0d d0       	rcall	.+26     	; 0x1958 <modf+0x58>
    193e:	76 c0       	rjmp	.+236    	; 0x1a2c <__subsf3>
    1940:	61 30       	cpi	r22, 0x01	; 1
    1942:	71 05       	cpc	r23, r1
    1944:	a0 e8       	ldi	r26, 0x80	; 128
    1946:	8a 07       	cpc	r24, r26
    1948:	b9 46       	sbci	r27, 0x69	; 105
    194a:	30 f4       	brcc	.+12     	; 0x1958 <modf+0x58>
    194c:	9b 01       	movw	r18, r22
    194e:	ac 01       	movw	r20, r24
    1950:	66 27       	eor	r22, r22
    1952:	77 27       	eor	r23, r23
    1954:	88 27       	eor	r24, r24
    1956:	90 78       	andi	r25, 0x80	; 128
    1958:	30 96       	adiw	r30, 0x00	; 0
    195a:	21 f0       	breq	.+8      	; 0x1964 <modf+0x64>
    195c:	20 83       	st	Z, r18
    195e:	31 83       	std	Z+1, r19	; 0x01
    1960:	42 83       	std	Z+2, r20	; 0x02
    1962:	53 83       	std	Z+3, r21	; 0x03
    1964:	08 95       	ret

00001966 <__mulsf3>:
    1966:	0b d0       	rcall	.+22     	; 0x197e <__mulsf3x>
    1968:	4a c1       	rjmp	.+660    	; 0x1bfe <__fp_round>
    196a:	3b d1       	rcall	.+630    	; 0x1be2 <__fp_pscA>
    196c:	28 f0       	brcs	.+10     	; 0x1978 <__mulsf3+0x12>
    196e:	40 d1       	rcall	.+640    	; 0x1bf0 <__fp_pscB>
    1970:	18 f0       	brcs	.+6      	; 0x1978 <__mulsf3+0x12>
    1972:	95 23       	and	r25, r21
    1974:	09 f0       	breq	.+2      	; 0x1978 <__mulsf3+0x12>
    1976:	eb ce       	rjmp	.-554    	; 0x174e <__fp_inf>
    1978:	f0 ce       	rjmp	.-544    	; 0x175a <__fp_nan>
    197a:	11 24       	eor	r1, r1
    197c:	39 cf       	rjmp	.-398    	; 0x17f0 <__fp_szero>

0000197e <__mulsf3x>:
    197e:	15 df       	rcall	.-470    	; 0x17aa <__fp_split3>
    1980:	a0 f3       	brcs	.-24     	; 0x196a <__mulsf3+0x4>

00001982 <__mulsf3_pse>:
    1982:	95 9f       	mul	r25, r21
    1984:	d1 f3       	breq	.-12     	; 0x197a <__mulsf3+0x14>
    1986:	95 0f       	add	r25, r21
    1988:	50 e0       	ldi	r21, 0x00	; 0
    198a:	55 1f       	adc	r21, r21
    198c:	62 9f       	mul	r22, r18
    198e:	f0 01       	movw	r30, r0
    1990:	72 9f       	mul	r23, r18
    1992:	bb 27       	eor	r27, r27
    1994:	f0 0d       	add	r31, r0
    1996:	b1 1d       	adc	r27, r1
    1998:	63 9f       	mul	r22, r19
    199a:	aa 27       	eor	r26, r26
    199c:	f0 0d       	add	r31, r0
    199e:	b1 1d       	adc	r27, r1
    19a0:	aa 1f       	adc	r26, r26
    19a2:	64 9f       	mul	r22, r20
    19a4:	66 27       	eor	r22, r22
    19a6:	b0 0d       	add	r27, r0
    19a8:	a1 1d       	adc	r26, r1
    19aa:	66 1f       	adc	r22, r22
    19ac:	82 9f       	mul	r24, r18
    19ae:	22 27       	eor	r18, r18
    19b0:	b0 0d       	add	r27, r0
    19b2:	a1 1d       	adc	r26, r1
    19b4:	62 1f       	adc	r22, r18
    19b6:	73 9f       	mul	r23, r19
    19b8:	b0 0d       	add	r27, r0
    19ba:	a1 1d       	adc	r26, r1
    19bc:	62 1f       	adc	r22, r18
    19be:	83 9f       	mul	r24, r19
    19c0:	a0 0d       	add	r26, r0
    19c2:	61 1d       	adc	r22, r1
    19c4:	22 1f       	adc	r18, r18
    19c6:	74 9f       	mul	r23, r20
    19c8:	33 27       	eor	r19, r19
    19ca:	a0 0d       	add	r26, r0
    19cc:	61 1d       	adc	r22, r1
    19ce:	23 1f       	adc	r18, r19
    19d0:	84 9f       	mul	r24, r20
    19d2:	60 0d       	add	r22, r0
    19d4:	21 1d       	adc	r18, r1
    19d6:	82 2f       	mov	r24, r18
    19d8:	76 2f       	mov	r23, r22
    19da:	6a 2f       	mov	r22, r26
    19dc:	11 24       	eor	r1, r1
    19de:	9f 57       	subi	r25, 0x7F	; 127
    19e0:	50 40       	sbci	r21, 0x00	; 0
    19e2:	8a f0       	brmi	.+34     	; 0x1a06 <__mulsf3_pse+0x84>
    19e4:	e1 f0       	breq	.+56     	; 0x1a1e <__mulsf3_pse+0x9c>
    19e6:	88 23       	and	r24, r24
    19e8:	4a f0       	brmi	.+18     	; 0x19fc <__mulsf3_pse+0x7a>
    19ea:	ee 0f       	add	r30, r30
    19ec:	ff 1f       	adc	r31, r31
    19ee:	bb 1f       	adc	r27, r27
    19f0:	66 1f       	adc	r22, r22
    19f2:	77 1f       	adc	r23, r23
    19f4:	88 1f       	adc	r24, r24
    19f6:	91 50       	subi	r25, 0x01	; 1
    19f8:	50 40       	sbci	r21, 0x00	; 0
    19fa:	a9 f7       	brne	.-22     	; 0x19e6 <__mulsf3_pse+0x64>
    19fc:	9e 3f       	cpi	r25, 0xFE	; 254
    19fe:	51 05       	cpc	r21, r1
    1a00:	70 f0       	brcs	.+28     	; 0x1a1e <__mulsf3_pse+0x9c>
    1a02:	a5 ce       	rjmp	.-694    	; 0x174e <__fp_inf>
    1a04:	f5 ce       	rjmp	.-534    	; 0x17f0 <__fp_szero>
    1a06:	5f 3f       	cpi	r21, 0xFF	; 255
    1a08:	ec f3       	brlt	.-6      	; 0x1a04 <__mulsf3_pse+0x82>
    1a0a:	98 3e       	cpi	r25, 0xE8	; 232
    1a0c:	dc f3       	brlt	.-10     	; 0x1a04 <__mulsf3_pse+0x82>
    1a0e:	86 95       	lsr	r24
    1a10:	77 95       	ror	r23
    1a12:	67 95       	ror	r22
    1a14:	b7 95       	ror	r27
    1a16:	f7 95       	ror	r31
    1a18:	e7 95       	ror	r30
    1a1a:	9f 5f       	subi	r25, 0xFF	; 255
    1a1c:	c1 f7       	brne	.-16     	; 0x1a0e <__mulsf3_pse+0x8c>
    1a1e:	fe 2b       	or	r31, r30
    1a20:	88 0f       	add	r24, r24
    1a22:	91 1d       	adc	r25, r1
    1a24:	96 95       	lsr	r25
    1a26:	87 95       	ror	r24
    1a28:	97 f9       	bld	r25, 7
    1a2a:	08 95       	ret

00001a2c <__subsf3>:
    1a2c:	50 58       	subi	r21, 0x80	; 128

00001a2e <__addsf3>:
    1a2e:	bb 27       	eor	r27, r27
    1a30:	aa 27       	eor	r26, r26
    1a32:	0e d0       	rcall	.+28     	; 0x1a50 <__addsf3x>
    1a34:	e4 c0       	rjmp	.+456    	; 0x1bfe <__fp_round>
    1a36:	d5 d0       	rcall	.+426    	; 0x1be2 <__fp_pscA>
    1a38:	30 f0       	brcs	.+12     	; 0x1a46 <__addsf3+0x18>
    1a3a:	da d0       	rcall	.+436    	; 0x1bf0 <__fp_pscB>
    1a3c:	20 f0       	brcs	.+8      	; 0x1a46 <__addsf3+0x18>
    1a3e:	31 f4       	brne	.+12     	; 0x1a4c <__addsf3+0x1e>
    1a40:	9f 3f       	cpi	r25, 0xFF	; 255
    1a42:	11 f4       	brne	.+4      	; 0x1a48 <__addsf3+0x1a>
    1a44:	1e f4       	brtc	.+6      	; 0x1a4c <__addsf3+0x1e>
    1a46:	89 ce       	rjmp	.-750    	; 0x175a <__fp_nan>
    1a48:	0e f4       	brtc	.+2      	; 0x1a4c <__addsf3+0x1e>
    1a4a:	e0 95       	com	r30
    1a4c:	e7 fb       	bst	r30, 7
    1a4e:	7f ce       	rjmp	.-770    	; 0x174e <__fp_inf>

00001a50 <__addsf3x>:
    1a50:	e9 2f       	mov	r30, r25
    1a52:	ab de       	rcall	.-682    	; 0x17aa <__fp_split3>
    1a54:	80 f3       	brcs	.-32     	; 0x1a36 <__addsf3+0x8>
    1a56:	ba 17       	cp	r27, r26
    1a58:	62 07       	cpc	r22, r18
    1a5a:	73 07       	cpc	r23, r19
    1a5c:	84 07       	cpc	r24, r20
    1a5e:	95 07       	cpc	r25, r21
    1a60:	18 f0       	brcs	.+6      	; 0x1a68 <__addsf3x+0x18>
    1a62:	71 f4       	brne	.+28     	; 0x1a80 <__addsf3x+0x30>
    1a64:	9e f5       	brtc	.+102    	; 0x1acc <__addsf3x+0x7c>
    1a66:	c3 ce       	rjmp	.-634    	; 0x17ee <__fp_zero>
    1a68:	0e f4       	brtc	.+2      	; 0x1a6c <__addsf3x+0x1c>
    1a6a:	e0 95       	com	r30
    1a6c:	0b 2e       	mov	r0, r27
    1a6e:	ba 2f       	mov	r27, r26
    1a70:	a0 2d       	mov	r26, r0
    1a72:	0b 01       	movw	r0, r22
    1a74:	b9 01       	movw	r22, r18
    1a76:	90 01       	movw	r18, r0
    1a78:	0c 01       	movw	r0, r24
    1a7a:	ca 01       	movw	r24, r20
    1a7c:	a0 01       	movw	r20, r0
    1a7e:	11 24       	eor	r1, r1
    1a80:	ff 27       	eor	r31, r31
    1a82:	59 1b       	sub	r21, r25
    1a84:	99 f0       	breq	.+38     	; 0x1aac <__addsf3x+0x5c>
    1a86:	59 3f       	cpi	r21, 0xF9	; 249
    1a88:	50 f4       	brcc	.+20     	; 0x1a9e <__addsf3x+0x4e>
    1a8a:	50 3e       	cpi	r21, 0xE0	; 224
    1a8c:	68 f1       	brcs	.+90     	; 0x1ae8 <__addsf3x+0x98>
    1a8e:	1a 16       	cp	r1, r26
    1a90:	f0 40       	sbci	r31, 0x00	; 0
    1a92:	a2 2f       	mov	r26, r18
    1a94:	23 2f       	mov	r18, r19
    1a96:	34 2f       	mov	r19, r20
    1a98:	44 27       	eor	r20, r20
    1a9a:	58 5f       	subi	r21, 0xF8	; 248
    1a9c:	f3 cf       	rjmp	.-26     	; 0x1a84 <__addsf3x+0x34>
    1a9e:	46 95       	lsr	r20
    1aa0:	37 95       	ror	r19
    1aa2:	27 95       	ror	r18
    1aa4:	a7 95       	ror	r26
    1aa6:	f0 40       	sbci	r31, 0x00	; 0
    1aa8:	53 95       	inc	r21
    1aaa:	c9 f7       	brne	.-14     	; 0x1a9e <__addsf3x+0x4e>
    1aac:	7e f4       	brtc	.+30     	; 0x1acc <__addsf3x+0x7c>
    1aae:	1f 16       	cp	r1, r31
    1ab0:	ba 0b       	sbc	r27, r26
    1ab2:	62 0b       	sbc	r22, r18
    1ab4:	73 0b       	sbc	r23, r19
    1ab6:	84 0b       	sbc	r24, r20
    1ab8:	ba f0       	brmi	.+46     	; 0x1ae8 <__addsf3x+0x98>
    1aba:	91 50       	subi	r25, 0x01	; 1
    1abc:	a1 f0       	breq	.+40     	; 0x1ae6 <__addsf3x+0x96>
    1abe:	ff 0f       	add	r31, r31
    1ac0:	bb 1f       	adc	r27, r27
    1ac2:	66 1f       	adc	r22, r22
    1ac4:	77 1f       	adc	r23, r23
    1ac6:	88 1f       	adc	r24, r24
    1ac8:	c2 f7       	brpl	.-16     	; 0x1aba <__addsf3x+0x6a>
    1aca:	0e c0       	rjmp	.+28     	; 0x1ae8 <__addsf3x+0x98>
    1acc:	ba 0f       	add	r27, r26
    1ace:	62 1f       	adc	r22, r18
    1ad0:	73 1f       	adc	r23, r19
    1ad2:	84 1f       	adc	r24, r20
    1ad4:	48 f4       	brcc	.+18     	; 0x1ae8 <__addsf3x+0x98>
    1ad6:	87 95       	ror	r24
    1ad8:	77 95       	ror	r23
    1ada:	67 95       	ror	r22
    1adc:	b7 95       	ror	r27
    1ade:	f7 95       	ror	r31
    1ae0:	9e 3f       	cpi	r25, 0xFE	; 254
    1ae2:	08 f0       	brcs	.+2      	; 0x1ae6 <__addsf3x+0x96>
    1ae4:	b3 cf       	rjmp	.-154    	; 0x1a4c <__addsf3+0x1e>
    1ae6:	93 95       	inc	r25
    1ae8:	88 0f       	add	r24, r24
    1aea:	08 f0       	brcs	.+2      	; 0x1aee <__addsf3x+0x9e>
    1aec:	99 27       	eor	r25, r25
    1aee:	ee 0f       	add	r30, r30
    1af0:	97 95       	ror	r25
    1af2:	87 95       	ror	r24
    1af4:	08 95       	ret

00001af6 <__divsf3>:
    1af6:	0c d0       	rcall	.+24     	; 0x1b10 <__divsf3x>
    1af8:	82 c0       	rjmp	.+260    	; 0x1bfe <__fp_round>
    1afa:	7a d0       	rcall	.+244    	; 0x1bf0 <__fp_pscB>
    1afc:	40 f0       	brcs	.+16     	; 0x1b0e <__divsf3+0x18>
    1afe:	71 d0       	rcall	.+226    	; 0x1be2 <__fp_pscA>
    1b00:	30 f0       	brcs	.+12     	; 0x1b0e <__divsf3+0x18>
    1b02:	21 f4       	brne	.+8      	; 0x1b0c <__divsf3+0x16>
    1b04:	5f 3f       	cpi	r21, 0xFF	; 255
    1b06:	19 f0       	breq	.+6      	; 0x1b0e <__divsf3+0x18>
    1b08:	22 ce       	rjmp	.-956    	; 0x174e <__fp_inf>
    1b0a:	51 11       	cpse	r21, r1
    1b0c:	71 ce       	rjmp	.-798    	; 0x17f0 <__fp_szero>
    1b0e:	25 ce       	rjmp	.-950    	; 0x175a <__fp_nan>

00001b10 <__divsf3x>:
    1b10:	4c de       	rcall	.-872    	; 0x17aa <__fp_split3>
    1b12:	98 f3       	brcs	.-26     	; 0x1afa <__divsf3+0x4>

00001b14 <__divsf3_pse>:
    1b14:	99 23       	and	r25, r25
    1b16:	c9 f3       	breq	.-14     	; 0x1b0a <__divsf3+0x14>
    1b18:	55 23       	and	r21, r21
    1b1a:	b1 f3       	breq	.-20     	; 0x1b08 <__divsf3+0x12>
    1b1c:	95 1b       	sub	r25, r21
    1b1e:	55 0b       	sbc	r21, r21
    1b20:	bb 27       	eor	r27, r27
    1b22:	aa 27       	eor	r26, r26
    1b24:	62 17       	cp	r22, r18
    1b26:	73 07       	cpc	r23, r19
    1b28:	84 07       	cpc	r24, r20
    1b2a:	38 f0       	brcs	.+14     	; 0x1b3a <__divsf3_pse+0x26>
    1b2c:	9f 5f       	subi	r25, 0xFF	; 255
    1b2e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b30:	22 0f       	add	r18, r18
    1b32:	33 1f       	adc	r19, r19
    1b34:	44 1f       	adc	r20, r20
    1b36:	aa 1f       	adc	r26, r26
    1b38:	a9 f3       	breq	.-22     	; 0x1b24 <__divsf3_pse+0x10>
    1b3a:	33 d0       	rcall	.+102    	; 0x1ba2 <__divsf3_pse+0x8e>
    1b3c:	0e 2e       	mov	r0, r30
    1b3e:	3a f0       	brmi	.+14     	; 0x1b4e <__divsf3_pse+0x3a>
    1b40:	e0 e8       	ldi	r30, 0x80	; 128
    1b42:	30 d0       	rcall	.+96     	; 0x1ba4 <__divsf3_pse+0x90>
    1b44:	91 50       	subi	r25, 0x01	; 1
    1b46:	50 40       	sbci	r21, 0x00	; 0
    1b48:	e6 95       	lsr	r30
    1b4a:	00 1c       	adc	r0, r0
    1b4c:	ca f7       	brpl	.-14     	; 0x1b40 <__divsf3_pse+0x2c>
    1b4e:	29 d0       	rcall	.+82     	; 0x1ba2 <__divsf3_pse+0x8e>
    1b50:	fe 2f       	mov	r31, r30
    1b52:	27 d0       	rcall	.+78     	; 0x1ba2 <__divsf3_pse+0x8e>
    1b54:	66 0f       	add	r22, r22
    1b56:	77 1f       	adc	r23, r23
    1b58:	88 1f       	adc	r24, r24
    1b5a:	bb 1f       	adc	r27, r27
    1b5c:	26 17       	cp	r18, r22
    1b5e:	37 07       	cpc	r19, r23
    1b60:	48 07       	cpc	r20, r24
    1b62:	ab 07       	cpc	r26, r27
    1b64:	b0 e8       	ldi	r27, 0x80	; 128
    1b66:	09 f0       	breq	.+2      	; 0x1b6a <__divsf3_pse+0x56>
    1b68:	bb 0b       	sbc	r27, r27
    1b6a:	80 2d       	mov	r24, r0
    1b6c:	bf 01       	movw	r22, r30
    1b6e:	ff 27       	eor	r31, r31
    1b70:	93 58       	subi	r25, 0x83	; 131
    1b72:	5f 4f       	sbci	r21, 0xFF	; 255
    1b74:	2a f0       	brmi	.+10     	; 0x1b80 <__divsf3_pse+0x6c>
    1b76:	9e 3f       	cpi	r25, 0xFE	; 254
    1b78:	51 05       	cpc	r21, r1
    1b7a:	68 f0       	brcs	.+26     	; 0x1b96 <__divsf3_pse+0x82>
    1b7c:	e8 cd       	rjmp	.-1072   	; 0x174e <__fp_inf>
    1b7e:	38 ce       	rjmp	.-912    	; 0x17f0 <__fp_szero>
    1b80:	5f 3f       	cpi	r21, 0xFF	; 255
    1b82:	ec f3       	brlt	.-6      	; 0x1b7e <__divsf3_pse+0x6a>
    1b84:	98 3e       	cpi	r25, 0xE8	; 232
    1b86:	dc f3       	brlt	.-10     	; 0x1b7e <__divsf3_pse+0x6a>
    1b88:	86 95       	lsr	r24
    1b8a:	77 95       	ror	r23
    1b8c:	67 95       	ror	r22
    1b8e:	b7 95       	ror	r27
    1b90:	f7 95       	ror	r31
    1b92:	9f 5f       	subi	r25, 0xFF	; 255
    1b94:	c9 f7       	brne	.-14     	; 0x1b88 <__divsf3_pse+0x74>
    1b96:	88 0f       	add	r24, r24
    1b98:	91 1d       	adc	r25, r1
    1b9a:	96 95       	lsr	r25
    1b9c:	87 95       	ror	r24
    1b9e:	97 f9       	bld	r25, 7
    1ba0:	08 95       	ret
    1ba2:	e1 e0       	ldi	r30, 0x01	; 1
    1ba4:	66 0f       	add	r22, r22
    1ba6:	77 1f       	adc	r23, r23
    1ba8:	88 1f       	adc	r24, r24
    1baa:	bb 1f       	adc	r27, r27
    1bac:	62 17       	cp	r22, r18
    1bae:	73 07       	cpc	r23, r19
    1bb0:	84 07       	cpc	r24, r20
    1bb2:	ba 07       	cpc	r27, r26
    1bb4:	20 f0       	brcs	.+8      	; 0x1bbe <__divsf3_pse+0xaa>
    1bb6:	62 1b       	sub	r22, r18
    1bb8:	73 0b       	sbc	r23, r19
    1bba:	84 0b       	sbc	r24, r20
    1bbc:	ba 0b       	sbc	r27, r26
    1bbe:	ee 1f       	adc	r30, r30
    1bc0:	88 f7       	brcc	.-30     	; 0x1ba4 <__divsf3_pse+0x90>
    1bc2:	e0 95       	com	r30
    1bc4:	08 95       	ret

00001bc6 <__fp_mpack>:
    1bc6:	9f 3f       	cpi	r25, 0xFF	; 255
    1bc8:	31 f0       	breq	.+12     	; 0x1bd6 <__fp_mpack_finite+0xc>

00001bca <__fp_mpack_finite>:
    1bca:	91 50       	subi	r25, 0x01	; 1
    1bcc:	20 f4       	brcc	.+8      	; 0x1bd6 <__fp_mpack_finite+0xc>
    1bce:	87 95       	ror	r24
    1bd0:	77 95       	ror	r23
    1bd2:	67 95       	ror	r22
    1bd4:	b7 95       	ror	r27
    1bd6:	88 0f       	add	r24, r24
    1bd8:	91 1d       	adc	r25, r1
    1bda:	96 95       	lsr	r25
    1bdc:	87 95       	ror	r24
    1bde:	97 f9       	bld	r25, 7
    1be0:	08 95       	ret

00001be2 <__fp_pscA>:
    1be2:	00 24       	eor	r0, r0
    1be4:	0a 94       	dec	r0
    1be6:	16 16       	cp	r1, r22
    1be8:	17 06       	cpc	r1, r23
    1bea:	18 06       	cpc	r1, r24
    1bec:	09 06       	cpc	r0, r25
    1bee:	08 95       	ret

00001bf0 <__fp_pscB>:
    1bf0:	00 24       	eor	r0, r0
    1bf2:	0a 94       	dec	r0
    1bf4:	12 16       	cp	r1, r18
    1bf6:	13 06       	cpc	r1, r19
    1bf8:	14 06       	cpc	r1, r20
    1bfa:	05 06       	cpc	r0, r21
    1bfc:	08 95       	ret

00001bfe <__fp_round>:
    1bfe:	09 2e       	mov	r0, r25
    1c00:	03 94       	inc	r0
    1c02:	00 0c       	add	r0, r0
    1c04:	11 f4       	brne	.+4      	; 0x1c0a <__fp_round+0xc>
    1c06:	88 23       	and	r24, r24
    1c08:	52 f0       	brmi	.+20     	; 0x1c1e <__fp_round+0x20>
    1c0a:	bb 0f       	add	r27, r27
    1c0c:	40 f4       	brcc	.+16     	; 0x1c1e <__fp_round+0x20>
    1c0e:	bf 2b       	or	r27, r31
    1c10:	11 f4       	brne	.+4      	; 0x1c16 <__fp_round+0x18>
    1c12:	60 ff       	sbrs	r22, 0
    1c14:	04 c0       	rjmp	.+8      	; 0x1c1e <__fp_round+0x20>
    1c16:	6f 5f       	subi	r22, 0xFF	; 255
    1c18:	7f 4f       	sbci	r23, 0xFF	; 255
    1c1a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c1e:	08 95       	ret

00001c20 <__udivmodsi4>:
    1c20:	a1 e2       	ldi	r26, 0x21	; 33
    1c22:	1a 2e       	mov	r1, r26
    1c24:	aa 1b       	sub	r26, r26
    1c26:	bb 1b       	sub	r27, r27
    1c28:	fd 01       	movw	r30, r26
    1c2a:	0d c0       	rjmp	.+26     	; 0x1c46 <__udivmodsi4_ep>

00001c2c <__udivmodsi4_loop>:
    1c2c:	aa 1f       	adc	r26, r26
    1c2e:	bb 1f       	adc	r27, r27
    1c30:	ee 1f       	adc	r30, r30
    1c32:	ff 1f       	adc	r31, r31
    1c34:	a2 17       	cp	r26, r18
    1c36:	b3 07       	cpc	r27, r19
    1c38:	e4 07       	cpc	r30, r20
    1c3a:	f5 07       	cpc	r31, r21
    1c3c:	20 f0       	brcs	.+8      	; 0x1c46 <__udivmodsi4_ep>
    1c3e:	a2 1b       	sub	r26, r18
    1c40:	b3 0b       	sbc	r27, r19
    1c42:	e4 0b       	sbc	r30, r20
    1c44:	f5 0b       	sbc	r31, r21

00001c46 <__udivmodsi4_ep>:
    1c46:	66 1f       	adc	r22, r22
    1c48:	77 1f       	adc	r23, r23
    1c4a:	88 1f       	adc	r24, r24
    1c4c:	99 1f       	adc	r25, r25
    1c4e:	1a 94       	dec	r1
    1c50:	69 f7       	brne	.-38     	; 0x1c2c <__udivmodsi4_loop>
    1c52:	60 95       	com	r22
    1c54:	70 95       	com	r23
    1c56:	80 95       	com	r24
    1c58:	90 95       	com	r25
    1c5a:	9b 01       	movw	r18, r22
    1c5c:	ac 01       	movw	r20, r24
    1c5e:	bd 01       	movw	r22, r26
    1c60:	cf 01       	movw	r24, r30
    1c62:	08 95       	ret

00001c64 <__tablejump2__>:
    1c64:	ee 0f       	add	r30, r30
    1c66:	ff 1f       	adc	r31, r31
    1c68:	05 90       	lpm	r0, Z+
    1c6a:	f4 91       	lpm	r31, Z
    1c6c:	e0 2d       	mov	r30, r0
    1c6e:	09 94       	ijmp

00001c70 <atoi>:
    1c70:	fc 01       	movw	r30, r24
    1c72:	88 27       	eor	r24, r24
    1c74:	99 27       	eor	r25, r25
    1c76:	e8 94       	clt
    1c78:	21 91       	ld	r18, Z+
    1c7a:	20 32       	cpi	r18, 0x20	; 32
    1c7c:	e9 f3       	breq	.-6      	; 0x1c78 <atoi+0x8>
    1c7e:	29 30       	cpi	r18, 0x09	; 9
    1c80:	10 f0       	brcs	.+4      	; 0x1c86 <atoi+0x16>
    1c82:	2e 30       	cpi	r18, 0x0E	; 14
    1c84:	c8 f3       	brcs	.-14     	; 0x1c78 <atoi+0x8>
    1c86:	2b 32       	cpi	r18, 0x2B	; 43
    1c88:	39 f0       	breq	.+14     	; 0x1c98 <atoi+0x28>
    1c8a:	2d 32       	cpi	r18, 0x2D	; 45
    1c8c:	31 f4       	brne	.+12     	; 0x1c9a <atoi+0x2a>
    1c8e:	68 94       	set
    1c90:	03 c0       	rjmp	.+6      	; 0x1c98 <atoi+0x28>
    1c92:	4d d0       	rcall	.+154    	; 0x1d2e <__mulhi_const_10>
    1c94:	82 0f       	add	r24, r18
    1c96:	91 1d       	adc	r25, r1
    1c98:	21 91       	ld	r18, Z+
    1c9a:	20 53       	subi	r18, 0x30	; 48
    1c9c:	2a 30       	cpi	r18, 0x0A	; 10
    1c9e:	c8 f3       	brcs	.-14     	; 0x1c92 <atoi+0x22>
    1ca0:	1e f4       	brtc	.+6      	; 0x1ca8 <atoi+0x38>
    1ca2:	90 95       	com	r25
    1ca4:	81 95       	neg	r24
    1ca6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca8:	08 95       	ret

00001caa <memcpy>:
    1caa:	fb 01       	movw	r30, r22
    1cac:	dc 01       	movw	r26, r24
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <memcpy+0xa>
    1cb0:	01 90       	ld	r0, Z+
    1cb2:	0d 92       	st	X+, r0
    1cb4:	41 50       	subi	r20, 0x01	; 1
    1cb6:	50 40       	sbci	r21, 0x00	; 0
    1cb8:	d8 f7       	brcc	.-10     	; 0x1cb0 <memcpy+0x6>
    1cba:	08 95       	ret

00001cbc <strcat>:
    1cbc:	fb 01       	movw	r30, r22
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	0d 90       	ld	r0, X+
    1cc2:	00 20       	and	r0, r0
    1cc4:	e9 f7       	brne	.-6      	; 0x1cc0 <strcat+0x4>
    1cc6:	11 97       	sbiw	r26, 0x01	; 1
    1cc8:	01 90       	ld	r0, Z+
    1cca:	0d 92       	st	X+, r0
    1ccc:	00 20       	and	r0, r0
    1cce:	e1 f7       	brne	.-8      	; 0x1cc8 <strcat+0xc>
    1cd0:	08 95       	ret

00001cd2 <strstr>:
    1cd2:	fb 01       	movw	r30, r22
    1cd4:	51 91       	ld	r21, Z+
    1cd6:	55 23       	and	r21, r21
    1cd8:	a9 f0       	breq	.+42     	; 0x1d04 <strstr+0x32>
    1cda:	bf 01       	movw	r22, r30
    1cdc:	dc 01       	movw	r26, r24
    1cde:	4d 91       	ld	r20, X+
    1ce0:	45 17       	cp	r20, r21
    1ce2:	41 11       	cpse	r20, r1
    1ce4:	e1 f7       	brne	.-8      	; 0x1cde <strstr+0xc>
    1ce6:	59 f4       	brne	.+22     	; 0x1cfe <strstr+0x2c>
    1ce8:	cd 01       	movw	r24, r26
    1cea:	01 90       	ld	r0, Z+
    1cec:	00 20       	and	r0, r0
    1cee:	49 f0       	breq	.+18     	; 0x1d02 <strstr+0x30>
    1cf0:	4d 91       	ld	r20, X+
    1cf2:	40 15       	cp	r20, r0
    1cf4:	41 11       	cpse	r20, r1
    1cf6:	c9 f3       	breq	.-14     	; 0x1cea <strstr+0x18>
    1cf8:	fb 01       	movw	r30, r22
    1cfa:	41 11       	cpse	r20, r1
    1cfc:	ef cf       	rjmp	.-34     	; 0x1cdc <strstr+0xa>
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	08 95       	ret

00001d06 <itoa>:
    1d06:	45 32       	cpi	r20, 0x25	; 37
    1d08:	51 05       	cpc	r21, r1
    1d0a:	18 f4       	brcc	.+6      	; 0x1d12 <itoa+0xc>
    1d0c:	42 30       	cpi	r20, 0x02	; 2
    1d0e:	08 f0       	brcs	.+2      	; 0x1d12 <itoa+0xc>
    1d10:	04 c0       	rjmp	.+8      	; 0x1d1a <__itoa_ncheck>
    1d12:	fb 01       	movw	r30, r22
    1d14:	10 82       	st	Z, r1
    1d16:	cb 01       	movw	r24, r22
    1d18:	08 95       	ret

00001d1a <__itoa_ncheck>:
    1d1a:	bb 27       	eor	r27, r27
    1d1c:	4a 30       	cpi	r20, 0x0A	; 10
    1d1e:	31 f4       	brne	.+12     	; 0x1d2c <__itoa_ncheck+0x12>
    1d20:	99 23       	and	r25, r25
    1d22:	22 f4       	brpl	.+8      	; 0x1d2c <__itoa_ncheck+0x12>
    1d24:	bd e2       	ldi	r27, 0x2D	; 45
    1d26:	90 95       	com	r25
    1d28:	81 95       	neg	r24
    1d2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d2c:	09 c0       	rjmp	.+18     	; 0x1d40 <__utoa_common>

00001d2e <__mulhi_const_10>:
    1d2e:	7a e0       	ldi	r23, 0x0A	; 10
    1d30:	97 9f       	mul	r25, r23
    1d32:	90 2d       	mov	r25, r0
    1d34:	87 9f       	mul	r24, r23
    1d36:	80 2d       	mov	r24, r0
    1d38:	91 0d       	add	r25, r1
    1d3a:	11 24       	eor	r1, r1
    1d3c:	08 95       	ret

00001d3e <__utoa_ncheck>:
    1d3e:	bb 27       	eor	r27, r27

00001d40 <__utoa_common>:
    1d40:	fb 01       	movw	r30, r22
    1d42:	55 27       	eor	r21, r21
    1d44:	aa 27       	eor	r26, r26
    1d46:	88 0f       	add	r24, r24
    1d48:	99 1f       	adc	r25, r25
    1d4a:	aa 1f       	adc	r26, r26
    1d4c:	a4 17       	cp	r26, r20
    1d4e:	10 f0       	brcs	.+4      	; 0x1d54 <__utoa_common+0x14>
    1d50:	a4 1b       	sub	r26, r20
    1d52:	83 95       	inc	r24
    1d54:	50 51       	subi	r21, 0x10	; 16
    1d56:	b9 f7       	brne	.-18     	; 0x1d46 <__utoa_common+0x6>
    1d58:	a0 5d       	subi	r26, 0xD0	; 208
    1d5a:	aa 33       	cpi	r26, 0x3A	; 58
    1d5c:	08 f0       	brcs	.+2      	; 0x1d60 <__utoa_common+0x20>
    1d5e:	a9 5d       	subi	r26, 0xD9	; 217
    1d60:	a1 93       	st	Z+, r26
    1d62:	00 97       	sbiw	r24, 0x00	; 0
    1d64:	79 f7       	brne	.-34     	; 0x1d44 <__utoa_common+0x4>
    1d66:	b1 11       	cpse	r27, r1
    1d68:	b1 93       	st	Z+, r27
    1d6a:	11 92       	st	Z+, r1
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	00 c0       	rjmp	.+0      	; 0x1d70 <strrev>

00001d70 <strrev>:
    1d70:	dc 01       	movw	r26, r24
    1d72:	fc 01       	movw	r30, r24
    1d74:	67 2f       	mov	r22, r23
    1d76:	71 91       	ld	r23, Z+
    1d78:	77 23       	and	r23, r23
    1d7a:	e1 f7       	brne	.-8      	; 0x1d74 <strrev+0x4>
    1d7c:	32 97       	sbiw	r30, 0x02	; 2
    1d7e:	04 c0       	rjmp	.+8      	; 0x1d88 <strrev+0x18>
    1d80:	7c 91       	ld	r23, X
    1d82:	6d 93       	st	X+, r22
    1d84:	70 83       	st	Z, r23
    1d86:	62 91       	ld	r22, -Z
    1d88:	ae 17       	cp	r26, r30
    1d8a:	bf 07       	cpc	r27, r31
    1d8c:	c8 f3       	brcs	.-14     	; 0x1d80 <strrev+0x10>
    1d8e:	08 95       	ret

00001d90 <_exit>:
    1d90:	f8 94       	cli

00001d92 <__stop_program>:
    1d92:	ff cf       	rjmp	.-2      	; 0x1d92 <__stop_program>
