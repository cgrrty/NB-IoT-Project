
NB_IOT_MEGA324PA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002d0  00800100  00001cf2  00001d86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cf2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000017e  008003d0  008003d0  00002056  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002056  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002088  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  000020c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004a30  00000000  00000000  000023a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001922  00000000  00000000  00006dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000362c  00000000  00000000  000086f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a84  00000000  00000000  0000bd20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00014e23  00000000  00000000  0000c7a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003db0  00000000  00000000  000215c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  00025377  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00005f58  00000000  00000000  000255d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8a c0       	rjmp	.+276    	; 0x116 <__ctors_end>
       2:	00 00       	nop
       4:	a4 c0       	rjmp	.+328    	; 0x14e <__bad_interrupt>
       6:	00 00       	nop
       8:	a2 c0       	rjmp	.+324    	; 0x14e <__bad_interrupt>
       a:	00 00       	nop
       c:	a0 c0       	rjmp	.+320    	; 0x14e <__bad_interrupt>
       e:	00 00       	nop
      10:	9e c0       	rjmp	.+316    	; 0x14e <__bad_interrupt>
      12:	00 00       	nop
      14:	9c c0       	rjmp	.+312    	; 0x14e <__bad_interrupt>
      16:	00 00       	nop
      18:	9a c0       	rjmp	.+308    	; 0x14e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	98 c0       	rjmp	.+304    	; 0x14e <__bad_interrupt>
      1e:	00 00       	nop
      20:	4e c5       	rjmp	.+2716   	; 0xabe <__vector_8>
      22:	00 00       	nop
      24:	94 c0       	rjmp	.+296    	; 0x14e <__bad_interrupt>
      26:	00 00       	nop
      28:	92 c0       	rjmp	.+292    	; 0x14e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	90 c0       	rjmp	.+288    	; 0x14e <__bad_interrupt>
      2e:	00 00       	nop
      30:	8e c0       	rjmp	.+284    	; 0x14e <__bad_interrupt>
      32:	00 00       	nop
      34:	8c c0       	rjmp	.+280    	; 0x14e <__bad_interrupt>
      36:	00 00       	nop
      38:	8a c0       	rjmp	.+276    	; 0x14e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	88 c0       	rjmp	.+272    	; 0x14e <__bad_interrupt>
      3e:	00 00       	nop
      40:	86 c0       	rjmp	.+268    	; 0x14e <__bad_interrupt>
      42:	00 00       	nop
      44:	84 c0       	rjmp	.+264    	; 0x14e <__bad_interrupt>
      46:	00 00       	nop
      48:	82 c0       	rjmp	.+260    	; 0x14e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	80 c0       	rjmp	.+256    	; 0x14e <__bad_interrupt>
      4e:	00 00       	nop
      50:	fa c4       	rjmp	.+2548   	; 0xa46 <__vector_20>
      52:	00 00       	nop
      54:	7c c0       	rjmp	.+248    	; 0x14e <__bad_interrupt>
      56:	00 00       	nop
      58:	7a c0       	rjmp	.+244    	; 0x14e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	78 c0       	rjmp	.+240    	; 0x14e <__bad_interrupt>
      5e:	00 00       	nop
      60:	76 c0       	rjmp	.+236    	; 0x14e <__bad_interrupt>
      62:	00 00       	nop
      64:	74 c0       	rjmp	.+232    	; 0x14e <__bad_interrupt>
      66:	00 00       	nop
      68:	72 c0       	rjmp	.+228    	; 0x14e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	70 c0       	rjmp	.+224    	; 0x14e <__bad_interrupt>
      6e:	00 00       	nop
      70:	6e c0       	rjmp	.+220    	; 0x14e <__bad_interrupt>
      72:	00 00       	nop
      74:	6c c0       	rjmp	.+216    	; 0x14e <__bad_interrupt>
      76:	00 00       	nop
      78:	6a c0       	rjmp	.+212    	; 0x14e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	da 05       	cpc	r29, r10
      7e:	de 05       	cpc	r29, r14
      80:	23 06       	cpc	r2, r19
      82:	3f 06       	cpc	r3, r31
      84:	46 06       	cpc	r4, r22
      86:	56 06       	cpc	r5, r22
      88:	66 06       	cpc	r6, r22
      8a:	7c 06       	cpc	r7, r28
      8c:	86 06       	cpc	r8, r22
      8e:	89 06       	cpc	r8, r25
      90:	8d 06       	cpc	r8, r29
      92:	91 06       	cpc	r9, r17
      94:	07 63       	ori	r16, 0x37	; 55
      96:	42 36       	cpi	r20, 0x62	; 98
      98:	b7 9b       	sbis	0x16, 7	; 22
      9a:	d8 a7       	std	Y+40, r29	; 0x28
      9c:	1a 39       	cpi	r17, 0x9A	; 154
      9e:	68 56       	subi	r22, 0x68	; 104
      a0:	18 ae       	std	Y+56, r1	; 0x38
      a2:	ba ab       	std	Y+50, r27	; 0x32
      a4:	55 8c       	ldd	r5, Z+29	; 0x1d
      a6:	1d 3c       	cpi	r17, 0xCD	; 205
      a8:	b7 cc       	rjmp	.-1682   	; 0xfffffa18 <__eeprom_end+0xff7efa18>
      aa:	57 63       	ori	r21, 0x37	; 55
      ac:	bd 6d       	ori	r27, 0xDD	; 221
      ae:	ed fd       	.word	0xfded	; ????
      b0:	75 3e       	cpi	r23, 0xE5	; 229
      b2:	f6 17       	cp	r31, r22
      b4:	72 31       	cpi	r23, 0x12	; 18
      b6:	bf 00       	.word	0x00bf	; ????
      b8:	00 00       	nop
      ba:	80 3f       	cpi	r24, 0xF0	; 240
      bc:	08 00       	.word	0x0008	; ????
      be:	00 00       	nop
      c0:	be 92       	st	-X, r11
      c2:	24 49       	sbci	r18, 0x94	; 148
      c4:	12 3e       	cpi	r17, 0xE2	; 226
      c6:	ab aa       	std	Y+51, r10	; 0x33
      c8:	aa 2a       	or	r10, r26
      ca:	be cd       	rjmp	.-1156   	; 0xfffffc48 <__eeprom_end+0xff7efc48>
      cc:	cc cc       	rjmp	.-1640   	; 0xfffffa66 <__eeprom_end+0xff7efa66>
      ce:	4c 3e       	cpi	r20, 0xEC	; 236
      d0:	00 00       	nop
      d2:	00 80       	ld	r0, Z
      d4:	be ab       	std	Y+54, r27	; 0x36
      d6:	aa aa       	std	Y+50, r10	; 0x32
      d8:	aa 3e       	cpi	r26, 0xEA	; 234
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	bf 00       	.word	0x00bf	; ????
      e0:	00 00       	nop
      e2:	80 3f       	cpi	r24, 0xF0	; 240
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	00 08       	sbc	r0, r0
      ea:	41 78       	andi	r20, 0x81	; 129
      ec:	d3 bb       	out	0x13, r29	; 19
      ee:	43 87       	std	Z+11, r20	; 0x0b
      f0:	d1 13       	cpse	r29, r17
      f2:	3d 19       	sub	r19, r13
      f4:	0e 3c       	cpi	r16, 0xCE	; 206
      f6:	c3 bd       	out	0x23, r28	; 35
      f8:	42 82       	std	Z+2, r4	; 0x02
      fa:	ad 2b       	or	r26, r29
      fc:	3e 68       	ori	r19, 0x8E	; 142
      fe:	ec 82       	std	Y+4, r14	; 0x04
     100:	76 be       	out	0x36, r7	; 54
     102:	d9 8f       	std	Y+25, r29	; 0x19
     104:	e1 a9       	ldd	r30, Z+49	; 0x31
     106:	3e 4c       	sbci	r19, 0xCE	; 206
     108:	80 ef       	ldi	r24, 0xF0	; 240
     10a:	ff be       	out	0x3f, r15	; 63
     10c:	01 c4       	rjmp	.+2050   	; 0x910 <__stack+0x11>
     10e:	ff 7f       	andi	r31, 0xFF	; 255
     110:	3f 00       	.word	0x003f	; ????
     112:	00 00       	nop
	...

00000116 <__ctors_end>:
     116:	11 24       	eor	r1, r1
     118:	1f be       	out	0x3f, r1	; 63
     11a:	cf ef       	ldi	r28, 0xFF	; 255
     11c:	d8 e0       	ldi	r29, 0x08	; 8
     11e:	de bf       	out	0x3e, r29	; 62
     120:	cd bf       	out	0x3d, r28	; 61

00000122 <__do_copy_data>:
     122:	13 e0       	ldi	r17, 0x03	; 3
     124:	a0 e0       	ldi	r26, 0x00	; 0
     126:	b1 e0       	ldi	r27, 0x01	; 1
     128:	e2 ef       	ldi	r30, 0xF2	; 242
     12a:	fc e1       	ldi	r31, 0x1C	; 28
     12c:	02 c0       	rjmp	.+4      	; 0x132 <__do_copy_data+0x10>
     12e:	05 90       	lpm	r0, Z+
     130:	0d 92       	st	X+, r0
     132:	a0 3d       	cpi	r26, 0xD0	; 208
     134:	b1 07       	cpc	r27, r17
     136:	d9 f7       	brne	.-10     	; 0x12e <__do_copy_data+0xc>

00000138 <__do_clear_bss>:
     138:	25 e0       	ldi	r18, 0x05	; 5
     13a:	a0 ed       	ldi	r26, 0xD0	; 208
     13c:	b3 e0       	ldi	r27, 0x03	; 3
     13e:	01 c0       	rjmp	.+2      	; 0x142 <.do_clear_bss_start>

00000140 <.do_clear_bss_loop>:
     140:	1d 92       	st	X+, r1

00000142 <.do_clear_bss_start>:
     142:	ae 34       	cpi	r26, 0x4E	; 78
     144:	b2 07       	cpc	r27, r18
     146:	e1 f7       	brne	.-8      	; 0x140 <.do_clear_bss_loop>
     148:	1e d6       	rcall	.+3132   	; 0xd86 <main>
     14a:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <_exit>

0000014e <__bad_interrupt>:
     14e:	58 cf       	rjmp	.-336    	; 0x0 <__vectors>

00000150 <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	1f 92       	push	r1
     156:	cd b7       	in	r28, 0x3d	; 61
     158:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     15a:	9f b7       	in	r25, 0x3f	; 63
     15c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     15e:	f8 94       	cli
	return flags;
     160:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
     162:	82 30       	cpi	r24, 0x02	; 2
     164:	40 f4       	brcc	.+16     	; 0x176 <sysclk_enable_module+0x26>
		*(reg + port)  &= ~id;
     166:	e8 2f       	mov	r30, r24
     168:	f0 e0       	ldi	r31, 0x00	; 0
     16a:	ec 59       	subi	r30, 0x9C	; 156
     16c:	ff 4f       	sbci	r31, 0xFF	; 255
     16e:	60 95       	com	r22
     170:	80 81       	ld	r24, Z
     172:	68 23       	and	r22, r24
     174:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     176:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     178:	0f 90       	pop	r0
     17a:	df 91       	pop	r29
     17c:	cf 91       	pop	r28
     17e:	08 95       	ret

00000180 <usart_putchar>:
	}

	if (baud_offset != USART_BAUD_UNDEFINED) {
		usart->UBRR = baudctrl;
	}
}
     180:	fc 01       	movw	r30, r24
     182:	90 81       	ld	r25, Z
     184:	95 ff       	sbrs	r25, 5
     186:	fd cf       	rjmp	.-6      	; 0x182 <usart_putchar+0x2>
     188:	66 83       	std	Z+6, r22	; 0x06
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	08 95       	ret

0000018e <usart_getchar>:
     18e:	fc 01       	movw	r30, r24
     190:	90 81       	ld	r25, Z
     192:	99 23       	and	r25, r25
     194:	ec f7       	brge	.-6      	; 0x190 <usart_getchar+0x2>
     196:	86 81       	ldd	r24, Z+6	; 0x06
     198:	08 95       	ret

0000019a <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     19a:	4f 92       	push	r4
     19c:	5f 92       	push	r5
     19e:	6f 92       	push	r6
     1a0:	7f 92       	push	r7
     1a2:	8f 92       	push	r8
     1a4:	9f 92       	push	r9
     1a6:	af 92       	push	r10
     1a8:	bf 92       	push	r11
     1aa:	cf 92       	push	r12
     1ac:	df 92       	push	r13
     1ae:	ef 92       	push	r14
     1b0:	ff 92       	push	r15
     1b2:	0f 93       	push	r16
     1b4:	1f 93       	push	r17
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	ec 01       	movw	r28, r24
     1bc:	6a 01       	movw	r12, r20
     1be:	7b 01       	movw	r14, r22

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
     1c0:	28 01       	movw	r4, r16
     1c2:	39 01       	movw	r6, r18
     1c4:	68 94       	set
     1c6:	12 f8       	bld	r1, 2
     1c8:	76 94       	lsr	r7
     1ca:	67 94       	ror	r6
     1cc:	57 94       	ror	r5
     1ce:	47 94       	ror	r4
     1d0:	16 94       	lsr	r1
     1d2:	d1 f7       	brne	.-12     	; 0x1c8 <usart_set_baudrate+0x2e>
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;

	if (usart->UCSRnA & USART_U2X_bm) {
     1d4:	88 81       	ld	r24, Y
     1d6:	81 fd       	sbrc	r24, 1
     1d8:	0e c0       	rjmp	.+28     	; 0x1f6 <usart_set_baudrate+0x5c>
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;
     1da:	48 01       	movw	r8, r16
     1dc:	59 01       	movw	r10, r18
     1de:	07 2e       	mov	r0, r23
     1e0:	73 e1       	ldi	r23, 0x13	; 19
     1e2:	b6 94       	lsr	r11
     1e4:	a7 94       	ror	r10
     1e6:	97 94       	ror	r9
     1e8:	87 94       	ror	r8
     1ea:	7a 95       	dec	r23
     1ec:	d1 f7       	brne	.-12     	; 0x1e2 <usart_set_baudrate+0x48>
     1ee:	70 2d       	mov	r23, r0

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
     1f0:	d3 01       	movw	r26, r6
     1f2:	c2 01       	movw	r24, r4
     1f4:	15 c0       	rjmp	.+42     	; 0x220 <usart_set_baudrate+0x86>
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;

	if (usart->UCSRnA & USART_U2X_bm) {
		max_rate /= 2;
     1f6:	d9 01       	movw	r26, r18
     1f8:	c8 01       	movw	r24, r16
     1fa:	68 94       	set
     1fc:	13 f8       	bld	r1, 3
     1fe:	b6 95       	lsr	r27
     200:	a7 95       	ror	r26
     202:	97 95       	ror	r25
     204:	87 95       	ror	r24
     206:	16 94       	lsr	r1
     208:	d1 f7       	brne	.-12     	; 0x1fe <usart_set_baudrate+0x64>
		min_rate /= 2;
     20a:	48 01       	movw	r8, r16
     20c:	59 01       	movw	r10, r18
     20e:	07 2e       	mov	r0, r23
     210:	74 e1       	ldi	r23, 0x14	; 20
     212:	b6 94       	lsr	r11
     214:	a7 94       	ror	r10
     216:	97 94       	ror	r9
     218:	87 94       	ror	r8
     21a:	7a 95       	dec	r23
     21c:	d1 f7       	brne	.-12     	; 0x212 <usart_set_baudrate+0x78>
     21e:	70 2d       	mov	r23, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     220:	8c 15       	cp	r24, r12
     222:	9d 05       	cpc	r25, r13
     224:	ae 05       	cpc	r26, r14
     226:	bf 05       	cpc	r27, r15
     228:	78 f1       	brcs	.+94     	; 0x288 <usart_set_baudrate+0xee>
     22a:	c8 14       	cp	r12, r8
     22c:	d9 04       	cpc	r13, r9
     22e:	ea 04       	cpc	r14, r10
     230:	fb 04       	cpc	r15, r11
     232:	60 f1       	brcs	.+88     	; 0x28c <usart_set_baudrate+0xf2>
		return false;
	}

	/* Check if double speed is enabled. */
	if (usart->UCSRnA & USART_U2X_bm) {
     234:	88 81       	ld	r24, Y
     236:	81 ff       	sbrs	r24, 1
     238:	10 c0       	rjmp	.+32     	; 0x25a <usart_set_baudrate+0xc0>
		baud *= 2;
		ubrr = (uint32_t)(cpu_hz / 8 / baud) - 1;
     23a:	a7 01       	movw	r20, r14
     23c:	96 01       	movw	r18, r12
     23e:	22 0f       	add	r18, r18
     240:	33 1f       	adc	r19, r19
     242:	44 1f       	adc	r20, r20
     244:	55 1f       	adc	r21, r21
     246:	c3 01       	movw	r24, r6
     248:	b2 01       	movw	r22, r4
     24a:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__udivmodsi4>
     24e:	da 01       	movw	r26, r20
     250:	c9 01       	movw	r24, r18
     252:	01 97       	sbiw	r24, 0x01	; 1
     254:	a1 09       	sbc	r26, r1
     256:	b1 09       	sbc	r27, r1
     258:	13 c0       	rjmp	.+38     	; 0x280 <usart_set_baudrate+0xe6>
	} else {
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
     25a:	c9 01       	movw	r24, r18
     25c:	b8 01       	movw	r22, r16
     25e:	68 94       	set
     260:	13 f8       	bld	r1, 3
     262:	96 95       	lsr	r25
     264:	87 95       	ror	r24
     266:	77 95       	ror	r23
     268:	67 95       	ror	r22
     26a:	16 94       	lsr	r1
     26c:	d1 f7       	brne	.-12     	; 0x262 <usart_set_baudrate+0xc8>
     26e:	a7 01       	movw	r20, r14
     270:	96 01       	movw	r18, r12
     272:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__udivmodsi4>
     276:	da 01       	movw	r26, r20
     278:	c9 01       	movw	r24, r18
     27a:	01 97       	sbiw	r24, 0x01	; 1
     27c:	a1 09       	sbc	r26, r1
     27e:	b1 09       	sbc	r27, r1
	}

	usart->UBRR = ubrr;
     280:	9d 83       	std	Y+5, r25	; 0x05
     282:	8c 83       	std	Y+4, r24	; 0x04
	return true;
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	03 c0       	rjmp	.+6      	; 0x28e <usart_set_baudrate+0xf4>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	01 c0       	rjmp	.+2      	; 0x28e <usart_set_baudrate+0xf4>
     28c:	80 e0       	ldi	r24, 0x00	; 0
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
	}

	usart->UBRR = ubrr;
	return true;
}
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	1f 91       	pop	r17
     294:	0f 91       	pop	r16
     296:	ff 90       	pop	r15
     298:	ef 90       	pop	r14
     29a:	df 90       	pop	r13
     29c:	cf 90       	pop	r12
     29e:	bf 90       	pop	r11
     2a0:	af 90       	pop	r10
     2a2:	9f 90       	pop	r9
     2a4:	8f 90       	pop	r8
     2a6:	7f 90       	pop	r7
     2a8:	6f 90       	pop	r6
     2aa:	5f 90       	pop	r5
     2ac:	4f 90       	pop	r4
     2ae:	08 95       	ret

000002b0 <usart_init_rs232>:
 *
 * \retval true if the initialization was successful
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     2b0:	0f 93       	push	r16
     2b2:	1f 93       	push	r17
     2b4:	cf 93       	push	r28
     2b6:	df 93       	push	r29
     2b8:	ec 01       	movw	r28, r24
     2ba:	8b 01       	movw	r16, r22
 * \brief usart Pointer to an USART module.
 */
static inline void usart_enable_module_clock(USART_t *usart)
{
#ifdef USART0
	if ((uintptr_t)usart == (uintptr_t)&UCSR0A) {
     2bc:	80 3c       	cpi	r24, 0xC0	; 192
     2be:	91 05       	cpc	r25, r1
     2c0:	19 f4       	brne	.+6      	; 0x2c8 <usart_init_rs232+0x18>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
     2c2:	62 e0       	ldi	r22, 0x02	; 2
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	44 df       	rcall	.-376    	; 0x150 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_UMSEL01_gm)) | usartmode;
     2c8:	8a 81       	ldd	r24, Y+2	; 0x02
     2ca:	8f 73       	andi	r24, 0x3F	; 63
     2cc:	8a 83       	std	Y+2, r24	; 0x02
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
	bool result;
	usart_enable_module_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
     2ce:	f8 01       	movw	r30, r16
     2d0:	26 81       	ldd	r18, Z+6	; 0x06
     2d2:	35 81       	ldd	r19, Z+5	; 0x05
     2d4:	84 81       	ldd	r24, Z+4	; 0x04
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->UCSRnC
		= ((usart)->UCSRnC &
     2d6:	9a 81       	ldd	r25, Y+2	; 0x02
     2d8:	48 2f       	mov	r20, r24
     2da:	43 70       	andi	r20, 0x03	; 3
     2dc:	44 0f       	add	r20, r20
     2de:	99 7f       	andi	r25, 0xF9	; 249
     2e0:	94 2b       	or	r25, r20
     2e2:	9a 83       	std	Y+2, r25	; 0x02
			(~USART_CHSIZE01C_gm)) | ((charSize & 0x03)
			<< USART_CHSIZE01C_gp);
	(usart)->UCSRnB
		= ((usart)->UCSRnB &
     2e4:	99 81       	ldd	r25, Y+1	; 0x01
     2e6:	84 70       	andi	r24, 0x04	; 4
     2e8:	88 0f       	add	r24, r24
     2ea:	88 0f       	add	r24, r24
     2ec:	9b 7f       	andi	r25, 0xFB	; 251
     2ee:	89 2b       	or	r24, r25
     2f0:	89 83       	std	Y+1, r24	; 0x01
			(~USART_CHSIZE2_bm)) | ((charSize & 0x04)
			<< USART_CHSIZE2_bp);

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_PMODE_gm)) | parityMode;
     2f2:	8a 81       	ldd	r24, Y+2	; 0x02
     2f4:	8f 7c       	andi	r24, 0xCF	; 207
     2f6:	83 2b       	or	r24, r19
     2f8:	8a 83       	std	Y+2, r24	; 0x02

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_STOPB_bm)) | (twoStopBits
     2fa:	9a 81       	ldd	r25, Y+2	; 0x02
     2fc:	97 7f       	andi	r25, 0xF7	; 247
     2fe:	82 2f       	mov	r24, r18
     300:	88 0f       	add	r24, r24
     302:	88 0f       	add	r24, r24
     304:	88 0f       	add	r24, r24
     306:	89 2b       	or	r24, r25
     308:	8a 83       	std	Y+2, r24	; 0x02
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate,
     30a:	40 81       	ld	r20, Z
     30c:	51 81       	ldd	r21, Z+1	; 0x01
     30e:	62 81       	ldd	r22, Z+2	; 0x02
     310:	73 81       	ldd	r23, Z+3	; 0x03
     312:	00 e4       	ldi	r16, 0x40	; 64
     314:	12 e4       	ldi	r17, 0x42	; 66
     316:	2f e0       	ldi	r18, 0x0F	; 15
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	ce 01       	movw	r24, r28
     31c:	3e df       	rcall	.-388    	; 0x19a <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_TXEN_bm;
     31e:	99 81       	ldd	r25, Y+1	; 0x01
     320:	98 60       	ori	r25, 0x08	; 8
     322:	99 83       	std	Y+1, r25	; 0x01
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_RXEN_bm;
     324:	99 81       	ldd	r25, Y+1	; 0x01
     326:	90 61       	ori	r25, 0x10	; 16
     328:	99 83       	std	Y+1, r25	; 0x01
			sysclk_get_source_clock_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	return result;
}
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	1f 91       	pop	r17
     330:	0f 91       	pop	r16
     332:	08 95       	ret

00000334 <loadcell_min_max_tran>:
 *  Author: jan.rune.herheim
 */ 

#include "loadcell_logger.h"

uint8_t loadcell_min_max_tran(uint16_t current_value, uint16_t *data_array) {
     334:	fb 01       	movw	r30, r22
	
	//find tran
	signed int tran = 0; //could go positive and negative, and could store a 15 bits number, hence enough for our 12 bits results.
	uint16_t tran_abs = 0;
	
	tran = current_value - *(data_array + POSITION_PREV); //tran = current - previous
     336:	22 81       	ldd	r18, Z+2	; 0x02
     338:	33 81       	ldd	r19, Z+3	; 0x03
     33a:	ac 01       	movw	r20, r24
     33c:	42 1b       	sub	r20, r18
     33e:	53 0b       	sbc	r21, r19
     340:	9a 01       	movw	r18, r20
	if ((abs(tran) > abs(*(data_array+POSITION_TRAN_MAX))) & (*(data_array+POSITION_ACCU_CNT) > 0)) //first step is not valid due to only one value.
     342:	22 f4       	brpl	.+8      	; 0x34c <loadcell_min_max_tran+0x18>
     344:	44 27       	eor	r20, r20
     346:	55 27       	eor	r21, r21
     348:	42 1b       	sub	r20, r18
     34a:	53 0b       	sbc	r21, r19
     34c:	62 85       	ldd	r22, Z+10	; 0x0a
     34e:	73 85       	ldd	r23, Z+11	; 0x0b
     350:	77 23       	and	r23, r23
     352:	1c f4       	brge	.+6      	; 0x35a <loadcell_min_max_tran+0x26>
     354:	71 95       	neg	r23
     356:	61 95       	neg	r22
     358:	71 09       	sbc	r23, r1
     35a:	a1 e0       	ldi	r26, 0x01	; 1
     35c:	64 17       	cp	r22, r20
     35e:	75 07       	cpc	r23, r21
     360:	0c f0       	brlt	.+2      	; 0x364 <loadcell_min_max_tran+0x30>
     362:	a0 e0       	ldi	r26, 0x00	; 0
     364:	aa 23       	and	r26, r26
     366:	a1 f0       	breq	.+40     	; 0x390 <loadcell_min_max_tran+0x5c>
     368:	61 e0       	ldi	r22, 0x01	; 1
     36a:	a2 89       	ldd	r26, Z+18	; 0x12
     36c:	b3 89       	ldd	r27, Z+19	; 0x13
     36e:	ab 2b       	or	r26, r27
     370:	09 f4       	brne	.+2      	; 0x374 <loadcell_min_max_tran+0x40>
     372:	60 e0       	ldi	r22, 0x00	; 0
     374:	66 23       	and	r22, r22
     376:	61 f0       	breq	.+24     	; 0x390 <loadcell_min_max_tran+0x5c>
	{
		if (tran < 0)
     378:	33 23       	and	r19, r19
     37a:	44 f4       	brge	.+16     	; 0x38c <loadcell_min_max_tran+0x58>
		{
			tran_abs = abs(tran); //check if >2047, if yes this is the max limit that could be transferred.
     37c:	9a 01       	movw	r18, r20
			if (tran_abs >= 0x7ff) //if yes the set to max value
     37e:	2f 3f       	cpi	r18, 0xFF	; 255
     380:	57 e0       	ldi	r21, 0x07	; 7
     382:	35 07       	cpc	r19, r21
     384:	10 f0       	brcs	.+4      	; 0x38a <loadcell_min_max_tran+0x56>
			{
				tran_abs = 0x7ff;
     386:	2f ef       	ldi	r18, 0xFF	; 255
     388:	37 e0       	ldi	r19, 0x07	; 7
			}
			tran_abs |= (1<<11); //flip the MSB of the 12 bits word to set the negative sign.
			tran = tran_abs;
     38a:	38 60       	ori	r19, 0x08	; 8
		}
		
		*(data_array+POSITION_TRAN_MAX) = tran; //store new tran max.
     38c:	33 87       	std	Z+11, r19	; 0x0b
     38e:	22 87       	std	Z+10, r18	; 0x0a
	}
	
	//find min and max
	if (current_value < *(data_array+POSITION_MIN))
     390:	26 81       	ldd	r18, Z+6	; 0x06
     392:	37 81       	ldd	r19, Z+7	; 0x07
     394:	82 17       	cp	r24, r18
     396:	93 07       	cpc	r25, r19
     398:	10 f4       	brcc	.+4      	; 0x39e <loadcell_min_max_tran+0x6a>
	{
		*(data_array+POSITION_MIN) = current_value; //store new min value.
     39a:	97 83       	std	Z+7, r25	; 0x07
     39c:	86 83       	std	Z+6, r24	; 0x06
	}
	if (current_value > *(data_array+POSITION_MAX))
     39e:	20 85       	ldd	r18, Z+8	; 0x08
     3a0:	31 85       	ldd	r19, Z+9	; 0x09
     3a2:	28 17       	cp	r18, r24
     3a4:	39 07       	cpc	r19, r25
     3a6:	10 f4       	brcc	.+4      	; 0x3ac <loadcell_min_max_tran+0x78>
	{
		*(data_array+POSITION_MAX) = current_value; //Store new max.
     3a8:	91 87       	std	Z+9, r25	; 0x09
     3aa:	80 87       	std	Z+8, r24	; 0x08
	}
}
     3ac:	08 95       	ret

000003ae <__portable_avr_delay_cycles>:
uint16_t controller_calc_avg(uint32_t data, uint16_t cnt) {
	uint16_t avg = 0;
	
	avg = data/cnt;
	return avg;
}
     3ae:	04 c0       	rjmp	.+8      	; 0x3b8 <__portable_avr_delay_cycles+0xa>
     3b0:	61 50       	subi	r22, 0x01	; 1
     3b2:	71 09       	sbc	r23, r1
     3b4:	81 09       	sbc	r24, r1
     3b6:	91 09       	sbc	r25, r1
     3b8:	61 15       	cp	r22, r1
     3ba:	71 05       	cpc	r23, r1
     3bc:	81 05       	cpc	r24, r1
     3be:	91 05       	cpc	r25, r1
     3c0:	b9 f7       	brne	.-18     	; 0x3b0 <__portable_avr_delay_cycles+0x2>
     3c2:	08 95       	ret

000003c4 <usart_tx_at>:
     3c4:	0f 93       	push	r16
     3c6:	1f 93       	push	r17
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	eb 01       	movw	r28, r22
     3ce:	68 81       	ld	r22, Y
     3d0:	66 23       	and	r22, r22
     3d2:	39 f0       	breq	.+14     	; 0x3e2 <usart_tx_at+0x1e>
     3d4:	8c 01       	movw	r16, r24
     3d6:	21 96       	adiw	r28, 0x01	; 1
     3d8:	c8 01       	movw	r24, r16
     3da:	d2 de       	rcall	.-604    	; 0x180 <usart_putchar>
     3dc:	69 91       	ld	r22, Y+
     3de:	61 11       	cpse	r22, r1
     3e0:	fb cf       	rjmp	.-10     	; 0x3d8 <usart_tx_at+0x14>
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	1f 91       	pop	r17
     3e8:	0f 91       	pop	r16
     3ea:	08 95       	ret

000003ec <reset_tx_data>:
     3ec:	44 23       	and	r20, r20
     3ee:	61 f0       	breq	.+24     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3f0:	a6 2f       	mov	r26, r22
     3f2:	b7 2f       	mov	r27, r23
     3f4:	e8 2f       	mov	r30, r24
     3f6:	f9 2f       	mov	r31, r25
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	2d 91       	ld	r18, X+
     3fc:	3d 91       	ld	r19, X+
     3fe:	21 93       	st	Z+, r18
     400:	31 93       	st	Z+, r19
     402:	8f 5f       	subi	r24, 0xFF	; 255
     404:	48 13       	cpse	r20, r24
     406:	f9 cf       	rjmp	.-14     	; 0x3fa <reset_tx_data+0xe>
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	08 95       	ret

0000040c <reset_char_array>:
     40c:	66 23       	and	r22, r22
     40e:	59 f0       	breq	.+22     	; 0x426 <reset_char_array+0x1a>
     410:	fc 01       	movw	r30, r24
     412:	61 50       	subi	r22, 0x01	; 1
     414:	70 e0       	ldi	r23, 0x00	; 0
     416:	6f 5f       	subi	r22, 0xFF	; 255
     418:	7f 4f       	sbci	r23, 0xFF	; 255
     41a:	86 0f       	add	r24, r22
     41c:	97 1f       	adc	r25, r23
     41e:	11 92       	st	Z+, r1
     420:	e8 17       	cp	r30, r24
     422:	f9 07       	cpc	r31, r25
     424:	e1 f7       	brne	.-8      	; 0x41e <reset_char_array+0x12>
     426:	08 95       	ret

00000428 <reset_all_data>:
     428:	41 e1       	ldi	r20, 0x11	; 17
     42a:	65 ee       	ldi	r22, 0xE5	; 229
     42c:	72 e0       	ldi	r23, 0x02	; 2
     42e:	8c e2       	ldi	r24, 0x2C	; 44
     430:	95 e0       	ldi	r25, 0x05	; 5
     432:	dc df       	rcall	.-72     	; 0x3ec <reset_tx_data>
     434:	64 e6       	ldi	r22, 0x64	; 100
     436:	86 e3       	ldi	r24, 0x36	; 54
     438:	94 e0       	ldi	r25, 0x04	; 4
     43a:	e8 df       	rcall	.-48     	; 0x40c <reset_char_array>
     43c:	64 e6       	ldi	r22, 0x64	; 100
     43e:	82 ed       	ldi	r24, 0xD2	; 210
     440:	93 e0       	ldi	r25, 0x03	; 3
     442:	e4 cf       	rjmp	.-56     	; 0x40c <reset_char_array>
     444:	08 95       	ret

00000446 <rtc_init_period>:
     446:	14 be       	out	0x34, r1	; 52
     448:	e0 e6       	ldi	r30, 0x60	; 96
     44a:	f0 e0       	ldi	r31, 0x00	; 0
     44c:	88 e1       	ldi	r24, 0x18	; 24
     44e:	80 83       	st	Z, r24
     450:	86 e4       	ldi	r24, 0x46	; 70
     452:	80 83       	st	Z, r24
     454:	08 95       	ret

00000456 <radio_pins_init>:
     456:	54 9a       	sbi	0x0a, 4	; 10
     458:	55 98       	cbi	0x0a, 5	; 10
     45a:	08 95       	ret

0000045c <my_delay_10ms>:
     45c:	cf 93       	push	r28
     45e:	88 23       	and	r24, r24
     460:	41 f0       	breq	.+16     	; 0x472 <my_delay_10ms+0x16>
     462:	c8 2f       	mov	r28, r24
     464:	63 e8       	ldi	r22, 0x83	; 131
     466:	76 e0       	ldi	r23, 0x06	; 6
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	a0 df       	rcall	.-192    	; 0x3ae <__portable_avr_delay_cycles>
     46e:	c1 50       	subi	r28, 0x01	; 1
     470:	c9 f7       	brne	.-14     	; 0x464 <my_delay_10ms+0x8>
     472:	cf 91       	pop	r28
     474:	08 95       	ret

00000476 <radio_power_on>:
     476:	1f 93       	push	r17
     478:	cf 93       	push	r28
     47a:	df 93       	push	r29
     47c:	5c 98       	cbi	0x0b, 4	; 11
     47e:	67 ea       	ldi	r22, 0xA7	; 167
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	93 df       	rcall	.-218    	; 0x3ae <__portable_avr_delay_cycles>
     488:	5c 9a       	sbi	0x0b, 4	; 11
     48a:	6b e1       	ldi	r22, 0x1B	; 27
     48c:	71 e4       	ldi	r23, 0x41	; 65
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	8d df       	rcall	.-230    	; 0x3ae <__portable_avr_delay_cycles>
     494:	5c 98       	cbi	0x0b, 4	; 11
     496:	6b e0       	ldi	r22, 0x0B	; 11
     498:	7b e8       	ldi	r23, 0x8B	; 139
     49a:	82 e0       	ldi	r24, 0x02	; 2
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	87 df       	rcall	.-242    	; 0x3ae <__portable_avr_delay_cycles>
     4a0:	5c 9a       	sbi	0x0b, 4	; 11
     4a2:	4d 99       	sbic	0x09, 5	; 9
     4a4:	16 c0       	rjmp	.+44     	; 0x4d2 <radio_power_on+0x5c>
     4a6:	c0 e0       	ldi	r28, 0x00	; 0
     4a8:	d1 e0       	ldi	r29, 0x01	; 1
     4aa:	10 e0       	ldi	r17, 0x00	; 0
     4ac:	66 e3       	ldi	r22, 0x36	; 54
     4ae:	72 e8       	ldi	r23, 0x82	; 130
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	7c df       	rcall	.-264    	; 0x3ae <__portable_avr_delay_cycles>
     4b6:	cf 5f       	subi	r28, 0xFF	; 255
     4b8:	89 b1       	in	r24, 0x09	; 9
     4ba:	85 fb       	bst	r24, 5
     4bc:	88 27       	eor	r24, r24
     4be:	80 f9       	bld	r24, 0
     4c0:	8d 17       	cp	r24, r29
     4c2:	41 f0       	breq	.+16     	; 0x4d4 <radio_power_on+0x5e>
     4c4:	8d 2f       	mov	r24, r29
     4c6:	cb 31       	cpi	r28, 0x1B	; 27
     4c8:	08 f0       	brcs	.+2      	; 0x4cc <radio_power_on+0x56>
     4ca:	81 2f       	mov	r24, r17
     4cc:	81 11       	cpse	r24, r1
     4ce:	ee cf       	rjmp	.-36     	; 0x4ac <radio_power_on+0x36>
     4d0:	01 c0       	rjmp	.+2      	; 0x4d4 <radio_power_on+0x5e>
     4d2:	c0 e0       	ldi	r28, 0x00	; 0
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	cb 31       	cpi	r28, 0x1B	; 27
     4d8:	09 f0       	breq	.+2      	; 0x4dc <radio_power_on+0x66>
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	1f 91       	pop	r17
     4e2:	08 95       	ret

000004e4 <radio_power_off_at>:
     4e4:	1f 93       	push	r17
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	4d 9b       	sbis	0x09, 5	; 9
     4ec:	2f c0       	rjmp	.+94     	; 0x54c <radio_power_off_at+0x68>
     4ee:	c0 e0       	ldi	r28, 0x00	; 0
     4f0:	d1 e0       	ldi	r29, 0x01	; 1
     4f2:	10 e0       	ldi	r17, 0x00	; 0
     4f4:	6a e3       	ldi	r22, 0x3A	; 58
     4f6:	71 e0       	ldi	r23, 0x01	; 1
     4f8:	88 ec       	ldi	r24, 0xC8	; 200
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	63 df       	rcall	.-314    	; 0x3c4 <usart_tx_at>
     4fe:	6a e3       	ldi	r22, 0x3A	; 58
     500:	71 e0       	ldi	r23, 0x01	; 1
     502:	88 ec       	ldi	r24, 0xC8	; 200
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	5e df       	rcall	.-324    	; 0x3c4 <usart_tx_at>
     508:	5c 98       	cbi	0x0b, 4	; 11
     50a:	6b e2       	ldi	r22, 0x2B	; 43
     50c:	7c e2       	ldi	r23, 0x2C	; 44
     50e:	8a e0       	ldi	r24, 0x0A	; 10
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	4d df       	rcall	.-358    	; 0x3ae <__portable_avr_delay_cycles>
     514:	4d 9b       	sbis	0x09, 5	; 9
     516:	10 c0       	rjmp	.+32     	; 0x538 <radio_power_off_at+0x54>
     518:	66 e4       	ldi	r22, 0x46	; 70
     51a:	71 e0       	ldi	r23, 0x01	; 1
     51c:	88 ec       	ldi	r24, 0xC8	; 200
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	51 df       	rcall	.-350    	; 0x3c4 <usart_tx_at>
     522:	66 e4       	ldi	r22, 0x46	; 70
     524:	71 e0       	ldi	r23, 0x01	; 1
     526:	88 ec       	ldi	r24, 0xC8	; 200
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	4c df       	rcall	.-360    	; 0x3c4 <usart_tx_at>
     52c:	5c 98       	cbi	0x0b, 4	; 11
     52e:	61 e4       	ldi	r22, 0x41	; 65
     530:	72 e4       	ldi	r23, 0x42	; 66
     532:	8f e0       	ldi	r24, 0x0F	; 15
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	3b df       	rcall	.-394    	; 0x3ae <__portable_avr_delay_cycles>
     538:	cf 5f       	subi	r28, 0xFF	; 255
     53a:	4d 9b       	sbis	0x09, 5	; 9
     53c:	08 c0       	rjmp	.+16     	; 0x54e <radio_power_off_at+0x6a>
     53e:	8d 2f       	mov	r24, r29
     540:	cb 31       	cpi	r28, 0x1B	; 27
     542:	08 f0       	brcs	.+2      	; 0x546 <radio_power_off_at+0x62>
     544:	81 2f       	mov	r24, r17
     546:	81 11       	cpse	r24, r1
     548:	d5 cf       	rjmp	.-86     	; 0x4f4 <radio_power_off_at+0x10>
     54a:	01 c0       	rjmp	.+2      	; 0x54e <radio_power_off_at+0x6a>
     54c:	c0 e0       	ldi	r28, 0x00	; 0
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	cb 31       	cpi	r28, 0x1B	; 27
     552:	09 f0       	breq	.+2      	; 0x556 <radio_power_off_at+0x72>
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	df 91       	pop	r29
     558:	cf 91       	pop	r28
     55a:	1f 91       	pop	r17
     55c:	08 95       	ret

0000055e <adc_result_average>:
     55e:	6f 92       	push	r6
     560:	7f 92       	push	r7
     562:	8f 92       	push	r8
     564:	9f 92       	push	r9
     566:	af 92       	push	r10
     568:	bf 92       	push	r11
     56a:	cf 92       	push	r12
     56c:	df 92       	push	r13
     56e:	ef 92       	push	r14
     570:	ff 92       	push	r15
     572:	0f 93       	push	r16
     574:	1f 93       	push	r17
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	cd b7       	in	r28, 0x3d	; 61
     57c:	de b7       	in	r29, 0x3e	; 62
     57e:	0d b7       	in	r16, 0x3d	; 61
     580:	1e b7       	in	r17, 0x3e	; 62
     582:	46 2f       	mov	r20, r22
     584:	50 e0       	ldi	r21, 0x00	; 0
     586:	44 0f       	add	r20, r20
     588:	55 1f       	adc	r21, r21
     58a:	2d b7       	in	r18, 0x3d	; 61
     58c:	3e b7       	in	r19, 0x3e	; 62
     58e:	24 1b       	sub	r18, r20
     590:	35 0b       	sbc	r19, r21
     592:	0f b6       	in	r0, 0x3f	; 63
     594:	f8 94       	cli
     596:	3e bf       	out	0x3e, r19	; 62
     598:	0f be       	out	0x3f, r0	; 63
     59a:	2d bf       	out	0x3d, r18	; 61
     59c:	ad b7       	in	r26, 0x3d	; 61
     59e:	be b7       	in	r27, 0x3e	; 62
     5a0:	11 96       	adiw	r26, 0x01	; 1
     5a2:	e4 e6       	ldi	r30, 0x64	; 100
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	90 81       	ld	r25, Z
     5a8:	9e 7f       	andi	r25, 0xFE	; 254
     5aa:	90 83       	st	Z, r25
     5ac:	97 e8       	ldi	r25, 0x87	; 135
     5ae:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     5b2:	66 23       	and	r22, r22
     5b4:	49 f1       	breq	.+82     	; 0x608 <adc_result_average+0xaa>
     5b6:	3d 01       	movw	r6, r26
     5b8:	81 2c       	mov	r8, r1
     5ba:	91 2c       	mov	r9, r1
     5bc:	54 01       	movw	r10, r8
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	0f 2e       	mov	r0, r31
     5c2:	fc e7       	ldi	r31, 0x7C	; 124
     5c4:	cf 2e       	mov	r12, r31
     5c6:	d1 2c       	mov	r13, r1
     5c8:	f0 2d       	mov	r31, r0
     5ca:	80 64       	ori	r24, 0x40	; 64
     5cc:	ea e7       	ldi	r30, 0x7A	; 122
     5ce:	f0 e0       	ldi	r31, 0x00	; 0
     5d0:	0f 2e       	mov	r0, r31
     5d2:	f8 e7       	ldi	r31, 0x78	; 120
     5d4:	ef 2e       	mov	r14, r31
     5d6:	f1 2c       	mov	r15, r1
     5d8:	f0 2d       	mov	r31, r0
     5da:	d6 01       	movw	r26, r12
     5dc:	8c 93       	st	X, r24
     5de:	90 81       	ld	r25, Z
     5e0:	90 64       	ori	r25, 0x40	; 64
     5e2:	90 83       	st	Z, r25
     5e4:	90 81       	ld	r25, Z
     5e6:	96 fd       	sbrc	r25, 6
     5e8:	fd cf       	rjmp	.-6      	; 0x5e4 <adc_result_average+0x86>
     5ea:	d7 01       	movw	r26, r14
     5ec:	4d 91       	ld	r20, X+
     5ee:	5c 91       	ld	r21, X
     5f0:	d3 01       	movw	r26, r6
     5f2:	4d 93       	st	X+, r20
     5f4:	5d 93       	st	X+, r21
     5f6:	3d 01       	movw	r6, r26
     5f8:	84 0e       	add	r8, r20
     5fa:	95 1e       	adc	r9, r21
     5fc:	a1 1c       	adc	r10, r1
     5fe:	b1 1c       	adc	r11, r1
     600:	3f 5f       	subi	r19, 0xFF	; 255
     602:	63 13       	cpse	r22, r19
     604:	ea cf       	rjmp	.-44     	; 0x5da <adc_result_average+0x7c>
     606:	03 c0       	rjmp	.+6      	; 0x60e <adc_result_average+0xb0>
     608:	81 2c       	mov	r8, r1
     60a:	91 2c       	mov	r9, r1
     60c:	54 01       	movw	r10, r8
     60e:	26 2f       	mov	r18, r22
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	40 e0       	ldi	r20, 0x00	; 0
     614:	50 e0       	ldi	r21, 0x00	; 0
     616:	c5 01       	movw	r24, r10
     618:	b4 01       	movw	r22, r8
     61a:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__udivmodsi4>
     61e:	c9 01       	movw	r24, r18
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	f8 94       	cli
     624:	1e bf       	out	0x3e, r17	; 62
     626:	0f be       	out	0x3f, r0	; 63
     628:	0d bf       	out	0x3d, r16	; 61
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	1f 91       	pop	r17
     630:	0f 91       	pop	r16
     632:	ff 90       	pop	r15
     634:	ef 90       	pop	r14
     636:	df 90       	pop	r13
     638:	cf 90       	pop	r12
     63a:	bf 90       	pop	r11
     63c:	af 90       	pop	r10
     63e:	9f 90       	pop	r9
     640:	8f 90       	pop	r8
     642:	7f 90       	pop	r7
     644:	6f 90       	pop	r6
     646:	08 95       	ret

00000648 <at_get_radio_network_time>:

void at_get_radio_network_time(){
     648:	ef 92       	push	r14
     64a:	ff 92       	push	r15
     64c:	0f 93       	push	r16
     64e:	1f 93       	push	r17
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	00 d0       	rcall	.+0      	; 0x656 <at_get_radio_network_time+0xe>
     656:	1f 92       	push	r1
     658:	cd b7       	in	r28, 0x3d	; 61
     65a:	de b7       	in	r29, 0x3e	; 62
	
	int j = 0;
	int k = AT_QLTS_START;
	char temp[3] = "";
     65c:	1a 82       	std	Y+2, r1	; 0x02
     65e:	19 82       	std	Y+1, r1	; 0x01
     660:	1b 82       	std	Y+3, r1	; 0x03
     662:	0f 2e       	mov	r0, r31
     664:	ff eb       	ldi	r31, 0xBF	; 191
     666:	ef 2e       	mov	r14, r31
     668:	f4 e0       	ldi	r31, 0x04	; 4
     66a:	ff 2e       	mov	r15, r31
     66c:	f0 2d       	mov	r31, r0
     66e:	0a e0       	ldi	r16, 0x0A	; 10
     670:	10 e0       	ldi	r17, 0x00	; 0
     672:	f7 01       	movw	r30, r14
     674:	31 97       	sbiw	r30, 0x01	; 1
	while (j < 6)
	{
		int i = 0;
		while (i < 2)
		{
			temp[i] = *(response+k+i);
     676:	80 81       	ld	r24, Z
     678:	89 83       	std	Y+1, r24	; 0x01
     67a:	f7 01       	movw	r30, r14
     67c:	80 81       	ld	r24, Z
     67e:	8a 83       	std	Y+2, r24	; 0x02
			i++;
		}
		tx_data[POSITION_YEAR+j] = atoi(temp);
     680:	ce 01       	movw	r24, r28
     682:	01 96       	adiw	r24, 0x01	; 1
     684:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <atoi>
     688:	f8 01       	movw	r30, r16
     68a:	ee 0f       	add	r30, r30
     68c:	ff 1f       	adc	r31, r31
     68e:	e4 5d       	subi	r30, 0xD4	; 212
     690:	fa 4f       	sbci	r31, 0xFA	; 250
     692:	91 83       	std	Z+1, r25	; 0x01
     694:	80 83       	st	Z, r24
     696:	f3 e0       	ldi	r31, 0x03	; 3
     698:	ef 0e       	add	r14, r31
     69a:	f1 1c       	adc	r15, r1
     69c:	0f 5f       	subi	r16, 0xFF	; 255
     69e:	1f 4f       	sbci	r17, 0xFF	; 255
	
	int j = 0;
	int k = AT_QLTS_START;
	char temp[3] = "";
	
	while (j < 6)
     6a0:	00 31       	cpi	r16, 0x10	; 16
     6a2:	11 05       	cpc	r17, r1
     6a4:	31 f7       	brne	.-52     	; 0x672 <at_get_radio_network_time+0x2a>
		tx_data[POSITION_YEAR+j] = atoi(temp);
		k = k+3;
		j++;
	}
	
}
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	0f 90       	pop	r0
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	1f 91       	pop	r17
     6b2:	0f 91       	pop	r16
     6b4:	ff 90       	pop	r15
     6b6:	ef 90       	pop	r14
     6b8:	08 95       	ret

000006ba <tx_at_response>:


uint8_t tx_at_response(const m95_at_t *opt) {
     6ba:	0f 93       	push	r16
     6bc:	1f 93       	push	r17
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	ec 01       	movw	r28, r24
	uint8_t tx_at_cnt = 0; //nr of AT command sent
	char *ret; //response pointer
	//uint32_t i = 0;
			
	ret = 0;
	while (tx_at_cnt < opt->retries) //Less than nr of retries to send the AT command
     6c4:	88 85       	ldd	r24, Y+8	; 0x08
     6c6:	88 23       	and	r24, r24
     6c8:	09 f4       	brne	.+2      	; 0x6cc <tx_at_response+0x12>
     6ca:	63 c0       	rjmp	.+198    	; 0x792 <tx_at_response+0xd8>
     6cc:	10 e0       	ldi	r17, 0x00	; 0
     6ce:	00 e0       	ldi	r16, 0x00	; 0
	{
		reset_char_array(&response, RESPONSE_SIZE); //reset response buffer
     6d0:	60 e8       	ldi	r22, 0x80	; 128
     6d2:	8c ea       	ldi	r24, 0xAC	; 172
     6d4:	94 e0       	ldi	r25, 0x04	; 4
     6d6:	9a de       	rcall	.-716    	; 0x40c <reset_char_array>
		response_counter = 0; //RESET COUNTER
     6d8:	10 92 a7 04 	sts	0x04A7, r1	; 0x8004a7 <response_counter>
		response_timeout = opt->resp_time;
     6dc:	8c 81       	ldd	r24, Y+4	; 0x04
     6de:	9d 81       	ldd	r25, Y+5	; 0x05
     6e0:	ae 81       	ldd	r26, Y+6	; 0x06
     6e2:	bf 81       	ldd	r27, Y+7	; 0x07
     6e4:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <response_timeout>
     6e8:	90 93 a4 04 	sts	0x04A4, r25	; 0x8004a4 <response_timeout+0x1>
     6ec:	a0 93 a5 04 	sts	0x04A5, r26	; 0x8004a5 <response_timeout+0x2>
     6f0:	b0 93 a6 04 	sts	0x04A6, r27	; 0x8004a6 <response_timeout+0x3>
		response_timeout_counter = 0;
     6f4:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <response_timeout_counter>
     6f8:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <response_timeout_counter+0x1>
     6fc:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <response_timeout_counter+0x2>
     700:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <response_timeout_counter+0x3>
		
		usart_tx_at(USART_RADIO, opt->cmd); //send AT command to radio
     704:	68 81       	ld	r22, Y
     706:	79 81       	ldd	r23, Y+1	; 0x01
     708:	88 ec       	ldi	r24, 0xC8	; 200
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	5b de       	rcall	.-842    	; 0x3c4 <usart_tx_at>
		
		//usart_set_rx_interrupt_level(USART_RADIO, USART_INT_LVL_MED); //READY FOR RECEIVING BYTES
		sei();
     70e:	78 94       	sei
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_complete_interrupt_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_RXC_bm;
     710:	e8 ec       	ldi	r30, 0xC8	; 200
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	81 81       	ldd	r24, Z+1	; 0x01
     716:	80 68       	ori	r24, 0x80	; 128
     718:	81 83       	std	Z+1, r24	; 0x01
     71a:	1e c0       	rjmp	.+60     	; 0x758 <tx_at_response+0x9e>
		//UCSR0B |= (1 << 7); // Enable the USART Recieve Complete interrupt (USART_RXC)
		usart_rx_complete_interrupt_enable(USART_RADIO);
		while (response_timeout_counter < response_timeout) {
			response_timeout_counter++;
     71c:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <response_timeout_counter>
     720:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <response_timeout_counter+0x1>
     724:	a0 91 a1 04 	lds	r26, 0x04A1	; 0x8004a1 <response_timeout_counter+0x2>
     728:	b0 91 a2 04 	lds	r27, 0x04A2	; 0x8004a2 <response_timeout_counter+0x3>
     72c:	01 96       	adiw	r24, 0x01	; 1
     72e:	a1 1d       	adc	r26, r1
     730:	b1 1d       	adc	r27, r1
     732:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <response_timeout_counter>
     736:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <response_timeout_counter+0x1>
     73a:	a0 93 a1 04 	sts	0x04A1, r26	; 0x8004a1 <response_timeout_counter+0x2>
     73e:	b0 93 a2 04 	sts	0x04A2, r27	; 0x8004a2 <response_timeout_counter+0x3>
			my_delay_10ms(1);
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	8b de       	rcall	.-746    	; 0x45c <my_delay_10ms>
			ret = strstr(response, opt->comp); //DO THE COMPARISON AND BREAK THE LOOP
     746:	6a 81       	ldd	r22, Y+2	; 0x02
     748:	7b 81       	ldd	r23, Y+3	; 0x03
     74a:	8c ea       	ldi	r24, 0xAC	; 172
     74c:	94 e0       	ldi	r25, 0x04	; 4
     74e:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <strstr>
			if (ret != 0) //correct response received. IDEALLY IT SHOULD CHECK FOR WRONG RESPONSES TO AVOID TIMOUT TO BE RUN IF IT HAPPENS
			{
				status = 0;
				goto END;
				} else {
				status = 1;
     752:	01 e0       	ldi	r16, 0x01	; 1
		usart_rx_complete_interrupt_enable(USART_RADIO);
		while (response_timeout_counter < response_timeout) {
			response_timeout_counter++;
			my_delay_10ms(1);
			ret = strstr(response, opt->comp); //DO THE COMPARISON AND BREAK THE LOOP
			if (ret != 0) //correct response received. IDEALLY IT SHOULD CHECK FOR WRONG RESPONSES TO AVOID TIMOUT TO BE RUN IF IT HAPPENS
     754:	89 2b       	or	r24, r25
     756:	f9 f4       	brne	.+62     	; 0x796 <tx_at_response+0xdc>
		
		//usart_set_rx_interrupt_level(USART_RADIO, USART_INT_LVL_MED); //READY FOR RECEIVING BYTES
		sei();
		//UCSR0B |= (1 << 7); // Enable the USART Recieve Complete interrupt (USART_RXC)
		usart_rx_complete_interrupt_enable(USART_RADIO);
		while (response_timeout_counter < response_timeout) {
     758:	40 91 9f 04 	lds	r20, 0x049F	; 0x80049f <response_timeout_counter>
     75c:	50 91 a0 04 	lds	r21, 0x04A0	; 0x8004a0 <response_timeout_counter+0x1>
     760:	60 91 a1 04 	lds	r22, 0x04A1	; 0x8004a1 <response_timeout_counter+0x2>
     764:	70 91 a2 04 	lds	r23, 0x04A2	; 0x8004a2 <response_timeout_counter+0x3>
     768:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <response_timeout>
     76c:	90 91 a4 04 	lds	r25, 0x04A4	; 0x8004a4 <response_timeout+0x1>
     770:	a0 91 a5 04 	lds	r26, 0x04A5	; 0x8004a5 <response_timeout+0x2>
     774:	b0 91 a6 04 	lds	r27, 0x04A6	; 0x8004a6 <response_timeout+0x3>
     778:	48 17       	cp	r20, r24
     77a:	59 07       	cpc	r21, r25
     77c:	6a 07       	cpc	r22, r26
     77e:	7b 07       	cpc	r23, r27
				} else {
				status = 1;
			}
		}
		
		my_delay_10ms(30);
     780:	68 f2       	brcs	.-102    	; 0x71c <tx_at_response+0x62>
     782:	8e e1       	ldi	r24, 0x1E	; 30
     784:	6b de       	rcall	.-810    	; 0x45c <my_delay_10ms>
		tx_at_cnt++;
     786:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t tx_at_cnt = 0; //nr of AT command sent
	char *ret; //response pointer
	//uint32_t i = 0;
			
	ret = 0;
	while (tx_at_cnt < opt->retries) //Less than nr of retries to send the AT command
     788:	88 85       	ldd	r24, Y+8	; 0x08
     78a:	18 17       	cp	r17, r24
     78c:	08 f4       	brcc	.+2      	; 0x790 <tx_at_response+0xd6>
     78e:	a0 cf       	rjmp	.-192    	; 0x6d0 <tx_at_response+0x16>
     790:	03 c0       	rjmp	.+6      	; 0x798 <tx_at_response+0xde>
}


uint8_t tx_at_response(const m95_at_t *opt) {
	
	uint8_t status = 0; //tx status, 0 = alles ok.
     792:	00 e0       	ldi	r16, 0x00	; 0
     794:	01 c0       	rjmp	.+2      	; 0x798 <tx_at_response+0xde>
			response_timeout_counter++;
			my_delay_10ms(1);
			ret = strstr(response, opt->comp); //DO THE COMPARISON AND BREAK THE LOOP
			if (ret != 0) //correct response received. IDEALLY IT SHOULD CHECK FOR WRONG RESPONSES TO AVOID TIMOUT TO BE RUN IF IT HAPPENS
			{
				status = 0;
     796:	00 e0       	ldi	r16, 0x00	; 0
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_complete_interrupt_disable(USART_t *usart)
{
	(usart)->UCSRnB &= ~USART_RXC_bm;
     798:	e8 ec       	ldi	r30, 0xC8	; 200
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	81 81       	ldd	r24, Z+1	; 0x01
     79e:	8f 77       	andi	r24, 0x7F	; 127
	END:
	//usart_set_rx_interrupt_level(USART_RADIO, USART_INT_LVL_OFF); //disable rx interrupts
	usart_rx_complete_interrupt_disable(USART_RADIO);
	
	#ifdef DEBUG
	usart_tx_at(USART_TERMINAL, response); //DEBUG
     7a0:	81 83       	std	Z+1, r24	; 0x01
     7a2:	6c ea       	ldi	r22, 0xAC	; 172
     7a4:	74 e0       	ldi	r23, 0x04	; 4
     7a6:	88 ec       	ldi	r24, 0xC8	; 200
     7a8:	90 e0       	ldi	r25, 0x00	; 0
	//usart_tx_at(USART_TERMINAL, RESPONSE_FOOTER); //DEBUG
	#endif // DEBUG
	
	return status;
}
     7aa:	0c de       	rcall	.-1000   	; 0x3c4 <usart_tx_at>
     7ac:	80 2f       	mov	r24, r16
     7ae:	df 91       	pop	r29
     7b0:	cf 91       	pop	r28
     7b2:	1f 91       	pop	r17
     7b4:	0f 91       	pop	r16
     7b6:	08 95       	ret

000007b8 <data_to_char>:


uint8_t data_to_char(uint16_t *array_data, uint8_t array_data_len, char *array_ascii, int base) {
     7b8:	2f 92       	push	r2
     7ba:	3f 92       	push	r3
     7bc:	4f 92       	push	r4
     7be:	5f 92       	push	r5
     7c0:	6f 92       	push	r6
     7c2:	7f 92       	push	r7
     7c4:	8f 92       	push	r8
     7c6:	9f 92       	push	r9
     7c8:	af 92       	push	r10
     7ca:	bf 92       	push	r11
     7cc:	cf 92       	push	r12
     7ce:	df 92       	push	r13
     7d0:	ef 92       	push	r14
     7d2:	ff 92       	push	r15
     7d4:	0f 93       	push	r16
     7d6:	1f 93       	push	r17
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	cd b7       	in	r28, 0x3d	; 61
     7de:	de b7       	in	r29, 0x3e	; 62
     7e0:	63 97       	sbiw	r28, 0x13	; 19
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	de bf       	out	0x3e, r29	; 62
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	cd bf       	out	0x3d, r28	; 61
     7ec:	9b 8b       	std	Y+19, r25	; 0x13
     7ee:	8a 8b       	std	Y+18, r24	; 0x12
     7f0:	3f 87       	std	Y+15, r19	; 0x0f
     7f2:	2e 87       	std	Y+14, r18	; 0x0e
	uint8_t status = 0;
	uint8_t i = 0;
	uint8_t j = 0;
	char temp[5] = ""; //MAX 4 VALUES + NULL TERMINATION
     7f4:	1a 82       	std	Y+2, r1	; 0x02
     7f6:	19 82       	std	Y+1, r1	; 0x01
     7f8:	fe 01       	movw	r30, r28
     7fa:	33 96       	adiw	r30, 0x03	; 3
     7fc:	83 e0       	ldi	r24, 0x03	; 3
     7fe:	df 01       	movw	r26, r30
     800:	1d 92       	st	X+, r1
     802:	8a 95       	dec	r24
     804:	e9 f7       	brne	.-6      	; 0x800 <data_to_char+0x48>
     806:	aa 88       	ldd	r10, Y+18	; 0x12
     808:	bb 88       	ldd	r11, Y+19	; 0x13
     80a:	15 01       	movw	r2, r10
     80c:	b4 e1       	ldi	r27, 0x14	; 20
     80e:	2b 0e       	add	r2, r27
     810:	31 1c       	adc	r3, r1
	while (i <= POSITION_TIME)
	{
		j=1;
		while (TX_DATA_DIGITS-j > 0)
		{
			if ((*(array_data+i) < pow(base,TX_DATA_DIGITS-j))) //CHECK IF NUMBER IS LESS THAN LIMITS
     812:	8e 85       	ldd	r24, Y+14	; 0x0e
     814:	9f 85       	ldd	r25, Y+15	; 0x0f
     816:	09 2e       	mov	r0, r25
     818:	00 0c       	add	r0, r0
     81a:	aa 0b       	sbc	r26, r26
     81c:	bb 0b       	sbc	r27, r27
     81e:	8a 87       	std	Y+10, r24	; 0x0a
     820:	9b 87       	std	Y+11, r25	; 0x0b
     822:	ac 87       	std	Y+12, r26	; 0x0c
     824:	bd 87       	std	Y+13, r27	; 0x0d
     826:	39 8a       	std	Y+17, r3	; 0x11
     828:	28 8a       	std	Y+16, r2	; 0x10
     82a:	6a 01       	movw	r12, r20
     82c:	68 c0       	rjmp	.+208    	; 0x8fe <data_to_char+0x146>
     82e:	e9 2c       	mov	r14, r9
     830:	f3 2c       	mov	r15, r3
     832:	6a 85       	ldd	r22, Y+10	; 0x0a
     834:	7b 85       	ldd	r23, Y+11	; 0x0b
     836:	8c 85       	ldd	r24, Y+12	; 0x0c
     838:	9d 85       	ldd	r25, Y+13	; 0x0d
     83a:	58 d6       	rcall	.+3248   	; 0x14ec <__floatsisf>
     83c:	2b 01       	movw	r4, r22
     83e:	3c 01       	movw	r6, r24
     840:	b8 01       	movw	r22, r16
     842:	01 2e       	mov	r0, r17
     844:	00 0c       	add	r0, r0
     846:	88 0b       	sbc	r24, r24
     848:	99 0b       	sbc	r25, r25
     84a:	50 d6       	rcall	.+3232   	; 0x14ec <__floatsisf>
     84c:	9b 01       	movw	r18, r22
     84e:	ac 01       	movw	r20, r24
     850:	c3 01       	movw	r24, r6
     852:	b2 01       	movw	r22, r4
     854:	ae d6       	rcall	.+3420   	; 0x15b2 <pow>
     856:	6e 83       	std	Y+6, r22	; 0x06
     858:	7f 83       	std	Y+7, r23	; 0x07
     85a:	88 87       	std	Y+8, r24	; 0x08
     85c:	99 87       	std	Y+9, r25	; 0x09
     85e:	d5 01       	movw	r26, r10
     860:	6d 91       	ld	r22, X+
     862:	7c 91       	ld	r23, X
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	3f d6       	rcall	.+3198   	; 0x14e8 <__floatunsisf>
     86a:	2e 81       	ldd	r18, Y+6	; 0x06
     86c:	3f 81       	ldd	r19, Y+7	; 0x07
     86e:	48 85       	ldd	r20, Y+8	; 0x08
     870:	59 85       	ldd	r21, Y+9	; 0x09
     872:	36 d6       	rcall	.+3180   	; 0x14e0 <__cmpsf2>
     874:	88 23       	and	r24, r24
     876:	4c f4       	brge	.+18     	; 0x88a <data_to_char+0xd2>
			{
				strcat(array_ascii, "0"); //ADD LEADING ZEROS
     878:	f6 01       	movw	r30, r12
     87a:	01 90       	ld	r0, Z+
     87c:	00 20       	and	r0, r0
     87e:	e9 f7       	brne	.-6      	; 0x87a <data_to_char+0xc2>
     880:	31 97       	sbiw	r30, 0x01	; 1
     882:	80 e3       	ldi	r24, 0x30	; 48
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	91 83       	std	Z+1, r25	; 0x01
     888:	80 83       	st	Z, r24
     88a:	01 50       	subi	r16, 0x01	; 1
     88c:	11 09       	sbc	r17, r1
	
	//CONVERT ALL 2 BYTES NUMBERS
	while (i <= POSITION_TIME)
	{
		j=1;
		while (TX_DATA_DIGITS-j > 0)
     88e:	79 f6       	brne	.-98     	; 0x82e <data_to_char+0x76>
     890:	92 e0       	ldi	r25, 0x02	; 2
     892:	a9 0e       	add	r10, r25
     894:	b1 1c       	adc	r11, r1
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
     896:	4e 85       	ldd	r20, Y+14	; 0x0e
     898:	5f 85       	ldd	r21, Y+15	; 0x0f
     89a:	be 01       	movw	r22, r28
     89c:	6f 5f       	subi	r22, 0xFF	; 255
     89e:	7f 4f       	sbci	r23, 0xFF	; 255
     8a0:	d7 01       	movw	r26, r14
     8a2:	8d 91       	ld	r24, X+
     8a4:	9c 91       	ld	r25, X
     8a6:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <itoa>
			} else {
			temp[0] = (*(array_data+i) >> 8) & 0xff; //JUST GRAB THE BYTES
			temp[1] = *(array_data+i) & 0xff;
		}
		
		strcat(array_ascii, temp); //APPEND NUMBER
     8aa:	be 01       	movw	r22, r28
     8ac:	6f 5f       	subi	r22, 0xFF	; 255
     8ae:	7f 4f       	sbci	r23, 0xFF	; 255
     8b0:	c6 01       	movw	r24, r12
     8b2:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <strcat>
		strcat(array_ascii, ","); //DEBUG
     8b6:	f6 01       	movw	r30, r12
     8b8:	01 90       	ld	r0, Z+
     8ba:	00 20       	and	r0, r0
     8bc:	e9 f7       	brne	.-6      	; 0x8b8 <data_to_char+0x100>
     8be:	31 97       	sbiw	r30, 0x01	; 1
     8c0:	8c e2       	ldi	r24, 0x2C	; 44
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	91 83       	std	Z+1, r25	; 0x01
		reset_char_array(&temp, sizeof(temp));
     8c6:	80 83       	st	Z, r24
     8c8:	65 e0       	ldi	r22, 0x05	; 5
     8ca:	ce 01       	movw	r24, r28
     8cc:	01 96       	adiw	r24, 0x01	; 1
     8ce:	9e dd       	rcall	.-1220   	; 0x40c <reset_char_array>
	uint8_t i = 0;
	uint8_t j = 0;
	char temp[5] = ""; //MAX 4 VALUES + NULL TERMINATION
	
	//CONVERT ALL 2 BYTES NUMBERS
	while (i <= POSITION_TIME)
     8d0:	a8 89       	ldd	r26, Y+16	; 0x10
     8d2:	b9 89       	ldd	r27, Y+17	; 0x11
     8d4:	aa 16       	cp	r10, r26
     8d6:	bb 06       	cpc	r11, r27
     8d8:	91 f4       	brne	.+36     	; 0x8fe <data_to_char+0x146>
     8da:	1d 01       	movw	r2, r26
     8dc:	46 01       	movw	r8, r12
     8de:	ea 88       	ldd	r14, Y+18	; 0x12
     8e0:	fb 88       	ldd	r15, Y+19	; 0x13
     8e2:	b2 e2       	ldi	r27, 0x22	; 34
     8e4:	eb 0e       	add	r14, r27
     8e6:	f1 1c       	adc	r15, r1
		j=1;
		while (TX_DATE_DIGITS-j > 0)
		{
			if ((*(array_data+i) < pow(base,TX_DATE_DIGITS-j))) //CHECK IF NUMBER IS LESS THAN LIMITS
			{
				strcat(array_ascii, "0"); //ADD LEADING ZEROS
     8e8:	0f 2e       	mov	r0, r31
     8ea:	f0 e3       	ldi	r31, 0x30	; 48
     8ec:	af 2e       	mov	r10, r31
     8ee:	b1 2c       	mov	r11, r1
     8f0:	f0 2d       	mov	r31, r0
			} else {
			temp[0] = *(array_data+i) & 0xff; //JUST GRAB THE BYTES
		}
		
		strcat(array_ascii, temp); //APPEND NUMBER
		strcat(array_ascii, ","); //DEBUG
     8f2:	0f 2e       	mov	r0, r31
     8f4:	fc e2       	ldi	r31, 0x2C	; 44
     8f6:	cf 2e       	mov	r12, r31
     8f8:	d1 2c       	mov	r13, r1
     8fa:	f0 2d       	mov	r31, r0
     8fc:	2d c0       	rjmp	.+90     	; 0x958 <__stack+0x59>
	
	return status;
}


uint8_t data_to_char(uint16_t *array_data, uint8_t array_data_len, char *array_ascii, int base) {
     8fe:	03 e0       	ldi	r16, 0x03	; 3
     900:	10 e0       	ldi	r17, 0x00	; 0
     902:	9a 2c       	mov	r9, r10
     904:	3b 2c       	mov	r3, r11
     906:	93 cf       	rjmp	.-218    	; 0x82e <data_to_char+0x76>
		j=1;
		while (TX_DATE_DIGITS-j > 0)
		{
			if ((*(array_data+i) < pow(base,TX_DATE_DIGITS-j))) //CHECK IF NUMBER IS LESS THAN LIMITS
			{
				strcat(array_ascii, "0"); //ADD LEADING ZEROS
     908:	f4 01       	movw	r30, r8
     90a:	01 90       	ld	r0, Z+
     90c:	00 20       	and	r0, r0
     90e:	e9 f7       	brne	.-6      	; 0x90a <__stack+0xb>
     910:	31 97       	sbiw	r30, 0x01	; 1
     912:	b1 82       	std	Z+1, r11	; 0x01
     914:	a0 82       	st	Z, r10
     916:	e2 e0       	ldi	r30, 0x02	; 2
     918:	2e 0e       	add	r2, r30
     91a:	31 1c       	adc	r3, r1
     91c:	4e 85       	ldd	r20, Y+14	; 0x0e
     91e:	5f 85       	ldd	r21, Y+15	; 0x0f
     920:	be 01       	movw	r22, r28
     922:	6f 5f       	subi	r22, 0xFF	; 255
     924:	7f 4f       	sbci	r23, 0xFF	; 255
     926:	d8 01       	movw	r26, r16
     928:	8d 91       	ld	r24, X+
     92a:	9c 91       	ld	r25, X
     92c:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <itoa>
			itoa(*(array_data+i), temp, base); //CONVERT NUMBER TO ASCII
			} else {
			temp[0] = *(array_data+i) & 0xff; //JUST GRAB THE BYTES
		}
		
		strcat(array_ascii, temp); //APPEND NUMBER
     930:	be 01       	movw	r22, r28
     932:	6f 5f       	subi	r22, 0xFF	; 255
     934:	7f 4f       	sbci	r23, 0xFF	; 255
     936:	c4 01       	movw	r24, r8
     938:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <strcat>
		strcat(array_ascii, ","); //DEBUG
     93c:	f4 01       	movw	r30, r8
     93e:	01 90       	ld	r0, Z+
     940:	00 20       	and	r0, r0
     942:	e9 f7       	brne	.-6      	; 0x93e <__stack+0x3f>
     944:	31 97       	sbiw	r30, 0x01	; 1
     946:	d1 82       	std	Z+1, r13	; 0x01
		reset_char_array(&temp, sizeof(temp));
     948:	c0 82       	st	Z, r12
     94a:	65 e0       	ldi	r22, 0x05	; 5
     94c:	ce 01       	movw	r24, r28
     94e:	01 96       	adiw	r24, 0x01	; 1
     950:	5d dd       	rcall	.-1350   	; 0x40c <reset_char_array>
	}
	//////////////////////////////////////////////////////////////////////////
	
	//CONVERT ALL 1 BYTES NUMBERS
	i = POSITION_YEAR;
	while (i <= POSITION_STATUS)
     952:	e2 14       	cp	r14, r2
     954:	f3 04       	cpc	r15, r3
     956:	79 f0       	breq	.+30     	; 0x976 <__stack+0x77>
	{
		j=1;
		while (TX_DATE_DIGITS-j > 0)
		{
			if ((*(array_data+i) < pow(base,TX_DATE_DIGITS-j))) //CHECK IF NUMBER IS LESS THAN LIMITS
     958:	81 01       	movw	r16, r2
     95a:	f1 01       	movw	r30, r2
     95c:	60 81       	ld	r22, Z
     95e:	71 81       	ldd	r23, Z+1	; 0x01
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	c1 d5       	rcall	.+2946   	; 0x14e8 <__floatunsisf>
     966:	9b 01       	movw	r18, r22
     968:	ac 01       	movw	r20, r24
     96a:	c3 01       	movw	r24, r6
     96c:	b2 01       	movw	r22, r4
     96e:	1d d6       	rcall	.+3130   	; 0x15aa <__gesf2>
     970:	18 16       	cp	r1, r24
     972:	8c f6       	brge	.-94     	; 0x916 <__stack+0x17>
     974:	c9 cf       	rjmp	.-110    	; 0x908 <__stack+0x9>
		reset_char_array(&temp, sizeof(temp));
		i++;
	}
	//////////////////////////////////////////////////////////////////////////
	return status;
}
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	63 96       	adiw	r28, 0x13	; 19
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	de bf       	out	0x3e, r29	; 62
     980:	0f be       	out	0x3f, r0	; 63
     982:	cd bf       	out	0x3d, r28	; 61
     984:	df 91       	pop	r29
     986:	cf 91       	pop	r28
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	cf 90       	pop	r12
     994:	bf 90       	pop	r11
     996:	af 90       	pop	r10
     998:	9f 90       	pop	r9
     99a:	8f 90       	pop	r8
     99c:	7f 90       	pop	r7
     99e:	6f 90       	pop	r6
     9a0:	5f 90       	pop	r5
     9a2:	4f 90       	pop	r4
     9a4:	3f 90       	pop	r3
     9a6:	2f 90       	pop	r2
     9a8:	08 95       	ret

000009aa <at_rf_connect>:

uint8_t at_rf_connect(void) {
     9aa:	0f 93       	push	r16
     9ac:	1f 93       	push	r17
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	c4 e3       	ldi	r28, 0x34	; 52
     9b4:	d3 e0       	ldi	r29, 0x03	; 3
     9b6:	02 eb       	ldi	r16, 0xB2	; 178
     9b8:	13 e0       	ldi	r17, 0x03	; 3
	
	uint8_t status = 0;
	uint8_t i = 0;
	while (i < ((sizeof(m95_connect)/(sizeof(m95_connect[0])))-1))
	{
		if (tx_at_response(&m95_connect[i])) {/*goto END;*/}
     9ba:	ce 01       	movw	r24, r28
     9bc:	7e de       	rcall	.-772    	; 0x6ba <tx_at_response>
     9be:	29 96       	adiw	r28, 0x09	; 9
	WILL MATCH FLOWCHART IN VISIO
	*/
	
	uint8_t status = 0;
	uint8_t i = 0;
	while (i < ((sizeof(m95_connect)/(sizeof(m95_connect[0])))-1))
     9c0:	c0 17       	cp	r28, r16
     9c2:	d1 07       	cpc	r29, r17
     9c4:	d1 f7       	brne	.-12     	; 0x9ba <at_rf_connect+0x10>
	{
		if (tx_at_response(&m95_connect[i])) {/*goto END;*/}
		i++;
	}
	if (tx_at_response(&m95_connect[i])) {status = 32; goto END;} else {at_get_radio_network_time();} //get network's time
     9c6:	82 eb       	ldi	r24, 0xB2	; 178
     9c8:	93 e0       	ldi	r25, 0x03	; 3
     9ca:	77 de       	rcall	.-786    	; 0x6ba <tx_at_response>
     9cc:	81 11       	cpse	r24, r1
     9ce:	03 c0       	rjmp	.+6      	; 0x9d6 <at_rf_connect+0x2c>
     9d0:	3b de       	rcall	.-906    	; 0x648 <at_get_radio_network_time>
	status = 32 => QLTS, i.e. the network time didn't execute sucessfully.
	
	WILL MATCH FLOWCHART IN VISIO
	*/
	
	uint8_t status = 0;
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	01 c0       	rjmp	.+2      	; 0x9d8 <at_rf_connect+0x2e>
	while (i < ((sizeof(m95_connect)/(sizeof(m95_connect[0])))-1))
	{
		if (tx_at_response(&m95_connect[i])) {/*goto END;*/}
		i++;
	}
	if (tx_at_response(&m95_connect[i])) {status = 32; goto END;} else {at_get_radio_network_time();} //get network's time
     9d6:	80 e2       	ldi	r24, 0x20	; 32
	
	END: 
	
	return status;
}
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	1f 91       	pop	r17
     9de:	0f 91       	pop	r16
     9e0:	08 95       	ret

000009e2 <at_rf_disconnect>:
	*/
	uint8_t status = 0;
	uint8_t i = 0;
	while (i < ((sizeof(m95_disconnect)/(sizeof(m95_disconnect[0])))))
	{
		if (tx_at_response(&m95_disconnect[i])) {/*goto END;*/}
     9e2:	87 e0       	ldi	r24, 0x07	; 7
     9e4:	93 e0       	ldi	r25, 0x03	; 3
     9e6:	69 de       	rcall	.-814    	; 0x6ba <tx_at_response>
     9e8:	80 e1       	ldi	r24, 0x10	; 16
     9ea:	93 e0       	ldi	r25, 0x03	; 3
     9ec:	66 de       	rcall	.-820    	; 0x6ba <tx_at_response>
		i++;
	}
	
	END: return status;
}
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	08 95       	ret

000009f2 <tx>:


uint8_t tx(char *data, int len) {
     9f2:	ef 92       	push	r14
     9f4:	ff 92       	push	r15
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	cf 93       	push	r28
     9fc:	7c 01       	movw	r14, r24
     9fe:	8b 01       	movw	r16, r22
	status > 0 => one of the AT commands was not executed sucessfully.
	*/
	uint8_t status = 0;
	uint8_t i = 0;
		
	if (tx_at_response(&m95_tx[0])) {/*status = 1; goto END;*/} //SPECIFIED TO ELEMENT 0
     a00:	89 e1       	ldi	r24, 0x19	; 25
     a02:	93 e0       	ldi	r25, 0x03	; 3
     a04:	5a de       	rcall	.-844    	; 0x6ba <tx_at_response>
	if (tx_at_response(&m95_tx[1])) {/*status = 1; goto END;*/} //SPECIFIED TO ELEMENT 0
     a06:	82 e2       	ldi	r24, 0x22	; 34
     a08:	93 e0       	ldi	r25, 0x03	; 3
     a0a:	57 de       	rcall	.-850    	; 0x6ba <tx_at_response>
	while (i < len)
     a0c:	10 16       	cp	r1, r16
     a0e:	11 06       	cpc	r1, r17
     a10:	74 f4       	brge	.+28     	; 0xa2e <tx+0x3c>
     a12:	c0 e0       	ldi	r28, 0x00	; 0
	{
		usart_putchar(USART_RADIO, *(data+i));
     a14:	f7 01       	movw	r30, r14
     a16:	ec 0f       	add	r30, r28
     a18:	f1 1d       	adc	r31, r1
     a1a:	60 81       	ld	r22, Z
     a1c:	88 ec       	ldi	r24, 0xC8	; 200
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	af db       	rcall	.-2210   	; 0x180 <usart_putchar>
		#ifdef DEBUG
			//usart_putchar(USART_TERMINAL, *(data+i)); //DEBUG
		#endif // DEBUG
		i++;
     a22:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t status = 0;
	uint8_t i = 0;
		
	if (tx_at_response(&m95_tx[0])) {/*status = 1; goto END;*/} //SPECIFIED TO ELEMENT 0
	if (tx_at_response(&m95_tx[1])) {/*status = 1; goto END;*/} //SPECIFIED TO ELEMENT 0
	while (i < len)
     a24:	8c 2f       	mov	r24, r28
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	80 17       	cp	r24, r16
     a2a:	91 07       	cpc	r25, r17
     a2c:	9c f3       	brlt	.-26     	; 0xa14 <tx+0x22>
		#ifdef DEBUG
			//usart_putchar(USART_TERMINAL, *(data+i)); //DEBUG
		#endif // DEBUG
		i++;
	}
	usart_tx_at(USART_RADIO, CTRL_Z);
     a2e:	62 e5       	ldi	r22, 0x52	; 82
     a30:	71 e0       	ldi	r23, 0x01	; 1
     a32:	88 ec       	ldi	r24, 0xC8	; 200
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	c6 dc       	rcall	.-1652   	; 0x3c4 <usart_tx_at>
	//if (tx_at_response(&m95_tx[2])) {/*status = 1; goto END;*/} //SPECIFIED TO ELEMENT 0 FIX!!!!!!
			
	END: return status;
}
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	cf 91       	pop	r28
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	08 95       	ret

00000a46 <__vector_20>:

ISR(USART0_RX_vect)
{
     a46:	1f 92       	push	r1
     a48:	0f 92       	push	r0
     a4a:	0f b6       	in	r0, 0x3f	; 63
     a4c:	0f 92       	push	r0
     a4e:	11 24       	eor	r1, r1
     a50:	2f 93       	push	r18
     a52:	3f 93       	push	r19
     a54:	4f 93       	push	r20
     a56:	5f 93       	push	r21
     a58:	6f 93       	push	r22
     a5a:	7f 93       	push	r23
     a5c:	8f 93       	push	r24
     a5e:	9f 93       	push	r25
     a60:	af 93       	push	r26
     a62:	bf 93       	push	r27
     a64:	cf 93       	push	r28
     a66:	df 93       	push	r29
     a68:	ef 93       	push	r30
     a6a:	ff 93       	push	r31
	*(response + response_counter) = usart_getchar(USART_RADIO);
     a6c:	c0 91 a7 04 	lds	r28, 0x04A7	; 0x8004a7 <response_counter>
     a70:	d0 e0       	ldi	r29, 0x00	; 0
     a72:	c4 55       	subi	r28, 0x54	; 84
     a74:	db 4f       	sbci	r29, 0xFB	; 251
     a76:	88 ec       	ldi	r24, 0xC8	; 200
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	89 db       	rcall	.-2286   	; 0x18e <usart_getchar>
     a7c:	88 83       	st	Y, r24
	response_counter++;
     a7e:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <response_counter>
     a82:	8f 5f       	subi	r24, 0xFF	; 255
     a84:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <response_counter>
	response_timeout_counter = 0; //reset global timeout counter for each byte read. Could ideally be lower for 20 seconds timeout commands. FIX!!!!!
     a88:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <response_timeout_counter>
     a8c:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <response_timeout_counter+0x1>
     a90:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <response_timeout_counter+0x2>
     a94:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <response_timeout_counter+0x3>
}
     a98:	ff 91       	pop	r31
     a9a:	ef 91       	pop	r30
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	bf 91       	pop	r27
     aa2:	af 91       	pop	r26
     aa4:	9f 91       	pop	r25
     aa6:	8f 91       	pop	r24
     aa8:	7f 91       	pop	r23
     aaa:	6f 91       	pop	r22
     aac:	5f 91       	pop	r21
     aae:	4f 91       	pop	r20
     ab0:	3f 91       	pop	r19
     ab2:	2f 91       	pop	r18
     ab4:	0f 90       	pop	r0
     ab6:	0f be       	out	0x3f, r0	; 63
     ab8:	0f 90       	pop	r0
     aba:	1f 90       	pop	r1
     abc:	18 95       	reti

00000abe <__vector_8>:

//main_function()
ISR(WDT_vect)
{
     abe:	1f 92       	push	r1
     ac0:	0f 92       	push	r0
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	0f 92       	push	r0
     ac6:	11 24       	eor	r1, r1
     ac8:	8f 92       	push	r8
     aca:	9f 92       	push	r9
     acc:	af 92       	push	r10
     ace:	bf 92       	push	r11
     ad0:	cf 92       	push	r12
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	2f 93       	push	r18
     ade:	3f 93       	push	r19
     ae0:	4f 93       	push	r20
     ae2:	5f 93       	push	r21
     ae4:	6f 93       	push	r22
     ae6:	7f 93       	push	r23
     ae8:	8f 93       	push	r24
     aea:	9f 93       	push	r25
     aec:	af 93       	push	r26
     aee:	bf 93       	push	r27
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	ef 93       	push	r30
     af6:	ff 93       	push	r31
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	f8 94       	cli
     afc:	a8 95       	wdr
     afe:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     b02:	88 61       	ori	r24, 0x18	; 24
     b04:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     b08:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     b0c:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
	wdt_counter++; //watchdog set at 1 second timeout
     b0e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     b12:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     b16:	01 96       	adiw	r24, 0x01	; 1
     b18:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     b1c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	usart_tx_at(USART_TERMINAL, RESPONSE_FOOTER); //DEBUG
     b20:	61 ea       	ldi	r22, 0xA1	; 161
     b22:	72 e0       	ldi	r23, 0x02	; 2
     b24:	88 ec       	ldi	r24, 0xC8	; 200
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	4d dc       	rcall	.-1894   	; 0x3c4 <usart_tx_at>
	usart_putchar(USART_TERMINAL, (0x30+wdt_counter)); //DEBUG
     b2a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     b2e:	60 5d       	subi	r22, 0xD0	; 208
     b30:	88 ec       	ldi	r24, 0xC8	; 200
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	25 db       	rcall	.-2486   	; 0x180 <usart_putchar>
	usart_tx_at(USART_TERMINAL, RESPONSE_FOOTER); //DEBUG
     b36:	61 ea       	ldi	r22, 0xA1	; 161
     b38:	72 e0       	ldi	r23, 0x02	; 2
     b3a:	88 ec       	ldi	r24, 0xC8	; 200
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	42 dc       	rcall	.-1916   	; 0x3c4 <usart_tx_at>

	if (wdt_counter < WAKEUP_RATE)
     b40:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     b44:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     b48:	05 97       	sbiw	r24, 0x05	; 5
     b4a:	08 f4       	brcc	.+2      	; 0xb4e <__vector_8+0x90>
     b4c:	fb c0       	rjmp	.+502    	; 0xd44 <__vector_8+0x286>
	{
		goto END;
	} else {wdt_counter = 0;} //reset counter if limit is reached.
     b4e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
     b52:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	
	RTC_ISR_ACTIVE = 1;
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <RTC_ISR_ACTIVE>
				controller_next_state = READ_EXT_DATA;
				RTC_ISR_ACTIVE = 0; //FINISHED, break LOOP!
				break;
			
			default:
				controller_next_state = RESET_REGISTERS; //TRY RESET.
     b5c:	0b e0       	ldi	r16, 0x0B	; 11
				controller_next_state = RF_DISCONNECT;
				break;
			
			case RF_DISCONNECT:
				at_rf_disconnect(); //Disconnect
				controller_next_state = RF_POWER_OFF;
     b5e:	0f 2e       	mov	r0, r31
     b60:	fa e0       	ldi	r31, 0x0A	; 10
     b62:	ff 2e       	mov	r15, r31
     b64:	f0 2d       	mov	r31, r0
				
				controller_next_state = RX_DATA;
				break;
			
			case RX_DATA:
				controller_next_state = RF_DISCONNECT;
     b66:	19 e0       	ldi	r17, 0x09	; 9
				break;
			
			case TX_DATA:
				tx(&tx_data_package, transfer_data_length_package); //transmit package. GENERATE STATUS FROM THIS.
				
				controller_next_state = RX_DATA;
     b68:	68 94       	set
     b6a:	bb 24       	eor	r11, r11
     b6c:	b3 f8       	bld	r11, 3
// 					char mystring[5] = "";
// 					itoa(transfer_data_length_package, package_lenght, 10);
// 					strcpy(mystring, package_lenght);
// 					usart_tx_at(USART_TERMINAL, mystring);
				#endif // DEBUG
				controller_next_state = TX_DATA;
     b6e:	0f 2e       	mov	r0, r31
     b70:	f7 e0       	ldi	r31, 0x07	; 7
     b72:	cf 2e       	mov	r12, r31
     b74:	f0 2d       	mov	r31, r0
				{
					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_CONNECT); //set failure status
					controller_next_state = RF_DISCONNECT; //if failure go to disconnect
					break;
				}
				controller_next_state = GENERATE_PACKAGE;
     b76:	0f 2e       	mov	r0, r31
     b78:	f6 e0       	ldi	r31, 0x06	; 6
     b7a:	8f 2e       	mov	r8, r31
     b7c:	f0 2d       	mov	r31, r0
				{
					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_POWER_ON); //set failure status
					controller_next_state = RF_POWER_OFF; //if failure go to power off
					break;
				}
				controller_next_state = RF_CONNECT;
     b7e:	0f 2e       	mov	r0, r31
     b80:	f5 e0       	ldi	r31, 0x05	; 5
     b82:	af 2e       	mov	r10, r31
     b84:	f0 2d       	mov	r31, r0
				controller_next_state = STORE_EXT_MEM;
				break;
			
			case STORE_EXT_MEM:
				tx_data[POSITION_TIME] = 0; //reset accumulation counter if something???????????????
				controller_next_state = RF_POWER_ON;
     b86:	68 94       	set
     b88:	dd 24       	eor	r13, r13
     b8a:	d2 f8       	bld	r13, 2
			case CALC:
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				tx_data[POSITION_AVG] = controller_calc_avg(accu_data, tx_data[POSITION_TIME]); //calc and store average.
				accu_data = 0; //reset parameters
				///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				controller_next_state = STORE_EXT_MEM;
     b8c:	0f 2e       	mov	r0, r31
     b8e:	f3 e0       	ldi	r31, 0x03	; 3
     b90:	ef 2e       	mov	r14, r31
     b92:	f0 2d       	mov	r31, r0
				tx_data[POSITION_TIME] = transmit_counter; //increase timestamp counter.
			
				if (tx_data[POSITION_TIME] >= (TRANSMIT_RATE/WAKEUP_RATE)) //if accumulation limit is reached.
				{
					transmit_counter = 0; //reset counter
					controller_next_state = CALC; //limit reached, go to next
     b94:	68 94       	set
     b96:	99 24       	eor	r9, r9
     b98:	91 f8       	bld	r9, 1
	
	RTC_ISR_ACTIVE = 1;
	while (RTC_ISR_ACTIVE == 1)
	{
		
		switch(controller_state) {
     b9a:	e0 91 ab 04 	lds	r30, 0x04AB	; 0x8004ab <controller_state>
     b9e:	8e 2f       	mov	r24, r30
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	8c 30       	cpi	r24, 0x0C	; 12
     ba4:	91 05       	cpc	r25, r1
     ba6:	08 f0       	brcs	.+2      	; 0xbaa <__vector_8+0xec>
     ba8:	c2 c0       	rjmp	.+388    	; 0xd2e <__vector_8+0x270>
     baa:	fc 01       	movw	r30, r24
     bac:	e2 5c       	subi	r30, 0xC2	; 194
     bae:	ff 4f       	sbci	r31, 0xFF	; 255
     bb0:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <__tablejump2__>
			
			case READ_EXT_DATA:
				controller_next_state = MEASURE;
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	80 93 aa 04 	sts	0x04AA, r24	; 0x8004aa <controller_next_state>
				break;
			
			case MEASURE:
				//GENERAL MEASUREMENTS
 				tx_data[POSITION_ANA0] = adc_result_average(ADC_MUX_ADC0, ADC_NUM_AVG); //NEED TO FIX ADC CONVERSINS!!!!!!!!
     bba:	bb c0       	rjmp	.+374    	; 0xd32 <__vector_8+0x274>
     bbc:	61 2f       	mov	r22, r17
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	ce dc       	rcall	.-1636   	; 0x55e <adc_result_average>
     bc2:	cc e2       	ldi	r28, 0x2C	; 44
     bc4:	d5 e0       	ldi	r29, 0x05	; 5
// 				tx_data[POSITION_ANA2] = adc_result_average(ADC_MUX_ADC2, ADC_NUM_AVG); //
// 				tx_data[POSITION_ANA3] = adc_result_average(ADC_MUX_ADC3, ADC_NUM_AVG); //
// 				tx_data[POSITION_ANA4] = adc_result_average(ADC_MUX_ADC4, ADC_NUM_AVG); //
// 				tx_data[POSITION_ANA5] = adc_result_average(ADC_MUX_ADC5, ADC_NUM_AVG); //
// 				//tx_data[POSITION_TEMP] = adc_result_average(ADC_MUX_TEMPSENSE, 1); //PIN CHANGE HAVE NO EFFECT ON ADCB
 				tx_data[POSITION_VDD] = adc_result_average(ADC_MUX_1V1, 1); //PIN CHANGE HAVE NO EFFECT ON ADCB
     bc6:	99 83       	std	Y+1, r25	; 0x01
     bc8:	88 83       	st	Y, r24
     bca:	61 e0       	ldi	r22, 0x01	; 1
     bcc:	8e e1       	ldi	r24, 0x1E	; 30
     bce:	c7 dc       	rcall	.-1650   	; 0x55e <adc_result_average>
     bd0:	9f 87       	std	Y+15, r25	; 0x0f
				
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				accu_data += tx_data[POSITION_CURRENT]; //controller_measure(9, &tx_data); //measure with averaging, and accumulate.
     bd2:	8e 87       	std	Y+14, r24	; 0x0e
     bd4:	28 81       	ld	r18, Y
     bd6:	39 81       	ldd	r19, Y+1	; 0x01
     bd8:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <accu_data>
     bdc:	90 91 9c 04 	lds	r25, 0x049C	; 0x80049c <accu_data+0x1>
     be0:	a0 91 9d 04 	lds	r26, 0x049D	; 0x80049d <accu_data+0x2>
     be4:	b0 91 9e 04 	lds	r27, 0x049E	; 0x80049e <accu_data+0x3>
     be8:	82 0f       	add	r24, r18
     bea:	93 1f       	adc	r25, r19
     bec:	a1 1d       	adc	r26, r1
     bee:	b1 1d       	adc	r27, r1
     bf0:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <accu_data>
     bf4:	90 93 9c 04 	sts	0x049C, r25	; 0x80049c <accu_data+0x1>
     bf8:	a0 93 9d 04 	sts	0x049D, r26	; 0x80049d <accu_data+0x2>
				loadcell_min_max_tran(tx_data[POSITION_CURRENT], &tx_data); //check if new value should be stored in min, max and tran.
     bfc:	b0 93 9e 04 	sts	0x049E, r27	; 0x80049e <accu_data+0x3>
     c00:	88 81       	ld	r24, Y
     c02:	99 81       	ldd	r25, Y+1	; 0x01
     c04:	be 01       	movw	r22, r28
				tx_data[POSITION_PREV] = tx_data[POSITION_CURRENT]; //store adc value for next measurement.
     c06:	96 db       	rcall	.-2260   	; 0x334 <loadcell_min_max_tran>
     c08:	88 81       	ld	r24, Y
     c0a:	99 81       	ldd	r25, Y+1	; 0x01
     c0c:	9b 83       	std	Y+3, r25	; 0x03
				///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				
				transmit_counter++;		
     c0e:	8a 83       	std	Y+2, r24	; 0x02
     c10:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <transmit_counter>
     c14:	90 91 a9 04 	lds	r25, 0x04A9	; 0x8004a9 <transmit_counter+0x1>
     c18:	01 96       	adiw	r24, 0x01	; 1
     c1a:	90 93 a9 04 	sts	0x04A9, r25	; 0x8004a9 <transmit_counter+0x1>
     c1e:	80 93 a8 04 	sts	0x04A8, r24	; 0x8004a8 <transmit_counter>
				tx_data[POSITION_TIME] = transmit_counter; //increase timestamp counter.
     c22:	9b 8b       	std	Y+19, r25	; 0x13
			
				if (tx_data[POSITION_TIME] >= (TRANSMIT_RATE/WAKEUP_RATE)) //if accumulation limit is reached.
     c24:	8a 8b       	std	Y+18, r24	; 0x12
     c26:	8a 89       	ldd	r24, Y+18	; 0x12
     c28:	9b 89       	ldd	r25, Y+19	; 0x13
     c2a:	cc 97       	sbiw	r24, 0x3c	; 60
				{
					transmit_counter = 0; //reset counter
     c2c:	38 f0       	brcs	.+14     	; 0xc3c <__vector_8+0x17e>
     c2e:	10 92 a9 04 	sts	0x04A9, r1	; 0x8004a9 <transmit_counter+0x1>
     c32:	10 92 a8 04 	sts	0x04A8, r1	; 0x8004a8 <transmit_counter>
					controller_next_state = CALC; //limit reached, go to next
     c36:	90 92 aa 04 	sts	0x04AA, r9	; 0x8004aa <controller_next_state>
					} else {
					controller_next_state = READ_EXT_DATA; //Start from top again
     c3a:	7b c0       	rjmp	.+246    	; 0xd32 <__vector_8+0x274>
     c3c:	10 92 aa 04 	sts	0x04AA, r1	; 0x8004aa <controller_next_state>
					RTC_ISR_ACTIVE = 0; //Break loop and go to sleep again
     c40:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <RTC_ISR_ACTIVE>
				}
				break;
			
			case CALC:
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				tx_data[POSITION_AVG] = controller_calc_avg(accu_data, tx_data[POSITION_TIME]); //calc and store average.
     c44:	76 c0       	rjmp	.+236    	; 0xd32 <__vector_8+0x274>
     c46:	cc e2       	ldi	r28, 0x2C	; 44
     c48:	d5 e0       	ldi	r29, 0x05	; 5
     c4a:	2a 89       	ldd	r18, Y+18	; 0x12


uint16_t controller_calc_avg(uint32_t data, uint16_t cnt) {
	uint16_t avg = 0;
	
	avg = data/cnt;
     c4c:	3b 89       	ldd	r19, Y+19	; 0x13
     c4e:	40 e0       	ldi	r20, 0x00	; 0
     c50:	50 e0       	ldi	r21, 0x00	; 0
     c52:	60 91 9b 04 	lds	r22, 0x049B	; 0x80049b <accu_data>
     c56:	70 91 9c 04 	lds	r23, 0x049C	; 0x80049c <accu_data+0x1>
     c5a:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <accu_data+0x2>
     c5e:	90 91 9e 04 	lds	r25, 0x049E	; 0x80049e <accu_data+0x3>
				}
				break;
			
			case CALC:
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				tx_data[POSITION_AVG] = controller_calc_avg(accu_data, tx_data[POSITION_TIME]); //calc and store average.
     c62:	8d d7       	rcall	.+3866   	; 0x1b7e <__udivmodsi4>
     c64:	3d 83       	std	Y+5, r19	; 0x05
				accu_data = 0; //reset parameters
     c66:	2c 83       	std	Y+4, r18	; 0x04
     c68:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <accu_data>
     c6c:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <accu_data+0x1>
     c70:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <accu_data+0x2>
     c74:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <accu_data+0x3>
				///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				controller_next_state = STORE_EXT_MEM;
     c78:	e0 92 aa 04 	sts	0x04AA, r14	; 0x8004aa <controller_next_state>
				break;
			
			case STORE_EXT_MEM:
				tx_data[POSITION_TIME] = 0; //reset accumulation counter if something???????????????
     c7c:	5a c0       	rjmp	.+180    	; 0xd32 <__vector_8+0x274>
     c7e:	10 92 3f 05 	sts	0x053F, r1	; 0x80053f <tx_data+0x13>
				controller_next_state = RF_POWER_ON;
     c82:	10 92 3e 05 	sts	0x053E, r1	; 0x80053e <tx_data+0x12>
				break;
     c86:	d0 92 aa 04 	sts	0x04AA, r13	; 0x8004aa <controller_next_state>
			
			case RF_POWER_ON:
				//radio_power_on();
				if (radio_power_on() == 1) //power on and check if it fails
     c8a:	53 c0       	rjmp	.+166    	; 0xd32 <__vector_8+0x274>
     c8c:	f4 db       	rcall	.-2072   	; 0x476 <radio_power_on>
     c8e:	81 30       	cpi	r24, 0x01	; 1
				{
					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_POWER_ON); //set failure status
     c90:	51 f4       	brne	.+20     	; 0xca6 <__vector_8+0x1e8>
     c92:	ec e2       	ldi	r30, 0x2C	; 44
     c94:	f5 e0       	ldi	r31, 0x05	; 5
     c96:	80 a1       	ldd	r24, Z+32	; 0x20
     c98:	91 a1       	ldd	r25, Z+33	; 0x21
     c9a:	81 60       	ori	r24, 0x01	; 1
					controller_next_state = RF_POWER_OFF; //if failure go to power off
     c9c:	91 a3       	std	Z+33, r25	; 0x21
     c9e:	80 a3       	std	Z+32, r24	; 0x20
					break;
     ca0:	f0 92 aa 04 	sts	0x04AA, r15	; 0x8004aa <controller_next_state>
				}
				controller_next_state = RF_CONNECT;
     ca4:	46 c0       	rjmp	.+140    	; 0xd32 <__vector_8+0x274>
				break;
     ca6:	a0 92 aa 04 	sts	0x04AA, r10	; 0x8004aa <controller_next_state>
			
			case RF_CONNECT: //NEED MORE POWER!!!!!!
				//at_rf_connect();
				if (at_rf_connect() != 0) //Connect to network. MAKE STATUS REPORT FROM THIS!!!!!!!
     caa:	43 c0       	rjmp	.+134    	; 0xd32 <__vector_8+0x274>
     cac:	7e de       	rcall	.-772    	; 0x9aa <at_rf_connect>
     cae:	88 23       	and	r24, r24
				{
					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_CONNECT); //set failure status
     cb0:	51 f0       	breq	.+20     	; 0xcc6 <__vector_8+0x208>
     cb2:	ec e2       	ldi	r30, 0x2C	; 44
     cb4:	f5 e0       	ldi	r31, 0x05	; 5
     cb6:	80 a1       	ldd	r24, Z+32	; 0x20
     cb8:	91 a1       	ldd	r25, Z+33	; 0x21
     cba:	82 60       	ori	r24, 0x02	; 2
     cbc:	91 a3       	std	Z+33, r25	; 0x21
					controller_next_state = RF_DISCONNECT; //if failure go to disconnect
     cbe:	80 a3       	std	Z+32, r24	; 0x20
     cc0:	10 93 aa 04 	sts	0x04AA, r17	; 0x8004aa <controller_next_state>
					break;
				}
				controller_next_state = GENERATE_PACKAGE;
     cc4:	36 c0       	rjmp	.+108    	; 0xd32 <__vector_8+0x274>
				break;
			
			case GENERATE_PACKAGE:
				data_to_char(&tx_data, TX_DATA_SIZE, &tx_data_bytes, TRANSFER_DATA_BASE);
     cc6:	80 92 aa 04 	sts	0x04AA, r8	; 0x8004aa <controller_next_state>
     cca:	33 c0       	rjmp	.+102    	; 0xd32 <__vector_8+0x274>
     ccc:	2a e0       	ldi	r18, 0x0A	; 10
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	46 e3       	ldi	r20, 0x36	; 54
     cd2:	54 e0       	ldi	r21, 0x04	; 4
     cd4:	61 e1       	ldi	r22, 0x11	; 17
 				transfer_data_length_package = mqtt_packet(&tx_data_bytes, &tx_data_package, TRANSFER_DATA_SIZE_PACKAGE); //convert ascii data to MQTT package.
     cd6:	8c e2       	ldi	r24, 0x2C	; 44
     cd8:	95 e0       	ldi	r25, 0x05	; 5
     cda:	6e dd       	rcall	.-1316   	; 0x7b8 <data_to_char>
     cdc:	44 e6       	ldi	r20, 0x64	; 100
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	62 ed       	ldi	r22, 0xD2	; 210
     ce2:	73 e0       	ldi	r23, 0x03	; 3
     ce4:	86 e3       	ldi	r24, 0x36	; 54
     ce6:	94 e0       	ldi	r25, 0x04	; 4
     ce8:	69 d3       	rcall	.+1746   	; 0x13bc <mqtt_packet>
     cea:	90 93 d1 03 	sts	0x03D1, r25	; 0x8003d1 <__data_end+0x1>
// 					char mystring[5] = "";
// 					itoa(transfer_data_length_package, package_lenght, 10);
// 					strcpy(mystring, package_lenght);
// 					usart_tx_at(USART_TERMINAL, mystring);
				#endif // DEBUG
				controller_next_state = TX_DATA;
     cee:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <__data_end>
				break;
			
			case TX_DATA:
				tx(&tx_data_package, transfer_data_length_package); //transmit package. GENERATE STATUS FROM THIS.
     cf2:	c0 92 aa 04 	sts	0x04AA, r12	; 0x8004aa <controller_next_state>
     cf6:	1d c0       	rjmp	.+58     	; 0xd32 <__vector_8+0x274>
     cf8:	60 91 d0 03 	lds	r22, 0x03D0	; 0x8003d0 <__data_end>
     cfc:	70 91 d1 03 	lds	r23, 0x03D1	; 0x8003d1 <__data_end+0x1>
				
				controller_next_state = RX_DATA;
     d00:	82 ed       	ldi	r24, 0xD2	; 210
				break;
			
			case RX_DATA:
				controller_next_state = RF_DISCONNECT;
     d02:	93 e0       	ldi	r25, 0x03	; 3
				break;
     d04:	76 de       	rcall	.-788    	; 0x9f2 <tx>
			
			case RF_DISCONNECT:
				at_rf_disconnect(); //Disconnect
     d06:	b0 92 aa 04 	sts	0x04AA, r11	; 0x8004aa <controller_next_state>
				controller_next_state = RF_POWER_OFF;
     d0a:	13 c0       	rjmp	.+38     	; 0xd32 <__vector_8+0x274>
     d0c:	10 93 aa 04 	sts	0x04AA, r17	; 0x8004aa <controller_next_state>
				break;
			
			case RF_POWER_OFF:
				radio_power_off_at(); //radio power down
     d10:	10 c0       	rjmp	.+32     	; 0xd32 <__vector_8+0x274>
     d12:	67 de       	rcall	.-818    	; 0x9e2 <at_rf_disconnect>
				controller_next_state = RESET_REGISTERS;
     d14:	f0 92 aa 04 	sts	0x04AA, r15	; 0x8004aa <controller_next_state>
				break;
     d18:	0c c0       	rjmp	.+24     	; 0xd32 <__vector_8+0x274>
			
			case RESET_REGISTERS:
				reset_all_data(); //reset all arrays
     d1a:	e4 db       	rcall	.-2104   	; 0x4e4 <radio_power_off_at>
     d1c:	00 93 aa 04 	sts	0x04AA, r16	; 0x8004aa <controller_next_state>
				controller_next_state = READ_EXT_DATA;
     d20:	08 c0       	rjmp	.+16     	; 0xd32 <__vector_8+0x274>
				RTC_ISR_ACTIVE = 0; //FINISHED, break LOOP!
     d22:	82 db       	rcall	.-2300   	; 0x428 <reset_all_data>
     d24:	10 92 aa 04 	sts	0x04AA, r1	; 0x8004aa <controller_next_state>
				controller_next_state = RESET_REGISTERS; //TRY RESET.
				break;
			
		}
		
		controller_state = controller_next_state; //NEXT STATE => STATE
     d28:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <RTC_ISR_ACTIVE>
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <__vector_8+0x274>
     d2e:	00 93 aa 04 	sts	0x04AA, r16	; 0x8004aa <controller_next_state>
	{
		goto END;
	} else {wdt_counter = 0;} //reset counter if limit is reached.
	
	RTC_ISR_ACTIVE = 1;
	while (RTC_ISR_ACTIVE == 1)
     d32:	80 91 aa 04 	lds	r24, 0x04AA	; 0x8004aa <controller_next_state>
     d36:	80 93 ab 04 	sts	0x04AB, r24	; 0x8004ab <controller_state>
		
	}

	END:
	
	wdt_reset();
     d3a:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <RTC_ISR_ACTIVE>
	//wdt_enable();
	rtc_init_period(1);
     d3e:	81 30       	cpi	r24, 0x01	; 1
     d40:	09 f4       	brne	.+2      	; 0xd44 <__vector_8+0x286>
     d42:	2b cf       	rjmp	.-426    	; 0xb9a <__vector_8+0xdc>
	return;
	
}
     d44:	a8 95       	wdr
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	7d db       	rcall	.-2310   	; 0x446 <rtc_init_period>
     d4c:	ff 91       	pop	r31
     d4e:	ef 91       	pop	r30
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	bf 91       	pop	r27
     d56:	af 91       	pop	r26
     d58:	9f 91       	pop	r25
     d5a:	8f 91       	pop	r24
     d5c:	7f 91       	pop	r23
     d5e:	6f 91       	pop	r22
     d60:	5f 91       	pop	r21
     d62:	4f 91       	pop	r20
     d64:	3f 91       	pop	r19
     d66:	2f 91       	pop	r18
     d68:	1f 91       	pop	r17
     d6a:	0f 91       	pop	r16
     d6c:	ff 90       	pop	r15
     d6e:	ef 90       	pop	r14
     d70:	df 90       	pop	r13
     d72:	cf 90       	pop	r12
     d74:	bf 90       	pop	r11
     d76:	af 90       	pop	r10
     d78:	9f 90       	pop	r9
     d7a:	8f 90       	pop	r8
     d7c:	0f 90       	pop	r0
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	0f 90       	pop	r0
     d82:	1f 90       	pop	r1
     d84:	18 95       	reti

00000d86 <main>:
		
	/* Initialize the board.
	 * The board-specific conf_board.h file contains the configuration of
	 * the board initialization.
	 */
	board_init();
     d86:	f8 94       	cli
}
#endif // DEBUG

static void adc_initialization(void)
{
	PRR0 &= ~(1<<PRADC); //enable ADC clock
     d88:	aa d3       	rcall	.+1876   	; 0x14de <board_init>
     d8a:	e4 e6       	ldi	r30, 0x64	; 100
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	8e 7f       	andi	r24, 0xFE	; 254
 *
 * \param prescaler   ADC clock prescaler
 */
static inline void adc_init(enum adc_prescaler prescaler)
{
	ADCSRA = (uint8_t)prescaler | (1 << ADEN);
     d92:	80 83       	st	Z, r24
     d94:	87 e8       	ldi	r24, 0x87	; 135
     d96:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	//Enable The receiver and transmitter
	UCSR0B |= (1<<3);
	*/
	//////////////////////////////////////////////////////////////////////////
	//unsigned char data = 0x40;
	usart_init_rs232(USART_RADIO, &USART_OPTIONS); //Radio UART
     d9a:	62 e0       	ldi	r22, 0x02	; 2
     d9c:	71 e0       	ldi	r23, 0x01	; 1
     d9e:	88 ec       	ldi	r24, 0xC8	; 200
	sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	86 da       	rcall	.-2804   	; 0x2b0 <usart_init_rs232>
     da4:	62 e0       	ldi	r22, 0x02	; 2
	
	usart_init_rs232(USART_TERMINAL, &USART_OPTIONS); //Radio UART
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	d3 d9       	rcall	.-3162   	; 0x150 <sysclk_enable_module>
     daa:	62 e0       	ldi	r22, 0x02	; 2
     dac:	71 e0       	ldi	r23, 0x01	; 1
	sysclk_enable_module(POWER_RED_REG0, PRUSART1_bm);
     dae:	88 ec       	ldi	r24, 0xC8	; 200
     db0:	90 e0       	ldi	r25, 0x00	; 0
// 	
// 	//initialize radio pins
 	delay_s(1); //wait for voltages to settle
     db2:	7e da       	rcall	.-2820   	; 0x2b0 <usart_init_rs232>
     db4:	60 e1       	ldi	r22, 0x10	; 16
     db6:	80 e0       	ldi	r24, 0x00	; 0
 	radio_pins_init();
	delay_s(1);
     db8:	cb d9       	rcall	.-3178   	; 0x150 <sysclk_enable_module>
     dba:	6b e0       	ldi	r22, 0x0B	; 11
     dbc:	7b e8       	ldi	r23, 0x8B	; 139
     dbe:	82 e0       	ldi	r24, 0x02	; 2
     dc0:	90 e0       	ldi	r25, 0x00	; 0
// 	
// 	
	//Shut down radio, might be on
	//if( (STATUS_PORT & (1<<STATUS_PIN)) == 0x80 ) //have a counter and reset if fail
	radio_power_off_at();
     dc2:	f5 da       	rcall	.-2582   	; 0x3ae <__portable_avr_delay_cycles>
     dc4:	48 db       	rcall	.-2416   	; 0x456 <radio_pins_init>
	
	//reset all tx data and date
	reset_all_data(); //PROBLEM FIX!!!!!!!!!!!!!!!!!!!!!!
     dc6:	6b e0       	ldi	r22, 0x0B	; 11
     dc8:	7b e8       	ldi	r23, 0x8B	; 139
	
	//RTC setup.
	//PR.PRGEN &= ~(1<<2); //enable the RTC clock
	//sleepmgr_init();
	//rtc_init_period(WAKEUP_RATE); //using RTC as sampler timer.
	rtc_init_period(1); //using RTC as sampler timer.
     dca:	82 e0       	ldi	r24, 0x02	; 2
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	ef da       	rcall	.-2594   	; 0x3ae <__portable_avr_delay_cycles>
     dd0:	89 db       	rcall	.-2286   	; 0x4e4 <radio_power_off_at>
	
	sei(); //enable interrupts
     dd2:	2a db       	rcall	.-2476   	; 0x428 <reset_all_data>
		
	//go to sleep and let interrupts do the work...zzz....zzzz
	while (1)
	{
		/*sleepmgr_enter_sleep();*/
		sleep_enable();
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	36 db       	rcall	.-2452   	; 0x446 <rtc_init_period>
     dda:	78 94       	sei
     ddc:	83 b7       	in	r24, 0x33	; 51
     dde:	81 60       	ori	r24, 0x01	; 1
     de0:	83 bf       	out	0x33, r24	; 51
     de2:	fc cf       	rjmp	.-8      	; 0xddc <main+0x56>

00000de4 <MQTTSerialize_connectLength>:

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
     de4:	ef 92       	push	r14
     de6:	ff 92       	push	r15
     de8:	0f 93       	push	r16
     dea:	1f 93       	push	r17
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	ec 01       	movw	r28, r24
     df2:	8e 81       	ldd	r24, Y+6	; 0x06
     df4:	83 30       	cpi	r24, 0x03	; 3
     df6:	29 f0       	breq	.+10     	; 0xe02 <MQTTSerialize_connectLength+0x1e>
     df8:	84 30       	cpi	r24, 0x04	; 4
     dfa:	31 f4       	brne	.+12     	; 0xe08 <MQTTSerialize_connectLength+0x24>
     dfc:	0a e0       	ldi	r16, 0x0A	; 10
     dfe:	10 e0       	ldi	r17, 0x00	; 0
     e00:	05 c0       	rjmp	.+10     	; 0xe0c <MQTTSerialize_connectLength+0x28>
     e02:	0c e0       	ldi	r16, 0x0C	; 12
     e04:	10 e0       	ldi	r17, 0x00	; 0
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <MQTTSerialize_connectLength+0x28>
     e08:	00 e0       	ldi	r16, 0x00	; 0
     e0a:	10 e0       	ldi	r17, 0x00	; 0
     e0c:	4f 81       	ldd	r20, Y+7	; 0x07
     e0e:	58 85       	ldd	r21, Y+8	; 0x08
     e10:	69 85       	ldd	r22, Y+9	; 0x09
     e12:	7a 85       	ldd	r23, Y+10	; 0x0a
     e14:	8b 85       	ldd	r24, Y+11	; 0x0b
     e16:	9c 85       	ldd	r25, Y+12	; 0x0c
     e18:	fb d1       	rcall	.+1014   	; 0x1210 <MQTTstrlen>
     e1a:	02 96       	adiw	r24, 0x02	; 2
     e1c:	08 0f       	add	r16, r24
     e1e:	19 1f       	adc	r17, r25
     e20:	88 89       	ldd	r24, Y+16	; 0x10
     e22:	88 23       	and	r24, r24
     e24:	a1 f0       	breq	.+40     	; 0xe4e <MQTTSerialize_connectLength+0x6a>
     e26:	4f 89       	ldd	r20, Y+23	; 0x17
     e28:	58 8d       	ldd	r21, Y+24	; 0x18
     e2a:	69 8d       	ldd	r22, Y+25	; 0x19
     e2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e30:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e32:	ee d1       	rcall	.+988    	; 0x1210 <MQTTstrlen>
     e34:	7c 01       	movw	r14, r24
     e36:	4d 8d       	ldd	r20, Y+29	; 0x1d
     e38:	5e 8d       	ldd	r21, Y+30	; 0x1e
     e3a:	6f 8d       	ldd	r22, Y+31	; 0x1f
     e3c:	78 a1       	ldd	r23, Y+32	; 0x20
     e3e:	89 a1       	ldd	r24, Y+33	; 0x21
     e40:	9a a1       	ldd	r25, Y+34	; 0x22
     e42:	e6 d1       	rcall	.+972    	; 0x1210 <MQTTstrlen>
     e44:	8e 0d       	add	r24, r14
     e46:	9f 1d       	adc	r25, r15
     e48:	04 96       	adiw	r24, 0x04	; 4
     e4a:	08 0f       	add	r16, r24
     e4c:	19 1f       	adc	r17, r25
     e4e:	8d a1       	ldd	r24, Y+37	; 0x25
     e50:	9e a1       	ldd	r25, Y+38	; 0x26
     e52:	89 2b       	or	r24, r25
     e54:	21 f4       	brne	.+8      	; 0xe5e <MQTTSerialize_connectLength+0x7a>
     e56:	89 a5       	ldd	r24, Y+41	; 0x29
     e58:	9a a5       	ldd	r25, Y+42	; 0x2a
     e5a:	89 2b       	or	r24, r25
     e5c:	51 f0       	breq	.+20     	; 0xe72 <MQTTSerialize_connectLength+0x8e>
     e5e:	4d a1       	ldd	r20, Y+37	; 0x25
     e60:	5e a1       	ldd	r21, Y+38	; 0x26
     e62:	6f a1       	ldd	r22, Y+39	; 0x27
     e64:	78 a5       	ldd	r23, Y+40	; 0x28
     e66:	89 a5       	ldd	r24, Y+41	; 0x29
     e68:	9a a5       	ldd	r25, Y+42	; 0x2a
     e6a:	d2 d1       	rcall	.+932    	; 0x1210 <MQTTstrlen>
     e6c:	02 96       	adiw	r24, 0x02	; 2
     e6e:	08 0f       	add	r16, r24
     e70:	19 1f       	adc	r17, r25
     e72:	8b a5       	ldd	r24, Y+43	; 0x2b
     e74:	9c a5       	ldd	r25, Y+44	; 0x2c
     e76:	89 2b       	or	r24, r25
     e78:	21 f4       	brne	.+8      	; 0xe82 <MQTTSerialize_connectLength+0x9e>
     e7a:	8f a5       	ldd	r24, Y+47	; 0x2f
     e7c:	98 a9       	ldd	r25, Y+48	; 0x30
     e7e:	89 2b       	or	r24, r25
     e80:	51 f0       	breq	.+20     	; 0xe96 <MQTTSerialize_connectLength+0xb2>
     e82:	4b a5       	ldd	r20, Y+43	; 0x2b
     e84:	5c a5       	ldd	r21, Y+44	; 0x2c
     e86:	6d a5       	ldd	r22, Y+45	; 0x2d
     e88:	7e a5       	ldd	r23, Y+46	; 0x2e
     e8a:	8f a5       	ldd	r24, Y+47	; 0x2f
     e8c:	98 a9       	ldd	r25, Y+48	; 0x30
     e8e:	c0 d1       	rcall	.+896    	; 0x1210 <MQTTstrlen>
     e90:	02 96       	adiw	r24, 0x02	; 2
     e92:	08 0f       	add	r16, r24
     e94:	19 1f       	adc	r17, r25
     e96:	c8 01       	movw	r24, r16
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	1f 91       	pop	r17
     e9e:	0f 91       	pop	r16
     ea0:	ff 90       	pop	r15
     ea2:	ef 90       	pop	r14
     ea4:	08 95       	ret

00000ea6 <MQTTSerialize_connect>:
     ea6:	af 92       	push	r10
     ea8:	bf 92       	push	r11
     eaa:	cf 92       	push	r12
     eac:	df 92       	push	r13
     eae:	ef 92       	push	r14
     eb0:	ff 92       	push	r15
     eb2:	0f 93       	push	r16
     eb4:	1f 93       	push	r17
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
     eba:	00 d0       	rcall	.+0      	; 0xebc <MQTTSerialize_connect+0x16>
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
     ec0:	6c 01       	movw	r12, r24
     ec2:	5b 01       	movw	r10, r22
     ec4:	8a 01       	movw	r16, r20
     ec6:	9a 83       	std	Y+2, r25	; 0x02
     ec8:	89 83       	std	Y+1, r24	; 0x01
     eca:	ca 01       	movw	r24, r20
     ecc:	8b df       	rcall	.-234    	; 0xde4 <MQTTSerialize_connectLength>
     ece:	7c 01       	movw	r14, r24
     ed0:	03 d1       	rcall	.+518    	; 0x10d8 <MQTTPacket_len>
     ed2:	a8 16       	cp	r10, r24
     ed4:	b9 06       	cpc	r11, r25
     ed6:	0c f4       	brge	.+2      	; 0xeda <MQTTSerialize_connect+0x34>
     ed8:	9f c0       	rjmp	.+318    	; 0x1018 <MQTTSerialize_connect+0x172>
     eda:	60 e1       	ldi	r22, 0x10	; 16
     edc:	ce 01       	movw	r24, r28
     ede:	01 96       	adiw	r24, 0x01	; 1
     ee0:	0a d1       	rcall	.+532    	; 0x10f6 <writeChar>
     ee2:	b7 01       	movw	r22, r14
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	9a 81       	ldd	r25, Y+2	; 0x02
     ee8:	d1 d0       	rcall	.+418    	; 0x108c <MQTTPacket_encode>
     eea:	29 81       	ldd	r18, Y+1	; 0x01
     eec:	3a 81       	ldd	r19, Y+2	; 0x02
     eee:	82 0f       	add	r24, r18
     ef0:	93 1f       	adc	r25, r19
     ef2:	9a 83       	std	Y+2, r25	; 0x02
     ef4:	89 83       	std	Y+1, r24	; 0x01
     ef6:	f8 01       	movw	r30, r16
     ef8:	86 81       	ldd	r24, Z+6	; 0x06
     efa:	84 30       	cpi	r24, 0x04	; 4
     efc:	51 f4       	brne	.+20     	; 0xf12 <MQTTSerialize_connect+0x6c>
     efe:	6b eb       	ldi	r22, 0xBB	; 187
     f00:	73 e0       	ldi	r23, 0x03	; 3
     f02:	ce 01       	movw	r24, r28
     f04:	01 96       	adiw	r24, 0x01	; 1
     f06:	20 d1       	rcall	.+576    	; 0x1148 <writeCString>
     f08:	64 e0       	ldi	r22, 0x04	; 4
     f0a:	ce 01       	movw	r24, r28
     f0c:	01 96       	adiw	r24, 0x01	; 1
     f0e:	f3 d0       	rcall	.+486    	; 0x10f6 <writeChar>
     f10:	09 c0       	rjmp	.+18     	; 0xf24 <MQTTSerialize_connect+0x7e>
     f12:	60 ec       	ldi	r22, 0xC0	; 192
     f14:	73 e0       	ldi	r23, 0x03	; 3
     f16:	ce 01       	movw	r24, r28
     f18:	01 96       	adiw	r24, 0x01	; 1
     f1a:	16 d1       	rcall	.+556    	; 0x1148 <writeCString>
     f1c:	63 e0       	ldi	r22, 0x03	; 3
     f1e:	ce 01       	movw	r24, r28
     f20:	01 96       	adiw	r24, 0x01	; 1
     f22:	e9 d0       	rcall	.+466    	; 0x10f6 <writeChar>
     f24:	f1 2c       	mov	r15, r1
     f26:	f8 01       	movw	r30, r16
     f28:	87 85       	ldd	r24, Z+15	; 0x0f
     f2a:	80 fb       	bst	r24, 0
     f2c:	f1 f8       	bld	r15, 1
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 89       	ldd	r25, Z+16	; 0x10
     f32:	91 11       	cpse	r25, r1
     f34:	01 c0       	rjmp	.+2      	; 0xf38 <MQTTSerialize_connect+0x92>
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	80 fb       	bst	r24, 0
     f3a:	f2 f8       	bld	r15, 2
     f3c:	f2 fe       	sbrs	r15, 2
     f3e:	0d c0       	rjmp	.+26     	; 0xf5a <MQTTSerialize_connect+0xb4>
     f40:	f8 01       	movw	r30, r16
     f42:	84 a1       	ldd	r24, Z+36	; 0x24
     f44:	83 70       	andi	r24, 0x03	; 3
     f46:	88 0f       	add	r24, r24
     f48:	88 0f       	add	r24, r24
     f4a:	88 0f       	add	r24, r24
     f4c:	9f 2d       	mov	r25, r15
     f4e:	97 7e       	andi	r25, 0xE7	; 231
     f50:	f9 2e       	mov	r15, r25
     f52:	f8 2a       	or	r15, r24
     f54:	83 a1       	ldd	r24, Z+35	; 0x23
     f56:	80 fb       	bst	r24, 0
     f58:	f5 f8       	bld	r15, 5
     f5a:	f8 01       	movw	r30, r16
     f5c:	85 a1       	ldd	r24, Z+37	; 0x25
     f5e:	96 a1       	ldd	r25, Z+38	; 0x26
     f60:	89 2b       	or	r24, r25
     f62:	21 f4       	brne	.+8      	; 0xf6c <MQTTSerialize_connect+0xc6>
     f64:	81 a5       	ldd	r24, Z+41	; 0x29
     f66:	92 a5       	ldd	r25, Z+42	; 0x2a
     f68:	89 2b       	or	r24, r25
     f6a:	11 f0       	breq	.+4      	; 0xf70 <MQTTSerialize_connect+0xca>
     f6c:	68 94       	set
     f6e:	f7 f8       	bld	r15, 7
     f70:	f8 01       	movw	r30, r16
     f72:	83 a5       	ldd	r24, Z+43	; 0x2b
     f74:	94 a5       	ldd	r25, Z+44	; 0x2c
     f76:	89 2b       	or	r24, r25
     f78:	21 f4       	brne	.+8      	; 0xf82 <MQTTSerialize_connect+0xdc>
     f7a:	87 a5       	ldd	r24, Z+47	; 0x2f
     f7c:	90 a9       	ldd	r25, Z+48	; 0x30
     f7e:	89 2b       	or	r24, r25
     f80:	11 f0       	breq	.+4      	; 0xf86 <MQTTSerialize_connect+0xe0>
     f82:	68 94       	set
     f84:	f6 f8       	bld	r15, 6
     f86:	6f 2d       	mov	r22, r15
     f88:	ce 01       	movw	r24, r28
     f8a:	01 96       	adiw	r24, 0x01	; 1
     f8c:	b4 d0       	rcall	.+360    	; 0x10f6 <writeChar>
     f8e:	f8 01       	movw	r30, r16
     f90:	65 85       	ldd	r22, Z+13	; 0x0d
     f92:	76 85       	ldd	r23, Z+14	; 0x0e
     f94:	ce 01       	movw	r24, r28
     f96:	01 96       	adiw	r24, 0x01	; 1
     f98:	b8 d0       	rcall	.+368    	; 0x110a <writeInt>
     f9a:	f8 01       	movw	r30, r16
     f9c:	27 81       	ldd	r18, Z+7	; 0x07
     f9e:	30 85       	ldd	r19, Z+8	; 0x08
     fa0:	41 85       	ldd	r20, Z+9	; 0x09
     fa2:	52 85       	ldd	r21, Z+10	; 0x0a
     fa4:	63 85       	ldd	r22, Z+11	; 0x0b
     fa6:	74 85       	ldd	r23, Z+12	; 0x0c
     fa8:	ce 01       	movw	r24, r28
     faa:	01 96       	adiw	r24, 0x01	; 1
     fac:	f2 d0       	rcall	.+484    	; 0x1192 <writeMQTTString>
     fae:	f8 01       	movw	r30, r16
     fb0:	80 89       	ldd	r24, Z+16	; 0x10
     fb2:	88 23       	and	r24, r24
     fb4:	99 f0       	breq	.+38     	; 0xfdc <MQTTSerialize_connect+0x136>
     fb6:	27 89       	ldd	r18, Z+23	; 0x17
     fb8:	30 8d       	ldd	r19, Z+24	; 0x18
     fba:	41 8d       	ldd	r20, Z+25	; 0x19
     fbc:	52 8d       	ldd	r21, Z+26	; 0x1a
     fbe:	63 8d       	ldd	r22, Z+27	; 0x1b
     fc0:	74 8d       	ldd	r23, Z+28	; 0x1c
     fc2:	ce 01       	movw	r24, r28
     fc4:	01 96       	adiw	r24, 0x01	; 1
     fc6:	e5 d0       	rcall	.+458    	; 0x1192 <writeMQTTString>
     fc8:	f8 01       	movw	r30, r16
     fca:	25 8d       	ldd	r18, Z+29	; 0x1d
     fcc:	36 8d       	ldd	r19, Z+30	; 0x1e
     fce:	47 8d       	ldd	r20, Z+31	; 0x1f
     fd0:	50 a1       	ldd	r21, Z+32	; 0x20
     fd2:	61 a1       	ldd	r22, Z+33	; 0x21
     fd4:	72 a1       	ldd	r23, Z+34	; 0x22
     fd6:	ce 01       	movw	r24, r28
     fd8:	01 96       	adiw	r24, 0x01	; 1
     fda:	db d0       	rcall	.+438    	; 0x1192 <writeMQTTString>
     fdc:	ef 2c       	mov	r14, r15
     fde:	ff 20       	and	r15, r15
     fe0:	54 f4       	brge	.+20     	; 0xff6 <MQTTSerialize_connect+0x150>
     fe2:	f8 01       	movw	r30, r16
     fe4:	25 a1       	ldd	r18, Z+37	; 0x25
     fe6:	36 a1       	ldd	r19, Z+38	; 0x26
     fe8:	47 a1       	ldd	r20, Z+39	; 0x27
     fea:	50 a5       	ldd	r21, Z+40	; 0x28
     fec:	61 a5       	ldd	r22, Z+41	; 0x29
     fee:	72 a5       	ldd	r23, Z+42	; 0x2a
     ff0:	ce 01       	movw	r24, r28
     ff2:	01 96       	adiw	r24, 0x01	; 1
     ff4:	ce d0       	rcall	.+412    	; 0x1192 <writeMQTTString>
     ff6:	e6 fe       	sbrs	r14, 6
     ff8:	0a c0       	rjmp	.+20     	; 0x100e <MQTTSerialize_connect+0x168>
     ffa:	f8 01       	movw	r30, r16
     ffc:	23 a5       	ldd	r18, Z+43	; 0x2b
     ffe:	34 a5       	ldd	r19, Z+44	; 0x2c
    1000:	45 a5       	ldd	r20, Z+45	; 0x2d
    1002:	56 a5       	ldd	r21, Z+46	; 0x2e
    1004:	67 a5       	ldd	r22, Z+47	; 0x2f
    1006:	70 a9       	ldd	r23, Z+48	; 0x30
    1008:	ce 01       	movw	r24, r28
    100a:	01 96       	adiw	r24, 0x01	; 1
    100c:	c2 d0       	rcall	.+388    	; 0x1192 <writeMQTTString>
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	9a 81       	ldd	r25, Y+2	; 0x02
    1012:	8c 19       	sub	r24, r12
    1014:	9d 09       	sbc	r25, r13
    1016:	02 c0       	rjmp	.+4      	; 0x101c <MQTTSerialize_connect+0x176>
    1018:	8e ef       	ldi	r24, 0xFE	; 254
    101a:	9f ef       	ldi	r25, 0xFF	; 255
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	1f 91       	pop	r17
    1026:	0f 91       	pop	r16
    1028:	ff 90       	pop	r15
    102a:	ef 90       	pop	r14
    102c:	df 90       	pop	r13
    102e:	cf 90       	pop	r12
    1030:	bf 90       	pop	r11
    1032:	af 90       	pop	r10
    1034:	08 95       	ret

00001036 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
    1036:	0f 93       	push	r16
    1038:	1f 93       	push	r17
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	00 d0       	rcall	.+0      	; 0x1040 <MQTTSerialize_zero+0xa>
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
    1044:	9a 83       	std	Y+2, r25	; 0x02
    1046:	89 83       	std	Y+1, r24	; 0x01

	FUNC_ENTRY;
	if (buflen < 2)
    1048:	62 30       	cpi	r22, 0x02	; 2
    104a:	71 05       	cpc	r23, r1
    104c:	9c f0       	brlt	.+38     	; 0x1074 <MQTTSerialize_zero+0x3e>
    104e:	8c 01       	movw	r16, r24
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
    1050:	64 2f       	mov	r22, r20
    1052:	62 95       	swap	r22
    1054:	60 7f       	andi	r22, 0xF0	; 240
	writeChar(&ptr, header.byte); /* write header */
    1056:	ce 01       	movw	r24, r28
    1058:	01 96       	adiw	r24, 0x01	; 1
    105a:	4d d0       	rcall	.+154    	; 0x10f6 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
    105c:	60 e0       	ldi	r22, 0x00	; 0
    105e:	70 e0       	ldi	r23, 0x00	; 0
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	9a 81       	ldd	r25, Y+2	; 0x02
    1064:	13 d0       	rcall	.+38     	; 0x108c <MQTTPacket_encode>
	rc = ptr - buf;
    1066:	29 81       	ldd	r18, Y+1	; 0x01
    1068:	3a 81       	ldd	r19, Y+2	; 0x02
    106a:	82 0f       	add	r24, r18
    106c:	93 1f       	adc	r25, r19
    106e:	80 1b       	sub	r24, r16
    1070:	91 0b       	sbc	r25, r17
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <MQTTSerialize_zero+0x42>
	unsigned char *ptr = buf;

	FUNC_ENTRY;
	if (buflen < 2)
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    1074:	8e ef       	ldi	r24, 0xFE	; 254
    1076:	9f ef       	ldi	r25, 0xFF	; 255
	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
	rc = ptr - buf;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	df 91       	pop	r29
    107e:	cf 91       	pop	r28
    1080:	1f 91       	pop	r17
    1082:	0f 91       	pop	r16
    1084:	08 95       	ret

00001086 <MQTTSerialize_disconnect>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
    1086:	4e e0       	ldi	r20, 0x0E	; 14
    1088:	d6 cf       	rjmp	.-84     	; 0x1036 <MQTTSerialize_zero>
}
    108a:	08 95       	ret

0000108c <MQTTPacket_encode>:
		}
	}
	mqttstring->cstring = NULL;
	FUNC_EXIT_RC(rc);
	return rc;
}
    108c:	dc 01       	movw	r26, r24
    108e:	e0 e0       	ldi	r30, 0x00	; 0
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	9b 01       	movw	r18, r22
    1094:	2f 77       	andi	r18, 0x7F	; 127
    1096:	30 78       	andi	r19, 0x80	; 128
    1098:	33 23       	and	r19, r19
    109a:	34 f4       	brge	.+12     	; 0x10a8 <MQTTPacket_encode+0x1c>
    109c:	21 50       	subi	r18, 0x01	; 1
    109e:	31 09       	sbc	r19, r1
    10a0:	20 68       	ori	r18, 0x80	; 128
    10a2:	3f 6f       	ori	r19, 0xFF	; 255
    10a4:	2f 5f       	subi	r18, 0xFF	; 255
    10a6:	3f 4f       	sbci	r19, 0xFF	; 255
    10a8:	ab 01       	movw	r20, r22
    10aa:	77 23       	and	r23, r23
    10ac:	14 f4       	brge	.+4      	; 0x10b2 <MQTTPacket_encode+0x26>
    10ae:	41 58       	subi	r20, 0x81	; 129
    10b0:	5f 4f       	sbci	r21, 0xFF	; 255
    10b2:	ba 01       	movw	r22, r20
    10b4:	66 0f       	add	r22, r22
    10b6:	67 2f       	mov	r22, r23
    10b8:	66 1f       	adc	r22, r22
    10ba:	77 0b       	sbc	r23, r23
    10bc:	16 16       	cp	r1, r22
    10be:	17 06       	cpc	r1, r23
    10c0:	24 f4       	brge	.+8      	; 0x10ca <MQTTPacket_encode+0x3e>
    10c2:	31 96       	adiw	r30, 0x01	; 1
    10c4:	20 68       	ori	r18, 0x80	; 128
    10c6:	2d 93       	st	X+, r18
    10c8:	e4 cf       	rjmp	.-56     	; 0x1092 <MQTTPacket_encode+0x6>
    10ca:	dc 01       	movw	r26, r24
    10cc:	ae 0f       	add	r26, r30
    10ce:	bf 1f       	adc	r27, r31
    10d0:	2c 93       	st	X, r18
    10d2:	cf 01       	movw	r24, r30
    10d4:	01 96       	adiw	r24, 0x01	; 1
    10d6:	08 95       	ret

000010d8 <MQTTPacket_len>:
    10d8:	9c 01       	movw	r18, r24
    10da:	2f 5f       	subi	r18, 0xFF	; 255
    10dc:	3f 4f       	sbci	r19, 0xFF	; 255
    10de:	20 38       	cpi	r18, 0x80	; 128
    10e0:	31 05       	cpc	r19, r1
    10e2:	14 f4       	brge	.+4      	; 0x10e8 <MQTTPacket_len+0x10>
    10e4:	02 96       	adiw	r24, 0x02	; 2
    10e6:	08 95       	ret
    10e8:	21 15       	cp	r18, r1
    10ea:	30 44       	sbci	r19, 0x40	; 64
    10ec:	14 f4       	brge	.+4      	; 0x10f2 <MQTTPacket_len+0x1a>
    10ee:	03 96       	adiw	r24, 0x03	; 3
    10f0:	08 95       	ret
    10f2:	04 96       	adiw	r24, 0x04	; 4
    10f4:	08 95       	ret

000010f6 <writeChar>:
    10f6:	fc 01       	movw	r30, r24
    10f8:	a0 81       	ld	r26, Z
    10fa:	b1 81       	ldd	r27, Z+1	; 0x01
    10fc:	6c 93       	st	X, r22
    10fe:	80 81       	ld	r24, Z
    1100:	91 81       	ldd	r25, Z+1	; 0x01
    1102:	01 96       	adiw	r24, 0x01	; 1
    1104:	91 83       	std	Z+1, r25	; 0x01
    1106:	80 83       	st	Z, r24
    1108:	08 95       	ret

0000110a <writeInt>:
    110a:	fc 01       	movw	r30, r24
    110c:	a0 81       	ld	r26, Z
    110e:	b1 81       	ldd	r27, Z+1	; 0x01
    1110:	cb 01       	movw	r24, r22
    1112:	77 23       	and	r23, r23
    1114:	14 f4       	brge	.+4      	; 0x111a <writeInt+0x10>
    1116:	81 50       	subi	r24, 0x01	; 1
    1118:	9f 4f       	sbci	r25, 0xFF	; 255
    111a:	9c 93       	st	X, r25
    111c:	a0 81       	ld	r26, Z
    111e:	b1 81       	ldd	r27, Z+1	; 0x01
    1120:	cd 01       	movw	r24, r26
    1122:	01 96       	adiw	r24, 0x01	; 1
    1124:	91 83       	std	Z+1, r25	; 0x01
    1126:	80 83       	st	Z, r24
    1128:	70 78       	andi	r23, 0x80	; 128
    112a:	77 23       	and	r23, r23
    112c:	2c f4       	brge	.+10     	; 0x1138 <writeInt+0x2e>
    112e:	61 50       	subi	r22, 0x01	; 1
    1130:	71 09       	sbc	r23, r1
    1132:	7f 6f       	ori	r23, 0xFF	; 255
    1134:	6f 5f       	subi	r22, 0xFF	; 255
    1136:	7f 4f       	sbci	r23, 0xFF	; 255
    1138:	11 96       	adiw	r26, 0x01	; 1
    113a:	6c 93       	st	X, r22
    113c:	80 81       	ld	r24, Z
    113e:	91 81       	ldd	r25, Z+1	; 0x01
    1140:	01 96       	adiw	r24, 0x01	; 1
    1142:	91 83       	std	Z+1, r25	; 0x01
    1144:	80 83       	st	Z, r24
    1146:	08 95       	ret

00001148 <writeCString>:
    1148:	ef 92       	push	r14
    114a:	ff 92       	push	r15
    114c:	0f 93       	push	r16
    114e:	1f 93       	push	r17
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
    1154:	8c 01       	movw	r16, r24
    1156:	7b 01       	movw	r14, r22
    1158:	eb 01       	movw	r28, r22
    115a:	09 90       	ld	r0, Y+
    115c:	00 20       	and	r0, r0
    115e:	e9 f7       	brne	.-6      	; 0x115a <writeCString+0x12>
    1160:	21 97       	sbiw	r28, 0x01	; 1
    1162:	c6 1b       	sub	r28, r22
    1164:	d7 0b       	sbc	r29, r23
    1166:	be 01       	movw	r22, r28
    1168:	d0 df       	rcall	.-96     	; 0x110a <writeInt>
    116a:	ae 01       	movw	r20, r28
    116c:	b7 01       	movw	r22, r14
    116e:	f8 01       	movw	r30, r16
    1170:	80 81       	ld	r24, Z
    1172:	91 81       	ldd	r25, Z+1	; 0x01
    1174:	49 d5       	rcall	.+2706   	; 0x1c08 <memcpy>
    1176:	f8 01       	movw	r30, r16
    1178:	80 81       	ld	r24, Z
    117a:	91 81       	ldd	r25, Z+1	; 0x01
    117c:	c8 0f       	add	r28, r24
    117e:	d9 1f       	adc	r29, r25
    1180:	d1 83       	std	Z+1, r29	; 0x01
    1182:	c0 83       	st	Z, r28
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	1f 91       	pop	r17
    118a:	0f 91       	pop	r16
    118c:	ff 90       	pop	r15
    118e:	ef 90       	pop	r14
    1190:	08 95       	ret

00001192 <writeMQTTString>:
    1192:	ef 92       	push	r14
    1194:	ff 92       	push	r15
    1196:	0f 93       	push	r16
    1198:	1f 93       	push	r17
    119a:	cf 93       	push	r28
    119c:	df 93       	push	r29
    119e:	00 d0       	rcall	.+0      	; 0x11a0 <writeMQTTString+0xe>
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <writeMQTTString+0x10>
    11a2:	00 d0       	rcall	.+0      	; 0x11a4 <writeMQTTString+0x12>
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
    11a8:	7c 01       	movw	r14, r24
    11aa:	29 83       	std	Y+1, r18	; 0x01
    11ac:	3a 83       	std	Y+2, r19	; 0x02
    11ae:	4b 83       	std	Y+3, r20	; 0x03
    11b0:	5c 83       	std	Y+4, r21	; 0x04
    11b2:	6d 83       	std	Y+5, r22	; 0x05
    11b4:	7e 83       	std	Y+6, r23	; 0x06
    11b6:	0b 81       	ldd	r16, Y+3	; 0x03
    11b8:	1c 81       	ldd	r17, Y+4	; 0x04
    11ba:	10 16       	cp	r1, r16
    11bc:	11 06       	cpc	r1, r17
    11be:	8c f4       	brge	.+34     	; 0x11e2 <writeMQTTString+0x50>
    11c0:	b8 01       	movw	r22, r16
    11c2:	a3 df       	rcall	.-186    	; 0x110a <writeInt>
    11c4:	6d 81       	ldd	r22, Y+5	; 0x05
    11c6:	7e 81       	ldd	r23, Y+6	; 0x06
    11c8:	a8 01       	movw	r20, r16
    11ca:	f7 01       	movw	r30, r14
    11cc:	80 81       	ld	r24, Z
    11ce:	91 81       	ldd	r25, Z+1	; 0x01
    11d0:	1b d5       	rcall	.+2614   	; 0x1c08 <memcpy>
    11d2:	f7 01       	movw	r30, r14
    11d4:	80 81       	ld	r24, Z
    11d6:	91 81       	ldd	r25, Z+1	; 0x01
    11d8:	08 0f       	add	r16, r24
    11da:	19 1f       	adc	r17, r25
    11dc:	11 83       	std	Z+1, r17	; 0x01
    11de:	00 83       	st	Z, r16
    11e0:	0a c0       	rjmp	.+20     	; 0x11f6 <writeMQTTString+0x64>
    11e2:	69 81       	ldd	r22, Y+1	; 0x01
    11e4:	7a 81       	ldd	r23, Y+2	; 0x02
    11e6:	61 15       	cp	r22, r1
    11e8:	71 05       	cpc	r23, r1
    11ea:	11 f0       	breq	.+4      	; 0x11f0 <writeMQTTString+0x5e>
    11ec:	ad df       	rcall	.-166    	; 0x1148 <writeCString>
    11ee:	03 c0       	rjmp	.+6      	; 0x11f6 <writeMQTTString+0x64>
    11f0:	60 e0       	ldi	r22, 0x00	; 0
    11f2:	70 e0       	ldi	r23, 0x00	; 0
    11f4:	8a df       	rcall	.-236    	; 0x110a <writeInt>
    11f6:	26 96       	adiw	r28, 0x06	; 6
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	f8 94       	cli
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	cd bf       	out	0x3d, r28	; 61
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	1f 91       	pop	r17
    1208:	0f 91       	pop	r16
    120a:	ff 90       	pop	r15
    120c:	ef 90       	pop	r14
    120e:	08 95       	ret

00001210 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	00 d0       	rcall	.+0      	; 0x1216 <MQTTstrlen+0x6>
    1216:	00 d0       	rcall	.+0      	; 0x1218 <MQTTstrlen+0x8>
    1218:	00 d0       	rcall	.+0      	; 0x121a <MQTTstrlen+0xa>
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
    121e:	49 83       	std	Y+1, r20	; 0x01
    1220:	5a 83       	std	Y+2, r21	; 0x02
    1222:	6b 83       	std	Y+3, r22	; 0x03
    1224:	7c 83       	std	Y+4, r23	; 0x04
    1226:	8d 83       	std	Y+5, r24	; 0x05
    1228:	9e 83       	std	Y+6, r25	; 0x06
    122a:	a9 81       	ldd	r26, Y+1	; 0x01
    122c:	ba 81       	ldd	r27, Y+2	; 0x02
	int rc = 0;

	if (mqttstring.cstring)
    122e:	10 97       	sbiw	r26, 0x00	; 0
    1230:	49 f0       	breq	.+18     	; 0x1244 <MQTTstrlen+0x34>
		rc = strlen(mqttstring.cstring);
    1232:	fd 01       	movw	r30, r26
    1234:	01 90       	ld	r0, Z+
    1236:	00 20       	and	r0, r0
    1238:	e9 f7       	brne	.-6      	; 0x1234 <MQTTstrlen+0x24>
    123a:	31 97       	sbiw	r30, 0x01	; 1
    123c:	cf 01       	movw	r24, r30
    123e:	8a 1b       	sub	r24, r26
    1240:	9b 0b       	sbc	r25, r27
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <MQTTstrlen+0x38>
	else
		rc = mqttstring.lenstring.len;
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	9c 81       	ldd	r25, Y+4	; 0x04
	return rc;
}
    1248:	26 96       	adiw	r28, 0x06	; 6
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	f8 94       	cli
    124e:	de bf       	out	0x3e, r29	; 62
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	cd bf       	out	0x3d, r28	; 61
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	08 95       	ret

0000125a <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
    125a:	ef 92       	push	r14
    125c:	ff 92       	push	r15
    125e:	0f 93       	push	r16
    1260:	1f 93       	push	r17
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
    1266:	00 d0       	rcall	.+0      	; 0x1268 <MQTTSerialize_publishLength+0xe>
    1268:	00 d0       	rcall	.+0      	; 0x126a <MQTTSerialize_publishLength+0x10>
    126a:	00 d0       	rcall	.+0      	; 0x126c <MQTTSerialize_publishLength+0x12>
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
    1270:	7c 01       	movw	r14, r24
    1272:	f4 2f       	mov	r31, r20
    1274:	e5 2f       	mov	r30, r21
    1276:	86 2f       	mov	r24, r22
    1278:	97 2f       	mov	r25, r23
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
    127a:	42 2f       	mov	r20, r18
    127c:	53 2f       	mov	r21, r19
    127e:	6f 2f       	mov	r22, r31
    1280:	7e 2f       	mov	r23, r30
    1282:	c6 df       	rcall	.-116    	; 0x1210 <MQTTstrlen>
    1284:	02 96       	adiw	r24, 0x02	; 2
    1286:	80 0f       	add	r24, r16
    1288:	91 1f       	adc	r25, r17
	if (qos > 0)
    128a:	1e 14       	cp	r1, r14
    128c:	1f 04       	cpc	r1, r15
    128e:	0c f4       	brge	.+2      	; 0x1292 <MQTTSerialize_publishLength+0x38>
		len += 2; /* packetid */
    1290:	02 96       	adiw	r24, 0x02	; 2
	return len;
}
    1292:	26 96       	adiw	r28, 0x06	; 6
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	1f 91       	pop	r17
    12a4:	0f 91       	pop	r16
    12a6:	ff 90       	pop	r15
    12a8:	ef 90       	pop	r14
    12aa:	08 95       	ret

000012ac <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
    12ac:	2f 92       	push	r2
    12ae:	3f 92       	push	r3
    12b0:	4f 92       	push	r4
    12b2:	5f 92       	push	r5
    12b4:	6f 92       	push	r6
    12b6:	7f 92       	push	r7
    12b8:	8f 92       	push	r8
    12ba:	9f 92       	push	r9
    12bc:	af 92       	push	r10
    12be:	bf 92       	push	r11
    12c0:	cf 92       	push	r12
    12c2:	df 92       	push	r13
    12c4:	ef 92       	push	r14
    12c6:	ff 92       	push	r15
    12c8:	0f 93       	push	r16
    12ca:	1f 93       	push	r17
    12cc:	cf 93       	push	r28
    12ce:	df 93       	push	r29
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
    12d4:	2a 97       	sbiw	r28, 0x0a	; 10
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	f8 94       	cli
    12da:	de bf       	out	0x3e, r29	; 62
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	cd bf       	out	0x3d, r28	; 61
    12e0:	2c 01       	movw	r4, r24
    12e2:	1b 01       	movw	r2, r22
    12e4:	49 87       	std	Y+9, r20	; 0x09
    12e6:	39 01       	movw	r6, r18
    12e8:	0a 87       	std	Y+10, r16	; 0x0a
    12ea:	28 2d       	mov	r18, r8
    12ec:	8b 82       	std	Y+3, r8	; 0x03
    12ee:	39 2d       	mov	r19, r9
    12f0:	9c 82       	std	Y+4, r9	; 0x04
    12f2:	4a 2d       	mov	r20, r10
    12f4:	ad 82       	std	Y+5, r10	; 0x05
    12f6:	5b 2d       	mov	r21, r11
    12f8:	be 82       	std	Y+6, r11	; 0x06
    12fa:	6c 2d       	mov	r22, r12
    12fc:	cf 82       	std	Y+7, r12	; 0x07
    12fe:	7d 2d       	mov	r23, r13
    1300:	d8 86       	std	Y+8, r13	; 0x08
    1302:	c9 a0       	ldd	r12, Y+33	; 0x21
    1304:	da a0       	ldd	r13, Y+34	; 0x22
	unsigned char *ptr = buf;
    1306:	9a 83       	std	Y+2, r25	; 0x02
    1308:	89 83       	std	Y+1, r24	; 0x01
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
    130a:	86 01       	movw	r16, r12
    130c:	c3 01       	movw	r24, r6
    130e:	a5 df       	rcall	.-182    	; 0x125a <MQTTSerialize_publishLength>
    1310:	8c 01       	movw	r16, r24
    1312:	e2 de       	rcall	.-572    	; 0x10d8 <MQTTPacket_len>
    1314:	28 16       	cp	r2, r24
    1316:	39 06       	cpc	r3, r25
    1318:	b4 f1       	brlt	.+108    	; 0x1386 <MQTTSerialize_publish+0xda>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
    131a:	60 e3       	ldi	r22, 0x30	; 48
	header.bits.dup = dup;
    131c:	89 85       	ldd	r24, Y+9	; 0x09
    131e:	80 fb       	bst	r24, 0
    1320:	63 f9       	bld	r22, 3
	header.bits.qos = qos;
    1322:	86 2d       	mov	r24, r6
    1324:	83 70       	andi	r24, 0x03	; 3
    1326:	88 0f       	add	r24, r24
    1328:	69 7f       	andi	r22, 0xF9	; 249
    132a:	68 2b       	or	r22, r24
	header.bits.retain = retained;
    132c:	8a 85       	ldd	r24, Y+10	; 0x0a
    132e:	80 fb       	bst	r24, 0
	writeChar(&ptr, header.byte); /* write header */
    1330:	60 f9       	bld	r22, 0
    1332:	ce 01       	movw	r24, r28

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
    1334:	01 96       	adiw	r24, 0x01	; 1
    1336:	df de       	rcall	.-578    	; 0x10f6 <writeChar>
    1338:	b8 01       	movw	r22, r16
    133a:	89 81       	ldd	r24, Y+1	; 0x01
    133c:	9a 81       	ldd	r25, Y+2	; 0x02
    133e:	a6 de       	rcall	.-692    	; 0x108c <MQTTPacket_encode>
    1340:	29 81       	ldd	r18, Y+1	; 0x01
    1342:	3a 81       	ldd	r19, Y+2	; 0x02
    1344:	82 0f       	add	r24, r18
    1346:	93 1f       	adc	r25, r19

	writeMQTTString(&ptr, topicName);
    1348:	9a 83       	std	Y+2, r25	; 0x02
    134a:	89 83       	std	Y+1, r24	; 0x01
    134c:	2b 81       	ldd	r18, Y+3	; 0x03
    134e:	3c 81       	ldd	r19, Y+4	; 0x04
    1350:	4d 81       	ldd	r20, Y+5	; 0x05
    1352:	5e 81       	ldd	r21, Y+6	; 0x06
    1354:	6f 81       	ldd	r22, Y+7	; 0x07
    1356:	78 85       	ldd	r23, Y+8	; 0x08
    1358:	ce 01       	movw	r24, r28

	if (qos > 0)
    135a:	01 96       	adiw	r24, 0x01	; 1
    135c:	1a df       	rcall	.-460    	; 0x1192 <writeMQTTString>
		writeInt(&ptr, packetid);
    135e:	16 14       	cp	r1, r6
    1360:	17 04       	cpc	r1, r7
    1362:	24 f4       	brge	.+8      	; 0x136c <MQTTSerialize_publish+0xc0>
    1364:	b7 01       	movw	r22, r14

	memcpy(ptr, payload, payloadlen);
    1366:	ce 01       	movw	r24, r28
    1368:	01 96       	adiw	r24, 0x01	; 1
    136a:	cf de       	rcall	.-610    	; 0x110a <writeInt>
    136c:	a6 01       	movw	r20, r12
    136e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1370:	78 a1       	ldd	r23, Y+32	; 0x20
    1372:	89 81       	ldd	r24, Y+1	; 0x01
	ptr += payloadlen;

	rc = ptr - buf;
    1374:	9a 81       	ldd	r25, Y+2	; 0x02
    1376:	48 d4       	rcall	.+2192   	; 0x1c08 <memcpy>
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	9a 81       	ldd	r25, Y+2	; 0x02
    137c:	8c 0d       	add	r24, r12
    137e:	9d 1d       	adc	r25, r13
    1380:	84 19       	sub	r24, r4
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    1382:	95 09       	sbc	r25, r5
    1384:	02 c0       	rjmp	.+4      	; 0x138a <MQTTSerialize_publish+0xde>
	rc = ptr - buf;

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    1386:	8e ef       	ldi	r24, 0xFE	; 254
    1388:	9f ef       	ldi	r25, 0xFF	; 255
    138a:	2a 96       	adiw	r28, 0x0a	; 10
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	f8 94       	cli
    1390:	de bf       	out	0x3e, r29	; 62
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	cd bf       	out	0x3d, r28	; 61
    1396:	df 91       	pop	r29
    1398:	cf 91       	pop	r28
    139a:	1f 91       	pop	r17
    139c:	0f 91       	pop	r16
    139e:	ff 90       	pop	r15
    13a0:	ef 90       	pop	r14
    13a2:	df 90       	pop	r13
    13a4:	cf 90       	pop	r12
    13a6:	bf 90       	pop	r11
    13a8:	af 90       	pop	r10
    13aa:	9f 90       	pop	r9
    13ac:	8f 90       	pop	r8
    13ae:	7f 90       	pop	r7
    13b0:	6f 90       	pop	r6
    13b2:	5f 90       	pop	r5
    13b4:	4f 90       	pop	r4
    13b6:	3f 90       	pop	r3
    13b8:	2f 90       	pop	r2
    13ba:	08 95       	ret

000013bc <mqtt_packet>:
#include "string.h"
#include "MQTT_functions.h" 

/////////////MQTT////////////////////
int mqtt_packet(char *payload, char *package, int buflen)
{
    13bc:	2f 92       	push	r2
    13be:	3f 92       	push	r3
    13c0:	4f 92       	push	r4
    13c2:	5f 92       	push	r5
    13c4:	6f 92       	push	r6
    13c6:	7f 92       	push	r7
    13c8:	8f 92       	push	r8
    13ca:	9f 92       	push	r9
    13cc:	af 92       	push	r10
    13ce:	bf 92       	push	r11
    13d0:	cf 92       	push	r12
    13d2:	df 92       	push	r13
    13d4:	ef 92       	push	r14
    13d6:	ff 92       	push	r15
    13d8:	0f 93       	push	r16
    13da:	1f 93       	push	r17
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	e7 97       	sbiw	r28, 0x37	; 55
    13e6:	0f b6       	in	r0, 0x3f	; 63
    13e8:	f8 94       	cli
    13ea:	de bf       	out	0x3e, r29	; 62
    13ec:	0f be       	out	0x3f, r0	; 63
    13ee:	cd bf       	out	0x3d, r28	; 61
    13f0:	f8 2e       	mov	r15, r24
    13f2:	e9 2e       	mov	r14, r25
    13f4:	1b 01       	movw	r2, r22
    13f6:	2a 01       	movw	r4, r20
	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
    13f8:	81 e3       	ldi	r24, 0x31	; 49
    13fa:	e9 e0       	ldi	r30, 0x09	; 9
    13fc:	f1 e0       	ldi	r31, 0x01	; 1
    13fe:	de 01       	movw	r26, r28
    1400:	11 96       	adiw	r26, 0x01	; 1
    1402:	01 90       	ld	r0, Z+
    1404:	0d 92       	st	X+, r0
    1406:	8a 95       	dec	r24
    1408:	e1 f7       	brne	.-8      	; 0x1402 <mqtt_packet+0x46>
	
	//volatile int buflen = sizeof(&package);
	char buf[256];
	//buflen = sizeof(buf);
	MQTTString topicString = MQTTString_initializer;
    140a:	1d aa       	std	Y+53, r1	; 0x35
    140c:	1c aa       	std	Y+52, r1	; 0x34
    140e:	1f aa       	std	Y+55, r1	; 0x37
    1410:	1e aa       	std	Y+54, r1	; 0x36
	
	int payloadlen = strlen(payload);
    1412:	ef 2d       	mov	r30, r15
    1414:	f9 2f       	mov	r31, r25
    1416:	df 01       	movw	r26, r30
    1418:	0d 90       	ld	r0, X+
    141a:	00 20       	and	r0, r0
    141c:	e9 f7       	brne	.-6      	; 0x1418 <mqtt_packet+0x5c>
    141e:	11 97       	sbiw	r26, 0x01	; 1
    1420:	8d 01       	movw	r16, r26
    1422:	0e 1b       	sub	r16, r30
    1424:	1f 0b       	sbc	r17, r31
	int len = 0;
	
	data.clientID.cstring = "LE";
    1426:	87 ec       	ldi	r24, 0xC7	; 199
    1428:	93 e0       	ldi	r25, 0x03	; 3
    142a:	99 87       	std	Y+9, r25	; 0x09
    142c:	88 87       	std	Y+8, r24	; 0x08
	data.keepAliveInterval = 20;
    142e:	84 e1       	ldi	r24, 0x14	; 20
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	9f 87       	std	Y+15, r25	; 0x0f
    1434:	8e 87       	std	Y+14, r24	; 0x0e
	data.cleansession = 1;
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	88 8b       	std	Y+16, r24	; 0x10
	data.username.cstring = "";
    143a:	83 ea       	ldi	r24, 0xA3	; 163
    143c:	92 e0       	ldi	r25, 0x02	; 2
    143e:	9f a3       	std	Y+39, r25	; 0x27
    1440:	8e a3       	std	Y+38, r24	; 0x26
	data.password.cstring = "";
    1442:	9d a7       	std	Y+45, r25	; 0x2d
    1444:	8c a7       	std	Y+44, r24	; 0x2c
	data.MQTTVersion = 4;
    1446:	84 e0       	ldi	r24, 0x04	; 4
    1448:	8f 83       	std	Y+7, r24	; 0x07

	len = MQTTSerialize_connect((unsigned char *)package, buflen, &data);
    144a:	ae 01       	movw	r20, r28
    144c:	4f 5f       	subi	r20, 0xFF	; 255
    144e:	5f 4f       	sbci	r21, 0xFF	; 255
    1450:	b2 01       	movw	r22, r4
    1452:	c1 01       	movw	r24, r2
    1454:	28 dd       	rcall	.-1456   	; 0xea6 <MQTTSerialize_connect>
    1456:	3c 01       	movw	r6, r24
	
	topicString.cstring = "LE/0"; //MAKE A GENERAL CONFIGUREATION OF THIS PARAMETER
    1458:	8a ec       	ldi	r24, 0xCA	; 202
    145a:	93 e0       	ldi	r25, 0x03	; 3
    145c:	9b ab       	std	Y+51, r25	; 0x33
    145e:	8a ab       	std	Y+50, r24	; 0x32
	
	len += MQTTSerialize_publish((unsigned char *)(package + len), buflen - len, 0, 0, 0, 0, topicString, (unsigned char *)payload, payloadlen);
    1460:	b2 01       	movw	r22, r4
    1462:	66 19       	sub	r22, r6
    1464:	77 09       	sbc	r23, r7
    1466:	1f 93       	push	r17
    1468:	0f 93       	push	r16
    146a:	ef 92       	push	r14
    146c:	ff 92       	push	r15
    146e:	8a a8       	ldd	r8, Y+50	; 0x32
    1470:	9b a8       	ldd	r9, Y+51	; 0x33
    1472:	ac a8       	ldd	r10, Y+52	; 0x34
    1474:	bd a8       	ldd	r11, Y+53	; 0x35
    1476:	ce a8       	ldd	r12, Y+54	; 0x36
    1478:	df a8       	ldd	r13, Y+55	; 0x37
    147a:	e1 2c       	mov	r14, r1
    147c:	f1 2c       	mov	r15, r1
    147e:	00 e0       	ldi	r16, 0x00	; 0
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	40 e0       	ldi	r20, 0x00	; 0
    1486:	c1 01       	movw	r24, r2
    1488:	86 0d       	add	r24, r6
    148a:	97 1d       	adc	r25, r7
    148c:	0f df       	rcall	.-482    	; 0x12ac <MQTTSerialize_publish>
    148e:	68 0e       	add	r6, r24
    1490:	79 1e       	adc	r7, r25
		
	len += MQTTSerialize_disconnect((unsigned char *)(package + len), buflen - len);
    1492:	b2 01       	movw	r22, r4
    1494:	66 19       	sub	r22, r6
    1496:	77 09       	sbc	r23, r7
    1498:	c1 01       	movw	r24, r2
    149a:	86 0d       	add	r24, r6
    149c:	97 1d       	adc	r25, r7
    149e:	f3 dd       	rcall	.-1050   	; 0x1086 <MQTTSerialize_disconnect>
	
	exit:
	
	//return 0;
	return len;
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
}
    14a8:	86 0d       	add	r24, r6
    14aa:	97 1d       	adc	r25, r7
    14ac:	e7 96       	adiw	r28, 0x37	; 55
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	f8 94       	cli
    14b2:	de bf       	out	0x3e, r29	; 62
    14b4:	0f be       	out	0x3f, r0	; 63
    14b6:	cd bf       	out	0x3d, r28	; 61
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	1f 91       	pop	r17
    14be:	0f 91       	pop	r16
    14c0:	ff 90       	pop	r15
    14c2:	ef 90       	pop	r14
    14c4:	df 90       	pop	r13
    14c6:	cf 90       	pop	r12
    14c8:	bf 90       	pop	r11
    14ca:	af 90       	pop	r10
    14cc:	9f 90       	pop	r9
    14ce:	8f 90       	pop	r8
    14d0:	7f 90       	pop	r7
    14d2:	6f 90       	pop	r6
    14d4:	5f 90       	pop	r5
    14d6:	4f 90       	pop	r4
    14d8:	3f 90       	pop	r3
    14da:	2f 90       	pop	r2
    14dc:	08 95       	ret

000014de <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    14de:	08 95       	ret

000014e0 <__cmpsf2>:
    14e0:	40 d0       	rcall	.+128    	; 0x1562 <__fp_cmp>
    14e2:	08 f4       	brcc	.+2      	; 0x14e6 <__cmpsf2+0x6>
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	08 95       	ret

000014e8 <__floatunsisf>:
    14e8:	e8 94       	clt
    14ea:	09 c0       	rjmp	.+18     	; 0x14fe <__floatsisf+0x12>

000014ec <__floatsisf>:
    14ec:	97 fb       	bst	r25, 7
    14ee:	3e f4       	brtc	.+14     	; 0x14fe <__floatsisf+0x12>
    14f0:	90 95       	com	r25
    14f2:	80 95       	com	r24
    14f4:	70 95       	com	r23
    14f6:	61 95       	neg	r22
    14f8:	7f 4f       	sbci	r23, 0xFF	; 255
    14fa:	8f 4f       	sbci	r24, 0xFF	; 255
    14fc:	9f 4f       	sbci	r25, 0xFF	; 255
    14fe:	99 23       	and	r25, r25
    1500:	a9 f0       	breq	.+42     	; 0x152c <__floatsisf+0x40>
    1502:	f9 2f       	mov	r31, r25
    1504:	96 e9       	ldi	r25, 0x96	; 150
    1506:	bb 27       	eor	r27, r27
    1508:	93 95       	inc	r25
    150a:	f6 95       	lsr	r31
    150c:	87 95       	ror	r24
    150e:	77 95       	ror	r23
    1510:	67 95       	ror	r22
    1512:	b7 95       	ror	r27
    1514:	f1 11       	cpse	r31, r1
    1516:	f8 cf       	rjmp	.-16     	; 0x1508 <__floatsisf+0x1c>
    1518:	fa f4       	brpl	.+62     	; 0x1558 <__floatsisf+0x6c>
    151a:	bb 0f       	add	r27, r27
    151c:	11 f4       	brne	.+4      	; 0x1522 <__floatsisf+0x36>
    151e:	60 ff       	sbrs	r22, 0
    1520:	1b c0       	rjmp	.+54     	; 0x1558 <__floatsisf+0x6c>
    1522:	6f 5f       	subi	r22, 0xFF	; 255
    1524:	7f 4f       	sbci	r23, 0xFF	; 255
    1526:	8f 4f       	sbci	r24, 0xFF	; 255
    1528:	9f 4f       	sbci	r25, 0xFF	; 255
    152a:	16 c0       	rjmp	.+44     	; 0x1558 <__floatsisf+0x6c>
    152c:	88 23       	and	r24, r24
    152e:	11 f0       	breq	.+4      	; 0x1534 <__floatsisf+0x48>
    1530:	96 e9       	ldi	r25, 0x96	; 150
    1532:	11 c0       	rjmp	.+34     	; 0x1556 <__floatsisf+0x6a>
    1534:	77 23       	and	r23, r23
    1536:	21 f0       	breq	.+8      	; 0x1540 <__floatsisf+0x54>
    1538:	9e e8       	ldi	r25, 0x8E	; 142
    153a:	87 2f       	mov	r24, r23
    153c:	76 2f       	mov	r23, r22
    153e:	05 c0       	rjmp	.+10     	; 0x154a <__floatsisf+0x5e>
    1540:	66 23       	and	r22, r22
    1542:	71 f0       	breq	.+28     	; 0x1560 <__floatsisf+0x74>
    1544:	96 e8       	ldi	r25, 0x86	; 134
    1546:	86 2f       	mov	r24, r22
    1548:	70 e0       	ldi	r23, 0x00	; 0
    154a:	60 e0       	ldi	r22, 0x00	; 0
    154c:	2a f0       	brmi	.+10     	; 0x1558 <__floatsisf+0x6c>
    154e:	9a 95       	dec	r25
    1550:	66 0f       	add	r22, r22
    1552:	77 1f       	adc	r23, r23
    1554:	88 1f       	adc	r24, r24
    1556:	da f7       	brpl	.-10     	; 0x154e <__floatsisf+0x62>
    1558:	88 0f       	add	r24, r24
    155a:	96 95       	lsr	r25
    155c:	87 95       	ror	r24
    155e:	97 f9       	bld	r25, 7
    1560:	08 95       	ret

00001562 <__fp_cmp>:
    1562:	99 0f       	add	r25, r25
    1564:	00 08       	sbc	r0, r0
    1566:	55 0f       	add	r21, r21
    1568:	aa 0b       	sbc	r26, r26
    156a:	e0 e8       	ldi	r30, 0x80	; 128
    156c:	fe ef       	ldi	r31, 0xFE	; 254
    156e:	16 16       	cp	r1, r22
    1570:	17 06       	cpc	r1, r23
    1572:	e8 07       	cpc	r30, r24
    1574:	f9 07       	cpc	r31, r25
    1576:	c0 f0       	brcs	.+48     	; 0x15a8 <__fp_cmp+0x46>
    1578:	12 16       	cp	r1, r18
    157a:	13 06       	cpc	r1, r19
    157c:	e4 07       	cpc	r30, r20
    157e:	f5 07       	cpc	r31, r21
    1580:	98 f0       	brcs	.+38     	; 0x15a8 <__fp_cmp+0x46>
    1582:	62 1b       	sub	r22, r18
    1584:	73 0b       	sbc	r23, r19
    1586:	84 0b       	sbc	r24, r20
    1588:	95 0b       	sbc	r25, r21
    158a:	39 f4       	brne	.+14     	; 0x159a <__fp_cmp+0x38>
    158c:	0a 26       	eor	r0, r26
    158e:	61 f0       	breq	.+24     	; 0x15a8 <__fp_cmp+0x46>
    1590:	23 2b       	or	r18, r19
    1592:	24 2b       	or	r18, r20
    1594:	25 2b       	or	r18, r21
    1596:	21 f4       	brne	.+8      	; 0x15a0 <__fp_cmp+0x3e>
    1598:	08 95       	ret
    159a:	0a 26       	eor	r0, r26
    159c:	09 f4       	brne	.+2      	; 0x15a0 <__fp_cmp+0x3e>
    159e:	a1 40       	sbci	r26, 0x01	; 1
    15a0:	a6 95       	lsr	r26
    15a2:	8f ef       	ldi	r24, 0xFF	; 255
    15a4:	81 1d       	adc	r24, r1
    15a6:	81 1d       	adc	r24, r1
    15a8:	08 95       	ret

000015aa <__gesf2>:
    15aa:	db df       	rcall	.-74     	; 0x1562 <__fp_cmp>
    15ac:	08 f4       	brcc	.+2      	; 0x15b0 <__gesf2+0x6>
    15ae:	8f ef       	ldi	r24, 0xFF	; 255
    15b0:	08 95       	ret

000015b2 <pow>:
    15b2:	fa 01       	movw	r30, r20
    15b4:	ee 0f       	add	r30, r30
    15b6:	ff 1f       	adc	r31, r31
    15b8:	30 96       	adiw	r30, 0x00	; 0
    15ba:	21 05       	cpc	r18, r1
    15bc:	31 05       	cpc	r19, r1
    15be:	99 f1       	breq	.+102    	; 0x1626 <pow+0x74>
    15c0:	61 15       	cp	r22, r1
    15c2:	71 05       	cpc	r23, r1
    15c4:	61 f4       	brne	.+24     	; 0x15de <pow+0x2c>
    15c6:	80 38       	cpi	r24, 0x80	; 128
    15c8:	bf e3       	ldi	r27, 0x3F	; 63
    15ca:	9b 07       	cpc	r25, r27
    15cc:	49 f1       	breq	.+82     	; 0x1620 <pow+0x6e>
    15ce:	68 94       	set
    15d0:	90 38       	cpi	r25, 0x80	; 128
    15d2:	81 05       	cpc	r24, r1
    15d4:	61 f0       	breq	.+24     	; 0x15ee <pow+0x3c>
    15d6:	80 38       	cpi	r24, 0x80	; 128
    15d8:	bf ef       	ldi	r27, 0xFF	; 255
    15da:	9b 07       	cpc	r25, r27
    15dc:	41 f0       	breq	.+16     	; 0x15ee <pow+0x3c>
    15de:	99 23       	and	r25, r25
    15e0:	42 f5       	brpl	.+80     	; 0x1632 <pow+0x80>
    15e2:	ff 3f       	cpi	r31, 0xFF	; 255
    15e4:	e1 05       	cpc	r30, r1
    15e6:	31 05       	cpc	r19, r1
    15e8:	21 05       	cpc	r18, r1
    15ea:	11 f1       	breq	.+68     	; 0x1630 <pow+0x7e>
    15ec:	e8 94       	clt
    15ee:	08 94       	sec
    15f0:	e7 95       	ror	r30
    15f2:	d9 01       	movw	r26, r18
    15f4:	aa 23       	and	r26, r26
    15f6:	29 f4       	brne	.+10     	; 0x1602 <pow+0x50>
    15f8:	ab 2f       	mov	r26, r27
    15fa:	be 2f       	mov	r27, r30
    15fc:	f8 5f       	subi	r31, 0xF8	; 248
    15fe:	d0 f3       	brcs	.-12     	; 0x15f4 <pow+0x42>
    1600:	10 c0       	rjmp	.+32     	; 0x1622 <pow+0x70>
    1602:	ff 5f       	subi	r31, 0xFF	; 255
    1604:	70 f4       	brcc	.+28     	; 0x1622 <pow+0x70>
    1606:	a6 95       	lsr	r26
    1608:	e0 f7       	brcc	.-8      	; 0x1602 <pow+0x50>
    160a:	f7 39       	cpi	r31, 0x97	; 151
    160c:	50 f0       	brcs	.+20     	; 0x1622 <pow+0x70>
    160e:	19 f0       	breq	.+6      	; 0x1616 <pow+0x64>
    1610:	ff 3a       	cpi	r31, 0xAF	; 175
    1612:	38 f4       	brcc	.+14     	; 0x1622 <pow+0x70>
    1614:	9f 77       	andi	r25, 0x7F	; 127
    1616:	9f 93       	push	r25
    1618:	0c d0       	rcall	.+24     	; 0x1632 <pow+0x80>
    161a:	0f 90       	pop	r0
    161c:	07 fc       	sbrc	r0, 7
    161e:	90 58       	subi	r25, 0x80	; 128
    1620:	08 95       	ret
    1622:	3e f0       	brts	.+14     	; 0x1632 <pow+0x80>
    1624:	49 c0       	rjmp	.+146    	; 0x16b8 <__fp_nan>
    1626:	60 e0       	ldi	r22, 0x00	; 0
    1628:	70 e0       	ldi	r23, 0x00	; 0
    162a:	80 e8       	ldi	r24, 0x80	; 128
    162c:	9f e3       	ldi	r25, 0x3F	; 63
    162e:	08 95       	ret
    1630:	4f e7       	ldi	r20, 0x7F	; 127
    1632:	9f 77       	andi	r25, 0x7F	; 127
    1634:	5f 93       	push	r21
    1636:	4f 93       	push	r20
    1638:	3f 93       	push	r19
    163a:	2f 93       	push	r18
    163c:	d0 d0       	rcall	.+416    	; 0x17de <log>
    163e:	2f 91       	pop	r18
    1640:	3f 91       	pop	r19
    1642:	4f 91       	pop	r20
    1644:	5f 91       	pop	r21
    1646:	3e d1       	rcall	.+636    	; 0x18c4 <__mulsf3>
    1648:	05 c0       	rjmp	.+10     	; 0x1654 <exp>
    164a:	19 f4       	brne	.+6      	; 0x1652 <pow+0xa0>
    164c:	0e f0       	brts	.+2      	; 0x1650 <pow+0x9e>
    164e:	2e c0       	rjmp	.+92     	; 0x16ac <__fp_inf>
    1650:	7d c0       	rjmp	.+250    	; 0x174c <__fp_zero>
    1652:	32 c0       	rjmp	.+100    	; 0x16b8 <__fp_nan>

00001654 <exp>:
    1654:	61 d0       	rcall	.+194    	; 0x1718 <__fp_splitA>
    1656:	c8 f3       	brcs	.-14     	; 0x164a <pow+0x98>
    1658:	96 38       	cpi	r25, 0x86	; 134
    165a:	c0 f7       	brcc	.-16     	; 0x164c <pow+0x9a>
    165c:	07 f8       	bld	r0, 7
    165e:	0f 92       	push	r0
    1660:	e8 94       	clt
    1662:	2b e3       	ldi	r18, 0x3B	; 59
    1664:	3a ea       	ldi	r19, 0xAA	; 170
    1666:	48 eb       	ldi	r20, 0xB8	; 184
    1668:	5f e7       	ldi	r21, 0x7F	; 127
    166a:	3a d1       	rcall	.+628    	; 0x18e0 <__mulsf3_pse>
    166c:	0f 92       	push	r0
    166e:	0f 92       	push	r0
    1670:	0f 92       	push	r0
    1672:	4d b7       	in	r20, 0x3d	; 61
    1674:	5e b7       	in	r21, 0x3e	; 62
    1676:	0f 92       	push	r0
    1678:	f2 d0       	rcall	.+484    	; 0x185e <modf>
    167a:	e4 e9       	ldi	r30, 0x94	; 148
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	1f d0       	rcall	.+62     	; 0x16be <__fp_powser>
    1680:	4f 91       	pop	r20
    1682:	5f 91       	pop	r21
    1684:	ef 91       	pop	r30
    1686:	ff 91       	pop	r31
    1688:	e5 95       	asr	r30
    168a:	ee 1f       	adc	r30, r30
    168c:	ff 1f       	adc	r31, r31
    168e:	49 f0       	breq	.+18     	; 0x16a2 <exp+0x4e>
    1690:	fe 57       	subi	r31, 0x7E	; 126
    1692:	e0 68       	ori	r30, 0x80	; 128
    1694:	44 27       	eor	r20, r20
    1696:	ee 0f       	add	r30, r30
    1698:	44 1f       	adc	r20, r20
    169a:	fa 95       	dec	r31
    169c:	e1 f7       	brne	.-8      	; 0x1696 <exp+0x42>
    169e:	41 95       	neg	r20
    16a0:	55 0b       	sbc	r21, r21
    16a2:	64 d0       	rcall	.+200    	; 0x176c <ldexp>
    16a4:	0f 90       	pop	r0
    16a6:	07 fe       	sbrs	r0, 7
    16a8:	58 c0       	rjmp	.+176    	; 0x175a <inverse>
    16aa:	08 95       	ret

000016ac <__fp_inf>:
    16ac:	97 f9       	bld	r25, 7
    16ae:	9f 67       	ori	r25, 0x7F	; 127
    16b0:	80 e8       	ldi	r24, 0x80	; 128
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	60 e0       	ldi	r22, 0x00	; 0
    16b6:	08 95       	ret

000016b8 <__fp_nan>:
    16b8:	9f ef       	ldi	r25, 0xFF	; 255
    16ba:	80 ec       	ldi	r24, 0xC0	; 192
    16bc:	08 95       	ret

000016be <__fp_powser>:
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	1f 93       	push	r17
    16c4:	0f 93       	push	r16
    16c6:	ff 92       	push	r15
    16c8:	ef 92       	push	r14
    16ca:	df 92       	push	r13
    16cc:	7b 01       	movw	r14, r22
    16ce:	8c 01       	movw	r16, r24
    16d0:	68 94       	set
    16d2:	05 c0       	rjmp	.+10     	; 0x16de <__fp_powser+0x20>
    16d4:	da 2e       	mov	r13, r26
    16d6:	ef 01       	movw	r28, r30
    16d8:	01 d1       	rcall	.+514    	; 0x18dc <__mulsf3x>
    16da:	fe 01       	movw	r30, r28
    16dc:	e8 94       	clt
    16de:	a5 91       	lpm	r26, Z+
    16e0:	25 91       	lpm	r18, Z+
    16e2:	35 91       	lpm	r19, Z+
    16e4:	45 91       	lpm	r20, Z+
    16e6:	55 91       	lpm	r21, Z+
    16e8:	ae f3       	brts	.-22     	; 0x16d4 <__fp_powser+0x16>
    16ea:	ef 01       	movw	r28, r30
    16ec:	60 d1       	rcall	.+704    	; 0x19ae <__addsf3x>
    16ee:	fe 01       	movw	r30, r28
    16f0:	97 01       	movw	r18, r14
    16f2:	a8 01       	movw	r20, r16
    16f4:	da 94       	dec	r13
    16f6:	79 f7       	brne	.-34     	; 0x16d6 <__fp_powser+0x18>
    16f8:	df 90       	pop	r13
    16fa:	ef 90       	pop	r14
    16fc:	ff 90       	pop	r15
    16fe:	0f 91       	pop	r16
    1700:	1f 91       	pop	r17
    1702:	cf 91       	pop	r28
    1704:	df 91       	pop	r29
    1706:	08 95       	ret

00001708 <__fp_split3>:
    1708:	57 fd       	sbrc	r21, 7
    170a:	90 58       	subi	r25, 0x80	; 128
    170c:	44 0f       	add	r20, r20
    170e:	55 1f       	adc	r21, r21
    1710:	59 f0       	breq	.+22     	; 0x1728 <__fp_splitA+0x10>
    1712:	5f 3f       	cpi	r21, 0xFF	; 255
    1714:	71 f0       	breq	.+28     	; 0x1732 <__fp_splitA+0x1a>
    1716:	47 95       	ror	r20

00001718 <__fp_splitA>:
    1718:	88 0f       	add	r24, r24
    171a:	97 fb       	bst	r25, 7
    171c:	99 1f       	adc	r25, r25
    171e:	61 f0       	breq	.+24     	; 0x1738 <__fp_splitA+0x20>
    1720:	9f 3f       	cpi	r25, 0xFF	; 255
    1722:	79 f0       	breq	.+30     	; 0x1742 <__fp_splitA+0x2a>
    1724:	87 95       	ror	r24
    1726:	08 95       	ret
    1728:	12 16       	cp	r1, r18
    172a:	13 06       	cpc	r1, r19
    172c:	14 06       	cpc	r1, r20
    172e:	55 1f       	adc	r21, r21
    1730:	f2 cf       	rjmp	.-28     	; 0x1716 <__fp_split3+0xe>
    1732:	46 95       	lsr	r20
    1734:	f1 df       	rcall	.-30     	; 0x1718 <__fp_splitA>
    1736:	08 c0       	rjmp	.+16     	; 0x1748 <__fp_splitA+0x30>
    1738:	16 16       	cp	r1, r22
    173a:	17 06       	cpc	r1, r23
    173c:	18 06       	cpc	r1, r24
    173e:	99 1f       	adc	r25, r25
    1740:	f1 cf       	rjmp	.-30     	; 0x1724 <__fp_splitA+0xc>
    1742:	86 95       	lsr	r24
    1744:	71 05       	cpc	r23, r1
    1746:	61 05       	cpc	r22, r1
    1748:	08 94       	sec
    174a:	08 95       	ret

0000174c <__fp_zero>:
    174c:	e8 94       	clt

0000174e <__fp_szero>:
    174e:	bb 27       	eor	r27, r27
    1750:	66 27       	eor	r22, r22
    1752:	77 27       	eor	r23, r23
    1754:	cb 01       	movw	r24, r22
    1756:	97 f9       	bld	r25, 7
    1758:	08 95       	ret

0000175a <inverse>:
    175a:	9b 01       	movw	r18, r22
    175c:	ac 01       	movw	r20, r24
    175e:	60 e0       	ldi	r22, 0x00	; 0
    1760:	70 e0       	ldi	r23, 0x00	; 0
    1762:	80 e8       	ldi	r24, 0x80	; 128
    1764:	9f e3       	ldi	r25, 0x3F	; 63
    1766:	76 c1       	rjmp	.+748    	; 0x1a54 <__divsf3>
    1768:	a1 cf       	rjmp	.-190    	; 0x16ac <__fp_inf>
    176a:	dc c1       	rjmp	.+952    	; 0x1b24 <__fp_mpack>

0000176c <ldexp>:
    176c:	d5 df       	rcall	.-86     	; 0x1718 <__fp_splitA>
    176e:	e8 f3       	brcs	.-6      	; 0x176a <inverse+0x10>
    1770:	99 23       	and	r25, r25
    1772:	d9 f3       	breq	.-10     	; 0x176a <inverse+0x10>
    1774:	94 0f       	add	r25, r20
    1776:	51 1d       	adc	r21, r1
    1778:	bb f3       	brvs	.-18     	; 0x1768 <inverse+0xe>
    177a:	91 50       	subi	r25, 0x01	; 1
    177c:	50 40       	sbci	r21, 0x00	; 0
    177e:	94 f0       	brlt	.+36     	; 0x17a4 <ldexp+0x38>
    1780:	59 f0       	breq	.+22     	; 0x1798 <ldexp+0x2c>
    1782:	88 23       	and	r24, r24
    1784:	32 f0       	brmi	.+12     	; 0x1792 <ldexp+0x26>
    1786:	66 0f       	add	r22, r22
    1788:	77 1f       	adc	r23, r23
    178a:	88 1f       	adc	r24, r24
    178c:	91 50       	subi	r25, 0x01	; 1
    178e:	50 40       	sbci	r21, 0x00	; 0
    1790:	c1 f7       	brne	.-16     	; 0x1782 <ldexp+0x16>
    1792:	9e 3f       	cpi	r25, 0xFE	; 254
    1794:	51 05       	cpc	r21, r1
    1796:	44 f7       	brge	.-48     	; 0x1768 <inverse+0xe>
    1798:	88 0f       	add	r24, r24
    179a:	91 1d       	adc	r25, r1
    179c:	96 95       	lsr	r25
    179e:	87 95       	ror	r24
    17a0:	97 f9       	bld	r25, 7
    17a2:	08 95       	ret
    17a4:	5f 3f       	cpi	r21, 0xFF	; 255
    17a6:	ac f0       	brlt	.+42     	; 0x17d2 <ldexp+0x66>
    17a8:	98 3e       	cpi	r25, 0xE8	; 232
    17aa:	9c f0       	brlt	.+38     	; 0x17d2 <ldexp+0x66>
    17ac:	bb 27       	eor	r27, r27
    17ae:	86 95       	lsr	r24
    17b0:	77 95       	ror	r23
    17b2:	67 95       	ror	r22
    17b4:	b7 95       	ror	r27
    17b6:	08 f4       	brcc	.+2      	; 0x17ba <ldexp+0x4e>
    17b8:	b1 60       	ori	r27, 0x01	; 1
    17ba:	93 95       	inc	r25
    17bc:	c1 f7       	brne	.-16     	; 0x17ae <ldexp+0x42>
    17be:	bb 0f       	add	r27, r27
    17c0:	58 f7       	brcc	.-42     	; 0x1798 <ldexp+0x2c>
    17c2:	11 f4       	brne	.+4      	; 0x17c8 <ldexp+0x5c>
    17c4:	60 ff       	sbrs	r22, 0
    17c6:	e8 cf       	rjmp	.-48     	; 0x1798 <ldexp+0x2c>
    17c8:	6f 5f       	subi	r22, 0xFF	; 255
    17ca:	7f 4f       	sbci	r23, 0xFF	; 255
    17cc:	8f 4f       	sbci	r24, 0xFF	; 255
    17ce:	9f 4f       	sbci	r25, 0xFF	; 255
    17d0:	e3 cf       	rjmp	.-58     	; 0x1798 <ldexp+0x2c>
    17d2:	bd cf       	rjmp	.-134    	; 0x174e <__fp_szero>
    17d4:	0e f0       	brts	.+2      	; 0x17d8 <ldexp+0x6c>
    17d6:	a6 c1       	rjmp	.+844    	; 0x1b24 <__fp_mpack>
    17d8:	6f cf       	rjmp	.-290    	; 0x16b8 <__fp_nan>
    17da:	68 94       	set
    17dc:	67 cf       	rjmp	.-306    	; 0x16ac <__fp_inf>

000017de <log>:
    17de:	9c df       	rcall	.-200    	; 0x1718 <__fp_splitA>
    17e0:	c8 f3       	brcs	.-14     	; 0x17d4 <ldexp+0x68>
    17e2:	99 23       	and	r25, r25
    17e4:	d1 f3       	breq	.-12     	; 0x17da <ldexp+0x6e>
    17e6:	c6 f3       	brts	.-16     	; 0x17d8 <ldexp+0x6c>
    17e8:	df 93       	push	r29
    17ea:	cf 93       	push	r28
    17ec:	1f 93       	push	r17
    17ee:	0f 93       	push	r16
    17f0:	ff 92       	push	r15
    17f2:	c9 2f       	mov	r28, r25
    17f4:	dd 27       	eor	r29, r29
    17f6:	88 23       	and	r24, r24
    17f8:	2a f0       	brmi	.+10     	; 0x1804 <log+0x26>
    17fa:	21 97       	sbiw	r28, 0x01	; 1
    17fc:	66 0f       	add	r22, r22
    17fe:	77 1f       	adc	r23, r23
    1800:	88 1f       	adc	r24, r24
    1802:	da f7       	brpl	.-10     	; 0x17fa <log+0x1c>
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	40 e8       	ldi	r20, 0x80	; 128
    180a:	5f eb       	ldi	r21, 0xBF	; 191
    180c:	9f e3       	ldi	r25, 0x3F	; 63
    180e:	88 39       	cpi	r24, 0x98	; 152
    1810:	20 f0       	brcs	.+8      	; 0x181a <log+0x3c>
    1812:	80 3e       	cpi	r24, 0xE0	; 224
    1814:	30 f0       	brcs	.+12     	; 0x1822 <log+0x44>
    1816:	21 96       	adiw	r28, 0x01	; 1
    1818:	8f 77       	andi	r24, 0x7F	; 127
    181a:	b8 d0       	rcall	.+368    	; 0x198c <__addsf3>
    181c:	ec eb       	ldi	r30, 0xBC	; 188
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	03 c0       	rjmp	.+6      	; 0x1828 <log+0x4a>
    1822:	b4 d0       	rcall	.+360    	; 0x198c <__addsf3>
    1824:	e9 ee       	ldi	r30, 0xE9	; 233
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	4a df       	rcall	.-364    	; 0x16be <__fp_powser>
    182a:	8b 01       	movw	r16, r22
    182c:	be 01       	movw	r22, r28
    182e:	ec 01       	movw	r28, r24
    1830:	fb 2e       	mov	r15, r27
    1832:	6f 57       	subi	r22, 0x7F	; 127
    1834:	71 09       	sbc	r23, r1
    1836:	75 95       	asr	r23
    1838:	77 1f       	adc	r23, r23
    183a:	88 0b       	sbc	r24, r24
    183c:	99 0b       	sbc	r25, r25
    183e:	56 de       	rcall	.-852    	; 0x14ec <__floatsisf>
    1840:	28 e1       	ldi	r18, 0x18	; 24
    1842:	32 e7       	ldi	r19, 0x72	; 114
    1844:	41 e3       	ldi	r20, 0x31	; 49
    1846:	5f e3       	ldi	r21, 0x3F	; 63
    1848:	49 d0       	rcall	.+146    	; 0x18dc <__mulsf3x>
    184a:	af 2d       	mov	r26, r15
    184c:	98 01       	movw	r18, r16
    184e:	ae 01       	movw	r20, r28
    1850:	ff 90       	pop	r15
    1852:	0f 91       	pop	r16
    1854:	1f 91       	pop	r17
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	a9 d0       	rcall	.+338    	; 0x19ae <__addsf3x>
    185c:	7f c1       	rjmp	.+766    	; 0x1b5c <__fp_round>

0000185e <modf>:
    185e:	fa 01       	movw	r30, r20
    1860:	dc 01       	movw	r26, r24
    1862:	aa 0f       	add	r26, r26
    1864:	bb 1f       	adc	r27, r27
    1866:	9b 01       	movw	r18, r22
    1868:	ac 01       	movw	r20, r24
    186a:	bf 57       	subi	r27, 0x7F	; 127
    186c:	28 f4       	brcc	.+10     	; 0x1878 <modf+0x1a>
    186e:	22 27       	eor	r18, r18
    1870:	33 27       	eor	r19, r19
    1872:	44 27       	eor	r20, r20
    1874:	50 78       	andi	r21, 0x80	; 128
    1876:	1f c0       	rjmp	.+62     	; 0x18b6 <modf+0x58>
    1878:	b7 51       	subi	r27, 0x17	; 23
    187a:	88 f4       	brcc	.+34     	; 0x189e <modf+0x40>
    187c:	ab 2f       	mov	r26, r27
    187e:	00 24       	eor	r0, r0
    1880:	46 95       	lsr	r20
    1882:	37 95       	ror	r19
    1884:	27 95       	ror	r18
    1886:	01 1c       	adc	r0, r1
    1888:	a3 95       	inc	r26
    188a:	d2 f3       	brmi	.-12     	; 0x1880 <modf+0x22>
    188c:	00 20       	and	r0, r0
    188e:	69 f0       	breq	.+26     	; 0x18aa <modf+0x4c>
    1890:	22 0f       	add	r18, r18
    1892:	33 1f       	adc	r19, r19
    1894:	44 1f       	adc	r20, r20
    1896:	b3 95       	inc	r27
    1898:	da f3       	brmi	.-10     	; 0x1890 <modf+0x32>
    189a:	0d d0       	rcall	.+26     	; 0x18b6 <modf+0x58>
    189c:	76 c0       	rjmp	.+236    	; 0x198a <__subsf3>
    189e:	61 30       	cpi	r22, 0x01	; 1
    18a0:	71 05       	cpc	r23, r1
    18a2:	a0 e8       	ldi	r26, 0x80	; 128
    18a4:	8a 07       	cpc	r24, r26
    18a6:	b9 46       	sbci	r27, 0x69	; 105
    18a8:	30 f4       	brcc	.+12     	; 0x18b6 <modf+0x58>
    18aa:	9b 01       	movw	r18, r22
    18ac:	ac 01       	movw	r20, r24
    18ae:	66 27       	eor	r22, r22
    18b0:	77 27       	eor	r23, r23
    18b2:	88 27       	eor	r24, r24
    18b4:	90 78       	andi	r25, 0x80	; 128
    18b6:	30 96       	adiw	r30, 0x00	; 0
    18b8:	21 f0       	breq	.+8      	; 0x18c2 <modf+0x64>
    18ba:	20 83       	st	Z, r18
    18bc:	31 83       	std	Z+1, r19	; 0x01
    18be:	42 83       	std	Z+2, r20	; 0x02
    18c0:	53 83       	std	Z+3, r21	; 0x03
    18c2:	08 95       	ret

000018c4 <__mulsf3>:
    18c4:	0b d0       	rcall	.+22     	; 0x18dc <__mulsf3x>
    18c6:	4a c1       	rjmp	.+660    	; 0x1b5c <__fp_round>
    18c8:	3b d1       	rcall	.+630    	; 0x1b40 <__fp_pscA>
    18ca:	28 f0       	brcs	.+10     	; 0x18d6 <__mulsf3+0x12>
    18cc:	40 d1       	rcall	.+640    	; 0x1b4e <__fp_pscB>
    18ce:	18 f0       	brcs	.+6      	; 0x18d6 <__mulsf3+0x12>
    18d0:	95 23       	and	r25, r21
    18d2:	09 f0       	breq	.+2      	; 0x18d6 <__mulsf3+0x12>
    18d4:	eb ce       	rjmp	.-554    	; 0x16ac <__fp_inf>
    18d6:	f0 ce       	rjmp	.-544    	; 0x16b8 <__fp_nan>
    18d8:	11 24       	eor	r1, r1
    18da:	39 cf       	rjmp	.-398    	; 0x174e <__fp_szero>

000018dc <__mulsf3x>:
    18dc:	15 df       	rcall	.-470    	; 0x1708 <__fp_split3>
    18de:	a0 f3       	brcs	.-24     	; 0x18c8 <__mulsf3+0x4>

000018e0 <__mulsf3_pse>:
    18e0:	95 9f       	mul	r25, r21
    18e2:	d1 f3       	breq	.-12     	; 0x18d8 <__mulsf3+0x14>
    18e4:	95 0f       	add	r25, r21
    18e6:	50 e0       	ldi	r21, 0x00	; 0
    18e8:	55 1f       	adc	r21, r21
    18ea:	62 9f       	mul	r22, r18
    18ec:	f0 01       	movw	r30, r0
    18ee:	72 9f       	mul	r23, r18
    18f0:	bb 27       	eor	r27, r27
    18f2:	f0 0d       	add	r31, r0
    18f4:	b1 1d       	adc	r27, r1
    18f6:	63 9f       	mul	r22, r19
    18f8:	aa 27       	eor	r26, r26
    18fa:	f0 0d       	add	r31, r0
    18fc:	b1 1d       	adc	r27, r1
    18fe:	aa 1f       	adc	r26, r26
    1900:	64 9f       	mul	r22, r20
    1902:	66 27       	eor	r22, r22
    1904:	b0 0d       	add	r27, r0
    1906:	a1 1d       	adc	r26, r1
    1908:	66 1f       	adc	r22, r22
    190a:	82 9f       	mul	r24, r18
    190c:	22 27       	eor	r18, r18
    190e:	b0 0d       	add	r27, r0
    1910:	a1 1d       	adc	r26, r1
    1912:	62 1f       	adc	r22, r18
    1914:	73 9f       	mul	r23, r19
    1916:	b0 0d       	add	r27, r0
    1918:	a1 1d       	adc	r26, r1
    191a:	62 1f       	adc	r22, r18
    191c:	83 9f       	mul	r24, r19
    191e:	a0 0d       	add	r26, r0
    1920:	61 1d       	adc	r22, r1
    1922:	22 1f       	adc	r18, r18
    1924:	74 9f       	mul	r23, r20
    1926:	33 27       	eor	r19, r19
    1928:	a0 0d       	add	r26, r0
    192a:	61 1d       	adc	r22, r1
    192c:	23 1f       	adc	r18, r19
    192e:	84 9f       	mul	r24, r20
    1930:	60 0d       	add	r22, r0
    1932:	21 1d       	adc	r18, r1
    1934:	82 2f       	mov	r24, r18
    1936:	76 2f       	mov	r23, r22
    1938:	6a 2f       	mov	r22, r26
    193a:	11 24       	eor	r1, r1
    193c:	9f 57       	subi	r25, 0x7F	; 127
    193e:	50 40       	sbci	r21, 0x00	; 0
    1940:	8a f0       	brmi	.+34     	; 0x1964 <__mulsf3_pse+0x84>
    1942:	e1 f0       	breq	.+56     	; 0x197c <__mulsf3_pse+0x9c>
    1944:	88 23       	and	r24, r24
    1946:	4a f0       	brmi	.+18     	; 0x195a <__mulsf3_pse+0x7a>
    1948:	ee 0f       	add	r30, r30
    194a:	ff 1f       	adc	r31, r31
    194c:	bb 1f       	adc	r27, r27
    194e:	66 1f       	adc	r22, r22
    1950:	77 1f       	adc	r23, r23
    1952:	88 1f       	adc	r24, r24
    1954:	91 50       	subi	r25, 0x01	; 1
    1956:	50 40       	sbci	r21, 0x00	; 0
    1958:	a9 f7       	brne	.-22     	; 0x1944 <__mulsf3_pse+0x64>
    195a:	9e 3f       	cpi	r25, 0xFE	; 254
    195c:	51 05       	cpc	r21, r1
    195e:	70 f0       	brcs	.+28     	; 0x197c <__mulsf3_pse+0x9c>
    1960:	a5 ce       	rjmp	.-694    	; 0x16ac <__fp_inf>
    1962:	f5 ce       	rjmp	.-534    	; 0x174e <__fp_szero>
    1964:	5f 3f       	cpi	r21, 0xFF	; 255
    1966:	ec f3       	brlt	.-6      	; 0x1962 <__mulsf3_pse+0x82>
    1968:	98 3e       	cpi	r25, 0xE8	; 232
    196a:	dc f3       	brlt	.-10     	; 0x1962 <__mulsf3_pse+0x82>
    196c:	86 95       	lsr	r24
    196e:	77 95       	ror	r23
    1970:	67 95       	ror	r22
    1972:	b7 95       	ror	r27
    1974:	f7 95       	ror	r31
    1976:	e7 95       	ror	r30
    1978:	9f 5f       	subi	r25, 0xFF	; 255
    197a:	c1 f7       	brne	.-16     	; 0x196c <__mulsf3_pse+0x8c>
    197c:	fe 2b       	or	r31, r30
    197e:	88 0f       	add	r24, r24
    1980:	91 1d       	adc	r25, r1
    1982:	96 95       	lsr	r25
    1984:	87 95       	ror	r24
    1986:	97 f9       	bld	r25, 7
    1988:	08 95       	ret

0000198a <__subsf3>:
    198a:	50 58       	subi	r21, 0x80	; 128

0000198c <__addsf3>:
    198c:	bb 27       	eor	r27, r27
    198e:	aa 27       	eor	r26, r26
    1990:	0e d0       	rcall	.+28     	; 0x19ae <__addsf3x>
    1992:	e4 c0       	rjmp	.+456    	; 0x1b5c <__fp_round>
    1994:	d5 d0       	rcall	.+426    	; 0x1b40 <__fp_pscA>
    1996:	30 f0       	brcs	.+12     	; 0x19a4 <__addsf3+0x18>
    1998:	da d0       	rcall	.+436    	; 0x1b4e <__fp_pscB>
    199a:	20 f0       	brcs	.+8      	; 0x19a4 <__addsf3+0x18>
    199c:	31 f4       	brne	.+12     	; 0x19aa <__addsf3+0x1e>
    199e:	9f 3f       	cpi	r25, 0xFF	; 255
    19a0:	11 f4       	brne	.+4      	; 0x19a6 <__addsf3+0x1a>
    19a2:	1e f4       	brtc	.+6      	; 0x19aa <__addsf3+0x1e>
    19a4:	89 ce       	rjmp	.-750    	; 0x16b8 <__fp_nan>
    19a6:	0e f4       	brtc	.+2      	; 0x19aa <__addsf3+0x1e>
    19a8:	e0 95       	com	r30
    19aa:	e7 fb       	bst	r30, 7
    19ac:	7f ce       	rjmp	.-770    	; 0x16ac <__fp_inf>

000019ae <__addsf3x>:
    19ae:	e9 2f       	mov	r30, r25
    19b0:	ab de       	rcall	.-682    	; 0x1708 <__fp_split3>
    19b2:	80 f3       	brcs	.-32     	; 0x1994 <__addsf3+0x8>
    19b4:	ba 17       	cp	r27, r26
    19b6:	62 07       	cpc	r22, r18
    19b8:	73 07       	cpc	r23, r19
    19ba:	84 07       	cpc	r24, r20
    19bc:	95 07       	cpc	r25, r21
    19be:	18 f0       	brcs	.+6      	; 0x19c6 <__addsf3x+0x18>
    19c0:	71 f4       	brne	.+28     	; 0x19de <__addsf3x+0x30>
    19c2:	9e f5       	brtc	.+102    	; 0x1a2a <__addsf3x+0x7c>
    19c4:	c3 ce       	rjmp	.-634    	; 0x174c <__fp_zero>
    19c6:	0e f4       	brtc	.+2      	; 0x19ca <__addsf3x+0x1c>
    19c8:	e0 95       	com	r30
    19ca:	0b 2e       	mov	r0, r27
    19cc:	ba 2f       	mov	r27, r26
    19ce:	a0 2d       	mov	r26, r0
    19d0:	0b 01       	movw	r0, r22
    19d2:	b9 01       	movw	r22, r18
    19d4:	90 01       	movw	r18, r0
    19d6:	0c 01       	movw	r0, r24
    19d8:	ca 01       	movw	r24, r20
    19da:	a0 01       	movw	r20, r0
    19dc:	11 24       	eor	r1, r1
    19de:	ff 27       	eor	r31, r31
    19e0:	59 1b       	sub	r21, r25
    19e2:	99 f0       	breq	.+38     	; 0x1a0a <__addsf3x+0x5c>
    19e4:	59 3f       	cpi	r21, 0xF9	; 249
    19e6:	50 f4       	brcc	.+20     	; 0x19fc <__addsf3x+0x4e>
    19e8:	50 3e       	cpi	r21, 0xE0	; 224
    19ea:	68 f1       	brcs	.+90     	; 0x1a46 <__addsf3x+0x98>
    19ec:	1a 16       	cp	r1, r26
    19ee:	f0 40       	sbci	r31, 0x00	; 0
    19f0:	a2 2f       	mov	r26, r18
    19f2:	23 2f       	mov	r18, r19
    19f4:	34 2f       	mov	r19, r20
    19f6:	44 27       	eor	r20, r20
    19f8:	58 5f       	subi	r21, 0xF8	; 248
    19fa:	f3 cf       	rjmp	.-26     	; 0x19e2 <__addsf3x+0x34>
    19fc:	46 95       	lsr	r20
    19fe:	37 95       	ror	r19
    1a00:	27 95       	ror	r18
    1a02:	a7 95       	ror	r26
    1a04:	f0 40       	sbci	r31, 0x00	; 0
    1a06:	53 95       	inc	r21
    1a08:	c9 f7       	brne	.-14     	; 0x19fc <__addsf3x+0x4e>
    1a0a:	7e f4       	brtc	.+30     	; 0x1a2a <__addsf3x+0x7c>
    1a0c:	1f 16       	cp	r1, r31
    1a0e:	ba 0b       	sbc	r27, r26
    1a10:	62 0b       	sbc	r22, r18
    1a12:	73 0b       	sbc	r23, r19
    1a14:	84 0b       	sbc	r24, r20
    1a16:	ba f0       	brmi	.+46     	; 0x1a46 <__addsf3x+0x98>
    1a18:	91 50       	subi	r25, 0x01	; 1
    1a1a:	a1 f0       	breq	.+40     	; 0x1a44 <__addsf3x+0x96>
    1a1c:	ff 0f       	add	r31, r31
    1a1e:	bb 1f       	adc	r27, r27
    1a20:	66 1f       	adc	r22, r22
    1a22:	77 1f       	adc	r23, r23
    1a24:	88 1f       	adc	r24, r24
    1a26:	c2 f7       	brpl	.-16     	; 0x1a18 <__addsf3x+0x6a>
    1a28:	0e c0       	rjmp	.+28     	; 0x1a46 <__addsf3x+0x98>
    1a2a:	ba 0f       	add	r27, r26
    1a2c:	62 1f       	adc	r22, r18
    1a2e:	73 1f       	adc	r23, r19
    1a30:	84 1f       	adc	r24, r20
    1a32:	48 f4       	brcc	.+18     	; 0x1a46 <__addsf3x+0x98>
    1a34:	87 95       	ror	r24
    1a36:	77 95       	ror	r23
    1a38:	67 95       	ror	r22
    1a3a:	b7 95       	ror	r27
    1a3c:	f7 95       	ror	r31
    1a3e:	9e 3f       	cpi	r25, 0xFE	; 254
    1a40:	08 f0       	brcs	.+2      	; 0x1a44 <__addsf3x+0x96>
    1a42:	b3 cf       	rjmp	.-154    	; 0x19aa <__addsf3+0x1e>
    1a44:	93 95       	inc	r25
    1a46:	88 0f       	add	r24, r24
    1a48:	08 f0       	brcs	.+2      	; 0x1a4c <__addsf3x+0x9e>
    1a4a:	99 27       	eor	r25, r25
    1a4c:	ee 0f       	add	r30, r30
    1a4e:	97 95       	ror	r25
    1a50:	87 95       	ror	r24
    1a52:	08 95       	ret

00001a54 <__divsf3>:
    1a54:	0c d0       	rcall	.+24     	; 0x1a6e <__divsf3x>
    1a56:	82 c0       	rjmp	.+260    	; 0x1b5c <__fp_round>
    1a58:	7a d0       	rcall	.+244    	; 0x1b4e <__fp_pscB>
    1a5a:	40 f0       	brcs	.+16     	; 0x1a6c <__divsf3+0x18>
    1a5c:	71 d0       	rcall	.+226    	; 0x1b40 <__fp_pscA>
    1a5e:	30 f0       	brcs	.+12     	; 0x1a6c <__divsf3+0x18>
    1a60:	21 f4       	brne	.+8      	; 0x1a6a <__divsf3+0x16>
    1a62:	5f 3f       	cpi	r21, 0xFF	; 255
    1a64:	19 f0       	breq	.+6      	; 0x1a6c <__divsf3+0x18>
    1a66:	22 ce       	rjmp	.-956    	; 0x16ac <__fp_inf>
    1a68:	51 11       	cpse	r21, r1
    1a6a:	71 ce       	rjmp	.-798    	; 0x174e <__fp_szero>
    1a6c:	25 ce       	rjmp	.-950    	; 0x16b8 <__fp_nan>

00001a6e <__divsf3x>:
    1a6e:	4c de       	rcall	.-872    	; 0x1708 <__fp_split3>
    1a70:	98 f3       	brcs	.-26     	; 0x1a58 <__divsf3+0x4>

00001a72 <__divsf3_pse>:
    1a72:	99 23       	and	r25, r25
    1a74:	c9 f3       	breq	.-14     	; 0x1a68 <__divsf3+0x14>
    1a76:	55 23       	and	r21, r21
    1a78:	b1 f3       	breq	.-20     	; 0x1a66 <__divsf3+0x12>
    1a7a:	95 1b       	sub	r25, r21
    1a7c:	55 0b       	sbc	r21, r21
    1a7e:	bb 27       	eor	r27, r27
    1a80:	aa 27       	eor	r26, r26
    1a82:	62 17       	cp	r22, r18
    1a84:	73 07       	cpc	r23, r19
    1a86:	84 07       	cpc	r24, r20
    1a88:	38 f0       	brcs	.+14     	; 0x1a98 <__divsf3_pse+0x26>
    1a8a:	9f 5f       	subi	r25, 0xFF	; 255
    1a8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a8e:	22 0f       	add	r18, r18
    1a90:	33 1f       	adc	r19, r19
    1a92:	44 1f       	adc	r20, r20
    1a94:	aa 1f       	adc	r26, r26
    1a96:	a9 f3       	breq	.-22     	; 0x1a82 <__divsf3_pse+0x10>
    1a98:	33 d0       	rcall	.+102    	; 0x1b00 <__divsf3_pse+0x8e>
    1a9a:	0e 2e       	mov	r0, r30
    1a9c:	3a f0       	brmi	.+14     	; 0x1aac <__divsf3_pse+0x3a>
    1a9e:	e0 e8       	ldi	r30, 0x80	; 128
    1aa0:	30 d0       	rcall	.+96     	; 0x1b02 <__divsf3_pse+0x90>
    1aa2:	91 50       	subi	r25, 0x01	; 1
    1aa4:	50 40       	sbci	r21, 0x00	; 0
    1aa6:	e6 95       	lsr	r30
    1aa8:	00 1c       	adc	r0, r0
    1aaa:	ca f7       	brpl	.-14     	; 0x1a9e <__divsf3_pse+0x2c>
    1aac:	29 d0       	rcall	.+82     	; 0x1b00 <__divsf3_pse+0x8e>
    1aae:	fe 2f       	mov	r31, r30
    1ab0:	27 d0       	rcall	.+78     	; 0x1b00 <__divsf3_pse+0x8e>
    1ab2:	66 0f       	add	r22, r22
    1ab4:	77 1f       	adc	r23, r23
    1ab6:	88 1f       	adc	r24, r24
    1ab8:	bb 1f       	adc	r27, r27
    1aba:	26 17       	cp	r18, r22
    1abc:	37 07       	cpc	r19, r23
    1abe:	48 07       	cpc	r20, r24
    1ac0:	ab 07       	cpc	r26, r27
    1ac2:	b0 e8       	ldi	r27, 0x80	; 128
    1ac4:	09 f0       	breq	.+2      	; 0x1ac8 <__divsf3_pse+0x56>
    1ac6:	bb 0b       	sbc	r27, r27
    1ac8:	80 2d       	mov	r24, r0
    1aca:	bf 01       	movw	r22, r30
    1acc:	ff 27       	eor	r31, r31
    1ace:	93 58       	subi	r25, 0x83	; 131
    1ad0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ad2:	2a f0       	brmi	.+10     	; 0x1ade <__divsf3_pse+0x6c>
    1ad4:	9e 3f       	cpi	r25, 0xFE	; 254
    1ad6:	51 05       	cpc	r21, r1
    1ad8:	68 f0       	brcs	.+26     	; 0x1af4 <__divsf3_pse+0x82>
    1ada:	e8 cd       	rjmp	.-1072   	; 0x16ac <__fp_inf>
    1adc:	38 ce       	rjmp	.-912    	; 0x174e <__fp_szero>
    1ade:	5f 3f       	cpi	r21, 0xFF	; 255
    1ae0:	ec f3       	brlt	.-6      	; 0x1adc <__divsf3_pse+0x6a>
    1ae2:	98 3e       	cpi	r25, 0xE8	; 232
    1ae4:	dc f3       	brlt	.-10     	; 0x1adc <__divsf3_pse+0x6a>
    1ae6:	86 95       	lsr	r24
    1ae8:	77 95       	ror	r23
    1aea:	67 95       	ror	r22
    1aec:	b7 95       	ror	r27
    1aee:	f7 95       	ror	r31
    1af0:	9f 5f       	subi	r25, 0xFF	; 255
    1af2:	c9 f7       	brne	.-14     	; 0x1ae6 <__divsf3_pse+0x74>
    1af4:	88 0f       	add	r24, r24
    1af6:	91 1d       	adc	r25, r1
    1af8:	96 95       	lsr	r25
    1afa:	87 95       	ror	r24
    1afc:	97 f9       	bld	r25, 7
    1afe:	08 95       	ret
    1b00:	e1 e0       	ldi	r30, 0x01	; 1
    1b02:	66 0f       	add	r22, r22
    1b04:	77 1f       	adc	r23, r23
    1b06:	88 1f       	adc	r24, r24
    1b08:	bb 1f       	adc	r27, r27
    1b0a:	62 17       	cp	r22, r18
    1b0c:	73 07       	cpc	r23, r19
    1b0e:	84 07       	cpc	r24, r20
    1b10:	ba 07       	cpc	r27, r26
    1b12:	20 f0       	brcs	.+8      	; 0x1b1c <__divsf3_pse+0xaa>
    1b14:	62 1b       	sub	r22, r18
    1b16:	73 0b       	sbc	r23, r19
    1b18:	84 0b       	sbc	r24, r20
    1b1a:	ba 0b       	sbc	r27, r26
    1b1c:	ee 1f       	adc	r30, r30
    1b1e:	88 f7       	brcc	.-30     	; 0x1b02 <__divsf3_pse+0x90>
    1b20:	e0 95       	com	r30
    1b22:	08 95       	ret

00001b24 <__fp_mpack>:
    1b24:	9f 3f       	cpi	r25, 0xFF	; 255
    1b26:	31 f0       	breq	.+12     	; 0x1b34 <__fp_mpack_finite+0xc>

00001b28 <__fp_mpack_finite>:
    1b28:	91 50       	subi	r25, 0x01	; 1
    1b2a:	20 f4       	brcc	.+8      	; 0x1b34 <__fp_mpack_finite+0xc>
    1b2c:	87 95       	ror	r24
    1b2e:	77 95       	ror	r23
    1b30:	67 95       	ror	r22
    1b32:	b7 95       	ror	r27
    1b34:	88 0f       	add	r24, r24
    1b36:	91 1d       	adc	r25, r1
    1b38:	96 95       	lsr	r25
    1b3a:	87 95       	ror	r24
    1b3c:	97 f9       	bld	r25, 7
    1b3e:	08 95       	ret

00001b40 <__fp_pscA>:
    1b40:	00 24       	eor	r0, r0
    1b42:	0a 94       	dec	r0
    1b44:	16 16       	cp	r1, r22
    1b46:	17 06       	cpc	r1, r23
    1b48:	18 06       	cpc	r1, r24
    1b4a:	09 06       	cpc	r0, r25
    1b4c:	08 95       	ret

00001b4e <__fp_pscB>:
    1b4e:	00 24       	eor	r0, r0
    1b50:	0a 94       	dec	r0
    1b52:	12 16       	cp	r1, r18
    1b54:	13 06       	cpc	r1, r19
    1b56:	14 06       	cpc	r1, r20
    1b58:	05 06       	cpc	r0, r21
    1b5a:	08 95       	ret

00001b5c <__fp_round>:
    1b5c:	09 2e       	mov	r0, r25
    1b5e:	03 94       	inc	r0
    1b60:	00 0c       	add	r0, r0
    1b62:	11 f4       	brne	.+4      	; 0x1b68 <__fp_round+0xc>
    1b64:	88 23       	and	r24, r24
    1b66:	52 f0       	brmi	.+20     	; 0x1b7c <__fp_round+0x20>
    1b68:	bb 0f       	add	r27, r27
    1b6a:	40 f4       	brcc	.+16     	; 0x1b7c <__fp_round+0x20>
    1b6c:	bf 2b       	or	r27, r31
    1b6e:	11 f4       	brne	.+4      	; 0x1b74 <__fp_round+0x18>
    1b70:	60 ff       	sbrs	r22, 0
    1b72:	04 c0       	rjmp	.+8      	; 0x1b7c <__fp_round+0x20>
    1b74:	6f 5f       	subi	r22, 0xFF	; 255
    1b76:	7f 4f       	sbci	r23, 0xFF	; 255
    1b78:	8f 4f       	sbci	r24, 0xFF	; 255
    1b7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b7c:	08 95       	ret

00001b7e <__udivmodsi4>:
    1b7e:	a1 e2       	ldi	r26, 0x21	; 33
    1b80:	1a 2e       	mov	r1, r26
    1b82:	aa 1b       	sub	r26, r26
    1b84:	bb 1b       	sub	r27, r27
    1b86:	fd 01       	movw	r30, r26
    1b88:	0d c0       	rjmp	.+26     	; 0x1ba4 <__udivmodsi4_ep>

00001b8a <__udivmodsi4_loop>:
    1b8a:	aa 1f       	adc	r26, r26
    1b8c:	bb 1f       	adc	r27, r27
    1b8e:	ee 1f       	adc	r30, r30
    1b90:	ff 1f       	adc	r31, r31
    1b92:	a2 17       	cp	r26, r18
    1b94:	b3 07       	cpc	r27, r19
    1b96:	e4 07       	cpc	r30, r20
    1b98:	f5 07       	cpc	r31, r21
    1b9a:	20 f0       	brcs	.+8      	; 0x1ba4 <__udivmodsi4_ep>
    1b9c:	a2 1b       	sub	r26, r18
    1b9e:	b3 0b       	sbc	r27, r19
    1ba0:	e4 0b       	sbc	r30, r20
    1ba2:	f5 0b       	sbc	r31, r21

00001ba4 <__udivmodsi4_ep>:
    1ba4:	66 1f       	adc	r22, r22
    1ba6:	77 1f       	adc	r23, r23
    1ba8:	88 1f       	adc	r24, r24
    1baa:	99 1f       	adc	r25, r25
    1bac:	1a 94       	dec	r1
    1bae:	69 f7       	brne	.-38     	; 0x1b8a <__udivmodsi4_loop>
    1bb0:	60 95       	com	r22
    1bb2:	70 95       	com	r23
    1bb4:	80 95       	com	r24
    1bb6:	90 95       	com	r25
    1bb8:	9b 01       	movw	r18, r22
    1bba:	ac 01       	movw	r20, r24
    1bbc:	bd 01       	movw	r22, r26
    1bbe:	cf 01       	movw	r24, r30
    1bc0:	08 95       	ret

00001bc2 <__tablejump2__>:
    1bc2:	ee 0f       	add	r30, r30
    1bc4:	ff 1f       	adc	r31, r31
    1bc6:	05 90       	lpm	r0, Z+
    1bc8:	f4 91       	lpm	r31, Z
    1bca:	e0 2d       	mov	r30, r0
    1bcc:	09 94       	ijmp

00001bce <atoi>:
    1bce:	fc 01       	movw	r30, r24
    1bd0:	88 27       	eor	r24, r24
    1bd2:	99 27       	eor	r25, r25
    1bd4:	e8 94       	clt
    1bd6:	21 91       	ld	r18, Z+
    1bd8:	20 32       	cpi	r18, 0x20	; 32
    1bda:	e9 f3       	breq	.-6      	; 0x1bd6 <atoi+0x8>
    1bdc:	29 30       	cpi	r18, 0x09	; 9
    1bde:	10 f0       	brcs	.+4      	; 0x1be4 <atoi+0x16>
    1be0:	2e 30       	cpi	r18, 0x0E	; 14
    1be2:	c8 f3       	brcs	.-14     	; 0x1bd6 <atoi+0x8>
    1be4:	2b 32       	cpi	r18, 0x2B	; 43
    1be6:	39 f0       	breq	.+14     	; 0x1bf6 <atoi+0x28>
    1be8:	2d 32       	cpi	r18, 0x2D	; 45
    1bea:	31 f4       	brne	.+12     	; 0x1bf8 <atoi+0x2a>
    1bec:	68 94       	set
    1bee:	03 c0       	rjmp	.+6      	; 0x1bf6 <atoi+0x28>
    1bf0:	4d d0       	rcall	.+154    	; 0x1c8c <__mulhi_const_10>
    1bf2:	82 0f       	add	r24, r18
    1bf4:	91 1d       	adc	r25, r1
    1bf6:	21 91       	ld	r18, Z+
    1bf8:	20 53       	subi	r18, 0x30	; 48
    1bfa:	2a 30       	cpi	r18, 0x0A	; 10
    1bfc:	c8 f3       	brcs	.-14     	; 0x1bf0 <atoi+0x22>
    1bfe:	1e f4       	brtc	.+6      	; 0x1c06 <atoi+0x38>
    1c00:	90 95       	com	r25
    1c02:	81 95       	neg	r24
    1c04:	9f 4f       	sbci	r25, 0xFF	; 255
    1c06:	08 95       	ret

00001c08 <memcpy>:
    1c08:	fb 01       	movw	r30, r22
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	02 c0       	rjmp	.+4      	; 0x1c12 <memcpy+0xa>
    1c0e:	01 90       	ld	r0, Z+
    1c10:	0d 92       	st	X+, r0
    1c12:	41 50       	subi	r20, 0x01	; 1
    1c14:	50 40       	sbci	r21, 0x00	; 0
    1c16:	d8 f7       	brcc	.-10     	; 0x1c0e <memcpy+0x6>
    1c18:	08 95       	ret

00001c1a <strcat>:
    1c1a:	fb 01       	movw	r30, r22
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	0d 90       	ld	r0, X+
    1c20:	00 20       	and	r0, r0
    1c22:	e9 f7       	brne	.-6      	; 0x1c1e <strcat+0x4>
    1c24:	11 97       	sbiw	r26, 0x01	; 1
    1c26:	01 90       	ld	r0, Z+
    1c28:	0d 92       	st	X+, r0
    1c2a:	00 20       	and	r0, r0
    1c2c:	e1 f7       	brne	.-8      	; 0x1c26 <strcat+0xc>
    1c2e:	08 95       	ret

00001c30 <strstr>:
    1c30:	fb 01       	movw	r30, r22
    1c32:	51 91       	ld	r21, Z+
    1c34:	55 23       	and	r21, r21
    1c36:	a9 f0       	breq	.+42     	; 0x1c62 <strstr+0x32>
    1c38:	bf 01       	movw	r22, r30
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	4d 91       	ld	r20, X+
    1c3e:	45 17       	cp	r20, r21
    1c40:	41 11       	cpse	r20, r1
    1c42:	e1 f7       	brne	.-8      	; 0x1c3c <strstr+0xc>
    1c44:	59 f4       	brne	.+22     	; 0x1c5c <strstr+0x2c>
    1c46:	cd 01       	movw	r24, r26
    1c48:	01 90       	ld	r0, Z+
    1c4a:	00 20       	and	r0, r0
    1c4c:	49 f0       	breq	.+18     	; 0x1c60 <strstr+0x30>
    1c4e:	4d 91       	ld	r20, X+
    1c50:	40 15       	cp	r20, r0
    1c52:	41 11       	cpse	r20, r1
    1c54:	c9 f3       	breq	.-14     	; 0x1c48 <strstr+0x18>
    1c56:	fb 01       	movw	r30, r22
    1c58:	41 11       	cpse	r20, r1
    1c5a:	ef cf       	rjmp	.-34     	; 0x1c3a <strstr+0xa>
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	08 95       	ret

00001c64 <itoa>:
    1c64:	45 32       	cpi	r20, 0x25	; 37
    1c66:	51 05       	cpc	r21, r1
    1c68:	18 f4       	brcc	.+6      	; 0x1c70 <itoa+0xc>
    1c6a:	42 30       	cpi	r20, 0x02	; 2
    1c6c:	08 f0       	brcs	.+2      	; 0x1c70 <itoa+0xc>
    1c6e:	04 c0       	rjmp	.+8      	; 0x1c78 <__itoa_ncheck>
    1c70:	fb 01       	movw	r30, r22
    1c72:	10 82       	st	Z, r1
    1c74:	cb 01       	movw	r24, r22
    1c76:	08 95       	ret

00001c78 <__itoa_ncheck>:
    1c78:	bb 27       	eor	r27, r27
    1c7a:	4a 30       	cpi	r20, 0x0A	; 10
    1c7c:	31 f4       	brne	.+12     	; 0x1c8a <__itoa_ncheck+0x12>
    1c7e:	99 23       	and	r25, r25
    1c80:	22 f4       	brpl	.+8      	; 0x1c8a <__itoa_ncheck+0x12>
    1c82:	bd e2       	ldi	r27, 0x2D	; 45
    1c84:	90 95       	com	r25
    1c86:	81 95       	neg	r24
    1c88:	9f 4f       	sbci	r25, 0xFF	; 255
    1c8a:	09 c0       	rjmp	.+18     	; 0x1c9e <__utoa_common>

00001c8c <__mulhi_const_10>:
    1c8c:	7a e0       	ldi	r23, 0x0A	; 10
    1c8e:	97 9f       	mul	r25, r23
    1c90:	90 2d       	mov	r25, r0
    1c92:	87 9f       	mul	r24, r23
    1c94:	80 2d       	mov	r24, r0
    1c96:	91 0d       	add	r25, r1
    1c98:	11 24       	eor	r1, r1
    1c9a:	08 95       	ret

00001c9c <__utoa_ncheck>:
    1c9c:	bb 27       	eor	r27, r27

00001c9e <__utoa_common>:
    1c9e:	fb 01       	movw	r30, r22
    1ca0:	55 27       	eor	r21, r21
    1ca2:	aa 27       	eor	r26, r26
    1ca4:	88 0f       	add	r24, r24
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	aa 1f       	adc	r26, r26
    1caa:	a4 17       	cp	r26, r20
    1cac:	10 f0       	brcs	.+4      	; 0x1cb2 <__utoa_common+0x14>
    1cae:	a4 1b       	sub	r26, r20
    1cb0:	83 95       	inc	r24
    1cb2:	50 51       	subi	r21, 0x10	; 16
    1cb4:	b9 f7       	brne	.-18     	; 0x1ca4 <__utoa_common+0x6>
    1cb6:	a0 5d       	subi	r26, 0xD0	; 208
    1cb8:	aa 33       	cpi	r26, 0x3A	; 58
    1cba:	08 f0       	brcs	.+2      	; 0x1cbe <__utoa_common+0x20>
    1cbc:	a9 5d       	subi	r26, 0xD9	; 217
    1cbe:	a1 93       	st	Z+, r26
    1cc0:	00 97       	sbiw	r24, 0x00	; 0
    1cc2:	79 f7       	brne	.-34     	; 0x1ca2 <__utoa_common+0x4>
    1cc4:	b1 11       	cpse	r27, r1
    1cc6:	b1 93       	st	Z+, r27
    1cc8:	11 92       	st	Z+, r1
    1cca:	cb 01       	movw	r24, r22
    1ccc:	00 c0       	rjmp	.+0      	; 0x1cce <strrev>

00001cce <strrev>:
    1cce:	dc 01       	movw	r26, r24
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	67 2f       	mov	r22, r23
    1cd4:	71 91       	ld	r23, Z+
    1cd6:	77 23       	and	r23, r23
    1cd8:	e1 f7       	brne	.-8      	; 0x1cd2 <strrev+0x4>
    1cda:	32 97       	sbiw	r30, 0x02	; 2
    1cdc:	04 c0       	rjmp	.+8      	; 0x1ce6 <strrev+0x18>
    1cde:	7c 91       	ld	r23, X
    1ce0:	6d 93       	st	X+, r22
    1ce2:	70 83       	st	Z, r23
    1ce4:	62 91       	ld	r22, -Z
    1ce6:	ae 17       	cp	r26, r30
    1ce8:	bf 07       	cpc	r27, r31
    1cea:	c8 f3       	brcs	.-14     	; 0x1cde <strrev+0x10>
    1cec:	08 95       	ret

00001cee <_exit>:
    1cee:	f8 94       	cli

00001cf0 <__stop_program>:
    1cf0:	ff cf       	rjmp	.-2      	; 0x1cf0 <__stop_program>
