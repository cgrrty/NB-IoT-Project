
NB_IOT_MEGA324PA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000035c  00800100  00001b3a  00001bce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000124  0080045c  0080045c  00001f2a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f8  00000000  00000000  00001f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005202  00000000  00000000  00002294  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000192a  00000000  00000000  00007496  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000033b0  00000000  00000000  00008dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b48  00000000  00000000  0000c170  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00015130  00000000  00000000  0000ccb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003fbd  00000000  00000000  00021de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  00025da5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00005e33  00000000  00000000  00026065  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
       2:	00 00       	nop
       4:	63 c0       	rjmp	.+198    	; 0xcc <__bad_interrupt>
       6:	00 00       	nop
       8:	61 c0       	rjmp	.+194    	; 0xcc <__bad_interrupt>
       a:	00 00       	nop
       c:	5f c0       	rjmp	.+190    	; 0xcc <__bad_interrupt>
       e:	00 00       	nop
      10:	5d c0       	rjmp	.+186    	; 0xcc <__bad_interrupt>
      12:	00 00       	nop
      14:	5b c0       	rjmp	.+182    	; 0xcc <__bad_interrupt>
      16:	00 00       	nop
      18:	59 c0       	rjmp	.+178    	; 0xcc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	57 c0       	rjmp	.+174    	; 0xcc <__bad_interrupt>
      1e:	00 00       	nop
      20:	5d c5       	rjmp	.+2746   	; 0xadc <__vector_8>
      22:	00 00       	nop
      24:	53 c0       	rjmp	.+166    	; 0xcc <__bad_interrupt>
      26:	00 00       	nop
      28:	51 c0       	rjmp	.+162    	; 0xcc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4f c0       	rjmp	.+158    	; 0xcc <__bad_interrupt>
      2e:	00 00       	nop
      30:	4d c0       	rjmp	.+154    	; 0xcc <__bad_interrupt>
      32:	00 00       	nop
      34:	4b c0       	rjmp	.+150    	; 0xcc <__bad_interrupt>
      36:	00 00       	nop
      38:	49 c0       	rjmp	.+146    	; 0xcc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	47 c0       	rjmp	.+142    	; 0xcc <__bad_interrupt>
      3e:	00 00       	nop
      40:	45 c0       	rjmp	.+138    	; 0xcc <__bad_interrupt>
      42:	00 00       	nop
      44:	43 c0       	rjmp	.+134    	; 0xcc <__bad_interrupt>
      46:	00 00       	nop
      48:	41 c0       	rjmp	.+130    	; 0xcc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3f c0       	rjmp	.+126    	; 0xcc <__bad_interrupt>
      4e:	00 00       	nop
      50:	09 c5       	rjmp	.+2578   	; 0xa64 <__vector_20>
      52:	00 00       	nop
      54:	3b c0       	rjmp	.+118    	; 0xcc <__bad_interrupt>
      56:	00 00       	nop
      58:	39 c0       	rjmp	.+114    	; 0xcc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	37 c0       	rjmp	.+110    	; 0xcc <__bad_interrupt>
      5e:	00 00       	nop
      60:	35 c0       	rjmp	.+106    	; 0xcc <__bad_interrupt>
      62:	00 00       	nop
      64:	33 c0       	rjmp	.+102    	; 0xcc <__bad_interrupt>
      66:	00 00       	nop
      68:	31 c0       	rjmp	.+98     	; 0xcc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2f c0       	rjmp	.+94     	; 0xcc <__bad_interrupt>
      6e:	00 00       	nop
      70:	2d c0       	rjmp	.+90     	; 0xcc <__bad_interrupt>
      72:	00 00       	nop
      74:	2b c0       	rjmp	.+86     	; 0xcc <__bad_interrupt>
      76:	00 00       	nop
      78:	29 c0       	rjmp	.+82     	; 0xcc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fd 05       	cpc	r31, r13
      7e:	01 06       	cpc	r0, r17
      80:	78 06       	cpc	r7, r24
      82:	95 06       	cpc	r9, r21
      84:	bf 06       	cpc	r11, r31
      86:	c4 06       	cpc	r12, r20
      88:	dc 06       	cpc	r13, r28
      8a:	25 07       	cpc	r18, r21
      8c:	28 07       	cpc	r18, r24
      8e:	2b 07       	cpc	r18, r27
      90:	2f 07       	cpc	r18, r31
      92:	33 07       	cpc	r19, r19

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d8 e0       	ldi	r29, 0x08	; 8
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	14 e0       	ldi	r17, 0x04	; 4
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	ea e3       	ldi	r30, 0x3A	; 58
      a8:	fb e1       	ldi	r31, 0x1B	; 27
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0
      b0:	ac 35       	cpi	r26, 0x5C	; 92
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>

000000b6 <__do_clear_bss>:
      b6:	25 e0       	ldi	r18, 0x05	; 5
      b8:	ac e5       	ldi	r26, 0x5C	; 92
      ba:	b4 e0       	ldi	r27, 0x04	; 4
      bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
      be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
      c0:	a0 38       	cpi	r26, 0x80	; 128
      c2:	b2 07       	cpc	r27, r18
      c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
      c6:	0c d7       	rcall	.+3608   	; 0xee0 <main>
      c8:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <_exit>

000000cc <__bad_interrupt>:
      cc:	99 cf       	rjmp	.-206    	; 0x0 <__vectors>

000000ce <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
      ce:	cf 93       	push	r28
      d0:	df 93       	push	r29
      d2:	1f 92       	push	r1
      d4:	cd b7       	in	r28, 0x3d	; 61
      d6:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
      d8:	9f b7       	in	r25, 0x3f	; 63
      da:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
      dc:	f8 94       	cli
	return flags;
      de:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
      e0:	82 30       	cpi	r24, 0x02	; 2
      e2:	40 f4       	brcc	.+16     	; 0xf4 <sysclk_enable_module+0x26>
		*(reg + port)  &= ~id;
      e4:	e8 2f       	mov	r30, r24
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	ec 59       	subi	r30, 0x9C	; 156
      ea:	ff 4f       	sbci	r31, 0xFF	; 255
      ec:	60 95       	com	r22
      ee:	80 81       	ld	r24, Z
      f0:	68 23       	and	r22, r24
      f2:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
      f4:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
      f6:	0f 90       	pop	r0
      f8:	df 91       	pop	r29
      fa:	cf 91       	pop	r28
      fc:	08 95       	ret

000000fe <usart_putchar>:
	}

	if (baud_offset != USART_BAUD_UNDEFINED) {
		usart->UBRR = baudctrl;
	}
}
      fe:	fc 01       	movw	r30, r24
     100:	90 81       	ld	r25, Z
     102:	95 ff       	sbrs	r25, 5
     104:	fd cf       	rjmp	.-6      	; 0x100 <usart_putchar+0x2>
     106:	66 83       	std	Z+6, r22	; 0x06
     108:	80 e0       	ldi	r24, 0x00	; 0
     10a:	08 95       	ret

0000010c <usart_getchar>:
     10c:	fc 01       	movw	r30, r24
     10e:	90 81       	ld	r25, Z
     110:	99 23       	and	r25, r25
     112:	ec f7       	brge	.-6      	; 0x10e <usart_getchar+0x2>
     114:	86 81       	ldd	r24, Z+6	; 0x06
     116:	08 95       	ret

00000118 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     118:	4f 92       	push	r4
     11a:	5f 92       	push	r5
     11c:	6f 92       	push	r6
     11e:	7f 92       	push	r7
     120:	8f 92       	push	r8
     122:	9f 92       	push	r9
     124:	af 92       	push	r10
     126:	bf 92       	push	r11
     128:	cf 92       	push	r12
     12a:	df 92       	push	r13
     12c:	ef 92       	push	r14
     12e:	ff 92       	push	r15
     130:	0f 93       	push	r16
     132:	1f 93       	push	r17
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
     138:	ec 01       	movw	r28, r24
     13a:	6a 01       	movw	r12, r20
     13c:	7b 01       	movw	r14, r22

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
     13e:	28 01       	movw	r4, r16
     140:	39 01       	movw	r6, r18
     142:	68 94       	set
     144:	12 f8       	bld	r1, 2
     146:	76 94       	lsr	r7
     148:	67 94       	ror	r6
     14a:	57 94       	ror	r5
     14c:	47 94       	ror	r4
     14e:	16 94       	lsr	r1
     150:	d1 f7       	brne	.-12     	; 0x146 <usart_set_baudrate+0x2e>
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;

	if (usart->UCSRnA & USART_U2X_bm) {
     152:	88 81       	ld	r24, Y
     154:	81 fd       	sbrc	r24, 1
     156:	0e c0       	rjmp	.+28     	; 0x174 <usart_set_baudrate+0x5c>
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;
     158:	48 01       	movw	r8, r16
     15a:	59 01       	movw	r10, r18
     15c:	07 2e       	mov	r0, r23
     15e:	73 e1       	ldi	r23, 0x13	; 19
     160:	b6 94       	lsr	r11
     162:	a7 94       	ror	r10
     164:	97 94       	ror	r9
     166:	87 94       	ror	r8
     168:	7a 95       	dec	r23
     16a:	d1 f7       	brne	.-12     	; 0x160 <usart_set_baudrate+0x48>
     16c:	70 2d       	mov	r23, r0

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
     16e:	d3 01       	movw	r26, r6
     170:	c2 01       	movw	r24, r4
     172:	15 c0       	rjmp	.+42     	; 0x19e <usart_set_baudrate+0x86>
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;

	if (usart->UCSRnA & USART_U2X_bm) {
		max_rate /= 2;
     174:	d9 01       	movw	r26, r18
     176:	c8 01       	movw	r24, r16
     178:	68 94       	set
     17a:	13 f8       	bld	r1, 3
     17c:	b6 95       	lsr	r27
     17e:	a7 95       	ror	r26
     180:	97 95       	ror	r25
     182:	87 95       	ror	r24
     184:	16 94       	lsr	r1
     186:	d1 f7       	brne	.-12     	; 0x17c <usart_set_baudrate+0x64>
		min_rate /= 2;
     188:	48 01       	movw	r8, r16
     18a:	59 01       	movw	r10, r18
     18c:	07 2e       	mov	r0, r23
     18e:	74 e1       	ldi	r23, 0x14	; 20
     190:	b6 94       	lsr	r11
     192:	a7 94       	ror	r10
     194:	97 94       	ror	r9
     196:	87 94       	ror	r8
     198:	7a 95       	dec	r23
     19a:	d1 f7       	brne	.-12     	; 0x190 <usart_set_baudrate+0x78>
     19c:	70 2d       	mov	r23, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     19e:	8c 15       	cp	r24, r12
     1a0:	9d 05       	cpc	r25, r13
     1a2:	ae 05       	cpc	r26, r14
     1a4:	bf 05       	cpc	r27, r15
     1a6:	78 f1       	brcs	.+94     	; 0x206 <usart_set_baudrate+0xee>
     1a8:	c8 14       	cp	r12, r8
     1aa:	d9 04       	cpc	r13, r9
     1ac:	ea 04       	cpc	r14, r10
     1ae:	fb 04       	cpc	r15, r11
     1b0:	60 f1       	brcs	.+88     	; 0x20a <usart_set_baudrate+0xf2>
		return false;
	}

	/* Check if double speed is enabled. */
	if (usart->UCSRnA & USART_U2X_bm) {
     1b2:	88 81       	ld	r24, Y
     1b4:	81 ff       	sbrs	r24, 1
     1b6:	10 c0       	rjmp	.+32     	; 0x1d8 <usart_set_baudrate+0xc0>
		baud *= 2;
		ubrr = (uint32_t)(cpu_hz / 8 / baud) - 1;
     1b8:	a7 01       	movw	r20, r14
     1ba:	96 01       	movw	r18, r12
     1bc:	22 0f       	add	r18, r18
     1be:	33 1f       	adc	r19, r19
     1c0:	44 1f       	adc	r20, r20
     1c2:	55 1f       	adc	r21, r21
     1c4:	c3 01       	movw	r24, r6
     1c6:	b2 01       	movw	r22, r4
     1c8:	0e 94 cd 0c 	call	0x199a	; 0x199a <__udivmodsi4>
     1cc:	da 01       	movw	r26, r20
     1ce:	c9 01       	movw	r24, r18
     1d0:	01 97       	sbiw	r24, 0x01	; 1
     1d2:	a1 09       	sbc	r26, r1
     1d4:	b1 09       	sbc	r27, r1
     1d6:	13 c0       	rjmp	.+38     	; 0x1fe <usart_set_baudrate+0xe6>
	} else {
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
     1d8:	c9 01       	movw	r24, r18
     1da:	b8 01       	movw	r22, r16
     1dc:	68 94       	set
     1de:	13 f8       	bld	r1, 3
     1e0:	96 95       	lsr	r25
     1e2:	87 95       	ror	r24
     1e4:	77 95       	ror	r23
     1e6:	67 95       	ror	r22
     1e8:	16 94       	lsr	r1
     1ea:	d1 f7       	brne	.-12     	; 0x1e0 <usart_set_baudrate+0xc8>
     1ec:	a7 01       	movw	r20, r14
     1ee:	96 01       	movw	r18, r12
     1f0:	0e 94 cd 0c 	call	0x199a	; 0x199a <__udivmodsi4>
     1f4:	da 01       	movw	r26, r20
     1f6:	c9 01       	movw	r24, r18
     1f8:	01 97       	sbiw	r24, 0x01	; 1
     1fa:	a1 09       	sbc	r26, r1
     1fc:	b1 09       	sbc	r27, r1
	}

	usart->UBRR = ubrr;
     1fe:	9d 83       	std	Y+5, r25	; 0x05
     200:	8c 83       	std	Y+4, r24	; 0x04
	return true;
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	03 c0       	rjmp	.+6      	; 0x20c <usart_set_baudrate+0xf4>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	01 c0       	rjmp	.+2      	; 0x20c <usart_set_baudrate+0xf4>
     20a:	80 e0       	ldi	r24, 0x00	; 0
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
	}

	usart->UBRR = ubrr;
	return true;
}
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	1f 91       	pop	r17
     212:	0f 91       	pop	r16
     214:	ff 90       	pop	r15
     216:	ef 90       	pop	r14
     218:	df 90       	pop	r13
     21a:	cf 90       	pop	r12
     21c:	bf 90       	pop	r11
     21e:	af 90       	pop	r10
     220:	9f 90       	pop	r9
     222:	8f 90       	pop	r8
     224:	7f 90       	pop	r7
     226:	6f 90       	pop	r6
     228:	5f 90       	pop	r5
     22a:	4f 90       	pop	r4
     22c:	08 95       	ret

0000022e <usart_init_rs232>:
 *
 * \retval true if the initialization was successful
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     22e:	0f 93       	push	r16
     230:	1f 93       	push	r17
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
     236:	ec 01       	movw	r28, r24
     238:	8b 01       	movw	r16, r22
 * \brief usart Pointer to an USART module.
 */
static inline void usart_enable_module_clock(USART_t *usart)
{
#ifdef USART0
	if ((uintptr_t)usart == (uintptr_t)&UCSR0A) {
     23a:	80 3c       	cpi	r24, 0xC0	; 192
     23c:	91 05       	cpc	r25, r1
     23e:	19 f4       	brne	.+6      	; 0x246 <usart_init_rs232+0x18>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
     240:	62 e0       	ldi	r22, 0x02	; 2
     242:	80 e0       	ldi	r24, 0x00	; 0
     244:	44 df       	rcall	.-376    	; 0xce <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_UMSEL01_gm)) | usartmode;
     246:	8a 81       	ldd	r24, Y+2	; 0x02
     248:	8f 73       	andi	r24, 0x3F	; 63
     24a:	8a 83       	std	Y+2, r24	; 0x02
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
	bool result;
	usart_enable_module_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
     24c:	f8 01       	movw	r30, r16
     24e:	26 81       	ldd	r18, Z+6	; 0x06
     250:	35 81       	ldd	r19, Z+5	; 0x05
     252:	84 81       	ldd	r24, Z+4	; 0x04
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->UCSRnC
		= ((usart)->UCSRnC &
     254:	9a 81       	ldd	r25, Y+2	; 0x02
     256:	48 2f       	mov	r20, r24
     258:	43 70       	andi	r20, 0x03	; 3
     25a:	44 0f       	add	r20, r20
     25c:	99 7f       	andi	r25, 0xF9	; 249
     25e:	94 2b       	or	r25, r20
     260:	9a 83       	std	Y+2, r25	; 0x02
			(~USART_CHSIZE01C_gm)) | ((charSize & 0x03)
			<< USART_CHSIZE01C_gp);
	(usart)->UCSRnB
		= ((usart)->UCSRnB &
     262:	99 81       	ldd	r25, Y+1	; 0x01
     264:	84 70       	andi	r24, 0x04	; 4
     266:	88 0f       	add	r24, r24
     268:	88 0f       	add	r24, r24
     26a:	9b 7f       	andi	r25, 0xFB	; 251
     26c:	89 2b       	or	r24, r25
     26e:	89 83       	std	Y+1, r24	; 0x01
			(~USART_CHSIZE2_bm)) | ((charSize & 0x04)
			<< USART_CHSIZE2_bp);

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_PMODE_gm)) | parityMode;
     270:	8a 81       	ldd	r24, Y+2	; 0x02
     272:	8f 7c       	andi	r24, 0xCF	; 207
     274:	83 2b       	or	r24, r19
     276:	8a 83       	std	Y+2, r24	; 0x02

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_STOPB_bm)) | (twoStopBits
     278:	9a 81       	ldd	r25, Y+2	; 0x02
     27a:	97 7f       	andi	r25, 0xF7	; 247
     27c:	82 2f       	mov	r24, r18
     27e:	88 0f       	add	r24, r24
     280:	88 0f       	add	r24, r24
     282:	88 0f       	add	r24, r24
     284:	89 2b       	or	r24, r25
     286:	8a 83       	std	Y+2, r24	; 0x02
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate,
     288:	40 81       	ld	r20, Z
     28a:	51 81       	ldd	r21, Z+1	; 0x01
     28c:	62 81       	ldd	r22, Z+2	; 0x02
     28e:	73 81       	ldd	r23, Z+3	; 0x03
     290:	00 e4       	ldi	r16, 0x40	; 64
     292:	12 e4       	ldi	r17, 0x42	; 66
     294:	2f e0       	ldi	r18, 0x0F	; 15
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	ce 01       	movw	r24, r28
     29a:	3e df       	rcall	.-388    	; 0x118 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_TXEN_bm;
     29c:	99 81       	ldd	r25, Y+1	; 0x01
     29e:	98 60       	ori	r25, 0x08	; 8
     2a0:	99 83       	std	Y+1, r25	; 0x01
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_RXEN_bm;
     2a2:	99 81       	ldd	r25, Y+1	; 0x01
     2a4:	90 61       	ori	r25, 0x10	; 16
     2a6:	99 83       	std	Y+1, r25	; 0x01
			sysclk_get_source_clock_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	return result;
}
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	1f 91       	pop	r17
     2ae:	0f 91       	pop	r16
     2b0:	08 95       	ret

000002b2 <loadcell_min_max_tran>:
 *  Author: jan.rune.herheim
 */ 

#include "loadcell_logger.h"

uint8_t loadcell_min_max_tran(uint16_t current_value, uint16_t *data_array) {
     2b2:	fb 01       	movw	r30, r22
	
	//find tran
	signed int tran = 0; //could go positive and negative, and could store a 15 bits number, hence enough for our 12 bits results.
	//uint16_t tran_abs = 0;
	
	tran = current_value - *(data_array + POSITION_PREV); //tran = current - previous
     2b4:	22 81       	ldd	r18, Z+2	; 0x02
     2b6:	33 81       	ldd	r19, Z+3	; 0x03
     2b8:	ac 01       	movw	r20, r24
     2ba:	42 1b       	sub	r20, r18
     2bc:	53 0b       	sbc	r21, r19
     2be:	9a 01       	movw	r18, r20
	if ((abs(tran) > abs(*(data_array+POSITION_TRAN_MAX))) & (*(data_array+POSITION_ACCU_CNT) > 0)) //first step is not valid due to only one value.
     2c0:	da 01       	movw	r26, r20
     2c2:	22 f4       	brpl	.+8      	; 0x2cc <loadcell_min_max_tran+0x1a>
     2c4:	aa 27       	eor	r26, r26
     2c6:	bb 27       	eor	r27, r27
     2c8:	a4 1b       	sub	r26, r20
     2ca:	b5 0b       	sbc	r27, r21
     2cc:	42 85       	ldd	r20, Z+10	; 0x0a
     2ce:	53 85       	ldd	r21, Z+11	; 0x0b
     2d0:	55 23       	and	r21, r21
     2d2:	1c f4       	brge	.+6      	; 0x2da <loadcell_min_max_tran+0x28>
     2d4:	51 95       	neg	r21
     2d6:	41 95       	neg	r20
     2d8:	51 09       	sbc	r21, r1
     2da:	61 e0       	ldi	r22, 0x01	; 1
     2dc:	4a 17       	cp	r20, r26
     2de:	5b 07       	cpc	r21, r27
     2e0:	0c f0       	brlt	.+2      	; 0x2e4 <loadcell_min_max_tran+0x32>
     2e2:	60 e0       	ldi	r22, 0x00	; 0
     2e4:	66 23       	and	r22, r22
     2e6:	51 f0       	breq	.+20     	; 0x2fc <loadcell_min_max_tran+0x4a>
     2e8:	41 e0       	ldi	r20, 0x01	; 1
     2ea:	62 89       	ldd	r22, Z+18	; 0x12
     2ec:	73 89       	ldd	r23, Z+19	; 0x13
     2ee:	67 2b       	or	r22, r23
     2f0:	09 f4       	brne	.+2      	; 0x2f4 <loadcell_min_max_tran+0x42>
     2f2:	40 e0       	ldi	r20, 0x00	; 0
     2f4:	44 23       	and	r20, r20
     2f6:	11 f0       	breq	.+4      	; 0x2fc <loadcell_min_max_tran+0x4a>
// 			}
// 			tran_abs |= (1<<11); //flip the MSB of the 12 bits word to set the negative sign.
// 			tran = tran_abs;
// 		}
		
		*(data_array+POSITION_TRAN_MAX) = tran; //store new tran max.
     2f8:	33 87       	std	Z+11, r19	; 0x0b
     2fa:	22 87       	std	Z+10, r18	; 0x0a
	}
	
	//find min and max
	if (current_value < *(data_array+POSITION_MIN))
     2fc:	26 81       	ldd	r18, Z+6	; 0x06
     2fe:	37 81       	ldd	r19, Z+7	; 0x07
     300:	82 17       	cp	r24, r18
     302:	93 07       	cpc	r25, r19
     304:	10 f4       	brcc	.+4      	; 0x30a <loadcell_min_max_tran+0x58>
	{
		*(data_array+POSITION_MIN) = current_value; //store new min value.
     306:	97 83       	std	Z+7, r25	; 0x07
     308:	86 83       	std	Z+6, r24	; 0x06
	}
	if (current_value > *(data_array+POSITION_MAX))
     30a:	20 85       	ldd	r18, Z+8	; 0x08
     30c:	31 85       	ldd	r19, Z+9	; 0x09
     30e:	28 17       	cp	r18, r24
     310:	39 07       	cpc	r19, r25
     312:	10 f4       	brcc	.+4      	; 0x318 <loadcell_min_max_tran+0x66>
	{
		*(data_array+POSITION_MAX) = current_value; //Store new max.
     314:	91 87       	std	Z+9, r25	; 0x09
     316:	80 87       	std	Z+8, r24	; 0x08
	}
}
     318:	08 95       	ret

0000031a <__portable_avr_delay_cycles>:
	wdt_reset();
	//rtc_init_period(2); //using RTC as sampler timer.
	//wdt_enable(9);
	rtc_init_period(1);
	//sleep_enable();
}
     31a:	04 c0       	rjmp	.+8      	; 0x324 <__portable_avr_delay_cycles+0xa>
     31c:	61 50       	subi	r22, 0x01	; 1
     31e:	71 09       	sbc	r23, r1
     320:	81 09       	sbc	r24, r1
     322:	91 09       	sbc	r25, r1
     324:	61 15       	cp	r22, r1
     326:	71 05       	cpc	r23, r1
     328:	81 05       	cpc	r24, r1
     32a:	91 05       	cpc	r25, r1
     32c:	b9 f7       	brne	.-18     	; 0x31c <__portable_avr_delay_cycles+0x2>
     32e:	08 95       	ret

00000330 <usart_tx_at>:
     330:	0f 93       	push	r16
     332:	1f 93       	push	r17
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	eb 01       	movw	r28, r22
     33a:	68 81       	ld	r22, Y
     33c:	66 23       	and	r22, r22
     33e:	39 f0       	breq	.+14     	; 0x34e <usart_tx_at+0x1e>
     340:	8c 01       	movw	r16, r24
     342:	21 96       	adiw	r28, 0x01	; 1
     344:	c8 01       	movw	r24, r16
     346:	db de       	rcall	.-586    	; 0xfe <usart_putchar>
     348:	69 91       	ld	r22, Y+
     34a:	61 11       	cpse	r22, r1
     34c:	fb cf       	rjmp	.-10     	; 0x344 <usart_tx_at+0x14>
     34e:	df 91       	pop	r29
     350:	cf 91       	pop	r28
     352:	1f 91       	pop	r17
     354:	0f 91       	pop	r16
     356:	08 95       	ret

00000358 <reset_tx_data>:
     358:	44 23       	and	r20, r20
     35a:	61 f0       	breq	.+24     	; 0x374 <reset_tx_data+0x1c>
     35c:	a6 2f       	mov	r26, r22
     35e:	b7 2f       	mov	r27, r23
     360:	e8 2f       	mov	r30, r24
     362:	f9 2f       	mov	r31, r25
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	2d 91       	ld	r18, X+
     368:	3d 91       	ld	r19, X+
     36a:	21 93       	st	Z+, r18
     36c:	31 93       	st	Z+, r19
     36e:	8f 5f       	subi	r24, 0xFF	; 255
     370:	48 13       	cpse	r20, r24
     372:	f9 cf       	rjmp	.-14     	; 0x366 <reset_tx_data+0xe>
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	08 95       	ret

00000378 <reset_char_array>:
     378:	66 23       	and	r22, r22
     37a:	59 f0       	breq	.+22     	; 0x392 <reset_char_array+0x1a>
     37c:	fc 01       	movw	r30, r24
     37e:	61 50       	subi	r22, 0x01	; 1
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	6f 5f       	subi	r22, 0xFF	; 255
     384:	7f 4f       	sbci	r23, 0xFF	; 255
     386:	86 0f       	add	r24, r22
     388:	97 1f       	adc	r25, r23
     38a:	11 92       	st	Z+, r1
     38c:	e8 17       	cp	r30, r24
     38e:	f9 07       	cpc	r31, r25
     390:	e1 f7       	brne	.-8      	; 0x38a <reset_char_array+0x12>
     392:	08 95       	ret

00000394 <reset_all_data>:
     394:	64 e6       	ldi	r22, 0x64	; 100
     396:	89 e5       	ldi	r24, 0x59	; 89
     398:	95 e0       	ldi	r25, 0x05	; 5
     39a:	ee df       	rcall	.-36     	; 0x378 <reset_char_array>
     39c:	64 e6       	ldi	r22, 0x64	; 100
     39e:	80 e6       	ldi	r24, 0x60	; 96
     3a0:	94 e0       	ldi	r25, 0x04	; 4
     3a2:	ea df       	rcall	.-44     	; 0x378 <reset_char_array>
     3a4:	41 e1       	ldi	r20, 0x11	; 17
     3a6:	67 e3       	ldi	r22, 0x37	; 55
     3a8:	73 e0       	ldi	r23, 0x03	; 3
     3aa:	8e e5       	ldi	r24, 0x5E	; 94
     3ac:	95 e0       	ldi	r25, 0x05	; 5
     3ae:	d4 cf       	rjmp	.-88     	; 0x358 <reset_tx_data>
     3b0:	08 95       	ret

000003b2 <rtc_init_period>:
     3b2:	14 be       	out	0x34, r1	; 52
     3b4:	e0 e6       	ldi	r30, 0x60	; 96
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	88 e1       	ldi	r24, 0x18	; 24
     3ba:	80 83       	st	Z, r24
     3bc:	80 e6       	ldi	r24, 0x60	; 96
     3be:	80 83       	st	Z, r24
     3c0:	08 95       	ret

000003c2 <loadcell_pins_init>:
     3c2:	09 9a       	sbi	0x01, 1	; 1
     3c4:	11 98       	cbi	0x02, 1	; 2
     3c6:	08 95       	ret

000003c8 <radio_pins_init>:
     3c8:	54 9a       	sbi	0x0a, 4	; 10
     3ca:	55 98       	cbi	0x0a, 5	; 10
     3cc:	08 95       	ret

000003ce <my_delay_10ms>:
     3ce:	cf 93       	push	r28
     3d0:	88 23       	and	r24, r24
     3d2:	41 f0       	breq	.+16     	; 0x3e4 <my_delay_10ms+0x16>
     3d4:	c8 2f       	mov	r28, r24
     3d6:	63 e8       	ldi	r22, 0x83	; 131
     3d8:	76 e0       	ldi	r23, 0x06	; 6
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	9d df       	rcall	.-198    	; 0x31a <__portable_avr_delay_cycles>
     3e0:	c1 50       	subi	r28, 0x01	; 1
     3e2:	c9 f7       	brne	.-14     	; 0x3d6 <my_delay_10ms+0x8>
     3e4:	cf 91       	pop	r28
     3e6:	08 95       	ret

000003e8 <loadcell_power_on>:
     3e8:	11 9a       	sbi	0x02, 1	; 2
     3ea:	66 e3       	ldi	r22, 0x36	; 54
     3ec:	75 e0       	ldi	r23, 0x05	; 5
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	93 cf       	rjmp	.-218    	; 0x31a <__portable_avr_delay_cycles>
     3f4:	08 95       	ret

000003f6 <loadcell_power_off>:
     3f6:	11 98       	cbi	0x02, 1	; 2
     3f8:	08 95       	ret

000003fa <radio_power_on>:
     3fa:	1f 93       	push	r17
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	5c 98       	cbi	0x0b, 4	; 11
     402:	6b e1       	ldi	r22, 0x1B	; 27
     404:	71 e4       	ldi	r23, 0x41	; 65
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	87 df       	rcall	.-242    	; 0x31a <__portable_avr_delay_cycles>
     40c:	5c 9a       	sbi	0x0b, 4	; 11
     40e:	6b e0       	ldi	r22, 0x0B	; 11
     410:	7b e8       	ldi	r23, 0x8B	; 139
     412:	82 e0       	ldi	r24, 0x02	; 2
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	81 df       	rcall	.-254    	; 0x31a <__portable_avr_delay_cycles>
     418:	5c 98       	cbi	0x0b, 4	; 11
     41a:	6b e0       	ldi	r22, 0x0B	; 11
     41c:	7b e8       	ldi	r23, 0x8B	; 139
     41e:	82 e0       	ldi	r24, 0x02	; 2
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	7b df       	rcall	.-266    	; 0x31a <__portable_avr_delay_cycles>
     424:	4d 99       	sbic	0x09, 5	; 9
     426:	16 c0       	rjmp	.+44     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     428:	c0 e0       	ldi	r28, 0x00	; 0
     42a:	d1 e0       	ldi	r29, 0x01	; 1
     42c:	10 e0       	ldi	r17, 0x00	; 0
     42e:	66 e3       	ldi	r22, 0x36	; 54
     430:	72 e8       	ldi	r23, 0x82	; 130
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	71 df       	rcall	.-286    	; 0x31a <__portable_avr_delay_cycles>
     438:	cf 5f       	subi	r28, 0xFF	; 255
     43a:	89 b1       	in	r24, 0x09	; 9
     43c:	85 fb       	bst	r24, 5
     43e:	88 27       	eor	r24, r24
     440:	80 f9       	bld	r24, 0
     442:	8d 17       	cp	r24, r29
     444:	41 f0       	breq	.+16     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     446:	8d 2f       	mov	r24, r29
     448:	cb 31       	cpi	r28, 0x1B	; 27
     44a:	08 f0       	brcs	.+2      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     44c:	81 2f       	mov	r24, r17
     44e:	81 11       	cpse	r24, r1
     450:	ee cf       	rjmp	.-36     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     452:	01 c0       	rjmp	.+2      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     454:	c0 e0       	ldi	r28, 0x00	; 0
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	cb 31       	cpi	r28, 0x1B	; 27
     45a:	09 f0       	breq	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	1f 91       	pop	r17
     464:	08 95       	ret

00000466 <radio_power_off>:
     466:	ff 92       	push	r15
     468:	0f 93       	push	r16
     46a:	1f 93       	push	r17
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	c0 e0       	ldi	r28, 0x00	; 0
     472:	01 e0       	ldi	r16, 0x01	; 1
     474:	f1 2c       	mov	r15, r1
     476:	d0 2f       	mov	r29, r16
     478:	1f 2d       	mov	r17, r15
     47a:	5c 98       	cbi	0x0b, 4	; 11
     47c:	5c 9a       	sbi	0x0b, 4	; 11
     47e:	80 e5       	ldi	r24, 0x50	; 80
     480:	a6 df       	rcall	.-180    	; 0x3ce <my_delay_10ms>
     482:	5c 98       	cbi	0x0b, 4	; 11
     484:	4d 9b       	sbis	0x09, 5	; 9
     486:	14 c0       	rjmp	.+40     	; 0x4b0 <radio_power_off+0x4a>
     488:	80 2f       	mov	r24, r16
     48a:	cc 30       	cpi	r28, 0x0C	; 12
     48c:	08 f0       	brcs	.+2      	; 0x490 <radio_power_off+0x2a>
     48e:	8f 2d       	mov	r24, r15
     490:	88 23       	and	r24, r24
     492:	71 f0       	breq	.+28     	; 0x4b0 <radio_power_off+0x4a>
     494:	6b e0       	ldi	r22, 0x0B	; 11
     496:	7b e8       	ldi	r23, 0x8B	; 139
     498:	82 e0       	ldi	r24, 0x02	; 2
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	3e df       	rcall	.-388    	; 0x31a <__portable_avr_delay_cycles>
     49e:	cf 5f       	subi	r28, 0xFF	; 255
     4a0:	4d 9b       	sbis	0x09, 5	; 9
     4a2:	06 c0       	rjmp	.+12     	; 0x4b0 <radio_power_off+0x4a>
     4a4:	8d 2f       	mov	r24, r29
     4a6:	cc 30       	cpi	r28, 0x0C	; 12
     4a8:	08 f0       	brcs	.+2      	; 0x4ac <radio_power_off+0x46>
     4aa:	81 2f       	mov	r24, r17
     4ac:	81 11       	cpse	r24, r1
     4ae:	f2 cf       	rjmp	.-28     	; 0x494 <radio_power_off+0x2e>
     4b0:	cb 31       	cpi	r28, 0x1B	; 27
     4b2:	19 f3       	breq	.-58     	; 0x47a <radio_power_off+0x14>
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	1f 91       	pop	r17
     4bc:	0f 91       	pop	r16
     4be:	ff 90       	pop	r15
     4c0:	08 95       	ret

000004c2 <radio_power_off_at>:
     4c2:	1f 93       	push	r17
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	4d 9b       	sbis	0x09, 5	; 9
     4ca:	2d c0       	rjmp	.+90     	; 0x526 <radio_power_off_at+0x64>
     4cc:	c0 e0       	ldi	r28, 0x00	; 0
     4ce:	d1 e0       	ldi	r29, 0x01	; 1
     4d0:	10 e0       	ldi	r17, 0x00	; 0
     4d2:	6a e3       	ldi	r22, 0x3A	; 58
     4d4:	71 e0       	ldi	r23, 0x01	; 1
     4d6:	88 ec       	ldi	r24, 0xC8	; 200
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	2a df       	rcall	.-428    	; 0x330 <usart_tx_at>
     4dc:	6a e3       	ldi	r22, 0x3A	; 58
     4de:	71 e0       	ldi	r23, 0x01	; 1
     4e0:	80 ec       	ldi	r24, 0xC0	; 192
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	25 df       	rcall	.-438    	; 0x330 <usart_tx_at>
     4e6:	6b e2       	ldi	r22, 0x2B	; 43
     4e8:	7c e2       	ldi	r23, 0x2C	; 44
     4ea:	8a e0       	ldi	r24, 0x0A	; 10
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	15 df       	rcall	.-470    	; 0x31a <__portable_avr_delay_cycles>
     4f0:	4d 9b       	sbis	0x09, 5	; 9
     4f2:	0f c0       	rjmp	.+30     	; 0x512 <radio_power_off_at+0x50>
     4f4:	66 e4       	ldi	r22, 0x46	; 70
     4f6:	71 e0       	ldi	r23, 0x01	; 1
     4f8:	88 ec       	ldi	r24, 0xC8	; 200
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	19 df       	rcall	.-462    	; 0x330 <usart_tx_at>
     4fe:	66 e4       	ldi	r22, 0x46	; 70
     500:	71 e0       	ldi	r23, 0x01	; 1
     502:	80 ec       	ldi	r24, 0xC0	; 192
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	14 df       	rcall	.-472    	; 0x330 <usart_tx_at>
     508:	61 e4       	ldi	r22, 0x41	; 65
     50a:	72 e4       	ldi	r23, 0x42	; 66
     50c:	8f e0       	ldi	r24, 0x0F	; 15
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	04 df       	rcall	.-504    	; 0x31a <__portable_avr_delay_cycles>
     512:	cf 5f       	subi	r28, 0xFF	; 255
     514:	4d 9b       	sbis	0x09, 5	; 9
     516:	08 c0       	rjmp	.+16     	; 0x528 <radio_power_off_at+0x66>
     518:	8d 2f       	mov	r24, r29
     51a:	cb 31       	cpi	r28, 0x1B	; 27
     51c:	08 f0       	brcs	.+2      	; 0x520 <radio_power_off_at+0x5e>
     51e:	81 2f       	mov	r24, r17
     520:	81 11       	cpse	r24, r1
     522:	d7 cf       	rjmp	.-82     	; 0x4d2 <radio_power_off_at+0x10>
     524:	01 c0       	rjmp	.+2      	; 0x528 <radio_power_off_at+0x66>
     526:	c0 e0       	ldi	r28, 0x00	; 0
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	cb 31       	cpi	r28, 0x1B	; 27
     52c:	09 f0       	breq	.+2      	; 0x530 <radio_power_off_at+0x6e>
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	1f 91       	pop	r17
     536:	08 95       	ret

00000538 <adc_10_to_12_bits>:
     538:	cf 92       	push	r12
     53a:	df 92       	push	r13
     53c:	ff 92       	push	r15
     53e:	0f 93       	push	r16
     540:	1f 93       	push	r17
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
     54a:	27 97       	sbiw	r28, 0x07	; 7
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	f8 94       	cli
     550:	de bf       	out	0x3e, r29	; 62
     552:	0f be       	out	0x3f, r0	; 63
     554:	cd bf       	out	0x3d, r28	; 61
     556:	1a 82       	std	Y+2, r1	; 0x02
     558:	19 82       	std	Y+1, r1	; 0x01
     55a:	93 e8       	ldi	r25, 0x83	; 131
     55c:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     560:	68 94       	set
     562:	ff 24       	eor	r15, r15
     564:	f4 f8       	bld	r15, 4
     566:	0c e7       	ldi	r16, 0x7C	; 124
     568:	10 e0       	ldi	r17, 0x00	; 0
     56a:	ea e7       	ldi	r30, 0x7A	; 122
     56c:	f0 e0       	ldi	r31, 0x00	; 0
     56e:	0f 2e       	mov	r0, r31
     570:	f8 e7       	ldi	r31, 0x78	; 120
     572:	cf 2e       	mov	r12, r31
     574:	d1 2c       	mov	r13, r1
     576:	f0 2d       	mov	r31, r0
     578:	80 6c       	ori	r24, 0xC0	; 192
     57a:	1c c0       	rjmp	.+56     	; 0x5b4 <adc_10_to_12_bits+0x7c>
     57c:	d8 01       	movw	r26, r16
     57e:	8c 93       	st	X, r24
     580:	90 81       	ld	r25, Z
     582:	90 64       	ori	r25, 0x40	; 64
     584:	90 83       	st	Z, r25
     586:	90 81       	ld	r25, Z
     588:	96 fd       	sbrc	r25, 6
     58a:	fd cf       	rjmp	.-6      	; 0x586 <adc_10_to_12_bits+0x4e>
     58c:	d6 01       	movw	r26, r12
     58e:	6d 91       	ld	r22, X+
     590:	7c 91       	ld	r23, X
     592:	46 0f       	add	r20, r22
     594:	57 1f       	adc	r21, r23
     596:	21 50       	subi	r18, 0x01	; 1
     598:	89 f7       	brne	.-30     	; 0x57c <adc_10_to_12_bits+0x44>
     59a:	29 81       	ldd	r18, Y+1	; 0x01
     59c:	3a 81       	ldd	r19, Y+2	; 0x02
     59e:	56 95       	lsr	r21
     5a0:	47 95       	ror	r20
     5a2:	56 95       	lsr	r21
     5a4:	47 95       	ror	r20
     5a6:	42 0f       	add	r20, r18
     5a8:	53 1f       	adc	r21, r19
     5aa:	5a 83       	std	Y+2, r21	; 0x02
     5ac:	49 83       	std	Y+1, r20	; 0x01
     5ae:	fa 94       	dec	r15
     5b0:	ff 20       	and	r15, r15
     5b2:	21 f0       	breq	.+8      	; 0x5bc <adc_10_to_12_bits+0x84>
     5b4:	24 e0       	ldi	r18, 0x04	; 4
     5b6:	40 e0       	ldi	r20, 0x00	; 0
     5b8:	50 e0       	ldi	r21, 0x00	; 0
     5ba:	e0 cf       	rjmp	.-64     	; 0x57c <adc_10_to_12_bits+0x44>
     5bc:	89 81       	ldd	r24, Y+1	; 0x01
     5be:	9a 81       	ldd	r25, Y+2	; 0x02
     5c0:	96 95       	lsr	r25
     5c2:	87 95       	ror	r24
     5c4:	96 95       	lsr	r25
     5c6:	87 95       	ror	r24
     5c8:	9a 83       	std	Y+2, r25	; 0x02
     5ca:	89 83       	std	Y+1, r24	; 0x01
     5cc:	29 81       	ldd	r18, Y+1	; 0x01
     5ce:	3a 81       	ldd	r19, Y+2	; 0x02
     5d0:	a8 eb       	ldi	r26, 0xB8	; 184
     5d2:	be e3       	ldi	r27, 0x3E	; 62
     5d4:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__umulhisi3>
     5d8:	dc 01       	movw	r26, r24
     5da:	cb 01       	movw	r24, r22
     5dc:	90 5e       	subi	r25, 0xE0	; 224
     5de:	af 4f       	sbci	r26, 0xFF	; 255
     5e0:	bf 4f       	sbci	r27, 0xFF	; 255
     5e2:	88 0f       	add	r24, r24
     5e4:	99 1f       	adc	r25, r25
     5e6:	aa 1f       	adc	r26, r26
     5e8:	bb 1f       	adc	r27, r27
     5ea:	88 0f       	add	r24, r24
     5ec:	99 1f       	adc	r25, r25
     5ee:	aa 1f       	adc	r26, r26
     5f0:	bb 1f       	adc	r27, r27
     5f2:	cd 01       	movw	r24, r26
     5f4:	bb 27       	eor	r27, r27
     5f6:	97 fd       	sbrc	r25, 7
     5f8:	b0 95       	com	r27
     5fa:	ab 2f       	mov	r26, r27
     5fc:	9a 83       	std	Y+2, r25	; 0x02
     5fe:	89 83       	std	Y+1, r24	; 0x01
     600:	1c 82       	std	Y+4, r1	; 0x04
     602:	1b 82       	std	Y+3, r1	; 0x03
     604:	fe 01       	movw	r30, r28
     606:	35 96       	adiw	r30, 0x05	; 5
     608:	83 e0       	ldi	r24, 0x03	; 3
     60a:	df 01       	movw	r26, r30
     60c:	1d 92       	st	X+, r1
     60e:	8a 95       	dec	r24
     610:	e9 f7       	brne	.-6      	; 0x60c <adc_10_to_12_bits+0xd4>
     612:	65 e0       	ldi	r22, 0x05	; 5
     614:	ce 01       	movw	r24, r28
     616:	03 96       	adiw	r24, 0x03	; 3
     618:	af de       	rcall	.-674    	; 0x378 <reset_char_array>
     61a:	89 81       	ldd	r24, Y+1	; 0x01
     61c:	9a 81       	ldd	r25, Y+2	; 0x02
     61e:	4a e0       	ldi	r20, 0x0A	; 10
     620:	be 01       	movw	r22, r28
     622:	6d 5f       	subi	r22, 0xFD	; 253
     624:	7f 4f       	sbci	r23, 0xFF	; 255
     626:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <__itoa_ncheck>
     62a:	6d ec       	ldi	r22, 0xCD	; 205
     62c:	72 e0       	ldi	r23, 0x02	; 2
     62e:	88 ec       	ldi	r24, 0xC8	; 200
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	7e de       	rcall	.-772    	; 0x330 <usart_tx_at>
     634:	be 01       	movw	r22, r28
     636:	6d 5f       	subi	r22, 0xFD	; 253
     638:	7f 4f       	sbci	r23, 0xFF	; 255
     63a:	88 ec       	ldi	r24, 0xC8	; 200
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	78 de       	rcall	.-784    	; 0x330 <usart_tx_at>
     640:	6d ec       	ldi	r22, 0xCD	; 205
     642:	72 e0       	ldi	r23, 0x02	; 2
     644:	88 ec       	ldi	r24, 0xC8	; 200
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	73 de       	rcall	.-794    	; 0x330 <usart_tx_at>
     64a:	89 81       	ldd	r24, Y+1	; 0x01
     64c:	9a 81       	ldd	r25, Y+2	; 0x02
     64e:	27 96       	adiw	r28, 0x07	; 7
     650:	0f b6       	in	r0, 0x3f	; 63
     652:	f8 94       	cli
     654:	de bf       	out	0x3e, r29	; 62
     656:	0f be       	out	0x3f, r0	; 63
     658:	cd bf       	out	0x3d, r28	; 61
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	1f 91       	pop	r17
     660:	0f 91       	pop	r16
     662:	ff 90       	pop	r15
     664:	df 90       	pop	r13
     666:	cf 90       	pop	r12
     668:	08 95       	ret

0000066a <at_get_radio_network_time>:
     66a:	ef 92       	push	r14
     66c:	ff 92       	push	r15
     66e:	0f 93       	push	r16
     670:	1f 93       	push	r17
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
     676:	00 d0       	rcall	.+0      	; 0x678 <at_get_radio_network_time+0xe>
     678:	1f 92       	push	r1
     67a:	cd b7       	in	r28, 0x3d	; 61
     67c:	de b7       	in	r29, 0x3e	; 62
     67e:	1a 82       	std	Y+2, r1	; 0x02
     680:	19 82       	std	Y+1, r1	; 0x01
     682:	1b 82       	std	Y+3, r1	; 0x03
     684:	0f 2e       	mov	r0, r31
     686:	fc ee       	ldi	r31, 0xEC	; 236
     688:	ef 2e       	mov	r14, r31
     68a:	f4 e0       	ldi	r31, 0x04	; 4
     68c:	ff 2e       	mov	r15, r31
     68e:	f0 2d       	mov	r31, r0
     690:	0a e0       	ldi	r16, 0x0A	; 10
     692:	10 e0       	ldi	r17, 0x00	; 0
     694:	f7 01       	movw	r30, r14
     696:	31 97       	sbiw	r30, 0x01	; 1
     698:	80 81       	ld	r24, Z
     69a:	89 83       	std	Y+1, r24	; 0x01
     69c:	f7 01       	movw	r30, r14
     69e:	80 81       	ld	r24, Z
     6a0:	8a 83       	std	Y+2, r24	; 0x02
     6a2:	ce 01       	movw	r24, r28
     6a4:	01 96       	adiw	r24, 0x01	; 1
     6a6:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <atoi>
     6aa:	f8 01       	movw	r30, r16
     6ac:	ee 0f       	add	r30, r30
     6ae:	ff 1f       	adc	r31, r31
     6b0:	e2 5a       	subi	r30, 0xA2	; 162
     6b2:	fa 4f       	sbci	r31, 0xFA	; 250
     6b4:	91 83       	std	Z+1, r25	; 0x01
     6b6:	80 83       	st	Z, r24
     6b8:	f3 e0       	ldi	r31, 0x03	; 3
     6ba:	ef 0e       	add	r14, r31
     6bc:	f1 1c       	adc	r15, r1
     6be:	0f 5f       	subi	r16, 0xFF	; 255
     6c0:	1f 4f       	sbci	r17, 0xFF	; 255
     6c2:	00 31       	cpi	r16, 0x10	; 16
     6c4:	11 05       	cpc	r17, r1
     6c6:	31 f7       	brne	.-52     	; 0x694 <at_get_radio_network_time+0x2a>
     6c8:	0f 90       	pop	r0
     6ca:	0f 90       	pop	r0
     6cc:	0f 90       	pop	r0
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	1f 91       	pop	r17
     6d4:	0f 91       	pop	r16
     6d6:	ff 90       	pop	r15
     6d8:	ef 90       	pop	r14
     6da:	08 95       	ret

000006dc <tx_at_response>:
     6dc:	0f 93       	push	r16
     6de:	1f 93       	push	r17
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	ec 01       	movw	r28, r24
     6e6:	88 85       	ldd	r24, Y+8	; 0x08
     6e8:	88 23       	and	r24, r24
     6ea:	09 f4       	brne	.+2      	; 0x6ee <tx_at_response+0x12>
     6ec:	77 c0       	rjmp	.+238    	; 0x7dc <tx_at_response+0x100>
     6ee:	10 e0       	ldi	r17, 0x00	; 0
     6f0:	00 e0       	ldi	r16, 0x00	; 0
     6f2:	60 e8       	ldi	r22, 0x80	; 128
     6f4:	89 ed       	ldi	r24, 0xD9	; 217
     6f6:	94 e0       	ldi	r25, 0x04	; 4
     6f8:	3f de       	rcall	.-898    	; 0x378 <reset_char_array>
     6fa:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <response_counter>
     6fe:	8c 81       	ldd	r24, Y+4	; 0x04
     700:	9d 81       	ldd	r25, Y+5	; 0x05
     702:	ae 81       	ldd	r26, Y+6	; 0x06
     704:	bf 81       	ldd	r27, Y+7	; 0x07
     706:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <response_timeout>
     70a:	90 93 ce 04 	sts	0x04CE, r25	; 0x8004ce <response_timeout+0x1>
     70e:	a0 93 cf 04 	sts	0x04CF, r26	; 0x8004cf <response_timeout+0x2>
     712:	b0 93 d0 04 	sts	0x04D0, r27	; 0x8004d0 <response_timeout+0x3>
     716:	10 92 c9 04 	sts	0x04C9, r1	; 0x8004c9 <response_timeout_counter>
     71a:	10 92 ca 04 	sts	0x04CA, r1	; 0x8004ca <response_timeout_counter+0x1>
     71e:	10 92 cb 04 	sts	0x04CB, r1	; 0x8004cb <response_timeout_counter+0x2>
     722:	10 92 cc 04 	sts	0x04CC, r1	; 0x8004cc <response_timeout_counter+0x3>
     726:	68 81       	ld	r22, Y
     728:	79 81       	ldd	r23, Y+1	; 0x01
     72a:	80 ec       	ldi	r24, 0xC0	; 192
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	00 de       	rcall	.-1024   	; 0x330 <usart_tx_at>
     730:	78 94       	sei
     732:	e0 ec       	ldi	r30, 0xC0	; 192
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	81 81       	ldd	r24, Z+1	; 0x01
     738:	80 68       	ori	r24, 0x80	; 128
     73a:	81 83       	std	Z+1, r24	; 0x01
     73c:	40 91 c9 04 	lds	r20, 0x04C9	; 0x8004c9 <response_timeout_counter>
     740:	50 91 ca 04 	lds	r21, 0x04CA	; 0x8004ca <response_timeout_counter+0x1>
     744:	60 91 cb 04 	lds	r22, 0x04CB	; 0x8004cb <response_timeout_counter+0x2>
     748:	70 91 cc 04 	lds	r23, 0x04CC	; 0x8004cc <response_timeout_counter+0x3>
     74c:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <response_timeout>
     750:	90 91 ce 04 	lds	r25, 0x04CE	; 0x8004ce <response_timeout+0x1>
     754:	a0 91 cf 04 	lds	r26, 0x04CF	; 0x8004cf <response_timeout+0x2>
     758:	b0 91 d0 04 	lds	r27, 0x04D0	; 0x8004d0 <response_timeout+0x3>
     75c:	48 17       	cp	r20, r24
     75e:	59 07       	cpc	r21, r25
     760:	6a 07       	cpc	r22, r26
     762:	7b 07       	cpc	r23, r27
     764:	98 f5       	brcc	.+102    	; 0x7cc <tx_at_response+0xf0>
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	32 de       	rcall	.-924    	; 0x3ce <my_delay_10ms>
     76a:	6a 81       	ldd	r22, Y+2	; 0x02
     76c:	7b 81       	ldd	r23, Y+3	; 0x03
     76e:	89 ed       	ldi	r24, 0xD9	; 217
     770:	94 e0       	ldi	r25, 0x04	; 4
     772:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <strstr>
     776:	89 2b       	or	r24, r25
     778:	99 f5       	brne	.+102    	; 0x7e0 <tx_at_response+0x104>
     77a:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <response_timeout_counter>
     77e:	90 91 ca 04 	lds	r25, 0x04CA	; 0x8004ca <response_timeout_counter+0x1>
     782:	a0 91 cb 04 	lds	r26, 0x04CB	; 0x8004cb <response_timeout_counter+0x2>
     786:	b0 91 cc 04 	lds	r27, 0x04CC	; 0x8004cc <response_timeout_counter+0x3>
     78a:	01 96       	adiw	r24, 0x01	; 1
     78c:	a1 1d       	adc	r26, r1
     78e:	b1 1d       	adc	r27, r1
     790:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <response_timeout_counter>
     794:	90 93 ca 04 	sts	0x04CA, r25	; 0x8004ca <response_timeout_counter+0x1>
     798:	a0 93 cb 04 	sts	0x04CB, r26	; 0x8004cb <response_timeout_counter+0x2>
     79c:	b0 93 cc 04 	sts	0x04CC, r27	; 0x8004cc <response_timeout_counter+0x3>
     7a0:	40 91 c9 04 	lds	r20, 0x04C9	; 0x8004c9 <response_timeout_counter>
     7a4:	50 91 ca 04 	lds	r21, 0x04CA	; 0x8004ca <response_timeout_counter+0x1>
     7a8:	60 91 cb 04 	lds	r22, 0x04CB	; 0x8004cb <response_timeout_counter+0x2>
     7ac:	70 91 cc 04 	lds	r23, 0x04CC	; 0x8004cc <response_timeout_counter+0x3>
     7b0:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <response_timeout>
     7b4:	90 91 ce 04 	lds	r25, 0x04CE	; 0x8004ce <response_timeout+0x1>
     7b8:	a0 91 cf 04 	lds	r26, 0x04CF	; 0x8004cf <response_timeout+0x2>
     7bc:	b0 91 d0 04 	lds	r27, 0x04D0	; 0x8004d0 <response_timeout+0x3>
     7c0:	48 17       	cp	r20, r24
     7c2:	59 07       	cpc	r21, r25
     7c4:	6a 07       	cpc	r22, r26
     7c6:	7b 07       	cpc	r23, r27
     7c8:	70 f2       	brcs	.-100    	; 0x766 <tx_at_response+0x8a>
     7ca:	01 e0       	ldi	r16, 0x01	; 1
     7cc:	8e e1       	ldi	r24, 0x1E	; 30
     7ce:	ff dd       	rcall	.-1026   	; 0x3ce <my_delay_10ms>
     7d0:	1f 5f       	subi	r17, 0xFF	; 255
     7d2:	88 85       	ldd	r24, Y+8	; 0x08
     7d4:	18 17       	cp	r17, r24
     7d6:	08 f4       	brcc	.+2      	; 0x7da <tx_at_response+0xfe>
     7d8:	8c cf       	rjmp	.-232    	; 0x6f2 <tx_at_response+0x16>
     7da:	03 c0       	rjmp	.+6      	; 0x7e2 <tx_at_response+0x106>
     7dc:	00 e0       	ldi	r16, 0x00	; 0
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <tx_at_response+0x106>
     7e0:	00 e0       	ldi	r16, 0x00	; 0
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	f4 dd       	rcall	.-1048   	; 0x3ce <my_delay_10ms>
     7e6:	e0 ec       	ldi	r30, 0xC0	; 192
     7e8:	f0 e0       	ldi	r31, 0x00	; 0
     7ea:	81 81       	ldd	r24, Z+1	; 0x01
     7ec:	8f 77       	andi	r24, 0x7F	; 127
     7ee:	81 83       	std	Z+1, r24	; 0x01
     7f0:	69 ed       	ldi	r22, 0xD9	; 217
     7f2:	74 e0       	ldi	r23, 0x04	; 4
     7f4:	88 ec       	ldi	r24, 0xC8	; 200
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	9b dd       	rcall	.-1226   	; 0x330 <usart_tx_at>
     7fa:	80 2f       	mov	r24, r16
     7fc:	df 91       	pop	r29
     7fe:	cf 91       	pop	r28
     800:	1f 91       	pop	r17
     802:	0f 91       	pop	r16
     804:	08 95       	ret

00000806 <tx_data_response>:
     806:	ef 92       	push	r14
     808:	ff 92       	push	r15
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	7c 01       	movw	r14, r24
     814:	8b 01       	movw	r16, r22
     816:	60 e8       	ldi	r22, 0x80	; 128
     818:	89 ed       	ldi	r24, 0xD9	; 217
     81a:	94 e0       	ldi	r25, 0x04	; 4
     81c:	ad dd       	rcall	.-1190   	; 0x378 <reset_char_array>
     81e:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <response_counter>
     822:	10 16       	cp	r1, r16
     824:	11 06       	cpc	r1, r17
     826:	74 f4       	brge	.+28     	; 0x844 <tx_data_response+0x3e>
     828:	c0 e0       	ldi	r28, 0x00	; 0
     82a:	f7 01       	movw	r30, r14
     82c:	ec 0f       	add	r30, r28
     82e:	f1 1d       	adc	r31, r1
     830:	60 81       	ld	r22, Z
     832:	80 ec       	ldi	r24, 0xC0	; 192
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	63 dc       	rcall	.-1850   	; 0xfe <usart_putchar>
     838:	cf 5f       	subi	r28, 0xFF	; 255
     83a:	8c 2f       	mov	r24, r28
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	80 17       	cp	r24, r16
     840:	91 07       	cpc	r25, r17
     842:	9c f3       	brlt	.-26     	; 0x82a <tx_data_response+0x24>
     844:	60 e0       	ldi	r22, 0x00	; 0
     846:	80 ec       	ldi	r24, 0xC0	; 192
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	59 dc       	rcall	.-1870   	; 0xfe <usart_putchar>
     84c:	78 94       	sei
     84e:	c0 ec       	ldi	r28, 0xC0	; 192
     850:	d0 e0       	ldi	r29, 0x00	; 0
     852:	89 81       	ldd	r24, Y+1	; 0x01
     854:	80 68       	ori	r24, 0x80	; 128
     856:	89 83       	std	Y+1, r24	; 0x01
     858:	8e e1       	ldi	r24, 0x1E	; 30
     85a:	b9 dd       	rcall	.-1166   	; 0x3ce <my_delay_10ms>
     85c:	89 81       	ldd	r24, Y+1	; 0x01
     85e:	8f 77       	andi	r24, 0x7F	; 127
     860:	89 83       	std	Y+1, r24	; 0x01
     862:	69 ed       	ldi	r22, 0xD9	; 217
     864:	74 e0       	ldi	r23, 0x04	; 4
     866:	88 ec       	ldi	r24, 0xC8	; 200
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	62 dd       	rcall	.-1340   	; 0x330 <usart_tx_at>
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	1f 91       	pop	r17
     874:	0f 91       	pop	r16
     876:	ff 90       	pop	r15
     878:	ef 90       	pop	r14
     87a:	08 95       	ret

0000087c <data_to_char>:
     87c:	7f 92       	push	r7
     87e:	8f 92       	push	r8
     880:	9f 92       	push	r9
     882:	af 92       	push	r10
     884:	bf 92       	push	r11
     886:	cf 92       	push	r12
     888:	df 92       	push	r13
     88a:	ef 92       	push	r14
     88c:	ff 92       	push	r15
     88e:	0f 93       	push	r16
     890:	1f 93       	push	r17
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	00 d0       	rcall	.+0      	; 0x898 <data_to_char+0x1c>
     898:	00 d0       	rcall	.+0      	; 0x89a <data_to_char+0x1e>
     89a:	1f 92       	push	r1
     89c:	cd b7       	in	r28, 0x3d	; 61
     89e:	de b7       	in	r29, 0x3e	; 62
     8a0:	6c 01       	movw	r12, r24
     8a2:	1a 82       	std	Y+2, r1	; 0x02
     8a4:	19 82       	std	Y+1, r1	; 0x01
     8a6:	fe 01       	movw	r30, r28
     8a8:	33 96       	adiw	r30, 0x03	; 3
     8aa:	93 e0       	ldi	r25, 0x03	; 3
     8ac:	df 01       	movw	r26, r30
     8ae:	1d 92       	st	X+, r1
     8b0:	9a 95       	dec	r25
     8b2:	e9 f7       	brne	.-6      	; 0x8ae <data_to_char+0x32>
     8b4:	e6 2e       	mov	r14, r22
     8b6:	f1 2c       	mov	r15, r1
     8b8:	b1 e0       	ldi	r27, 0x01	; 1
     8ba:	eb 1a       	sub	r14, r27
     8bc:	f1 08       	sbc	r15, r1
     8be:	5a f1       	brmi	.+86     	; 0x916 <__stack+0x17>
     8c0:	49 01       	movw	r8, r18
     8c2:	5a 01       	movw	r10, r20
     8c4:	00 e0       	ldi	r16, 0x00	; 0
     8c6:	10 e0       	ldi	r17, 0x00	; 0
     8c8:	71 2c       	mov	r7, r1
     8ca:	e7 2d       	mov	r30, r7
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	ee 0f       	add	r30, r30
     8d0:	ff 1f       	adc	r31, r31
     8d2:	ec 0d       	add	r30, r12
     8d4:	fd 1d       	adc	r31, r13
     8d6:	a4 01       	movw	r20, r8
     8d8:	be 01       	movw	r22, r28
     8da:	6f 5f       	subi	r22, 0xFF	; 255
     8dc:	7f 4f       	sbci	r23, 0xFF	; 255
     8de:	80 81       	ld	r24, Z
     8e0:	91 81       	ldd	r25, Z+1	; 0x01
     8e2:	0e 94 56 0d 	call	0x1aac	; 0x1aac <itoa>
     8e6:	c8 01       	movw	r24, r16
     8e8:	88 0f       	add	r24, r24
     8ea:	99 1f       	adc	r25, r25
     8ec:	88 0f       	add	r24, r24
     8ee:	99 1f       	adc	r25, r25
     8f0:	80 0f       	add	r24, r16
     8f2:	91 1f       	adc	r25, r17
     8f4:	be 01       	movw	r22, r28
     8f6:	6f 5f       	subi	r22, 0xFF	; 255
     8f8:	7f 4f       	sbci	r23, 0xFF	; 255
     8fa:	8a 0d       	add	r24, r10
     8fc:	9b 1d       	adc	r25, r11
     8fe:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <strcpy>
     902:	65 e0       	ldi	r22, 0x05	; 5
     904:	ce 01       	movw	r24, r28
     906:	01 96       	adiw	r24, 0x01	; 1
     908:	37 dd       	rcall	.-1426   	; 0x378 <reset_char_array>
     90a:	73 94       	inc	r7
     90c:	07 2d       	mov	r16, r7
     90e:	10 e0       	ldi	r17, 0x00	; 0
     910:	e0 16       	cp	r14, r16
     912:	f1 06       	cpc	r15, r17
     914:	d4 f6       	brge	.-76     	; 0x8ca <data_to_char+0x4e>
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	0f 90       	pop	r0
     91a:	0f 90       	pop	r0
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	1f 91       	pop	r17
     928:	0f 91       	pop	r16
     92a:	ff 90       	pop	r15
     92c:	ef 90       	pop	r14
     92e:	df 90       	pop	r13
     930:	cf 90       	pop	r12
     932:	bf 90       	pop	r11
     934:	af 90       	pop	r10
     936:	9f 90       	pop	r9
     938:	8f 90       	pop	r8
     93a:	7f 90       	pop	r7
     93c:	08 95       	ret

0000093e <at_rf_status>:
     93e:	8a e3       	ldi	r24, 0x3A	; 58
     940:	94 e0       	ldi	r25, 0x04	; 4
     942:	cc de       	rcall	.-616    	; 0x6dc <tx_at_response>
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	08 95       	ret

00000948 <at_rf_gprs>:
     948:	81 e3       	ldi	r24, 0x31	; 49
     94a:	94 e0       	ldi	r25, 0x04	; 4
     94c:	c7 de       	rcall	.-626    	; 0x6dc <tx_at_response>
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	08 95       	ret

00000952 <at_rf_connect>:
     952:	cf 92       	push	r12
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	68 94       	set
     964:	ee 24       	eor	r14, r14
     966:	e2 f8       	bld	r14, 2
     968:	09 ee       	ldi	r16, 0xE9	; 233
     96a:	13 e0       	ldi	r17, 0x03	; 3
     96c:	ff 24       	eor	r15, r15
     96e:	f3 94       	inc	r15
     970:	0f 2e       	mov	r0, r31
     972:	f3 e0       	ldi	r31, 0x03	; 3
     974:	df 2e       	mov	r13, r31
     976:	f0 2d       	mov	r31, r0
     978:	68 94       	set
     97a:	cc 24       	eor	r12, r12
     97c:	c1 f8       	bld	r12, 1
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	61 f1       	breq	.+88     	; 0x9da <at_rf_connect+0x88>
     982:	28 f4       	brcc	.+10     	; 0x98e <at_rf_connect+0x3c>
     984:	88 23       	and	r24, r24
     986:	49 f0       	breq	.+18     	; 0x99a <at_rf_connect+0x48>
     988:	81 30       	cpi	r24, 0x01	; 1
     98a:	b9 f0       	breq	.+46     	; 0x9ba <at_rf_connect+0x68>
     98c:	f8 cf       	rjmp	.-16     	; 0x97e <at_rf_connect+0x2c>
     98e:	83 30       	cpi	r24, 0x03	; 3
     990:	59 f1       	breq	.+86     	; 0x9e8 <at_rf_connect+0x96>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	09 f4       	brne	.+2      	; 0x998 <at_rf_connect+0x46>
     996:	3a c0       	rjmp	.+116    	; 0xa0c <at_rf_connect+0xba>
     998:	f2 cf       	rjmp	.-28     	; 0x97e <at_rf_connect+0x2c>
     99a:	cf e8       	ldi	r28, 0x8F	; 143
     99c:	d3 e0       	ldi	r29, 0x03	; 3
     99e:	ce 01       	movw	r24, r28
     9a0:	9d de       	rcall	.-710    	; 0x6dc <tx_at_response>
     9a2:	29 96       	adiw	r28, 0x09	; 9
     9a4:	0c 17       	cp	r16, r28
     9a6:	1d 07       	cpc	r17, r29
     9a8:	d1 f7       	brne	.-12     	; 0x99e <at_rf_connect+0x4c>
     9aa:	88 e2       	ldi	r24, 0x28	; 40
     9ac:	94 e0       	ldi	r25, 0x04	; 4
     9ae:	96 de       	rcall	.-724    	; 0x6dc <tx_at_response>
     9b0:	81 11       	cpse	r24, r1
     9b2:	22 c0       	rjmp	.+68     	; 0x9f8 <at_rf_connect+0xa6>
     9b4:	5a de       	rcall	.-844    	; 0x66a <at_get_radio_network_time>
     9b6:	8f 2d       	mov	r24, r15
     9b8:	e2 cf       	rjmp	.-60     	; 0x97e <at_rf_connect+0x2c>
     9ba:	8b ef       	ldi	r24, 0xFB	; 251
     9bc:	93 e0       	ldi	r25, 0x03	; 3
     9be:	8e de       	rcall	.-740    	; 0x6dc <tx_at_response>
     9c0:	88 23       	and	r24, r24
     9c2:	e1 f0       	breq	.+56     	; 0x9fc <at_rf_connect+0xaa>
     9c4:	c8 01       	movw	r24, r16
     9c6:	8a de       	rcall	.-748    	; 0x6dc <tx_at_response>
     9c8:	88 23       	and	r24, r24
     9ca:	d1 f0       	breq	.+52     	; 0xa00 <at_rf_connect+0xae>
     9cc:	82 ef       	ldi	r24, 0xF2	; 242
     9ce:	93 e0       	ldi	r25, 0x03	; 3
     9d0:	85 de       	rcall	.-758    	; 0x6dc <tx_at_response>
     9d2:	88 23       	and	r24, r24
     9d4:	b9 f0       	breq	.+46     	; 0xa04 <at_rf_connect+0xb2>
     9d6:	8c 2d       	mov	r24, r12
     9d8:	d2 cf       	rjmp	.-92     	; 0x97e <at_rf_connect+0x2c>
     9da:	8d e0       	ldi	r24, 0x0D	; 13
     9dc:	94 e0       	ldi	r25, 0x04	; 4
     9de:	7e de       	rcall	.-772    	; 0x6dc <tx_at_response>
     9e0:	88 23       	and	r24, r24
     9e2:	91 f0       	breq	.+36     	; 0xa08 <at_rf_connect+0xb6>
     9e4:	8f 2d       	mov	r24, r15
     9e6:	cb cf       	rjmp	.-106    	; 0x97e <at_rf_connect+0x2c>
     9e8:	86 e1       	ldi	r24, 0x16	; 22
     9ea:	94 e0       	ldi	r25, 0x04	; 4
     9ec:	77 de       	rcall	.-786    	; 0x6dc <tx_at_response>
     9ee:	8f e1       	ldi	r24, 0x1F	; 31
     9f0:	94 e0       	ldi	r25, 0x04	; 4
     9f2:	74 de       	rcall	.-792    	; 0x6dc <tx_at_response>
     9f4:	8e 2d       	mov	r24, r14
     9f6:	c3 cf       	rjmp	.-122    	; 0x97e <at_rf_connect+0x2c>
     9f8:	8f 2d       	mov	r24, r15
     9fa:	c1 cf       	rjmp	.-126    	; 0x97e <at_rf_connect+0x2c>
     9fc:	8d 2d       	mov	r24, r13
     9fe:	bf cf       	rjmp	.-130    	; 0x97e <at_rf_connect+0x2c>
     a00:	8d 2d       	mov	r24, r13
     a02:	bd cf       	rjmp	.-134    	; 0x97e <at_rf_connect+0x2c>
     a04:	8d 2d       	mov	r24, r13
     a06:	bb cf       	rjmp	.-138    	; 0x97e <at_rf_connect+0x2c>
     a08:	8e 2d       	mov	r24, r14
     a0a:	b9 cf       	rjmp	.-142    	; 0x97e <at_rf_connect+0x2c>
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	1f 91       	pop	r17
     a14:	0f 91       	pop	r16
     a16:	ff 90       	pop	r15
     a18:	ef 90       	pop	r14
     a1a:	df 90       	pop	r13
     a1c:	cf 90       	pop	r12
     a1e:	08 95       	ret

00000a20 <tx>:
     a20:	0f 93       	push	r16
     a22:	1f 93       	push	r17
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	ec 01       	movw	r28, r24
     a2a:	8b 01       	movw	r16, r22
     a2c:	84 e7       	ldi	r24, 0x74	; 116
     a2e:	93 e0       	ldi	r25, 0x03	; 3
     a30:	55 de       	rcall	.-854    	; 0x6dc <tx_at_response>
     a32:	81 30       	cpi	r24, 0x01	; 1
     a34:	61 f0       	breq	.+24     	; 0xa4e <tx+0x2e>
     a36:	b8 01       	movw	r22, r16
     a38:	ce 01       	movw	r24, r28
     a3a:	e5 de       	rcall	.-566    	; 0x806 <tx_data_response>
     a3c:	8d e7       	ldi	r24, 0x7D	; 125
     a3e:	93 e0       	ldi	r25, 0x03	; 3
     a40:	4d de       	rcall	.-870    	; 0x6dc <tx_at_response>
     a42:	86 e8       	ldi	r24, 0x86	; 134
     a44:	93 e0       	ldi	r25, 0x03	; 3
     a46:	4a de       	rcall	.-876    	; 0x6dc <tx_at_response>
     a48:	89 e5       	ldi	r24, 0x59	; 89
     a4a:	93 e0       	ldi	r25, 0x03	; 3
     a4c:	47 de       	rcall	.-882    	; 0x6dc <tx_at_response>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	1f 91       	pop	r17
     a56:	0f 91       	pop	r16
     a58:	08 95       	ret

00000a5a <at_rf_disconnect>:
     a5a:	82 e6       	ldi	r24, 0x62	; 98
     a5c:	93 e0       	ldi	r25, 0x03	; 3
     a5e:	3e de       	rcall	.-900    	; 0x6dc <tx_at_response>
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	08 95       	ret

00000a64 <__vector_20>:
     a64:	1f 92       	push	r1
     a66:	0f 92       	push	r0
     a68:	0f b6       	in	r0, 0x3f	; 63
     a6a:	0f 92       	push	r0
     a6c:	11 24       	eor	r1, r1
     a6e:	2f 93       	push	r18
     a70:	3f 93       	push	r19
     a72:	4f 93       	push	r20
     a74:	5f 93       	push	r21
     a76:	6f 93       	push	r22
     a78:	7f 93       	push	r23
     a7a:	8f 93       	push	r24
     a7c:	9f 93       	push	r25
     a7e:	af 93       	push	r26
     a80:	bf 93       	push	r27
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	ef 93       	push	r30
     a88:	ff 93       	push	r31
     a8a:	c0 91 d1 04 	lds	r28, 0x04D1	; 0x8004d1 <response_counter>
     a8e:	d0 e0       	ldi	r29, 0x00	; 0
     a90:	c7 52       	subi	r28, 0x27	; 39
     a92:	db 4f       	sbci	r29, 0xFB	; 251
     a94:	80 ec       	ldi	r24, 0xC0	; 192
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	39 db       	rcall	.-2446   	; 0x10c <usart_getchar>
     a9a:	88 83       	st	Y, r24
     a9c:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <response_counter>
     aa0:	8f 5f       	subi	r24, 0xFF	; 255
     aa2:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <response_counter>
     aa6:	10 92 c9 04 	sts	0x04C9, r1	; 0x8004c9 <response_timeout_counter>
     aaa:	10 92 ca 04 	sts	0x04CA, r1	; 0x8004ca <response_timeout_counter+0x1>
     aae:	10 92 cb 04 	sts	0x04CB, r1	; 0x8004cb <response_timeout_counter+0x2>
     ab2:	10 92 cc 04 	sts	0x04CC, r1	; 0x8004cc <response_timeout_counter+0x3>
     ab6:	ff 91       	pop	r31
     ab8:	ef 91       	pop	r30
     aba:	df 91       	pop	r29
     abc:	cf 91       	pop	r28
     abe:	bf 91       	pop	r27
     ac0:	af 91       	pop	r26
     ac2:	9f 91       	pop	r25
     ac4:	8f 91       	pop	r24
     ac6:	7f 91       	pop	r23
     ac8:	6f 91       	pop	r22
     aca:	5f 91       	pop	r21
     acc:	4f 91       	pop	r20
     ace:	3f 91       	pop	r19
     ad0:	2f 91       	pop	r18
     ad2:	0f 90       	pop	r0
     ad4:	0f be       	out	0x3f, r0	; 63
     ad6:	0f 90       	pop	r0
     ad8:	1f 90       	pop	r1
     ada:	18 95       	reti

00000adc <__vector_8>:

//main_function()
//ISR(TC0_vect) // 
ISR(WDT_vect)
{
     adc:	1f 92       	push	r1
     ade:	0f 92       	push	r0
     ae0:	0f b6       	in	r0, 0x3f	; 63
     ae2:	0f 92       	push	r0
     ae4:	11 24       	eor	r1, r1
     ae6:	2f 92       	push	r2
     ae8:	3f 92       	push	r3
     aea:	4f 92       	push	r4
     aec:	5f 92       	push	r5
     aee:	6f 92       	push	r6
     af0:	7f 92       	push	r7
     af2:	8f 92       	push	r8
     af4:	9f 92       	push	r9
     af6:	af 92       	push	r10
     af8:	bf 92       	push	r11
     afa:	cf 92       	push	r12
     afc:	df 92       	push	r13
     afe:	ef 92       	push	r14
     b00:	ff 92       	push	r15
     b02:	0f 93       	push	r16
     b04:	1f 93       	push	r17
     b06:	2f 93       	push	r18
     b08:	3f 93       	push	r19
     b0a:	4f 93       	push	r20
     b0c:	5f 93       	push	r21
     b0e:	6f 93       	push	r22
     b10:	7f 93       	push	r23
     b12:	8f 93       	push	r24
     b14:	9f 93       	push	r25
     b16:	af 93       	push	r26
     b18:	bf 93       	push	r27
     b1a:	ef 93       	push	r30
     b1c:	ff 93       	push	r31
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	cd b7       	in	r28, 0x3d	; 61
     b24:	de b7       	in	r29, 0x3e	; 62
     b26:	25 97       	sbiw	r28, 0x05	; 5
     b28:	de bf       	out	0x3e, r29	; 62
     b2a:	cd bf       	out	0x3d, r28	; 61
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     b2c:	0f b6       	in	r0, 0x3f	; 63
     b2e:	f8 94       	cli
     b30:	a8 95       	wdr
     b32:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     b36:	88 61       	ori	r24, 0x18	; 24
     b38:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     b3c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     b40:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
	wdt_counter++; //watchdog set at 1 second timeout
     b42:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     b46:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     b4a:	01 96       	adiw	r24, 0x01	; 1
     b4c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     b50:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	
	#ifdef DEBUG
		usart_tx_at(USART_TERMINAL, RESPONSE_FOOTER); //DEBUG
     b54:	6d ec       	ldi	r22, 0xCD	; 205
     b56:	72 e0       	ldi	r23, 0x02	; 2
     b58:	88 ec       	ldi	r24, 0xC8	; 200
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	e9 db       	rcall	.-2094   	; 0x330 <usart_tx_at>
		usart_putchar(USART_TERMINAL, (0x30+wdt_counter)); //DEBUG
     b5e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     b62:	60 5d       	subi	r22, 0xD0	; 208
     b64:	88 ec       	ldi	r24, 0xC8	; 200
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	ca da       	rcall	.-2668   	; 0xfe <usart_putchar>
		usart_tx_at(USART_TERMINAL, RESPONSE_FOOTER); //DEBUG	
     b6a:	6d ec       	ldi	r22, 0xCD	; 205
     b6c:	72 e0       	ldi	r23, 0x02	; 2
     b6e:	88 ec       	ldi	r24, 0xC8	; 200
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	de db       	rcall	.-2116   	; 0x330 <usart_tx_at>
	#endif // DEBUG
	
	if (wdt_counter < WAKEUP_RATE)
     b74:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     b78:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     b7c:	89 2b       	or	r24, r25
     b7e:	09 f4       	brne	.+2      	; 0xb82 <__vector_8+0xa6>
     b80:	83 c1       	rjmp	.+774    	; 0xe88 <__vector_8+0x3ac>
	{
		goto END;
	} else {wdt_counter = 0;} //reset counter if limit is reached.
     b82:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
     b86:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	
	RTC_ISR_ACTIVE = 1;
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <RTC_ISR_ACTIVE>
				controller_next_state = READ_EXT_DATA;
				RTC_ISR_ACTIVE = 0; //FINISHED, break LOOP!
				break;
			
			default:
				controller_next_state = RESET_REGISTERS; //TRY RESET.
     b90:	0f 2e       	mov	r0, r31
     b92:	fb e0       	ldi	r31, 0x0B	; 11
     b94:	5f 2e       	mov	r5, r31
     b96:	f0 2d       	mov	r31, r0
 				{
// 					//tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_DISNNECT); //set failure status
// 					controller_next_state = RF_POWER_OFF; // RF_DISCONNECT; //if failure go to disconnect
// 					break;
 				}
				controller_next_state = RF_POWER_OFF;
     b98:	0f 2e       	mov	r0, r31
     b9a:	fa e0       	ldi	r31, 0x0A	; 10
     b9c:	df 2e       	mov	r13, r31
     b9e:	f0 2d       	mov	r31, r0
			case TX_DATA:
				controller_next_state = RX_DATA;
				break;
			
			case RX_DATA:
				controller_next_state = RF_DISCONNECT;
     ba0:	0f 2e       	mov	r0, r31
     ba2:	f9 e0       	ldi	r31, 0x09	; 9
     ba4:	2f 2e       	mov	r2, r31
     ba6:	f0 2d       	mov	r31, r0
				}
				controller_next_state = TX_DATA;
				break;
			
			case TX_DATA:
				controller_next_state = RX_DATA;
     ba8:	68 94       	set
     baa:	33 24       	eor	r3, r3
     bac:	33 f8       	bld	r3, 3
				}
				controller_next_state = GENERATE_PACKAGE;
				break;
			
			case GENERATE_PACKAGE:
				transfer_data_package_counter = 2;
     bae:	68 94       	set
     bb0:	cc 24       	eor	r12, r12
     bb2:	c1 f8       	bld	r12, 1
     bb4:	41 2c       	mov	r4, r1
				}
				 
				at_rf_gprs();
				if (at_rf_connect(0) != 0) //Connect to network. MAKE STATUS REPORT FROM THIS!!!!!!!
				{
					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_CONNECT); //set failure status
     bb6:	0f 2e       	mov	r0, r31
     bb8:	fe e5       	ldi	r31, 0x5E	; 94
     bba:	ef 2e       	mov	r14, r31
     bbc:	f5 e0       	ldi	r31, 0x05	; 5
     bbe:	ff 2e       	mov	r15, r31
     bc0:	f0 2d       	mov	r31, r0
			
			case STORE_EXT_MEM:
				tx_data[POSITION_TIME] = 0; //reset accumulation counter if something???????????????
				
				#ifdef DEBUG
					char myval[5] = "";
     bc2:	3e 01       	movw	r6, r28
     bc4:	83 e0       	ldi	r24, 0x03	; 3
     bc6:	68 0e       	add	r6, r24
     bc8:	71 1c       	adc	r7, r1
				controller_next_state = MEASURE;
				break;
			
			case MEASURE:
				PRR0 &= ~(1<<PRADC); //enable adc clock
				ADCSRA |= (1<<ADEN);
     bca:	0a e7       	ldi	r16, 0x7A	; 122
     bcc:	10 e0       	ldi	r17, 0x00	; 0
		ADCSRB &= ~(1 << MUX5);
	}

	ADMUX = ((uint8_t)input & ADC_MUX_MASK) | (uint8_t)vref;
#else
	ADMUX = (uint8_t)input | (uint8_t)vref;
     bce:	0f 2e       	mov	r0, r31
     bd0:	fc e7       	ldi	r31, 0x7C	; 124
     bd2:	8f 2e       	mov	r8, r31
     bd4:	91 2c       	mov	r9, r1
     bd6:	f0 2d       	mov	r31, r0
	ADCSRA |= (1 << ADSC);

	while ((ADCSRA & (1 << ADSC))) {
		/* wait for conversion complete */
	}
	return ADC;
     bd8:	0f 2e       	mov	r0, r31
     bda:	f8 e7       	ldi	r31, 0x78	; 120
     bdc:	af 2e       	mov	r10, r31
     bde:	b1 2c       	mov	r11, r1
     be0:	f0 2d       	mov	r31, r0
	
	RTC_ISR_ACTIVE = 1;
	while (RTC_ISR_ACTIVE == 1)
	{
		
		switch(controller_state) {
     be2:	e0 91 d5 04 	lds	r30, 0x04D5	; 0x8004d5 <controller_state>
     be6:	8e 2f       	mov	r24, r30
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	8c 30       	cpi	r24, 0x0C	; 12
     bec:	91 05       	cpc	r25, r1
     bee:	08 f0       	brcs	.+2      	; 0xbf2 <__vector_8+0x116>
     bf0:	40 c1       	rjmp	.+640    	; 0xe72 <__vector_8+0x396>
     bf2:	fc 01       	movw	r30, r24
     bf4:	e2 5c       	subi	r30, 0xC2	; 194
     bf6:	ff 4f       	sbci	r31, 0xFF	; 255
     bf8:	f2 c6       	rjmp	.+3556   	; 0x19de <__tablejump2__>
			
			case READ_EXT_DATA:
				controller_next_state = MEASURE;
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <controller_next_state>
				break;
     c00:	3a c1       	rjmp	.+628    	; 0xe76 <__vector_8+0x39a>
			
			case MEASURE:
				PRR0 &= ~(1<<PRADC); //enable adc clock
     c02:	e4 e6       	ldi	r30, 0x64	; 100
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	8e 7f       	andi	r24, 0xFE	; 254
				ADCSRA |= (1<<ADEN);
     c0a:	80 83       	st	Z, r24
     c0c:	f8 01       	movw	r30, r16
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL///////////////////////////
				loadcell_power_on();
     c0e:	80 81       	ld	r24, Z
     c10:	80 68       	ori	r24, 0x80	; 128
				tx_data[POSITION_CURRENT] = adc_10_to_12_bits(ADC_MUX_ADC0); //NEED TO FIX ADC CONVERSINS!!!!!!!!
     c12:	80 83       	st	Z, r24
     c14:	e9 db       	rcall	.-2094   	; 0x3e8 <loadcell_power_on>
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	8f dc       	rcall	.-1762   	; 0x538 <adc_10_to_12_bits>
     c1a:	f7 01       	movw	r30, r14
     c1c:	91 83       	std	Z+1, r25	; 0x01
		ADCSRB &= ~(1 << MUX5);
	}

	ADMUX = ((uint8_t)input & ADC_MUX_MASK) | (uint8_t)vref;
#else
	ADMUX = (uint8_t)input | (uint8_t)vref;
     c1e:	80 83       	st	Z, r24
     c20:	8e e5       	ldi	r24, 0x5E	; 94
     c22:	f4 01       	movw	r30, r8
#endif
	ADCSRA |= (1 << ADSC);
     c24:	80 83       	st	Z, r24
     c26:	f8 01       	movw	r30, r16
     c28:	80 81       	ld	r24, Z
     c2a:	80 64       	ori	r24, 0x40	; 64

	while ((ADCSRA & (1 << ADSC))) {
     c2c:	80 83       	st	Z, r24
     c2e:	f8 01       	movw	r30, r16
     c30:	80 81       	ld	r24, Z
		/* wait for conversion complete */
	}
	return ADC;
     c32:	86 fd       	sbrc	r24, 6
     c34:	fc cf       	rjmp	.-8      	; 0xc2e <__vector_8+0x152>
     c36:	f5 01       	movw	r30, r10
// 				tx_data[POSITION_ANA3] = adc_result_average(ADC_MUX_ADC3, ADC_NUM_AVG); //
// 				tx_data[POSITION_ANA4] = adc_result_average(ADC_MUX_ADC4, ADC_NUM_AVG); //
// 				tx_data[POSITION_ANA5] = adc_result_average(ADC_MUX_ADC5, ADC_NUM_AVG); //
// 				//tx_data[POSITION_TEMP] = adc_result_average(ADC_MUX_TEMPSENSE, 1); //PIN CHANGE HAVE NO EFFECT ON ADCB
 				//tx_data[POSITION_VDD] = adc_result_average(ADC_MUX_1V1, 1); //PIN CHANGE HAVE NO EFFECT ON ADCB
				 tx_data[POSITION_VDD] = ((1.05*1024)/(adc_read_10bit(ADC_MUX_1V1, ADC_VREF_AVCC)))*1000; //PIN CHANGE HAVE NO EFFECT ON ADCB
     c38:	60 81       	ld	r22, Z
     c3a:	71 81       	ldd	r23, Z+1	; 0x01
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	bb d5       	rcall	.+2934   	; 0x17b8 <__floatunsisf>
     c42:	9b 01       	movw	r18, r22
     c44:	ac 01       	movw	r20, r24
     c46:	66 e6       	ldi	r22, 0x66	; 102
     c48:	76 e6       	ldi	r23, 0x66	; 102
     c4a:	86 e8       	ldi	r24, 0x86	; 134
     c4c:	94 e4       	ldi	r25, 0x44	; 68
     c4e:	20 d5       	rcall	.+2624   	; 0x1690 <__divsf3>
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	4a e7       	ldi	r20, 0x7A	; 122
     c56:	54 e4       	ldi	r21, 0x44	; 68
     c58:	3d d6       	rcall	.+3194   	; 0x18d4 <__mulsf3>
     c5a:	82 d5       	rcall	.+2820   	; 0x1760 <__fixunssfsi>
     c5c:	f7 01       	movw	r30, r14
				
				ADCSRA &= ~(1<<ADEN);
     c5e:	77 87       	std	Z+15, r23	; 0x0f
     c60:	66 87       	std	Z+14, r22	; 0x0e
     c62:	f8 01       	movw	r30, r16
     c64:	80 81       	ld	r24, Z
				PRR0 |= (1<<PRADC); //disable ADC clock
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	80 83       	st	Z, r24
     c6a:	e4 e6       	ldi	r30, 0x64	; 100
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
				 
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL///////////////////////////
				loadcell_power_off();
     c70:	81 60       	ori	r24, 0x01	; 1
     c72:	80 83       	st	Z, r24
				//////////////////////////////////////////////////////////////////////////
				
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				accu_data += tx_data[POSITION_CURRENT]; //controller_measure(9, &tx_data); //measure with averaging, and accumulate.
     c74:	c0 db       	rcall	.-2176   	; 0x3f6 <loadcell_power_off>
     c76:	f7 01       	movw	r30, r14
     c78:	20 81       	ld	r18, Z
     c7a:	31 81       	ldd	r19, Z+1	; 0x01
     c7c:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <accu_data>
     c80:	90 91 c6 04 	lds	r25, 0x04C6	; 0x8004c6 <accu_data+0x1>
     c84:	a0 91 c7 04 	lds	r26, 0x04C7	; 0x8004c7 <accu_data+0x2>
     c88:	b0 91 c8 04 	lds	r27, 0x04C8	; 0x8004c8 <accu_data+0x3>
     c8c:	82 0f       	add	r24, r18
     c8e:	93 1f       	adc	r25, r19
     c90:	a1 1d       	adc	r26, r1
     c92:	b1 1d       	adc	r27, r1
     c94:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <accu_data>
     c98:	90 93 c6 04 	sts	0x04C6, r25	; 0x8004c6 <accu_data+0x1>
     c9c:	a0 93 c7 04 	sts	0x04C7, r26	; 0x8004c7 <accu_data+0x2>
				loadcell_min_max_tran(tx_data[POSITION_CURRENT], &tx_data); //check if new value should be stored in min, max and tran.
     ca0:	b0 93 c8 04 	sts	0x04C8, r27	; 0x8004c8 <accu_data+0x3>
     ca4:	80 81       	ld	r24, Z
     ca6:	91 81       	ldd	r25, Z+1	; 0x01
     ca8:	b7 01       	movw	r22, r14
				tx_data[POSITION_PREV] = tx_data[POSITION_CURRENT]; //store adc value for next measurement.
     caa:	03 db       	rcall	.-2554   	; 0x2b2 <loadcell_min_max_tran>
     cac:	f7 01       	movw	r30, r14
     cae:	80 81       	ld	r24, Z
     cb0:	91 81       	ldd	r25, Z+1	; 0x01
     cb2:	93 83       	std	Z+3, r25	; 0x03
				///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				
				transmit_counter++;		
     cb4:	82 83       	std	Z+2, r24	; 0x02
     cb6:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <transmit_counter>
     cba:	90 91 d3 04 	lds	r25, 0x04D3	; 0x8004d3 <transmit_counter+0x1>
     cbe:	01 96       	adiw	r24, 0x01	; 1
     cc0:	90 93 d3 04 	sts	0x04D3, r25	; 0x8004d3 <transmit_counter+0x1>
     cc4:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <transmit_counter>
				tx_data[POSITION_TIME] = transmit_counter; //increase timestamp counter.
     cc8:	93 8b       	std	Z+19, r25	; 0x13
			
				if (tx_data[POSITION_TIME] >= (TRANSMIT_RATE/WAKEUP_RATE)) //if accumulation limit is reached.
     cca:	82 8b       	std	Z+18, r24	; 0x12
     ccc:	82 89       	ldd	r24, Z+18	; 0x12
     cce:	93 89       	ldd	r25, Z+19	; 0x13
     cd0:	86 39       	cpi	r24, 0x96	; 150
     cd2:	91 05       	cpc	r25, r1
				{
					transmit_counter = 0; //reset counter
     cd4:	40 f0       	brcs	.+16     	; 0xce6 <__vector_8+0x20a>
     cd6:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <transmit_counter+0x1>
     cda:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <transmit_counter>
					controller_next_state = CALC; //limit reached, go to next
     cde:	82 e0       	ldi	r24, 0x02	; 2
     ce0:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <controller_next_state>
					} else {
					controller_next_state = READ_EXT_DATA; //Start from top again
     ce4:	c8 c0       	rjmp	.+400    	; 0xe76 <__vector_8+0x39a>
     ce6:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <controller_next_state>
					RTC_ISR_ACTIVE = 0; //Break loop and go to sleep again
     cea:	10 92 c4 04 	sts	0x04C4, r1	; 0x8004c4 <RTC_ISR_ACTIVE>
				}
				break;
			
			case CALC:
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				tx_data[POSITION_AVG] = controller_calc_avg(accu_data, tx_data[POSITION_TIME]); //calc and store average.
     cee:	c3 c0       	rjmp	.+390    	; 0xe76 <__vector_8+0x39a>
     cf0:	f7 01       	movw	r30, r14


uint16_t controller_calc_avg(uint32_t data, uint16_t cnt) {
	uint16_t avg = 0;
	
	avg = data/cnt;
     cf2:	22 89       	ldd	r18, Z+18	; 0x12
     cf4:	33 89       	ldd	r19, Z+19	; 0x13
     cf6:	40 e0       	ldi	r20, 0x00	; 0
     cf8:	50 e0       	ldi	r21, 0x00	; 0
     cfa:	60 91 c5 04 	lds	r22, 0x04C5	; 0x8004c5 <accu_data>
     cfe:	70 91 c6 04 	lds	r23, 0x04C6	; 0x8004c6 <accu_data+0x1>
     d02:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <accu_data+0x2>
     d06:	90 91 c8 04 	lds	r25, 0x04C8	; 0x8004c8 <accu_data+0x3>
				}
				break;
			
			case CALC:
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				tx_data[POSITION_AVG] = controller_calc_avg(accu_data, tx_data[POSITION_TIME]); //calc and store average.
     d0a:	47 d6       	rcall	.+3214   	; 0x199a <__udivmodsi4>
     d0c:	f7 01       	movw	r30, r14
     d0e:	35 83       	std	Z+5, r19	; 0x05
				accu_data = 0; //reset parameters
     d10:	24 83       	std	Z+4, r18	; 0x04
     d12:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <accu_data>
     d16:	10 92 c6 04 	sts	0x04C6, r1	; 0x8004c6 <accu_data+0x1>
     d1a:	10 92 c7 04 	sts	0x04C7, r1	; 0x8004c7 <accu_data+0x2>
     d1e:	10 92 c8 04 	sts	0x04C8, r1	; 0x8004c8 <accu_data+0x3>
				///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				controller_next_state = STORE_EXT_MEM;
     d22:	83 e0       	ldi	r24, 0x03	; 3
     d24:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <controller_next_state>
				break;
			
			case STORE_EXT_MEM:
				tx_data[POSITION_TIME] = 0; //reset accumulation counter if something???????????????
     d28:	a6 c0       	rjmp	.+332    	; 0xe76 <__vector_8+0x39a>
				
				#ifdef DEBUG
					char myval[5] = "";
     d2a:	f7 01       	movw	r30, r14
     d2c:	13 8a       	std	Z+19, r1	; 0x13
     d2e:	12 8a       	std	Z+18, r1	; 0x12
     d30:	1a 82       	std	Y+2, r1	; 0x02
     d32:	19 82       	std	Y+1, r1	; 0x01
     d34:	83 e0       	ldi	r24, 0x03	; 3
					reset_char_array(myval, 5);
     d36:	f3 01       	movw	r30, r6
     d38:	11 92       	st	Z+, r1
     d3a:	8a 95       	dec	r24
     d3c:	e9 f7       	brne	.-6      	; 0xd38 <__vector_8+0x25c>
					itoa(tx_data[POSITION_AVG], myval, 10);
     d3e:	65 e0       	ldi	r22, 0x05	; 5
     d40:	ce 01       	movw	r24, r28
     d42:	01 96       	adiw	r24, 0x01	; 1
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     d44:	19 db       	rcall	.-2510   	; 0x378 <reset_char_array>
     d46:	f7 01       	movw	r30, r14
     d48:	84 81       	ldd	r24, Z+4	; 0x04
     d4a:	95 81       	ldd	r25, Z+5	; 0x05
					usart_tx_at(USART_TERMINAL, RESPONSE_HEADER);
     d4c:	4d 2d       	mov	r20, r13
     d4e:	be 01       	movw	r22, r28
     d50:	6f 5f       	subi	r22, 0xFF	; 255
     d52:	7f 4f       	sbci	r23, 0xFF	; 255
					usart_tx_at(USART_TERMINAL, myval);
     d54:	b5 d6       	rcall	.+3434   	; 0x1ac0 <__itoa_ncheck>
     d56:	6d ec       	ldi	r22, 0xCD	; 205
     d58:	72 e0       	ldi	r23, 0x02	; 2
     d5a:	88 ec       	ldi	r24, 0xC8	; 200
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	e8 da       	rcall	.-2608   	; 0x330 <usart_tx_at>
					usart_tx_at(USART_TERMINAL, RESPONSE_FOOTER);
     d60:	be 01       	movw	r22, r28
     d62:	6f 5f       	subi	r22, 0xFF	; 255
     d64:	7f 4f       	sbci	r23, 0xFF	; 255
     d66:	88 ec       	ldi	r24, 0xC8	; 200
				#endif // DEBUG
								
				controller_next_state = RF_POWER_ON;
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	e2 da       	rcall	.-2620   	; 0x330 <usart_tx_at>
     d6c:	6d ec       	ldi	r22, 0xCD	; 205
				break;
     d6e:	72 e0       	ldi	r23, 0x02	; 2
			
			case RF_POWER_ON:
				if (radio_power_on() == 1) //power on and check if it fails
     d70:	88 ec       	ldi	r24, 0xC8	; 200
     d72:	90 e0       	ldi	r25, 0x00	; 0
					
// 					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_POWER_ON); //set failure status
// 					controller_next_state = RF_POWER_OFF; //if failure go to power off
// 					break;
 				}
				controller_next_state = RF_CONNECT;
     d74:	dd da       	rcall	.-2630   	; 0x330 <usart_tx_at>
     d76:	84 e0       	ldi	r24, 0x04	; 4
     d78:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <controller_next_state>
				break;
			
			case RF_CONNECT: //NEED MORE POWER!!!!!!
				if (at_rf_status() != 0)
     d7c:	7c c0       	rjmp	.+248    	; 0xe76 <__vector_8+0x39a>
     d7e:	3d db       	rcall	.-2438   	; 0x3fa <radio_power_on>
     d80:	85 e0       	ldi	r24, 0x05	; 5
     d82:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <controller_next_state>
				{
					controller_next_state = RF_POWER_OFF; // RF_DISCONNECT; //if failure go to disconnect
     d86:	77 c0       	rjmp	.+238    	; 0xe76 <__vector_8+0x39a>
					break;
     d88:	da dd       	rcall	.-1100   	; 0x93e <at_rf_status>
				}
				 
				at_rf_gprs();
     d8a:	88 23       	and	r24, r24
     d8c:	19 f0       	breq	.+6      	; 0xd94 <__vector_8+0x2b8>
				if (at_rf_connect(0) != 0) //Connect to network. MAKE STATUS REPORT FROM THIS!!!!!!!
     d8e:	d0 92 d4 04 	sts	0x04D4, r13	; 0x8004d4 <controller_next_state>
     d92:	71 c0       	rjmp	.+226    	; 0xe76 <__vector_8+0x39a>
     d94:	d9 dd       	rcall	.-1102   	; 0x948 <at_rf_gprs>
     d96:	80 e0       	ldi	r24, 0x00	; 0
				{
					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_CONNECT); //set failure status
     d98:	dc dd       	rcall	.-1096   	; 0x952 <at_rf_connect>
     d9a:	88 23       	and	r24, r24
     d9c:	49 f0       	breq	.+18     	; 0xdb0 <__vector_8+0x2d4>
     d9e:	f7 01       	movw	r30, r14
     da0:	80 a1       	ldd	r24, Z+32	; 0x20
					controller_next_state = RF_POWER_OFF; // RF_DISCONNECT; //if failure go to disconnect
     da2:	91 a1       	ldd	r25, Z+33	; 0x21
					break;
     da4:	82 60       	ori	r24, 0x02	; 2
				}
				controller_next_state = GENERATE_PACKAGE;
     da6:	91 a3       	std	Z+33, r25	; 0x21
     da8:	80 a3       	std	Z+32, r24	; 0x20
     daa:	d0 92 d4 04 	sts	0x04D4, r13	; 0x8004d4 <controller_next_state>
				break;
			
			case GENERATE_PACKAGE:
				transfer_data_package_counter = 2;
     dae:	63 c0       	rjmp	.+198    	; 0xe76 <__vector_8+0x39a>
     db0:	86 e0       	ldi	r24, 0x06	; 6
     db2:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <controller_next_state>
     db6:	5f c0       	rjmp	.+190    	; 0xe76 <__vector_8+0x39a>
				while (transfer_data_package_counter < 8)
 				{
					data_to_char(&tx_data[transfer_data_package_counter], 1, &tx_data_bytes, TRANSFER_DATA_BASE); //data to ascii
     db8:	c0 92 5c 04 	sts	0x045C, r12	; 0x80045c <__data_end>
     dbc:	40 92 5d 04 	sts	0x045D, r4	; 0x80045d <__data_end+0x1>
     dc0:	8c 2d       	mov	r24, r12
     dc2:	94 2d       	mov	r25, r4
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	2a e0       	ldi	r18, 0x0A	; 10
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	49 e5       	ldi	r20, 0x59	; 89
     dce:	55 e0       	ldi	r21, 0x05	; 5
     dd0:	61 e0       	ldi	r22, 0x01	; 1
     dd2:	82 5a       	subi	r24, 0xA2	; 162
     dd4:	9a 4f       	sbci	r25, 0xFA	; 250
     dd6:	52 dd       	rcall	.-1372   	; 0x87c <data_to_char>
     dd8:	4d 2d       	mov	r20, r13
     dda:	66 ed       	ldi	r22, 0xD6	; 214
					itoa(transfer_data_package_counter, mqtt_sub_topic, 10); //counter to text for sub-topic
					transfer_data_length_package = mqtt_packet(&tx_data_bytes, &tx_data_package, TRANSFER_DATA_SIZE_PACKAGE, &mqtt_sub_topic); //convert ascii data to MQTT package.
     ddc:	74 e0       	ldi	r23, 0x04	; 4
     dde:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <__data_end>
     de2:	90 91 5d 04 	lds	r25, 0x045D	; 0x80045d <__data_end+0x1>
     de6:	6c d6       	rcall	.+3288   	; 0x1ac0 <__itoa_ncheck>
     de8:	26 ed       	ldi	r18, 0xD6	; 214
     dea:	34 e0       	ldi	r19, 0x04	; 4
     dec:	44 e6       	ldi	r20, 0x64	; 100
     dee:	50 e0       	ldi	r21, 0x00	; 0
     df0:	60 e6       	ldi	r22, 0x60	; 96
     df2:	74 e0       	ldi	r23, 0x04	; 4
								
					if (transfer_data_package_counter > 2)
     df4:	89 e5       	ldi	r24, 0x59	; 89
     df6:	95 e0       	ldi	r25, 0x05	; 5
     df8:	aa d3       	rcall	.+1876   	; 0x154e <mqtt_packet>
     dfa:	90 93 5f 04 	sts	0x045F, r25	; 0x80045f <transfer_data_length_package+0x1>
     dfe:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <transfer_data_length_package>
					{
						at_rf_connect(1); ////status for open new connection
     e02:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <__data_end>
					}
					
					tx(&tx_data_package, transfer_data_length_package); //transmit package. GENERATE STATUS FROM THIS.
     e06:	90 91 5d 04 	lds	r25, 0x045D	; 0x80045d <__data_end+0x1>
     e0a:	03 97       	sbiw	r24, 0x03	; 3
     e0c:	14 f0       	brlt	.+4      	; 0xe12 <__vector_8+0x336>
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	a0 dd       	rcall	.-1216   	; 0x952 <at_rf_connect>
     e12:	60 91 5e 04 	lds	r22, 0x045E	; 0x80045e <transfer_data_length_package>
					reset_char_array(&mqtt_sub_topic, 3);
     e16:	70 91 5f 04 	lds	r23, 0x045F	; 0x80045f <transfer_data_length_package+0x1>
// 						itoa(transfer_data_length_package, package_lenght, 10);
// 						strcpy(mystring, package_lenght);
// 						usart_tx_at(USART_TERMINAL, mystring);
					#endif // DEBUG

					transfer_data_package_counter++;
     e1a:	80 e6       	ldi	r24, 0x60	; 96
     e1c:	94 e0       	ldi	r25, 0x04	; 4
     e1e:	00 de       	rcall	.-1024   	; 0xa20 <tx>
     e20:	63 e0       	ldi	r22, 0x03	; 3
     e22:	86 ed       	ldi	r24, 0xD6	; 214
     e24:	94 e0       	ldi	r25, 0x04	; 4
     e26:	a8 da       	rcall	.-2736   	; 0x378 <reset_char_array>
     e28:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <__data_end>
				controller_next_state = GENERATE_PACKAGE;
				break;
			
			case GENERATE_PACKAGE:
				transfer_data_package_counter = 2;
				while (transfer_data_package_counter < 8)
     e2c:	90 91 5d 04 	lds	r25, 0x045D	; 0x80045d <__data_end+0x1>
     e30:	01 96       	adiw	r24, 0x01	; 1
					#endif // DEBUG

					transfer_data_package_counter++;
					
				}
				controller_next_state = TX_DATA;
     e32:	90 93 5d 04 	sts	0x045D, r25	; 0x80045d <__data_end+0x1>
     e36:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <__data_end>
				break;
			
			case TX_DATA:
				controller_next_state = RX_DATA;
     e3a:	88 30       	cpi	r24, 0x08	; 8
     e3c:	91 05       	cpc	r25, r1
				break;
     e3e:	0c f4       	brge	.+2      	; 0xe42 <__vector_8+0x366>
			
			case RX_DATA:
				controller_next_state = RF_DISCONNECT;
     e40:	c1 cf       	rjmp	.-126    	; 0xdc4 <__vector_8+0x2e8>
     e42:	f7 e0       	ldi	r31, 0x07	; 7
				break;
			
			case RF_DISCONNECT:
 				if (at_rf_disconnect() != 0) //Status will not be transmitted, but could probably be stored for later.
     e44:	f0 93 d4 04 	sts	0x04D4, r31	; 0x8004d4 <controller_next_state>
 				{
// 					//tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_DISNNECT); //set failure status
// 					controller_next_state = RF_POWER_OFF; // RF_DISCONNECT; //if failure go to disconnect
// 					break;
 				}
				controller_next_state = RF_POWER_OFF;
     e48:	16 c0       	rjmp	.+44     	; 0xe76 <__vector_8+0x39a>
				break;
     e4a:	30 92 d4 04 	sts	0x04D4, r3	; 0x8004d4 <controller_next_state>
			
			case RF_POWER_OFF:
				radio_power_off_at(); //radio power down
     e4e:	13 c0       	rjmp	.+38     	; 0xe76 <__vector_8+0x39a>
				controller_next_state = RESET_REGISTERS;
     e50:	20 92 d4 04 	sts	0x04D4, r2	; 0x8004d4 <controller_next_state>
				break;
     e54:	10 c0       	rjmp	.+32     	; 0xe76 <__vector_8+0x39a>
			
			case RESET_REGISTERS:
				reset_all_data(); //reset all arrays
     e56:	01 de       	rcall	.-1022   	; 0xa5a <at_rf_disconnect>
     e58:	d0 92 d4 04 	sts	0x04D4, r13	; 0x8004d4 <controller_next_state>
				controller_next_state = READ_EXT_DATA;
     e5c:	0c c0       	rjmp	.+24     	; 0xe76 <__vector_8+0x39a>
				RTC_ISR_ACTIVE = 0; //FINISHED, break LOOP!
     e5e:	31 db       	rcall	.-2462   	; 0x4c2 <radio_power_off_at>
     e60:	50 92 d4 04 	sts	0x04D4, r5	; 0x8004d4 <controller_next_state>
				break;
			
			default:
				controller_next_state = RESET_REGISTERS; //TRY RESET.
     e64:	08 c0       	rjmp	.+16     	; 0xe76 <__vector_8+0x39a>
     e66:	96 da       	rcall	.-2772   	; 0x394 <reset_all_data>
				break;
		}
		
		controller_state = controller_next_state; //NEXT STATE => STATE
     e68:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <controller_next_state>
     e6c:	10 92 c4 04 	sts	0x04C4, r1	; 0x8004c4 <RTC_ISR_ACTIVE>
	{
		goto END;
	} else {wdt_counter = 0;} //reset counter if limit is reached.
	
	RTC_ISR_ACTIVE = 1;
	while (RTC_ISR_ACTIVE == 1)
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <__vector_8+0x39a>
     e72:	50 92 d4 04 	sts	0x04D4, r5	; 0x8004d4 <controller_next_state>
     e76:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <controller_next_state>
		
	}

	END:
	
	wdt_reset();
     e7a:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <controller_state>
	//wdt_enable();
	rtc_init_period(1);
     e7e:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <RTC_ISR_ACTIVE>
     e82:	81 30       	cpi	r24, 0x01	; 1
	return;
	
}
     e84:	09 f4       	brne	.+2      	; 0xe88 <__vector_8+0x3ac>
     e86:	ad ce       	rjmp	.-678    	; 0xbe2 <__vector_8+0x106>
     e88:	a8 95       	wdr
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	91 da       	rcall	.-2782   	; 0x3b2 <rtc_init_period>
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	ff 91       	pop	r31
     ea0:	ef 91       	pop	r30
     ea2:	bf 91       	pop	r27
     ea4:	af 91       	pop	r26
     ea6:	9f 91       	pop	r25
     ea8:	8f 91       	pop	r24
     eaa:	7f 91       	pop	r23
     eac:	6f 91       	pop	r22
     eae:	5f 91       	pop	r21
     eb0:	4f 91       	pop	r20
     eb2:	3f 91       	pop	r19
     eb4:	2f 91       	pop	r18
     eb6:	1f 91       	pop	r17
     eb8:	0f 91       	pop	r16
     eba:	ff 90       	pop	r15
     ebc:	ef 90       	pop	r14
     ebe:	df 90       	pop	r13
     ec0:	cf 90       	pop	r12
     ec2:	bf 90       	pop	r11
     ec4:	af 90       	pop	r10
     ec6:	9f 90       	pop	r9
     ec8:	8f 90       	pop	r8
     eca:	7f 90       	pop	r7
     ecc:	6f 90       	pop	r6
     ece:	5f 90       	pop	r5
     ed0:	4f 90       	pop	r4
     ed2:	3f 90       	pop	r3
     ed4:	2f 90       	pop	r2
     ed6:	0f 90       	pop	r0
     ed8:	0f be       	out	0x3f, r0	; 63
     eda:	0f 90       	pop	r0
     edc:	1f 90       	pop	r1
     ede:	18 95       	reti

00000ee0 <main>:
/*! \brief Main function.
 */
int main(void)
{
	//disables interrupts
	cli();
     ee0:	f8 94       	cli
	
	//sysclk_init();
	PRR0 |= (1<<PRTWI) | (1<<PRTIM2) | (1<<PRTIM0) | (1<<PRTIM1) | (1<<PRSPI) | (1<<PRADC);
     ee2:	c4 e6       	ldi	r28, 0x64	; 100
     ee4:	d0 e0       	ldi	r29, 0x00	; 0
     ee6:	88 81       	ld	r24, Y
     ee8:	8d 6e       	ori	r24, 0xED	; 237
     eea:	88 83       	st	Y, r24
// 	MCUCR = 0x60;
// 	MCUCR = 0x40;
		
	//USART
	usart_init_rs232(USART_RADIO, &USART_OPTIONS); //Radio UART
     eec:	62 e0       	ldi	r22, 0x02	; 2
     eee:	71 e0       	ldi	r23, 0x01	; 1
     ef0:	80 ec       	ldi	r24, 0xC0	; 192
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	9c d9       	rcall	.-3272   	; 0x22e <usart_init_rs232>
	//sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
	PRR0 &= ~(1<<PRUSART0);
     ef6:	88 81       	ld	r24, Y
     ef8:	8d 7f       	andi	r24, 0xFD	; 253
     efa:	88 83       	st	Y, r24
	
	#ifdef DEBUG
		usart_init_rs232(USART_TERMINAL, &USART_OPTIONS); //Radio UART
     efc:	62 e0       	ldi	r22, 0x02	; 2
     efe:	71 e0       	ldi	r23, 0x01	; 1
     f00:	88 ec       	ldi	r24, 0xC8	; 200
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	94 d9       	rcall	.-3288   	; 0x22e <usart_init_rs232>
		//sysclk_enable_module(POWER_RED_REG0, PRUSART1_bm);
		PRR0 &= ~(1<<PRUSART1);
     f06:	88 81       	ld	r24, Y
     f08:	8f 7e       	andi	r24, 0xEF	; 239
     f0a:	88 83       	st	Y, r24
		usart_putchar(USART_TERMINAL, 0x40);
     f0c:	60 e4       	ldi	r22, 0x40	; 64
     f0e:	88 ec       	ldi	r24, 0xC8	; 200
     f10:	90 e0       	ldi	r25, 0x00	; 0
		usart_putchar(USART_TERMINAL, 0x41);
     f12:	f5 d8       	rcall	.-3606   	; 0xfe <usart_putchar>
     f14:	61 e4       	ldi	r22, 0x41	; 65
     f16:	88 ec       	ldi	r24, 0xC8	; 200
	#endif // DEBUG
	
	//initialise loadcell pins
	loadcell_pins_init();
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	f1 d8       	rcall	.-3614   	; 0xfe <usart_putchar>
 *
 * \param prescaler   ADC clock prescaler
 */
static inline void adc_init(enum adc_prescaler prescaler)
{
	ADCSRA = (uint8_t)prescaler | (1 << ADEN);
     f1c:	52 da       	rcall	.-2908   	; 0x3c2 <loadcell_pins_init>

	//ADC setup
	adc_initialization();

 	//initialize radio pins
 	delay_ms(100); //wait for voltages to settle
     f1e:	83 e8       	ldi	r24, 0x83	; 131
     f20:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     f24:	6b e1       	ldi	r22, 0x1B	; 27
 	radio_pins_init();
     f26:	71 e4       	ldi	r23, 0x41	; 65
 	delay_ms(100);
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	f6 d9       	rcall	.-3092   	; 0x31a <__portable_avr_delay_cycles>

	//Shut down radio, might be on
	//FIND A SOLUTION THAT ALWAYS GUARANTEE POWER OFF OR POWER SLEEP, OR WHATEVER IS THE BEST OPTION.
	if( (STATUS_PORT & (1<<STATUS_PIN)) == 0x20 ) //have a counter and reset if fail
     f2e:	4c da       	rcall	.-2920   	; 0x3c8 <radio_pins_init>
	{
		START:
		if(radio_power_off_at() == 1)
     f30:	6b e1       	ldi	r22, 0x1B	; 27
     f32:	71 e4       	ldi	r23, 0x41	; 65
     f34:	80 e0       	ldi	r24, 0x00	; 0
		{
			radio_power_off();
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	f0 d9       	rcall	.-3104   	; 0x31a <__portable_avr_delay_cycles>
		}
		
		if( (STATUS_PORT & (1<<STATUS_PIN)) == 0x20 ) //if it won't turn off try again...
     f3a:	4d 9b       	sbis	0x09, 5	; 9
     f3c:	06 c0       	rjmp	.+12     	; 0xf4a <main+0x6a>
			goto START;
		}
	}
	
	//reset all tx data and date
	reset_all_data(); //PROBLEM FIX!!!!!!!!!!!!!!!!!!!!!!
     f3e:	c1 da       	rcall	.-2686   	; 0x4c2 <radio_power_off_at>
     f40:	81 30       	cpi	r24, 0x01	; 1
	
	
	rtc_init_period(2); //using RTC as sampler timer.
     f42:	09 f4       	brne	.+2      	; 0xf46 <main+0x66>
     f44:	90 da       	rcall	.-2784   	; 0x466 <radio_power_off>
     f46:	4d 99       	sbic	0x09, 5	; 9
     f48:	fa cf       	rjmp	.-12     	; 0xf3e <main+0x5e>
 	//wdt_reset();
 	//wdt_enable(WDTO_4S);
 	
	//Set sleep mode
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     f4a:	24 da       	rcall	.-3000   	; 0x394 <reset_all_data>
     f4c:	82 e0       	ldi	r24, 0x02	; 2
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	30 da       	rcall	.-2976   	; 0x3b2 <rtc_init_period>
	//set_sleep_mode(SLEEP_MODE_PWR_SAVE);
	
	sei(); //enable interrupts
     f52:	83 b7       	in	r24, 0x33	; 51
		
	//go to sleep and let interrupts do the work...zzz....zzzz
	while (1)
	{
//		sleep_mode();
 		sleep_enable();
     f54:	81 7f       	andi	r24, 0xF1	; 241
     f56:	84 60       	ori	r24, 0x04	; 4
     f58:	83 bf       	out	0x33, r24	; 51
 		sleep_bod_disable();
     f5a:	78 94       	sei
     f5c:	83 b7       	in	r24, 0x33	; 51
     f5e:	81 60       	ori	r24, 0x01	; 1
     f60:	83 bf       	out	0x33, r24	; 51
     f62:	85 b7       	in	r24, 0x35	; 53
		 //sei();
 		sleep_cpu();
     f64:	80 66       	ori	r24, 0x60	; 96
 		sleep_disable(); 	
     f66:	85 bf       	out	0x35, r24	; 53
     f68:	8f 7d       	andi	r24, 0xDF	; 223
     f6a:	85 bf       	out	0x35, r24	; 53
     f6c:	88 95       	sleep
     f6e:	83 b7       	in	r24, 0x33	; 51
     f70:	8e 7f       	andi	r24, 0xFE	; 254
     f72:	83 bf       	out	0x33, r24	; 51
     f74:	f3 cf       	rjmp	.-26     	; 0xf5c <main+0x7c>

00000f76 <MQTTSerialize_connectLength>:

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
     f76:	ef 92       	push	r14
     f78:	ff 92       	push	r15
     f7a:	0f 93       	push	r16
     f7c:	1f 93       	push	r17
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
     f82:	ec 01       	movw	r28, r24
     f84:	8e 81       	ldd	r24, Y+6	; 0x06
     f86:	83 30       	cpi	r24, 0x03	; 3
     f88:	29 f0       	breq	.+10     	; 0xf94 <MQTTSerialize_connectLength+0x1e>
     f8a:	84 30       	cpi	r24, 0x04	; 4
     f8c:	31 f4       	brne	.+12     	; 0xf9a <MQTTSerialize_connectLength+0x24>
     f8e:	0a e0       	ldi	r16, 0x0A	; 10
     f90:	10 e0       	ldi	r17, 0x00	; 0
     f92:	05 c0       	rjmp	.+10     	; 0xf9e <MQTTSerialize_connectLength+0x28>
     f94:	0c e0       	ldi	r16, 0x0C	; 12
     f96:	10 e0       	ldi	r17, 0x00	; 0
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <MQTTSerialize_connectLength+0x28>
     f9a:	00 e0       	ldi	r16, 0x00	; 0
     f9c:	10 e0       	ldi	r17, 0x00	; 0
     f9e:	4f 81       	ldd	r20, Y+7	; 0x07
     fa0:	58 85       	ldd	r21, Y+8	; 0x08
     fa2:	69 85       	ldd	r22, Y+9	; 0x09
     fa4:	7a 85       	ldd	r23, Y+10	; 0x0a
     fa6:	8b 85       	ldd	r24, Y+11	; 0x0b
     fa8:	9c 85       	ldd	r25, Y+12	; 0x0c
     faa:	fb d1       	rcall	.+1014   	; 0x13a2 <MQTTstrlen>
     fac:	02 96       	adiw	r24, 0x02	; 2
     fae:	08 0f       	add	r16, r24
     fb0:	19 1f       	adc	r17, r25
     fb2:	88 89       	ldd	r24, Y+16	; 0x10
     fb4:	88 23       	and	r24, r24
     fb6:	a1 f0       	breq	.+40     	; 0xfe0 <MQTTSerialize_connectLength+0x6a>
     fb8:	4f 89       	ldd	r20, Y+23	; 0x17
     fba:	58 8d       	ldd	r21, Y+24	; 0x18
     fbc:	69 8d       	ldd	r22, Y+25	; 0x19
     fbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fc4:	ee d1       	rcall	.+988    	; 0x13a2 <MQTTstrlen>
     fc6:	7c 01       	movw	r14, r24
     fc8:	4d 8d       	ldd	r20, Y+29	; 0x1d
     fca:	5e 8d       	ldd	r21, Y+30	; 0x1e
     fcc:	6f 8d       	ldd	r22, Y+31	; 0x1f
     fce:	78 a1       	ldd	r23, Y+32	; 0x20
     fd0:	89 a1       	ldd	r24, Y+33	; 0x21
     fd2:	9a a1       	ldd	r25, Y+34	; 0x22
     fd4:	e6 d1       	rcall	.+972    	; 0x13a2 <MQTTstrlen>
     fd6:	8e 0d       	add	r24, r14
     fd8:	9f 1d       	adc	r25, r15
     fda:	04 96       	adiw	r24, 0x04	; 4
     fdc:	08 0f       	add	r16, r24
     fde:	19 1f       	adc	r17, r25
     fe0:	8d a1       	ldd	r24, Y+37	; 0x25
     fe2:	9e a1       	ldd	r25, Y+38	; 0x26
     fe4:	89 2b       	or	r24, r25
     fe6:	21 f4       	brne	.+8      	; 0xff0 <MQTTSerialize_connectLength+0x7a>
     fe8:	89 a5       	ldd	r24, Y+41	; 0x29
     fea:	9a a5       	ldd	r25, Y+42	; 0x2a
     fec:	89 2b       	or	r24, r25
     fee:	51 f0       	breq	.+20     	; 0x1004 <MQTTSerialize_connectLength+0x8e>
     ff0:	4d a1       	ldd	r20, Y+37	; 0x25
     ff2:	5e a1       	ldd	r21, Y+38	; 0x26
     ff4:	6f a1       	ldd	r22, Y+39	; 0x27
     ff6:	78 a5       	ldd	r23, Y+40	; 0x28
     ff8:	89 a5       	ldd	r24, Y+41	; 0x29
     ffa:	9a a5       	ldd	r25, Y+42	; 0x2a
     ffc:	d2 d1       	rcall	.+932    	; 0x13a2 <MQTTstrlen>
     ffe:	02 96       	adiw	r24, 0x02	; 2
    1000:	08 0f       	add	r16, r24
    1002:	19 1f       	adc	r17, r25
    1004:	8b a5       	ldd	r24, Y+43	; 0x2b
    1006:	9c a5       	ldd	r25, Y+44	; 0x2c
    1008:	89 2b       	or	r24, r25
    100a:	21 f4       	brne	.+8      	; 0x1014 <MQTTSerialize_connectLength+0x9e>
    100c:	8f a5       	ldd	r24, Y+47	; 0x2f
    100e:	98 a9       	ldd	r25, Y+48	; 0x30
    1010:	89 2b       	or	r24, r25
    1012:	51 f0       	breq	.+20     	; 0x1028 <MQTTSerialize_connectLength+0xb2>
    1014:	4b a5       	ldd	r20, Y+43	; 0x2b
    1016:	5c a5       	ldd	r21, Y+44	; 0x2c
    1018:	6d a5       	ldd	r22, Y+45	; 0x2d
    101a:	7e a5       	ldd	r23, Y+46	; 0x2e
    101c:	8f a5       	ldd	r24, Y+47	; 0x2f
    101e:	98 a9       	ldd	r25, Y+48	; 0x30
    1020:	c0 d1       	rcall	.+896    	; 0x13a2 <MQTTstrlen>
    1022:	02 96       	adiw	r24, 0x02	; 2
    1024:	08 0f       	add	r16, r24
    1026:	19 1f       	adc	r17, r25
    1028:	c8 01       	movw	r24, r16
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	1f 91       	pop	r17
    1030:	0f 91       	pop	r16
    1032:	ff 90       	pop	r15
    1034:	ef 90       	pop	r14
    1036:	08 95       	ret

00001038 <MQTTSerialize_connect>:
    1038:	af 92       	push	r10
    103a:	bf 92       	push	r11
    103c:	cf 92       	push	r12
    103e:	df 92       	push	r13
    1040:	ef 92       	push	r14
    1042:	ff 92       	push	r15
    1044:	0f 93       	push	r16
    1046:	1f 93       	push	r17
    1048:	cf 93       	push	r28
    104a:	df 93       	push	r29
    104c:	00 d0       	rcall	.+0      	; 0x104e <MQTTSerialize_connect+0x16>
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	6c 01       	movw	r12, r24
    1054:	5b 01       	movw	r10, r22
    1056:	8a 01       	movw	r16, r20
    1058:	9a 83       	std	Y+2, r25	; 0x02
    105a:	89 83       	std	Y+1, r24	; 0x01
    105c:	ca 01       	movw	r24, r20
    105e:	8b df       	rcall	.-234    	; 0xf76 <MQTTSerialize_connectLength>
    1060:	7c 01       	movw	r14, r24
    1062:	03 d1       	rcall	.+518    	; 0x126a <MQTTPacket_len>
    1064:	a8 16       	cp	r10, r24
    1066:	b9 06       	cpc	r11, r25
    1068:	0c f4       	brge	.+2      	; 0x106c <MQTTSerialize_connect+0x34>
    106a:	9f c0       	rjmp	.+318    	; 0x11aa <MQTTSerialize_connect+0x172>
    106c:	60 e1       	ldi	r22, 0x10	; 16
    106e:	ce 01       	movw	r24, r28
    1070:	01 96       	adiw	r24, 0x01	; 1
    1072:	0a d1       	rcall	.+532    	; 0x1288 <writeChar>
    1074:	b7 01       	movw	r22, r14
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	9a 81       	ldd	r25, Y+2	; 0x02
    107a:	d1 d0       	rcall	.+418    	; 0x121e <MQTTPacket_encode>
    107c:	29 81       	ldd	r18, Y+1	; 0x01
    107e:	3a 81       	ldd	r19, Y+2	; 0x02
    1080:	82 0f       	add	r24, r18
    1082:	93 1f       	adc	r25, r19
    1084:	9a 83       	std	Y+2, r25	; 0x02
    1086:	89 83       	std	Y+1, r24	; 0x01
    1088:	f8 01       	movw	r30, r16
    108a:	86 81       	ldd	r24, Z+6	; 0x06
    108c:	84 30       	cpi	r24, 0x04	; 4
    108e:	51 f4       	brne	.+20     	; 0x10a4 <MQTTSerialize_connect+0x6c>
    1090:	6c e4       	ldi	r22, 0x4C	; 76
    1092:	74 e0       	ldi	r23, 0x04	; 4
    1094:	ce 01       	movw	r24, r28
    1096:	01 96       	adiw	r24, 0x01	; 1
    1098:	20 d1       	rcall	.+576    	; 0x12da <writeCString>
    109a:	64 e0       	ldi	r22, 0x04	; 4
    109c:	ce 01       	movw	r24, r28
    109e:	01 96       	adiw	r24, 0x01	; 1
    10a0:	f3 d0       	rcall	.+486    	; 0x1288 <writeChar>
    10a2:	09 c0       	rjmp	.+18     	; 0x10b6 <MQTTSerialize_connect+0x7e>
    10a4:	61 e5       	ldi	r22, 0x51	; 81
    10a6:	74 e0       	ldi	r23, 0x04	; 4
    10a8:	ce 01       	movw	r24, r28
    10aa:	01 96       	adiw	r24, 0x01	; 1
    10ac:	16 d1       	rcall	.+556    	; 0x12da <writeCString>
    10ae:	63 e0       	ldi	r22, 0x03	; 3
    10b0:	ce 01       	movw	r24, r28
    10b2:	01 96       	adiw	r24, 0x01	; 1
    10b4:	e9 d0       	rcall	.+466    	; 0x1288 <writeChar>
    10b6:	f1 2c       	mov	r15, r1
    10b8:	f8 01       	movw	r30, r16
    10ba:	87 85       	ldd	r24, Z+15	; 0x0f
    10bc:	80 fb       	bst	r24, 0
    10be:	f1 f8       	bld	r15, 1
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 89       	ldd	r25, Z+16	; 0x10
    10c4:	91 11       	cpse	r25, r1
    10c6:	01 c0       	rjmp	.+2      	; 0x10ca <MQTTSerialize_connect+0x92>
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	80 fb       	bst	r24, 0
    10cc:	f2 f8       	bld	r15, 2
    10ce:	f2 fe       	sbrs	r15, 2
    10d0:	0d c0       	rjmp	.+26     	; 0x10ec <MQTTSerialize_connect+0xb4>
    10d2:	f8 01       	movw	r30, r16
    10d4:	84 a1       	ldd	r24, Z+36	; 0x24
    10d6:	83 70       	andi	r24, 0x03	; 3
    10d8:	88 0f       	add	r24, r24
    10da:	88 0f       	add	r24, r24
    10dc:	88 0f       	add	r24, r24
    10de:	9f 2d       	mov	r25, r15
    10e0:	97 7e       	andi	r25, 0xE7	; 231
    10e2:	f9 2e       	mov	r15, r25
    10e4:	f8 2a       	or	r15, r24
    10e6:	83 a1       	ldd	r24, Z+35	; 0x23
    10e8:	80 fb       	bst	r24, 0
    10ea:	f5 f8       	bld	r15, 5
    10ec:	f8 01       	movw	r30, r16
    10ee:	85 a1       	ldd	r24, Z+37	; 0x25
    10f0:	96 a1       	ldd	r25, Z+38	; 0x26
    10f2:	89 2b       	or	r24, r25
    10f4:	21 f4       	brne	.+8      	; 0x10fe <MQTTSerialize_connect+0xc6>
    10f6:	81 a5       	ldd	r24, Z+41	; 0x29
    10f8:	92 a5       	ldd	r25, Z+42	; 0x2a
    10fa:	89 2b       	or	r24, r25
    10fc:	11 f0       	breq	.+4      	; 0x1102 <MQTTSerialize_connect+0xca>
    10fe:	68 94       	set
    1100:	f7 f8       	bld	r15, 7
    1102:	f8 01       	movw	r30, r16
    1104:	83 a5       	ldd	r24, Z+43	; 0x2b
    1106:	94 a5       	ldd	r25, Z+44	; 0x2c
    1108:	89 2b       	or	r24, r25
    110a:	21 f4       	brne	.+8      	; 0x1114 <MQTTSerialize_connect+0xdc>
    110c:	87 a5       	ldd	r24, Z+47	; 0x2f
    110e:	90 a9       	ldd	r25, Z+48	; 0x30
    1110:	89 2b       	or	r24, r25
    1112:	11 f0       	breq	.+4      	; 0x1118 <MQTTSerialize_connect+0xe0>
    1114:	68 94       	set
    1116:	f6 f8       	bld	r15, 6
    1118:	6f 2d       	mov	r22, r15
    111a:	ce 01       	movw	r24, r28
    111c:	01 96       	adiw	r24, 0x01	; 1
    111e:	b4 d0       	rcall	.+360    	; 0x1288 <writeChar>
    1120:	f8 01       	movw	r30, r16
    1122:	65 85       	ldd	r22, Z+13	; 0x0d
    1124:	76 85       	ldd	r23, Z+14	; 0x0e
    1126:	ce 01       	movw	r24, r28
    1128:	01 96       	adiw	r24, 0x01	; 1
    112a:	b8 d0       	rcall	.+368    	; 0x129c <writeInt>
    112c:	f8 01       	movw	r30, r16
    112e:	27 81       	ldd	r18, Z+7	; 0x07
    1130:	30 85       	ldd	r19, Z+8	; 0x08
    1132:	41 85       	ldd	r20, Z+9	; 0x09
    1134:	52 85       	ldd	r21, Z+10	; 0x0a
    1136:	63 85       	ldd	r22, Z+11	; 0x0b
    1138:	74 85       	ldd	r23, Z+12	; 0x0c
    113a:	ce 01       	movw	r24, r28
    113c:	01 96       	adiw	r24, 0x01	; 1
    113e:	f2 d0       	rcall	.+484    	; 0x1324 <writeMQTTString>
    1140:	f8 01       	movw	r30, r16
    1142:	80 89       	ldd	r24, Z+16	; 0x10
    1144:	88 23       	and	r24, r24
    1146:	99 f0       	breq	.+38     	; 0x116e <MQTTSerialize_connect+0x136>
    1148:	27 89       	ldd	r18, Z+23	; 0x17
    114a:	30 8d       	ldd	r19, Z+24	; 0x18
    114c:	41 8d       	ldd	r20, Z+25	; 0x19
    114e:	52 8d       	ldd	r21, Z+26	; 0x1a
    1150:	63 8d       	ldd	r22, Z+27	; 0x1b
    1152:	74 8d       	ldd	r23, Z+28	; 0x1c
    1154:	ce 01       	movw	r24, r28
    1156:	01 96       	adiw	r24, 0x01	; 1
    1158:	e5 d0       	rcall	.+458    	; 0x1324 <writeMQTTString>
    115a:	f8 01       	movw	r30, r16
    115c:	25 8d       	ldd	r18, Z+29	; 0x1d
    115e:	36 8d       	ldd	r19, Z+30	; 0x1e
    1160:	47 8d       	ldd	r20, Z+31	; 0x1f
    1162:	50 a1       	ldd	r21, Z+32	; 0x20
    1164:	61 a1       	ldd	r22, Z+33	; 0x21
    1166:	72 a1       	ldd	r23, Z+34	; 0x22
    1168:	ce 01       	movw	r24, r28
    116a:	01 96       	adiw	r24, 0x01	; 1
    116c:	db d0       	rcall	.+438    	; 0x1324 <writeMQTTString>
    116e:	ef 2c       	mov	r14, r15
    1170:	ff 20       	and	r15, r15
    1172:	54 f4       	brge	.+20     	; 0x1188 <MQTTSerialize_connect+0x150>
    1174:	f8 01       	movw	r30, r16
    1176:	25 a1       	ldd	r18, Z+37	; 0x25
    1178:	36 a1       	ldd	r19, Z+38	; 0x26
    117a:	47 a1       	ldd	r20, Z+39	; 0x27
    117c:	50 a5       	ldd	r21, Z+40	; 0x28
    117e:	61 a5       	ldd	r22, Z+41	; 0x29
    1180:	72 a5       	ldd	r23, Z+42	; 0x2a
    1182:	ce 01       	movw	r24, r28
    1184:	01 96       	adiw	r24, 0x01	; 1
    1186:	ce d0       	rcall	.+412    	; 0x1324 <writeMQTTString>
    1188:	e6 fe       	sbrs	r14, 6
    118a:	0a c0       	rjmp	.+20     	; 0x11a0 <MQTTSerialize_connect+0x168>
    118c:	f8 01       	movw	r30, r16
    118e:	23 a5       	ldd	r18, Z+43	; 0x2b
    1190:	34 a5       	ldd	r19, Z+44	; 0x2c
    1192:	45 a5       	ldd	r20, Z+45	; 0x2d
    1194:	56 a5       	ldd	r21, Z+46	; 0x2e
    1196:	67 a5       	ldd	r22, Z+47	; 0x2f
    1198:	70 a9       	ldd	r23, Z+48	; 0x30
    119a:	ce 01       	movw	r24, r28
    119c:	01 96       	adiw	r24, 0x01	; 1
    119e:	c2 d0       	rcall	.+388    	; 0x1324 <writeMQTTString>
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
    11a2:	9a 81       	ldd	r25, Y+2	; 0x02
    11a4:	8c 19       	sub	r24, r12
    11a6:	9d 09       	sbc	r25, r13
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <MQTTSerialize_connect+0x176>
    11aa:	8e ef       	ldi	r24, 0xFE	; 254
    11ac:	9f ef       	ldi	r25, 0xFF	; 255
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	df 91       	pop	r29
    11b4:	cf 91       	pop	r28
    11b6:	1f 91       	pop	r17
    11b8:	0f 91       	pop	r16
    11ba:	ff 90       	pop	r15
    11bc:	ef 90       	pop	r14
    11be:	df 90       	pop	r13
    11c0:	cf 90       	pop	r12
    11c2:	bf 90       	pop	r11
    11c4:	af 90       	pop	r10
    11c6:	08 95       	ret

000011c8 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
    11c8:	0f 93       	push	r16
    11ca:	1f 93       	push	r17
    11cc:	cf 93       	push	r28
    11ce:	df 93       	push	r29
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <MQTTSerialize_zero+0xa>
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
    11d6:	9a 83       	std	Y+2, r25	; 0x02
    11d8:	89 83       	std	Y+1, r24	; 0x01

	FUNC_ENTRY;
	if (buflen < 2)
    11da:	62 30       	cpi	r22, 0x02	; 2
    11dc:	71 05       	cpc	r23, r1
    11de:	9c f0       	brlt	.+38     	; 0x1206 <MQTTSerialize_zero+0x3e>
    11e0:	8c 01       	movw	r16, r24
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
    11e2:	64 2f       	mov	r22, r20
    11e4:	62 95       	swap	r22
    11e6:	60 7f       	andi	r22, 0xF0	; 240
	writeChar(&ptr, header.byte); /* write header */
    11e8:	ce 01       	movw	r24, r28
    11ea:	01 96       	adiw	r24, 0x01	; 1
    11ec:	4d d0       	rcall	.+154    	; 0x1288 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
    11ee:	60 e0       	ldi	r22, 0x00	; 0
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	9a 81       	ldd	r25, Y+2	; 0x02
    11f6:	13 d0       	rcall	.+38     	; 0x121e <MQTTPacket_encode>
	rc = ptr - buf;
    11f8:	29 81       	ldd	r18, Y+1	; 0x01
    11fa:	3a 81       	ldd	r19, Y+2	; 0x02
    11fc:	82 0f       	add	r24, r18
    11fe:	93 1f       	adc	r25, r19
    1200:	80 1b       	sub	r24, r16
    1202:	91 0b       	sbc	r25, r17
    1204:	02 c0       	rjmp	.+4      	; 0x120a <MQTTSerialize_zero+0x42>
	unsigned char *ptr = buf;

	FUNC_ENTRY;
	if (buflen < 2)
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    1206:	8e ef       	ldi	r24, 0xFE	; 254
    1208:	9f ef       	ldi	r25, 0xFF	; 255
	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
	rc = ptr - buf;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	1f 91       	pop	r17
    1214:	0f 91       	pop	r16
    1216:	08 95       	ret

00001218 <MQTTSerialize_disconnect>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
    1218:	4e e0       	ldi	r20, 0x0E	; 14
    121a:	d6 cf       	rjmp	.-84     	; 0x11c8 <MQTTSerialize_zero>
}
    121c:	08 95       	ret

0000121e <MQTTPacket_encode>:
		}
	}
	mqttstring->cstring = NULL;
	FUNC_EXIT_RC(rc);
	return rc;
}
    121e:	dc 01       	movw	r26, r24
    1220:	e0 e0       	ldi	r30, 0x00	; 0
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	9b 01       	movw	r18, r22
    1226:	2f 77       	andi	r18, 0x7F	; 127
    1228:	30 78       	andi	r19, 0x80	; 128
    122a:	33 23       	and	r19, r19
    122c:	34 f4       	brge	.+12     	; 0x123a <MQTTPacket_encode+0x1c>
    122e:	21 50       	subi	r18, 0x01	; 1
    1230:	31 09       	sbc	r19, r1
    1232:	20 68       	ori	r18, 0x80	; 128
    1234:	3f 6f       	ori	r19, 0xFF	; 255
    1236:	2f 5f       	subi	r18, 0xFF	; 255
    1238:	3f 4f       	sbci	r19, 0xFF	; 255
    123a:	ab 01       	movw	r20, r22
    123c:	77 23       	and	r23, r23
    123e:	14 f4       	brge	.+4      	; 0x1244 <MQTTPacket_encode+0x26>
    1240:	41 58       	subi	r20, 0x81	; 129
    1242:	5f 4f       	sbci	r21, 0xFF	; 255
    1244:	ba 01       	movw	r22, r20
    1246:	66 0f       	add	r22, r22
    1248:	67 2f       	mov	r22, r23
    124a:	66 1f       	adc	r22, r22
    124c:	77 0b       	sbc	r23, r23
    124e:	16 16       	cp	r1, r22
    1250:	17 06       	cpc	r1, r23
    1252:	24 f4       	brge	.+8      	; 0x125c <MQTTPacket_encode+0x3e>
    1254:	31 96       	adiw	r30, 0x01	; 1
    1256:	20 68       	ori	r18, 0x80	; 128
    1258:	2d 93       	st	X+, r18
    125a:	e4 cf       	rjmp	.-56     	; 0x1224 <MQTTPacket_encode+0x6>
    125c:	dc 01       	movw	r26, r24
    125e:	ae 0f       	add	r26, r30
    1260:	bf 1f       	adc	r27, r31
    1262:	2c 93       	st	X, r18
    1264:	cf 01       	movw	r24, r30
    1266:	01 96       	adiw	r24, 0x01	; 1
    1268:	08 95       	ret

0000126a <MQTTPacket_len>:
    126a:	9c 01       	movw	r18, r24
    126c:	2f 5f       	subi	r18, 0xFF	; 255
    126e:	3f 4f       	sbci	r19, 0xFF	; 255
    1270:	20 38       	cpi	r18, 0x80	; 128
    1272:	31 05       	cpc	r19, r1
    1274:	14 f4       	brge	.+4      	; 0x127a <MQTTPacket_len+0x10>
    1276:	02 96       	adiw	r24, 0x02	; 2
    1278:	08 95       	ret
    127a:	21 15       	cp	r18, r1
    127c:	30 44       	sbci	r19, 0x40	; 64
    127e:	14 f4       	brge	.+4      	; 0x1284 <MQTTPacket_len+0x1a>
    1280:	03 96       	adiw	r24, 0x03	; 3
    1282:	08 95       	ret
    1284:	04 96       	adiw	r24, 0x04	; 4
    1286:	08 95       	ret

00001288 <writeChar>:
    1288:	fc 01       	movw	r30, r24
    128a:	a0 81       	ld	r26, Z
    128c:	b1 81       	ldd	r27, Z+1	; 0x01
    128e:	6c 93       	st	X, r22
    1290:	80 81       	ld	r24, Z
    1292:	91 81       	ldd	r25, Z+1	; 0x01
    1294:	01 96       	adiw	r24, 0x01	; 1
    1296:	91 83       	std	Z+1, r25	; 0x01
    1298:	80 83       	st	Z, r24
    129a:	08 95       	ret

0000129c <writeInt>:
    129c:	fc 01       	movw	r30, r24
    129e:	a0 81       	ld	r26, Z
    12a0:	b1 81       	ldd	r27, Z+1	; 0x01
    12a2:	cb 01       	movw	r24, r22
    12a4:	77 23       	and	r23, r23
    12a6:	14 f4       	brge	.+4      	; 0x12ac <writeInt+0x10>
    12a8:	81 50       	subi	r24, 0x01	; 1
    12aa:	9f 4f       	sbci	r25, 0xFF	; 255
    12ac:	9c 93       	st	X, r25
    12ae:	a0 81       	ld	r26, Z
    12b0:	b1 81       	ldd	r27, Z+1	; 0x01
    12b2:	cd 01       	movw	r24, r26
    12b4:	01 96       	adiw	r24, 0x01	; 1
    12b6:	91 83       	std	Z+1, r25	; 0x01
    12b8:	80 83       	st	Z, r24
    12ba:	70 78       	andi	r23, 0x80	; 128
    12bc:	77 23       	and	r23, r23
    12be:	2c f4       	brge	.+10     	; 0x12ca <writeInt+0x2e>
    12c0:	61 50       	subi	r22, 0x01	; 1
    12c2:	71 09       	sbc	r23, r1
    12c4:	7f 6f       	ori	r23, 0xFF	; 255
    12c6:	6f 5f       	subi	r22, 0xFF	; 255
    12c8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ca:	11 96       	adiw	r26, 0x01	; 1
    12cc:	6c 93       	st	X, r22
    12ce:	80 81       	ld	r24, Z
    12d0:	91 81       	ldd	r25, Z+1	; 0x01
    12d2:	01 96       	adiw	r24, 0x01	; 1
    12d4:	91 83       	std	Z+1, r25	; 0x01
    12d6:	80 83       	st	Z, r24
    12d8:	08 95       	ret

000012da <writeCString>:
    12da:	ef 92       	push	r14
    12dc:	ff 92       	push	r15
    12de:	0f 93       	push	r16
    12e0:	1f 93       	push	r17
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	8c 01       	movw	r16, r24
    12e8:	7b 01       	movw	r14, r22
    12ea:	eb 01       	movw	r28, r22
    12ec:	09 90       	ld	r0, Y+
    12ee:	00 20       	and	r0, r0
    12f0:	e9 f7       	brne	.-6      	; 0x12ec <writeCString+0x12>
    12f2:	21 97       	sbiw	r28, 0x01	; 1
    12f4:	c6 1b       	sub	r28, r22
    12f6:	d7 0b       	sbc	r29, r23
    12f8:	be 01       	movw	r22, r28
    12fa:	d0 df       	rcall	.-96     	; 0x129c <writeInt>
    12fc:	ae 01       	movw	r20, r28
    12fe:	b7 01       	movw	r22, r14
    1300:	f8 01       	movw	r30, r16
    1302:	80 81       	ld	r24, Z
    1304:	91 81       	ldd	r25, Z+1	; 0x01
    1306:	9d d3       	rcall	.+1850   	; 0x1a42 <memcpy>
    1308:	f8 01       	movw	r30, r16
    130a:	80 81       	ld	r24, Z
    130c:	91 81       	ldd	r25, Z+1	; 0x01
    130e:	c8 0f       	add	r28, r24
    1310:	d9 1f       	adc	r29, r25
    1312:	d1 83       	std	Z+1, r29	; 0x01
    1314:	c0 83       	st	Z, r28
    1316:	df 91       	pop	r29
    1318:	cf 91       	pop	r28
    131a:	1f 91       	pop	r17
    131c:	0f 91       	pop	r16
    131e:	ff 90       	pop	r15
    1320:	ef 90       	pop	r14
    1322:	08 95       	ret

00001324 <writeMQTTString>:
    1324:	ef 92       	push	r14
    1326:	ff 92       	push	r15
    1328:	0f 93       	push	r16
    132a:	1f 93       	push	r17
    132c:	cf 93       	push	r28
    132e:	df 93       	push	r29
    1330:	00 d0       	rcall	.+0      	; 0x1332 <writeMQTTString+0xe>
    1332:	00 d0       	rcall	.+0      	; 0x1334 <writeMQTTString+0x10>
    1334:	00 d0       	rcall	.+0      	; 0x1336 <writeMQTTString+0x12>
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	7c 01       	movw	r14, r24
    133c:	29 83       	std	Y+1, r18	; 0x01
    133e:	3a 83       	std	Y+2, r19	; 0x02
    1340:	4b 83       	std	Y+3, r20	; 0x03
    1342:	5c 83       	std	Y+4, r21	; 0x04
    1344:	6d 83       	std	Y+5, r22	; 0x05
    1346:	7e 83       	std	Y+6, r23	; 0x06
    1348:	0b 81       	ldd	r16, Y+3	; 0x03
    134a:	1c 81       	ldd	r17, Y+4	; 0x04
    134c:	10 16       	cp	r1, r16
    134e:	11 06       	cpc	r1, r17
    1350:	8c f4       	brge	.+34     	; 0x1374 <writeMQTTString+0x50>
    1352:	b8 01       	movw	r22, r16
    1354:	a3 df       	rcall	.-186    	; 0x129c <writeInt>
    1356:	6d 81       	ldd	r22, Y+5	; 0x05
    1358:	7e 81       	ldd	r23, Y+6	; 0x06
    135a:	a8 01       	movw	r20, r16
    135c:	f7 01       	movw	r30, r14
    135e:	80 81       	ld	r24, Z
    1360:	91 81       	ldd	r25, Z+1	; 0x01
    1362:	6f d3       	rcall	.+1758   	; 0x1a42 <memcpy>
    1364:	f7 01       	movw	r30, r14
    1366:	80 81       	ld	r24, Z
    1368:	91 81       	ldd	r25, Z+1	; 0x01
    136a:	08 0f       	add	r16, r24
    136c:	19 1f       	adc	r17, r25
    136e:	11 83       	std	Z+1, r17	; 0x01
    1370:	00 83       	st	Z, r16
    1372:	0a c0       	rjmp	.+20     	; 0x1388 <writeMQTTString+0x64>
    1374:	69 81       	ldd	r22, Y+1	; 0x01
    1376:	7a 81       	ldd	r23, Y+2	; 0x02
    1378:	61 15       	cp	r22, r1
    137a:	71 05       	cpc	r23, r1
    137c:	11 f0       	breq	.+4      	; 0x1382 <writeMQTTString+0x5e>
    137e:	ad df       	rcall	.-166    	; 0x12da <writeCString>
    1380:	03 c0       	rjmp	.+6      	; 0x1388 <writeMQTTString+0x64>
    1382:	60 e0       	ldi	r22, 0x00	; 0
    1384:	70 e0       	ldi	r23, 0x00	; 0
    1386:	8a df       	rcall	.-236    	; 0x129c <writeInt>
    1388:	26 96       	adiw	r28, 0x06	; 6
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	de bf       	out	0x3e, r29	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	cd bf       	out	0x3d, r28	; 61
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	1f 91       	pop	r17
    139a:	0f 91       	pop	r16
    139c:	ff 90       	pop	r15
    139e:	ef 90       	pop	r14
    13a0:	08 95       	ret

000013a2 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
    13a2:	cf 93       	push	r28
    13a4:	df 93       	push	r29
    13a6:	00 d0       	rcall	.+0      	; 0x13a8 <MQTTstrlen+0x6>
    13a8:	00 d0       	rcall	.+0      	; 0x13aa <MQTTstrlen+0x8>
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <MQTTstrlen+0xa>
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	49 83       	std	Y+1, r20	; 0x01
    13b2:	5a 83       	std	Y+2, r21	; 0x02
    13b4:	6b 83       	std	Y+3, r22	; 0x03
    13b6:	7c 83       	std	Y+4, r23	; 0x04
    13b8:	8d 83       	std	Y+5, r24	; 0x05
    13ba:	9e 83       	std	Y+6, r25	; 0x06
    13bc:	a9 81       	ldd	r26, Y+1	; 0x01
    13be:	ba 81       	ldd	r27, Y+2	; 0x02
	int rc = 0;

	if (mqttstring.cstring)
    13c0:	10 97       	sbiw	r26, 0x00	; 0
    13c2:	49 f0       	breq	.+18     	; 0x13d6 <MQTTstrlen+0x34>
		rc = strlen(mqttstring.cstring);
    13c4:	fd 01       	movw	r30, r26
    13c6:	01 90       	ld	r0, Z+
    13c8:	00 20       	and	r0, r0
    13ca:	e9 f7       	brne	.-6      	; 0x13c6 <MQTTstrlen+0x24>
    13cc:	31 97       	sbiw	r30, 0x01	; 1
    13ce:	cf 01       	movw	r24, r30
    13d0:	8a 1b       	sub	r24, r26
    13d2:	9b 0b       	sbc	r25, r27
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <MQTTstrlen+0x38>
	else
		rc = mqttstring.lenstring.len;
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	9c 81       	ldd	r25, Y+4	; 0x04
	return rc;
}
    13da:	26 96       	adiw	r28, 0x06	; 6
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	f8 94       	cli
    13e0:	de bf       	out	0x3e, r29	; 62
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	cd bf       	out	0x3d, r28	; 61
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
    13ea:	08 95       	ret

000013ec <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
    13ec:	ef 92       	push	r14
    13ee:	ff 92       	push	r15
    13f0:	0f 93       	push	r16
    13f2:	1f 93       	push	r17
    13f4:	cf 93       	push	r28
    13f6:	df 93       	push	r29
    13f8:	00 d0       	rcall	.+0      	; 0x13fa <MQTTSerialize_publishLength+0xe>
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <MQTTSerialize_publishLength+0x10>
    13fc:	00 d0       	rcall	.+0      	; 0x13fe <MQTTSerialize_publishLength+0x12>
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
    1402:	7c 01       	movw	r14, r24
    1404:	f4 2f       	mov	r31, r20
    1406:	e5 2f       	mov	r30, r21
    1408:	86 2f       	mov	r24, r22
    140a:	97 2f       	mov	r25, r23
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
    140c:	42 2f       	mov	r20, r18
    140e:	53 2f       	mov	r21, r19
    1410:	6f 2f       	mov	r22, r31
    1412:	7e 2f       	mov	r23, r30
    1414:	c6 df       	rcall	.-116    	; 0x13a2 <MQTTstrlen>
    1416:	02 96       	adiw	r24, 0x02	; 2
    1418:	80 0f       	add	r24, r16
    141a:	91 1f       	adc	r25, r17
	if (qos > 0)
    141c:	1e 14       	cp	r1, r14
    141e:	1f 04       	cpc	r1, r15
    1420:	0c f4       	brge	.+2      	; 0x1424 <MQTTSerialize_publishLength+0x38>
		len += 2; /* packetid */
    1422:	02 96       	adiw	r24, 0x02	; 2
	return len;
}
    1424:	26 96       	adiw	r28, 0x06	; 6
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	de bf       	out	0x3e, r29	; 62
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	cd bf       	out	0x3d, r28	; 61
    1430:	df 91       	pop	r29
    1432:	cf 91       	pop	r28
    1434:	1f 91       	pop	r17
    1436:	0f 91       	pop	r16
    1438:	ff 90       	pop	r15
    143a:	ef 90       	pop	r14
    143c:	08 95       	ret

0000143e <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
    143e:	2f 92       	push	r2
    1440:	3f 92       	push	r3
    1442:	4f 92       	push	r4
    1444:	5f 92       	push	r5
    1446:	6f 92       	push	r6
    1448:	7f 92       	push	r7
    144a:	8f 92       	push	r8
    144c:	9f 92       	push	r9
    144e:	af 92       	push	r10
    1450:	bf 92       	push	r11
    1452:	cf 92       	push	r12
    1454:	df 92       	push	r13
    1456:	ef 92       	push	r14
    1458:	ff 92       	push	r15
    145a:	0f 93       	push	r16
    145c:	1f 93       	push	r17
    145e:	cf 93       	push	r28
    1460:	df 93       	push	r29
    1462:	cd b7       	in	r28, 0x3d	; 61
    1464:	de b7       	in	r29, 0x3e	; 62
    1466:	2a 97       	sbiw	r28, 0x0a	; 10
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	de bf       	out	0x3e, r29	; 62
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	cd bf       	out	0x3d, r28	; 61
    1472:	2c 01       	movw	r4, r24
    1474:	1b 01       	movw	r2, r22
    1476:	49 87       	std	Y+9, r20	; 0x09
    1478:	39 01       	movw	r6, r18
    147a:	0a 87       	std	Y+10, r16	; 0x0a
    147c:	28 2d       	mov	r18, r8
    147e:	8b 82       	std	Y+3, r8	; 0x03
    1480:	39 2d       	mov	r19, r9
    1482:	9c 82       	std	Y+4, r9	; 0x04
    1484:	4a 2d       	mov	r20, r10
    1486:	ad 82       	std	Y+5, r10	; 0x05
    1488:	5b 2d       	mov	r21, r11
    148a:	be 82       	std	Y+6, r11	; 0x06
    148c:	6c 2d       	mov	r22, r12
    148e:	cf 82       	std	Y+7, r12	; 0x07
    1490:	7d 2d       	mov	r23, r13
    1492:	d8 86       	std	Y+8, r13	; 0x08
    1494:	c9 a0       	ldd	r12, Y+33	; 0x21
    1496:	da a0       	ldd	r13, Y+34	; 0x22
	unsigned char *ptr = buf;
    1498:	9a 83       	std	Y+2, r25	; 0x02
    149a:	89 83       	std	Y+1, r24	; 0x01
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
    149c:	86 01       	movw	r16, r12
    149e:	c3 01       	movw	r24, r6
    14a0:	a5 df       	rcall	.-182    	; 0x13ec <MQTTSerialize_publishLength>
    14a2:	8c 01       	movw	r16, r24
    14a4:	e2 de       	rcall	.-572    	; 0x126a <MQTTPacket_len>
    14a6:	28 16       	cp	r2, r24
    14a8:	39 06       	cpc	r3, r25
    14aa:	b4 f1       	brlt	.+108    	; 0x1518 <MQTTSerialize_publish+0xda>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
    14ac:	60 e3       	ldi	r22, 0x30	; 48
	header.bits.dup = dup;
    14ae:	89 85       	ldd	r24, Y+9	; 0x09
    14b0:	80 fb       	bst	r24, 0
    14b2:	63 f9       	bld	r22, 3
	header.bits.qos = qos;
    14b4:	86 2d       	mov	r24, r6
    14b6:	83 70       	andi	r24, 0x03	; 3
    14b8:	88 0f       	add	r24, r24
    14ba:	69 7f       	andi	r22, 0xF9	; 249
    14bc:	68 2b       	or	r22, r24
	header.bits.retain = retained;
    14be:	8a 85       	ldd	r24, Y+10	; 0x0a
    14c0:	80 fb       	bst	r24, 0
	writeChar(&ptr, header.byte); /* write header */
    14c2:	60 f9       	bld	r22, 0
    14c4:	ce 01       	movw	r24, r28

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
    14c6:	01 96       	adiw	r24, 0x01	; 1
    14c8:	df de       	rcall	.-578    	; 0x1288 <writeChar>
    14ca:	b8 01       	movw	r22, r16
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	9a 81       	ldd	r25, Y+2	; 0x02
    14d0:	a6 de       	rcall	.-692    	; 0x121e <MQTTPacket_encode>
    14d2:	29 81       	ldd	r18, Y+1	; 0x01
    14d4:	3a 81       	ldd	r19, Y+2	; 0x02
    14d6:	82 0f       	add	r24, r18
    14d8:	93 1f       	adc	r25, r19

	writeMQTTString(&ptr, topicName);
    14da:	9a 83       	std	Y+2, r25	; 0x02
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	2b 81       	ldd	r18, Y+3	; 0x03
    14e0:	3c 81       	ldd	r19, Y+4	; 0x04
    14e2:	4d 81       	ldd	r20, Y+5	; 0x05
    14e4:	5e 81       	ldd	r21, Y+6	; 0x06
    14e6:	6f 81       	ldd	r22, Y+7	; 0x07
    14e8:	78 85       	ldd	r23, Y+8	; 0x08
    14ea:	ce 01       	movw	r24, r28

	if (qos > 0)
    14ec:	01 96       	adiw	r24, 0x01	; 1
    14ee:	1a df       	rcall	.-460    	; 0x1324 <writeMQTTString>
		writeInt(&ptr, packetid);
    14f0:	16 14       	cp	r1, r6
    14f2:	17 04       	cpc	r1, r7
    14f4:	24 f4       	brge	.+8      	; 0x14fe <MQTTSerialize_publish+0xc0>
    14f6:	b7 01       	movw	r22, r14

	memcpy(ptr, payload, payloadlen);
    14f8:	ce 01       	movw	r24, r28
    14fa:	01 96       	adiw	r24, 0x01	; 1
    14fc:	cf de       	rcall	.-610    	; 0x129c <writeInt>
    14fe:	a6 01       	movw	r20, r12
    1500:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1502:	78 a1       	ldd	r23, Y+32	; 0x20
    1504:	89 81       	ldd	r24, Y+1	; 0x01
	ptr += payloadlen;

	rc = ptr - buf;
    1506:	9a 81       	ldd	r25, Y+2	; 0x02
    1508:	9c d2       	rcall	.+1336   	; 0x1a42 <memcpy>
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	9a 81       	ldd	r25, Y+2	; 0x02
    150e:	8c 0d       	add	r24, r12
    1510:	9d 1d       	adc	r25, r13
    1512:	84 19       	sub	r24, r4
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    1514:	95 09       	sbc	r25, r5
    1516:	02 c0       	rjmp	.+4      	; 0x151c <MQTTSerialize_publish+0xde>
	rc = ptr - buf;

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    1518:	8e ef       	ldi	r24, 0xFE	; 254
    151a:	9f ef       	ldi	r25, 0xFF	; 255
    151c:	2a 96       	adiw	r28, 0x0a	; 10
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	f8 94       	cli
    1522:	de bf       	out	0x3e, r29	; 62
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	cd bf       	out	0x3d, r28	; 61
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	1f 91       	pop	r17
    152e:	0f 91       	pop	r16
    1530:	ff 90       	pop	r15
    1532:	ef 90       	pop	r14
    1534:	df 90       	pop	r13
    1536:	cf 90       	pop	r12
    1538:	bf 90       	pop	r11
    153a:	af 90       	pop	r10
    153c:	9f 90       	pop	r9
    153e:	8f 90       	pop	r8
    1540:	7f 90       	pop	r7
    1542:	6f 90       	pop	r6
    1544:	5f 90       	pop	r5
    1546:	4f 90       	pop	r4
    1548:	3f 90       	pop	r3
    154a:	2f 90       	pop	r2
    154c:	08 95       	ret

0000154e <mqtt_packet>:
#include "string.h"
#include "MQTT_functions.h" 

/////////////MQTT////////////////////
int mqtt_packet(char *payload, char *package, int buflen, char *sub_topic)
{
    154e:	2f 92       	push	r2
    1550:	3f 92       	push	r3
    1552:	4f 92       	push	r4
    1554:	5f 92       	push	r5
    1556:	6f 92       	push	r6
    1558:	7f 92       	push	r7
    155a:	8f 92       	push	r8
    155c:	9f 92       	push	r9
    155e:	af 92       	push	r10
    1560:	bf 92       	push	r11
    1562:	cf 92       	push	r12
    1564:	df 92       	push	r13
    1566:	ef 92       	push	r14
    1568:	ff 92       	push	r15
    156a:	0f 93       	push	r16
    156c:	1f 93       	push	r17
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
    1576:	ed 97       	sbiw	r28, 0x3d	; 61
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	f8 94       	cli
    157c:	de bf       	out	0x3e, r29	; 62
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	cd bf       	out	0x3d, r28	; 61
    1582:	b8 2e       	mov	r11, r24
    1584:	a9 2e       	mov	r10, r25
    1586:	1b 01       	movw	r2, r22
    1588:	2a 01       	movw	r4, r20
    158a:	79 01       	movw	r14, r18
	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
    158c:	81 e3       	ldi	r24, 0x31	; 49
    158e:	e9 e0       	ldi	r30, 0x09	; 9
    1590:	f1 e0       	ldi	r31, 0x01	; 1
    1592:	de 01       	movw	r26, r28
    1594:	11 96       	adiw	r26, 0x01	; 1
    1596:	01 90       	ld	r0, Z+
    1598:	0d 92       	st	X+, r0
    159a:	8a 95       	dec	r24
    159c:	e1 f7       	brne	.-8      	; 0x1596 <mqtt_packet+0x48>
	
	//volatile int buflen = sizeof(&package);
	//char buf[256];
	//buflen = sizeof(buf);
	MQTTString topicString = MQTTString_initializer;
    159e:	1d aa       	std	Y+53, r1	; 0x35
    15a0:	1c aa       	std	Y+52, r1	; 0x34
    15a2:	1f aa       	std	Y+55, r1	; 0x37
    15a4:	1e aa       	std	Y+54, r1	; 0x36
	
	int payloadlen = strlen(payload);
    15a6:	eb 2d       	mov	r30, r11
    15a8:	f9 2f       	mov	r31, r25
    15aa:	df 01       	movw	r26, r30
    15ac:	0d 90       	ld	r0, X+
    15ae:	00 20       	and	r0, r0
    15b0:	e9 f7       	brne	.-6      	; 0x15ac <mqtt_packet+0x5e>
    15b2:	11 97       	sbiw	r26, 0x01	; 1
    15b4:	8d 01       	movw	r16, r26
    15b6:	0e 1b       	sub	r16, r30
    15b8:	1f 0b       	sbc	r17, r31
	int len = 0;
	
	data.clientID.cstring = "LE";
    15ba:	88 e5       	ldi	r24, 0x58	; 88
    15bc:	94 e0       	ldi	r25, 0x04	; 4
    15be:	99 87       	std	Y+9, r25	; 0x09
    15c0:	88 87       	std	Y+8, r24	; 0x08
	//data.clientID.cstring = MQTT_TOPIC; //FIX SO THIS ONE WORKS, COULD BE AN ADDITIONAL INPUT.
	data.keepAliveInterval = 20;
    15c2:	84 e1       	ldi	r24, 0x14	; 20
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	9f 87       	std	Y+15, r25	; 0x0f
    15c8:	8e 87       	std	Y+14, r24	; 0x0e
	data.cleansession = 1;
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	88 8b       	std	Y+16, r24	; 0x10
	data.username.cstring = "";
    15ce:	8f ec       	ldi	r24, 0xCF	; 207
    15d0:	92 e0       	ldi	r25, 0x02	; 2
    15d2:	9f a3       	std	Y+39, r25	; 0x27
    15d4:	8e a3       	std	Y+38, r24	; 0x26
	data.password.cstring = "";
    15d6:	9d a7       	std	Y+45, r25	; 0x2d
    15d8:	8c a7       	std	Y+44, r24	; 0x2c
	data.MQTTVersion = 4;
    15da:	84 e0       	ldi	r24, 0x04	; 4
    15dc:	8f 83       	std	Y+7, r24	; 0x07

	len = MQTTSerialize_connect((unsigned char *)package, buflen, &data);
    15de:	ae 01       	movw	r20, r28
    15e0:	4f 5f       	subi	r20, 0xFF	; 255
    15e2:	5f 4f       	sbci	r21, 0xFF	; 255
    15e4:	b2 01       	movw	r22, r4
    15e6:	c1 01       	movw	r24, r2
    15e8:	27 dd       	rcall	.-1458   	; 0x1038 <MQTTSerialize_connect>
    15ea:	3c 01       	movw	r6, r24
	
	//topicString.cstring = "LE/0"; //MAKE A GENERAL CONFIGUREATION OF THIS PARAMETER
	char main_sub_topic[6] = "LE/";
    15ec:	8c e4       	ldi	r24, 0x4C	; 76
    15ee:	95 e4       	ldi	r25, 0x45	; 69
    15f0:	99 af       	std	Y+57, r25	; 0x39
    15f2:	88 af       	std	Y+56, r24	; 0x38
    15f4:	8f e2       	ldi	r24, 0x2F	; 47
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	9b af       	std	Y+59, r25	; 0x3b
    15fa:	8a af       	std	Y+58, r24	; 0x3a
    15fc:	1d ae       	std	Y+61, r1	; 0x3d
    15fe:	1c ae       	std	Y+60, r1	; 0x3c
	strcat(main_sub_topic, sub_topic);
    1600:	6e 01       	movw	r12, r28
    1602:	88 e3       	ldi	r24, 0x38	; 56
    1604:	c8 0e       	add	r12, r24
    1606:	d1 1c       	adc	r13, r1
    1608:	b7 01       	movw	r22, r14
    160a:	c6 01       	movw	r24, r12
    160c:	23 d2       	rcall	.+1094   	; 0x1a54 <strcat>
	topicString.cstring = main_sub_topic;
    160e:	db aa       	std	Y+51, r13	; 0x33
    1610:	ca aa       	std	Y+50, r12	; 0x32
	
	
	len += MQTTSerialize_publish((unsigned char *)(package + len), buflen - len, 0, 0, 0, 0, topicString, (unsigned char *)payload, payloadlen);
    1612:	b2 01       	movw	r22, r4
    1614:	66 19       	sub	r22, r6
    1616:	77 09       	sbc	r23, r7
    1618:	1f 93       	push	r17
    161a:	0f 93       	push	r16
    161c:	af 92       	push	r10
    161e:	bf 92       	push	r11
    1620:	8a a8       	ldd	r8, Y+50	; 0x32
    1622:	9b a8       	ldd	r9, Y+51	; 0x33
    1624:	ac a8       	ldd	r10, Y+52	; 0x34
    1626:	bd a8       	ldd	r11, Y+53	; 0x35
    1628:	ce a8       	ldd	r12, Y+54	; 0x36
    162a:	df a8       	ldd	r13, Y+55	; 0x37
    162c:	e1 2c       	mov	r14, r1
    162e:	f1 2c       	mov	r15, r1
    1630:	00 e0       	ldi	r16, 0x00	; 0
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	40 e0       	ldi	r20, 0x00	; 0
    1638:	c1 01       	movw	r24, r2
    163a:	86 0d       	add	r24, r6
    163c:	97 1d       	adc	r25, r7
    163e:	ff de       	rcall	.-514    	; 0x143e <MQTTSerialize_publish>
    1640:	68 0e       	add	r6, r24
    1642:	79 1e       	adc	r7, r25
		
	len += MQTTSerialize_disconnect((unsigned char *)(package + len), buflen - len);
    1644:	b2 01       	movw	r22, r4
    1646:	66 19       	sub	r22, r6
    1648:	77 09       	sbc	r23, r7
    164a:	c1 01       	movw	r24, r2
    164c:	86 0d       	add	r24, r6
    164e:	97 1d       	adc	r25, r7
    1650:	e3 dd       	rcall	.-1082   	; 0x1218 <MQTTSerialize_disconnect>
	
	//exit:
	
	//return 0;
	return len;
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	0f 90       	pop	r0
}
    165a:	86 0d       	add	r24, r6
    165c:	97 1d       	adc	r25, r7
    165e:	ed 96       	adiw	r28, 0x3d	; 61
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	f8 94       	cli
    1664:	de bf       	out	0x3e, r29	; 62
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	cd bf       	out	0x3d, r28	; 61
    166a:	df 91       	pop	r29
    166c:	cf 91       	pop	r28
    166e:	1f 91       	pop	r17
    1670:	0f 91       	pop	r16
    1672:	ff 90       	pop	r15
    1674:	ef 90       	pop	r14
    1676:	df 90       	pop	r13
    1678:	cf 90       	pop	r12
    167a:	bf 90       	pop	r11
    167c:	af 90       	pop	r10
    167e:	9f 90       	pop	r9
    1680:	8f 90       	pop	r8
    1682:	7f 90       	pop	r7
    1684:	6f 90       	pop	r6
    1686:	5f 90       	pop	r5
    1688:	4f 90       	pop	r4
    168a:	3f 90       	pop	r3
    168c:	2f 90       	pop	r2
    168e:	08 95       	ret

00001690 <__divsf3>:
    1690:	0c d0       	rcall	.+24     	; 0x16aa <__divsf3x>
    1692:	e6 c0       	rjmp	.+460    	; 0x1860 <__fp_round>
    1694:	de d0       	rcall	.+444    	; 0x1852 <__fp_pscB>
    1696:	40 f0       	brcs	.+16     	; 0x16a8 <__divsf3+0x18>
    1698:	d5 d0       	rcall	.+426    	; 0x1844 <__fp_pscA>
    169a:	30 f0       	brcs	.+12     	; 0x16a8 <__divsf3+0x18>
    169c:	21 f4       	brne	.+8      	; 0x16a6 <__divsf3+0x16>
    169e:	5f 3f       	cpi	r21, 0xFF	; 255
    16a0:	19 f0       	breq	.+6      	; 0x16a8 <__divsf3+0x18>
    16a2:	c7 c0       	rjmp	.+398    	; 0x1832 <__fp_inf>
    16a4:	51 11       	cpse	r21, r1
    16a6:	10 c1       	rjmp	.+544    	; 0x18c8 <__fp_szero>
    16a8:	ca c0       	rjmp	.+404    	; 0x183e <__fp_nan>

000016aa <__divsf3x>:
    16aa:	eb d0       	rcall	.+470    	; 0x1882 <__fp_split3>
    16ac:	98 f3       	brcs	.-26     	; 0x1694 <__divsf3+0x4>

000016ae <__divsf3_pse>:
    16ae:	99 23       	and	r25, r25
    16b0:	c9 f3       	breq	.-14     	; 0x16a4 <__divsf3+0x14>
    16b2:	55 23       	and	r21, r21
    16b4:	b1 f3       	breq	.-20     	; 0x16a2 <__divsf3+0x12>
    16b6:	95 1b       	sub	r25, r21
    16b8:	55 0b       	sbc	r21, r21
    16ba:	bb 27       	eor	r27, r27
    16bc:	aa 27       	eor	r26, r26
    16be:	62 17       	cp	r22, r18
    16c0:	73 07       	cpc	r23, r19
    16c2:	84 07       	cpc	r24, r20
    16c4:	38 f0       	brcs	.+14     	; 0x16d4 <__divsf3_pse+0x26>
    16c6:	9f 5f       	subi	r25, 0xFF	; 255
    16c8:	5f 4f       	sbci	r21, 0xFF	; 255
    16ca:	22 0f       	add	r18, r18
    16cc:	33 1f       	adc	r19, r19
    16ce:	44 1f       	adc	r20, r20
    16d0:	aa 1f       	adc	r26, r26
    16d2:	a9 f3       	breq	.-22     	; 0x16be <__divsf3_pse+0x10>
    16d4:	33 d0       	rcall	.+102    	; 0x173c <__divsf3_pse+0x8e>
    16d6:	0e 2e       	mov	r0, r30
    16d8:	3a f0       	brmi	.+14     	; 0x16e8 <__divsf3_pse+0x3a>
    16da:	e0 e8       	ldi	r30, 0x80	; 128
    16dc:	30 d0       	rcall	.+96     	; 0x173e <__divsf3_pse+0x90>
    16de:	91 50       	subi	r25, 0x01	; 1
    16e0:	50 40       	sbci	r21, 0x00	; 0
    16e2:	e6 95       	lsr	r30
    16e4:	00 1c       	adc	r0, r0
    16e6:	ca f7       	brpl	.-14     	; 0x16da <__divsf3_pse+0x2c>
    16e8:	29 d0       	rcall	.+82     	; 0x173c <__divsf3_pse+0x8e>
    16ea:	fe 2f       	mov	r31, r30
    16ec:	27 d0       	rcall	.+78     	; 0x173c <__divsf3_pse+0x8e>
    16ee:	66 0f       	add	r22, r22
    16f0:	77 1f       	adc	r23, r23
    16f2:	88 1f       	adc	r24, r24
    16f4:	bb 1f       	adc	r27, r27
    16f6:	26 17       	cp	r18, r22
    16f8:	37 07       	cpc	r19, r23
    16fa:	48 07       	cpc	r20, r24
    16fc:	ab 07       	cpc	r26, r27
    16fe:	b0 e8       	ldi	r27, 0x80	; 128
    1700:	09 f0       	breq	.+2      	; 0x1704 <__divsf3_pse+0x56>
    1702:	bb 0b       	sbc	r27, r27
    1704:	80 2d       	mov	r24, r0
    1706:	bf 01       	movw	r22, r30
    1708:	ff 27       	eor	r31, r31
    170a:	93 58       	subi	r25, 0x83	; 131
    170c:	5f 4f       	sbci	r21, 0xFF	; 255
    170e:	2a f0       	brmi	.+10     	; 0x171a <__divsf3_pse+0x6c>
    1710:	9e 3f       	cpi	r25, 0xFE	; 254
    1712:	51 05       	cpc	r21, r1
    1714:	68 f0       	brcs	.+26     	; 0x1730 <__divsf3_pse+0x82>
    1716:	8d c0       	rjmp	.+282    	; 0x1832 <__fp_inf>
    1718:	d7 c0       	rjmp	.+430    	; 0x18c8 <__fp_szero>
    171a:	5f 3f       	cpi	r21, 0xFF	; 255
    171c:	ec f3       	brlt	.-6      	; 0x1718 <__divsf3_pse+0x6a>
    171e:	98 3e       	cpi	r25, 0xE8	; 232
    1720:	dc f3       	brlt	.-10     	; 0x1718 <__divsf3_pse+0x6a>
    1722:	86 95       	lsr	r24
    1724:	77 95       	ror	r23
    1726:	67 95       	ror	r22
    1728:	b7 95       	ror	r27
    172a:	f7 95       	ror	r31
    172c:	9f 5f       	subi	r25, 0xFF	; 255
    172e:	c9 f7       	brne	.-14     	; 0x1722 <__divsf3_pse+0x74>
    1730:	88 0f       	add	r24, r24
    1732:	91 1d       	adc	r25, r1
    1734:	96 95       	lsr	r25
    1736:	87 95       	ror	r24
    1738:	97 f9       	bld	r25, 7
    173a:	08 95       	ret
    173c:	e1 e0       	ldi	r30, 0x01	; 1
    173e:	66 0f       	add	r22, r22
    1740:	77 1f       	adc	r23, r23
    1742:	88 1f       	adc	r24, r24
    1744:	bb 1f       	adc	r27, r27
    1746:	62 17       	cp	r22, r18
    1748:	73 07       	cpc	r23, r19
    174a:	84 07       	cpc	r24, r20
    174c:	ba 07       	cpc	r27, r26
    174e:	20 f0       	brcs	.+8      	; 0x1758 <__divsf3_pse+0xaa>
    1750:	62 1b       	sub	r22, r18
    1752:	73 0b       	sbc	r23, r19
    1754:	84 0b       	sbc	r24, r20
    1756:	ba 0b       	sbc	r27, r26
    1758:	ee 1f       	adc	r30, r30
    175a:	88 f7       	brcc	.-30     	; 0x173e <__divsf3_pse+0x90>
    175c:	e0 95       	com	r30
    175e:	08 95       	ret

00001760 <__fixunssfsi>:
    1760:	98 d0       	rcall	.+304    	; 0x1892 <__fp_splitA>
    1762:	88 f0       	brcs	.+34     	; 0x1786 <__fixunssfsi+0x26>
    1764:	9f 57       	subi	r25, 0x7F	; 127
    1766:	90 f0       	brcs	.+36     	; 0x178c <__fixunssfsi+0x2c>
    1768:	b9 2f       	mov	r27, r25
    176a:	99 27       	eor	r25, r25
    176c:	b7 51       	subi	r27, 0x17	; 23
    176e:	a0 f0       	brcs	.+40     	; 0x1798 <__fixunssfsi+0x38>
    1770:	d1 f0       	breq	.+52     	; 0x17a6 <__fixunssfsi+0x46>
    1772:	66 0f       	add	r22, r22
    1774:	77 1f       	adc	r23, r23
    1776:	88 1f       	adc	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	1a f0       	brmi	.+6      	; 0x1782 <__fixunssfsi+0x22>
    177c:	ba 95       	dec	r27
    177e:	c9 f7       	brne	.-14     	; 0x1772 <__fixunssfsi+0x12>
    1780:	12 c0       	rjmp	.+36     	; 0x17a6 <__fixunssfsi+0x46>
    1782:	b1 30       	cpi	r27, 0x01	; 1
    1784:	81 f0       	breq	.+32     	; 0x17a6 <__fixunssfsi+0x46>
    1786:	9f d0       	rcall	.+318    	; 0x18c6 <__fp_zero>
    1788:	b1 e0       	ldi	r27, 0x01	; 1
    178a:	08 95       	ret
    178c:	9c c0       	rjmp	.+312    	; 0x18c6 <__fp_zero>
    178e:	67 2f       	mov	r22, r23
    1790:	78 2f       	mov	r23, r24
    1792:	88 27       	eor	r24, r24
    1794:	b8 5f       	subi	r27, 0xF8	; 248
    1796:	39 f0       	breq	.+14     	; 0x17a6 <__fixunssfsi+0x46>
    1798:	b9 3f       	cpi	r27, 0xF9	; 249
    179a:	cc f3       	brlt	.-14     	; 0x178e <__fixunssfsi+0x2e>
    179c:	86 95       	lsr	r24
    179e:	77 95       	ror	r23
    17a0:	67 95       	ror	r22
    17a2:	b3 95       	inc	r27
    17a4:	d9 f7       	brne	.-10     	; 0x179c <__fixunssfsi+0x3c>
    17a6:	3e f4       	brtc	.+14     	; 0x17b6 <__fixunssfsi+0x56>
    17a8:	90 95       	com	r25
    17aa:	80 95       	com	r24
    17ac:	70 95       	com	r23
    17ae:	61 95       	neg	r22
    17b0:	7f 4f       	sbci	r23, 0xFF	; 255
    17b2:	8f 4f       	sbci	r24, 0xFF	; 255
    17b4:	9f 4f       	sbci	r25, 0xFF	; 255
    17b6:	08 95       	ret

000017b8 <__floatunsisf>:
    17b8:	e8 94       	clt
    17ba:	09 c0       	rjmp	.+18     	; 0x17ce <__floatsisf+0x12>

000017bc <__floatsisf>:
    17bc:	97 fb       	bst	r25, 7
    17be:	3e f4       	brtc	.+14     	; 0x17ce <__floatsisf+0x12>
    17c0:	90 95       	com	r25
    17c2:	80 95       	com	r24
    17c4:	70 95       	com	r23
    17c6:	61 95       	neg	r22
    17c8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ca:	8f 4f       	sbci	r24, 0xFF	; 255
    17cc:	9f 4f       	sbci	r25, 0xFF	; 255
    17ce:	99 23       	and	r25, r25
    17d0:	a9 f0       	breq	.+42     	; 0x17fc <__floatsisf+0x40>
    17d2:	f9 2f       	mov	r31, r25
    17d4:	96 e9       	ldi	r25, 0x96	; 150
    17d6:	bb 27       	eor	r27, r27
    17d8:	93 95       	inc	r25
    17da:	f6 95       	lsr	r31
    17dc:	87 95       	ror	r24
    17de:	77 95       	ror	r23
    17e0:	67 95       	ror	r22
    17e2:	b7 95       	ror	r27
    17e4:	f1 11       	cpse	r31, r1
    17e6:	f8 cf       	rjmp	.-16     	; 0x17d8 <__floatsisf+0x1c>
    17e8:	fa f4       	brpl	.+62     	; 0x1828 <__floatsisf+0x6c>
    17ea:	bb 0f       	add	r27, r27
    17ec:	11 f4       	brne	.+4      	; 0x17f2 <__floatsisf+0x36>
    17ee:	60 ff       	sbrs	r22, 0
    17f0:	1b c0       	rjmp	.+54     	; 0x1828 <__floatsisf+0x6c>
    17f2:	6f 5f       	subi	r22, 0xFF	; 255
    17f4:	7f 4f       	sbci	r23, 0xFF	; 255
    17f6:	8f 4f       	sbci	r24, 0xFF	; 255
    17f8:	9f 4f       	sbci	r25, 0xFF	; 255
    17fa:	16 c0       	rjmp	.+44     	; 0x1828 <__floatsisf+0x6c>
    17fc:	88 23       	and	r24, r24
    17fe:	11 f0       	breq	.+4      	; 0x1804 <__floatsisf+0x48>
    1800:	96 e9       	ldi	r25, 0x96	; 150
    1802:	11 c0       	rjmp	.+34     	; 0x1826 <__floatsisf+0x6a>
    1804:	77 23       	and	r23, r23
    1806:	21 f0       	breq	.+8      	; 0x1810 <__floatsisf+0x54>
    1808:	9e e8       	ldi	r25, 0x8E	; 142
    180a:	87 2f       	mov	r24, r23
    180c:	76 2f       	mov	r23, r22
    180e:	05 c0       	rjmp	.+10     	; 0x181a <__floatsisf+0x5e>
    1810:	66 23       	and	r22, r22
    1812:	71 f0       	breq	.+28     	; 0x1830 <__floatsisf+0x74>
    1814:	96 e8       	ldi	r25, 0x86	; 134
    1816:	86 2f       	mov	r24, r22
    1818:	70 e0       	ldi	r23, 0x00	; 0
    181a:	60 e0       	ldi	r22, 0x00	; 0
    181c:	2a f0       	brmi	.+10     	; 0x1828 <__floatsisf+0x6c>
    181e:	9a 95       	dec	r25
    1820:	66 0f       	add	r22, r22
    1822:	77 1f       	adc	r23, r23
    1824:	88 1f       	adc	r24, r24
    1826:	da f7       	brpl	.-10     	; 0x181e <__floatsisf+0x62>
    1828:	88 0f       	add	r24, r24
    182a:	96 95       	lsr	r25
    182c:	87 95       	ror	r24
    182e:	97 f9       	bld	r25, 7
    1830:	08 95       	ret

00001832 <__fp_inf>:
    1832:	97 f9       	bld	r25, 7
    1834:	9f 67       	ori	r25, 0x7F	; 127
    1836:	80 e8       	ldi	r24, 0x80	; 128
    1838:	70 e0       	ldi	r23, 0x00	; 0
    183a:	60 e0       	ldi	r22, 0x00	; 0
    183c:	08 95       	ret

0000183e <__fp_nan>:
    183e:	9f ef       	ldi	r25, 0xFF	; 255
    1840:	80 ec       	ldi	r24, 0xC0	; 192
    1842:	08 95       	ret

00001844 <__fp_pscA>:
    1844:	00 24       	eor	r0, r0
    1846:	0a 94       	dec	r0
    1848:	16 16       	cp	r1, r22
    184a:	17 06       	cpc	r1, r23
    184c:	18 06       	cpc	r1, r24
    184e:	09 06       	cpc	r0, r25
    1850:	08 95       	ret

00001852 <__fp_pscB>:
    1852:	00 24       	eor	r0, r0
    1854:	0a 94       	dec	r0
    1856:	12 16       	cp	r1, r18
    1858:	13 06       	cpc	r1, r19
    185a:	14 06       	cpc	r1, r20
    185c:	05 06       	cpc	r0, r21
    185e:	08 95       	ret

00001860 <__fp_round>:
    1860:	09 2e       	mov	r0, r25
    1862:	03 94       	inc	r0
    1864:	00 0c       	add	r0, r0
    1866:	11 f4       	brne	.+4      	; 0x186c <__fp_round+0xc>
    1868:	88 23       	and	r24, r24
    186a:	52 f0       	brmi	.+20     	; 0x1880 <__fp_round+0x20>
    186c:	bb 0f       	add	r27, r27
    186e:	40 f4       	brcc	.+16     	; 0x1880 <__fp_round+0x20>
    1870:	bf 2b       	or	r27, r31
    1872:	11 f4       	brne	.+4      	; 0x1878 <__fp_round+0x18>
    1874:	60 ff       	sbrs	r22, 0
    1876:	04 c0       	rjmp	.+8      	; 0x1880 <__fp_round+0x20>
    1878:	6f 5f       	subi	r22, 0xFF	; 255
    187a:	7f 4f       	sbci	r23, 0xFF	; 255
    187c:	8f 4f       	sbci	r24, 0xFF	; 255
    187e:	9f 4f       	sbci	r25, 0xFF	; 255
    1880:	08 95       	ret

00001882 <__fp_split3>:
    1882:	57 fd       	sbrc	r21, 7
    1884:	90 58       	subi	r25, 0x80	; 128
    1886:	44 0f       	add	r20, r20
    1888:	55 1f       	adc	r21, r21
    188a:	59 f0       	breq	.+22     	; 0x18a2 <__fp_splitA+0x10>
    188c:	5f 3f       	cpi	r21, 0xFF	; 255
    188e:	71 f0       	breq	.+28     	; 0x18ac <__fp_splitA+0x1a>
    1890:	47 95       	ror	r20

00001892 <__fp_splitA>:
    1892:	88 0f       	add	r24, r24
    1894:	97 fb       	bst	r25, 7
    1896:	99 1f       	adc	r25, r25
    1898:	61 f0       	breq	.+24     	; 0x18b2 <__fp_splitA+0x20>
    189a:	9f 3f       	cpi	r25, 0xFF	; 255
    189c:	79 f0       	breq	.+30     	; 0x18bc <__fp_splitA+0x2a>
    189e:	87 95       	ror	r24
    18a0:	08 95       	ret
    18a2:	12 16       	cp	r1, r18
    18a4:	13 06       	cpc	r1, r19
    18a6:	14 06       	cpc	r1, r20
    18a8:	55 1f       	adc	r21, r21
    18aa:	f2 cf       	rjmp	.-28     	; 0x1890 <__fp_split3+0xe>
    18ac:	46 95       	lsr	r20
    18ae:	f1 df       	rcall	.-30     	; 0x1892 <__fp_splitA>
    18b0:	08 c0       	rjmp	.+16     	; 0x18c2 <__fp_splitA+0x30>
    18b2:	16 16       	cp	r1, r22
    18b4:	17 06       	cpc	r1, r23
    18b6:	18 06       	cpc	r1, r24
    18b8:	99 1f       	adc	r25, r25
    18ba:	f1 cf       	rjmp	.-30     	; 0x189e <__fp_splitA+0xc>
    18bc:	86 95       	lsr	r24
    18be:	71 05       	cpc	r23, r1
    18c0:	61 05       	cpc	r22, r1
    18c2:	08 94       	sec
    18c4:	08 95       	ret

000018c6 <__fp_zero>:
    18c6:	e8 94       	clt

000018c8 <__fp_szero>:
    18c8:	bb 27       	eor	r27, r27
    18ca:	66 27       	eor	r22, r22
    18cc:	77 27       	eor	r23, r23
    18ce:	cb 01       	movw	r24, r22
    18d0:	97 f9       	bld	r25, 7
    18d2:	08 95       	ret

000018d4 <__mulsf3>:
    18d4:	0b d0       	rcall	.+22     	; 0x18ec <__mulsf3x>
    18d6:	c4 cf       	rjmp	.-120    	; 0x1860 <__fp_round>
    18d8:	b5 df       	rcall	.-150    	; 0x1844 <__fp_pscA>
    18da:	28 f0       	brcs	.+10     	; 0x18e6 <__mulsf3+0x12>
    18dc:	ba df       	rcall	.-140    	; 0x1852 <__fp_pscB>
    18de:	18 f0       	brcs	.+6      	; 0x18e6 <__mulsf3+0x12>
    18e0:	95 23       	and	r25, r21
    18e2:	09 f0       	breq	.+2      	; 0x18e6 <__mulsf3+0x12>
    18e4:	a6 cf       	rjmp	.-180    	; 0x1832 <__fp_inf>
    18e6:	ab cf       	rjmp	.-170    	; 0x183e <__fp_nan>
    18e8:	11 24       	eor	r1, r1
    18ea:	ee cf       	rjmp	.-36     	; 0x18c8 <__fp_szero>

000018ec <__mulsf3x>:
    18ec:	ca df       	rcall	.-108    	; 0x1882 <__fp_split3>
    18ee:	a0 f3       	brcs	.-24     	; 0x18d8 <__mulsf3+0x4>

000018f0 <__mulsf3_pse>:
    18f0:	95 9f       	mul	r25, r21
    18f2:	d1 f3       	breq	.-12     	; 0x18e8 <__mulsf3+0x14>
    18f4:	95 0f       	add	r25, r21
    18f6:	50 e0       	ldi	r21, 0x00	; 0
    18f8:	55 1f       	adc	r21, r21
    18fa:	62 9f       	mul	r22, r18
    18fc:	f0 01       	movw	r30, r0
    18fe:	72 9f       	mul	r23, r18
    1900:	bb 27       	eor	r27, r27
    1902:	f0 0d       	add	r31, r0
    1904:	b1 1d       	adc	r27, r1
    1906:	63 9f       	mul	r22, r19
    1908:	aa 27       	eor	r26, r26
    190a:	f0 0d       	add	r31, r0
    190c:	b1 1d       	adc	r27, r1
    190e:	aa 1f       	adc	r26, r26
    1910:	64 9f       	mul	r22, r20
    1912:	66 27       	eor	r22, r22
    1914:	b0 0d       	add	r27, r0
    1916:	a1 1d       	adc	r26, r1
    1918:	66 1f       	adc	r22, r22
    191a:	82 9f       	mul	r24, r18
    191c:	22 27       	eor	r18, r18
    191e:	b0 0d       	add	r27, r0
    1920:	a1 1d       	adc	r26, r1
    1922:	62 1f       	adc	r22, r18
    1924:	73 9f       	mul	r23, r19
    1926:	b0 0d       	add	r27, r0
    1928:	a1 1d       	adc	r26, r1
    192a:	62 1f       	adc	r22, r18
    192c:	83 9f       	mul	r24, r19
    192e:	a0 0d       	add	r26, r0
    1930:	61 1d       	adc	r22, r1
    1932:	22 1f       	adc	r18, r18
    1934:	74 9f       	mul	r23, r20
    1936:	33 27       	eor	r19, r19
    1938:	a0 0d       	add	r26, r0
    193a:	61 1d       	adc	r22, r1
    193c:	23 1f       	adc	r18, r19
    193e:	84 9f       	mul	r24, r20
    1940:	60 0d       	add	r22, r0
    1942:	21 1d       	adc	r18, r1
    1944:	82 2f       	mov	r24, r18
    1946:	76 2f       	mov	r23, r22
    1948:	6a 2f       	mov	r22, r26
    194a:	11 24       	eor	r1, r1
    194c:	9f 57       	subi	r25, 0x7F	; 127
    194e:	50 40       	sbci	r21, 0x00	; 0
    1950:	8a f0       	brmi	.+34     	; 0x1974 <__mulsf3_pse+0x84>
    1952:	e1 f0       	breq	.+56     	; 0x198c <__mulsf3_pse+0x9c>
    1954:	88 23       	and	r24, r24
    1956:	4a f0       	brmi	.+18     	; 0x196a <__mulsf3_pse+0x7a>
    1958:	ee 0f       	add	r30, r30
    195a:	ff 1f       	adc	r31, r31
    195c:	bb 1f       	adc	r27, r27
    195e:	66 1f       	adc	r22, r22
    1960:	77 1f       	adc	r23, r23
    1962:	88 1f       	adc	r24, r24
    1964:	91 50       	subi	r25, 0x01	; 1
    1966:	50 40       	sbci	r21, 0x00	; 0
    1968:	a9 f7       	brne	.-22     	; 0x1954 <__mulsf3_pse+0x64>
    196a:	9e 3f       	cpi	r25, 0xFE	; 254
    196c:	51 05       	cpc	r21, r1
    196e:	70 f0       	brcs	.+28     	; 0x198c <__mulsf3_pse+0x9c>
    1970:	60 cf       	rjmp	.-320    	; 0x1832 <__fp_inf>
    1972:	aa cf       	rjmp	.-172    	; 0x18c8 <__fp_szero>
    1974:	5f 3f       	cpi	r21, 0xFF	; 255
    1976:	ec f3       	brlt	.-6      	; 0x1972 <__mulsf3_pse+0x82>
    1978:	98 3e       	cpi	r25, 0xE8	; 232
    197a:	dc f3       	brlt	.-10     	; 0x1972 <__mulsf3_pse+0x82>
    197c:	86 95       	lsr	r24
    197e:	77 95       	ror	r23
    1980:	67 95       	ror	r22
    1982:	b7 95       	ror	r27
    1984:	f7 95       	ror	r31
    1986:	e7 95       	ror	r30
    1988:	9f 5f       	subi	r25, 0xFF	; 255
    198a:	c1 f7       	brne	.-16     	; 0x197c <__mulsf3_pse+0x8c>
    198c:	fe 2b       	or	r31, r30
    198e:	88 0f       	add	r24, r24
    1990:	91 1d       	adc	r25, r1
    1992:	96 95       	lsr	r25
    1994:	87 95       	ror	r24
    1996:	97 f9       	bld	r25, 7
    1998:	08 95       	ret

0000199a <__udivmodsi4>:
    199a:	a1 e2       	ldi	r26, 0x21	; 33
    199c:	1a 2e       	mov	r1, r26
    199e:	aa 1b       	sub	r26, r26
    19a0:	bb 1b       	sub	r27, r27
    19a2:	fd 01       	movw	r30, r26
    19a4:	0d c0       	rjmp	.+26     	; 0x19c0 <__udivmodsi4_ep>

000019a6 <__udivmodsi4_loop>:
    19a6:	aa 1f       	adc	r26, r26
    19a8:	bb 1f       	adc	r27, r27
    19aa:	ee 1f       	adc	r30, r30
    19ac:	ff 1f       	adc	r31, r31
    19ae:	a2 17       	cp	r26, r18
    19b0:	b3 07       	cpc	r27, r19
    19b2:	e4 07       	cpc	r30, r20
    19b4:	f5 07       	cpc	r31, r21
    19b6:	20 f0       	brcs	.+8      	; 0x19c0 <__udivmodsi4_ep>
    19b8:	a2 1b       	sub	r26, r18
    19ba:	b3 0b       	sbc	r27, r19
    19bc:	e4 0b       	sbc	r30, r20
    19be:	f5 0b       	sbc	r31, r21

000019c0 <__udivmodsi4_ep>:
    19c0:	66 1f       	adc	r22, r22
    19c2:	77 1f       	adc	r23, r23
    19c4:	88 1f       	adc	r24, r24
    19c6:	99 1f       	adc	r25, r25
    19c8:	1a 94       	dec	r1
    19ca:	69 f7       	brne	.-38     	; 0x19a6 <__udivmodsi4_loop>
    19cc:	60 95       	com	r22
    19ce:	70 95       	com	r23
    19d0:	80 95       	com	r24
    19d2:	90 95       	com	r25
    19d4:	9b 01       	movw	r18, r22
    19d6:	ac 01       	movw	r20, r24
    19d8:	bd 01       	movw	r22, r26
    19da:	cf 01       	movw	r24, r30
    19dc:	08 95       	ret

000019de <__tablejump2__>:
    19de:	ee 0f       	add	r30, r30
    19e0:	ff 1f       	adc	r31, r31
    19e2:	05 90       	lpm	r0, Z+
    19e4:	f4 91       	lpm	r31, Z
    19e6:	e0 2d       	mov	r30, r0
    19e8:	09 94       	ijmp

000019ea <__umulhisi3>:
    19ea:	a2 9f       	mul	r26, r18
    19ec:	b0 01       	movw	r22, r0
    19ee:	b3 9f       	mul	r27, r19
    19f0:	c0 01       	movw	r24, r0
    19f2:	a3 9f       	mul	r26, r19
    19f4:	70 0d       	add	r23, r0
    19f6:	81 1d       	adc	r24, r1
    19f8:	11 24       	eor	r1, r1
    19fa:	91 1d       	adc	r25, r1
    19fc:	b2 9f       	mul	r27, r18
    19fe:	70 0d       	add	r23, r0
    1a00:	81 1d       	adc	r24, r1
    1a02:	11 24       	eor	r1, r1
    1a04:	91 1d       	adc	r25, r1
    1a06:	08 95       	ret

00001a08 <atoi>:
    1a08:	fc 01       	movw	r30, r24
    1a0a:	88 27       	eor	r24, r24
    1a0c:	99 27       	eor	r25, r25
    1a0e:	e8 94       	clt
    1a10:	21 91       	ld	r18, Z+
    1a12:	20 32       	cpi	r18, 0x20	; 32
    1a14:	e9 f3       	breq	.-6      	; 0x1a10 <atoi+0x8>
    1a16:	29 30       	cpi	r18, 0x09	; 9
    1a18:	10 f0       	brcs	.+4      	; 0x1a1e <atoi+0x16>
    1a1a:	2e 30       	cpi	r18, 0x0E	; 14
    1a1c:	c8 f3       	brcs	.-14     	; 0x1a10 <atoi+0x8>
    1a1e:	2b 32       	cpi	r18, 0x2B	; 43
    1a20:	39 f0       	breq	.+14     	; 0x1a30 <atoi+0x28>
    1a22:	2d 32       	cpi	r18, 0x2D	; 45
    1a24:	31 f4       	brne	.+12     	; 0x1a32 <atoi+0x2a>
    1a26:	68 94       	set
    1a28:	03 c0       	rjmp	.+6      	; 0x1a30 <atoi+0x28>
    1a2a:	54 d0       	rcall	.+168    	; 0x1ad4 <__mulhi_const_10>
    1a2c:	82 0f       	add	r24, r18
    1a2e:	91 1d       	adc	r25, r1
    1a30:	21 91       	ld	r18, Z+
    1a32:	20 53       	subi	r18, 0x30	; 48
    1a34:	2a 30       	cpi	r18, 0x0A	; 10
    1a36:	c8 f3       	brcs	.-14     	; 0x1a2a <atoi+0x22>
    1a38:	1e f4       	brtc	.+6      	; 0x1a40 <atoi+0x38>
    1a3a:	90 95       	com	r25
    1a3c:	81 95       	neg	r24
    1a3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a40:	08 95       	ret

00001a42 <memcpy>:
    1a42:	fb 01       	movw	r30, r22
    1a44:	dc 01       	movw	r26, r24
    1a46:	02 c0       	rjmp	.+4      	; 0x1a4c <memcpy+0xa>
    1a48:	01 90       	ld	r0, Z+
    1a4a:	0d 92       	st	X+, r0
    1a4c:	41 50       	subi	r20, 0x01	; 1
    1a4e:	50 40       	sbci	r21, 0x00	; 0
    1a50:	d8 f7       	brcc	.-10     	; 0x1a48 <memcpy+0x6>
    1a52:	08 95       	ret

00001a54 <strcat>:
    1a54:	fb 01       	movw	r30, r22
    1a56:	dc 01       	movw	r26, r24
    1a58:	0d 90       	ld	r0, X+
    1a5a:	00 20       	and	r0, r0
    1a5c:	e9 f7       	brne	.-6      	; 0x1a58 <strcat+0x4>
    1a5e:	11 97       	sbiw	r26, 0x01	; 1
    1a60:	01 90       	ld	r0, Z+
    1a62:	0d 92       	st	X+, r0
    1a64:	00 20       	and	r0, r0
    1a66:	e1 f7       	brne	.-8      	; 0x1a60 <strcat+0xc>
    1a68:	08 95       	ret

00001a6a <strcpy>:
    1a6a:	fb 01       	movw	r30, r22
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	01 90       	ld	r0, Z+
    1a70:	0d 92       	st	X+, r0
    1a72:	00 20       	and	r0, r0
    1a74:	e1 f7       	brne	.-8      	; 0x1a6e <strcpy+0x4>
    1a76:	08 95       	ret

00001a78 <strstr>:
    1a78:	fb 01       	movw	r30, r22
    1a7a:	51 91       	ld	r21, Z+
    1a7c:	55 23       	and	r21, r21
    1a7e:	a9 f0       	breq	.+42     	; 0x1aaa <strstr+0x32>
    1a80:	bf 01       	movw	r22, r30
    1a82:	dc 01       	movw	r26, r24
    1a84:	4d 91       	ld	r20, X+
    1a86:	45 17       	cp	r20, r21
    1a88:	41 11       	cpse	r20, r1
    1a8a:	e1 f7       	brne	.-8      	; 0x1a84 <strstr+0xc>
    1a8c:	59 f4       	brne	.+22     	; 0x1aa4 <strstr+0x2c>
    1a8e:	cd 01       	movw	r24, r26
    1a90:	01 90       	ld	r0, Z+
    1a92:	00 20       	and	r0, r0
    1a94:	49 f0       	breq	.+18     	; 0x1aa8 <strstr+0x30>
    1a96:	4d 91       	ld	r20, X+
    1a98:	40 15       	cp	r20, r0
    1a9a:	41 11       	cpse	r20, r1
    1a9c:	c9 f3       	breq	.-14     	; 0x1a90 <strstr+0x18>
    1a9e:	fb 01       	movw	r30, r22
    1aa0:	41 11       	cpse	r20, r1
    1aa2:	ef cf       	rjmp	.-34     	; 0x1a82 <strstr+0xa>
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	08 95       	ret

00001aac <itoa>:
    1aac:	45 32       	cpi	r20, 0x25	; 37
    1aae:	51 05       	cpc	r21, r1
    1ab0:	18 f4       	brcc	.+6      	; 0x1ab8 <itoa+0xc>
    1ab2:	42 30       	cpi	r20, 0x02	; 2
    1ab4:	08 f0       	brcs	.+2      	; 0x1ab8 <itoa+0xc>
    1ab6:	04 c0       	rjmp	.+8      	; 0x1ac0 <__itoa_ncheck>
    1ab8:	fb 01       	movw	r30, r22
    1aba:	10 82       	st	Z, r1
    1abc:	cb 01       	movw	r24, r22
    1abe:	08 95       	ret

00001ac0 <__itoa_ncheck>:
    1ac0:	bb 27       	eor	r27, r27
    1ac2:	4a 30       	cpi	r20, 0x0A	; 10
    1ac4:	31 f4       	brne	.+12     	; 0x1ad2 <__itoa_ncheck+0x12>
    1ac6:	99 23       	and	r25, r25
    1ac8:	22 f4       	brpl	.+8      	; 0x1ad2 <__itoa_ncheck+0x12>
    1aca:	bd e2       	ldi	r27, 0x2D	; 45
    1acc:	90 95       	com	r25
    1ace:	81 95       	neg	r24
    1ad0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad2:	09 c0       	rjmp	.+18     	; 0x1ae6 <__utoa_common>

00001ad4 <__mulhi_const_10>:
    1ad4:	7a e0       	ldi	r23, 0x0A	; 10
    1ad6:	97 9f       	mul	r25, r23
    1ad8:	90 2d       	mov	r25, r0
    1ada:	87 9f       	mul	r24, r23
    1adc:	80 2d       	mov	r24, r0
    1ade:	91 0d       	add	r25, r1
    1ae0:	11 24       	eor	r1, r1
    1ae2:	08 95       	ret

00001ae4 <__utoa_ncheck>:
    1ae4:	bb 27       	eor	r27, r27

00001ae6 <__utoa_common>:
    1ae6:	fb 01       	movw	r30, r22
    1ae8:	55 27       	eor	r21, r21
    1aea:	aa 27       	eor	r26, r26
    1aec:	88 0f       	add	r24, r24
    1aee:	99 1f       	adc	r25, r25
    1af0:	aa 1f       	adc	r26, r26
    1af2:	a4 17       	cp	r26, r20
    1af4:	10 f0       	brcs	.+4      	; 0x1afa <__utoa_common+0x14>
    1af6:	a4 1b       	sub	r26, r20
    1af8:	83 95       	inc	r24
    1afa:	50 51       	subi	r21, 0x10	; 16
    1afc:	b9 f7       	brne	.-18     	; 0x1aec <__utoa_common+0x6>
    1afe:	a0 5d       	subi	r26, 0xD0	; 208
    1b00:	aa 33       	cpi	r26, 0x3A	; 58
    1b02:	08 f0       	brcs	.+2      	; 0x1b06 <__utoa_common+0x20>
    1b04:	a9 5d       	subi	r26, 0xD9	; 217
    1b06:	a1 93       	st	Z+, r26
    1b08:	00 97       	sbiw	r24, 0x00	; 0
    1b0a:	79 f7       	brne	.-34     	; 0x1aea <__utoa_common+0x4>
    1b0c:	b1 11       	cpse	r27, r1
    1b0e:	b1 93       	st	Z+, r27
    1b10:	11 92       	st	Z+, r1
    1b12:	cb 01       	movw	r24, r22
    1b14:	00 c0       	rjmp	.+0      	; 0x1b16 <strrev>

00001b16 <strrev>:
    1b16:	dc 01       	movw	r26, r24
    1b18:	fc 01       	movw	r30, r24
    1b1a:	67 2f       	mov	r22, r23
    1b1c:	71 91       	ld	r23, Z+
    1b1e:	77 23       	and	r23, r23
    1b20:	e1 f7       	brne	.-8      	; 0x1b1a <strrev+0x4>
    1b22:	32 97       	sbiw	r30, 0x02	; 2
    1b24:	04 c0       	rjmp	.+8      	; 0x1b2e <strrev+0x18>
    1b26:	7c 91       	ld	r23, X
    1b28:	6d 93       	st	X+, r22
    1b2a:	70 83       	st	Z, r23
    1b2c:	62 91       	ld	r22, -Z
    1b2e:	ae 17       	cp	r26, r30
    1b30:	bf 07       	cpc	r27, r31
    1b32:	c8 f3       	brcs	.-14     	; 0x1b26 <strrev+0x10>
    1b34:	08 95       	ret

00001b36 <_exit>:
    1b36:	f8 94       	cli

00001b38 <__stop_program>:
    1b38:	ff cf       	rjmp	.-2      	; 0x1b38 <__stop_program>
