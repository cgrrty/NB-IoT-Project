
NB_IOT_MEGA324PA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000316  00800100  0000176e  00001802  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000176e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000124  00800416  00800416  00001b18  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b18  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000310  00000000  00000000  00001b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004f7c  00000000  00000000  00001e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000194f  00000000  00000000  00006e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000378d  00000000  00000000  00008763  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b48  00000000  00000000  0000bef0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000150a2  00000000  00000000  0000ca38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003ff0  00000000  00000000  00021ada  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000298  00000000  00000000  00025aca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00005faa  00000000  00000000  00025d62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
       2:	00 00       	nop
       4:	63 c0       	rjmp	.+198    	; 0xcc <__bad_interrupt>
       6:	00 00       	nop
       8:	61 c0       	rjmp	.+194    	; 0xcc <__bad_interrupt>
       a:	00 00       	nop
       c:	5f c0       	rjmp	.+190    	; 0xcc <__bad_interrupt>
       e:	00 00       	nop
      10:	5d c0       	rjmp	.+186    	; 0xcc <__bad_interrupt>
      12:	00 00       	nop
      14:	5b c0       	rjmp	.+182    	; 0xcc <__bad_interrupt>
      16:	00 00       	nop
      18:	59 c0       	rjmp	.+178    	; 0xcc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	57 c0       	rjmp	.+174    	; 0xcc <__bad_interrupt>
      1e:	00 00       	nop
      20:	38 c4       	rjmp	.+2160   	; 0x892 <__vector_8>
      22:	00 00       	nop
      24:	53 c0       	rjmp	.+166    	; 0xcc <__bad_interrupt>
      26:	00 00       	nop
      28:	51 c0       	rjmp	.+162    	; 0xcc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4f c0       	rjmp	.+158    	; 0xcc <__bad_interrupt>
      2e:	00 00       	nop
      30:	4d c0       	rjmp	.+154    	; 0xcc <__bad_interrupt>
      32:	00 00       	nop
      34:	4b c0       	rjmp	.+150    	; 0xcc <__bad_interrupt>
      36:	00 00       	nop
      38:	49 c0       	rjmp	.+146    	; 0xcc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	47 c0       	rjmp	.+142    	; 0xcc <__bad_interrupt>
      3e:	00 00       	nop
      40:	45 c0       	rjmp	.+138    	; 0xcc <__bad_interrupt>
      42:	00 00       	nop
      44:	43 c0       	rjmp	.+134    	; 0xcc <__bad_interrupt>
      46:	00 00       	nop
      48:	41 c0       	rjmp	.+130    	; 0xcc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3f c0       	rjmp	.+126    	; 0xcc <__bad_interrupt>
      4e:	00 00       	nop
      50:	e4 c3       	rjmp	.+1992   	; 0x81a <__vector_20>
      52:	00 00       	nop
      54:	3b c0       	rjmp	.+118    	; 0xcc <__bad_interrupt>
      56:	00 00       	nop
      58:	39 c0       	rjmp	.+114    	; 0xcc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	37 c0       	rjmp	.+110    	; 0xcc <__bad_interrupt>
      5e:	00 00       	nop
      60:	35 c0       	rjmp	.+106    	; 0xcc <__bad_interrupt>
      62:	00 00       	nop
      64:	33 c0       	rjmp	.+102    	; 0xcc <__bad_interrupt>
      66:	00 00       	nop
      68:	31 c0       	rjmp	.+98     	; 0xcc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2f c0       	rjmp	.+94     	; 0xcc <__bad_interrupt>
      6e:	00 00       	nop
      70:	2d c0       	rjmp	.+90     	; 0xcc <__bad_interrupt>
      72:	00 00       	nop
      74:	2b c0       	rjmp	.+86     	; 0xcc <__bad_interrupt>
      76:	00 00       	nop
      78:	29 c0       	rjmp	.+82     	; 0xcc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c0 04       	cpc	r12, r0
      7e:	c4 04       	cpc	r12, r4
      80:	1a 05       	cpc	r17, r10
      82:	35 05       	cpc	r19, r5
      84:	3a 05       	cpc	r19, r10
      86:	3e 05       	cpc	r19, r14
      88:	42 05       	cpc	r20, r2
      8a:	8c 05       	cpc	r24, r12
      8c:	8f 05       	cpc	r24, r15
      8e:	92 05       	cpc	r25, r2
      90:	96 05       	cpc	r25, r6
      92:	9a 05       	cpc	r25, r10

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d8 e0       	ldi	r29, 0x08	; 8
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	14 e0       	ldi	r17, 0x04	; 4
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	ee e6       	ldi	r30, 0x6E	; 110
      a8:	f7 e1       	ldi	r31, 0x17	; 23
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0
      b0:	a6 31       	cpi	r26, 0x16	; 22
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>

000000b6 <__do_clear_bss>:
      b6:	25 e0       	ldi	r18, 0x05	; 5
      b8:	a6 e1       	ldi	r26, 0x16	; 22
      ba:	b4 e0       	ldi	r27, 0x04	; 4
      bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
      be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
      c0:	aa 33       	cpi	r26, 0x3A	; 58
      c2:	b2 07       	cpc	r27, r18
      c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
      c6:	67 d5       	rcall	.+2766   	; 0xb96 <main>
      c8:	0c 94 b5 0b 	jmp	0x176a	; 0x176a <_exit>

000000cc <__bad_interrupt>:
      cc:	99 cf       	rjmp	.-206    	; 0x0 <__vectors>

000000ce <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
      ce:	cf 93       	push	r28
      d0:	df 93       	push	r29
      d2:	1f 92       	push	r1
      d4:	cd b7       	in	r28, 0x3d	; 61
      d6:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
      d8:	9f b7       	in	r25, 0x3f	; 63
      da:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
      dc:	f8 94       	cli
	return flags;
      de:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
      e0:	82 30       	cpi	r24, 0x02	; 2
      e2:	40 f4       	brcc	.+16     	; 0xf4 <sysclk_enable_module+0x26>
		*(reg + port)  &= ~id;
      e4:	e8 2f       	mov	r30, r24
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	ec 59       	subi	r30, 0x9C	; 156
      ea:	ff 4f       	sbci	r31, 0xFF	; 255
      ec:	60 95       	com	r22
      ee:	80 81       	ld	r24, Z
      f0:	68 23       	and	r22, r24
      f2:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
      f4:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
      f6:	0f 90       	pop	r0
      f8:	df 91       	pop	r29
      fa:	cf 91       	pop	r28
      fc:	08 95       	ret

000000fe <usart_putchar>:
	}

	if (baud_offset != USART_BAUD_UNDEFINED) {
		usart->UBRR = baudctrl;
	}
}
      fe:	fc 01       	movw	r30, r24
     100:	90 81       	ld	r25, Z
     102:	95 ff       	sbrs	r25, 5
     104:	fd cf       	rjmp	.-6      	; 0x100 <usart_putchar+0x2>
     106:	66 83       	std	Z+6, r22	; 0x06
     108:	80 e0       	ldi	r24, 0x00	; 0
     10a:	08 95       	ret

0000010c <usart_getchar>:
     10c:	fc 01       	movw	r30, r24
     10e:	90 81       	ld	r25, Z
     110:	99 23       	and	r25, r25
     112:	ec f7       	brge	.-6      	; 0x10e <usart_getchar+0x2>
     114:	86 81       	ldd	r24, Z+6	; 0x06
     116:	08 95       	ret

00000118 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     118:	4f 92       	push	r4
     11a:	5f 92       	push	r5
     11c:	6f 92       	push	r6
     11e:	7f 92       	push	r7
     120:	8f 92       	push	r8
     122:	9f 92       	push	r9
     124:	af 92       	push	r10
     126:	bf 92       	push	r11
     128:	cf 92       	push	r12
     12a:	df 92       	push	r13
     12c:	ef 92       	push	r14
     12e:	ff 92       	push	r15
     130:	0f 93       	push	r16
     132:	1f 93       	push	r17
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
     138:	ec 01       	movw	r28, r24
     13a:	6a 01       	movw	r12, r20
     13c:	7b 01       	movw	r14, r22

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
     13e:	28 01       	movw	r4, r16
     140:	39 01       	movw	r6, r18
     142:	68 94       	set
     144:	12 f8       	bld	r1, 2
     146:	76 94       	lsr	r7
     148:	67 94       	ror	r6
     14a:	57 94       	ror	r5
     14c:	47 94       	ror	r4
     14e:	16 94       	lsr	r1
     150:	d1 f7       	brne	.-12     	; 0x146 <usart_set_baudrate+0x2e>
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;

	if (usart->UCSRnA & USART_U2X_bm) {
     152:	88 81       	ld	r24, Y
     154:	81 fd       	sbrc	r24, 1
     156:	0e c0       	rjmp	.+28     	; 0x174 <usart_set_baudrate+0x5c>
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;
     158:	48 01       	movw	r8, r16
     15a:	59 01       	movw	r10, r18
     15c:	07 2e       	mov	r0, r23
     15e:	73 e1       	ldi	r23, 0x13	; 19
     160:	b6 94       	lsr	r11
     162:	a7 94       	ror	r10
     164:	97 94       	ror	r9
     166:	87 94       	ror	r8
     168:	7a 95       	dec	r23
     16a:	d1 f7       	brne	.-12     	; 0x160 <usart_set_baudrate+0x48>
     16c:	70 2d       	mov	r23, r0

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
     16e:	d3 01       	movw	r26, r6
     170:	c2 01       	movw	r24, r4
     172:	15 c0       	rjmp	.+42     	; 0x19e <usart_set_baudrate+0x86>
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;

	if (usart->UCSRnA & USART_U2X_bm) {
		max_rate /= 2;
     174:	d9 01       	movw	r26, r18
     176:	c8 01       	movw	r24, r16
     178:	68 94       	set
     17a:	13 f8       	bld	r1, 3
     17c:	b6 95       	lsr	r27
     17e:	a7 95       	ror	r26
     180:	97 95       	ror	r25
     182:	87 95       	ror	r24
     184:	16 94       	lsr	r1
     186:	d1 f7       	brne	.-12     	; 0x17c <usart_set_baudrate+0x64>
		min_rate /= 2;
     188:	48 01       	movw	r8, r16
     18a:	59 01       	movw	r10, r18
     18c:	07 2e       	mov	r0, r23
     18e:	74 e1       	ldi	r23, 0x14	; 20
     190:	b6 94       	lsr	r11
     192:	a7 94       	ror	r10
     194:	97 94       	ror	r9
     196:	87 94       	ror	r8
     198:	7a 95       	dec	r23
     19a:	d1 f7       	brne	.-12     	; 0x190 <usart_set_baudrate+0x78>
     19c:	70 2d       	mov	r23, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     19e:	8c 15       	cp	r24, r12
     1a0:	9d 05       	cpc	r25, r13
     1a2:	ae 05       	cpc	r26, r14
     1a4:	bf 05       	cpc	r27, r15
     1a6:	78 f1       	brcs	.+94     	; 0x206 <usart_set_baudrate+0xee>
     1a8:	c8 14       	cp	r12, r8
     1aa:	d9 04       	cpc	r13, r9
     1ac:	ea 04       	cpc	r14, r10
     1ae:	fb 04       	cpc	r15, r11
     1b0:	60 f1       	brcs	.+88     	; 0x20a <usart_set_baudrate+0xf2>
		return false;
	}

	/* Check if double speed is enabled. */
	if (usart->UCSRnA & USART_U2X_bm) {
     1b2:	88 81       	ld	r24, Y
     1b4:	81 ff       	sbrs	r24, 1
     1b6:	10 c0       	rjmp	.+32     	; 0x1d8 <usart_set_baudrate+0xc0>
		baud *= 2;
		ubrr = (uint32_t)(cpu_hz / 8 / baud) - 1;
     1b8:	a7 01       	movw	r20, r14
     1ba:	96 01       	movw	r18, r12
     1bc:	22 0f       	add	r18, r18
     1be:	33 1f       	adc	r19, r19
     1c0:	44 1f       	adc	r20, r20
     1c2:	55 1f       	adc	r21, r21
     1c4:	c3 01       	movw	r24, r6
     1c6:	b2 01       	movw	r22, r4
     1c8:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__udivmodsi4>
     1cc:	da 01       	movw	r26, r20
     1ce:	c9 01       	movw	r24, r18
     1d0:	01 97       	sbiw	r24, 0x01	; 1
     1d2:	a1 09       	sbc	r26, r1
     1d4:	b1 09       	sbc	r27, r1
     1d6:	13 c0       	rjmp	.+38     	; 0x1fe <usart_set_baudrate+0xe6>
	} else {
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
     1d8:	c9 01       	movw	r24, r18
     1da:	b8 01       	movw	r22, r16
     1dc:	68 94       	set
     1de:	13 f8       	bld	r1, 3
     1e0:	96 95       	lsr	r25
     1e2:	87 95       	ror	r24
     1e4:	77 95       	ror	r23
     1e6:	67 95       	ror	r22
     1e8:	16 94       	lsr	r1
     1ea:	d1 f7       	brne	.-12     	; 0x1e0 <usart_set_baudrate+0xc8>
     1ec:	a7 01       	movw	r20, r14
     1ee:	96 01       	movw	r18, r12
     1f0:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__udivmodsi4>
     1f4:	da 01       	movw	r26, r20
     1f6:	c9 01       	movw	r24, r18
     1f8:	01 97       	sbiw	r24, 0x01	; 1
     1fa:	a1 09       	sbc	r26, r1
     1fc:	b1 09       	sbc	r27, r1
	}

	usart->UBRR = ubrr;
     1fe:	9d 83       	std	Y+5, r25	; 0x05
     200:	8c 83       	std	Y+4, r24	; 0x04
	return true;
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	03 c0       	rjmp	.+6      	; 0x20c <usart_set_baudrate+0xf4>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	01 c0       	rjmp	.+2      	; 0x20c <usart_set_baudrate+0xf4>
     20a:	80 e0       	ldi	r24, 0x00	; 0
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
	}

	usart->UBRR = ubrr;
	return true;
}
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	1f 91       	pop	r17
     212:	0f 91       	pop	r16
     214:	ff 90       	pop	r15
     216:	ef 90       	pop	r14
     218:	df 90       	pop	r13
     21a:	cf 90       	pop	r12
     21c:	bf 90       	pop	r11
     21e:	af 90       	pop	r10
     220:	9f 90       	pop	r9
     222:	8f 90       	pop	r8
     224:	7f 90       	pop	r7
     226:	6f 90       	pop	r6
     228:	5f 90       	pop	r5
     22a:	4f 90       	pop	r4
     22c:	08 95       	ret

0000022e <usart_init_rs232>:
 *
 * \retval true if the initialization was successful
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     22e:	0f 93       	push	r16
     230:	1f 93       	push	r17
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
     236:	ec 01       	movw	r28, r24
     238:	8b 01       	movw	r16, r22
 * \brief usart Pointer to an USART module.
 */
static inline void usart_enable_module_clock(USART_t *usart)
{
#ifdef USART0
	if ((uintptr_t)usart == (uintptr_t)&UCSR0A) {
     23a:	80 3c       	cpi	r24, 0xC0	; 192
     23c:	91 05       	cpc	r25, r1
     23e:	19 f4       	brne	.+6      	; 0x246 <usart_init_rs232+0x18>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
     240:	62 e0       	ldi	r22, 0x02	; 2
     242:	80 e0       	ldi	r24, 0x00	; 0
     244:	44 df       	rcall	.-376    	; 0xce <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_UMSEL01_gm)) | usartmode;
     246:	8a 81       	ldd	r24, Y+2	; 0x02
     248:	8f 73       	andi	r24, 0x3F	; 63
     24a:	8a 83       	std	Y+2, r24	; 0x02
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
	bool result;
	usart_enable_module_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
     24c:	f8 01       	movw	r30, r16
     24e:	26 81       	ldd	r18, Z+6	; 0x06
     250:	35 81       	ldd	r19, Z+5	; 0x05
     252:	84 81       	ldd	r24, Z+4	; 0x04
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->UCSRnC
		= ((usart)->UCSRnC &
     254:	9a 81       	ldd	r25, Y+2	; 0x02
     256:	48 2f       	mov	r20, r24
     258:	43 70       	andi	r20, 0x03	; 3
     25a:	44 0f       	add	r20, r20
     25c:	99 7f       	andi	r25, 0xF9	; 249
     25e:	94 2b       	or	r25, r20
     260:	9a 83       	std	Y+2, r25	; 0x02
			(~USART_CHSIZE01C_gm)) | ((charSize & 0x03)
			<< USART_CHSIZE01C_gp);
	(usart)->UCSRnB
		= ((usart)->UCSRnB &
     262:	99 81       	ldd	r25, Y+1	; 0x01
     264:	84 70       	andi	r24, 0x04	; 4
     266:	88 0f       	add	r24, r24
     268:	88 0f       	add	r24, r24
     26a:	9b 7f       	andi	r25, 0xFB	; 251
     26c:	89 2b       	or	r24, r25
     26e:	89 83       	std	Y+1, r24	; 0x01
			(~USART_CHSIZE2_bm)) | ((charSize & 0x04)
			<< USART_CHSIZE2_bp);

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_PMODE_gm)) | parityMode;
     270:	8a 81       	ldd	r24, Y+2	; 0x02
     272:	8f 7c       	andi	r24, 0xCF	; 207
     274:	83 2b       	or	r24, r19
     276:	8a 83       	std	Y+2, r24	; 0x02

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_STOPB_bm)) | (twoStopBits
     278:	9a 81       	ldd	r25, Y+2	; 0x02
     27a:	97 7f       	andi	r25, 0xF7	; 247
     27c:	82 2f       	mov	r24, r18
     27e:	88 0f       	add	r24, r24
     280:	88 0f       	add	r24, r24
     282:	88 0f       	add	r24, r24
     284:	89 2b       	or	r24, r25
     286:	8a 83       	std	Y+2, r24	; 0x02
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate,
     288:	40 81       	ld	r20, Z
     28a:	51 81       	ldd	r21, Z+1	; 0x01
     28c:	62 81       	ldd	r22, Z+2	; 0x02
     28e:	73 81       	ldd	r23, Z+3	; 0x03
     290:	00 e4       	ldi	r16, 0x40	; 64
     292:	12 e4       	ldi	r17, 0x42	; 66
     294:	2f e0       	ldi	r18, 0x0F	; 15
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	ce 01       	movw	r24, r28
     29a:	3e df       	rcall	.-388    	; 0x118 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_TXEN_bm;
     29c:	99 81       	ldd	r25, Y+1	; 0x01
     29e:	98 60       	ori	r25, 0x08	; 8
     2a0:	99 83       	std	Y+1, r25	; 0x01
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_RXEN_bm;
     2a2:	99 81       	ldd	r25, Y+1	; 0x01
     2a4:	90 61       	ori	r25, 0x10	; 16
     2a6:	99 83       	std	Y+1, r25	; 0x01
			sysclk_get_source_clock_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	return result;
}
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	1f 91       	pop	r17
     2ae:	0f 91       	pop	r16
     2b0:	08 95       	ret

000002b2 <loadcell_min_max_tran>:
 *  Author: jan.rune.herheim
 */ 

#include "loadcell_logger.h"

uint8_t loadcell_min_max_tran(uint16_t current_value, uint16_t *data_array) {
     2b2:	fb 01       	movw	r30, r22
	
	//find tran
	signed int tran = 0; //could go positive and negative, and could store a 15 bits number, hence enough for our 12 bits results.
	uint16_t tran_abs = 0;
	
	tran = current_value - *(data_array + POSITION_PREV); //tran = current - previous
     2b4:	22 81       	ldd	r18, Z+2	; 0x02
     2b6:	33 81       	ldd	r19, Z+3	; 0x03
     2b8:	ac 01       	movw	r20, r24
     2ba:	42 1b       	sub	r20, r18
     2bc:	53 0b       	sbc	r21, r19
     2be:	9a 01       	movw	r18, r20
	if ((abs(tran) > abs(*(data_array+POSITION_TRAN_MAX))) & (*(data_array+POSITION_ACCU_CNT) > 0)) //first step is not valid due to only one value.
     2c0:	da 01       	movw	r26, r20
     2c2:	22 f4       	brpl	.+8      	; 0x2cc <loadcell_min_max_tran+0x1a>
     2c4:	aa 27       	eor	r26, r26
     2c6:	bb 27       	eor	r27, r27
     2c8:	a4 1b       	sub	r26, r20
     2ca:	b5 0b       	sbc	r27, r21
     2cc:	42 85       	ldd	r20, Z+10	; 0x0a
     2ce:	53 85       	ldd	r21, Z+11	; 0x0b
     2d0:	55 23       	and	r21, r21
     2d2:	1c f4       	brge	.+6      	; 0x2da <loadcell_min_max_tran+0x28>
     2d4:	51 95       	neg	r21
     2d6:	41 95       	neg	r20
     2d8:	51 09       	sbc	r21, r1
     2da:	61 e0       	ldi	r22, 0x01	; 1
     2dc:	4a 17       	cp	r20, r26
     2de:	5b 07       	cpc	r21, r27
     2e0:	0c f0       	brlt	.+2      	; 0x2e4 <loadcell_min_max_tran+0x32>
     2e2:	60 e0       	ldi	r22, 0x00	; 0
     2e4:	66 23       	and	r22, r22
     2e6:	51 f0       	breq	.+20     	; 0x2fc <loadcell_min_max_tran+0x4a>
     2e8:	41 e0       	ldi	r20, 0x01	; 1
     2ea:	62 89       	ldd	r22, Z+18	; 0x12
     2ec:	73 89       	ldd	r23, Z+19	; 0x13
     2ee:	67 2b       	or	r22, r23
     2f0:	09 f4       	brne	.+2      	; 0x2f4 <loadcell_min_max_tran+0x42>
     2f2:	40 e0       	ldi	r20, 0x00	; 0
     2f4:	44 23       	and	r20, r20
     2f6:	11 f0       	breq	.+4      	; 0x2fc <loadcell_min_max_tran+0x4a>
// 			}
// 			tran_abs |= (1<<11); //flip the MSB of the 12 bits word to set the negative sign.
// 			tran = tran_abs;
// 		}
		
		*(data_array+POSITION_TRAN_MAX) = tran; //store new tran max.
     2f8:	33 87       	std	Z+11, r19	; 0x0b
     2fa:	22 87       	std	Z+10, r18	; 0x0a
	}
	
	//find min and max
	if (current_value < *(data_array+POSITION_MIN))
     2fc:	26 81       	ldd	r18, Z+6	; 0x06
     2fe:	37 81       	ldd	r19, Z+7	; 0x07
     300:	82 17       	cp	r24, r18
     302:	93 07       	cpc	r25, r19
     304:	10 f4       	brcc	.+4      	; 0x30a <loadcell_min_max_tran+0x58>
	{
		*(data_array+POSITION_MIN) = current_value; //store new min value.
     306:	97 83       	std	Z+7, r25	; 0x07
     308:	86 83       	std	Z+6, r24	; 0x06
	}
	if (current_value > *(data_array+POSITION_MAX))
     30a:	20 85       	ldd	r18, Z+8	; 0x08
     30c:	31 85       	ldd	r19, Z+9	; 0x09
     30e:	28 17       	cp	r18, r24
     310:	39 07       	cpc	r19, r25
     312:	10 f4       	brcc	.+4      	; 0x318 <loadcell_min_max_tran+0x66>
	{
		*(data_array+POSITION_MAX) = current_value; //Store new max.
     314:	91 87       	std	Z+9, r25	; 0x09
     316:	80 87       	std	Z+8, r24	; 0x08
	}
}
     318:	08 95       	ret

0000031a <__portable_avr_delay_cycles>:
	wdt_reset();
	//rtc_init_period(2); //using RTC as sampler timer.
	//wdt_enable(9);
	rtc_init_period(1);
	//sleep_enable();
}
     31a:	04 c0       	rjmp	.+8      	; 0x324 <__portable_avr_delay_cycles+0xa>
     31c:	61 50       	subi	r22, 0x01	; 1
     31e:	71 09       	sbc	r23, r1
     320:	81 09       	sbc	r24, r1
     322:	91 09       	sbc	r25, r1
     324:	61 15       	cp	r22, r1
     326:	71 05       	cpc	r23, r1
     328:	81 05       	cpc	r24, r1
     32a:	91 05       	cpc	r25, r1
     32c:	b9 f7       	brne	.-18     	; 0x31c <__portable_avr_delay_cycles+0x2>
     32e:	08 95       	ret

00000330 <usart_tx_at>:
     330:	0f 93       	push	r16
     332:	1f 93       	push	r17
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	eb 01       	movw	r28, r22
     33a:	68 81       	ld	r22, Y
     33c:	66 23       	and	r22, r22
     33e:	39 f0       	breq	.+14     	; 0x34e <usart_tx_at+0x1e>
     340:	8c 01       	movw	r16, r24
     342:	21 96       	adiw	r28, 0x01	; 1
     344:	c8 01       	movw	r24, r16
     346:	db de       	rcall	.-586    	; 0xfe <usart_putchar>
     348:	69 91       	ld	r22, Y+
     34a:	61 11       	cpse	r22, r1
     34c:	fb cf       	rjmp	.-10     	; 0x344 <usart_tx_at+0x14>
     34e:	df 91       	pop	r29
     350:	cf 91       	pop	r28
     352:	1f 91       	pop	r17
     354:	0f 91       	pop	r16
     356:	08 95       	ret

00000358 <reset_tx_data>:
     358:	44 23       	and	r20, r20
     35a:	61 f0       	breq	.+24     	; 0x374 <reset_tx_data+0x1c>
     35c:	a6 2f       	mov	r26, r22
     35e:	b7 2f       	mov	r27, r23
     360:	e8 2f       	mov	r30, r24
     362:	f9 2f       	mov	r31, r25
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	2d 91       	ld	r18, X+
     368:	3d 91       	ld	r19, X+
     36a:	21 93       	st	Z+, r18
     36c:	31 93       	st	Z+, r19
     36e:	8f 5f       	subi	r24, 0xFF	; 255
     370:	48 13       	cpse	r20, r24
     372:	f9 cf       	rjmp	.-14     	; 0x366 <reset_tx_data+0xe>
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	08 95       	ret

00000378 <reset_char_array>:
     378:	66 23       	and	r22, r22
     37a:	59 f0       	breq	.+22     	; 0x392 <reset_char_array+0x1a>
     37c:	fc 01       	movw	r30, r24
     37e:	61 50       	subi	r22, 0x01	; 1
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	6f 5f       	subi	r22, 0xFF	; 255
     384:	7f 4f       	sbci	r23, 0xFF	; 255
     386:	86 0f       	add	r24, r22
     388:	97 1f       	adc	r25, r23
     38a:	11 92       	st	Z+, r1
     38c:	e8 17       	cp	r30, r24
     38e:	f9 07       	cpc	r31, r25
     390:	e1 f7       	brne	.-8      	; 0x38a <reset_char_array+0x12>
     392:	08 95       	ret

00000394 <reset_all_data>:
     394:	64 e6       	ldi	r22, 0x64	; 100
     396:	83 e1       	ldi	r24, 0x13	; 19
     398:	95 e0       	ldi	r25, 0x05	; 5
     39a:	ee df       	rcall	.-36     	; 0x378 <reset_char_array>
     39c:	64 e6       	ldi	r22, 0x64	; 100
     39e:	8a e1       	ldi	r24, 0x1A	; 26
     3a0:	94 e0       	ldi	r25, 0x04	; 4
     3a2:	ea df       	rcall	.-44     	; 0x378 <reset_char_array>
     3a4:	41 e1       	ldi	r20, 0x11	; 17
     3a6:	69 e3       	ldi	r22, 0x39	; 57
     3a8:	73 e0       	ldi	r23, 0x03	; 3
     3aa:	88 e1       	ldi	r24, 0x18	; 24
     3ac:	95 e0       	ldi	r25, 0x05	; 5
     3ae:	d4 cf       	rjmp	.-88     	; 0x358 <reset_tx_data>
     3b0:	08 95       	ret

000003b2 <rtc_init_period>:
     3b2:	14 be       	out	0x34, r1	; 52
     3b4:	e0 e6       	ldi	r30, 0x60	; 96
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	88 e1       	ldi	r24, 0x18	; 24
     3ba:	80 83       	st	Z, r24
     3bc:	86 e4       	ldi	r24, 0x46	; 70
     3be:	80 83       	st	Z, r24
     3c0:	08 95       	ret

000003c2 <loadcell_pins_init>:
     3c2:	56 9a       	sbi	0x0a, 6	; 10
     3c4:	5e 98       	cbi	0x0b, 6	; 11
     3c6:	08 95       	ret

000003c8 <radio_pins_init>:
     3c8:	54 9a       	sbi	0x0a, 4	; 10
     3ca:	55 98       	cbi	0x0a, 5	; 10
     3cc:	08 95       	ret

000003ce <my_delay_10ms>:
     3ce:	cf 93       	push	r28
     3d0:	88 23       	and	r24, r24
     3d2:	41 f0       	breq	.+16     	; 0x3e4 <my_delay_10ms+0x16>
     3d4:	c8 2f       	mov	r28, r24
     3d6:	63 e8       	ldi	r22, 0x83	; 131
     3d8:	76 e0       	ldi	r23, 0x06	; 6
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	9d df       	rcall	.-198    	; 0x31a <__portable_avr_delay_cycles>
     3e0:	c1 50       	subi	r28, 0x01	; 1
     3e2:	c9 f7       	brne	.-14     	; 0x3d6 <my_delay_10ms+0x8>
     3e4:	cf 91       	pop	r28
     3e6:	08 95       	ret

000003e8 <loadcell_power_on>:
     3e8:	5e 9a       	sbi	0x0b, 6	; 11
     3ea:	63 e8       	ldi	r22, 0x83	; 131
     3ec:	76 e0       	ldi	r23, 0x06	; 6
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	93 cf       	rjmp	.-218    	; 0x31a <__portable_avr_delay_cycles>
     3f4:	08 95       	ret

000003f6 <loadcell_power_off>:
     3f6:	5e 98       	cbi	0x0b, 6	; 11
     3f8:	08 95       	ret

000003fa <radio_power_on>:
     3fa:	1f 93       	push	r17
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	5c 98       	cbi	0x0b, 4	; 11
     402:	67 ea       	ldi	r22, 0xA7	; 167
     404:	70 e0       	ldi	r23, 0x00	; 0
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	87 df       	rcall	.-242    	; 0x31a <__portable_avr_delay_cycles>
     40c:	5c 9a       	sbi	0x0b, 4	; 11
     40e:	6b e1       	ldi	r22, 0x1B	; 27
     410:	71 e4       	ldi	r23, 0x41	; 65
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	81 df       	rcall	.-254    	; 0x31a <__portable_avr_delay_cycles>
     418:	5c 98       	cbi	0x0b, 4	; 11
     41a:	6b e0       	ldi	r22, 0x0B	; 11
     41c:	7b e8       	ldi	r23, 0x8B	; 139
     41e:	82 e0       	ldi	r24, 0x02	; 2
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	7b df       	rcall	.-266    	; 0x31a <__portable_avr_delay_cycles>
     424:	5c 9a       	sbi	0x0b, 4	; 11
     426:	4d 99       	sbic	0x09, 5	; 9
     428:	16 c0       	rjmp	.+44     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     42a:	c0 e0       	ldi	r28, 0x00	; 0
     42c:	d1 e0       	ldi	r29, 0x01	; 1
     42e:	10 e0       	ldi	r17, 0x00	; 0
     430:	66 e3       	ldi	r22, 0x36	; 54
     432:	72 e8       	ldi	r23, 0x82	; 130
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	70 df       	rcall	.-288    	; 0x31a <__portable_avr_delay_cycles>
     43a:	cf 5f       	subi	r28, 0xFF	; 255
     43c:	89 b1       	in	r24, 0x09	; 9
     43e:	85 fb       	bst	r24, 5
     440:	88 27       	eor	r24, r24
     442:	80 f9       	bld	r24, 0
     444:	8d 17       	cp	r24, r29
     446:	41 f0       	breq	.+16     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     448:	8d 2f       	mov	r24, r29
     44a:	cb 31       	cpi	r28, 0x1B	; 27
     44c:	08 f0       	brcs	.+2      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44e:	81 2f       	mov	r24, r17
     450:	81 11       	cpse	r24, r1
     452:	ee cf       	rjmp	.-36     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     454:	01 c0       	rjmp	.+2      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     456:	c0 e0       	ldi	r28, 0x00	; 0
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	cb 31       	cpi	r28, 0x1B	; 27
     45c:	09 f0       	breq	.+2      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	1f 91       	pop	r17
     466:	08 95       	ret

00000468 <radio_power_off_at>:
     468:	1f 93       	push	r17
     46a:	cf 93       	push	r28
     46c:	df 93       	push	r29
     46e:	4d 9b       	sbis	0x09, 5	; 9
     470:	2f c0       	rjmp	.+94     	; 0x4d0 <radio_power_off_at+0x68>
     472:	c0 e0       	ldi	r28, 0x00	; 0
     474:	d1 e0       	ldi	r29, 0x01	; 1
     476:	10 e0       	ldi	r17, 0x00	; 0
     478:	6a e3       	ldi	r22, 0x3A	; 58
     47a:	71 e0       	ldi	r23, 0x01	; 1
     47c:	88 ec       	ldi	r24, 0xC8	; 200
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	57 df       	rcall	.-338    	; 0x330 <usart_tx_at>
     482:	6a e3       	ldi	r22, 0x3A	; 58
     484:	71 e0       	ldi	r23, 0x01	; 1
     486:	80 ec       	ldi	r24, 0xC0	; 192
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	52 df       	rcall	.-348    	; 0x330 <usart_tx_at>
     48c:	5c 98       	cbi	0x0b, 4	; 11
     48e:	6b e2       	ldi	r22, 0x2B	; 43
     490:	7c e2       	ldi	r23, 0x2C	; 44
     492:	8a e0       	ldi	r24, 0x0A	; 10
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	41 df       	rcall	.-382    	; 0x31a <__portable_avr_delay_cycles>
     498:	4d 9b       	sbis	0x09, 5	; 9
     49a:	10 c0       	rjmp	.+32     	; 0x4bc <radio_power_off_at+0x54>
     49c:	66 e4       	ldi	r22, 0x46	; 70
     49e:	71 e0       	ldi	r23, 0x01	; 1
     4a0:	88 ec       	ldi	r24, 0xC8	; 200
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	45 df       	rcall	.-374    	; 0x330 <usart_tx_at>
     4a6:	66 e4       	ldi	r22, 0x46	; 70
     4a8:	71 e0       	ldi	r23, 0x01	; 1
     4aa:	80 ec       	ldi	r24, 0xC0	; 192
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	40 df       	rcall	.-384    	; 0x330 <usart_tx_at>
     4b0:	5c 98       	cbi	0x0b, 4	; 11
     4b2:	61 e4       	ldi	r22, 0x41	; 65
     4b4:	72 e4       	ldi	r23, 0x42	; 66
     4b6:	8f e0       	ldi	r24, 0x0F	; 15
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	2f df       	rcall	.-418    	; 0x31a <__portable_avr_delay_cycles>
     4bc:	cf 5f       	subi	r28, 0xFF	; 255
     4be:	4d 9b       	sbis	0x09, 5	; 9
     4c0:	08 c0       	rjmp	.+16     	; 0x4d2 <radio_power_off_at+0x6a>
     4c2:	8d 2f       	mov	r24, r29
     4c4:	cb 31       	cpi	r28, 0x1B	; 27
     4c6:	08 f0       	brcs	.+2      	; 0x4ca <radio_power_off_at+0x62>
     4c8:	81 2f       	mov	r24, r17
     4ca:	81 11       	cpse	r24, r1
     4cc:	d5 cf       	rjmp	.-86     	; 0x478 <radio_power_off_at+0x10>
     4ce:	01 c0       	rjmp	.+2      	; 0x4d2 <radio_power_off_at+0x6a>
     4d0:	c0 e0       	ldi	r28, 0x00	; 0
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	cb 31       	cpi	r28, 0x1B	; 27
     4d6:	09 f0       	breq	.+2      	; 0x4da <radio_power_off_at+0x72>
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	1f 91       	pop	r17
     4e0:	08 95       	ret

000004e2 <adc_result_average>:
     4e2:	6f 92       	push	r6
     4e4:	7f 92       	push	r7
     4e6:	8f 92       	push	r8
     4e8:	9f 92       	push	r9
     4ea:	af 92       	push	r10
     4ec:	bf 92       	push	r11
     4ee:	cf 92       	push	r12
     4f0:	df 92       	push	r13
     4f2:	ef 92       	push	r14
     4f4:	ff 92       	push	r15
     4f6:	0f 93       	push	r16
     4f8:	1f 93       	push	r17
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
     502:	0d b7       	in	r16, 0x3d	; 61
     504:	1e b7       	in	r17, 0x3e	; 62
     506:	46 2f       	mov	r20, r22
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	44 0f       	add	r20, r20
     50c:	55 1f       	adc	r21, r21
     50e:	2d b7       	in	r18, 0x3d	; 61
     510:	3e b7       	in	r19, 0x3e	; 62
     512:	24 1b       	sub	r18, r20
     514:	35 0b       	sbc	r19, r21
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	f8 94       	cli
     51a:	3e bf       	out	0x3e, r19	; 62
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	2d bf       	out	0x3d, r18	; 61
     520:	ad b7       	in	r26, 0x3d	; 61
     522:	be b7       	in	r27, 0x3e	; 62
     524:	11 96       	adiw	r26, 0x01	; 1
     526:	e4 e6       	ldi	r30, 0x64	; 100
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	90 81       	ld	r25, Z
     52c:	9e 7f       	andi	r25, 0xFE	; 254
     52e:	90 83       	st	Z, r25
     530:	97 e8       	ldi	r25, 0x87	; 135
     532:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     536:	66 23       	and	r22, r22
     538:	49 f1       	breq	.+82     	; 0x58c <adc_result_average+0xaa>
     53a:	3d 01       	movw	r6, r26
     53c:	81 2c       	mov	r8, r1
     53e:	91 2c       	mov	r9, r1
     540:	54 01       	movw	r10, r8
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	0f 2e       	mov	r0, r31
     546:	fc e7       	ldi	r31, 0x7C	; 124
     548:	cf 2e       	mov	r12, r31
     54a:	d1 2c       	mov	r13, r1
     54c:	f0 2d       	mov	r31, r0
     54e:	80 64       	ori	r24, 0x40	; 64
     550:	ea e7       	ldi	r30, 0x7A	; 122
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	0f 2e       	mov	r0, r31
     556:	f8 e7       	ldi	r31, 0x78	; 120
     558:	ef 2e       	mov	r14, r31
     55a:	f1 2c       	mov	r15, r1
     55c:	f0 2d       	mov	r31, r0
     55e:	d6 01       	movw	r26, r12
     560:	8c 93       	st	X, r24
     562:	90 81       	ld	r25, Z
     564:	90 64       	ori	r25, 0x40	; 64
     566:	90 83       	st	Z, r25
     568:	90 81       	ld	r25, Z
     56a:	96 fd       	sbrc	r25, 6
     56c:	fd cf       	rjmp	.-6      	; 0x568 <adc_result_average+0x86>
     56e:	d7 01       	movw	r26, r14
     570:	4d 91       	ld	r20, X+
     572:	5c 91       	ld	r21, X
     574:	d3 01       	movw	r26, r6
     576:	4d 93       	st	X+, r20
     578:	5d 93       	st	X+, r21
     57a:	3d 01       	movw	r6, r26
     57c:	84 0e       	add	r8, r20
     57e:	95 1e       	adc	r9, r21
     580:	a1 1c       	adc	r10, r1
     582:	b1 1c       	adc	r11, r1
     584:	3f 5f       	subi	r19, 0xFF	; 255
     586:	63 13       	cpse	r22, r19
     588:	ea cf       	rjmp	.-44     	; 0x55e <adc_result_average+0x7c>
     58a:	03 c0       	rjmp	.+6      	; 0x592 <adc_result_average+0xb0>
     58c:	81 2c       	mov	r8, r1
     58e:	91 2c       	mov	r9, r1
     590:	54 01       	movw	r10, r8
     592:	26 2f       	mov	r18, r22
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	40 e0       	ldi	r20, 0x00	; 0
     598:	50 e0       	ldi	r21, 0x00	; 0
     59a:	c5 01       	movw	r24, r10
     59c:	b4 01       	movw	r22, r8
     59e:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__udivmodsi4>
     5a2:	c9 01       	movw	r24, r18
     5a4:	0f b6       	in	r0, 0x3f	; 63
     5a6:	f8 94       	cli
     5a8:	1e bf       	out	0x3e, r17	; 62
     5aa:	0f be       	out	0x3f, r0	; 63
     5ac:	0d bf       	out	0x3d, r16	; 61
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	1f 91       	pop	r17
     5b4:	0f 91       	pop	r16
     5b6:	ff 90       	pop	r15
     5b8:	ef 90       	pop	r14
     5ba:	df 90       	pop	r13
     5bc:	cf 90       	pop	r12
     5be:	bf 90       	pop	r11
     5c0:	af 90       	pop	r10
     5c2:	9f 90       	pop	r9
     5c4:	8f 90       	pop	r8
     5c6:	7f 90       	pop	r7
     5c8:	6f 90       	pop	r6
     5ca:	08 95       	ret

000005cc <tx_at_response>:
     5cc:	0f 93       	push	r16
     5ce:	1f 93       	push	r17
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	ec 01       	movw	r28, r24
     5d6:	88 85       	ldd	r24, Y+8	; 0x08
     5d8:	88 23       	and	r24, r24
     5da:	09 f4       	brne	.+2      	; 0x5de <tx_at_response+0x12>
     5dc:	63 c0       	rjmp	.+198    	; 0x6a4 <tx_at_response+0xd8>
     5de:	10 e0       	ldi	r17, 0x00	; 0
     5e0:	00 e0       	ldi	r16, 0x00	; 0
     5e2:	60 e8       	ldi	r22, 0x80	; 128
     5e4:	83 e9       	ldi	r24, 0x93	; 147
     5e6:	94 e0       	ldi	r25, 0x04	; 4
     5e8:	c7 de       	rcall	.-626    	; 0x378 <reset_char_array>
     5ea:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <response_counter>
     5ee:	8c 81       	ldd	r24, Y+4	; 0x04
     5f0:	9d 81       	ldd	r25, Y+5	; 0x05
     5f2:	ae 81       	ldd	r26, Y+6	; 0x06
     5f4:	bf 81       	ldd	r27, Y+7	; 0x07
     5f6:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <response_timeout>
     5fa:	90 93 88 04 	sts	0x0488, r25	; 0x800488 <response_timeout+0x1>
     5fe:	a0 93 89 04 	sts	0x0489, r26	; 0x800489 <response_timeout+0x2>
     602:	b0 93 8a 04 	sts	0x048A, r27	; 0x80048a <response_timeout+0x3>
     606:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <response_timeout_counter>
     60a:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <response_timeout_counter+0x1>
     60e:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <response_timeout_counter+0x2>
     612:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <response_timeout_counter+0x3>
     616:	68 81       	ld	r22, Y
     618:	79 81       	ldd	r23, Y+1	; 0x01
     61a:	80 ec       	ldi	r24, 0xC0	; 192
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	88 de       	rcall	.-752    	; 0x330 <usart_tx_at>
     620:	78 94       	sei
     622:	e0 ec       	ldi	r30, 0xC0	; 192
     624:	f0 e0       	ldi	r31, 0x00	; 0
     626:	81 81       	ldd	r24, Z+1	; 0x01
     628:	80 68       	ori	r24, 0x80	; 128
     62a:	81 83       	std	Z+1, r24	; 0x01
     62c:	1e c0       	rjmp	.+60     	; 0x66a <tx_at_response+0x9e>
     62e:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <response_timeout_counter>
     632:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <response_timeout_counter+0x1>
     636:	a0 91 85 04 	lds	r26, 0x0485	; 0x800485 <response_timeout_counter+0x2>
     63a:	b0 91 86 04 	lds	r27, 0x0486	; 0x800486 <response_timeout_counter+0x3>
     63e:	01 96       	adiw	r24, 0x01	; 1
     640:	a1 1d       	adc	r26, r1
     642:	b1 1d       	adc	r27, r1
     644:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <response_timeout_counter>
     648:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <response_timeout_counter+0x1>
     64c:	a0 93 85 04 	sts	0x0485, r26	; 0x800485 <response_timeout_counter+0x2>
     650:	b0 93 86 04 	sts	0x0486, r27	; 0x800486 <response_timeout_counter+0x3>
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	bb de       	rcall	.-650    	; 0x3ce <my_delay_10ms>
     658:	6a 81       	ldd	r22, Y+2	; 0x02
     65a:	7b 81       	ldd	r23, Y+3	; 0x03
     65c:	83 e9       	ldi	r24, 0x93	; 147
     65e:	94 e0       	ldi	r25, 0x04	; 4
     660:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <strstr>
     664:	01 e0       	ldi	r16, 0x01	; 1
     666:	89 2b       	or	r24, r25
     668:	f9 f4       	brne	.+62     	; 0x6a8 <tx_at_response+0xdc>
     66a:	40 91 83 04 	lds	r20, 0x0483	; 0x800483 <response_timeout_counter>
     66e:	50 91 84 04 	lds	r21, 0x0484	; 0x800484 <response_timeout_counter+0x1>
     672:	60 91 85 04 	lds	r22, 0x0485	; 0x800485 <response_timeout_counter+0x2>
     676:	70 91 86 04 	lds	r23, 0x0486	; 0x800486 <response_timeout_counter+0x3>
     67a:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <response_timeout>
     67e:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <response_timeout+0x1>
     682:	a0 91 89 04 	lds	r26, 0x0489	; 0x800489 <response_timeout+0x2>
     686:	b0 91 8a 04 	lds	r27, 0x048A	; 0x80048a <response_timeout+0x3>
     68a:	48 17       	cp	r20, r24
     68c:	59 07       	cpc	r21, r25
     68e:	6a 07       	cpc	r22, r26
     690:	7b 07       	cpc	r23, r27
     692:	68 f2       	brcs	.-102    	; 0x62e <tx_at_response+0x62>
     694:	8e e1       	ldi	r24, 0x1E	; 30
     696:	9b de       	rcall	.-714    	; 0x3ce <my_delay_10ms>
     698:	1f 5f       	subi	r17, 0xFF	; 255
     69a:	88 85       	ldd	r24, Y+8	; 0x08
     69c:	18 17       	cp	r17, r24
     69e:	08 f4       	brcc	.+2      	; 0x6a2 <tx_at_response+0xd6>
     6a0:	a0 cf       	rjmp	.-192    	; 0x5e2 <tx_at_response+0x16>
     6a2:	03 c0       	rjmp	.+6      	; 0x6aa <tx_at_response+0xde>
     6a4:	00 e0       	ldi	r16, 0x00	; 0
     6a6:	01 c0       	rjmp	.+2      	; 0x6aa <tx_at_response+0xde>
     6a8:	00 e0       	ldi	r16, 0x00	; 0
     6aa:	e0 ec       	ldi	r30, 0xC0	; 192
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	81 81       	ldd	r24, Z+1	; 0x01
     6b0:	8f 77       	andi	r24, 0x7F	; 127
     6b2:	81 83       	std	Z+1, r24	; 0x01
     6b4:	63 e9       	ldi	r22, 0x93	; 147
     6b6:	74 e0       	ldi	r23, 0x04	; 4
     6b8:	88 ec       	ldi	r24, 0xC8	; 200
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	39 de       	rcall	.-910    	; 0x330 <usart_tx_at>
     6be:	80 2f       	mov	r24, r16
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	1f 91       	pop	r17
     6c6:	0f 91       	pop	r16
     6c8:	08 95       	ret

000006ca <data_to_char>:
     6ca:	7f 92       	push	r7
     6cc:	8f 92       	push	r8
     6ce:	9f 92       	push	r9
     6d0:	af 92       	push	r10
     6d2:	bf 92       	push	r11
     6d4:	cf 92       	push	r12
     6d6:	df 92       	push	r13
     6d8:	ef 92       	push	r14
     6da:	ff 92       	push	r15
     6dc:	0f 93       	push	r16
     6de:	1f 93       	push	r17
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	00 d0       	rcall	.+0      	; 0x6e6 <data_to_char+0x1c>
     6e6:	00 d0       	rcall	.+0      	; 0x6e8 <data_to_char+0x1e>
     6e8:	1f 92       	push	r1
     6ea:	cd b7       	in	r28, 0x3d	; 61
     6ec:	de b7       	in	r29, 0x3e	; 62
     6ee:	6c 01       	movw	r12, r24
     6f0:	1a 82       	std	Y+2, r1	; 0x02
     6f2:	19 82       	std	Y+1, r1	; 0x01
     6f4:	fe 01       	movw	r30, r28
     6f6:	33 96       	adiw	r30, 0x03	; 3
     6f8:	93 e0       	ldi	r25, 0x03	; 3
     6fa:	df 01       	movw	r26, r30
     6fc:	1d 92       	st	X+, r1
     6fe:	9a 95       	dec	r25
     700:	e9 f7       	brne	.-6      	; 0x6fc <data_to_char+0x32>
     702:	e6 2e       	mov	r14, r22
     704:	f1 2c       	mov	r15, r1
     706:	b1 e0       	ldi	r27, 0x01	; 1
     708:	eb 1a       	sub	r14, r27
     70a:	f1 08       	sbc	r15, r1
     70c:	4a f1       	brmi	.+82     	; 0x760 <data_to_char+0x96>
     70e:	49 01       	movw	r8, r18
     710:	5a 01       	movw	r10, r20
     712:	00 e0       	ldi	r16, 0x00	; 0
     714:	10 e0       	ldi	r17, 0x00	; 0
     716:	71 2c       	mov	r7, r1
     718:	e7 2d       	mov	r30, r7
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	ee 0f       	add	r30, r30
     71e:	ff 1f       	adc	r31, r31
     720:	ec 0d       	add	r30, r12
     722:	fd 1d       	adc	r31, r13
     724:	a4 01       	movw	r20, r8
     726:	be 01       	movw	r22, r28
     728:	6f 5f       	subi	r22, 0xFF	; 255
     72a:	7f 4f       	sbci	r23, 0xFF	; 255
     72c:	80 81       	ld	r24, Z
     72e:	91 81       	ldd	r25, Z+1	; 0x01
     730:	df d7       	rcall	.+4030   	; 0x16f0 <itoa>
     732:	c8 01       	movw	r24, r16
     734:	88 0f       	add	r24, r24
     736:	99 1f       	adc	r25, r25
     738:	88 0f       	add	r24, r24
     73a:	99 1f       	adc	r25, r25
     73c:	80 0f       	add	r24, r16
     73e:	91 1f       	adc	r25, r17
     740:	be 01       	movw	r22, r28
     742:	6f 5f       	subi	r22, 0xFF	; 255
     744:	7f 4f       	sbci	r23, 0xFF	; 255
     746:	8a 0d       	add	r24, r10
     748:	9b 1d       	adc	r25, r11
     74a:	b1 d7       	rcall	.+3938   	; 0x16ae <strcpy>
     74c:	65 e0       	ldi	r22, 0x05	; 5
     74e:	ce 01       	movw	r24, r28
     750:	01 96       	adiw	r24, 0x01	; 1
     752:	12 de       	rcall	.-988    	; 0x378 <reset_char_array>
     754:	73 94       	inc	r7
     756:	07 2d       	mov	r16, r7
     758:	10 e0       	ldi	r17, 0x00	; 0
     75a:	e0 16       	cp	r14, r16
     75c:	f1 06       	cpc	r15, r17
     75e:	e4 f6       	brge	.-72     	; 0x718 <data_to_char+0x4e>
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	0f 90       	pop	r0
     764:	0f 90       	pop	r0
     766:	0f 90       	pop	r0
     768:	0f 90       	pop	r0
     76a:	0f 90       	pop	r0
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	1f 91       	pop	r17
     772:	0f 91       	pop	r16
     774:	ff 90       	pop	r15
     776:	ef 90       	pop	r14
     778:	df 90       	pop	r13
     77a:	cf 90       	pop	r12
     77c:	bf 90       	pop	r11
     77e:	af 90       	pop	r10
     780:	9f 90       	pop	r9
     782:	8f 90       	pop	r8
     784:	7f 90       	pop	r7
     786:	08 95       	ret

00000788 <at_rf_connect>:
     788:	0f 93       	push	r16
     78a:	1f 93       	push	r17
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	c1 e9       	ldi	r28, 0x91	; 145
     792:	d3 e0       	ldi	r29, 0x03	; 3
     794:	06 e0       	ldi	r16, 0x06	; 6
     796:	14 e0       	ldi	r17, 0x04	; 4
     798:	ce 01       	movw	r24, r28
     79a:	18 df       	rcall	.-464    	; 0x5cc <tx_at_response>
     79c:	29 96       	adiw	r28, 0x09	; 9
     79e:	c0 17       	cp	r28, r16
     7a0:	d1 07       	cpc	r29, r17
     7a2:	d1 f7       	brne	.-12     	; 0x798 <at_rf_connect+0x10>
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	df 91       	pop	r29
     7a8:	cf 91       	pop	r28
     7aa:	1f 91       	pop	r17
     7ac:	0f 91       	pop	r16
     7ae:	08 95       	ret

000007b0 <at_rf_disconnect>:
     7b0:	8b e5       	ldi	r24, 0x5B	; 91
     7b2:	93 e0       	ldi	r25, 0x03	; 3
     7b4:	0b df       	rcall	.-490    	; 0x5cc <tx_at_response>
     7b6:	81 11       	cpse	r24, r1
     7b8:	03 c0       	rjmp	.+6      	; 0x7c0 <at_rf_disconnect+0x10>
     7ba:	84 e6       	ldi	r24, 0x64	; 100
     7bc:	93 e0       	ldi	r25, 0x03	; 3
     7be:	06 df       	rcall	.-500    	; 0x5cc <tx_at_response>
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	08 95       	ret

000007c4 <tx>:
     7c4:	ef 92       	push	r14
     7c6:	ff 92       	push	r15
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	cf 93       	push	r28
     7ce:	7c 01       	movw	r14, r24
     7d0:	8b 01       	movw	r16, r22
     7d2:	8d e6       	ldi	r24, 0x6D	; 109
     7d4:	93 e0       	ldi	r25, 0x03	; 3
     7d6:	fa de       	rcall	.-524    	; 0x5cc <tx_at_response>
     7d8:	86 e7       	ldi	r24, 0x76	; 118
     7da:	93 e0       	ldi	r25, 0x03	; 3
     7dc:	f7 de       	rcall	.-530    	; 0x5cc <tx_at_response>
     7de:	10 16       	cp	r1, r16
     7e0:	11 06       	cpc	r1, r17
     7e2:	74 f4       	brge	.+28     	; 0x800 <tx+0x3c>
     7e4:	c0 e0       	ldi	r28, 0x00	; 0
     7e6:	f7 01       	movw	r30, r14
     7e8:	ec 0f       	add	r30, r28
     7ea:	f1 1d       	adc	r31, r1
     7ec:	60 81       	ld	r22, Z
     7ee:	80 ec       	ldi	r24, 0xC0	; 192
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	85 dc       	rcall	.-1782   	; 0xfe <usart_putchar>
     7f4:	cf 5f       	subi	r28, 0xFF	; 255
     7f6:	8c 2f       	mov	r24, r28
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	80 17       	cp	r24, r16
     7fc:	91 07       	cpc	r25, r17
     7fe:	9c f3       	brlt	.-26     	; 0x7e6 <tx+0x22>
     800:	8f e7       	ldi	r24, 0x7F	; 127
     802:	93 e0       	ldi	r25, 0x03	; 3
     804:	e3 de       	rcall	.-570    	; 0x5cc <tx_at_response>
     806:	88 e8       	ldi	r24, 0x88	; 136
     808:	93 e0       	ldi	r25, 0x03	; 3
     80a:	e0 de       	rcall	.-576    	; 0x5cc <tx_at_response>
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	cf 91       	pop	r28
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	ff 90       	pop	r15
     816:	ef 90       	pop	r14
     818:	08 95       	ret

0000081a <__vector_20>:
     81a:	1f 92       	push	r1
     81c:	0f 92       	push	r0
     81e:	0f b6       	in	r0, 0x3f	; 63
     820:	0f 92       	push	r0
     822:	11 24       	eor	r1, r1
     824:	2f 93       	push	r18
     826:	3f 93       	push	r19
     828:	4f 93       	push	r20
     82a:	5f 93       	push	r21
     82c:	6f 93       	push	r22
     82e:	7f 93       	push	r23
     830:	8f 93       	push	r24
     832:	9f 93       	push	r25
     834:	af 93       	push	r26
     836:	bf 93       	push	r27
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
     83c:	ef 93       	push	r30
     83e:	ff 93       	push	r31
     840:	c0 91 8b 04 	lds	r28, 0x048B	; 0x80048b <response_counter>
     844:	d0 e0       	ldi	r29, 0x00	; 0
     846:	cd 56       	subi	r28, 0x6D	; 109
     848:	db 4f       	sbci	r29, 0xFB	; 251
     84a:	80 ec       	ldi	r24, 0xC0	; 192
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	5e dc       	rcall	.-1860   	; 0x10c <usart_getchar>
     850:	88 83       	st	Y, r24
     852:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <response_counter>
     856:	8f 5f       	subi	r24, 0xFF	; 255
     858:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <response_counter>
     85c:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <response_timeout_counter>
     860:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <response_timeout_counter+0x1>
     864:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <response_timeout_counter+0x2>
     868:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <response_timeout_counter+0x3>
     86c:	ff 91       	pop	r31
     86e:	ef 91       	pop	r30
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	bf 91       	pop	r27
     876:	af 91       	pop	r26
     878:	9f 91       	pop	r25
     87a:	8f 91       	pop	r24
     87c:	7f 91       	pop	r23
     87e:	6f 91       	pop	r22
     880:	5f 91       	pop	r21
     882:	4f 91       	pop	r20
     884:	3f 91       	pop	r19
     886:	2f 91       	pop	r18
     888:	0f 90       	pop	r0
     88a:	0f be       	out	0x3f, r0	; 63
     88c:	0f 90       	pop	r0
     88e:	1f 90       	pop	r1
     890:	18 95       	reti

00000892 <__vector_8>:

//main_function()
ISR(WDT_vect)
{
     892:	1f 92       	push	r1
     894:	0f 92       	push	r0
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	0f 92       	push	r0
     89a:	11 24       	eor	r1, r1
     89c:	9f 92       	push	r9
     89e:	af 92       	push	r10
     8a0:	bf 92       	push	r11
     8a2:	cf 92       	push	r12
     8a4:	df 92       	push	r13
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	2f 93       	push	r18
     8b0:	3f 93       	push	r19
     8b2:	4f 93       	push	r20
     8b4:	5f 93       	push	r21
     8b6:	6f 93       	push	r22
     8b8:	7f 93       	push	r23
     8ba:	8f 93       	push	r24
     8bc:	9f 93       	push	r25
     8be:	af 93       	push	r26
     8c0:	bf 93       	push	r27
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
     8c6:	ef 93       	push	r30
     8c8:	ff 93       	push	r31
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	f8 94       	cli
     8ce:	a8 95       	wdr
     8d0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     8d4:	88 61       	ori	r24, 0x18	; 24
     8d6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     8da:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     8de:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
	wdt_counter++; //watchdog set at 1 second timeout
     8e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     8e4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     8e8:	01 96       	adiw	r24, 0x01	; 1
     8ea:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     8ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	usart_tx_at(USART_TERMINAL, RESPONSE_FOOTER); //DEBUG
     8f2:	61 eb       	ldi	r22, 0xB1	; 177
     8f4:	71 e0       	ldi	r23, 0x01	; 1
     8f6:	88 ec       	ldi	r24, 0xC8	; 200
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	1a dd       	rcall	.-1484   	; 0x330 <usart_tx_at>
	usart_putchar(USART_TERMINAL, (0x30+wdt_counter)); //DEBUG
     8fc:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     900:	60 5d       	subi	r22, 0xD0	; 208
     902:	88 ec       	ldi	r24, 0xC8	; 200
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	fb db       	rcall	.-2058   	; 0xfe <usart_putchar>
	usart_tx_at(USART_TERMINAL, RESPONSE_FOOTER); //DEBUG
     908:	61 eb       	ldi	r22, 0xB1	; 177
     90a:	71 e0       	ldi	r23, 0x01	; 1
     90c:	88 ec       	ldi	r24, 0xC8	; 200
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	0f dd       	rcall	.-1506   	; 0x330 <usart_tx_at>

	if (wdt_counter < WAKEUP_RATE)
     912:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     916:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     91a:	89 2b       	or	r24, r25
     91c:	09 f4       	brne	.+2      	; 0x920 <__stack+0x21>
     91e:	1b c1       	rjmp	.+566    	; 0xb56 <__stack+0x257>
	{
		goto END;
	} else {wdt_counter = 0;} //reset counter if limit is reached.
     920:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
     924:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	
	RTC_ISR_ACTIVE = 1;
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <RTC_ISR_ACTIVE>
				controller_next_state = READ_EXT_DATA;
				RTC_ISR_ACTIVE = 0; //FINISHED, break LOOP!
				break;
			
			default:
				controller_next_state = RESET_REGISTERS; //TRY RESET.
     92e:	0f 2e       	mov	r0, r31
     930:	fb e0       	ldi	r31, 0x0B	; 11
     932:	ff 2e       	mov	r15, r31
     934:	f0 2d       	mov	r31, r0
 				{
// 					//tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_DISNNECT); //set failure status
// 					controller_next_state = RF_POWER_OFF; // RF_DISCONNECT; //if failure go to disconnect
// 					break;
 				}
				controller_next_state = RF_POWER_OFF;
     936:	1a e0       	ldi	r17, 0x0A	; 10
			case TX_DATA:
				controller_next_state = RX_DATA;
				break;
			
			case RX_DATA:
				controller_next_state = RF_DISCONNECT;
     938:	09 e0       	ldi	r16, 0x09	; 9
				}
				controller_next_state = TX_DATA;
				break;
			
			case TX_DATA:
				controller_next_state = RX_DATA;
     93a:	68 94       	set
     93c:	aa 24       	eor	r10, r10
     93e:	a3 f8       	bld	r10, 3
					#endif // DEBUG

					transfer_data_package_counter++;
					
				}
				controller_next_state = TX_DATA;
     940:	0f 2e       	mov	r0, r31
     942:	f7 e0       	ldi	r31, 0x07	; 7
     944:	bf 2e       	mov	r11, r31
     946:	f0 2d       	mov	r31, r0
				{
// 					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_CONNECT); //set failure status
// 					controller_next_state = RF_POWER_OFF; // RF_DISCONNECT; //if failure go to disconnect
// 					break;
				}
				controller_next_state = GENERATE_PACKAGE;
     948:	0f 2e       	mov	r0, r31
     94a:	f6 e0       	ldi	r31, 0x06	; 6
     94c:	cf 2e       	mov	r12, r31
     94e:	f0 2d       	mov	r31, r0
					
// 					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_POWER_ON); //set failure status
// 					controller_next_state = RF_POWER_OFF; //if failure go to power off
// 					break;
 				}
				controller_next_state = RF_CONNECT;
     950:	0f 2e       	mov	r0, r31
     952:	f5 e0       	ldi	r31, 0x05	; 5
     954:	df 2e       	mov	r13, r31
     956:	f0 2d       	mov	r31, r0
				///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				controller_next_state = STORE_EXT_MEM;
				break;
			
			case STORE_EXT_MEM:
				tx_data[POSITION_TIME] = 0; //reset accumulation counter if something???????????????
     958:	c8 e1       	ldi	r28, 0x18	; 24
     95a:	d5 e0       	ldi	r29, 0x05	; 5
				
				controller_next_state = RF_POWER_ON;
     95c:	68 94       	set
     95e:	ee 24       	eor	r14, r14
     960:	e2 f8       	bld	r14, 2
				tx_data[POSITION_TIME] = transmit_counter; //increase timestamp counter.
			
				if (tx_data[POSITION_TIME] >= (TRANSMIT_RATE/WAKEUP_RATE)) //if accumulation limit is reached.
				{
					transmit_counter = 0; //reset counter
					controller_next_state = CALC; //limit reached, go to next
     962:	68 94       	set
     964:	99 24       	eor	r9, r9
     966:	91 f8       	bld	r9, 1
	
	RTC_ISR_ACTIVE = 1;
	while (RTC_ISR_ACTIVE == 1)
	{
		
		switch(controller_state) {
     968:	e0 91 8f 04 	lds	r30, 0x048F	; 0x80048f <controller_state>
     96c:	8e 2f       	mov	r24, r30
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	8c 30       	cpi	r24, 0x0C	; 12
     972:	91 05       	cpc	r25, r1
     974:	08 f0       	brcs	.+2      	; 0x978 <__stack+0x79>
     976:	e4 c0       	rjmp	.+456    	; 0xb40 <__stack+0x241>
     978:	fc 01       	movw	r30, r24
     97a:	e2 5c       	subi	r30, 0xC2	; 194
     97c:	ff 4f       	sbci	r31, 0xFF	; 255
			
			case READ_EXT_DATA:
				controller_next_state = MEASURE;
     97e:	7d c6       	rjmp	.+3322   	; 0x167a <__tablejump2__>
				break;
			
			case MEASURE:
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL///////////////////////////
				loadcell_power_on();
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <controller_next_state>
				tx_data[POSITION_CURRENT] = adc_result_average(ADC_MUX_ADC0, ADC_NUM_AVG); //NEED TO FIX ADC CONVERSINS!!!!!!!!
     986:	de c0       	rjmp	.+444    	; 0xb44 <__stack+0x245>
     988:	2f dd       	rcall	.-1442   	; 0x3e8 <loadcell_power_on>
     98a:	60 2f       	mov	r22, r16
// 				tx_data[POSITION_ANA3] = adc_result_average(ADC_MUX_ADC3, ADC_NUM_AVG); //
// 				tx_data[POSITION_ANA4] = adc_result_average(ADC_MUX_ADC4, ADC_NUM_AVG); //
// 				tx_data[POSITION_ANA5] = adc_result_average(ADC_MUX_ADC5, ADC_NUM_AVG); //
// 				//tx_data[POSITION_TEMP] = adc_result_average(ADC_MUX_TEMPSENSE, 1); //PIN CHANGE HAVE NO EFFECT ON ADCB
 				//tx_data[POSITION_VDD] = adc_result_average(ADC_MUX_1V1, 1); //PIN CHANGE HAVE NO EFFECT ON ADCB
				 tx_data[POSITION_VDD] = ((1.05*1024)/(adc_result_average(ADC_MUX_1V1, 1)))*1000; //PIN CHANGE HAVE NO EFFECT ON ADCB
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	a9 dd       	rcall	.-1198   	; 0x4e2 <adc_result_average>
     990:	99 83       	std	Y+1, r25	; 0x01
     992:	88 83       	st	Y, r24
     994:	61 e0       	ldi	r22, 0x01	; 1
     996:	8e e1       	ldi	r24, 0x1E	; 30
     998:	a4 dd       	rcall	.-1208   	; 0x4e2 <adc_result_average>
     99a:	bc 01       	movw	r22, r24
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	59 d5       	rcall	.+2738   	; 0x1454 <__floatunsisf>
     9a2:	9b 01       	movw	r18, r22
     9a4:	ac 01       	movw	r20, r24
     9a6:	66 e6       	ldi	r22, 0x66	; 102
     9a8:	76 e6       	ldi	r23, 0x66	; 102
     9aa:	86 e8       	ldi	r24, 0x86	; 134
     9ac:	94 e4       	ldi	r25, 0x44	; 68
     9ae:	be d4       	rcall	.+2428   	; 0x132c <__divsf3>
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	4a e7       	ldi	r20, 0x7A	; 122
     9b6:	54 e4       	ldi	r21, 0x44	; 68
				 
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL///////////////////////////
				loadcell_power_off();
     9b8:	db d5       	rcall	.+2998   	; 0x1570 <__mulsf3>
     9ba:	20 d5       	rcall	.+2624   	; 0x13fc <__fixunssfsi>
				//////////////////////////////////////////////////////////////////////////
				
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				accu_data += tx_data[POSITION_CURRENT]; //controller_measure(9, &tx_data); //measure with averaging, and accumulate.
     9bc:	7f 87       	std	Y+15, r23	; 0x0f
     9be:	6e 87       	std	Y+14, r22	; 0x0e
     9c0:	1a dd       	rcall	.-1484   	; 0x3f6 <loadcell_power_off>
     9c2:	28 81       	ld	r18, Y
     9c4:	39 81       	ldd	r19, Y+1	; 0x01
     9c6:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <accu_data>
     9ca:	90 91 80 04 	lds	r25, 0x0480	; 0x800480 <accu_data+0x1>
     9ce:	a0 91 81 04 	lds	r26, 0x0481	; 0x800481 <accu_data+0x2>
     9d2:	b0 91 82 04 	lds	r27, 0x0482	; 0x800482 <accu_data+0x3>
     9d6:	82 0f       	add	r24, r18
     9d8:	93 1f       	adc	r25, r19
     9da:	a1 1d       	adc	r26, r1
     9dc:	b1 1d       	adc	r27, r1
     9de:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <accu_data>
     9e2:	90 93 80 04 	sts	0x0480, r25	; 0x800480 <accu_data+0x1>
				loadcell_min_max_tran(tx_data[POSITION_CURRENT], &tx_data); //check if new value should be stored in min, max and tran.
     9e6:	a0 93 81 04 	sts	0x0481, r26	; 0x800481 <accu_data+0x2>
     9ea:	b0 93 82 04 	sts	0x0482, r27	; 0x800482 <accu_data+0x3>
     9ee:	88 81       	ld	r24, Y
				tx_data[POSITION_PREV] = tx_data[POSITION_CURRENT]; //store adc value for next measurement.
     9f0:	99 81       	ldd	r25, Y+1	; 0x01
     9f2:	be 01       	movw	r22, r28
     9f4:	5e dc       	rcall	.-1860   	; 0x2b2 <loadcell_min_max_tran>
     9f6:	88 81       	ld	r24, Y
				///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				
				transmit_counter++;		
     9f8:	99 81       	ldd	r25, Y+1	; 0x01
     9fa:	9b 83       	std	Y+3, r25	; 0x03
     9fc:	8a 83       	std	Y+2, r24	; 0x02
     9fe:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <transmit_counter>
     a02:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <transmit_counter+0x1>
     a06:	01 96       	adiw	r24, 0x01	; 1
     a08:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <transmit_counter+0x1>
				tx_data[POSITION_TIME] = transmit_counter; //increase timestamp counter.
     a0c:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <transmit_counter>
			
				if (tx_data[POSITION_TIME] >= (TRANSMIT_RATE/WAKEUP_RATE)) //if accumulation limit is reached.
     a10:	9b 8b       	std	Y+19, r25	; 0x13
     a12:	8a 8b       	std	Y+18, r24	; 0x12
     a14:	8a 89       	ldd	r24, Y+18	; 0x12
				{
					transmit_counter = 0; //reset counter
     a16:	9b 89       	ldd	r25, Y+19	; 0x13
     a18:	0a 97       	sbiw	r24, 0x0a	; 10
     a1a:	38 f0       	brcs	.+14     	; 0xa2a <__stack+0x12b>
     a1c:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <transmit_counter+0x1>
					controller_next_state = CALC; //limit reached, go to next
     a20:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <transmit_counter>
					} else {
					controller_next_state = READ_EXT_DATA; //Start from top again
     a24:	90 92 8e 04 	sts	0x048E, r9	; 0x80048e <controller_next_state>
					RTC_ISR_ACTIVE = 0; //Break loop and go to sleep again
     a28:	8d c0       	rjmp	.+282    	; 0xb44 <__stack+0x245>
     a2a:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <controller_next_state>
				}
				break;
			
			case CALC:
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				tx_data[POSITION_AVG] = controller_calc_avg(accu_data, tx_data[POSITION_TIME]); //calc and store average.
     a2e:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <RTC_ISR_ACTIVE>


uint16_t controller_calc_avg(uint32_t data, uint16_t cnt) {
	uint16_t avg = 0;
	
	avg = data/cnt;
     a32:	88 c0       	rjmp	.+272    	; 0xb44 <__stack+0x245>
     a34:	2a 89       	ldd	r18, Y+18	; 0x12
     a36:	3b 89       	ldd	r19, Y+19	; 0x13
     a38:	40 e0       	ldi	r20, 0x00	; 0
     a3a:	50 e0       	ldi	r21, 0x00	; 0
     a3c:	60 91 7f 04 	lds	r22, 0x047F	; 0x80047f <accu_data>
     a40:	70 91 80 04 	lds	r23, 0x0480	; 0x800480 <accu_data+0x1>
     a44:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <accu_data+0x2>
				}
				break;
			
			case CALC:
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				tx_data[POSITION_AVG] = controller_calc_avg(accu_data, tx_data[POSITION_TIME]); //calc and store average.
     a48:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <accu_data+0x3>
				accu_data = 0; //reset parameters
     a4c:	f4 d5       	rcall	.+3048   	; 0x1636 <__udivmodsi4>
     a4e:	3d 83       	std	Y+5, r19	; 0x05
     a50:	2c 83       	std	Y+4, r18	; 0x04
     a52:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <accu_data>
     a56:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <accu_data+0x1>
				///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				controller_next_state = STORE_EXT_MEM;
     a5a:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <accu_data+0x2>
				break;
     a5e:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <accu_data+0x3>
			
			case STORE_EXT_MEM:
				tx_data[POSITION_TIME] = 0; //reset accumulation counter if something???????????????
     a62:	83 e0       	ldi	r24, 0x03	; 3
				
				controller_next_state = RF_POWER_ON;
     a64:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <controller_next_state>
				break;
     a68:	6d c0       	rjmp	.+218    	; 0xb44 <__stack+0x245>
			
			case RF_POWER_ON:
				if (radio_power_on() == 1) //power on and check if it fails
     a6a:	1b 8a       	std	Y+19, r1	; 0x13
     a6c:	1a 8a       	std	Y+18, r1	; 0x12
					
// 					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_POWER_ON); //set failure status
// 					controller_next_state = RF_POWER_OFF; //if failure go to power off
// 					break;
 				}
				controller_next_state = RF_CONNECT;
     a6e:	e0 92 8e 04 	sts	0x048E, r14	; 0x80048e <controller_next_state>
				break;
     a72:	68 c0       	rjmp	.+208    	; 0xb44 <__stack+0x245>
			
			case RF_CONNECT: //NEED MORE POWER!!!!!!
				if (at_rf_connect() != 0) //Connect to network. MAKE STATUS REPORT FROM THIS!!!!!!!
     a74:	c2 dc       	rcall	.-1660   	; 0x3fa <radio_power_on>
     a76:	d0 92 8e 04 	sts	0x048E, r13	; 0x80048e <controller_next_state>
				}
				controller_next_state = GENERATE_PACKAGE;
				break;
			
			case GENERATE_PACKAGE:
				transfer_data_package_counter = 0;
     a7a:	64 c0       	rjmp	.+200    	; 0xb44 <__stack+0x245>
     a7c:	85 de       	rcall	.-758    	; 0x788 <at_rf_connect>
     a7e:	c0 92 8e 04 	sts	0x048E, r12	; 0x80048e <controller_next_state>
     a82:	60 c0       	rjmp	.+192    	; 0xb44 <__stack+0x245>
     a84:	10 92 17 04 	sts	0x0417, r1	; 0x800417 <__data_end+0x1>
				while (transfer_data_package_counter < 8)
 				{
					data_to_char(&tx_data[transfer_data_package_counter], 1, &tx_data_bytes, TRANSFER_DATA_BASE); //data to ascii
     a88:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <__data_end>
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	88 0f       	add	r24, r24
     a92:	99 1f       	adc	r25, r25
     a94:	2a e0       	ldi	r18, 0x0A	; 10
     a96:	30 e0       	ldi	r19, 0x00	; 0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     a98:	43 e1       	ldi	r20, 0x13	; 19
     a9a:	55 e0       	ldi	r21, 0x05	; 5
     a9c:	61 e0       	ldi	r22, 0x01	; 1
     a9e:	88 5e       	subi	r24, 0xE8	; 232
     aa0:	9a 4f       	sbci	r25, 0xFA	; 250
     aa2:	13 de       	rcall	.-986    	; 0x6ca <data_to_char>
     aa4:	41 2f       	mov	r20, r17
     aa6:	60 e9       	ldi	r22, 0x90	; 144
     aa8:	74 e0       	ldi	r23, 0x04	; 4
					itoa(transfer_data_package_counter, mqtt_sub_topic, 10); //counter to text for sub-topic
					transfer_data_length_package = mqtt_packet(&tx_data_bytes, &tx_data_package, TRANSFER_DATA_SIZE_PACKAGE, &mqtt_sub_topic); //convert ascii data to MQTT package.
     aaa:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <__data_end>
     aae:	90 91 17 04 	lds	r25, 0x0417	; 0x800417 <__data_end+0x1>
     ab2:	28 d6       	rcall	.+3152   	; 0x1704 <__itoa_ncheck>
     ab4:	20 e9       	ldi	r18, 0x90	; 144
     ab6:	34 e0       	ldi	r19, 0x04	; 4
     ab8:	44 e6       	ldi	r20, 0x64	; 100
     aba:	50 e0       	ldi	r21, 0x00	; 0
     abc:	6a e1       	ldi	r22, 0x1A	; 26
     abe:	74 e0       	ldi	r23, 0x04	; 4
     ac0:	83 e1       	ldi	r24, 0x13	; 19
								
					if (transfer_data_package_counter > 0)
     ac2:	95 e0       	ldi	r25, 0x05	; 5
     ac4:	91 d3       	rcall	.+1826   	; 0x11e8 <mqtt_packet>
     ac6:	90 93 19 04 	sts	0x0419, r25	; 0x800419 <transfer_data_length_package+0x1>
     aca:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <transfer_data_length_package>
					{
						tx_at_response(&m95_connect[12]); //WHY NEED THIS ONE AGAIN? SEEMS TO SHUT DOWN TCP CONNECTION AFTER SENDING ONE MESSAGE.
     ace:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <__data_end>
     ad2:	90 91 17 04 	lds	r25, 0x0417	; 0x800417 <__data_end+0x1>
					}
					
					tx(&tx_data_package, transfer_data_length_package); //transmit package. GENERATE STATUS FROM THIS.
     ad6:	18 16       	cp	r1, r24
     ad8:	19 06       	cpc	r1, r25
     ada:	1c f4       	brge	.+6      	; 0xae2 <__stack+0x1e3>
     adc:	8d ef       	ldi	r24, 0xFD	; 253
     ade:	93 e0       	ldi	r25, 0x03	; 3
     ae0:	75 dd       	rcall	.-1302   	; 0x5cc <tx_at_response>
     ae2:	60 91 18 04 	lds	r22, 0x0418	; 0x800418 <transfer_data_length_package>
					reset_char_array(&mqtt_sub_topic, 3);
     ae6:	70 91 19 04 	lds	r23, 0x0419	; 0x800419 <transfer_data_length_package+0x1>
     aea:	8a e1       	ldi	r24, 0x1A	; 26
     aec:	94 e0       	ldi	r25, 0x04	; 4
// 						itoa(transfer_data_length_package, package_lenght, 10);
// 						strcpy(mystring, package_lenght);
// 						usart_tx_at(USART_TERMINAL, mystring);
					#endif // DEBUG

					transfer_data_package_counter++;
     aee:	6a de       	rcall	.-812    	; 0x7c4 <tx>
     af0:	63 e0       	ldi	r22, 0x03	; 3
     af2:	80 e9       	ldi	r24, 0x90	; 144
     af4:	94 e0       	ldi	r25, 0x04	; 4
     af6:	40 dc       	rcall	.-1920   	; 0x378 <reset_char_array>
     af8:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <__data_end>
				controller_next_state = GENERATE_PACKAGE;
				break;
			
			case GENERATE_PACKAGE:
				transfer_data_package_counter = 0;
				while (transfer_data_package_counter < 8)
     afc:	90 91 17 04 	lds	r25, 0x0417	; 0x800417 <__data_end+0x1>
     b00:	01 96       	adiw	r24, 0x01	; 1
					#endif // DEBUG

					transfer_data_package_counter++;
					
				}
				controller_next_state = TX_DATA;
     b02:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <__data_end+0x1>
				break;
     b06:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <__data_end>
			
			case TX_DATA:
				controller_next_state = RX_DATA;
     b0a:	88 30       	cpi	r24, 0x08	; 8
				break;
     b0c:	91 05       	cpc	r25, r1
			
			case RX_DATA:
				controller_next_state = RF_DISCONNECT;
     b0e:	0c f4       	brge	.+2      	; 0xb12 <__stack+0x213>
     b10:	bf cf       	rjmp	.-130    	; 0xa90 <__stack+0x191>
				break;
     b12:	b0 92 8e 04 	sts	0x048E, r11	; 0x80048e <controller_next_state>
			
			case RF_DISCONNECT:
 				if (at_rf_disconnect() != 0) //Status will not be transmitted, but could probably be stored for later.
     b16:	16 c0       	rjmp	.+44     	; 0xb44 <__stack+0x245>
 				{
// 					//tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_DISNNECT); //set failure status
// 					controller_next_state = RF_POWER_OFF; // RF_DISCONNECT; //if failure go to disconnect
// 					break;
 				}
				controller_next_state = RF_POWER_OFF;
     b18:	a0 92 8e 04 	sts	0x048E, r10	; 0x80048e <controller_next_state>
				break;
     b1c:	13 c0       	rjmp	.+38     	; 0xb44 <__stack+0x245>
			
			case RF_POWER_OFF:
				radio_power_off_at(); //radio power down
     b1e:	00 93 8e 04 	sts	0x048E, r16	; 0x80048e <controller_next_state>
				controller_next_state = RESET_REGISTERS;
     b22:	10 c0       	rjmp	.+32     	; 0xb44 <__stack+0x245>
				break;
     b24:	45 de       	rcall	.-886    	; 0x7b0 <at_rf_disconnect>
			
			case RESET_REGISTERS:
				reset_all_data(); //reset all arrays
     b26:	10 93 8e 04 	sts	0x048E, r17	; 0x80048e <controller_next_state>
				controller_next_state = READ_EXT_DATA;
     b2a:	0c c0       	rjmp	.+24     	; 0xb44 <__stack+0x245>
     b2c:	9d dc       	rcall	.-1734   	; 0x468 <radio_power_off_at>
				RTC_ISR_ACTIVE = 0; //FINISHED, break LOOP!
     b2e:	f0 92 8e 04 	sts	0x048E, r15	; 0x80048e <controller_next_state>
				break;
     b32:	08 c0       	rjmp	.+16     	; 0xb44 <__stack+0x245>
			
			default:
				controller_next_state = RESET_REGISTERS; //TRY RESET.
     b34:	2f dc       	rcall	.-1954   	; 0x394 <reset_all_data>
     b36:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <controller_next_state>
				break;
		}
		
		controller_state = controller_next_state; //NEXT STATE => STATE
     b3a:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <RTC_ISR_ACTIVE>
     b3e:	02 c0       	rjmp	.+4      	; 0xb44 <__stack+0x245>
	{
		goto END;
	} else {wdt_counter = 0;} //reset counter if limit is reached.
	
	RTC_ISR_ACTIVE = 1;
	while (RTC_ISR_ACTIVE == 1)
     b40:	f0 92 8e 04 	sts	0x048E, r15	; 0x80048e <controller_next_state>
     b44:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <controller_next_state>
     b48:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <controller_state>

	END:
	
	wdt_reset();
	//wdt_enable();
	rtc_init_period(1);
     b4c:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <RTC_ISR_ACTIVE>
     b50:	81 30       	cpi	r24, 0x01	; 1
     b52:	09 f4       	brne	.+2      	; 0xb56 <__stack+0x257>
	return;
	
}
     b54:	09 cf       	rjmp	.-494    	; 0x968 <__stack+0x69>
     b56:	a8 95       	wdr
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	2a dc       	rcall	.-1964   	; 0x3b2 <rtc_init_period>
     b5e:	ff 91       	pop	r31
     b60:	ef 91       	pop	r30
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	bf 91       	pop	r27
     b68:	af 91       	pop	r26
     b6a:	9f 91       	pop	r25
     b6c:	8f 91       	pop	r24
     b6e:	7f 91       	pop	r23
     b70:	6f 91       	pop	r22
     b72:	5f 91       	pop	r21
     b74:	4f 91       	pop	r20
     b76:	3f 91       	pop	r19
     b78:	2f 91       	pop	r18
     b7a:	1f 91       	pop	r17
     b7c:	0f 91       	pop	r16
     b7e:	ff 90       	pop	r15
     b80:	ef 90       	pop	r14
     b82:	df 90       	pop	r13
     b84:	cf 90       	pop	r12
     b86:	bf 90       	pop	r11
     b88:	af 90       	pop	r10
     b8a:	9f 90       	pop	r9
     b8c:	0f 90       	pop	r0
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	0f 90       	pop	r0
     b92:	1f 90       	pop	r1
     b94:	18 95       	reti

00000b96 <main>:
		
	/* Initialize the board.
	 * The board-specific conf_board.h file contains the configuration of
	 * the board initialization.
	 */
	board_init();
     b96:	f8 94       	cli
}
#endif // DEBUG

static void adc_initialization(void)
{
	PRR0 &= ~(1<<PRADC); //enable ADC clock
     b98:	c8 d3       	rcall	.+1936   	; 0x132a <board_init>
     b9a:	e4 e6       	ldi	r30, 0x64	; 100
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	8e 7f       	andi	r24, 0xFE	; 254
 *
 * \param prescaler   ADC clock prescaler
 */
static inline void adc_init(enum adc_prescaler prescaler)
{
	ADCSRA = (uint8_t)prescaler | (1 << ADEN);
     ba2:	80 83       	st	Z, r24
     ba4:	87 e8       	ldi	r24, 0x87	; 135
     ba6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	//Enable The receiver and transmitter
	UCSR0B |= (1<<3);
	*/
	//////////////////////////////////////////////////////////////////////////
	//unsigned char data = 0x40;
	usart_init_rs232(USART_RADIO, &USART_OPTIONS); //Radio UART
     baa:	62 e0       	ldi	r22, 0x02	; 2
     bac:	71 e0       	ldi	r23, 0x01	; 1
     bae:	80 ec       	ldi	r24, 0xC0	; 192
	sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	3d db       	rcall	.-2438   	; 0x22e <usart_init_rs232>
     bb4:	62 e0       	ldi	r22, 0x02	; 2
	
	usart_init_rs232(USART_TERMINAL, &USART_OPTIONS); //Radio UART
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	8a da       	rcall	.-2796   	; 0xce <sysclk_enable_module>
     bba:	62 e0       	ldi	r22, 0x02	; 2
     bbc:	71 e0       	ldi	r23, 0x01	; 1
	sysclk_enable_module(POWER_RED_REG0, PRUSART1_bm);
     bbe:	88 ec       	ldi	r24, 0xC8	; 200
     bc0:	90 e0       	ldi	r25, 0x00	; 0
// 	
// 	//initialize radio pins
 	delay_s(1); //wait for voltages to settle
     bc2:	35 db       	rcall	.-2454   	; 0x22e <usart_init_rs232>
     bc4:	60 e1       	ldi	r22, 0x10	; 16
     bc6:	80 e0       	ldi	r24, 0x00	; 0
 	radio_pins_init();
     bc8:	82 da       	rcall	.-2812   	; 0xce <sysclk_enable_module>
     bca:	6b e0       	ldi	r22, 0x0B	; 11
     bcc:	7b e8       	ldi	r23, 0x8B	; 139
     bce:	82 e0       	ldi	r24, 0x02	; 2
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	a3 db       	rcall	.-2234   	; 0x31a <__portable_avr_delay_cycles>
     bd4:	f9 db       	rcall	.-2062   	; 0x3c8 <radio_pins_init>
     bd6:	6b e0       	ldi	r22, 0x0B	; 11
     bd8:	7b e8       	ldi	r23, 0x8B	; 139
     bda:	82 e0       	ldi	r24, 0x02	; 2
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	9d db       	rcall	.-2246   	; 0x31a <__portable_avr_delay_cycles>
     be0:	f0 db       	rcall	.-2080   	; 0x3c2 <loadcell_pins_init>
     be2:	42 dc       	rcall	.-1916   	; 0x468 <radio_power_off_at>
     be4:	d7 db       	rcall	.-2130   	; 0x394 <reset_all_data>
     be6:	82 e0       	ldi	r24, 0x02	; 2
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	e3 db       	rcall	.-2106   	; 0x3b2 <rtc_init_period>
     bec:	83 b7       	in	r24, 0x33	; 51
     bee:	81 7f       	andi	r24, 0xF1	; 241
     bf0:	84 60       	ori	r24, 0x04	; 4
     bf2:	83 bf       	out	0x33, r24	; 51
     bf4:	78 94       	sei
     bf6:	83 b7       	in	r24, 0x33	; 51
     bf8:	81 60       	ori	r24, 0x01	; 1
     bfa:	83 bf       	out	0x33, r24	; 51
     bfc:	85 b7       	in	r24, 0x35	; 53
     bfe:	80 66       	ori	r24, 0x60	; 96
     c00:	85 bf       	out	0x35, r24	; 53
     c02:	8f 7d       	andi	r24, 0xDF	; 223
     c04:	85 bf       	out	0x35, r24	; 53
     c06:	88 95       	sleep
     c08:	83 b7       	in	r24, 0x33	; 51
     c0a:	8e 7f       	andi	r24, 0xFE	; 254
     c0c:	83 bf       	out	0x33, r24	; 51
     c0e:	f3 cf       	rjmp	.-26     	; 0xbf6 <main+0x60>

00000c10 <MQTTSerialize_connectLength>:

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
     c10:	ef 92       	push	r14
     c12:	ff 92       	push	r15
     c14:	0f 93       	push	r16
     c16:	1f 93       	push	r17
     c18:	cf 93       	push	r28
     c1a:	df 93       	push	r29
     c1c:	ec 01       	movw	r28, r24
     c1e:	8e 81       	ldd	r24, Y+6	; 0x06
     c20:	83 30       	cpi	r24, 0x03	; 3
     c22:	29 f0       	breq	.+10     	; 0xc2e <MQTTSerialize_connectLength+0x1e>
     c24:	84 30       	cpi	r24, 0x04	; 4
     c26:	31 f4       	brne	.+12     	; 0xc34 <MQTTSerialize_connectLength+0x24>
     c28:	0a e0       	ldi	r16, 0x0A	; 10
     c2a:	10 e0       	ldi	r17, 0x00	; 0
     c2c:	05 c0       	rjmp	.+10     	; 0xc38 <MQTTSerialize_connectLength+0x28>
     c2e:	0c e0       	ldi	r16, 0x0C	; 12
     c30:	10 e0       	ldi	r17, 0x00	; 0
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <MQTTSerialize_connectLength+0x28>
     c34:	00 e0       	ldi	r16, 0x00	; 0
     c36:	10 e0       	ldi	r17, 0x00	; 0
     c38:	4f 81       	ldd	r20, Y+7	; 0x07
     c3a:	58 85       	ldd	r21, Y+8	; 0x08
     c3c:	69 85       	ldd	r22, Y+9	; 0x09
     c3e:	7a 85       	ldd	r23, Y+10	; 0x0a
     c40:	8b 85       	ldd	r24, Y+11	; 0x0b
     c42:	9c 85       	ldd	r25, Y+12	; 0x0c
     c44:	fb d1       	rcall	.+1014   	; 0x103c <MQTTstrlen>
     c46:	02 96       	adiw	r24, 0x02	; 2
     c48:	08 0f       	add	r16, r24
     c4a:	19 1f       	adc	r17, r25
     c4c:	88 89       	ldd	r24, Y+16	; 0x10
     c4e:	88 23       	and	r24, r24
     c50:	a1 f0       	breq	.+40     	; 0xc7a <MQTTSerialize_connectLength+0x6a>
     c52:	4f 89       	ldd	r20, Y+23	; 0x17
     c54:	58 8d       	ldd	r21, Y+24	; 0x18
     c56:	69 8d       	ldd	r22, Y+25	; 0x19
     c58:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c5e:	ee d1       	rcall	.+988    	; 0x103c <MQTTstrlen>
     c60:	7c 01       	movw	r14, r24
     c62:	4d 8d       	ldd	r20, Y+29	; 0x1d
     c64:	5e 8d       	ldd	r21, Y+30	; 0x1e
     c66:	6f 8d       	ldd	r22, Y+31	; 0x1f
     c68:	78 a1       	ldd	r23, Y+32	; 0x20
     c6a:	89 a1       	ldd	r24, Y+33	; 0x21
     c6c:	9a a1       	ldd	r25, Y+34	; 0x22
     c6e:	e6 d1       	rcall	.+972    	; 0x103c <MQTTstrlen>
     c70:	8e 0d       	add	r24, r14
     c72:	9f 1d       	adc	r25, r15
     c74:	04 96       	adiw	r24, 0x04	; 4
     c76:	08 0f       	add	r16, r24
     c78:	19 1f       	adc	r17, r25
     c7a:	8d a1       	ldd	r24, Y+37	; 0x25
     c7c:	9e a1       	ldd	r25, Y+38	; 0x26
     c7e:	89 2b       	or	r24, r25
     c80:	21 f4       	brne	.+8      	; 0xc8a <MQTTSerialize_connectLength+0x7a>
     c82:	89 a5       	ldd	r24, Y+41	; 0x29
     c84:	9a a5       	ldd	r25, Y+42	; 0x2a
     c86:	89 2b       	or	r24, r25
     c88:	51 f0       	breq	.+20     	; 0xc9e <MQTTSerialize_connectLength+0x8e>
     c8a:	4d a1       	ldd	r20, Y+37	; 0x25
     c8c:	5e a1       	ldd	r21, Y+38	; 0x26
     c8e:	6f a1       	ldd	r22, Y+39	; 0x27
     c90:	78 a5       	ldd	r23, Y+40	; 0x28
     c92:	89 a5       	ldd	r24, Y+41	; 0x29
     c94:	9a a5       	ldd	r25, Y+42	; 0x2a
     c96:	d2 d1       	rcall	.+932    	; 0x103c <MQTTstrlen>
     c98:	02 96       	adiw	r24, 0x02	; 2
     c9a:	08 0f       	add	r16, r24
     c9c:	19 1f       	adc	r17, r25
     c9e:	8b a5       	ldd	r24, Y+43	; 0x2b
     ca0:	9c a5       	ldd	r25, Y+44	; 0x2c
     ca2:	89 2b       	or	r24, r25
     ca4:	21 f4       	brne	.+8      	; 0xcae <MQTTSerialize_connectLength+0x9e>
     ca6:	8f a5       	ldd	r24, Y+47	; 0x2f
     ca8:	98 a9       	ldd	r25, Y+48	; 0x30
     caa:	89 2b       	or	r24, r25
     cac:	51 f0       	breq	.+20     	; 0xcc2 <MQTTSerialize_connectLength+0xb2>
     cae:	4b a5       	ldd	r20, Y+43	; 0x2b
     cb0:	5c a5       	ldd	r21, Y+44	; 0x2c
     cb2:	6d a5       	ldd	r22, Y+45	; 0x2d
     cb4:	7e a5       	ldd	r23, Y+46	; 0x2e
     cb6:	8f a5       	ldd	r24, Y+47	; 0x2f
     cb8:	98 a9       	ldd	r25, Y+48	; 0x30
     cba:	c0 d1       	rcall	.+896    	; 0x103c <MQTTstrlen>
     cbc:	02 96       	adiw	r24, 0x02	; 2
     cbe:	08 0f       	add	r16, r24
     cc0:	19 1f       	adc	r17, r25
     cc2:	c8 01       	movw	r24, r16
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	1f 91       	pop	r17
     cca:	0f 91       	pop	r16
     ccc:	ff 90       	pop	r15
     cce:	ef 90       	pop	r14
     cd0:	08 95       	ret

00000cd2 <MQTTSerialize_connect>:
     cd2:	af 92       	push	r10
     cd4:	bf 92       	push	r11
     cd6:	cf 92       	push	r12
     cd8:	df 92       	push	r13
     cda:	ef 92       	push	r14
     cdc:	ff 92       	push	r15
     cde:	0f 93       	push	r16
     ce0:	1f 93       	push	r17
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	00 d0       	rcall	.+0      	; 0xce8 <MQTTSerialize_connect+0x16>
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	6c 01       	movw	r12, r24
     cee:	5b 01       	movw	r10, r22
     cf0:	8a 01       	movw	r16, r20
     cf2:	9a 83       	std	Y+2, r25	; 0x02
     cf4:	89 83       	std	Y+1, r24	; 0x01
     cf6:	ca 01       	movw	r24, r20
     cf8:	8b df       	rcall	.-234    	; 0xc10 <MQTTSerialize_connectLength>
     cfa:	7c 01       	movw	r14, r24
     cfc:	03 d1       	rcall	.+518    	; 0xf04 <MQTTPacket_len>
     cfe:	a8 16       	cp	r10, r24
     d00:	b9 06       	cpc	r11, r25
     d02:	0c f4       	brge	.+2      	; 0xd06 <MQTTSerialize_connect+0x34>
     d04:	9f c0       	rjmp	.+318    	; 0xe44 <MQTTSerialize_connect+0x172>
     d06:	60 e1       	ldi	r22, 0x10	; 16
     d08:	ce 01       	movw	r24, r28
     d0a:	01 96       	adiw	r24, 0x01	; 1
     d0c:	0a d1       	rcall	.+532    	; 0xf22 <writeChar>
     d0e:	b7 01       	movw	r22, r14
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	9a 81       	ldd	r25, Y+2	; 0x02
     d14:	d1 d0       	rcall	.+418    	; 0xeb8 <MQTTPacket_encode>
     d16:	29 81       	ldd	r18, Y+1	; 0x01
     d18:	3a 81       	ldd	r19, Y+2	; 0x02
     d1a:	82 0f       	add	r24, r18
     d1c:	93 1f       	adc	r25, r19
     d1e:	9a 83       	std	Y+2, r25	; 0x02
     d20:	89 83       	std	Y+1, r24	; 0x01
     d22:	f8 01       	movw	r30, r16
     d24:	86 81       	ldd	r24, Z+6	; 0x06
     d26:	84 30       	cpi	r24, 0x04	; 4
     d28:	51 f4       	brne	.+20     	; 0xd3e <MQTTSerialize_connect+0x6c>
     d2a:	66 e0       	ldi	r22, 0x06	; 6
     d2c:	74 e0       	ldi	r23, 0x04	; 4
     d2e:	ce 01       	movw	r24, r28
     d30:	01 96       	adiw	r24, 0x01	; 1
     d32:	20 d1       	rcall	.+576    	; 0xf74 <writeCString>
     d34:	64 e0       	ldi	r22, 0x04	; 4
     d36:	ce 01       	movw	r24, r28
     d38:	01 96       	adiw	r24, 0x01	; 1
     d3a:	f3 d0       	rcall	.+486    	; 0xf22 <writeChar>
     d3c:	09 c0       	rjmp	.+18     	; 0xd50 <MQTTSerialize_connect+0x7e>
     d3e:	6b e0       	ldi	r22, 0x0B	; 11
     d40:	74 e0       	ldi	r23, 0x04	; 4
     d42:	ce 01       	movw	r24, r28
     d44:	01 96       	adiw	r24, 0x01	; 1
     d46:	16 d1       	rcall	.+556    	; 0xf74 <writeCString>
     d48:	63 e0       	ldi	r22, 0x03	; 3
     d4a:	ce 01       	movw	r24, r28
     d4c:	01 96       	adiw	r24, 0x01	; 1
     d4e:	e9 d0       	rcall	.+466    	; 0xf22 <writeChar>
     d50:	f1 2c       	mov	r15, r1
     d52:	f8 01       	movw	r30, r16
     d54:	87 85       	ldd	r24, Z+15	; 0x0f
     d56:	80 fb       	bst	r24, 0
     d58:	f1 f8       	bld	r15, 1
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	90 89       	ldd	r25, Z+16	; 0x10
     d5e:	91 11       	cpse	r25, r1
     d60:	01 c0       	rjmp	.+2      	; 0xd64 <MQTTSerialize_connect+0x92>
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	80 fb       	bst	r24, 0
     d66:	f2 f8       	bld	r15, 2
     d68:	f2 fe       	sbrs	r15, 2
     d6a:	0d c0       	rjmp	.+26     	; 0xd86 <MQTTSerialize_connect+0xb4>
     d6c:	f8 01       	movw	r30, r16
     d6e:	84 a1       	ldd	r24, Z+36	; 0x24
     d70:	83 70       	andi	r24, 0x03	; 3
     d72:	88 0f       	add	r24, r24
     d74:	88 0f       	add	r24, r24
     d76:	88 0f       	add	r24, r24
     d78:	9f 2d       	mov	r25, r15
     d7a:	97 7e       	andi	r25, 0xE7	; 231
     d7c:	f9 2e       	mov	r15, r25
     d7e:	f8 2a       	or	r15, r24
     d80:	83 a1       	ldd	r24, Z+35	; 0x23
     d82:	80 fb       	bst	r24, 0
     d84:	f5 f8       	bld	r15, 5
     d86:	f8 01       	movw	r30, r16
     d88:	85 a1       	ldd	r24, Z+37	; 0x25
     d8a:	96 a1       	ldd	r25, Z+38	; 0x26
     d8c:	89 2b       	or	r24, r25
     d8e:	21 f4       	brne	.+8      	; 0xd98 <MQTTSerialize_connect+0xc6>
     d90:	81 a5       	ldd	r24, Z+41	; 0x29
     d92:	92 a5       	ldd	r25, Z+42	; 0x2a
     d94:	89 2b       	or	r24, r25
     d96:	11 f0       	breq	.+4      	; 0xd9c <MQTTSerialize_connect+0xca>
     d98:	68 94       	set
     d9a:	f7 f8       	bld	r15, 7
     d9c:	f8 01       	movw	r30, r16
     d9e:	83 a5       	ldd	r24, Z+43	; 0x2b
     da0:	94 a5       	ldd	r25, Z+44	; 0x2c
     da2:	89 2b       	or	r24, r25
     da4:	21 f4       	brne	.+8      	; 0xdae <MQTTSerialize_connect+0xdc>
     da6:	87 a5       	ldd	r24, Z+47	; 0x2f
     da8:	90 a9       	ldd	r25, Z+48	; 0x30
     daa:	89 2b       	or	r24, r25
     dac:	11 f0       	breq	.+4      	; 0xdb2 <MQTTSerialize_connect+0xe0>
     dae:	68 94       	set
     db0:	f6 f8       	bld	r15, 6
     db2:	6f 2d       	mov	r22, r15
     db4:	ce 01       	movw	r24, r28
     db6:	01 96       	adiw	r24, 0x01	; 1
     db8:	b4 d0       	rcall	.+360    	; 0xf22 <writeChar>
     dba:	f8 01       	movw	r30, r16
     dbc:	65 85       	ldd	r22, Z+13	; 0x0d
     dbe:	76 85       	ldd	r23, Z+14	; 0x0e
     dc0:	ce 01       	movw	r24, r28
     dc2:	01 96       	adiw	r24, 0x01	; 1
     dc4:	b8 d0       	rcall	.+368    	; 0xf36 <writeInt>
     dc6:	f8 01       	movw	r30, r16
     dc8:	27 81       	ldd	r18, Z+7	; 0x07
     dca:	30 85       	ldd	r19, Z+8	; 0x08
     dcc:	41 85       	ldd	r20, Z+9	; 0x09
     dce:	52 85       	ldd	r21, Z+10	; 0x0a
     dd0:	63 85       	ldd	r22, Z+11	; 0x0b
     dd2:	74 85       	ldd	r23, Z+12	; 0x0c
     dd4:	ce 01       	movw	r24, r28
     dd6:	01 96       	adiw	r24, 0x01	; 1
     dd8:	f2 d0       	rcall	.+484    	; 0xfbe <writeMQTTString>
     dda:	f8 01       	movw	r30, r16
     ddc:	80 89       	ldd	r24, Z+16	; 0x10
     dde:	88 23       	and	r24, r24
     de0:	99 f0       	breq	.+38     	; 0xe08 <MQTTSerialize_connect+0x136>
     de2:	27 89       	ldd	r18, Z+23	; 0x17
     de4:	30 8d       	ldd	r19, Z+24	; 0x18
     de6:	41 8d       	ldd	r20, Z+25	; 0x19
     de8:	52 8d       	ldd	r21, Z+26	; 0x1a
     dea:	63 8d       	ldd	r22, Z+27	; 0x1b
     dec:	74 8d       	ldd	r23, Z+28	; 0x1c
     dee:	ce 01       	movw	r24, r28
     df0:	01 96       	adiw	r24, 0x01	; 1
     df2:	e5 d0       	rcall	.+458    	; 0xfbe <writeMQTTString>
     df4:	f8 01       	movw	r30, r16
     df6:	25 8d       	ldd	r18, Z+29	; 0x1d
     df8:	36 8d       	ldd	r19, Z+30	; 0x1e
     dfa:	47 8d       	ldd	r20, Z+31	; 0x1f
     dfc:	50 a1       	ldd	r21, Z+32	; 0x20
     dfe:	61 a1       	ldd	r22, Z+33	; 0x21
     e00:	72 a1       	ldd	r23, Z+34	; 0x22
     e02:	ce 01       	movw	r24, r28
     e04:	01 96       	adiw	r24, 0x01	; 1
     e06:	db d0       	rcall	.+438    	; 0xfbe <writeMQTTString>
     e08:	ef 2c       	mov	r14, r15
     e0a:	ff 20       	and	r15, r15
     e0c:	54 f4       	brge	.+20     	; 0xe22 <MQTTSerialize_connect+0x150>
     e0e:	f8 01       	movw	r30, r16
     e10:	25 a1       	ldd	r18, Z+37	; 0x25
     e12:	36 a1       	ldd	r19, Z+38	; 0x26
     e14:	47 a1       	ldd	r20, Z+39	; 0x27
     e16:	50 a5       	ldd	r21, Z+40	; 0x28
     e18:	61 a5       	ldd	r22, Z+41	; 0x29
     e1a:	72 a5       	ldd	r23, Z+42	; 0x2a
     e1c:	ce 01       	movw	r24, r28
     e1e:	01 96       	adiw	r24, 0x01	; 1
     e20:	ce d0       	rcall	.+412    	; 0xfbe <writeMQTTString>
     e22:	e6 fe       	sbrs	r14, 6
     e24:	0a c0       	rjmp	.+20     	; 0xe3a <MQTTSerialize_connect+0x168>
     e26:	f8 01       	movw	r30, r16
     e28:	23 a5       	ldd	r18, Z+43	; 0x2b
     e2a:	34 a5       	ldd	r19, Z+44	; 0x2c
     e2c:	45 a5       	ldd	r20, Z+45	; 0x2d
     e2e:	56 a5       	ldd	r21, Z+46	; 0x2e
     e30:	67 a5       	ldd	r22, Z+47	; 0x2f
     e32:	70 a9       	ldd	r23, Z+48	; 0x30
     e34:	ce 01       	movw	r24, r28
     e36:	01 96       	adiw	r24, 0x01	; 1
     e38:	c2 d0       	rcall	.+388    	; 0xfbe <writeMQTTString>
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	9a 81       	ldd	r25, Y+2	; 0x02
     e3e:	8c 19       	sub	r24, r12
     e40:	9d 09       	sbc	r25, r13
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <MQTTSerialize_connect+0x176>
     e44:	8e ef       	ldi	r24, 0xFE	; 254
     e46:	9f ef       	ldi	r25, 0xFF	; 255
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	1f 91       	pop	r17
     e52:	0f 91       	pop	r16
     e54:	ff 90       	pop	r15
     e56:	ef 90       	pop	r14
     e58:	df 90       	pop	r13
     e5a:	cf 90       	pop	r12
     e5c:	bf 90       	pop	r11
     e5e:	af 90       	pop	r10
     e60:	08 95       	ret

00000e62 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <MQTTSerialize_zero+0xa>
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
     e70:	9a 83       	std	Y+2, r25	; 0x02
     e72:	89 83       	std	Y+1, r24	; 0x01

	FUNC_ENTRY;
	if (buflen < 2)
     e74:	62 30       	cpi	r22, 0x02	; 2
     e76:	71 05       	cpc	r23, r1
     e78:	9c f0       	brlt	.+38     	; 0xea0 <MQTTSerialize_zero+0x3e>
     e7a:	8c 01       	movw	r16, r24
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
     e7c:	64 2f       	mov	r22, r20
     e7e:	62 95       	swap	r22
     e80:	60 7f       	andi	r22, 0xF0	; 240
	writeChar(&ptr, header.byte); /* write header */
     e82:	ce 01       	movw	r24, r28
     e84:	01 96       	adiw	r24, 0x01	; 1
     e86:	4d d0       	rcall	.+154    	; 0xf22 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
     e88:	60 e0       	ldi	r22, 0x00	; 0
     e8a:	70 e0       	ldi	r23, 0x00	; 0
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	9a 81       	ldd	r25, Y+2	; 0x02
     e90:	13 d0       	rcall	.+38     	; 0xeb8 <MQTTPacket_encode>
	rc = ptr - buf;
     e92:	29 81       	ldd	r18, Y+1	; 0x01
     e94:	3a 81       	ldd	r19, Y+2	; 0x02
     e96:	82 0f       	add	r24, r18
     e98:	93 1f       	adc	r25, r19
     e9a:	80 1b       	sub	r24, r16
     e9c:	91 0b       	sbc	r25, r17
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <MQTTSerialize_zero+0x42>
	unsigned char *ptr = buf;

	FUNC_ENTRY;
	if (buflen < 2)
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
     ea0:	8e ef       	ldi	r24, 0xFE	; 254
     ea2:	9f ef       	ldi	r25, 0xFF	; 255
	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
	rc = ptr - buf;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	1f 91       	pop	r17
     eae:	0f 91       	pop	r16
     eb0:	08 95       	ret

00000eb2 <MQTTSerialize_disconnect>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
     eb2:	4e e0       	ldi	r20, 0x0E	; 14
     eb4:	d6 cf       	rjmp	.-84     	; 0xe62 <MQTTSerialize_zero>
}
     eb6:	08 95       	ret

00000eb8 <MQTTPacket_encode>:
		}
	}
	mqttstring->cstring = NULL;
	FUNC_EXIT_RC(rc);
	return rc;
}
     eb8:	dc 01       	movw	r26, r24
     eba:	e0 e0       	ldi	r30, 0x00	; 0
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	9b 01       	movw	r18, r22
     ec0:	2f 77       	andi	r18, 0x7F	; 127
     ec2:	30 78       	andi	r19, 0x80	; 128
     ec4:	33 23       	and	r19, r19
     ec6:	34 f4       	brge	.+12     	; 0xed4 <MQTTPacket_encode+0x1c>
     ec8:	21 50       	subi	r18, 0x01	; 1
     eca:	31 09       	sbc	r19, r1
     ecc:	20 68       	ori	r18, 0x80	; 128
     ece:	3f 6f       	ori	r19, 0xFF	; 255
     ed0:	2f 5f       	subi	r18, 0xFF	; 255
     ed2:	3f 4f       	sbci	r19, 0xFF	; 255
     ed4:	ab 01       	movw	r20, r22
     ed6:	77 23       	and	r23, r23
     ed8:	14 f4       	brge	.+4      	; 0xede <MQTTPacket_encode+0x26>
     eda:	41 58       	subi	r20, 0x81	; 129
     edc:	5f 4f       	sbci	r21, 0xFF	; 255
     ede:	ba 01       	movw	r22, r20
     ee0:	66 0f       	add	r22, r22
     ee2:	67 2f       	mov	r22, r23
     ee4:	66 1f       	adc	r22, r22
     ee6:	77 0b       	sbc	r23, r23
     ee8:	16 16       	cp	r1, r22
     eea:	17 06       	cpc	r1, r23
     eec:	24 f4       	brge	.+8      	; 0xef6 <MQTTPacket_encode+0x3e>
     eee:	31 96       	adiw	r30, 0x01	; 1
     ef0:	20 68       	ori	r18, 0x80	; 128
     ef2:	2d 93       	st	X+, r18
     ef4:	e4 cf       	rjmp	.-56     	; 0xebe <MQTTPacket_encode+0x6>
     ef6:	dc 01       	movw	r26, r24
     ef8:	ae 0f       	add	r26, r30
     efa:	bf 1f       	adc	r27, r31
     efc:	2c 93       	st	X, r18
     efe:	cf 01       	movw	r24, r30
     f00:	01 96       	adiw	r24, 0x01	; 1
     f02:	08 95       	ret

00000f04 <MQTTPacket_len>:
     f04:	9c 01       	movw	r18, r24
     f06:	2f 5f       	subi	r18, 0xFF	; 255
     f08:	3f 4f       	sbci	r19, 0xFF	; 255
     f0a:	20 38       	cpi	r18, 0x80	; 128
     f0c:	31 05       	cpc	r19, r1
     f0e:	14 f4       	brge	.+4      	; 0xf14 <MQTTPacket_len+0x10>
     f10:	02 96       	adiw	r24, 0x02	; 2
     f12:	08 95       	ret
     f14:	21 15       	cp	r18, r1
     f16:	30 44       	sbci	r19, 0x40	; 64
     f18:	14 f4       	brge	.+4      	; 0xf1e <MQTTPacket_len+0x1a>
     f1a:	03 96       	adiw	r24, 0x03	; 3
     f1c:	08 95       	ret
     f1e:	04 96       	adiw	r24, 0x04	; 4
     f20:	08 95       	ret

00000f22 <writeChar>:
     f22:	fc 01       	movw	r30, r24
     f24:	a0 81       	ld	r26, Z
     f26:	b1 81       	ldd	r27, Z+1	; 0x01
     f28:	6c 93       	st	X, r22
     f2a:	80 81       	ld	r24, Z
     f2c:	91 81       	ldd	r25, Z+1	; 0x01
     f2e:	01 96       	adiw	r24, 0x01	; 1
     f30:	91 83       	std	Z+1, r25	; 0x01
     f32:	80 83       	st	Z, r24
     f34:	08 95       	ret

00000f36 <writeInt>:
     f36:	fc 01       	movw	r30, r24
     f38:	a0 81       	ld	r26, Z
     f3a:	b1 81       	ldd	r27, Z+1	; 0x01
     f3c:	cb 01       	movw	r24, r22
     f3e:	77 23       	and	r23, r23
     f40:	14 f4       	brge	.+4      	; 0xf46 <writeInt+0x10>
     f42:	81 50       	subi	r24, 0x01	; 1
     f44:	9f 4f       	sbci	r25, 0xFF	; 255
     f46:	9c 93       	st	X, r25
     f48:	a0 81       	ld	r26, Z
     f4a:	b1 81       	ldd	r27, Z+1	; 0x01
     f4c:	cd 01       	movw	r24, r26
     f4e:	01 96       	adiw	r24, 0x01	; 1
     f50:	91 83       	std	Z+1, r25	; 0x01
     f52:	80 83       	st	Z, r24
     f54:	70 78       	andi	r23, 0x80	; 128
     f56:	77 23       	and	r23, r23
     f58:	2c f4       	brge	.+10     	; 0xf64 <writeInt+0x2e>
     f5a:	61 50       	subi	r22, 0x01	; 1
     f5c:	71 09       	sbc	r23, r1
     f5e:	7f 6f       	ori	r23, 0xFF	; 255
     f60:	6f 5f       	subi	r22, 0xFF	; 255
     f62:	7f 4f       	sbci	r23, 0xFF	; 255
     f64:	11 96       	adiw	r26, 0x01	; 1
     f66:	6c 93       	st	X, r22
     f68:	80 81       	ld	r24, Z
     f6a:	91 81       	ldd	r25, Z+1	; 0x01
     f6c:	01 96       	adiw	r24, 0x01	; 1
     f6e:	91 83       	std	Z+1, r25	; 0x01
     f70:	80 83       	st	Z, r24
     f72:	08 95       	ret

00000f74 <writeCString>:
     f74:	ef 92       	push	r14
     f76:	ff 92       	push	r15
     f78:	0f 93       	push	r16
     f7a:	1f 93       	push	r17
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	8c 01       	movw	r16, r24
     f82:	7b 01       	movw	r14, r22
     f84:	eb 01       	movw	r28, r22
     f86:	09 90       	ld	r0, Y+
     f88:	00 20       	and	r0, r0
     f8a:	e9 f7       	brne	.-6      	; 0xf86 <writeCString+0x12>
     f8c:	21 97       	sbiw	r28, 0x01	; 1
     f8e:	c6 1b       	sub	r28, r22
     f90:	d7 0b       	sbc	r29, r23
     f92:	be 01       	movw	r22, r28
     f94:	d0 df       	rcall	.-96     	; 0xf36 <writeInt>
     f96:	ae 01       	movw	r20, r28
     f98:	b7 01       	movw	r22, r14
     f9a:	f8 01       	movw	r30, r16
     f9c:	80 81       	ld	r24, Z
     f9e:	91 81       	ldd	r25, Z+1	; 0x01
     fa0:	72 d3       	rcall	.+1764   	; 0x1686 <memcpy>
     fa2:	f8 01       	movw	r30, r16
     fa4:	80 81       	ld	r24, Z
     fa6:	91 81       	ldd	r25, Z+1	; 0x01
     fa8:	c8 0f       	add	r28, r24
     faa:	d9 1f       	adc	r29, r25
     fac:	d1 83       	std	Z+1, r29	; 0x01
     fae:	c0 83       	st	Z, r28
     fb0:	df 91       	pop	r29
     fb2:	cf 91       	pop	r28
     fb4:	1f 91       	pop	r17
     fb6:	0f 91       	pop	r16
     fb8:	ff 90       	pop	r15
     fba:	ef 90       	pop	r14
     fbc:	08 95       	ret

00000fbe <writeMQTTString>:
     fbe:	ef 92       	push	r14
     fc0:	ff 92       	push	r15
     fc2:	0f 93       	push	r16
     fc4:	1f 93       	push	r17
     fc6:	cf 93       	push	r28
     fc8:	df 93       	push	r29
     fca:	00 d0       	rcall	.+0      	; 0xfcc <writeMQTTString+0xe>
     fcc:	00 d0       	rcall	.+0      	; 0xfce <writeMQTTString+0x10>
     fce:	00 d0       	rcall	.+0      	; 0xfd0 <writeMQTTString+0x12>
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
     fd4:	7c 01       	movw	r14, r24
     fd6:	29 83       	std	Y+1, r18	; 0x01
     fd8:	3a 83       	std	Y+2, r19	; 0x02
     fda:	4b 83       	std	Y+3, r20	; 0x03
     fdc:	5c 83       	std	Y+4, r21	; 0x04
     fde:	6d 83       	std	Y+5, r22	; 0x05
     fe0:	7e 83       	std	Y+6, r23	; 0x06
     fe2:	0b 81       	ldd	r16, Y+3	; 0x03
     fe4:	1c 81       	ldd	r17, Y+4	; 0x04
     fe6:	10 16       	cp	r1, r16
     fe8:	11 06       	cpc	r1, r17
     fea:	8c f4       	brge	.+34     	; 0x100e <writeMQTTString+0x50>
     fec:	b8 01       	movw	r22, r16
     fee:	a3 df       	rcall	.-186    	; 0xf36 <writeInt>
     ff0:	6d 81       	ldd	r22, Y+5	; 0x05
     ff2:	7e 81       	ldd	r23, Y+6	; 0x06
     ff4:	a8 01       	movw	r20, r16
     ff6:	f7 01       	movw	r30, r14
     ff8:	80 81       	ld	r24, Z
     ffa:	91 81       	ldd	r25, Z+1	; 0x01
     ffc:	44 d3       	rcall	.+1672   	; 0x1686 <memcpy>
     ffe:	f7 01       	movw	r30, r14
    1000:	80 81       	ld	r24, Z
    1002:	91 81       	ldd	r25, Z+1	; 0x01
    1004:	08 0f       	add	r16, r24
    1006:	19 1f       	adc	r17, r25
    1008:	11 83       	std	Z+1, r17	; 0x01
    100a:	00 83       	st	Z, r16
    100c:	0a c0       	rjmp	.+20     	; 0x1022 <writeMQTTString+0x64>
    100e:	69 81       	ldd	r22, Y+1	; 0x01
    1010:	7a 81       	ldd	r23, Y+2	; 0x02
    1012:	61 15       	cp	r22, r1
    1014:	71 05       	cpc	r23, r1
    1016:	11 f0       	breq	.+4      	; 0x101c <writeMQTTString+0x5e>
    1018:	ad df       	rcall	.-166    	; 0xf74 <writeCString>
    101a:	03 c0       	rjmp	.+6      	; 0x1022 <writeMQTTString+0x64>
    101c:	60 e0       	ldi	r22, 0x00	; 0
    101e:	70 e0       	ldi	r23, 0x00	; 0
    1020:	8a df       	rcall	.-236    	; 0xf36 <writeInt>
    1022:	26 96       	adiw	r28, 0x06	; 6
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	f8 94       	cli
    1028:	de bf       	out	0x3e, r29	; 62
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	cd bf       	out	0x3d, r28	; 61
    102e:	df 91       	pop	r29
    1030:	cf 91       	pop	r28
    1032:	1f 91       	pop	r17
    1034:	0f 91       	pop	r16
    1036:	ff 90       	pop	r15
    1038:	ef 90       	pop	r14
    103a:	08 95       	ret

0000103c <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
    103c:	cf 93       	push	r28
    103e:	df 93       	push	r29
    1040:	00 d0       	rcall	.+0      	; 0x1042 <MQTTstrlen+0x6>
    1042:	00 d0       	rcall	.+0      	; 0x1044 <MQTTstrlen+0x8>
    1044:	00 d0       	rcall	.+0      	; 0x1046 <MQTTstrlen+0xa>
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	49 83       	std	Y+1, r20	; 0x01
    104c:	5a 83       	std	Y+2, r21	; 0x02
    104e:	6b 83       	std	Y+3, r22	; 0x03
    1050:	7c 83       	std	Y+4, r23	; 0x04
    1052:	8d 83       	std	Y+5, r24	; 0x05
    1054:	9e 83       	std	Y+6, r25	; 0x06
    1056:	a9 81       	ldd	r26, Y+1	; 0x01
    1058:	ba 81       	ldd	r27, Y+2	; 0x02
	int rc = 0;

	if (mqttstring.cstring)
    105a:	10 97       	sbiw	r26, 0x00	; 0
    105c:	49 f0       	breq	.+18     	; 0x1070 <MQTTstrlen+0x34>
		rc = strlen(mqttstring.cstring);
    105e:	fd 01       	movw	r30, r26
    1060:	01 90       	ld	r0, Z+
    1062:	00 20       	and	r0, r0
    1064:	e9 f7       	brne	.-6      	; 0x1060 <MQTTstrlen+0x24>
    1066:	31 97       	sbiw	r30, 0x01	; 1
    1068:	cf 01       	movw	r24, r30
    106a:	8a 1b       	sub	r24, r26
    106c:	9b 0b       	sbc	r25, r27
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <MQTTstrlen+0x38>
	else
		rc = mqttstring.lenstring.len;
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
	return rc;
}
    1074:	26 96       	adiw	r28, 0x06	; 6
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	f8 94       	cli
    107a:	de bf       	out	0x3e, r29	; 62
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	cd bf       	out	0x3d, r28	; 61
    1080:	df 91       	pop	r29
    1082:	cf 91       	pop	r28
    1084:	08 95       	ret

00001086 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
    1086:	ef 92       	push	r14
    1088:	ff 92       	push	r15
    108a:	0f 93       	push	r16
    108c:	1f 93       	push	r17
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    1092:	00 d0       	rcall	.+0      	; 0x1094 <MQTTSerialize_publishLength+0xe>
    1094:	00 d0       	rcall	.+0      	; 0x1096 <MQTTSerialize_publishLength+0x10>
    1096:	00 d0       	rcall	.+0      	; 0x1098 <MQTTSerialize_publishLength+0x12>
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	7c 01       	movw	r14, r24
    109e:	f4 2f       	mov	r31, r20
    10a0:	e5 2f       	mov	r30, r21
    10a2:	86 2f       	mov	r24, r22
    10a4:	97 2f       	mov	r25, r23
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
    10a6:	42 2f       	mov	r20, r18
    10a8:	53 2f       	mov	r21, r19
    10aa:	6f 2f       	mov	r22, r31
    10ac:	7e 2f       	mov	r23, r30
    10ae:	c6 df       	rcall	.-116    	; 0x103c <MQTTstrlen>
    10b0:	02 96       	adiw	r24, 0x02	; 2
    10b2:	80 0f       	add	r24, r16
    10b4:	91 1f       	adc	r25, r17
	if (qos > 0)
    10b6:	1e 14       	cp	r1, r14
    10b8:	1f 04       	cpc	r1, r15
    10ba:	0c f4       	brge	.+2      	; 0x10be <MQTTSerialize_publishLength+0x38>
		len += 2; /* packetid */
    10bc:	02 96       	adiw	r24, 0x02	; 2
	return len;
}
    10be:	26 96       	adiw	r28, 0x06	; 6
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
    10ca:	df 91       	pop	r29
    10cc:	cf 91       	pop	r28
    10ce:	1f 91       	pop	r17
    10d0:	0f 91       	pop	r16
    10d2:	ff 90       	pop	r15
    10d4:	ef 90       	pop	r14
    10d6:	08 95       	ret

000010d8 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
    10d8:	2f 92       	push	r2
    10da:	3f 92       	push	r3
    10dc:	4f 92       	push	r4
    10de:	5f 92       	push	r5
    10e0:	6f 92       	push	r6
    10e2:	7f 92       	push	r7
    10e4:	8f 92       	push	r8
    10e6:	9f 92       	push	r9
    10e8:	af 92       	push	r10
    10ea:	bf 92       	push	r11
    10ec:	cf 92       	push	r12
    10ee:	df 92       	push	r13
    10f0:	ef 92       	push	r14
    10f2:	ff 92       	push	r15
    10f4:	0f 93       	push	r16
    10f6:	1f 93       	push	r17
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
    1100:	2a 97       	sbiw	r28, 0x0a	; 10
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	f8 94       	cli
    1106:	de bf       	out	0x3e, r29	; 62
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	cd bf       	out	0x3d, r28	; 61
    110c:	2c 01       	movw	r4, r24
    110e:	1b 01       	movw	r2, r22
    1110:	49 87       	std	Y+9, r20	; 0x09
    1112:	39 01       	movw	r6, r18
    1114:	0a 87       	std	Y+10, r16	; 0x0a
    1116:	28 2d       	mov	r18, r8
    1118:	8b 82       	std	Y+3, r8	; 0x03
    111a:	39 2d       	mov	r19, r9
    111c:	9c 82       	std	Y+4, r9	; 0x04
    111e:	4a 2d       	mov	r20, r10
    1120:	ad 82       	std	Y+5, r10	; 0x05
    1122:	5b 2d       	mov	r21, r11
    1124:	be 82       	std	Y+6, r11	; 0x06
    1126:	6c 2d       	mov	r22, r12
    1128:	cf 82       	std	Y+7, r12	; 0x07
    112a:	7d 2d       	mov	r23, r13
    112c:	d8 86       	std	Y+8, r13	; 0x08
    112e:	c9 a0       	ldd	r12, Y+33	; 0x21
    1130:	da a0       	ldd	r13, Y+34	; 0x22
	unsigned char *ptr = buf;
    1132:	9a 83       	std	Y+2, r25	; 0x02
    1134:	89 83       	std	Y+1, r24	; 0x01
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
    1136:	86 01       	movw	r16, r12
    1138:	c3 01       	movw	r24, r6
    113a:	a5 df       	rcall	.-182    	; 0x1086 <MQTTSerialize_publishLength>
    113c:	8c 01       	movw	r16, r24
    113e:	e2 de       	rcall	.-572    	; 0xf04 <MQTTPacket_len>
    1140:	28 16       	cp	r2, r24
    1142:	39 06       	cpc	r3, r25
    1144:	b4 f1       	brlt	.+108    	; 0x11b2 <MQTTSerialize_publish+0xda>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
    1146:	60 e3       	ldi	r22, 0x30	; 48
	header.bits.dup = dup;
    1148:	89 85       	ldd	r24, Y+9	; 0x09
    114a:	80 fb       	bst	r24, 0
    114c:	63 f9       	bld	r22, 3
	header.bits.qos = qos;
    114e:	86 2d       	mov	r24, r6
    1150:	83 70       	andi	r24, 0x03	; 3
    1152:	88 0f       	add	r24, r24
    1154:	69 7f       	andi	r22, 0xF9	; 249
    1156:	68 2b       	or	r22, r24
	header.bits.retain = retained;
    1158:	8a 85       	ldd	r24, Y+10	; 0x0a
    115a:	80 fb       	bst	r24, 0
	writeChar(&ptr, header.byte); /* write header */
    115c:	60 f9       	bld	r22, 0
    115e:	ce 01       	movw	r24, r28

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
    1160:	01 96       	adiw	r24, 0x01	; 1
    1162:	df de       	rcall	.-578    	; 0xf22 <writeChar>
    1164:	b8 01       	movw	r22, r16
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	9a 81       	ldd	r25, Y+2	; 0x02
    116a:	a6 de       	rcall	.-692    	; 0xeb8 <MQTTPacket_encode>
    116c:	29 81       	ldd	r18, Y+1	; 0x01
    116e:	3a 81       	ldd	r19, Y+2	; 0x02
    1170:	82 0f       	add	r24, r18
    1172:	93 1f       	adc	r25, r19

	writeMQTTString(&ptr, topicName);
    1174:	9a 83       	std	Y+2, r25	; 0x02
    1176:	89 83       	std	Y+1, r24	; 0x01
    1178:	2b 81       	ldd	r18, Y+3	; 0x03
    117a:	3c 81       	ldd	r19, Y+4	; 0x04
    117c:	4d 81       	ldd	r20, Y+5	; 0x05
    117e:	5e 81       	ldd	r21, Y+6	; 0x06
    1180:	6f 81       	ldd	r22, Y+7	; 0x07
    1182:	78 85       	ldd	r23, Y+8	; 0x08
    1184:	ce 01       	movw	r24, r28

	if (qos > 0)
    1186:	01 96       	adiw	r24, 0x01	; 1
    1188:	1a df       	rcall	.-460    	; 0xfbe <writeMQTTString>
		writeInt(&ptr, packetid);
    118a:	16 14       	cp	r1, r6
    118c:	17 04       	cpc	r1, r7
    118e:	24 f4       	brge	.+8      	; 0x1198 <MQTTSerialize_publish+0xc0>
    1190:	b7 01       	movw	r22, r14

	memcpy(ptr, payload, payloadlen);
    1192:	ce 01       	movw	r24, r28
    1194:	01 96       	adiw	r24, 0x01	; 1
    1196:	cf de       	rcall	.-610    	; 0xf36 <writeInt>
    1198:	a6 01       	movw	r20, r12
    119a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    119c:	78 a1       	ldd	r23, Y+32	; 0x20
    119e:	89 81       	ldd	r24, Y+1	; 0x01
	ptr += payloadlen;

	rc = ptr - buf;
    11a0:	9a 81       	ldd	r25, Y+2	; 0x02
    11a2:	71 d2       	rcall	.+1250   	; 0x1686 <memcpy>
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	9a 81       	ldd	r25, Y+2	; 0x02
    11a8:	8c 0d       	add	r24, r12
    11aa:	9d 1d       	adc	r25, r13
    11ac:	84 19       	sub	r24, r4
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    11ae:	95 09       	sbc	r25, r5
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <MQTTSerialize_publish+0xde>
	rc = ptr - buf;

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    11b2:	8e ef       	ldi	r24, 0xFE	; 254
    11b4:	9f ef       	ldi	r25, 0xFF	; 255
    11b6:	2a 96       	adiw	r28, 0x0a	; 10
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	f8 94       	cli
    11bc:	de bf       	out	0x3e, r29	; 62
    11be:	0f be       	out	0x3f, r0	; 63
    11c0:	cd bf       	out	0x3d, r28	; 61
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	1f 91       	pop	r17
    11c8:	0f 91       	pop	r16
    11ca:	ff 90       	pop	r15
    11cc:	ef 90       	pop	r14
    11ce:	df 90       	pop	r13
    11d0:	cf 90       	pop	r12
    11d2:	bf 90       	pop	r11
    11d4:	af 90       	pop	r10
    11d6:	9f 90       	pop	r9
    11d8:	8f 90       	pop	r8
    11da:	7f 90       	pop	r7
    11dc:	6f 90       	pop	r6
    11de:	5f 90       	pop	r5
    11e0:	4f 90       	pop	r4
    11e2:	3f 90       	pop	r3
    11e4:	2f 90       	pop	r2
    11e6:	08 95       	ret

000011e8 <mqtt_packet>:
#include "string.h"
#include "MQTT_functions.h" 

/////////////MQTT////////////////////
int mqtt_packet(char *payload, char *package, int buflen, char *sub_topic)
{
    11e8:	2f 92       	push	r2
    11ea:	3f 92       	push	r3
    11ec:	4f 92       	push	r4
    11ee:	5f 92       	push	r5
    11f0:	6f 92       	push	r6
    11f2:	7f 92       	push	r7
    11f4:	8f 92       	push	r8
    11f6:	9f 92       	push	r9
    11f8:	af 92       	push	r10
    11fa:	bf 92       	push	r11
    11fc:	cf 92       	push	r12
    11fe:	df 92       	push	r13
    1200:	ef 92       	push	r14
    1202:	ff 92       	push	r15
    1204:	0f 93       	push	r16
    1206:	1f 93       	push	r17
    1208:	cf 93       	push	r28
    120a:	df 93       	push	r29
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
    1210:	ed 97       	sbiw	r28, 0x3d	; 61
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	de bf       	out	0x3e, r29	; 62
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	cd bf       	out	0x3d, r28	; 61
    121c:	b8 2e       	mov	r11, r24
    121e:	a9 2e       	mov	r10, r25
    1220:	1b 01       	movw	r2, r22
    1222:	2a 01       	movw	r4, r20
    1224:	79 01       	movw	r14, r18
	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
    1226:	81 e3       	ldi	r24, 0x31	; 49
    1228:	e9 e0       	ldi	r30, 0x09	; 9
    122a:	f1 e0       	ldi	r31, 0x01	; 1
    122c:	de 01       	movw	r26, r28
    122e:	11 96       	adiw	r26, 0x01	; 1
    1230:	01 90       	ld	r0, Z+
    1232:	0d 92       	st	X+, r0
    1234:	8a 95       	dec	r24
    1236:	e1 f7       	brne	.-8      	; 0x1230 <mqtt_packet+0x48>
	
	//volatile int buflen = sizeof(&package);
	char buf[256];
	//buflen = sizeof(buf);
	MQTTString topicString = MQTTString_initializer;
    1238:	1d aa       	std	Y+53, r1	; 0x35
    123a:	1c aa       	std	Y+52, r1	; 0x34
    123c:	1f aa       	std	Y+55, r1	; 0x37
    123e:	1e aa       	std	Y+54, r1	; 0x36
	
	int payloadlen = strlen(payload);
    1240:	eb 2d       	mov	r30, r11
    1242:	f9 2f       	mov	r31, r25
    1244:	df 01       	movw	r26, r30
    1246:	0d 90       	ld	r0, X+
    1248:	00 20       	and	r0, r0
    124a:	e9 f7       	brne	.-6      	; 0x1246 <mqtt_packet+0x5e>
    124c:	11 97       	sbiw	r26, 0x01	; 1
    124e:	8d 01       	movw	r16, r26
    1250:	0e 1b       	sub	r16, r30
    1252:	1f 0b       	sbc	r17, r31
	int len = 0;
	
	data.clientID.cstring = "LE";
    1254:	82 e1       	ldi	r24, 0x12	; 18
    1256:	94 e0       	ldi	r25, 0x04	; 4
    1258:	99 87       	std	Y+9, r25	; 0x09
    125a:	88 87       	std	Y+8, r24	; 0x08
	//data.clientID.cstring = MQTT_TOPIC; //FIX SO THIS ONE WORKS, COULD BE AN ADDITIONAL INPUT.
	data.keepAliveInterval = 20;
    125c:	84 e1       	ldi	r24, 0x14	; 20
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	9f 87       	std	Y+15, r25	; 0x0f
    1262:	8e 87       	std	Y+14, r24	; 0x0e
	data.cleansession = 1;
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	88 8b       	std	Y+16, r24	; 0x10
	data.username.cstring = "";
    1268:	83 eb       	ldi	r24, 0xB3	; 179
    126a:	91 e0       	ldi	r25, 0x01	; 1
    126c:	9f a3       	std	Y+39, r25	; 0x27
    126e:	8e a3       	std	Y+38, r24	; 0x26
	data.password.cstring = "";
    1270:	9d a7       	std	Y+45, r25	; 0x2d
    1272:	8c a7       	std	Y+44, r24	; 0x2c
	data.MQTTVersion = 4;
    1274:	84 e0       	ldi	r24, 0x04	; 4
    1276:	8f 83       	std	Y+7, r24	; 0x07

	len = MQTTSerialize_connect((unsigned char *)package, buflen, &data);
    1278:	ae 01       	movw	r20, r28
    127a:	4f 5f       	subi	r20, 0xFF	; 255
    127c:	5f 4f       	sbci	r21, 0xFF	; 255
    127e:	b2 01       	movw	r22, r4
    1280:	c1 01       	movw	r24, r2
    1282:	27 dd       	rcall	.-1458   	; 0xcd2 <MQTTSerialize_connect>
    1284:	3c 01       	movw	r6, r24
	
	//topicString.cstring = "LE/0"; //MAKE A GENERAL CONFIGUREATION OF THIS PARAMETER
	char main_sub_topic[6] = "LE/";
    1286:	8c e4       	ldi	r24, 0x4C	; 76
    1288:	95 e4       	ldi	r25, 0x45	; 69
    128a:	99 af       	std	Y+57, r25	; 0x39
    128c:	88 af       	std	Y+56, r24	; 0x38
    128e:	8f e2       	ldi	r24, 0x2F	; 47
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	9b af       	std	Y+59, r25	; 0x3b
    1294:	8a af       	std	Y+58, r24	; 0x3a
    1296:	1d ae       	std	Y+61, r1	; 0x3d
    1298:	1c ae       	std	Y+60, r1	; 0x3c
	strcat(main_sub_topic, sub_topic);
    129a:	6e 01       	movw	r12, r28
    129c:	88 e3       	ldi	r24, 0x38	; 56
    129e:	c8 0e       	add	r12, r24
    12a0:	d1 1c       	adc	r13, r1
    12a2:	b7 01       	movw	r22, r14
    12a4:	c6 01       	movw	r24, r12
    12a6:	f8 d1       	rcall	.+1008   	; 0x1698 <strcat>
	topicString.cstring = main_sub_topic;
    12a8:	db aa       	std	Y+51, r13	; 0x33
    12aa:	ca aa       	std	Y+50, r12	; 0x32
	
	
	len += MQTTSerialize_publish((unsigned char *)(package + len), buflen - len, 0, 0, 0, 0, topicString, (unsigned char *)payload, payloadlen);
    12ac:	b2 01       	movw	r22, r4
    12ae:	66 19       	sub	r22, r6
    12b0:	77 09       	sbc	r23, r7
    12b2:	1f 93       	push	r17
    12b4:	0f 93       	push	r16
    12b6:	af 92       	push	r10
    12b8:	bf 92       	push	r11
    12ba:	8a a8       	ldd	r8, Y+50	; 0x32
    12bc:	9b a8       	ldd	r9, Y+51	; 0x33
    12be:	ac a8       	ldd	r10, Y+52	; 0x34
    12c0:	bd a8       	ldd	r11, Y+53	; 0x35
    12c2:	ce a8       	ldd	r12, Y+54	; 0x36
    12c4:	df a8       	ldd	r13, Y+55	; 0x37
    12c6:	e1 2c       	mov	r14, r1
    12c8:	f1 2c       	mov	r15, r1
    12ca:	00 e0       	ldi	r16, 0x00	; 0
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	40 e0       	ldi	r20, 0x00	; 0
    12d2:	c1 01       	movw	r24, r2
    12d4:	86 0d       	add	r24, r6
    12d6:	97 1d       	adc	r25, r7
    12d8:	ff de       	rcall	.-514    	; 0x10d8 <MQTTSerialize_publish>
    12da:	68 0e       	add	r6, r24
    12dc:	79 1e       	adc	r7, r25
		
	len += MQTTSerialize_disconnect((unsigned char *)(package + len), buflen - len);
    12de:	b2 01       	movw	r22, r4
    12e0:	66 19       	sub	r22, r6
    12e2:	77 09       	sbc	r23, r7
    12e4:	c1 01       	movw	r24, r2
    12e6:	86 0d       	add	r24, r6
    12e8:	97 1d       	adc	r25, r7
    12ea:	e3 dd       	rcall	.-1082   	; 0xeb2 <MQTTSerialize_disconnect>
	
	exit:
	
	//return 0;
	return len;
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
}
    12f4:	86 0d       	add	r24, r6
    12f6:	97 1d       	adc	r25, r7
    12f8:	ed 96       	adiw	r28, 0x3d	; 61
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	de bf       	out	0x3e, r29	; 62
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	cd bf       	out	0x3d, r28	; 61
    1304:	df 91       	pop	r29
    1306:	cf 91       	pop	r28
    1308:	1f 91       	pop	r17
    130a:	0f 91       	pop	r16
    130c:	ff 90       	pop	r15
    130e:	ef 90       	pop	r14
    1310:	df 90       	pop	r13
    1312:	cf 90       	pop	r12
    1314:	bf 90       	pop	r11
    1316:	af 90       	pop	r10
    1318:	9f 90       	pop	r9
    131a:	8f 90       	pop	r8
    131c:	7f 90       	pop	r7
    131e:	6f 90       	pop	r6
    1320:	5f 90       	pop	r5
    1322:	4f 90       	pop	r4
    1324:	3f 90       	pop	r3
    1326:	2f 90       	pop	r2
    1328:	08 95       	ret

0000132a <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    132a:	08 95       	ret

0000132c <__divsf3>:
    132c:	0c d0       	rcall	.+24     	; 0x1346 <__divsf3x>
    132e:	e6 c0       	rjmp	.+460    	; 0x14fc <__fp_round>
    1330:	de d0       	rcall	.+444    	; 0x14ee <__fp_pscB>
    1332:	40 f0       	brcs	.+16     	; 0x1344 <__divsf3+0x18>
    1334:	d5 d0       	rcall	.+426    	; 0x14e0 <__fp_pscA>
    1336:	30 f0       	brcs	.+12     	; 0x1344 <__divsf3+0x18>
    1338:	21 f4       	brne	.+8      	; 0x1342 <__divsf3+0x16>
    133a:	5f 3f       	cpi	r21, 0xFF	; 255
    133c:	19 f0       	breq	.+6      	; 0x1344 <__divsf3+0x18>
    133e:	c7 c0       	rjmp	.+398    	; 0x14ce <__fp_inf>
    1340:	51 11       	cpse	r21, r1
    1342:	10 c1       	rjmp	.+544    	; 0x1564 <__fp_szero>
    1344:	ca c0       	rjmp	.+404    	; 0x14da <__fp_nan>

00001346 <__divsf3x>:
    1346:	eb d0       	rcall	.+470    	; 0x151e <__fp_split3>
    1348:	98 f3       	brcs	.-26     	; 0x1330 <__divsf3+0x4>

0000134a <__divsf3_pse>:
    134a:	99 23       	and	r25, r25
    134c:	c9 f3       	breq	.-14     	; 0x1340 <__divsf3+0x14>
    134e:	55 23       	and	r21, r21
    1350:	b1 f3       	breq	.-20     	; 0x133e <__divsf3+0x12>
    1352:	95 1b       	sub	r25, r21
    1354:	55 0b       	sbc	r21, r21
    1356:	bb 27       	eor	r27, r27
    1358:	aa 27       	eor	r26, r26
    135a:	62 17       	cp	r22, r18
    135c:	73 07       	cpc	r23, r19
    135e:	84 07       	cpc	r24, r20
    1360:	38 f0       	brcs	.+14     	; 0x1370 <__divsf3_pse+0x26>
    1362:	9f 5f       	subi	r25, 0xFF	; 255
    1364:	5f 4f       	sbci	r21, 0xFF	; 255
    1366:	22 0f       	add	r18, r18
    1368:	33 1f       	adc	r19, r19
    136a:	44 1f       	adc	r20, r20
    136c:	aa 1f       	adc	r26, r26
    136e:	a9 f3       	breq	.-22     	; 0x135a <__divsf3_pse+0x10>
    1370:	33 d0       	rcall	.+102    	; 0x13d8 <__divsf3_pse+0x8e>
    1372:	0e 2e       	mov	r0, r30
    1374:	3a f0       	brmi	.+14     	; 0x1384 <__divsf3_pse+0x3a>
    1376:	e0 e8       	ldi	r30, 0x80	; 128
    1378:	30 d0       	rcall	.+96     	; 0x13da <__divsf3_pse+0x90>
    137a:	91 50       	subi	r25, 0x01	; 1
    137c:	50 40       	sbci	r21, 0x00	; 0
    137e:	e6 95       	lsr	r30
    1380:	00 1c       	adc	r0, r0
    1382:	ca f7       	brpl	.-14     	; 0x1376 <__divsf3_pse+0x2c>
    1384:	29 d0       	rcall	.+82     	; 0x13d8 <__divsf3_pse+0x8e>
    1386:	fe 2f       	mov	r31, r30
    1388:	27 d0       	rcall	.+78     	; 0x13d8 <__divsf3_pse+0x8e>
    138a:	66 0f       	add	r22, r22
    138c:	77 1f       	adc	r23, r23
    138e:	88 1f       	adc	r24, r24
    1390:	bb 1f       	adc	r27, r27
    1392:	26 17       	cp	r18, r22
    1394:	37 07       	cpc	r19, r23
    1396:	48 07       	cpc	r20, r24
    1398:	ab 07       	cpc	r26, r27
    139a:	b0 e8       	ldi	r27, 0x80	; 128
    139c:	09 f0       	breq	.+2      	; 0x13a0 <__divsf3_pse+0x56>
    139e:	bb 0b       	sbc	r27, r27
    13a0:	80 2d       	mov	r24, r0
    13a2:	bf 01       	movw	r22, r30
    13a4:	ff 27       	eor	r31, r31
    13a6:	93 58       	subi	r25, 0x83	; 131
    13a8:	5f 4f       	sbci	r21, 0xFF	; 255
    13aa:	2a f0       	brmi	.+10     	; 0x13b6 <__divsf3_pse+0x6c>
    13ac:	9e 3f       	cpi	r25, 0xFE	; 254
    13ae:	51 05       	cpc	r21, r1
    13b0:	68 f0       	brcs	.+26     	; 0x13cc <__divsf3_pse+0x82>
    13b2:	8d c0       	rjmp	.+282    	; 0x14ce <__fp_inf>
    13b4:	d7 c0       	rjmp	.+430    	; 0x1564 <__fp_szero>
    13b6:	5f 3f       	cpi	r21, 0xFF	; 255
    13b8:	ec f3       	brlt	.-6      	; 0x13b4 <__divsf3_pse+0x6a>
    13ba:	98 3e       	cpi	r25, 0xE8	; 232
    13bc:	dc f3       	brlt	.-10     	; 0x13b4 <__divsf3_pse+0x6a>
    13be:	86 95       	lsr	r24
    13c0:	77 95       	ror	r23
    13c2:	67 95       	ror	r22
    13c4:	b7 95       	ror	r27
    13c6:	f7 95       	ror	r31
    13c8:	9f 5f       	subi	r25, 0xFF	; 255
    13ca:	c9 f7       	brne	.-14     	; 0x13be <__divsf3_pse+0x74>
    13cc:	88 0f       	add	r24, r24
    13ce:	91 1d       	adc	r25, r1
    13d0:	96 95       	lsr	r25
    13d2:	87 95       	ror	r24
    13d4:	97 f9       	bld	r25, 7
    13d6:	08 95       	ret
    13d8:	e1 e0       	ldi	r30, 0x01	; 1
    13da:	66 0f       	add	r22, r22
    13dc:	77 1f       	adc	r23, r23
    13de:	88 1f       	adc	r24, r24
    13e0:	bb 1f       	adc	r27, r27
    13e2:	62 17       	cp	r22, r18
    13e4:	73 07       	cpc	r23, r19
    13e6:	84 07       	cpc	r24, r20
    13e8:	ba 07       	cpc	r27, r26
    13ea:	20 f0       	brcs	.+8      	; 0x13f4 <__divsf3_pse+0xaa>
    13ec:	62 1b       	sub	r22, r18
    13ee:	73 0b       	sbc	r23, r19
    13f0:	84 0b       	sbc	r24, r20
    13f2:	ba 0b       	sbc	r27, r26
    13f4:	ee 1f       	adc	r30, r30
    13f6:	88 f7       	brcc	.-30     	; 0x13da <__divsf3_pse+0x90>
    13f8:	e0 95       	com	r30
    13fa:	08 95       	ret

000013fc <__fixunssfsi>:
    13fc:	98 d0       	rcall	.+304    	; 0x152e <__fp_splitA>
    13fe:	88 f0       	brcs	.+34     	; 0x1422 <__fixunssfsi+0x26>
    1400:	9f 57       	subi	r25, 0x7F	; 127
    1402:	90 f0       	brcs	.+36     	; 0x1428 <__fixunssfsi+0x2c>
    1404:	b9 2f       	mov	r27, r25
    1406:	99 27       	eor	r25, r25
    1408:	b7 51       	subi	r27, 0x17	; 23
    140a:	a0 f0       	brcs	.+40     	; 0x1434 <__fixunssfsi+0x38>
    140c:	d1 f0       	breq	.+52     	; 0x1442 <__fixunssfsi+0x46>
    140e:	66 0f       	add	r22, r22
    1410:	77 1f       	adc	r23, r23
    1412:	88 1f       	adc	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	1a f0       	brmi	.+6      	; 0x141e <__fixunssfsi+0x22>
    1418:	ba 95       	dec	r27
    141a:	c9 f7       	brne	.-14     	; 0x140e <__fixunssfsi+0x12>
    141c:	12 c0       	rjmp	.+36     	; 0x1442 <__fixunssfsi+0x46>
    141e:	b1 30       	cpi	r27, 0x01	; 1
    1420:	81 f0       	breq	.+32     	; 0x1442 <__fixunssfsi+0x46>
    1422:	9f d0       	rcall	.+318    	; 0x1562 <__fp_zero>
    1424:	b1 e0       	ldi	r27, 0x01	; 1
    1426:	08 95       	ret
    1428:	9c c0       	rjmp	.+312    	; 0x1562 <__fp_zero>
    142a:	67 2f       	mov	r22, r23
    142c:	78 2f       	mov	r23, r24
    142e:	88 27       	eor	r24, r24
    1430:	b8 5f       	subi	r27, 0xF8	; 248
    1432:	39 f0       	breq	.+14     	; 0x1442 <__fixunssfsi+0x46>
    1434:	b9 3f       	cpi	r27, 0xF9	; 249
    1436:	cc f3       	brlt	.-14     	; 0x142a <__fixunssfsi+0x2e>
    1438:	86 95       	lsr	r24
    143a:	77 95       	ror	r23
    143c:	67 95       	ror	r22
    143e:	b3 95       	inc	r27
    1440:	d9 f7       	brne	.-10     	; 0x1438 <__fixunssfsi+0x3c>
    1442:	3e f4       	brtc	.+14     	; 0x1452 <__fixunssfsi+0x56>
    1444:	90 95       	com	r25
    1446:	80 95       	com	r24
    1448:	70 95       	com	r23
    144a:	61 95       	neg	r22
    144c:	7f 4f       	sbci	r23, 0xFF	; 255
    144e:	8f 4f       	sbci	r24, 0xFF	; 255
    1450:	9f 4f       	sbci	r25, 0xFF	; 255
    1452:	08 95       	ret

00001454 <__floatunsisf>:
    1454:	e8 94       	clt
    1456:	09 c0       	rjmp	.+18     	; 0x146a <__floatsisf+0x12>

00001458 <__floatsisf>:
    1458:	97 fb       	bst	r25, 7
    145a:	3e f4       	brtc	.+14     	; 0x146a <__floatsisf+0x12>
    145c:	90 95       	com	r25
    145e:	80 95       	com	r24
    1460:	70 95       	com	r23
    1462:	61 95       	neg	r22
    1464:	7f 4f       	sbci	r23, 0xFF	; 255
    1466:	8f 4f       	sbci	r24, 0xFF	; 255
    1468:	9f 4f       	sbci	r25, 0xFF	; 255
    146a:	99 23       	and	r25, r25
    146c:	a9 f0       	breq	.+42     	; 0x1498 <__floatsisf+0x40>
    146e:	f9 2f       	mov	r31, r25
    1470:	96 e9       	ldi	r25, 0x96	; 150
    1472:	bb 27       	eor	r27, r27
    1474:	93 95       	inc	r25
    1476:	f6 95       	lsr	r31
    1478:	87 95       	ror	r24
    147a:	77 95       	ror	r23
    147c:	67 95       	ror	r22
    147e:	b7 95       	ror	r27
    1480:	f1 11       	cpse	r31, r1
    1482:	f8 cf       	rjmp	.-16     	; 0x1474 <__floatsisf+0x1c>
    1484:	fa f4       	brpl	.+62     	; 0x14c4 <__floatsisf+0x6c>
    1486:	bb 0f       	add	r27, r27
    1488:	11 f4       	brne	.+4      	; 0x148e <__floatsisf+0x36>
    148a:	60 ff       	sbrs	r22, 0
    148c:	1b c0       	rjmp	.+54     	; 0x14c4 <__floatsisf+0x6c>
    148e:	6f 5f       	subi	r22, 0xFF	; 255
    1490:	7f 4f       	sbci	r23, 0xFF	; 255
    1492:	8f 4f       	sbci	r24, 0xFF	; 255
    1494:	9f 4f       	sbci	r25, 0xFF	; 255
    1496:	16 c0       	rjmp	.+44     	; 0x14c4 <__floatsisf+0x6c>
    1498:	88 23       	and	r24, r24
    149a:	11 f0       	breq	.+4      	; 0x14a0 <__floatsisf+0x48>
    149c:	96 e9       	ldi	r25, 0x96	; 150
    149e:	11 c0       	rjmp	.+34     	; 0x14c2 <__floatsisf+0x6a>
    14a0:	77 23       	and	r23, r23
    14a2:	21 f0       	breq	.+8      	; 0x14ac <__floatsisf+0x54>
    14a4:	9e e8       	ldi	r25, 0x8E	; 142
    14a6:	87 2f       	mov	r24, r23
    14a8:	76 2f       	mov	r23, r22
    14aa:	05 c0       	rjmp	.+10     	; 0x14b6 <__floatsisf+0x5e>
    14ac:	66 23       	and	r22, r22
    14ae:	71 f0       	breq	.+28     	; 0x14cc <__floatsisf+0x74>
    14b0:	96 e8       	ldi	r25, 0x86	; 134
    14b2:	86 2f       	mov	r24, r22
    14b4:	70 e0       	ldi	r23, 0x00	; 0
    14b6:	60 e0       	ldi	r22, 0x00	; 0
    14b8:	2a f0       	brmi	.+10     	; 0x14c4 <__floatsisf+0x6c>
    14ba:	9a 95       	dec	r25
    14bc:	66 0f       	add	r22, r22
    14be:	77 1f       	adc	r23, r23
    14c0:	88 1f       	adc	r24, r24
    14c2:	da f7       	brpl	.-10     	; 0x14ba <__floatsisf+0x62>
    14c4:	88 0f       	add	r24, r24
    14c6:	96 95       	lsr	r25
    14c8:	87 95       	ror	r24
    14ca:	97 f9       	bld	r25, 7
    14cc:	08 95       	ret

000014ce <__fp_inf>:
    14ce:	97 f9       	bld	r25, 7
    14d0:	9f 67       	ori	r25, 0x7F	; 127
    14d2:	80 e8       	ldi	r24, 0x80	; 128
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    14d6:	60 e0       	ldi	r22, 0x00	; 0
    14d8:	08 95       	ret

000014da <__fp_nan>:
    14da:	9f ef       	ldi	r25, 0xFF	; 255
    14dc:	80 ec       	ldi	r24, 0xC0	; 192
    14de:	08 95       	ret

000014e0 <__fp_pscA>:
    14e0:	00 24       	eor	r0, r0
    14e2:	0a 94       	dec	r0
    14e4:	16 16       	cp	r1, r22
    14e6:	17 06       	cpc	r1, r23
    14e8:	18 06       	cpc	r1, r24
    14ea:	09 06       	cpc	r0, r25
    14ec:	08 95       	ret

000014ee <__fp_pscB>:
    14ee:	00 24       	eor	r0, r0
    14f0:	0a 94       	dec	r0
    14f2:	12 16       	cp	r1, r18
    14f4:	13 06       	cpc	r1, r19
    14f6:	14 06       	cpc	r1, r20
    14f8:	05 06       	cpc	r0, r21
    14fa:	08 95       	ret

000014fc <__fp_round>:
    14fc:	09 2e       	mov	r0, r25
    14fe:	03 94       	inc	r0
    1500:	00 0c       	add	r0, r0
    1502:	11 f4       	brne	.+4      	; 0x1508 <__fp_round+0xc>
    1504:	88 23       	and	r24, r24
    1506:	52 f0       	brmi	.+20     	; 0x151c <__fp_round+0x20>
    1508:	bb 0f       	add	r27, r27
    150a:	40 f4       	brcc	.+16     	; 0x151c <__fp_round+0x20>
    150c:	bf 2b       	or	r27, r31
    150e:	11 f4       	brne	.+4      	; 0x1514 <__fp_round+0x18>
    1510:	60 ff       	sbrs	r22, 0
    1512:	04 c0       	rjmp	.+8      	; 0x151c <__fp_round+0x20>
    1514:	6f 5f       	subi	r22, 0xFF	; 255
    1516:	7f 4f       	sbci	r23, 0xFF	; 255
    1518:	8f 4f       	sbci	r24, 0xFF	; 255
    151a:	9f 4f       	sbci	r25, 0xFF	; 255
    151c:	08 95       	ret

0000151e <__fp_split3>:
    151e:	57 fd       	sbrc	r21, 7
    1520:	90 58       	subi	r25, 0x80	; 128
    1522:	44 0f       	add	r20, r20
    1524:	55 1f       	adc	r21, r21
    1526:	59 f0       	breq	.+22     	; 0x153e <__fp_splitA+0x10>
    1528:	5f 3f       	cpi	r21, 0xFF	; 255
    152a:	71 f0       	breq	.+28     	; 0x1548 <__fp_splitA+0x1a>
    152c:	47 95       	ror	r20

0000152e <__fp_splitA>:
    152e:	88 0f       	add	r24, r24
    1530:	97 fb       	bst	r25, 7
    1532:	99 1f       	adc	r25, r25
    1534:	61 f0       	breq	.+24     	; 0x154e <__fp_splitA+0x20>
    1536:	9f 3f       	cpi	r25, 0xFF	; 255
    1538:	79 f0       	breq	.+30     	; 0x1558 <__fp_splitA+0x2a>
    153a:	87 95       	ror	r24
    153c:	08 95       	ret
    153e:	12 16       	cp	r1, r18
    1540:	13 06       	cpc	r1, r19
    1542:	14 06       	cpc	r1, r20
    1544:	55 1f       	adc	r21, r21
    1546:	f2 cf       	rjmp	.-28     	; 0x152c <__fp_split3+0xe>
    1548:	46 95       	lsr	r20
    154a:	f1 df       	rcall	.-30     	; 0x152e <__fp_splitA>
    154c:	08 c0       	rjmp	.+16     	; 0x155e <__fp_splitA+0x30>
    154e:	16 16       	cp	r1, r22
    1550:	17 06       	cpc	r1, r23
    1552:	18 06       	cpc	r1, r24
    1554:	99 1f       	adc	r25, r25
    1556:	f1 cf       	rjmp	.-30     	; 0x153a <__fp_splitA+0xc>
    1558:	86 95       	lsr	r24
    155a:	71 05       	cpc	r23, r1
    155c:	61 05       	cpc	r22, r1
    155e:	08 94       	sec
    1560:	08 95       	ret

00001562 <__fp_zero>:
    1562:	e8 94       	clt

00001564 <__fp_szero>:
    1564:	bb 27       	eor	r27, r27
    1566:	66 27       	eor	r22, r22
    1568:	77 27       	eor	r23, r23
    156a:	cb 01       	movw	r24, r22
    156c:	97 f9       	bld	r25, 7
    156e:	08 95       	ret

00001570 <__mulsf3>:
    1570:	0b d0       	rcall	.+22     	; 0x1588 <__mulsf3x>
    1572:	c4 cf       	rjmp	.-120    	; 0x14fc <__fp_round>
    1574:	b5 df       	rcall	.-150    	; 0x14e0 <__fp_pscA>
    1576:	28 f0       	brcs	.+10     	; 0x1582 <__mulsf3+0x12>
    1578:	ba df       	rcall	.-140    	; 0x14ee <__fp_pscB>
    157a:	18 f0       	brcs	.+6      	; 0x1582 <__mulsf3+0x12>
    157c:	95 23       	and	r25, r21
    157e:	09 f0       	breq	.+2      	; 0x1582 <__mulsf3+0x12>
    1580:	a6 cf       	rjmp	.-180    	; 0x14ce <__fp_inf>
    1582:	ab cf       	rjmp	.-170    	; 0x14da <__fp_nan>
    1584:	11 24       	eor	r1, r1
    1586:	ee cf       	rjmp	.-36     	; 0x1564 <__fp_szero>

00001588 <__mulsf3x>:
    1588:	ca df       	rcall	.-108    	; 0x151e <__fp_split3>
    158a:	a0 f3       	brcs	.-24     	; 0x1574 <__mulsf3+0x4>

0000158c <__mulsf3_pse>:
    158c:	95 9f       	mul	r25, r21
    158e:	d1 f3       	breq	.-12     	; 0x1584 <__mulsf3+0x14>
    1590:	95 0f       	add	r25, r21
    1592:	50 e0       	ldi	r21, 0x00	; 0
    1594:	55 1f       	adc	r21, r21
    1596:	62 9f       	mul	r22, r18
    1598:	f0 01       	movw	r30, r0
    159a:	72 9f       	mul	r23, r18
    159c:	bb 27       	eor	r27, r27
    159e:	f0 0d       	add	r31, r0
    15a0:	b1 1d       	adc	r27, r1
    15a2:	63 9f       	mul	r22, r19
    15a4:	aa 27       	eor	r26, r26
    15a6:	f0 0d       	add	r31, r0
    15a8:	b1 1d       	adc	r27, r1
    15aa:	aa 1f       	adc	r26, r26
    15ac:	64 9f       	mul	r22, r20
    15ae:	66 27       	eor	r22, r22
    15b0:	b0 0d       	add	r27, r0
    15b2:	a1 1d       	adc	r26, r1
    15b4:	66 1f       	adc	r22, r22
    15b6:	82 9f       	mul	r24, r18
    15b8:	22 27       	eor	r18, r18
    15ba:	b0 0d       	add	r27, r0
    15bc:	a1 1d       	adc	r26, r1
    15be:	62 1f       	adc	r22, r18
    15c0:	73 9f       	mul	r23, r19
    15c2:	b0 0d       	add	r27, r0
    15c4:	a1 1d       	adc	r26, r1
    15c6:	62 1f       	adc	r22, r18
    15c8:	83 9f       	mul	r24, r19
    15ca:	a0 0d       	add	r26, r0
    15cc:	61 1d       	adc	r22, r1
    15ce:	22 1f       	adc	r18, r18
    15d0:	74 9f       	mul	r23, r20
    15d2:	33 27       	eor	r19, r19
    15d4:	a0 0d       	add	r26, r0
    15d6:	61 1d       	adc	r22, r1
    15d8:	23 1f       	adc	r18, r19
    15da:	84 9f       	mul	r24, r20
    15dc:	60 0d       	add	r22, r0
    15de:	21 1d       	adc	r18, r1
    15e0:	82 2f       	mov	r24, r18
    15e2:	76 2f       	mov	r23, r22
    15e4:	6a 2f       	mov	r22, r26
    15e6:	11 24       	eor	r1, r1
    15e8:	9f 57       	subi	r25, 0x7F	; 127
    15ea:	50 40       	sbci	r21, 0x00	; 0
    15ec:	8a f0       	brmi	.+34     	; 0x1610 <__mulsf3_pse+0x84>
    15ee:	e1 f0       	breq	.+56     	; 0x1628 <__mulsf3_pse+0x9c>
    15f0:	88 23       	and	r24, r24
    15f2:	4a f0       	brmi	.+18     	; 0x1606 <__mulsf3_pse+0x7a>
    15f4:	ee 0f       	add	r30, r30
    15f6:	ff 1f       	adc	r31, r31
    15f8:	bb 1f       	adc	r27, r27
    15fa:	66 1f       	adc	r22, r22
    15fc:	77 1f       	adc	r23, r23
    15fe:	88 1f       	adc	r24, r24
    1600:	91 50       	subi	r25, 0x01	; 1
    1602:	50 40       	sbci	r21, 0x00	; 0
    1604:	a9 f7       	brne	.-22     	; 0x15f0 <__mulsf3_pse+0x64>
    1606:	9e 3f       	cpi	r25, 0xFE	; 254
    1608:	51 05       	cpc	r21, r1
    160a:	70 f0       	brcs	.+28     	; 0x1628 <__mulsf3_pse+0x9c>
    160c:	60 cf       	rjmp	.-320    	; 0x14ce <__fp_inf>
    160e:	aa cf       	rjmp	.-172    	; 0x1564 <__fp_szero>
    1610:	5f 3f       	cpi	r21, 0xFF	; 255
    1612:	ec f3       	brlt	.-6      	; 0x160e <__mulsf3_pse+0x82>
    1614:	98 3e       	cpi	r25, 0xE8	; 232
    1616:	dc f3       	brlt	.-10     	; 0x160e <__mulsf3_pse+0x82>
    1618:	86 95       	lsr	r24
    161a:	77 95       	ror	r23
    161c:	67 95       	ror	r22
    161e:	b7 95       	ror	r27
    1620:	f7 95       	ror	r31
    1622:	e7 95       	ror	r30
    1624:	9f 5f       	subi	r25, 0xFF	; 255
    1626:	c1 f7       	brne	.-16     	; 0x1618 <__mulsf3_pse+0x8c>
    1628:	fe 2b       	or	r31, r30
    162a:	88 0f       	add	r24, r24
    162c:	91 1d       	adc	r25, r1
    162e:	96 95       	lsr	r25
    1630:	87 95       	ror	r24
    1632:	97 f9       	bld	r25, 7
    1634:	08 95       	ret

00001636 <__udivmodsi4>:
    1636:	a1 e2       	ldi	r26, 0x21	; 33
    1638:	1a 2e       	mov	r1, r26
    163a:	aa 1b       	sub	r26, r26
    163c:	bb 1b       	sub	r27, r27
    163e:	fd 01       	movw	r30, r26
    1640:	0d c0       	rjmp	.+26     	; 0x165c <__udivmodsi4_ep>

00001642 <__udivmodsi4_loop>:
    1642:	aa 1f       	adc	r26, r26
    1644:	bb 1f       	adc	r27, r27
    1646:	ee 1f       	adc	r30, r30
    1648:	ff 1f       	adc	r31, r31
    164a:	a2 17       	cp	r26, r18
    164c:	b3 07       	cpc	r27, r19
    164e:	e4 07       	cpc	r30, r20
    1650:	f5 07       	cpc	r31, r21
    1652:	20 f0       	brcs	.+8      	; 0x165c <__udivmodsi4_ep>
    1654:	a2 1b       	sub	r26, r18
    1656:	b3 0b       	sbc	r27, r19
    1658:	e4 0b       	sbc	r30, r20
    165a:	f5 0b       	sbc	r31, r21

0000165c <__udivmodsi4_ep>:
    165c:	66 1f       	adc	r22, r22
    165e:	77 1f       	adc	r23, r23
    1660:	88 1f       	adc	r24, r24
    1662:	99 1f       	adc	r25, r25
    1664:	1a 94       	dec	r1
    1666:	69 f7       	brne	.-38     	; 0x1642 <__udivmodsi4_loop>
    1668:	60 95       	com	r22
    166a:	70 95       	com	r23
    166c:	80 95       	com	r24
    166e:	90 95       	com	r25
    1670:	9b 01       	movw	r18, r22
    1672:	ac 01       	movw	r20, r24
    1674:	bd 01       	movw	r22, r26
    1676:	cf 01       	movw	r24, r30
    1678:	08 95       	ret

0000167a <__tablejump2__>:
    167a:	ee 0f       	add	r30, r30
    167c:	ff 1f       	adc	r31, r31
    167e:	05 90       	lpm	r0, Z+
    1680:	f4 91       	lpm	r31, Z
    1682:	e0 2d       	mov	r30, r0
    1684:	09 94       	ijmp

00001686 <memcpy>:
    1686:	fb 01       	movw	r30, r22
    1688:	dc 01       	movw	r26, r24
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <memcpy+0xa>
    168c:	01 90       	ld	r0, Z+
    168e:	0d 92       	st	X+, r0
    1690:	41 50       	subi	r20, 0x01	; 1
    1692:	50 40       	sbci	r21, 0x00	; 0
    1694:	d8 f7       	brcc	.-10     	; 0x168c <memcpy+0x6>
    1696:	08 95       	ret

00001698 <strcat>:
    1698:	fb 01       	movw	r30, r22
    169a:	dc 01       	movw	r26, r24
    169c:	0d 90       	ld	r0, X+
    169e:	00 20       	and	r0, r0
    16a0:	e9 f7       	brne	.-6      	; 0x169c <strcat+0x4>
    16a2:	11 97       	sbiw	r26, 0x01	; 1
    16a4:	01 90       	ld	r0, Z+
    16a6:	0d 92       	st	X+, r0
    16a8:	00 20       	and	r0, r0
    16aa:	e1 f7       	brne	.-8      	; 0x16a4 <strcat+0xc>
    16ac:	08 95       	ret

000016ae <strcpy>:
    16ae:	fb 01       	movw	r30, r22
    16b0:	dc 01       	movw	r26, r24
    16b2:	01 90       	ld	r0, Z+
    16b4:	0d 92       	st	X+, r0
    16b6:	00 20       	and	r0, r0
    16b8:	e1 f7       	brne	.-8      	; 0x16b2 <strcpy+0x4>
    16ba:	08 95       	ret

000016bc <strstr>:
    16bc:	fb 01       	movw	r30, r22
    16be:	51 91       	ld	r21, Z+
    16c0:	55 23       	and	r21, r21
    16c2:	a9 f0       	breq	.+42     	; 0x16ee <strstr+0x32>
    16c4:	bf 01       	movw	r22, r30
    16c6:	dc 01       	movw	r26, r24
    16c8:	4d 91       	ld	r20, X+
    16ca:	45 17       	cp	r20, r21
    16cc:	41 11       	cpse	r20, r1
    16ce:	e1 f7       	brne	.-8      	; 0x16c8 <strstr+0xc>
    16d0:	59 f4       	brne	.+22     	; 0x16e8 <strstr+0x2c>
    16d2:	cd 01       	movw	r24, r26
    16d4:	01 90       	ld	r0, Z+
    16d6:	00 20       	and	r0, r0
    16d8:	49 f0       	breq	.+18     	; 0x16ec <strstr+0x30>
    16da:	4d 91       	ld	r20, X+
    16dc:	40 15       	cp	r20, r0
    16de:	41 11       	cpse	r20, r1
    16e0:	c9 f3       	breq	.-14     	; 0x16d4 <strstr+0x18>
    16e2:	fb 01       	movw	r30, r22
    16e4:	41 11       	cpse	r20, r1
    16e6:	ef cf       	rjmp	.-34     	; 0x16c6 <strstr+0xa>
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	08 95       	ret

000016f0 <itoa>:
    16f0:	45 32       	cpi	r20, 0x25	; 37
    16f2:	51 05       	cpc	r21, r1
    16f4:	18 f4       	brcc	.+6      	; 0x16fc <itoa+0xc>
    16f6:	42 30       	cpi	r20, 0x02	; 2
    16f8:	08 f0       	brcs	.+2      	; 0x16fc <itoa+0xc>
    16fa:	04 c0       	rjmp	.+8      	; 0x1704 <__itoa_ncheck>
    16fc:	fb 01       	movw	r30, r22
    16fe:	10 82       	st	Z, r1
    1700:	cb 01       	movw	r24, r22
    1702:	08 95       	ret

00001704 <__itoa_ncheck>:
    1704:	bb 27       	eor	r27, r27
    1706:	4a 30       	cpi	r20, 0x0A	; 10
    1708:	31 f4       	brne	.+12     	; 0x1716 <__itoa_ncheck+0x12>
    170a:	99 23       	and	r25, r25
    170c:	22 f4       	brpl	.+8      	; 0x1716 <__itoa_ncheck+0x12>
    170e:	bd e2       	ldi	r27, 0x2D	; 45
    1710:	90 95       	com	r25
    1712:	81 95       	neg	r24
    1714:	9f 4f       	sbci	r25, 0xFF	; 255
    1716:	01 c0       	rjmp	.+2      	; 0x171a <__utoa_common>

00001718 <__utoa_ncheck>:
    1718:	bb 27       	eor	r27, r27

0000171a <__utoa_common>:
    171a:	fb 01       	movw	r30, r22
    171c:	55 27       	eor	r21, r21
    171e:	aa 27       	eor	r26, r26
    1720:	88 0f       	add	r24, r24
    1722:	99 1f       	adc	r25, r25
    1724:	aa 1f       	adc	r26, r26
    1726:	a4 17       	cp	r26, r20
    1728:	10 f0       	brcs	.+4      	; 0x172e <__utoa_common+0x14>
    172a:	a4 1b       	sub	r26, r20
    172c:	83 95       	inc	r24
    172e:	50 51       	subi	r21, 0x10	; 16
    1730:	b9 f7       	brne	.-18     	; 0x1720 <__utoa_common+0x6>
    1732:	a0 5d       	subi	r26, 0xD0	; 208
    1734:	aa 33       	cpi	r26, 0x3A	; 58
    1736:	08 f0       	brcs	.+2      	; 0x173a <__utoa_common+0x20>
    1738:	a9 5d       	subi	r26, 0xD9	; 217
    173a:	a1 93       	st	Z+, r26
    173c:	00 97       	sbiw	r24, 0x00	; 0
    173e:	79 f7       	brne	.-34     	; 0x171e <__utoa_common+0x4>
    1740:	b1 11       	cpse	r27, r1
    1742:	b1 93       	st	Z+, r27
    1744:	11 92       	st	Z+, r1
    1746:	cb 01       	movw	r24, r22
    1748:	00 c0       	rjmp	.+0      	; 0x174a <strrev>

0000174a <strrev>:
    174a:	dc 01       	movw	r26, r24
    174c:	fc 01       	movw	r30, r24
    174e:	67 2f       	mov	r22, r23
    1750:	71 91       	ld	r23, Z+
    1752:	77 23       	and	r23, r23
    1754:	e1 f7       	brne	.-8      	; 0x174e <strrev+0x4>
    1756:	32 97       	sbiw	r30, 0x02	; 2
    1758:	04 c0       	rjmp	.+8      	; 0x1762 <strrev+0x18>
    175a:	7c 91       	ld	r23, X
    175c:	6d 93       	st	X+, r22
    175e:	70 83       	st	Z, r23
    1760:	62 91       	ld	r22, -Z
    1762:	ae 17       	cp	r26, r30
    1764:	bf 07       	cpc	r27, r31
    1766:	c8 f3       	brcs	.-14     	; 0x175a <strrev+0x10>
    1768:	08 95       	ret

0000176a <_exit>:
    176a:	f8 94       	cli

0000176c <__stop_program>:
    176c:	ff cf       	rjmp	.-2      	; 0x176c <__stop_program>
