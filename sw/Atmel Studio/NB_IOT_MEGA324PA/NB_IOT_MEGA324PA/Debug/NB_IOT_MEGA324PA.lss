
NB_IOT_MEGA324PA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002b0  00800100  00001e2e  00001ec2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000015e  008003b0  008003b0  00002172  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002172  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f8  00000000  00000000  000021e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004c5a  00000000  00000000  000024dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000194e  00000000  00000000  00007136  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003761  00000000  00000000  00008a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000aec  00000000  00000000  0000c1e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00014eb2  00000000  00000000  0000ccd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003ec8  00000000  00000000  00021b86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000298  00000000  00000000  00025a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00005f66  00000000  00000000  00025ce6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8a c0       	rjmp	.+276    	; 0x116 <__ctors_end>
       2:	00 00       	nop
       4:	a4 c0       	rjmp	.+328    	; 0x14e <__bad_interrupt>
       6:	00 00       	nop
       8:	a2 c0       	rjmp	.+324    	; 0x14e <__bad_interrupt>
       a:	00 00       	nop
       c:	a0 c0       	rjmp	.+320    	; 0x14e <__bad_interrupt>
       e:	00 00       	nop
      10:	9e c0       	rjmp	.+316    	; 0x14e <__bad_interrupt>
      12:	00 00       	nop
      14:	9c c0       	rjmp	.+312    	; 0x14e <__bad_interrupt>
      16:	00 00       	nop
      18:	9a c0       	rjmp	.+308    	; 0x14e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	98 c0       	rjmp	.+304    	; 0x14e <__bad_interrupt>
      1e:	00 00       	nop
      20:	8a c5       	rjmp	.+2836   	; 0xb36 <__vector_8>
      22:	00 00       	nop
      24:	94 c0       	rjmp	.+296    	; 0x14e <__bad_interrupt>
      26:	00 00       	nop
      28:	92 c0       	rjmp	.+292    	; 0x14e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	90 c0       	rjmp	.+288    	; 0x14e <__bad_interrupt>
      2e:	00 00       	nop
      30:	8e c0       	rjmp	.+284    	; 0x14e <__bad_interrupt>
      32:	00 00       	nop
      34:	8c c0       	rjmp	.+280    	; 0x14e <__bad_interrupt>
      36:	00 00       	nop
      38:	8a c0       	rjmp	.+276    	; 0x14e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	88 c0       	rjmp	.+272    	; 0x14e <__bad_interrupt>
      3e:	00 00       	nop
      40:	86 c0       	rjmp	.+268    	; 0x14e <__bad_interrupt>
      42:	00 00       	nop
      44:	84 c0       	rjmp	.+264    	; 0x14e <__bad_interrupt>
      46:	00 00       	nop
      48:	82 c0       	rjmp	.+260    	; 0x14e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	80 c0       	rjmp	.+256    	; 0x14e <__bad_interrupt>
      4e:	00 00       	nop
      50:	36 c5       	rjmp	.+2668   	; 0xabe <__vector_20>
      52:	00 00       	nop
      54:	7c c0       	rjmp	.+248    	; 0x14e <__bad_interrupt>
      56:	00 00       	nop
      58:	7a c0       	rjmp	.+244    	; 0x14e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	78 c0       	rjmp	.+240    	; 0x14e <__bad_interrupt>
      5e:	00 00       	nop
      60:	76 c0       	rjmp	.+236    	; 0x14e <__bad_interrupt>
      62:	00 00       	nop
      64:	74 c0       	rjmp	.+232    	; 0x14e <__bad_interrupt>
      66:	00 00       	nop
      68:	72 c0       	rjmp	.+228    	; 0x14e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	70 c0       	rjmp	.+224    	; 0x14e <__bad_interrupt>
      6e:	00 00       	nop
      70:	6e c0       	rjmp	.+220    	; 0x14e <__bad_interrupt>
      72:	00 00       	nop
      74:	6c c0       	rjmp	.+216    	; 0x14e <__bad_interrupt>
      76:	00 00       	nop
      78:	6a c0       	rjmp	.+212    	; 0x14e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2e 06       	cpc	r2, r30
      7e:	32 06       	cpc	r3, r18
      80:	7f 06       	cpc	r7, r31
      82:	9b 06       	cpc	r9, r27
      84:	a2 06       	cpc	r10, r18
      86:	b2 06       	cpc	r11, r18
      88:	c2 06       	cpc	r12, r18
      8a:	f8 06       	cpc	r15, r24
      8c:	03 07       	cpc	r16, r19
      8e:	06 07       	cpc	r16, r22
      90:	0a 07       	cpc	r16, r26
      92:	0e 07       	cpc	r16, r30
      94:	07 63       	ori	r16, 0x37	; 55
      96:	42 36       	cpi	r20, 0x62	; 98
      98:	b7 9b       	sbis	0x16, 7	; 22
      9a:	d8 a7       	std	Y+40, r29	; 0x28
      9c:	1a 39       	cpi	r17, 0x9A	; 154
      9e:	68 56       	subi	r22, 0x68	; 104
      a0:	18 ae       	std	Y+56, r1	; 0x38
      a2:	ba ab       	std	Y+50, r27	; 0x32
      a4:	55 8c       	ldd	r5, Z+29	; 0x1d
      a6:	1d 3c       	cpi	r17, 0xCD	; 205
      a8:	b7 cc       	rjmp	.-1682   	; 0xfffffa18 <__eeprom_end+0xff7efa18>
      aa:	57 63       	ori	r21, 0x37	; 55
      ac:	bd 6d       	ori	r27, 0xDD	; 221
      ae:	ed fd       	.word	0xfded	; ????
      b0:	75 3e       	cpi	r23, 0xE5	; 229
      b2:	f6 17       	cp	r31, r22
      b4:	72 31       	cpi	r23, 0x12	; 18
      b6:	bf 00       	.word	0x00bf	; ????
      b8:	00 00       	nop
      ba:	80 3f       	cpi	r24, 0xF0	; 240
      bc:	08 00       	.word	0x0008	; ????
      be:	00 00       	nop
      c0:	be 92       	st	-X, r11
      c2:	24 49       	sbci	r18, 0x94	; 148
      c4:	12 3e       	cpi	r17, 0xE2	; 226
      c6:	ab aa       	std	Y+51, r10	; 0x33
      c8:	aa 2a       	or	r10, r26
      ca:	be cd       	rjmp	.-1156   	; 0xfffffc48 <__eeprom_end+0xff7efc48>
      cc:	cc cc       	rjmp	.-1640   	; 0xfffffa66 <__eeprom_end+0xff7efa66>
      ce:	4c 3e       	cpi	r20, 0xEC	; 236
      d0:	00 00       	nop
      d2:	00 80       	ld	r0, Z
      d4:	be ab       	std	Y+54, r27	; 0x36
      d6:	aa aa       	std	Y+50, r10	; 0x32
      d8:	aa 3e       	cpi	r26, 0xEA	; 234
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	bf 00       	.word	0x00bf	; ????
      e0:	00 00       	nop
      e2:	80 3f       	cpi	r24, 0xF0	; 240
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	00 08       	sbc	r0, r0
      ea:	41 78       	andi	r20, 0x81	; 129
      ec:	d3 bb       	out	0x13, r29	; 19
      ee:	43 87       	std	Z+11, r20	; 0x0b
      f0:	d1 13       	cpse	r29, r17
      f2:	3d 19       	sub	r19, r13
      f4:	0e 3c       	cpi	r16, 0xCE	; 206
      f6:	c3 bd       	out	0x23, r28	; 35
      f8:	42 82       	std	Z+2, r4	; 0x02
      fa:	ad 2b       	or	r26, r29
      fc:	3e 68       	ori	r19, 0x8E	; 142
      fe:	ec 82       	std	Y+4, r14	; 0x04
     100:	76 be       	out	0x36, r7	; 54
     102:	d9 8f       	std	Y+25, r29	; 0x19
     104:	e1 a9       	ldd	r30, Z+49	; 0x31
     106:	3e 4c       	sbci	r19, 0xCE	; 206
     108:	80 ef       	ldi	r24, 0xF0	; 240
     10a:	ff be       	out	0x3f, r15	; 63
     10c:	01 c4       	rjmp	.+2050   	; 0x910 <__stack+0x11>
     10e:	ff 7f       	andi	r31, 0xFF	; 255
     110:	3f 00       	.word	0x003f	; ????
     112:	00 00       	nop
	...

00000116 <__ctors_end>:
     116:	11 24       	eor	r1, r1
     118:	1f be       	out	0x3f, r1	; 63
     11a:	cf ef       	ldi	r28, 0xFF	; 255
     11c:	d8 e0       	ldi	r29, 0x08	; 8
     11e:	de bf       	out	0x3e, r29	; 62
     120:	cd bf       	out	0x3d, r28	; 61

00000122 <__do_copy_data>:
     122:	13 e0       	ldi	r17, 0x03	; 3
     124:	a0 e0       	ldi	r26, 0x00	; 0
     126:	b1 e0       	ldi	r27, 0x01	; 1
     128:	ee e2       	ldi	r30, 0x2E	; 46
     12a:	fe e1       	ldi	r31, 0x1E	; 30
     12c:	02 c0       	rjmp	.+4      	; 0x132 <__do_copy_data+0x10>
     12e:	05 90       	lpm	r0, Z+
     130:	0d 92       	st	X+, r0
     132:	a0 3b       	cpi	r26, 0xB0	; 176
     134:	b1 07       	cpc	r27, r17
     136:	d9 f7       	brne	.-10     	; 0x12e <__do_copy_data+0xc>

00000138 <__do_clear_bss>:
     138:	25 e0       	ldi	r18, 0x05	; 5
     13a:	a0 eb       	ldi	r26, 0xB0	; 176
     13c:	b3 e0       	ldi	r27, 0x03	; 3
     13e:	01 c0       	rjmp	.+2      	; 0x142 <.do_clear_bss_start>

00000140 <.do_clear_bss_loop>:
     140:	1d 92       	st	X+, r1

00000142 <.do_clear_bss_start>:
     142:	ae 30       	cpi	r26, 0x0E	; 14
     144:	b2 07       	cpc	r27, r18
     146:	e1 f7       	brne	.-8      	; 0x140 <.do_clear_bss_loop>
     148:	a7 d6       	rcall	.+3406   	; 0xe98 <main>
     14a:	0c 94 15 0f 	jmp	0x1e2a	; 0x1e2a <_exit>

0000014e <__bad_interrupt>:
     14e:	58 cf       	rjmp	.-336    	; 0x0 <__vectors>

00000150 <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	1f 92       	push	r1
     156:	cd b7       	in	r28, 0x3d	; 61
     158:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     15a:	9f b7       	in	r25, 0x3f	; 63
     15c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     15e:	f8 94       	cli
	return flags;
     160:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
     162:	82 30       	cpi	r24, 0x02	; 2
     164:	40 f4       	brcc	.+16     	; 0x176 <sysclk_enable_module+0x26>
		*(reg + port)  &= ~id;
     166:	e8 2f       	mov	r30, r24
     168:	f0 e0       	ldi	r31, 0x00	; 0
     16a:	ec 59       	subi	r30, 0x9C	; 156
     16c:	ff 4f       	sbci	r31, 0xFF	; 255
     16e:	60 95       	com	r22
     170:	80 81       	ld	r24, Z
     172:	68 23       	and	r22, r24
     174:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     176:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     178:	0f 90       	pop	r0
     17a:	df 91       	pop	r29
     17c:	cf 91       	pop	r28
     17e:	08 95       	ret

00000180 <usart_putchar>:
	}

	if (baud_offset != USART_BAUD_UNDEFINED) {
		usart->UBRR = baudctrl;
	}
}
     180:	fc 01       	movw	r30, r24
     182:	90 81       	ld	r25, Z
     184:	95 ff       	sbrs	r25, 5
     186:	fd cf       	rjmp	.-6      	; 0x182 <usart_putchar+0x2>
     188:	66 83       	std	Z+6, r22	; 0x06
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	08 95       	ret

0000018e <usart_getchar>:
     18e:	fc 01       	movw	r30, r24
     190:	90 81       	ld	r25, Z
     192:	99 23       	and	r25, r25
     194:	ec f7       	brge	.-6      	; 0x190 <usart_getchar+0x2>
     196:	86 81       	ldd	r24, Z+6	; 0x06
     198:	08 95       	ret

0000019a <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     19a:	4f 92       	push	r4
     19c:	5f 92       	push	r5
     19e:	6f 92       	push	r6
     1a0:	7f 92       	push	r7
     1a2:	8f 92       	push	r8
     1a4:	9f 92       	push	r9
     1a6:	af 92       	push	r10
     1a8:	bf 92       	push	r11
     1aa:	cf 92       	push	r12
     1ac:	df 92       	push	r13
     1ae:	ef 92       	push	r14
     1b0:	ff 92       	push	r15
     1b2:	0f 93       	push	r16
     1b4:	1f 93       	push	r17
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	ec 01       	movw	r28, r24
     1bc:	6a 01       	movw	r12, r20
     1be:	7b 01       	movw	r14, r22

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
     1c0:	28 01       	movw	r4, r16
     1c2:	39 01       	movw	r6, r18
     1c4:	68 94       	set
     1c6:	12 f8       	bld	r1, 2
     1c8:	76 94       	lsr	r7
     1ca:	67 94       	ror	r6
     1cc:	57 94       	ror	r5
     1ce:	47 94       	ror	r4
     1d0:	16 94       	lsr	r1
     1d2:	d1 f7       	brne	.-12     	; 0x1c8 <usart_set_baudrate+0x2e>
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;

	if (usart->UCSRnA & USART_U2X_bm) {
     1d4:	88 81       	ld	r24, Y
     1d6:	81 fd       	sbrc	r24, 1
     1d8:	0e c0       	rjmp	.+28     	; 0x1f6 <usart_set_baudrate+0x5c>
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;
     1da:	48 01       	movw	r8, r16
     1dc:	59 01       	movw	r10, r18
     1de:	07 2e       	mov	r0, r23
     1e0:	73 e1       	ldi	r23, 0x13	; 19
     1e2:	b6 94       	lsr	r11
     1e4:	a7 94       	ror	r10
     1e6:	97 94       	ror	r9
     1e8:	87 94       	ror	r8
     1ea:	7a 95       	dec	r23
     1ec:	d1 f7       	brne	.-12     	; 0x1e2 <usart_set_baudrate+0x48>
     1ee:	70 2d       	mov	r23, r0

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
     1f0:	d3 01       	movw	r26, r6
     1f2:	c2 01       	movw	r24, r4
     1f4:	15 c0       	rjmp	.+42     	; 0x220 <usart_set_baudrate+0x86>
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;

	if (usart->UCSRnA & USART_U2X_bm) {
		max_rate /= 2;
     1f6:	d9 01       	movw	r26, r18
     1f8:	c8 01       	movw	r24, r16
     1fa:	68 94       	set
     1fc:	13 f8       	bld	r1, 3
     1fe:	b6 95       	lsr	r27
     200:	a7 95       	ror	r26
     202:	97 95       	ror	r25
     204:	87 95       	ror	r24
     206:	16 94       	lsr	r1
     208:	d1 f7       	brne	.-12     	; 0x1fe <usart_set_baudrate+0x64>
		min_rate /= 2;
     20a:	48 01       	movw	r8, r16
     20c:	59 01       	movw	r10, r18
     20e:	07 2e       	mov	r0, r23
     210:	74 e1       	ldi	r23, 0x14	; 20
     212:	b6 94       	lsr	r11
     214:	a7 94       	ror	r10
     216:	97 94       	ror	r9
     218:	87 94       	ror	r8
     21a:	7a 95       	dec	r23
     21c:	d1 f7       	brne	.-12     	; 0x212 <usart_set_baudrate+0x78>
     21e:	70 2d       	mov	r23, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     220:	8c 15       	cp	r24, r12
     222:	9d 05       	cpc	r25, r13
     224:	ae 05       	cpc	r26, r14
     226:	bf 05       	cpc	r27, r15
     228:	78 f1       	brcs	.+94     	; 0x288 <usart_set_baudrate+0xee>
     22a:	c8 14       	cp	r12, r8
     22c:	d9 04       	cpc	r13, r9
     22e:	ea 04       	cpc	r14, r10
     230:	fb 04       	cpc	r15, r11
     232:	60 f1       	brcs	.+88     	; 0x28c <usart_set_baudrate+0xf2>
		return false;
	}

	/* Check if double speed is enabled. */
	if (usart->UCSRnA & USART_U2X_bm) {
     234:	88 81       	ld	r24, Y
     236:	81 ff       	sbrs	r24, 1
     238:	10 c0       	rjmp	.+32     	; 0x25a <usart_set_baudrate+0xc0>
		baud *= 2;
		ubrr = (uint32_t)(cpu_hz / 8 / baud) - 1;
     23a:	a7 01       	movw	r20, r14
     23c:	96 01       	movw	r18, r12
     23e:	22 0f       	add	r18, r18
     240:	33 1f       	adc	r19, r19
     242:	44 1f       	adc	r20, r20
     244:	55 1f       	adc	r21, r21
     246:	c3 01       	movw	r24, r6
     248:	b2 01       	movw	r22, r4
     24a:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__udivmodsi4>
     24e:	da 01       	movw	r26, r20
     250:	c9 01       	movw	r24, r18
     252:	01 97       	sbiw	r24, 0x01	; 1
     254:	a1 09       	sbc	r26, r1
     256:	b1 09       	sbc	r27, r1
     258:	13 c0       	rjmp	.+38     	; 0x280 <usart_set_baudrate+0xe6>
	} else {
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
     25a:	c9 01       	movw	r24, r18
     25c:	b8 01       	movw	r22, r16
     25e:	68 94       	set
     260:	13 f8       	bld	r1, 3
     262:	96 95       	lsr	r25
     264:	87 95       	ror	r24
     266:	77 95       	ror	r23
     268:	67 95       	ror	r22
     26a:	16 94       	lsr	r1
     26c:	d1 f7       	brne	.-12     	; 0x262 <usart_set_baudrate+0xc8>
     26e:	a7 01       	movw	r20, r14
     270:	96 01       	movw	r18, r12
     272:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__udivmodsi4>
     276:	da 01       	movw	r26, r20
     278:	c9 01       	movw	r24, r18
     27a:	01 97       	sbiw	r24, 0x01	; 1
     27c:	a1 09       	sbc	r26, r1
     27e:	b1 09       	sbc	r27, r1
	}

	usart->UBRR = ubrr;
     280:	9d 83       	std	Y+5, r25	; 0x05
     282:	8c 83       	std	Y+4, r24	; 0x04
	return true;
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	03 c0       	rjmp	.+6      	; 0x28e <usart_set_baudrate+0xf4>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	01 c0       	rjmp	.+2      	; 0x28e <usart_set_baudrate+0xf4>
     28c:	80 e0       	ldi	r24, 0x00	; 0
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
	}

	usart->UBRR = ubrr;
	return true;
}
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	1f 91       	pop	r17
     294:	0f 91       	pop	r16
     296:	ff 90       	pop	r15
     298:	ef 90       	pop	r14
     29a:	df 90       	pop	r13
     29c:	cf 90       	pop	r12
     29e:	bf 90       	pop	r11
     2a0:	af 90       	pop	r10
     2a2:	9f 90       	pop	r9
     2a4:	8f 90       	pop	r8
     2a6:	7f 90       	pop	r7
     2a8:	6f 90       	pop	r6
     2aa:	5f 90       	pop	r5
     2ac:	4f 90       	pop	r4
     2ae:	08 95       	ret

000002b0 <usart_init_rs232>:
 *
 * \retval true if the initialization was successful
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     2b0:	0f 93       	push	r16
     2b2:	1f 93       	push	r17
     2b4:	cf 93       	push	r28
     2b6:	df 93       	push	r29
     2b8:	ec 01       	movw	r28, r24
     2ba:	8b 01       	movw	r16, r22
 * \brief usart Pointer to an USART module.
 */
static inline void usart_enable_module_clock(USART_t *usart)
{
#ifdef USART0
	if ((uintptr_t)usart == (uintptr_t)&UCSR0A) {
     2bc:	80 3c       	cpi	r24, 0xC0	; 192
     2be:	91 05       	cpc	r25, r1
     2c0:	19 f4       	brne	.+6      	; 0x2c8 <usart_init_rs232+0x18>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
     2c2:	62 e0       	ldi	r22, 0x02	; 2
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	44 df       	rcall	.-376    	; 0x150 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_UMSEL01_gm)) | usartmode;
     2c8:	8a 81       	ldd	r24, Y+2	; 0x02
     2ca:	8f 73       	andi	r24, 0x3F	; 63
     2cc:	8a 83       	std	Y+2, r24	; 0x02
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
	bool result;
	usart_enable_module_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
     2ce:	f8 01       	movw	r30, r16
     2d0:	26 81       	ldd	r18, Z+6	; 0x06
     2d2:	35 81       	ldd	r19, Z+5	; 0x05
     2d4:	84 81       	ldd	r24, Z+4	; 0x04
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->UCSRnC
		= ((usart)->UCSRnC &
     2d6:	9a 81       	ldd	r25, Y+2	; 0x02
     2d8:	48 2f       	mov	r20, r24
     2da:	43 70       	andi	r20, 0x03	; 3
     2dc:	44 0f       	add	r20, r20
     2de:	99 7f       	andi	r25, 0xF9	; 249
     2e0:	94 2b       	or	r25, r20
     2e2:	9a 83       	std	Y+2, r25	; 0x02
			(~USART_CHSIZE01C_gm)) | ((charSize & 0x03)
			<< USART_CHSIZE01C_gp);
	(usart)->UCSRnB
		= ((usart)->UCSRnB &
     2e4:	99 81       	ldd	r25, Y+1	; 0x01
     2e6:	84 70       	andi	r24, 0x04	; 4
     2e8:	88 0f       	add	r24, r24
     2ea:	88 0f       	add	r24, r24
     2ec:	9b 7f       	andi	r25, 0xFB	; 251
     2ee:	89 2b       	or	r24, r25
     2f0:	89 83       	std	Y+1, r24	; 0x01
			(~USART_CHSIZE2_bm)) | ((charSize & 0x04)
			<< USART_CHSIZE2_bp);

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_PMODE_gm)) | parityMode;
     2f2:	8a 81       	ldd	r24, Y+2	; 0x02
     2f4:	8f 7c       	andi	r24, 0xCF	; 207
     2f6:	83 2b       	or	r24, r19
     2f8:	8a 83       	std	Y+2, r24	; 0x02

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_STOPB_bm)) | (twoStopBits
     2fa:	9a 81       	ldd	r25, Y+2	; 0x02
     2fc:	97 7f       	andi	r25, 0xF7	; 247
     2fe:	82 2f       	mov	r24, r18
     300:	88 0f       	add	r24, r24
     302:	88 0f       	add	r24, r24
     304:	88 0f       	add	r24, r24
     306:	89 2b       	or	r24, r25
     308:	8a 83       	std	Y+2, r24	; 0x02
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate,
     30a:	40 81       	ld	r20, Z
     30c:	51 81       	ldd	r21, Z+1	; 0x01
     30e:	62 81       	ldd	r22, Z+2	; 0x02
     310:	73 81       	ldd	r23, Z+3	; 0x03
     312:	00 e4       	ldi	r16, 0x40	; 64
     314:	12 e4       	ldi	r17, 0x42	; 66
     316:	2f e0       	ldi	r18, 0x0F	; 15
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	ce 01       	movw	r24, r28
     31c:	3e df       	rcall	.-388    	; 0x19a <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_TXEN_bm;
     31e:	99 81       	ldd	r25, Y+1	; 0x01
     320:	98 60       	ori	r25, 0x08	; 8
     322:	99 83       	std	Y+1, r25	; 0x01
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_RXEN_bm;
     324:	99 81       	ldd	r25, Y+1	; 0x01
     326:	90 61       	ori	r25, 0x10	; 16
     328:	99 83       	std	Y+1, r25	; 0x01
			sysclk_get_source_clock_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	return result;
}
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	1f 91       	pop	r17
     330:	0f 91       	pop	r16
     332:	08 95       	ret

00000334 <loadcell_min_max_tran>:
 *  Author: jan.rune.herheim
 */ 

#include "loadcell_logger.h"

uint8_t loadcell_min_max_tran(uint16_t current_value, uint16_t *data_array) {
     334:	fb 01       	movw	r30, r22
	
	//find tran
	signed int tran = 0; //could go positive and negative, and could store a 15 bits number, hence enough for our 12 bits results.
	uint16_t tran_abs = 0;
	
	tran = current_value - *(data_array + POSITION_PREV); //tran = current - previous
     336:	22 81       	ldd	r18, Z+2	; 0x02
     338:	33 81       	ldd	r19, Z+3	; 0x03
     33a:	ac 01       	movw	r20, r24
     33c:	42 1b       	sub	r20, r18
     33e:	53 0b       	sbc	r21, r19
     340:	9a 01       	movw	r18, r20
	if ((abs(tran) > abs(*(data_array+POSITION_TRAN_MAX))) & (*(data_array+POSITION_ACCU_CNT) > 0)) //first step is not valid due to only one value.
     342:	22 f4       	brpl	.+8      	; 0x34c <loadcell_min_max_tran+0x18>
     344:	44 27       	eor	r20, r20
     346:	55 27       	eor	r21, r21
     348:	42 1b       	sub	r20, r18
     34a:	53 0b       	sbc	r21, r19
     34c:	62 85       	ldd	r22, Z+10	; 0x0a
     34e:	73 85       	ldd	r23, Z+11	; 0x0b
     350:	77 23       	and	r23, r23
     352:	1c f4       	brge	.+6      	; 0x35a <loadcell_min_max_tran+0x26>
     354:	71 95       	neg	r23
     356:	61 95       	neg	r22
     358:	71 09       	sbc	r23, r1
     35a:	a1 e0       	ldi	r26, 0x01	; 1
     35c:	64 17       	cp	r22, r20
     35e:	75 07       	cpc	r23, r21
     360:	0c f0       	brlt	.+2      	; 0x364 <loadcell_min_max_tran+0x30>
     362:	a0 e0       	ldi	r26, 0x00	; 0
     364:	aa 23       	and	r26, r26
     366:	a1 f0       	breq	.+40     	; 0x390 <loadcell_min_max_tran+0x5c>
     368:	61 e0       	ldi	r22, 0x01	; 1
     36a:	a2 89       	ldd	r26, Z+18	; 0x12
     36c:	b3 89       	ldd	r27, Z+19	; 0x13
     36e:	ab 2b       	or	r26, r27
     370:	09 f4       	brne	.+2      	; 0x374 <loadcell_min_max_tran+0x40>
     372:	60 e0       	ldi	r22, 0x00	; 0
     374:	66 23       	and	r22, r22
     376:	61 f0       	breq	.+24     	; 0x390 <loadcell_min_max_tran+0x5c>
	{
		if (tran < 0)
     378:	33 23       	and	r19, r19
     37a:	44 f4       	brge	.+16     	; 0x38c <loadcell_min_max_tran+0x58>
		{
			tran_abs = abs(tran); //check if >2047, if yes this is the max limit that could be transferred.
     37c:	9a 01       	movw	r18, r20
			if (tran_abs >= 0x7ff) //if yes the set to max value
     37e:	2f 3f       	cpi	r18, 0xFF	; 255
     380:	57 e0       	ldi	r21, 0x07	; 7
     382:	35 07       	cpc	r19, r21
     384:	10 f0       	brcs	.+4      	; 0x38a <loadcell_min_max_tran+0x56>
			{
				tran_abs = 0x7ff;
     386:	2f ef       	ldi	r18, 0xFF	; 255
     388:	37 e0       	ldi	r19, 0x07	; 7
			}
			tran_abs |= (1<<11); //flip the MSB of the 12 bits word to set the negative sign.
			tran = tran_abs;
     38a:	38 60       	ori	r19, 0x08	; 8
		}
		
		*(data_array+POSITION_TRAN_MAX) = tran; //store new tran max.
     38c:	33 87       	std	Z+11, r19	; 0x0b
     38e:	22 87       	std	Z+10, r18	; 0x0a
	}
	
	//find min and max
	if (current_value < *(data_array+POSITION_MIN))
     390:	26 81       	ldd	r18, Z+6	; 0x06
     392:	37 81       	ldd	r19, Z+7	; 0x07
     394:	82 17       	cp	r24, r18
     396:	93 07       	cpc	r25, r19
     398:	10 f4       	brcc	.+4      	; 0x39e <loadcell_min_max_tran+0x6a>
	{
		*(data_array+POSITION_MIN) = current_value; //store new min value.
     39a:	97 83       	std	Z+7, r25	; 0x07
     39c:	86 83       	std	Z+6, r24	; 0x06
	}
	if (current_value > *(data_array+POSITION_MAX))
     39e:	20 85       	ldd	r18, Z+8	; 0x08
     3a0:	31 85       	ldd	r19, Z+9	; 0x09
     3a2:	28 17       	cp	r18, r24
     3a4:	39 07       	cpc	r19, r25
     3a6:	10 f4       	brcc	.+4      	; 0x3ac <loadcell_min_max_tran+0x78>
	{
		*(data_array+POSITION_MAX) = current_value; //Store new max.
     3a8:	91 87       	std	Z+9, r25	; 0x09
     3aa:	80 87       	std	Z+8, r24	; 0x08
	}
}
     3ac:	08 95       	ret

000003ae <__portable_avr_delay_cycles>:
	wdt_reset();
	//rtc_init_period(2); //using RTC as sampler timer.
	//wdt_enable(9);
	rtc_init_period(1);
	//sleep_enable();
}
     3ae:	04 c0       	rjmp	.+8      	; 0x3b8 <__portable_avr_delay_cycles+0xa>
     3b0:	61 50       	subi	r22, 0x01	; 1
     3b2:	71 09       	sbc	r23, r1
     3b4:	81 09       	sbc	r24, r1
     3b6:	91 09       	sbc	r25, r1
     3b8:	61 15       	cp	r22, r1
     3ba:	71 05       	cpc	r23, r1
     3bc:	81 05       	cpc	r24, r1
     3be:	91 05       	cpc	r25, r1
     3c0:	b9 f7       	brne	.-18     	; 0x3b0 <__portable_avr_delay_cycles+0x2>
     3c2:	08 95       	ret

000003c4 <usart_tx_at>:
     3c4:	0f 93       	push	r16
     3c6:	1f 93       	push	r17
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	eb 01       	movw	r28, r22
     3ce:	68 81       	ld	r22, Y
     3d0:	66 23       	and	r22, r22
     3d2:	39 f0       	breq	.+14     	; 0x3e2 <usart_tx_at+0x1e>
     3d4:	8c 01       	movw	r16, r24
     3d6:	21 96       	adiw	r28, 0x01	; 1
     3d8:	c8 01       	movw	r24, r16
     3da:	d2 de       	rcall	.-604    	; 0x180 <usart_putchar>
     3dc:	69 91       	ld	r22, Y+
     3de:	61 11       	cpse	r22, r1
     3e0:	fb cf       	rjmp	.-10     	; 0x3d8 <usart_tx_at+0x14>
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	1f 91       	pop	r17
     3e8:	0f 91       	pop	r16
     3ea:	08 95       	ret

000003ec <reset_tx_data>:
     3ec:	44 23       	and	r20, r20
     3ee:	61 f0       	breq	.+24     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3f0:	a6 2f       	mov	r26, r22
     3f2:	b7 2f       	mov	r27, r23
     3f4:	e8 2f       	mov	r30, r24
     3f6:	f9 2f       	mov	r31, r25
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	2d 91       	ld	r18, X+
     3fc:	3d 91       	ld	r19, X+
     3fe:	21 93       	st	Z+, r18
     400:	31 93       	st	Z+, r19
     402:	8f 5f       	subi	r24, 0xFF	; 255
     404:	48 13       	cpse	r20, r24
     406:	f9 cf       	rjmp	.-14     	; 0x3fa <reset_tx_data+0xe>
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	08 95       	ret

0000040c <reset_char_array>:
     40c:	66 23       	and	r22, r22
     40e:	59 f0       	breq	.+22     	; 0x426 <reset_char_array+0x1a>
     410:	fc 01       	movw	r30, r24
     412:	61 50       	subi	r22, 0x01	; 1
     414:	70 e0       	ldi	r23, 0x00	; 0
     416:	6f 5f       	subi	r22, 0xFF	; 255
     418:	7f 4f       	sbci	r23, 0xFF	; 255
     41a:	86 0f       	add	r24, r22
     41c:	97 1f       	adc	r25, r23
     41e:	11 92       	st	Z+, r1
     420:	e8 17       	cp	r30, r24
     422:	f9 07       	cpc	r31, r25
     424:	e1 f7       	brne	.-8      	; 0x41e <reset_char_array+0x12>
     426:	08 95       	ret

00000428 <reset_all_data>:
     428:	41 e0       	ldi	r20, 0x01	; 1
     42a:	65 ee       	ldi	r22, 0xE5	; 229
     42c:	72 e0       	ldi	r23, 0x02	; 2
     42e:	8c e0       	ldi	r24, 0x0C	; 12
     430:	95 e0       	ldi	r25, 0x05	; 5
     432:	dc df       	rcall	.-72     	; 0x3ec <reset_tx_data>
     434:	64 e6       	ldi	r22, 0x64	; 100
     436:	86 e1       	ldi	r24, 0x16	; 22
     438:	94 e0       	ldi	r25, 0x04	; 4
     43a:	e8 df       	rcall	.-48     	; 0x40c <reset_char_array>
     43c:	64 e6       	ldi	r22, 0x64	; 100
     43e:	82 eb       	ldi	r24, 0xB2	; 178
     440:	93 e0       	ldi	r25, 0x03	; 3
     442:	e4 cf       	rjmp	.-56     	; 0x40c <reset_char_array>
     444:	08 95       	ret

00000446 <rtc_init_period>:
     446:	14 be       	out	0x34, r1	; 52
     448:	e0 e6       	ldi	r30, 0x60	; 96
     44a:	f0 e0       	ldi	r31, 0x00	; 0
     44c:	88 e1       	ldi	r24, 0x18	; 24
     44e:	80 83       	st	Z, r24
     450:	86 e4       	ldi	r24, 0x46	; 70
     452:	80 83       	st	Z, r24
     454:	08 95       	ret

00000456 <loadcell_pins_init>:
     456:	56 9a       	sbi	0x0a, 6	; 10
     458:	5e 98       	cbi	0x0b, 6	; 11
     45a:	08 95       	ret

0000045c <radio_pins_init>:
     45c:	54 9a       	sbi	0x0a, 4	; 10
     45e:	55 98       	cbi	0x0a, 5	; 10
     460:	08 95       	ret

00000462 <my_delay_10ms>:
     462:	cf 93       	push	r28
     464:	88 23       	and	r24, r24
     466:	41 f0       	breq	.+16     	; 0x478 <my_delay_10ms+0x16>
     468:	c8 2f       	mov	r28, r24
     46a:	63 e8       	ldi	r22, 0x83	; 131
     46c:	76 e0       	ldi	r23, 0x06	; 6
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	9d df       	rcall	.-198    	; 0x3ae <__portable_avr_delay_cycles>
     474:	c1 50       	subi	r28, 0x01	; 1
     476:	c9 f7       	brne	.-14     	; 0x46a <my_delay_10ms+0x8>
     478:	cf 91       	pop	r28
     47a:	08 95       	ret

0000047c <loadcell_power_on>:
     47c:	5e 9a       	sbi	0x0b, 6	; 11
     47e:	63 e8       	ldi	r22, 0x83	; 131
     480:	76 e0       	ldi	r23, 0x06	; 6
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	93 cf       	rjmp	.-218    	; 0x3ae <__portable_avr_delay_cycles>
     488:	08 95       	ret

0000048a <loadcell_power_off>:
     48a:	5e 98       	cbi	0x0b, 6	; 11
     48c:	08 95       	ret

0000048e <radio_power_on>:
     48e:	1f 93       	push	r17
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	5c 98       	cbi	0x0b, 4	; 11
     496:	67 ea       	ldi	r22, 0xA7	; 167
     498:	70 e0       	ldi	r23, 0x00	; 0
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	87 df       	rcall	.-242    	; 0x3ae <__portable_avr_delay_cycles>
     4a0:	5c 9a       	sbi	0x0b, 4	; 11
     4a2:	6b e1       	ldi	r22, 0x1B	; 27
     4a4:	71 e4       	ldi	r23, 0x41	; 65
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	81 df       	rcall	.-254    	; 0x3ae <__portable_avr_delay_cycles>
     4ac:	5c 98       	cbi	0x0b, 4	; 11
     4ae:	6b e0       	ldi	r22, 0x0B	; 11
     4b0:	7b e8       	ldi	r23, 0x8B	; 139
     4b2:	82 e0       	ldi	r24, 0x02	; 2
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	7b df       	rcall	.-266    	; 0x3ae <__portable_avr_delay_cycles>
     4b8:	5c 9a       	sbi	0x0b, 4	; 11
     4ba:	4d 99       	sbic	0x09, 5	; 9
     4bc:	16 c0       	rjmp	.+44     	; 0x4ea <radio_power_on+0x5c>
     4be:	c0 e0       	ldi	r28, 0x00	; 0
     4c0:	d1 e0       	ldi	r29, 0x01	; 1
     4c2:	10 e0       	ldi	r17, 0x00	; 0
     4c4:	66 e3       	ldi	r22, 0x36	; 54
     4c6:	72 e8       	ldi	r23, 0x82	; 130
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	70 df       	rcall	.-288    	; 0x3ae <__portable_avr_delay_cycles>
     4ce:	cf 5f       	subi	r28, 0xFF	; 255
     4d0:	89 b1       	in	r24, 0x09	; 9
     4d2:	85 fb       	bst	r24, 5
     4d4:	88 27       	eor	r24, r24
     4d6:	80 f9       	bld	r24, 0
     4d8:	8d 17       	cp	r24, r29
     4da:	41 f0       	breq	.+16     	; 0x4ec <radio_power_on+0x5e>
     4dc:	8d 2f       	mov	r24, r29
     4de:	cb 31       	cpi	r28, 0x1B	; 27
     4e0:	08 f0       	brcs	.+2      	; 0x4e4 <radio_power_on+0x56>
     4e2:	81 2f       	mov	r24, r17
     4e4:	81 11       	cpse	r24, r1
     4e6:	ee cf       	rjmp	.-36     	; 0x4c4 <radio_power_on+0x36>
     4e8:	01 c0       	rjmp	.+2      	; 0x4ec <radio_power_on+0x5e>
     4ea:	c0 e0       	ldi	r28, 0x00	; 0
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	cb 31       	cpi	r28, 0x1B	; 27
     4f0:	09 f0       	breq	.+2      	; 0x4f4 <radio_power_on+0x66>
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	1f 91       	pop	r17
     4fa:	08 95       	ret

000004fc <radio_power_off_at>:
     4fc:	1f 93       	push	r17
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	4d 9b       	sbis	0x09, 5	; 9
     504:	2f c0       	rjmp	.+94     	; 0x564 <radio_power_off_at+0x68>
     506:	c0 e0       	ldi	r28, 0x00	; 0
     508:	d1 e0       	ldi	r29, 0x01	; 1
     50a:	10 e0       	ldi	r17, 0x00	; 0
     50c:	6a e3       	ldi	r22, 0x3A	; 58
     50e:	71 e0       	ldi	r23, 0x01	; 1
     510:	88 ec       	ldi	r24, 0xC8	; 200
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	57 df       	rcall	.-338    	; 0x3c4 <usart_tx_at>
     516:	6a e3       	ldi	r22, 0x3A	; 58
     518:	71 e0       	ldi	r23, 0x01	; 1
     51a:	80 ec       	ldi	r24, 0xC0	; 192
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	52 df       	rcall	.-348    	; 0x3c4 <usart_tx_at>
     520:	5c 98       	cbi	0x0b, 4	; 11
     522:	6b e2       	ldi	r22, 0x2B	; 43
     524:	7c e2       	ldi	r23, 0x2C	; 44
     526:	8a e0       	ldi	r24, 0x0A	; 10
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	41 df       	rcall	.-382    	; 0x3ae <__portable_avr_delay_cycles>
     52c:	4d 9b       	sbis	0x09, 5	; 9
     52e:	10 c0       	rjmp	.+32     	; 0x550 <radio_power_off_at+0x54>
     530:	66 e4       	ldi	r22, 0x46	; 70
     532:	71 e0       	ldi	r23, 0x01	; 1
     534:	88 ec       	ldi	r24, 0xC8	; 200
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	45 df       	rcall	.-374    	; 0x3c4 <usart_tx_at>
     53a:	66 e4       	ldi	r22, 0x46	; 70
     53c:	71 e0       	ldi	r23, 0x01	; 1
     53e:	80 ec       	ldi	r24, 0xC0	; 192
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	40 df       	rcall	.-384    	; 0x3c4 <usart_tx_at>
     544:	5c 98       	cbi	0x0b, 4	; 11
     546:	61 e4       	ldi	r22, 0x41	; 65
     548:	72 e4       	ldi	r23, 0x42	; 66
     54a:	8f e0       	ldi	r24, 0x0F	; 15
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	2f df       	rcall	.-418    	; 0x3ae <__portable_avr_delay_cycles>
     550:	cf 5f       	subi	r28, 0xFF	; 255
     552:	4d 9b       	sbis	0x09, 5	; 9
     554:	08 c0       	rjmp	.+16     	; 0x566 <radio_power_off_at+0x6a>
     556:	8d 2f       	mov	r24, r29
     558:	cb 31       	cpi	r28, 0x1B	; 27
     55a:	08 f0       	brcs	.+2      	; 0x55e <radio_power_off_at+0x62>
     55c:	81 2f       	mov	r24, r17
     55e:	81 11       	cpse	r24, r1
     560:	d5 cf       	rjmp	.-86     	; 0x50c <radio_power_off_at+0x10>
     562:	01 c0       	rjmp	.+2      	; 0x566 <radio_power_off_at+0x6a>
     564:	c0 e0       	ldi	r28, 0x00	; 0
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	cb 31       	cpi	r28, 0x1B	; 27
     56a:	09 f0       	breq	.+2      	; 0x56e <radio_power_off_at+0x72>
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	1f 91       	pop	r17
     574:	08 95       	ret

00000576 <adc_result_average>:
     576:	6f 92       	push	r6
     578:	7f 92       	push	r7
     57a:	8f 92       	push	r8
     57c:	9f 92       	push	r9
     57e:	af 92       	push	r10
     580:	bf 92       	push	r11
     582:	cf 92       	push	r12
     584:	df 92       	push	r13
     586:	ef 92       	push	r14
     588:	ff 92       	push	r15
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	cd b7       	in	r28, 0x3d	; 61
     594:	de b7       	in	r29, 0x3e	; 62
     596:	0d b7       	in	r16, 0x3d	; 61
     598:	1e b7       	in	r17, 0x3e	; 62
     59a:	46 2f       	mov	r20, r22
     59c:	50 e0       	ldi	r21, 0x00	; 0
     59e:	44 0f       	add	r20, r20
     5a0:	55 1f       	adc	r21, r21
     5a2:	2d b7       	in	r18, 0x3d	; 61
     5a4:	3e b7       	in	r19, 0x3e	; 62
     5a6:	24 1b       	sub	r18, r20
     5a8:	35 0b       	sbc	r19, r21
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	f8 94       	cli
     5ae:	3e bf       	out	0x3e, r19	; 62
     5b0:	0f be       	out	0x3f, r0	; 63
     5b2:	2d bf       	out	0x3d, r18	; 61
     5b4:	ad b7       	in	r26, 0x3d	; 61
     5b6:	be b7       	in	r27, 0x3e	; 62
     5b8:	11 96       	adiw	r26, 0x01	; 1
     5ba:	e4 e6       	ldi	r30, 0x64	; 100
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	90 81       	ld	r25, Z
     5c0:	9e 7f       	andi	r25, 0xFE	; 254
     5c2:	90 83       	st	Z, r25
     5c4:	97 e8       	ldi	r25, 0x87	; 135
     5c6:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     5ca:	66 23       	and	r22, r22
     5cc:	49 f1       	breq	.+82     	; 0x620 <adc_result_average+0xaa>
     5ce:	3d 01       	movw	r6, r26
     5d0:	81 2c       	mov	r8, r1
     5d2:	91 2c       	mov	r9, r1
     5d4:	54 01       	movw	r10, r8
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	0f 2e       	mov	r0, r31
     5da:	fc e7       	ldi	r31, 0x7C	; 124
     5dc:	cf 2e       	mov	r12, r31
     5de:	d1 2c       	mov	r13, r1
     5e0:	f0 2d       	mov	r31, r0
     5e2:	80 64       	ori	r24, 0x40	; 64
     5e4:	ea e7       	ldi	r30, 0x7A	; 122
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	0f 2e       	mov	r0, r31
     5ea:	f8 e7       	ldi	r31, 0x78	; 120
     5ec:	ef 2e       	mov	r14, r31
     5ee:	f1 2c       	mov	r15, r1
     5f0:	f0 2d       	mov	r31, r0
     5f2:	d6 01       	movw	r26, r12
     5f4:	8c 93       	st	X, r24
     5f6:	90 81       	ld	r25, Z
     5f8:	90 64       	ori	r25, 0x40	; 64
     5fa:	90 83       	st	Z, r25
     5fc:	90 81       	ld	r25, Z
     5fe:	96 fd       	sbrc	r25, 6
     600:	fd cf       	rjmp	.-6      	; 0x5fc <adc_result_average+0x86>
     602:	d7 01       	movw	r26, r14
     604:	4d 91       	ld	r20, X+
     606:	5c 91       	ld	r21, X
     608:	d3 01       	movw	r26, r6
     60a:	4d 93       	st	X+, r20
     60c:	5d 93       	st	X+, r21
     60e:	3d 01       	movw	r6, r26
     610:	84 0e       	add	r8, r20
     612:	95 1e       	adc	r9, r21
     614:	a1 1c       	adc	r10, r1
     616:	b1 1c       	adc	r11, r1
     618:	3f 5f       	subi	r19, 0xFF	; 255
     61a:	63 13       	cpse	r22, r19
     61c:	ea cf       	rjmp	.-44     	; 0x5f2 <adc_result_average+0x7c>
     61e:	03 c0       	rjmp	.+6      	; 0x626 <adc_result_average+0xb0>
     620:	81 2c       	mov	r8, r1
     622:	91 2c       	mov	r9, r1
     624:	54 01       	movw	r10, r8
     626:	26 2f       	mov	r18, r22
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	40 e0       	ldi	r20, 0x00	; 0
     62c:	50 e0       	ldi	r21, 0x00	; 0
     62e:	c5 01       	movw	r24, r10
     630:	b4 01       	movw	r22, r8
     632:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__udivmodsi4>
     636:	c9 01       	movw	r24, r18
     638:	0f b6       	in	r0, 0x3f	; 63
     63a:	f8 94       	cli
     63c:	1e bf       	out	0x3e, r17	; 62
     63e:	0f be       	out	0x3f, r0	; 63
     640:	0d bf       	out	0x3d, r16	; 61
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	1f 91       	pop	r17
     648:	0f 91       	pop	r16
     64a:	ff 90       	pop	r15
     64c:	ef 90       	pop	r14
     64e:	df 90       	pop	r13
     650:	cf 90       	pop	r12
     652:	bf 90       	pop	r11
     654:	af 90       	pop	r10
     656:	9f 90       	pop	r9
     658:	8f 90       	pop	r8
     65a:	7f 90       	pop	r7
     65c:	6f 90       	pop	r6
     65e:	08 95       	ret

00000660 <at_get_radio_network_time>:
     660:	ef 92       	push	r14
     662:	ff 92       	push	r15
     664:	0f 93       	push	r16
     666:	1f 93       	push	r17
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	00 d0       	rcall	.+0      	; 0x66e <at_get_radio_network_time+0xe>
     66e:	1f 92       	push	r1
     670:	cd b7       	in	r28, 0x3d	; 61
     672:	de b7       	in	r29, 0x3e	; 62
     674:	1a 82       	std	Y+2, r1	; 0x02
     676:	19 82       	std	Y+1, r1	; 0x01
     678:	1b 82       	std	Y+3, r1	; 0x03
     67a:	0f 2e       	mov	r0, r31
     67c:	ff e9       	ldi	r31, 0x9F	; 159
     67e:	ef 2e       	mov	r14, r31
     680:	f4 e0       	ldi	r31, 0x04	; 4
     682:	ff 2e       	mov	r15, r31
     684:	f0 2d       	mov	r31, r0
     686:	0a e0       	ldi	r16, 0x0A	; 10
     688:	10 e0       	ldi	r17, 0x00	; 0
     68a:	f7 01       	movw	r30, r14
     68c:	31 97       	sbiw	r30, 0x01	; 1
     68e:	80 81       	ld	r24, Z
     690:	89 83       	std	Y+1, r24	; 0x01
     692:	f7 01       	movw	r30, r14
     694:	80 81       	ld	r24, Z
     696:	8a 83       	std	Y+2, r24	; 0x02
     698:	ce 01       	movw	r24, r28
     69a:	01 96       	adiw	r24, 0x01	; 1
     69c:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <atoi>
     6a0:	f8 01       	movw	r30, r16
     6a2:	ee 0f       	add	r30, r30
     6a4:	ff 1f       	adc	r31, r31
     6a6:	e4 5f       	subi	r30, 0xF4	; 244
     6a8:	fa 4f       	sbci	r31, 0xFA	; 250
     6aa:	91 83       	std	Z+1, r25	; 0x01
     6ac:	80 83       	st	Z, r24
     6ae:	f3 e0       	ldi	r31, 0x03	; 3
     6b0:	ef 0e       	add	r14, r31
     6b2:	f1 1c       	adc	r15, r1
     6b4:	0f 5f       	subi	r16, 0xFF	; 255
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	00 31       	cpi	r16, 0x10	; 16
     6ba:	11 05       	cpc	r17, r1
     6bc:	31 f7       	brne	.-52     	; 0x68a <at_get_radio_network_time+0x2a>
     6be:	0f 90       	pop	r0
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	1f 91       	pop	r17
     6ca:	0f 91       	pop	r16
     6cc:	ff 90       	pop	r15
     6ce:	ef 90       	pop	r14
     6d0:	08 95       	ret

000006d2 <tx_at_response>:
     6d2:	0f 93       	push	r16
     6d4:	1f 93       	push	r17
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	ec 01       	movw	r28, r24
     6dc:	88 85       	ldd	r24, Y+8	; 0x08
     6de:	88 23       	and	r24, r24
     6e0:	09 f4       	brne	.+2      	; 0x6e4 <tx_at_response+0x12>
     6e2:	63 c0       	rjmp	.+198    	; 0x7aa <tx_at_response+0xd8>
     6e4:	10 e0       	ldi	r17, 0x00	; 0
     6e6:	00 e0       	ldi	r16, 0x00	; 0
     6e8:	60 e8       	ldi	r22, 0x80	; 128
     6ea:	8c e8       	ldi	r24, 0x8C	; 140
     6ec:	94 e0       	ldi	r25, 0x04	; 4
     6ee:	8e de       	rcall	.-740    	; 0x40c <reset_char_array>
     6f0:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <response_counter>
     6f4:	8c 81       	ldd	r24, Y+4	; 0x04
     6f6:	9d 81       	ldd	r25, Y+5	; 0x05
     6f8:	ae 81       	ldd	r26, Y+6	; 0x06
     6fa:	bf 81       	ldd	r27, Y+7	; 0x07
     6fc:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <response_timeout>
     700:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <response_timeout+0x1>
     704:	a0 93 85 04 	sts	0x0485, r26	; 0x800485 <response_timeout+0x2>
     708:	b0 93 86 04 	sts	0x0486, r27	; 0x800486 <response_timeout+0x3>
     70c:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <response_timeout_counter>
     710:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <response_timeout_counter+0x1>
     714:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <response_timeout_counter+0x2>
     718:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <response_timeout_counter+0x3>
     71c:	68 81       	ld	r22, Y
     71e:	79 81       	ldd	r23, Y+1	; 0x01
     720:	80 ec       	ldi	r24, 0xC0	; 192
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	4f de       	rcall	.-866    	; 0x3c4 <usart_tx_at>
     726:	78 94       	sei
     728:	e0 ec       	ldi	r30, 0xC0	; 192
     72a:	f0 e0       	ldi	r31, 0x00	; 0
     72c:	81 81       	ldd	r24, Z+1	; 0x01
     72e:	80 68       	ori	r24, 0x80	; 128
     730:	81 83       	std	Z+1, r24	; 0x01
     732:	1e c0       	rjmp	.+60     	; 0x770 <tx_at_response+0x9e>
     734:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <response_timeout_counter>
     738:	90 91 80 04 	lds	r25, 0x0480	; 0x800480 <response_timeout_counter+0x1>
     73c:	a0 91 81 04 	lds	r26, 0x0481	; 0x800481 <response_timeout_counter+0x2>
     740:	b0 91 82 04 	lds	r27, 0x0482	; 0x800482 <response_timeout_counter+0x3>
     744:	01 96       	adiw	r24, 0x01	; 1
     746:	a1 1d       	adc	r26, r1
     748:	b1 1d       	adc	r27, r1
     74a:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <response_timeout_counter>
     74e:	90 93 80 04 	sts	0x0480, r25	; 0x800480 <response_timeout_counter+0x1>
     752:	a0 93 81 04 	sts	0x0481, r26	; 0x800481 <response_timeout_counter+0x2>
     756:	b0 93 82 04 	sts	0x0482, r27	; 0x800482 <response_timeout_counter+0x3>
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	82 de       	rcall	.-764    	; 0x462 <my_delay_10ms>
     75e:	6a 81       	ldd	r22, Y+2	; 0x02
     760:	7b 81       	ldd	r23, Y+3	; 0x03
     762:	8c e8       	ldi	r24, 0x8C	; 140
     764:	94 e0       	ldi	r25, 0x04	; 4
     766:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <strstr>
     76a:	01 e0       	ldi	r16, 0x01	; 1
     76c:	89 2b       	or	r24, r25
     76e:	f9 f4       	brne	.+62     	; 0x7ae <tx_at_response+0xdc>
     770:	40 91 7f 04 	lds	r20, 0x047F	; 0x80047f <response_timeout_counter>
     774:	50 91 80 04 	lds	r21, 0x0480	; 0x800480 <response_timeout_counter+0x1>
     778:	60 91 81 04 	lds	r22, 0x0481	; 0x800481 <response_timeout_counter+0x2>
     77c:	70 91 82 04 	lds	r23, 0x0482	; 0x800482 <response_timeout_counter+0x3>
     780:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <response_timeout>
     784:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <response_timeout+0x1>
     788:	a0 91 85 04 	lds	r26, 0x0485	; 0x800485 <response_timeout+0x2>
     78c:	b0 91 86 04 	lds	r27, 0x0486	; 0x800486 <response_timeout+0x3>
     790:	48 17       	cp	r20, r24
     792:	59 07       	cpc	r21, r25
     794:	6a 07       	cpc	r22, r26
     796:	7b 07       	cpc	r23, r27
     798:	68 f2       	brcs	.-102    	; 0x734 <tx_at_response+0x62>
     79a:	8e e1       	ldi	r24, 0x1E	; 30
     79c:	62 de       	rcall	.-828    	; 0x462 <my_delay_10ms>
     79e:	1f 5f       	subi	r17, 0xFF	; 255
     7a0:	88 85       	ldd	r24, Y+8	; 0x08
     7a2:	18 17       	cp	r17, r24
     7a4:	08 f4       	brcc	.+2      	; 0x7a8 <tx_at_response+0xd6>
     7a6:	a0 cf       	rjmp	.-192    	; 0x6e8 <tx_at_response+0x16>
     7a8:	03 c0       	rjmp	.+6      	; 0x7b0 <tx_at_response+0xde>
     7aa:	00 e0       	ldi	r16, 0x00	; 0
     7ac:	01 c0       	rjmp	.+2      	; 0x7b0 <tx_at_response+0xde>
     7ae:	00 e0       	ldi	r16, 0x00	; 0
     7b0:	e0 ec       	ldi	r30, 0xC0	; 192
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	81 81       	ldd	r24, Z+1	; 0x01
     7b6:	8f 77       	andi	r24, 0x7F	; 127
     7b8:	81 83       	std	Z+1, r24	; 0x01
     7ba:	6c e8       	ldi	r22, 0x8C	; 140
     7bc:	74 e0       	ldi	r23, 0x04	; 4
     7be:	88 ec       	ldi	r24, 0xC8	; 200
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	00 de       	rcall	.-1024   	; 0x3c4 <usart_tx_at>
     7c4:	80 2f       	mov	r24, r16
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	08 95       	ret

000007d0 <data_to_char>:
     7d0:	2f 92       	push	r2
     7d2:	3f 92       	push	r3
     7d4:	4f 92       	push	r4
     7d6:	5f 92       	push	r5
     7d8:	6f 92       	push	r6
     7da:	7f 92       	push	r7
     7dc:	8f 92       	push	r8
     7de:	9f 92       	push	r9
     7e0:	af 92       	push	r10
     7e2:	bf 92       	push	r11
     7e4:	cf 92       	push	r12
     7e6:	df 92       	push	r13
     7e8:	ef 92       	push	r14
     7ea:	ff 92       	push	r15
     7ec:	0f 93       	push	r16
     7ee:	1f 93       	push	r17
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	cd b7       	in	r28, 0x3d	; 61
     7f6:	de b7       	in	r29, 0x3e	; 62
     7f8:	63 97       	sbiw	r28, 0x13	; 19
     7fa:	0f b6       	in	r0, 0x3f	; 63
     7fc:	f8 94       	cli
     7fe:	de bf       	out	0x3e, r29	; 62
     800:	0f be       	out	0x3f, r0	; 63
     802:	cd bf       	out	0x3d, r28	; 61
     804:	9f 87       	std	Y+15, r25	; 0x0f
     806:	8e 87       	std	Y+14, r24	; 0x0e
     808:	3f 83       	std	Y+7, r19	; 0x07
     80a:	2e 83       	std	Y+6, r18	; 0x06
     80c:	1a 82       	std	Y+2, r1	; 0x02
     80e:	19 82       	std	Y+1, r1	; 0x01
     810:	fe 01       	movw	r30, r28
     812:	33 96       	adiw	r30, 0x03	; 3
     814:	83 e0       	ldi	r24, 0x03	; 3
     816:	df 01       	movw	r26, r30
     818:	1d 92       	st	X+, r1
     81a:	8a 95       	dec	r24
     81c:	e9 f7       	brne	.-6      	; 0x818 <data_to_char+0x48>
     81e:	e6 2e       	mov	r14, r22
     820:	f1 2c       	mov	r15, r1
     822:	f7 01       	movw	r30, r14
     824:	31 97       	sbiw	r30, 0x01	; 1
     826:	fb 8b       	std	Y+19, r31	; 0x13
     828:	ea 8b       	std	Y+18, r30	; 0x12
     82a:	e9 70       	andi	r30, 0x09	; 9
     82c:	ff 27       	eor	r31, r31
     82e:	f9 8b       	std	Y+17, r31	; 0x11
     830:	e8 8b       	std	Y+16, r30	; 0x10
     832:	10 e0       	ldi	r17, 0x00	; 0
     834:	0f 2e       	mov	r0, r31
     836:	f0 e3       	ldi	r31, 0x30	; 48
     838:	cf 2e       	mov	r12, r31
     83a:	d1 2c       	mov	r13, r1
     83c:	f0 2d       	mov	r31, r0
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	9f 81       	ldd	r25, Y+7	; 0x07
     842:	09 2e       	mov	r0, r25
     844:	00 0c       	add	r0, r0
     846:	aa 0b       	sbc	r26, r26
     848:	bb 0b       	sbc	r27, r27
     84a:	88 87       	std	Y+8, r24	; 0x08
     84c:	99 87       	std	Y+9, r25	; 0x09
     84e:	aa 87       	std	Y+10, r26	; 0x0a
     850:	bb 87       	std	Y+11, r27	; 0x0b
     852:	5d 87       	std	Y+13, r21	; 0x0d
     854:	4c 87       	std	Y+12, r20	; 0x0c
     856:	31 2e       	mov	r3, r17
     858:	47 c0       	rjmp	.+142    	; 0x8e8 <data_to_char+0x118>
     85a:	68 85       	ldd	r22, Y+8	; 0x08
     85c:	79 85       	ldd	r23, Y+9	; 0x09
     85e:	8a 85       	ldd	r24, Y+10	; 0x0a
     860:	9b 85       	ldd	r25, Y+11	; 0x0b
     862:	db d6       	rcall	.+3510   	; 0x161a <__floatsisf>
     864:	2b 01       	movw	r4, r22
     866:	3c 01       	movw	r6, r24
     868:	b8 01       	movw	r22, r16
     86a:	01 2e       	mov	r0, r17
     86c:	00 0c       	add	r0, r0
     86e:	88 0b       	sbc	r24, r24
     870:	99 0b       	sbc	r25, r25
     872:	d3 d6       	rcall	.+3494   	; 0x161a <__floatsisf>
     874:	9b 01       	movw	r18, r22
     876:	ac 01       	movw	r20, r24
     878:	c3 01       	movw	r24, r6
     87a:	b2 01       	movw	r22, r4
     87c:	31 d7       	rcall	.+3682   	; 0x16e0 <pow>
     87e:	4b 01       	movw	r8, r22
     880:	5c 01       	movw	r10, r24
     882:	d7 01       	movw	r26, r14
     884:	6d 91       	ld	r22, X+
     886:	7c 91       	ld	r23, X
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	c4 d6       	rcall	.+3464   	; 0x1616 <__floatunsisf>
     88e:	a5 01       	movw	r20, r10
     890:	94 01       	movw	r18, r8
     892:	bd d6       	rcall	.+3450   	; 0x160e <__cmpsf2>
     894:	88 23       	and	r24, r24
     896:	44 f4       	brge	.+16     	; 0x8a8 <data_to_char+0xd8>
     898:	ec 85       	ldd	r30, Y+12	; 0x0c
     89a:	fd 85       	ldd	r31, Y+13	; 0x0d
     89c:	01 90       	ld	r0, Z+
     89e:	00 20       	and	r0, r0
     8a0:	e9 f7       	brne	.-6      	; 0x89c <data_to_char+0xcc>
     8a2:	31 97       	sbiw	r30, 0x01	; 1
     8a4:	d1 82       	std	Z+1, r13	; 0x01
     8a6:	c0 82       	st	Z, r12
     8a8:	01 50       	subi	r16, 0x01	; 1
     8aa:	11 09       	sbc	r17, r1
     8ac:	b1 f6       	brne	.-84     	; 0x85a <data_to_char+0x8a>
     8ae:	4e 81       	ldd	r20, Y+6	; 0x06
     8b0:	5f 81       	ldd	r21, Y+7	; 0x07
     8b2:	be 01       	movw	r22, r28
     8b4:	6f 5f       	subi	r22, 0xFF	; 255
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	f7 01       	movw	r30, r14
     8ba:	80 81       	ld	r24, Z
     8bc:	91 81       	ldd	r25, Z+1	; 0x01
     8be:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <itoa>
     8c2:	be 01       	movw	r22, r28
     8c4:	6f 5f       	subi	r22, 0xFF	; 255
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	8c 85       	ldd	r24, Y+12	; 0x0c
     8ca:	9d 85       	ldd	r25, Y+13	; 0x0d
     8cc:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <strcat>
     8d0:	65 e0       	ldi	r22, 0x05	; 5
     8d2:	ce 01       	movw	r24, r28
     8d4:	01 96       	adiw	r24, 0x01	; 1
     8d6:	9a dd       	rcall	.-1228   	; 0x40c <reset_char_array>
     8d8:	33 94       	inc	r3
     8da:	83 2d       	mov	r24, r3
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	28 89       	ldd	r18, Y+16	; 0x10
     8e0:	39 89       	ldd	r19, Y+17	; 0x11
     8e2:	28 17       	cp	r18, r24
     8e4:	39 07       	cpc	r19, r25
     8e6:	5c f0       	brlt	.+22     	; 0x8fe <data_to_char+0x12e>
     8e8:	e3 2c       	mov	r14, r3
     8ea:	f1 2c       	mov	r15, r1
     8ec:	ee 0c       	add	r14, r14
     8ee:	ff 1c       	adc	r15, r15
     8f0:	8e 85       	ldd	r24, Y+14	; 0x0e
     8f2:	9f 85       	ldd	r25, Y+15	; 0x0f
     8f4:	e8 0e       	add	r14, r24
     8f6:	f9 1e       	adc	r15, r25
     8f8:	03 e0       	ldi	r16, 0x03	; 3
     8fa:	10 e0       	ldi	r17, 0x00	; 0
     8fc:	ae cf       	rjmp	.-164    	; 0x85a <data_to_char+0x8a>
     8fe:	2c 84       	ldd	r2, Y+12	; 0x0c
     900:	3d 84       	ldd	r3, Y+13	; 0x0d
     902:	ea 88       	ldd	r14, Y+18	; 0x12
     904:	fb 88       	ldd	r15, Y+19	; 0x13
     906:	90 e1       	ldi	r25, 0x10	; 16
     908:	e9 22       	and	r14, r25
     90a:	ff 24       	eor	r15, r15
     90c:	aa e0       	ldi	r26, 0x0A	; 10
     90e:	ea 16       	cp	r14, r26
     910:	f1 04       	cpc	r15, r1
     912:	54 f5       	brge	.+84     	; 0x968 <__stack+0x69>
     914:	4f c0       	rjmp	.+158    	; 0x9b4 <__stack+0xb5>
     916:	f1 01       	movw	r30, r2
     918:	01 90       	ld	r0, Z+
     91a:	00 20       	and	r0, r0
     91c:	e9 f7       	brne	.-6      	; 0x918 <__stack+0x19>
     91e:	31 97       	sbiw	r30, 0x01	; 1
     920:	b1 82       	std	Z+1, r11	; 0x01
     922:	a0 82       	st	Z, r10
     924:	4e 81       	ldd	r20, Y+6	; 0x06
     926:	5f 81       	ldd	r21, Y+7	; 0x07
     928:	be 01       	movw	r22, r28
     92a:	6f 5f       	subi	r22, 0xFF	; 255
     92c:	7f 4f       	sbci	r23, 0xFF	; 255
     92e:	f4 01       	movw	r30, r8
     930:	80 81       	ld	r24, Z
     932:	91 81       	ldd	r25, Z+1	; 0x01
     934:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <itoa>
     938:	be 01       	movw	r22, r28
     93a:	6f 5f       	subi	r22, 0xFF	; 255
     93c:	7f 4f       	sbci	r23, 0xFF	; 255
     93e:	c1 01       	movw	r24, r2
     940:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <strcat>
     944:	f1 01       	movw	r30, r2
     946:	01 90       	ld	r0, Z+
     948:	00 20       	and	r0, r0
     94a:	e9 f7       	brne	.-6      	; 0x946 <__stack+0x47>
     94c:	31 97       	sbiw	r30, 0x01	; 1
     94e:	d1 82       	std	Z+1, r13	; 0x01
     950:	c0 82       	st	Z, r12
     952:	65 e0       	ldi	r22, 0x05	; 5
     954:	ce 01       	movw	r24, r28
     956:	01 96       	adiw	r24, 0x01	; 1
     958:	59 dd       	rcall	.-1358   	; 0x40c <reset_char_array>
     95a:	1f 5f       	subi	r17, 0xFF	; 255
     95c:	81 2f       	mov	r24, r17
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	e8 16       	cp	r14, r24
     962:	f9 06       	cpc	r15, r25
     964:	84 f4       	brge	.+32     	; 0x986 <__stack+0x87>
     966:	26 c0       	rjmp	.+76     	; 0x9b4 <__stack+0xb5>
     968:	0f 2e       	mov	r0, r31
     96a:	fa e0       	ldi	r31, 0x0A	; 10
     96c:	9f 2e       	mov	r9, r31
     96e:	f0 2d       	mov	r31, r0
     970:	0f 2e       	mov	r0, r31
     972:	f0 e3       	ldi	r31, 0x30	; 48
     974:	af 2e       	mov	r10, r31
     976:	b1 2c       	mov	r11, r1
     978:	f0 2d       	mov	r31, r0
     97a:	0f 2e       	mov	r0, r31
     97c:	fc e2       	ldi	r31, 0x2C	; 44
     97e:	cf 2e       	mov	r12, r31
     980:	d1 2c       	mov	r13, r1
     982:	f0 2d       	mov	r31, r0
     984:	19 2d       	mov	r17, r9
     986:	81 2e       	mov	r8, r17
     988:	91 2c       	mov	r9, r1
     98a:	88 0c       	add	r8, r8
     98c:	99 1c       	adc	r9, r9
     98e:	2e 85       	ldd	r18, Y+14	; 0x0e
     990:	3f 85       	ldd	r19, Y+15	; 0x0f
     992:	82 0e       	add	r8, r18
     994:	93 1e       	adc	r9, r19
     996:	d4 01       	movw	r26, r8
     998:	6d 91       	ld	r22, X+
     99a:	7c 91       	ld	r23, X
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	3a d6       	rcall	.+3188   	; 0x1616 <__floatunsisf>
     9a2:	9b 01       	movw	r18, r22
     9a4:	ac 01       	movw	r20, r24
     9a6:	c3 01       	movw	r24, r6
     9a8:	b2 01       	movw	r22, r4
     9aa:	96 d6       	rcall	.+3372   	; 0x16d8 <__gesf2>
     9ac:	18 16       	cp	r1, r24
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__stack+0xb3>
     9b0:	b9 cf       	rjmp	.-142    	; 0x924 <__stack+0x25>
     9b2:	b1 cf       	rjmp	.-158    	; 0x916 <__stack+0x17>
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	63 96       	adiw	r28, 0x13	; 19
     9b8:	0f b6       	in	r0, 0x3f	; 63
     9ba:	f8 94       	cli
     9bc:	de bf       	out	0x3e, r29	; 62
     9be:	0f be       	out	0x3f, r0	; 63
     9c0:	cd bf       	out	0x3d, r28	; 61
     9c2:	df 91       	pop	r29
     9c4:	cf 91       	pop	r28
     9c6:	1f 91       	pop	r17
     9c8:	0f 91       	pop	r16
     9ca:	ff 90       	pop	r15
     9cc:	ef 90       	pop	r14
     9ce:	df 90       	pop	r13
     9d0:	cf 90       	pop	r12
     9d2:	bf 90       	pop	r11
     9d4:	af 90       	pop	r10
     9d6:	9f 90       	pop	r9
     9d8:	8f 90       	pop	r8
     9da:	7f 90       	pop	r7
     9dc:	6f 90       	pop	r6
     9de:	5f 90       	pop	r5
     9e0:	4f 90       	pop	r4
     9e2:	3f 90       	pop	r3
     9e4:	2f 90       	pop	r2
     9e6:	08 95       	ret

000009e8 <at_rf_connect>:
     9e8:	1f 93       	push	r17
     9ea:	cf 93       	push	r28
     9ec:	df 93       	push	r29
     9ee:	c4 e1       	ldi	r28, 0x14	; 20
     9f0:	d3 e0       	ldi	r29, 0x03	; 3
     9f2:	10 e0       	ldi	r17, 0x00	; 0
     9f4:	ce 01       	movw	r24, r28
     9f6:	6d de       	rcall	.-806    	; 0x6d2 <tx_at_response>
     9f8:	81 11       	cpse	r24, r1
     9fa:	0c c0       	rjmp	.+24     	; 0xa14 <at_rf_connect+0x2c>
     9fc:	1f 5f       	subi	r17, 0xFF	; 255
     9fe:	29 96       	adiw	r28, 0x09	; 9
     a00:	1e 30       	cpi	r17, 0x0E	; 14
     a02:	c1 f7       	brne	.-16     	; 0x9f4 <at_rf_connect+0xc>
     a04:	82 e9       	ldi	r24, 0x92	; 146
     a06:	93 e0       	ldi	r25, 0x03	; 3
     a08:	64 de       	rcall	.-824    	; 0x6d2 <tx_at_response>
     a0a:	81 11       	cpse	r24, r1
     a0c:	05 c0       	rjmp	.+10     	; 0xa18 <at_rf_connect+0x30>
     a0e:	28 de       	rcall	.-944    	; 0x660 <at_get_radio_network_time>
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	03 c0       	rjmp	.+6      	; 0xa1a <at_rf_connect+0x32>
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	01 c0       	rjmp	.+2      	; 0xa1a <at_rf_connect+0x32>
     a18:	80 e2       	ldi	r24, 0x20	; 32
     a1a:	df 91       	pop	r29
     a1c:	cf 91       	pop	r28
     a1e:	1f 91       	pop	r17
     a20:	08 95       	ret

00000a22 <at_rf_disconnect>:
     a22:	87 ee       	ldi	r24, 0xE7	; 231
     a24:	92 e0       	ldi	r25, 0x02	; 2
     a26:	55 de       	rcall	.-854    	; 0x6d2 <tx_at_response>
     a28:	81 11       	cpse	r24, r1
     a2a:	03 c0       	rjmp	.+6      	; 0xa32 <at_rf_disconnect+0x10>
     a2c:	80 ef       	ldi	r24, 0xF0	; 240
     a2e:	92 e0       	ldi	r25, 0x02	; 2
     a30:	50 de       	rcall	.-864    	; 0x6d2 <tx_at_response>
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	08 95       	ret

00000a36 <tx>:
     a36:	cf 92       	push	r12
     a38:	df 92       	push	r13
     a3a:	ef 92       	push	r14
     a3c:	ff 92       	push	r15
     a3e:	0f 93       	push	r16
     a40:	1f 93       	push	r17
     a42:	cf 93       	push	r28
     a44:	6c 01       	movw	r12, r24
     a46:	7b 01       	movw	r14, r22
     a48:	89 ef       	ldi	r24, 0xF9	; 249
     a4a:	92 e0       	ldi	r25, 0x02	; 2
     a4c:	42 de       	rcall	.-892    	; 0x6d2 <tx_at_response>
     a4e:	81 11       	cpse	r24, r1
     a50:	1d c0       	rjmp	.+58     	; 0xa8c <tx+0x56>
     a52:	82 e0       	ldi	r24, 0x02	; 2
     a54:	93 e0       	ldi	r25, 0x03	; 3
     a56:	3d de       	rcall	.-902    	; 0x6d2 <tx_at_response>
     a58:	81 11       	cpse	r24, r1
     a5a:	1a c0       	rjmp	.+52     	; 0xa90 <tx+0x5a>
     a5c:	1e 14       	cp	r1, r14
     a5e:	1f 04       	cpc	r1, r15
     a60:	cc f4       	brge	.+50     	; 0xa94 <tx+0x5e>
     a62:	c0 e0       	ldi	r28, 0x00	; 0
     a64:	86 01       	movw	r16, r12
     a66:	0c 0f       	add	r16, r28
     a68:	11 1d       	adc	r17, r1
     a6a:	f8 01       	movw	r30, r16
     a6c:	60 81       	ld	r22, Z
     a6e:	80 ec       	ldi	r24, 0xC0	; 192
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	86 db       	rcall	.-2292   	; 0x180 <usart_putchar>
     a74:	f8 01       	movw	r30, r16
     a76:	60 81       	ld	r22, Z
     a78:	88 ec       	ldi	r24, 0xC8	; 200
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	81 db       	rcall	.-2302   	; 0x180 <usart_putchar>
     a7e:	cf 5f       	subi	r28, 0xFF	; 255
     a80:	8c 2f       	mov	r24, r28
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	8e 15       	cp	r24, r14
     a86:	9f 05       	cpc	r25, r15
     a88:	6c f3       	brlt	.-38     	; 0xa64 <tx+0x2e>
     a8a:	04 c0       	rjmp	.+8      	; 0xa94 <tx+0x5e>
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	0f c0       	rjmp	.+30     	; 0xaae <tx+0x78>
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	0d c0       	rjmp	.+26     	; 0xaae <tx+0x78>
     a94:	68 e1       	ldi	r22, 0x18	; 24
     a96:	80 ec       	ldi	r24, 0xC0	; 192
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	72 db       	rcall	.-2332   	; 0x180 <usart_putchar>
     a9c:	69 e1       	ldi	r22, 0x19	; 25
     a9e:	80 ec       	ldi	r24, 0xC0	; 192
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	6e db       	rcall	.-2340   	; 0x180 <usart_putchar>
     aa4:	6a e1       	ldi	r22, 0x1A	; 26
     aa6:	80 ec       	ldi	r24, 0xC0	; 192
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	6a db       	rcall	.-2348   	; 0x180 <usart_putchar>
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	cf 91       	pop	r28
     ab0:	1f 91       	pop	r17
     ab2:	0f 91       	pop	r16
     ab4:	ff 90       	pop	r15
     ab6:	ef 90       	pop	r14
     ab8:	df 90       	pop	r13
     aba:	cf 90       	pop	r12
     abc:	08 95       	ret

00000abe <__vector_20>:
     abe:	1f 92       	push	r1
     ac0:	0f 92       	push	r0
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	0f 92       	push	r0
     ac6:	11 24       	eor	r1, r1
     ac8:	2f 93       	push	r18
     aca:	3f 93       	push	r19
     acc:	4f 93       	push	r20
     ace:	5f 93       	push	r21
     ad0:	6f 93       	push	r22
     ad2:	7f 93       	push	r23
     ad4:	8f 93       	push	r24
     ad6:	9f 93       	push	r25
     ad8:	af 93       	push	r26
     ada:	bf 93       	push	r27
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	ef 93       	push	r30
     ae2:	ff 93       	push	r31
     ae4:	c0 91 87 04 	lds	r28, 0x0487	; 0x800487 <response_counter>
     ae8:	d0 e0       	ldi	r29, 0x00	; 0
     aea:	c4 57       	subi	r28, 0x74	; 116
     aec:	db 4f       	sbci	r29, 0xFB	; 251
     aee:	80 ec       	ldi	r24, 0xC0	; 192
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	4d db       	rcall	.-2406   	; 0x18e <usart_getchar>
     af4:	88 83       	st	Y, r24
     af6:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <response_counter>
     afa:	8f 5f       	subi	r24, 0xFF	; 255
     afc:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <response_counter>
     b00:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <response_timeout_counter>
     b04:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <response_timeout_counter+0x1>
     b08:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <response_timeout_counter+0x2>
     b0c:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <response_timeout_counter+0x3>
     b10:	ff 91       	pop	r31
     b12:	ef 91       	pop	r30
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	bf 91       	pop	r27
     b1a:	af 91       	pop	r26
     b1c:	9f 91       	pop	r25
     b1e:	8f 91       	pop	r24
     b20:	7f 91       	pop	r23
     b22:	6f 91       	pop	r22
     b24:	5f 91       	pop	r21
     b26:	4f 91       	pop	r20
     b28:	3f 91       	pop	r19
     b2a:	2f 91       	pop	r18
     b2c:	0f 90       	pop	r0
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	0f 90       	pop	r0
     b32:	1f 90       	pop	r1
     b34:	18 95       	reti

00000b36 <__vector_8>:

//main_function()
ISR(WDT_vect)
{
     b36:	1f 92       	push	r1
     b38:	0f 92       	push	r0
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	0f 92       	push	r0
     b3e:	11 24       	eor	r1, r1
     b40:	2f 92       	push	r2
     b42:	3f 92       	push	r3
     b44:	4f 92       	push	r4
     b46:	5f 92       	push	r5
     b48:	6f 92       	push	r6
     b4a:	7f 92       	push	r7
     b4c:	8f 92       	push	r8
     b4e:	9f 92       	push	r9
     b50:	af 92       	push	r10
     b52:	bf 92       	push	r11
     b54:	cf 92       	push	r12
     b56:	df 92       	push	r13
     b58:	ef 92       	push	r14
     b5a:	ff 92       	push	r15
     b5c:	0f 93       	push	r16
     b5e:	1f 93       	push	r17
     b60:	2f 93       	push	r18
     b62:	3f 93       	push	r19
     b64:	4f 93       	push	r20
     b66:	5f 93       	push	r21
     b68:	6f 93       	push	r22
     b6a:	7f 93       	push	r23
     b6c:	8f 93       	push	r24
     b6e:	9f 93       	push	r25
     b70:	af 93       	push	r26
     b72:	bf 93       	push	r27
     b74:	ef 93       	push	r30
     b76:	ff 93       	push	r31
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
     b80:	2a 97       	sbiw	r28, 0x0a	; 10
     b82:	de bf       	out	0x3e, r29	; 62
     b84:	cd bf       	out	0x3d, r28	; 61
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	f8 94       	cli
     b8a:	a8 95       	wdr
     b8c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     b90:	88 61       	ori	r24, 0x18	; 24
     b92:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     b96:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     b9a:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
	wdt_counter++; //watchdog set at 1 second timeout
     b9c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     ba0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     ba4:	01 96       	adiw	r24, 0x01	; 1
     ba6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     baa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	usart_tx_at(USART_TERMINAL, RESPONSE_FOOTER); //DEBUG
     bae:	61 ea       	ldi	r22, 0xA1	; 161
     bb0:	72 e0       	ldi	r23, 0x02	; 2
     bb2:	88 ec       	ldi	r24, 0xC8	; 200
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	06 dc       	rcall	.-2036   	; 0x3c4 <usart_tx_at>
	usart_putchar(USART_TERMINAL, (0x30+wdt_counter)); //DEBUG
     bb8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     bbc:	60 5d       	subi	r22, 0xD0	; 208
     bbe:	88 ec       	ldi	r24, 0xC8	; 200
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	de da       	rcall	.-2628   	; 0x180 <usart_putchar>
	usart_tx_at(USART_TERMINAL, RESPONSE_FOOTER); //DEBUG
     bc4:	61 ea       	ldi	r22, 0xA1	; 161
     bc6:	72 e0       	ldi	r23, 0x02	; 2
     bc8:	88 ec       	ldi	r24, 0xC8	; 200
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	fb db       	rcall	.-2058   	; 0x3c4 <usart_tx_at>

	if (wdt_counter < WAKEUP_RATE)
     bce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     bd2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     bd6:	89 2b       	or	r24, r25
     bd8:	09 f4       	brne	.+2      	; 0xbdc <__vector_8+0xa6>
     bda:	31 c1       	rjmp	.+610    	; 0xe3e <__vector_8+0x308>
	{
		goto END;
	} else {wdt_counter = 0;} //reset counter if limit is reached.
     bdc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
     be0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	
	RTC_ISR_ACTIVE = 1;
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <RTC_ISR_ACTIVE>
				controller_next_state = READ_EXT_DATA;
				RTC_ISR_ACTIVE = 0; //FINISHED, break LOOP!
				break;
			
			default:
				controller_next_state = RESET_REGISTERS; //TRY RESET.
     bea:	0f 2e       	mov	r0, r31
     bec:	fb e0       	ldi	r31, 0x0B	; 11
     bee:	2f 2e       	mov	r2, r31
     bf0:	f0 2d       	mov	r31, r0
				{
					//tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_DISNNECT); //set failure status
					controller_next_state = RF_POWER_OFF; // RF_DISCONNECT; //if failure go to disconnect
					break;
				}
				controller_next_state = RF_POWER_OFF;
     bf2:	0f 2e       	mov	r0, r31
     bf4:	fa e0       	ldi	r31, 0x0A	; 10
     bf6:	4f 2e       	mov	r4, r31
     bf8:	f0 2d       	mov	r31, r0
				tx(&tx_data_package, transfer_data_length_package); //transmit package. GENERATE STATUS FROM THIS.
				controller_next_state = RX_DATA;
				break;
			
			case RX_DATA:
				controller_next_state = RF_DISCONNECT;
     bfa:	0f 2e       	mov	r0, r31
     bfc:	f9 e0       	ldi	r31, 0x09	; 9
     bfe:	3f 2e       	mov	r3, r31
     c00:	f0 2d       	mov	r31, r0
			
			case GENERATE_PACKAGE:
				data_to_char(&tx_data, TX_DATA_SIZE, &tx_data_bytes, TRANSFER_DATA_BASE);
 				transfer_data_length_package = mqtt_packet(&tx_data_bytes, &tx_data_package, TRANSFER_DATA_SIZE_PACKAGE); //convert ascii data to MQTT package.
				#ifdef DEBUG //output package size
					char package_lenght[5] = "";
     c02:	0f 2e       	mov	r0, r31
     c04:	f3 e0       	ldi	r31, 0x03	; 3
     c06:	5f 2e       	mov	r5, r31
     c08:	f0 2d       	mov	r31, r0
     c0a:	4e 01       	movw	r8, r28
     c0c:	28 e0       	ldi	r18, 0x08	; 8
     c0e:	82 0e       	add	r8, r18
     c10:	91 1c       	adc	r9, r1
					char mystring[5] = "";
     c12:	5e 01       	movw	r10, r28
     c14:	83 e0       	ldi	r24, 0x03	; 3
     c16:	a8 0e       	add	r10, r24
     c18:	b1 1c       	adc	r11, r1
			
			case RF_CONNECT: //NEED MORE POWER!!!!!!
				//at_rf_connect();
				if (at_rf_connect() != 0) //Connect to network. MAKE STATUS REPORT FROM THIS!!!!!!!
				{
					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_CONNECT); //set failure status
     c1a:	0f 2e       	mov	r0, r31
     c1c:	fc e2       	ldi	r31, 0x2C	; 44
     c1e:	ef 2e       	mov	r14, r31
     c20:	f5 e0       	ldi	r31, 0x05	; 5
     c22:	ff 2e       	mov	r15, r31
     c24:	f0 2d       	mov	r31, r0
				///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				controller_next_state = STORE_EXT_MEM;
				break;
			
			case STORE_EXT_MEM:
				tx_data[POSITION_TIME] = 0; //reset accumulation counter if something???????????????
     c26:	0e e1       	ldi	r16, 0x1E	; 30
     c28:	15 e0       	ldi	r17, 0x05	; 5
				}
				break;
			
			case CALC:
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				tx_data[POSITION_AVG] = controller_calc_avg(accu_data, tx_data[POSITION_TIME]); //calc and store average.
     c2a:	0f 2e       	mov	r0, r31
     c2c:	f0 e1       	ldi	r31, 0x10	; 16
     c2e:	cf 2e       	mov	r12, r31
     c30:	f5 e0       	ldi	r31, 0x05	; 5
     c32:	df 2e       	mov	r13, r31
     c34:	f0 2d       	mov	r31, r0
				//////////////////////////////////////////////////////////////////////////
				
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				accu_data += tx_data[POSITION_CURRENT]; //controller_measure(9, &tx_data); //measure with averaging, and accumulate.
				loadcell_min_max_tran(tx_data[POSITION_CURRENT], &tx_data); //check if new value should be stored in min, max and tran.
				tx_data[POSITION_PREV] = tx_data[POSITION_CURRENT]; //store adc value for next measurement.
     c36:	0f 2e       	mov	r0, r31
     c38:	fe e0       	ldi	r31, 0x0E	; 14
     c3a:	6f 2e       	mov	r6, r31
     c3c:	f5 e0       	ldi	r31, 0x05	; 5
     c3e:	7f 2e       	mov	r7, r31
     c40:	f0 2d       	mov	r31, r0
	
	RTC_ISR_ACTIVE = 1;
	while (RTC_ISR_ACTIVE == 1)
	{
		
		switch(controller_state) {
     c42:	e0 91 8b 04 	lds	r30, 0x048B	; 0x80048b <controller_state>
     c46:	8e 2f       	mov	r24, r30
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	8c 30       	cpi	r24, 0x0C	; 12
     c4c:	91 05       	cpc	r25, r1
     c4e:	08 f0       	brcs	.+2      	; 0xc52 <__vector_8+0x11c>
     c50:	eb c0       	rjmp	.+470    	; 0xe28 <__vector_8+0x2f2>
     c52:	fc 01       	movw	r30, r24
     c54:	e2 5c       	subi	r30, 0xC2	; 194
     c56:	ff 4f       	sbci	r31, 0xFF	; 255
     c58:	0c 94 78 0e 	jmp	0x1cf0	; 0x1cf0 <__tablejump2__>
			
			case READ_EXT_DATA:
				controller_next_state = MEASURE;
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <controller_next_state>
				loadcell_power_on();
				//////////////////////////////////////////////////////////////////////////
				
				//GENERAL MEASUREMENTS
// 				tx_data[POSITION_ANA0] = adc_result_average(ADC_MUX_ADC0, ADC_NUM_AVG); //NEED TO FIX ADC CONVERSINS!!!!!!!!
				tx_data[POSITION_ANA0] = adc_result_average(ADC_MUX_1V1, ADC_NUM_AVG); //PIN CHANGE HAVE NO EFFECT ON ADCB
     c62:	e4 c0       	rjmp	.+456    	; 0xe2c <__vector_8+0x2f6>
     c64:	0b dc       	rcall	.-2026   	; 0x47c <loadcell_power_on>
     c66:	63 2d       	mov	r22, r3
     c68:	8e e1       	ldi	r24, 0x1E	; 30
     c6a:	85 dc       	rcall	.-1782   	; 0x576 <adc_result_average>
     c6c:	90 93 0d 05 	sts	0x050D, r25	; 0x80050d <tx_data+0x1>
// 				tx_data[POSITION_ANA5] = adc_result_average(ADC_MUX_ADC5, ADC_NUM_AVG); //
// 				//tx_data[POSITION_TEMP] = adc_result_average(ADC_MUX_TEMPSENSE, 1); //PIN CHANGE HAVE NO EFFECT ON ADCB
// 				tx_data[POSITION_VDD] = adc_result_average(ADC_MUX_1V1, 1); //PIN CHANGE HAVE NO EFFECT ON ADCB
				 
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL///////////////////////////
				loadcell_power_off();
     c70:	80 93 0c 05 	sts	0x050C, r24	; 0x80050c <tx_data>
				//////////////////////////////////////////////////////////////////////////
				
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				accu_data += tx_data[POSITION_CURRENT]; //controller_measure(9, &tx_data); //measure with averaging, and accumulate.
     c74:	0a dc       	rcall	.-2028   	; 0x48a <loadcell_power_off>
     c76:	20 91 0c 05 	lds	r18, 0x050C	; 0x80050c <tx_data>
     c7a:	30 91 0d 05 	lds	r19, 0x050D	; 0x80050d <tx_data+0x1>
     c7e:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <accu_data>
     c82:	90 91 7c 04 	lds	r25, 0x047C	; 0x80047c <accu_data+0x1>
     c86:	a0 91 7d 04 	lds	r26, 0x047D	; 0x80047d <accu_data+0x2>
     c8a:	b0 91 7e 04 	lds	r27, 0x047E	; 0x80047e <accu_data+0x3>
     c8e:	82 0f       	add	r24, r18
     c90:	93 1f       	adc	r25, r19
     c92:	a1 1d       	adc	r26, r1
     c94:	b1 1d       	adc	r27, r1
     c96:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <accu_data>
     c9a:	90 93 7c 04 	sts	0x047C, r25	; 0x80047c <accu_data+0x1>
     c9e:	a0 93 7d 04 	sts	0x047D, r26	; 0x80047d <accu_data+0x2>
				loadcell_min_max_tran(tx_data[POSITION_CURRENT], &tx_data); //check if new value should be stored in min, max and tran.
     ca2:	b0 93 7e 04 	sts	0x047E, r27	; 0x80047e <accu_data+0x3>
     ca6:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <tx_data>
     caa:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <tx_data+0x1>
     cae:	6c e0       	ldi	r22, 0x0C	; 12
				tx_data[POSITION_PREV] = tx_data[POSITION_CURRENT]; //store adc value for next measurement.
     cb0:	75 e0       	ldi	r23, 0x05	; 5
     cb2:	40 db       	rcall	.-2432   	; 0x334 <loadcell_min_max_tran>
     cb4:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <tx_data>
     cb8:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <tx_data+0x1>
     cbc:	f3 01       	movw	r30, r6
				///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				
				transmit_counter++;		
     cbe:	91 83       	std	Z+1, r25	; 0x01
     cc0:	80 83       	st	Z, r24
     cc2:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <transmit_counter>
     cc6:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <transmit_counter+0x1>
     cca:	01 96       	adiw	r24, 0x01	; 1
     ccc:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <transmit_counter+0x1>
				tx_data[POSITION_TIME] = transmit_counter; //increase timestamp counter.
     cd0:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <transmit_counter>
     cd4:	f8 01       	movw	r30, r16
			
				if (tx_data[POSITION_TIME] >= (TRANSMIT_RATE/WAKEUP_RATE)) //if accumulation limit is reached.
     cd6:	91 83       	std	Z+1, r25	; 0x01
     cd8:	80 83       	st	Z, r24
     cda:	80 81       	ld	r24, Z
     cdc:	91 81       	ldd	r25, Z+1	; 0x01
     cde:	88 35       	cpi	r24, 0x58	; 88
				{
					transmit_counter = 0; //reset counter
     ce0:	92 40       	sbci	r25, 0x02	; 2
     ce2:	40 f0       	brcs	.+16     	; 0xcf4 <__vector_8+0x1be>
     ce4:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <transmit_counter+0x1>
					controller_next_state = CALC; //limit reached, go to next
     ce8:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <transmit_counter>
     cec:	82 e0       	ldi	r24, 0x02	; 2
     cee:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <controller_next_state>
					} else {
					controller_next_state = READ_EXT_DATA; //Start from top again
     cf2:	9c c0       	rjmp	.+312    	; 0xe2c <__vector_8+0x2f6>
					RTC_ISR_ACTIVE = 0; //Break loop and go to sleep again
     cf4:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <controller_next_state>
     cf8:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <RTC_ISR_ACTIVE>
				}
				break;
			
			case CALC:
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				tx_data[POSITION_AVG] = controller_calc_avg(accu_data, tx_data[POSITION_TIME]); //calc and store average.
     cfc:	97 c0       	rjmp	.+302    	; 0xe2c <__vector_8+0x2f6>
     cfe:	f8 01       	movw	r30, r16


uint16_t controller_calc_avg(uint32_t data, uint16_t cnt) {
	uint16_t avg = 0;
	
	avg = data/cnt;
     d00:	20 81       	ld	r18, Z
     d02:	31 81       	ldd	r19, Z+1	; 0x01
     d04:	40 e0       	ldi	r20, 0x00	; 0
     d06:	50 e0       	ldi	r21, 0x00	; 0
     d08:	60 91 7b 04 	lds	r22, 0x047B	; 0x80047b <accu_data>
     d0c:	70 91 7c 04 	lds	r23, 0x047C	; 0x80047c <accu_data+0x1>
     d10:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <accu_data+0x2>
     d14:	90 91 7e 04 	lds	r25, 0x047E	; 0x80047e <accu_data+0x3>
				}
				break;
			
			case CALC:
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				tx_data[POSITION_AVG] = controller_calc_avg(accu_data, tx_data[POSITION_TIME]); //calc and store average.
     d18:	c9 d7       	rcall	.+3986   	; 0x1cac <__udivmodsi4>
     d1a:	f6 01       	movw	r30, r12
				accu_data = 0; //reset parameters
     d1c:	31 83       	std	Z+1, r19	; 0x01
     d1e:	20 83       	st	Z, r18
     d20:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <accu_data>
     d24:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <accu_data+0x1>
     d28:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <accu_data+0x2>
				///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				controller_next_state = STORE_EXT_MEM;
     d2c:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <accu_data+0x3>
				break;
			
			case STORE_EXT_MEM:
				tx_data[POSITION_TIME] = 0; //reset accumulation counter if something???????????????
     d30:	50 92 8a 04 	sts	0x048A, r5	; 0x80048a <controller_next_state>
				controller_next_state = RF_POWER_ON;
     d34:	7b c0       	rjmp	.+246    	; 0xe2c <__vector_8+0x2f6>
     d36:	f8 01       	movw	r30, r16
     d38:	11 82       	std	Z+1, r1	; 0x01
				break;
     d3a:	10 82       	st	Z, r1
			
			case RF_POWER_ON:
				//radio_power_on();
				if (radio_power_on() == 1) //power on and check if it fails
     d3c:	84 e0       	ldi	r24, 0x04	; 4
     d3e:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <controller_next_state>
     d42:	74 c0       	rjmp	.+232    	; 0xe2c <__vector_8+0x2f6>
				{
					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_POWER_ON); //set failure status
     d44:	a4 db       	rcall	.-2232   	; 0x48e <radio_power_on>
     d46:	81 30       	cpi	r24, 0x01	; 1
     d48:	49 f4       	brne	.+18     	; 0xd5c <__vector_8+0x226>
     d4a:	f7 01       	movw	r30, r14
     d4c:	80 81       	ld	r24, Z
					controller_next_state = RF_POWER_OFF; //if failure go to power off
     d4e:	91 81       	ldd	r25, Z+1	; 0x01
     d50:	81 60       	ori	r24, 0x01	; 1
					break;
     d52:	91 83       	std	Z+1, r25	; 0x01
				}
				controller_next_state = RF_CONNECT;
     d54:	80 83       	st	Z, r24
     d56:	40 92 8a 04 	sts	0x048A, r4	; 0x80048a <controller_next_state>
				break;
     d5a:	68 c0       	rjmp	.+208    	; 0xe2c <__vector_8+0x2f6>
			
			case RF_CONNECT: //NEED MORE POWER!!!!!!
				//at_rf_connect();
				if (at_rf_connect() != 0) //Connect to network. MAKE STATUS REPORT FROM THIS!!!!!!!
     d5c:	85 e0       	ldi	r24, 0x05	; 5
     d5e:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <controller_next_state>
     d62:	64 c0       	rjmp	.+200    	; 0xe2c <__vector_8+0x2f6>
				{
					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_CONNECT); //set failure status
     d64:	41 de       	rcall	.-894    	; 0x9e8 <at_rf_connect>
     d66:	88 23       	and	r24, r24
     d68:	49 f0       	breq	.+18     	; 0xd7c <__vector_8+0x246>
     d6a:	f7 01       	movw	r30, r14
     d6c:	80 81       	ld	r24, Z
     d6e:	91 81       	ldd	r25, Z+1	; 0x01
					controller_next_state = RF_POWER_OFF; // RF_DISCONNECT; //if failure go to disconnect
     d70:	82 60       	ori	r24, 0x02	; 2
     d72:	91 83       	std	Z+1, r25	; 0x01
					break;
     d74:	80 83       	st	Z, r24
				}
				controller_next_state = GENERATE_PACKAGE;
     d76:	40 92 8a 04 	sts	0x048A, r4	; 0x80048a <controller_next_state>
				break;
     d7a:	58 c0       	rjmp	.+176    	; 0xe2c <__vector_8+0x2f6>
			
			case GENERATE_PACKAGE:
				data_to_char(&tx_data, TX_DATA_SIZE, &tx_data_bytes, TRANSFER_DATA_BASE);
     d7c:	86 e0       	ldi	r24, 0x06	; 6
     d7e:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <controller_next_state>
     d82:	54 c0       	rjmp	.+168    	; 0xe2c <__vector_8+0x2f6>
     d84:	2a e0       	ldi	r18, 0x0A	; 10
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	46 e1       	ldi	r20, 0x16	; 22
     d8a:	54 e0       	ldi	r21, 0x04	; 4
 				transfer_data_length_package = mqtt_packet(&tx_data_bytes, &tx_data_package, TRANSFER_DATA_SIZE_PACKAGE); //convert ascii data to MQTT package.
     d8c:	61 e0       	ldi	r22, 0x01	; 1
     d8e:	8c e0       	ldi	r24, 0x0C	; 12
     d90:	95 e0       	ldi	r25, 0x05	; 5
     d92:	1e dd       	rcall	.-1476   	; 0x7d0 <data_to_char>
     d94:	44 e6       	ldi	r20, 0x64	; 100
     d96:	50 e0       	ldi	r21, 0x00	; 0
     d98:	62 eb       	ldi	r22, 0xB2	; 178
     d9a:	73 e0       	ldi	r23, 0x03	; 3
     d9c:	86 e1       	ldi	r24, 0x16	; 22
     d9e:	94 e0       	ldi	r25, 0x04	; 4
     da0:	a4 d3       	rcall	.+1864   	; 0x14ea <mqtt_packet>
     da2:	90 93 b1 03 	sts	0x03B1, r25	; 0x8003b1 <__data_end+0x1>
				#ifdef DEBUG //output package size
					char package_lenght[5] = "";
     da6:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <__data_end>
     daa:	1f 82       	std	Y+7, r1	; 0x07
     dac:	1e 82       	std	Y+6, r1	; 0x06
     dae:	f4 01       	movw	r30, r8
					char mystring[5] = "";
     db0:	25 2d       	mov	r18, r5
     db2:	11 92       	st	Z+, r1
     db4:	2a 95       	dec	r18
     db6:	e9 f7       	brne	.-6      	; 0xdb2 <__vector_8+0x27c>
     db8:	1a 82       	std	Y+2, r1	; 0x02
     dba:	19 82       	std	Y+1, r1	; 0x01
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     dbc:	f5 01       	movw	r30, r10
     dbe:	25 2d       	mov	r18, r5
     dc0:	11 92       	st	Z+, r1
     dc2:	2a 95       	dec	r18
     dc4:	e9 f7       	brne	.-6      	; 0xdc0 <__vector_8+0x28a>
     dc6:	44 2d       	mov	r20, r4
					itoa(transfer_data_length_package, package_lenght, 10);
					strcpy(mystring, package_lenght);
     dc8:	be 01       	movw	r22, r28
     dca:	6a 5f       	subi	r22, 0xFA	; 250
     dcc:	7f 4f       	sbci	r23, 0xFF	; 255
     dce:	f2 d7       	rcall	.+4068   	; 0x1db4 <__itoa_ncheck>
     dd0:	be 01       	movw	r22, r28
     dd2:	6a 5f       	subi	r22, 0xFA	; 250
					usart_tx_at(USART_TERMINAL, mystring);
     dd4:	7f 4f       	sbci	r23, 0xFF	; 255
     dd6:	ce 01       	movw	r24, r28
     dd8:	01 96       	adiw	r24, 0x01	; 1
     dda:	c1 d7       	rcall	.+3970   	; 0x1d5e <strcpy>
     ddc:	be 01       	movw	r22, r28
     dde:	6f 5f       	subi	r22, 0xFF	; 255
				#endif // DEBUG
				controller_next_state = TX_DATA;
     de0:	7f 4f       	sbci	r23, 0xFF	; 255
     de2:	88 ec       	ldi	r24, 0xC8	; 200
     de4:	90 e0       	ldi	r25, 0x00	; 0
				break;
     de6:	ee da       	rcall	.-2596   	; 0x3c4 <usart_tx_at>
			
			case TX_DATA:
				tx(&tx_data_package, transfer_data_length_package); //transmit package. GENERATE STATUS FROM THIS.
     de8:	87 e0       	ldi	r24, 0x07	; 7
     dea:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <controller_next_state>
     dee:	1e c0       	rjmp	.+60     	; 0xe2c <__vector_8+0x2f6>
     df0:	60 91 b0 03 	lds	r22, 0x03B0	; 0x8003b0 <__data_end>
				controller_next_state = RX_DATA;
     df4:	70 91 b1 03 	lds	r23, 0x03B1	; 0x8003b1 <__data_end+0x1>
				break;
     df8:	82 eb       	ldi	r24, 0xB2	; 178
			
			case RX_DATA:
				controller_next_state = RF_DISCONNECT;
     dfa:	93 e0       	ldi	r25, 0x03	; 3
     dfc:	1c de       	rcall	.-968    	; 0xa36 <tx>
				break;
     dfe:	88 e0       	ldi	r24, 0x08	; 8
			
			case RF_DISCONNECT:
				//at_rf_disconnect(); //Disconnect
				if (at_rf_disconnect() != 0) //Status will not be transmitted, but could probably be stored for later.
     e00:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <controller_next_state>
				{
					//tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_DISNNECT); //set failure status
					controller_next_state = RF_POWER_OFF; // RF_DISCONNECT; //if failure go to disconnect
					break;
				}
				controller_next_state = RF_POWER_OFF;
     e04:	13 c0       	rjmp	.+38     	; 0xe2c <__vector_8+0x2f6>
     e06:	30 92 8a 04 	sts	0x048A, r3	; 0x80048a <controller_next_state>
				break;
			
			case RF_POWER_OFF:
				radio_power_off_at(); //radio power down
     e0a:	10 c0       	rjmp	.+32     	; 0xe2c <__vector_8+0x2f6>
     e0c:	0a de       	rcall	.-1004   	; 0xa22 <at_rf_disconnect>
				controller_next_state = RESET_REGISTERS;
     e0e:	40 92 8a 04 	sts	0x048A, r4	; 0x80048a <controller_next_state>
				break;
     e12:	0c c0       	rjmp	.+24     	; 0xe2c <__vector_8+0x2f6>
			
			case RESET_REGISTERS:
				reset_all_data(); //reset all arrays
     e14:	73 db       	rcall	.-2330   	; 0x4fc <radio_power_off_at>
     e16:	20 92 8a 04 	sts	0x048A, r2	; 0x80048a <controller_next_state>
				controller_next_state = READ_EXT_DATA;
     e1a:	08 c0       	rjmp	.+16     	; 0xe2c <__vector_8+0x2f6>
				RTC_ISR_ACTIVE = 0; //FINISHED, break LOOP!
     e1c:	05 db       	rcall	.-2550   	; 0x428 <reset_all_data>
				break;
     e1e:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <controller_next_state>
			
			default:
				controller_next_state = RESET_REGISTERS; //TRY RESET.
     e22:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <RTC_ISR_ACTIVE>
				break;
			
		}
		
		controller_state = controller_next_state; //NEXT STATE => STATE
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <__vector_8+0x2f6>
     e28:	20 92 8a 04 	sts	0x048A, r2	; 0x80048a <controller_next_state>
	{
		goto END;
	} else {wdt_counter = 0;} //reset counter if limit is reached.
	
	RTC_ISR_ACTIVE = 1;
	while (RTC_ISR_ACTIVE == 1)
     e2c:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <controller_next_state>
     e30:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <controller_state>
     e34:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <RTC_ISR_ACTIVE>

	END:
	
	wdt_reset();
	//wdt_enable();
	rtc_init_period(1);
     e38:	81 30       	cpi	r24, 0x01	; 1
     e3a:	09 f4       	brne	.+2      	; 0xe3e <__vector_8+0x308>
     e3c:	02 cf       	rjmp	.-508    	; 0xc42 <__vector_8+0x10c>
     e3e:	a8 95       	wdr
	return;
	
}
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	00 db       	rcall	.-2560   	; 0x446 <rtc_init_period>
     e46:	2a 96       	adiw	r28, 0x0a	; 10
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61
     e52:	df 91       	pop	r29
     e54:	cf 91       	pop	r28
     e56:	ff 91       	pop	r31
     e58:	ef 91       	pop	r30
     e5a:	bf 91       	pop	r27
     e5c:	af 91       	pop	r26
     e5e:	9f 91       	pop	r25
     e60:	8f 91       	pop	r24
     e62:	7f 91       	pop	r23
     e64:	6f 91       	pop	r22
     e66:	5f 91       	pop	r21
     e68:	4f 91       	pop	r20
     e6a:	3f 91       	pop	r19
     e6c:	2f 91       	pop	r18
     e6e:	1f 91       	pop	r17
     e70:	0f 91       	pop	r16
     e72:	ff 90       	pop	r15
     e74:	ef 90       	pop	r14
     e76:	df 90       	pop	r13
     e78:	cf 90       	pop	r12
     e7a:	bf 90       	pop	r11
     e7c:	af 90       	pop	r10
     e7e:	9f 90       	pop	r9
     e80:	8f 90       	pop	r8
     e82:	7f 90       	pop	r7
     e84:	6f 90       	pop	r6
     e86:	5f 90       	pop	r5
     e88:	4f 90       	pop	r4
     e8a:	3f 90       	pop	r3
     e8c:	2f 90       	pop	r2
     e8e:	0f 90       	pop	r0
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	0f 90       	pop	r0
     e94:	1f 90       	pop	r1
     e96:	18 95       	reti

00000e98 <main>:
		
	/* Initialize the board.
	 * The board-specific conf_board.h file contains the configuration of
	 * the board initialization.
	 */
	board_init();
     e98:	f8 94       	cli
}
#endif // DEBUG

static void adc_initialization(void)
{
	PRR0 &= ~(1<<PRADC); //enable ADC clock
     e9a:	b8 d3       	rcall	.+1904   	; 0x160c <board_init>
     e9c:	e4 e6       	ldi	r30, 0x64	; 100
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	8e 7f       	andi	r24, 0xFE	; 254
 *
 * \param prescaler   ADC clock prescaler
 */
static inline void adc_init(enum adc_prescaler prescaler)
{
	ADCSRA = (uint8_t)prescaler | (1 << ADEN);
     ea4:	80 83       	st	Z, r24
     ea6:	87 e8       	ldi	r24, 0x87	; 135
     ea8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	//Enable The receiver and transmitter
	UCSR0B |= (1<<3);
	*/
	//////////////////////////////////////////////////////////////////////////
	//unsigned char data = 0x40;
	usart_init_rs232(USART_RADIO, &USART_OPTIONS); //Radio UART
     eac:	62 e0       	ldi	r22, 0x02	; 2
     eae:	71 e0       	ldi	r23, 0x01	; 1
     eb0:	80 ec       	ldi	r24, 0xC0	; 192
	sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	fd d9       	rcall	.-3078   	; 0x2b0 <usart_init_rs232>
     eb6:	62 e0       	ldi	r22, 0x02	; 2
	
	usart_init_rs232(USART_TERMINAL, &USART_OPTIONS); //Radio UART
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	4a d9       	rcall	.-3436   	; 0x150 <sysclk_enable_module>
     ebc:	62 e0       	ldi	r22, 0x02	; 2
     ebe:	71 e0       	ldi	r23, 0x01	; 1
	sysclk_enable_module(POWER_RED_REG0, PRUSART1_bm);
     ec0:	88 ec       	ldi	r24, 0xC8	; 200
     ec2:	90 e0       	ldi	r25, 0x00	; 0
// 	
// 	//initialize radio pins
 	delay_s(1); //wait for voltages to settle
     ec4:	f5 d9       	rcall	.-3094   	; 0x2b0 <usart_init_rs232>
     ec6:	60 e1       	ldi	r22, 0x10	; 16
     ec8:	80 e0       	ldi	r24, 0x00	; 0
 	radio_pins_init();
     eca:	42 d9       	rcall	.-3452   	; 0x150 <sysclk_enable_module>
     ecc:	6b e0       	ldi	r22, 0x0B	; 11
     ece:	7b e8       	ldi	r23, 0x8B	; 139
     ed0:	82 e0       	ldi	r24, 0x02	; 2
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	6c da       	rcall	.-2856   	; 0x3ae <__portable_avr_delay_cycles>
     ed6:	c2 da       	rcall	.-2684   	; 0x45c <radio_pins_init>
     ed8:	6b e0       	ldi	r22, 0x0B	; 11
     eda:	7b e8       	ldi	r23, 0x8B	; 139
     edc:	82 e0       	ldi	r24, 0x02	; 2
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	66 da       	rcall	.-2868   	; 0x3ae <__portable_avr_delay_cycles>
     ee2:	b9 da       	rcall	.-2702   	; 0x456 <loadcell_pins_init>
     ee4:	0b db       	rcall	.-2538   	; 0x4fc <radio_power_off_at>
     ee6:	a0 da       	rcall	.-2752   	; 0x428 <reset_all_data>
     ee8:	82 e0       	ldi	r24, 0x02	; 2
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	ac da       	rcall	.-2728   	; 0x446 <rtc_init_period>
     eee:	83 b7       	in	r24, 0x33	; 51
     ef0:	81 7f       	andi	r24, 0xF1	; 241
     ef2:	84 60       	ori	r24, 0x04	; 4
     ef4:	83 bf       	out	0x33, r24	; 51
     ef6:	78 94       	sei
     ef8:	83 b7       	in	r24, 0x33	; 51
     efa:	81 60       	ori	r24, 0x01	; 1
     efc:	83 bf       	out	0x33, r24	; 51
     efe:	85 b7       	in	r24, 0x35	; 53
     f00:	80 66       	ori	r24, 0x60	; 96
     f02:	85 bf       	out	0x35, r24	; 53
     f04:	8f 7d       	andi	r24, 0xDF	; 223
     f06:	85 bf       	out	0x35, r24	; 53
     f08:	88 95       	sleep
     f0a:	83 b7       	in	r24, 0x33	; 51
     f0c:	8e 7f       	andi	r24, 0xFE	; 254
     f0e:	83 bf       	out	0x33, r24	; 51
     f10:	f3 cf       	rjmp	.-26     	; 0xef8 <main+0x60>

00000f12 <MQTTSerialize_connectLength>:

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
     f12:	ef 92       	push	r14
     f14:	ff 92       	push	r15
     f16:	0f 93       	push	r16
     f18:	1f 93       	push	r17
     f1a:	cf 93       	push	r28
     f1c:	df 93       	push	r29
     f1e:	ec 01       	movw	r28, r24
     f20:	8e 81       	ldd	r24, Y+6	; 0x06
     f22:	83 30       	cpi	r24, 0x03	; 3
     f24:	29 f0       	breq	.+10     	; 0xf30 <MQTTSerialize_connectLength+0x1e>
     f26:	84 30       	cpi	r24, 0x04	; 4
     f28:	31 f4       	brne	.+12     	; 0xf36 <MQTTSerialize_connectLength+0x24>
     f2a:	0a e0       	ldi	r16, 0x0A	; 10
     f2c:	10 e0       	ldi	r17, 0x00	; 0
     f2e:	05 c0       	rjmp	.+10     	; 0xf3a <MQTTSerialize_connectLength+0x28>
     f30:	0c e0       	ldi	r16, 0x0C	; 12
     f32:	10 e0       	ldi	r17, 0x00	; 0
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <MQTTSerialize_connectLength+0x28>
     f36:	00 e0       	ldi	r16, 0x00	; 0
     f38:	10 e0       	ldi	r17, 0x00	; 0
     f3a:	4f 81       	ldd	r20, Y+7	; 0x07
     f3c:	58 85       	ldd	r21, Y+8	; 0x08
     f3e:	69 85       	ldd	r22, Y+9	; 0x09
     f40:	7a 85       	ldd	r23, Y+10	; 0x0a
     f42:	8b 85       	ldd	r24, Y+11	; 0x0b
     f44:	9c 85       	ldd	r25, Y+12	; 0x0c
     f46:	fb d1       	rcall	.+1014   	; 0x133e <MQTTstrlen>
     f48:	02 96       	adiw	r24, 0x02	; 2
     f4a:	08 0f       	add	r16, r24
     f4c:	19 1f       	adc	r17, r25
     f4e:	88 89       	ldd	r24, Y+16	; 0x10
     f50:	88 23       	and	r24, r24
     f52:	a1 f0       	breq	.+40     	; 0xf7c <MQTTSerialize_connectLength+0x6a>
     f54:	4f 89       	ldd	r20, Y+23	; 0x17
     f56:	58 8d       	ldd	r21, Y+24	; 0x18
     f58:	69 8d       	ldd	r22, Y+25	; 0x19
     f5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f60:	ee d1       	rcall	.+988    	; 0x133e <MQTTstrlen>
     f62:	7c 01       	movw	r14, r24
     f64:	4d 8d       	ldd	r20, Y+29	; 0x1d
     f66:	5e 8d       	ldd	r21, Y+30	; 0x1e
     f68:	6f 8d       	ldd	r22, Y+31	; 0x1f
     f6a:	78 a1       	ldd	r23, Y+32	; 0x20
     f6c:	89 a1       	ldd	r24, Y+33	; 0x21
     f6e:	9a a1       	ldd	r25, Y+34	; 0x22
     f70:	e6 d1       	rcall	.+972    	; 0x133e <MQTTstrlen>
     f72:	8e 0d       	add	r24, r14
     f74:	9f 1d       	adc	r25, r15
     f76:	04 96       	adiw	r24, 0x04	; 4
     f78:	08 0f       	add	r16, r24
     f7a:	19 1f       	adc	r17, r25
     f7c:	8d a1       	ldd	r24, Y+37	; 0x25
     f7e:	9e a1       	ldd	r25, Y+38	; 0x26
     f80:	89 2b       	or	r24, r25
     f82:	21 f4       	brne	.+8      	; 0xf8c <MQTTSerialize_connectLength+0x7a>
     f84:	89 a5       	ldd	r24, Y+41	; 0x29
     f86:	9a a5       	ldd	r25, Y+42	; 0x2a
     f88:	89 2b       	or	r24, r25
     f8a:	51 f0       	breq	.+20     	; 0xfa0 <MQTTSerialize_connectLength+0x8e>
     f8c:	4d a1       	ldd	r20, Y+37	; 0x25
     f8e:	5e a1       	ldd	r21, Y+38	; 0x26
     f90:	6f a1       	ldd	r22, Y+39	; 0x27
     f92:	78 a5       	ldd	r23, Y+40	; 0x28
     f94:	89 a5       	ldd	r24, Y+41	; 0x29
     f96:	9a a5       	ldd	r25, Y+42	; 0x2a
     f98:	d2 d1       	rcall	.+932    	; 0x133e <MQTTstrlen>
     f9a:	02 96       	adiw	r24, 0x02	; 2
     f9c:	08 0f       	add	r16, r24
     f9e:	19 1f       	adc	r17, r25
     fa0:	8b a5       	ldd	r24, Y+43	; 0x2b
     fa2:	9c a5       	ldd	r25, Y+44	; 0x2c
     fa4:	89 2b       	or	r24, r25
     fa6:	21 f4       	brne	.+8      	; 0xfb0 <MQTTSerialize_connectLength+0x9e>
     fa8:	8f a5       	ldd	r24, Y+47	; 0x2f
     faa:	98 a9       	ldd	r25, Y+48	; 0x30
     fac:	89 2b       	or	r24, r25
     fae:	51 f0       	breq	.+20     	; 0xfc4 <MQTTSerialize_connectLength+0xb2>
     fb0:	4b a5       	ldd	r20, Y+43	; 0x2b
     fb2:	5c a5       	ldd	r21, Y+44	; 0x2c
     fb4:	6d a5       	ldd	r22, Y+45	; 0x2d
     fb6:	7e a5       	ldd	r23, Y+46	; 0x2e
     fb8:	8f a5       	ldd	r24, Y+47	; 0x2f
     fba:	98 a9       	ldd	r25, Y+48	; 0x30
     fbc:	c0 d1       	rcall	.+896    	; 0x133e <MQTTstrlen>
     fbe:	02 96       	adiw	r24, 0x02	; 2
     fc0:	08 0f       	add	r16, r24
     fc2:	19 1f       	adc	r17, r25
     fc4:	c8 01       	movw	r24, r16
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	1f 91       	pop	r17
     fcc:	0f 91       	pop	r16
     fce:	ff 90       	pop	r15
     fd0:	ef 90       	pop	r14
     fd2:	08 95       	ret

00000fd4 <MQTTSerialize_connect>:
     fd4:	af 92       	push	r10
     fd6:	bf 92       	push	r11
     fd8:	cf 92       	push	r12
     fda:	df 92       	push	r13
     fdc:	ef 92       	push	r14
     fde:	ff 92       	push	r15
     fe0:	0f 93       	push	r16
     fe2:	1f 93       	push	r17
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	00 d0       	rcall	.+0      	; 0xfea <MQTTSerialize_connect+0x16>
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	6c 01       	movw	r12, r24
     ff0:	5b 01       	movw	r10, r22
     ff2:	8a 01       	movw	r16, r20
     ff4:	9a 83       	std	Y+2, r25	; 0x02
     ff6:	89 83       	std	Y+1, r24	; 0x01
     ff8:	ca 01       	movw	r24, r20
     ffa:	8b df       	rcall	.-234    	; 0xf12 <MQTTSerialize_connectLength>
     ffc:	7c 01       	movw	r14, r24
     ffe:	03 d1       	rcall	.+518    	; 0x1206 <MQTTPacket_len>
    1000:	a8 16       	cp	r10, r24
    1002:	b9 06       	cpc	r11, r25
    1004:	0c f4       	brge	.+2      	; 0x1008 <MQTTSerialize_connect+0x34>
    1006:	9f c0       	rjmp	.+318    	; 0x1146 <MQTTSerialize_connect+0x172>
    1008:	60 e1       	ldi	r22, 0x10	; 16
    100a:	ce 01       	movw	r24, r28
    100c:	01 96       	adiw	r24, 0x01	; 1
    100e:	0a d1       	rcall	.+532    	; 0x1224 <writeChar>
    1010:	b7 01       	movw	r22, r14
    1012:	89 81       	ldd	r24, Y+1	; 0x01
    1014:	9a 81       	ldd	r25, Y+2	; 0x02
    1016:	d1 d0       	rcall	.+418    	; 0x11ba <MQTTPacket_encode>
    1018:	29 81       	ldd	r18, Y+1	; 0x01
    101a:	3a 81       	ldd	r19, Y+2	; 0x02
    101c:	82 0f       	add	r24, r18
    101e:	93 1f       	adc	r25, r19
    1020:	9a 83       	std	Y+2, r25	; 0x02
    1022:	89 83       	std	Y+1, r24	; 0x01
    1024:	f8 01       	movw	r30, r16
    1026:	86 81       	ldd	r24, Z+6	; 0x06
    1028:	84 30       	cpi	r24, 0x04	; 4
    102a:	51 f4       	brne	.+20     	; 0x1040 <MQTTSerialize_connect+0x6c>
    102c:	6b e9       	ldi	r22, 0x9B	; 155
    102e:	73 e0       	ldi	r23, 0x03	; 3
    1030:	ce 01       	movw	r24, r28
    1032:	01 96       	adiw	r24, 0x01	; 1
    1034:	20 d1       	rcall	.+576    	; 0x1276 <writeCString>
    1036:	64 e0       	ldi	r22, 0x04	; 4
    1038:	ce 01       	movw	r24, r28
    103a:	01 96       	adiw	r24, 0x01	; 1
    103c:	f3 d0       	rcall	.+486    	; 0x1224 <writeChar>
    103e:	09 c0       	rjmp	.+18     	; 0x1052 <MQTTSerialize_connect+0x7e>
    1040:	60 ea       	ldi	r22, 0xA0	; 160
    1042:	73 e0       	ldi	r23, 0x03	; 3
    1044:	ce 01       	movw	r24, r28
    1046:	01 96       	adiw	r24, 0x01	; 1
    1048:	16 d1       	rcall	.+556    	; 0x1276 <writeCString>
    104a:	63 e0       	ldi	r22, 0x03	; 3
    104c:	ce 01       	movw	r24, r28
    104e:	01 96       	adiw	r24, 0x01	; 1
    1050:	e9 d0       	rcall	.+466    	; 0x1224 <writeChar>
    1052:	f1 2c       	mov	r15, r1
    1054:	f8 01       	movw	r30, r16
    1056:	87 85       	ldd	r24, Z+15	; 0x0f
    1058:	80 fb       	bst	r24, 0
    105a:	f1 f8       	bld	r15, 1
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 89       	ldd	r25, Z+16	; 0x10
    1060:	91 11       	cpse	r25, r1
    1062:	01 c0       	rjmp	.+2      	; 0x1066 <MQTTSerialize_connect+0x92>
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	80 fb       	bst	r24, 0
    1068:	f2 f8       	bld	r15, 2
    106a:	f2 fe       	sbrs	r15, 2
    106c:	0d c0       	rjmp	.+26     	; 0x1088 <MQTTSerialize_connect+0xb4>
    106e:	f8 01       	movw	r30, r16
    1070:	84 a1       	ldd	r24, Z+36	; 0x24
    1072:	83 70       	andi	r24, 0x03	; 3
    1074:	88 0f       	add	r24, r24
    1076:	88 0f       	add	r24, r24
    1078:	88 0f       	add	r24, r24
    107a:	9f 2d       	mov	r25, r15
    107c:	97 7e       	andi	r25, 0xE7	; 231
    107e:	f9 2e       	mov	r15, r25
    1080:	f8 2a       	or	r15, r24
    1082:	83 a1       	ldd	r24, Z+35	; 0x23
    1084:	80 fb       	bst	r24, 0
    1086:	f5 f8       	bld	r15, 5
    1088:	f8 01       	movw	r30, r16
    108a:	85 a1       	ldd	r24, Z+37	; 0x25
    108c:	96 a1       	ldd	r25, Z+38	; 0x26
    108e:	89 2b       	or	r24, r25
    1090:	21 f4       	brne	.+8      	; 0x109a <MQTTSerialize_connect+0xc6>
    1092:	81 a5       	ldd	r24, Z+41	; 0x29
    1094:	92 a5       	ldd	r25, Z+42	; 0x2a
    1096:	89 2b       	or	r24, r25
    1098:	11 f0       	breq	.+4      	; 0x109e <MQTTSerialize_connect+0xca>
    109a:	68 94       	set
    109c:	f7 f8       	bld	r15, 7
    109e:	f8 01       	movw	r30, r16
    10a0:	83 a5       	ldd	r24, Z+43	; 0x2b
    10a2:	94 a5       	ldd	r25, Z+44	; 0x2c
    10a4:	89 2b       	or	r24, r25
    10a6:	21 f4       	brne	.+8      	; 0x10b0 <MQTTSerialize_connect+0xdc>
    10a8:	87 a5       	ldd	r24, Z+47	; 0x2f
    10aa:	90 a9       	ldd	r25, Z+48	; 0x30
    10ac:	89 2b       	or	r24, r25
    10ae:	11 f0       	breq	.+4      	; 0x10b4 <MQTTSerialize_connect+0xe0>
    10b0:	68 94       	set
    10b2:	f6 f8       	bld	r15, 6
    10b4:	6f 2d       	mov	r22, r15
    10b6:	ce 01       	movw	r24, r28
    10b8:	01 96       	adiw	r24, 0x01	; 1
    10ba:	b4 d0       	rcall	.+360    	; 0x1224 <writeChar>
    10bc:	f8 01       	movw	r30, r16
    10be:	65 85       	ldd	r22, Z+13	; 0x0d
    10c0:	76 85       	ldd	r23, Z+14	; 0x0e
    10c2:	ce 01       	movw	r24, r28
    10c4:	01 96       	adiw	r24, 0x01	; 1
    10c6:	b8 d0       	rcall	.+368    	; 0x1238 <writeInt>
    10c8:	f8 01       	movw	r30, r16
    10ca:	27 81       	ldd	r18, Z+7	; 0x07
    10cc:	30 85       	ldd	r19, Z+8	; 0x08
    10ce:	41 85       	ldd	r20, Z+9	; 0x09
    10d0:	52 85       	ldd	r21, Z+10	; 0x0a
    10d2:	63 85       	ldd	r22, Z+11	; 0x0b
    10d4:	74 85       	ldd	r23, Z+12	; 0x0c
    10d6:	ce 01       	movw	r24, r28
    10d8:	01 96       	adiw	r24, 0x01	; 1
    10da:	f2 d0       	rcall	.+484    	; 0x12c0 <writeMQTTString>
    10dc:	f8 01       	movw	r30, r16
    10de:	80 89       	ldd	r24, Z+16	; 0x10
    10e0:	88 23       	and	r24, r24
    10e2:	99 f0       	breq	.+38     	; 0x110a <MQTTSerialize_connect+0x136>
    10e4:	27 89       	ldd	r18, Z+23	; 0x17
    10e6:	30 8d       	ldd	r19, Z+24	; 0x18
    10e8:	41 8d       	ldd	r20, Z+25	; 0x19
    10ea:	52 8d       	ldd	r21, Z+26	; 0x1a
    10ec:	63 8d       	ldd	r22, Z+27	; 0x1b
    10ee:	74 8d       	ldd	r23, Z+28	; 0x1c
    10f0:	ce 01       	movw	r24, r28
    10f2:	01 96       	adiw	r24, 0x01	; 1
    10f4:	e5 d0       	rcall	.+458    	; 0x12c0 <writeMQTTString>
    10f6:	f8 01       	movw	r30, r16
    10f8:	25 8d       	ldd	r18, Z+29	; 0x1d
    10fa:	36 8d       	ldd	r19, Z+30	; 0x1e
    10fc:	47 8d       	ldd	r20, Z+31	; 0x1f
    10fe:	50 a1       	ldd	r21, Z+32	; 0x20
    1100:	61 a1       	ldd	r22, Z+33	; 0x21
    1102:	72 a1       	ldd	r23, Z+34	; 0x22
    1104:	ce 01       	movw	r24, r28
    1106:	01 96       	adiw	r24, 0x01	; 1
    1108:	db d0       	rcall	.+438    	; 0x12c0 <writeMQTTString>
    110a:	ef 2c       	mov	r14, r15
    110c:	ff 20       	and	r15, r15
    110e:	54 f4       	brge	.+20     	; 0x1124 <MQTTSerialize_connect+0x150>
    1110:	f8 01       	movw	r30, r16
    1112:	25 a1       	ldd	r18, Z+37	; 0x25
    1114:	36 a1       	ldd	r19, Z+38	; 0x26
    1116:	47 a1       	ldd	r20, Z+39	; 0x27
    1118:	50 a5       	ldd	r21, Z+40	; 0x28
    111a:	61 a5       	ldd	r22, Z+41	; 0x29
    111c:	72 a5       	ldd	r23, Z+42	; 0x2a
    111e:	ce 01       	movw	r24, r28
    1120:	01 96       	adiw	r24, 0x01	; 1
    1122:	ce d0       	rcall	.+412    	; 0x12c0 <writeMQTTString>
    1124:	e6 fe       	sbrs	r14, 6
    1126:	0a c0       	rjmp	.+20     	; 0x113c <MQTTSerialize_connect+0x168>
    1128:	f8 01       	movw	r30, r16
    112a:	23 a5       	ldd	r18, Z+43	; 0x2b
    112c:	34 a5       	ldd	r19, Z+44	; 0x2c
    112e:	45 a5       	ldd	r20, Z+45	; 0x2d
    1130:	56 a5       	ldd	r21, Z+46	; 0x2e
    1132:	67 a5       	ldd	r22, Z+47	; 0x2f
    1134:	70 a9       	ldd	r23, Z+48	; 0x30
    1136:	ce 01       	movw	r24, r28
    1138:	01 96       	adiw	r24, 0x01	; 1
    113a:	c2 d0       	rcall	.+388    	; 0x12c0 <writeMQTTString>
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	9a 81       	ldd	r25, Y+2	; 0x02
    1140:	8c 19       	sub	r24, r12
    1142:	9d 09       	sbc	r25, r13
    1144:	02 c0       	rjmp	.+4      	; 0x114a <MQTTSerialize_connect+0x176>
    1146:	8e ef       	ldi	r24, 0xFE	; 254
    1148:	9f ef       	ldi	r25, 0xFF	; 255
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	df 91       	pop	r29
    1150:	cf 91       	pop	r28
    1152:	1f 91       	pop	r17
    1154:	0f 91       	pop	r16
    1156:	ff 90       	pop	r15
    1158:	ef 90       	pop	r14
    115a:	df 90       	pop	r13
    115c:	cf 90       	pop	r12
    115e:	bf 90       	pop	r11
    1160:	af 90       	pop	r10
    1162:	08 95       	ret

00001164 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
    1164:	0f 93       	push	r16
    1166:	1f 93       	push	r17
    1168:	cf 93       	push	r28
    116a:	df 93       	push	r29
    116c:	00 d0       	rcall	.+0      	; 0x116e <MQTTSerialize_zero+0xa>
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
    1172:	9a 83       	std	Y+2, r25	; 0x02
    1174:	89 83       	std	Y+1, r24	; 0x01

	FUNC_ENTRY;
	if (buflen < 2)
    1176:	62 30       	cpi	r22, 0x02	; 2
    1178:	71 05       	cpc	r23, r1
    117a:	9c f0       	brlt	.+38     	; 0x11a2 <MQTTSerialize_zero+0x3e>
    117c:	8c 01       	movw	r16, r24
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
    117e:	64 2f       	mov	r22, r20
    1180:	62 95       	swap	r22
    1182:	60 7f       	andi	r22, 0xF0	; 240
	writeChar(&ptr, header.byte); /* write header */
    1184:	ce 01       	movw	r24, r28
    1186:	01 96       	adiw	r24, 0x01	; 1
    1188:	4d d0       	rcall	.+154    	; 0x1224 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
    118a:	60 e0       	ldi	r22, 0x00	; 0
    118c:	70 e0       	ldi	r23, 0x00	; 0
    118e:	89 81       	ldd	r24, Y+1	; 0x01
    1190:	9a 81       	ldd	r25, Y+2	; 0x02
    1192:	13 d0       	rcall	.+38     	; 0x11ba <MQTTPacket_encode>
	rc = ptr - buf;
    1194:	29 81       	ldd	r18, Y+1	; 0x01
    1196:	3a 81       	ldd	r19, Y+2	; 0x02
    1198:	82 0f       	add	r24, r18
    119a:	93 1f       	adc	r25, r19
    119c:	80 1b       	sub	r24, r16
    119e:	91 0b       	sbc	r25, r17
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <MQTTSerialize_zero+0x42>
	unsigned char *ptr = buf;

	FUNC_ENTRY;
	if (buflen < 2)
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    11a2:	8e ef       	ldi	r24, 0xFE	; 254
    11a4:	9f ef       	ldi	r25, 0xFF	; 255
	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
	rc = ptr - buf;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	df 91       	pop	r29
    11ac:	cf 91       	pop	r28
    11ae:	1f 91       	pop	r17
    11b0:	0f 91       	pop	r16
    11b2:	08 95       	ret

000011b4 <MQTTSerialize_disconnect>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
    11b4:	4e e0       	ldi	r20, 0x0E	; 14
    11b6:	d6 cf       	rjmp	.-84     	; 0x1164 <MQTTSerialize_zero>
}
    11b8:	08 95       	ret

000011ba <MQTTPacket_encode>:
		}
	}
	mqttstring->cstring = NULL;
	FUNC_EXIT_RC(rc);
	return rc;
}
    11ba:	dc 01       	movw	r26, r24
    11bc:	e0 e0       	ldi	r30, 0x00	; 0
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	9b 01       	movw	r18, r22
    11c2:	2f 77       	andi	r18, 0x7F	; 127
    11c4:	30 78       	andi	r19, 0x80	; 128
    11c6:	33 23       	and	r19, r19
    11c8:	34 f4       	brge	.+12     	; 0x11d6 <MQTTPacket_encode+0x1c>
    11ca:	21 50       	subi	r18, 0x01	; 1
    11cc:	31 09       	sbc	r19, r1
    11ce:	20 68       	ori	r18, 0x80	; 128
    11d0:	3f 6f       	ori	r19, 0xFF	; 255
    11d2:	2f 5f       	subi	r18, 0xFF	; 255
    11d4:	3f 4f       	sbci	r19, 0xFF	; 255
    11d6:	ab 01       	movw	r20, r22
    11d8:	77 23       	and	r23, r23
    11da:	14 f4       	brge	.+4      	; 0x11e0 <MQTTPacket_encode+0x26>
    11dc:	41 58       	subi	r20, 0x81	; 129
    11de:	5f 4f       	sbci	r21, 0xFF	; 255
    11e0:	ba 01       	movw	r22, r20
    11e2:	66 0f       	add	r22, r22
    11e4:	67 2f       	mov	r22, r23
    11e6:	66 1f       	adc	r22, r22
    11e8:	77 0b       	sbc	r23, r23
    11ea:	16 16       	cp	r1, r22
    11ec:	17 06       	cpc	r1, r23
    11ee:	24 f4       	brge	.+8      	; 0x11f8 <MQTTPacket_encode+0x3e>
    11f0:	31 96       	adiw	r30, 0x01	; 1
    11f2:	20 68       	ori	r18, 0x80	; 128
    11f4:	2d 93       	st	X+, r18
    11f6:	e4 cf       	rjmp	.-56     	; 0x11c0 <MQTTPacket_encode+0x6>
    11f8:	dc 01       	movw	r26, r24
    11fa:	ae 0f       	add	r26, r30
    11fc:	bf 1f       	adc	r27, r31
    11fe:	2c 93       	st	X, r18
    1200:	cf 01       	movw	r24, r30
    1202:	01 96       	adiw	r24, 0x01	; 1
    1204:	08 95       	ret

00001206 <MQTTPacket_len>:
    1206:	9c 01       	movw	r18, r24
    1208:	2f 5f       	subi	r18, 0xFF	; 255
    120a:	3f 4f       	sbci	r19, 0xFF	; 255
    120c:	20 38       	cpi	r18, 0x80	; 128
    120e:	31 05       	cpc	r19, r1
    1210:	14 f4       	brge	.+4      	; 0x1216 <MQTTPacket_len+0x10>
    1212:	02 96       	adiw	r24, 0x02	; 2
    1214:	08 95       	ret
    1216:	21 15       	cp	r18, r1
    1218:	30 44       	sbci	r19, 0x40	; 64
    121a:	14 f4       	brge	.+4      	; 0x1220 <MQTTPacket_len+0x1a>
    121c:	03 96       	adiw	r24, 0x03	; 3
    121e:	08 95       	ret
    1220:	04 96       	adiw	r24, 0x04	; 4
    1222:	08 95       	ret

00001224 <writeChar>:
    1224:	fc 01       	movw	r30, r24
    1226:	a0 81       	ld	r26, Z
    1228:	b1 81       	ldd	r27, Z+1	; 0x01
    122a:	6c 93       	st	X, r22
    122c:	80 81       	ld	r24, Z
    122e:	91 81       	ldd	r25, Z+1	; 0x01
    1230:	01 96       	adiw	r24, 0x01	; 1
    1232:	91 83       	std	Z+1, r25	; 0x01
    1234:	80 83       	st	Z, r24
    1236:	08 95       	ret

00001238 <writeInt>:
    1238:	fc 01       	movw	r30, r24
    123a:	a0 81       	ld	r26, Z
    123c:	b1 81       	ldd	r27, Z+1	; 0x01
    123e:	cb 01       	movw	r24, r22
    1240:	77 23       	and	r23, r23
    1242:	14 f4       	brge	.+4      	; 0x1248 <writeInt+0x10>
    1244:	81 50       	subi	r24, 0x01	; 1
    1246:	9f 4f       	sbci	r25, 0xFF	; 255
    1248:	9c 93       	st	X, r25
    124a:	a0 81       	ld	r26, Z
    124c:	b1 81       	ldd	r27, Z+1	; 0x01
    124e:	cd 01       	movw	r24, r26
    1250:	01 96       	adiw	r24, 0x01	; 1
    1252:	91 83       	std	Z+1, r25	; 0x01
    1254:	80 83       	st	Z, r24
    1256:	70 78       	andi	r23, 0x80	; 128
    1258:	77 23       	and	r23, r23
    125a:	2c f4       	brge	.+10     	; 0x1266 <writeInt+0x2e>
    125c:	61 50       	subi	r22, 0x01	; 1
    125e:	71 09       	sbc	r23, r1
    1260:	7f 6f       	ori	r23, 0xFF	; 255
    1262:	6f 5f       	subi	r22, 0xFF	; 255
    1264:	7f 4f       	sbci	r23, 0xFF	; 255
    1266:	11 96       	adiw	r26, 0x01	; 1
    1268:	6c 93       	st	X, r22
    126a:	80 81       	ld	r24, Z
    126c:	91 81       	ldd	r25, Z+1	; 0x01
    126e:	01 96       	adiw	r24, 0x01	; 1
    1270:	91 83       	std	Z+1, r25	; 0x01
    1272:	80 83       	st	Z, r24
    1274:	08 95       	ret

00001276 <writeCString>:
    1276:	ef 92       	push	r14
    1278:	ff 92       	push	r15
    127a:	0f 93       	push	r16
    127c:	1f 93       	push	r17
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
    1282:	8c 01       	movw	r16, r24
    1284:	7b 01       	movw	r14, r22
    1286:	eb 01       	movw	r28, r22
    1288:	09 90       	ld	r0, Y+
    128a:	00 20       	and	r0, r0
    128c:	e9 f7       	brne	.-6      	; 0x1288 <writeCString+0x12>
    128e:	21 97       	sbiw	r28, 0x01	; 1
    1290:	c6 1b       	sub	r28, r22
    1292:	d7 0b       	sbc	r29, r23
    1294:	be 01       	movw	r22, r28
    1296:	d0 df       	rcall	.-96     	; 0x1238 <writeInt>
    1298:	ae 01       	movw	r20, r28
    129a:	b7 01       	movw	r22, r14
    129c:	f8 01       	movw	r30, r16
    129e:	80 81       	ld	r24, Z
    12a0:	91 81       	ldd	r25, Z+1	; 0x01
    12a2:	49 d5       	rcall	.+2706   	; 0x1d36 <memcpy>
    12a4:	f8 01       	movw	r30, r16
    12a6:	80 81       	ld	r24, Z
    12a8:	91 81       	ldd	r25, Z+1	; 0x01
    12aa:	c8 0f       	add	r28, r24
    12ac:	d9 1f       	adc	r29, r25
    12ae:	d1 83       	std	Z+1, r29	; 0x01
    12b0:	c0 83       	st	Z, r28
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	1f 91       	pop	r17
    12b8:	0f 91       	pop	r16
    12ba:	ff 90       	pop	r15
    12bc:	ef 90       	pop	r14
    12be:	08 95       	ret

000012c0 <writeMQTTString>:
    12c0:	ef 92       	push	r14
    12c2:	ff 92       	push	r15
    12c4:	0f 93       	push	r16
    12c6:	1f 93       	push	r17
    12c8:	cf 93       	push	r28
    12ca:	df 93       	push	r29
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <writeMQTTString+0xe>
    12ce:	00 d0       	rcall	.+0      	; 0x12d0 <writeMQTTString+0x10>
    12d0:	00 d0       	rcall	.+0      	; 0x12d2 <writeMQTTString+0x12>
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	7c 01       	movw	r14, r24
    12d8:	29 83       	std	Y+1, r18	; 0x01
    12da:	3a 83       	std	Y+2, r19	; 0x02
    12dc:	4b 83       	std	Y+3, r20	; 0x03
    12de:	5c 83       	std	Y+4, r21	; 0x04
    12e0:	6d 83       	std	Y+5, r22	; 0x05
    12e2:	7e 83       	std	Y+6, r23	; 0x06
    12e4:	0b 81       	ldd	r16, Y+3	; 0x03
    12e6:	1c 81       	ldd	r17, Y+4	; 0x04
    12e8:	10 16       	cp	r1, r16
    12ea:	11 06       	cpc	r1, r17
    12ec:	8c f4       	brge	.+34     	; 0x1310 <writeMQTTString+0x50>
    12ee:	b8 01       	movw	r22, r16
    12f0:	a3 df       	rcall	.-186    	; 0x1238 <writeInt>
    12f2:	6d 81       	ldd	r22, Y+5	; 0x05
    12f4:	7e 81       	ldd	r23, Y+6	; 0x06
    12f6:	a8 01       	movw	r20, r16
    12f8:	f7 01       	movw	r30, r14
    12fa:	80 81       	ld	r24, Z
    12fc:	91 81       	ldd	r25, Z+1	; 0x01
    12fe:	1b d5       	rcall	.+2614   	; 0x1d36 <memcpy>
    1300:	f7 01       	movw	r30, r14
    1302:	80 81       	ld	r24, Z
    1304:	91 81       	ldd	r25, Z+1	; 0x01
    1306:	08 0f       	add	r16, r24
    1308:	19 1f       	adc	r17, r25
    130a:	11 83       	std	Z+1, r17	; 0x01
    130c:	00 83       	st	Z, r16
    130e:	0a c0       	rjmp	.+20     	; 0x1324 <writeMQTTString+0x64>
    1310:	69 81       	ldd	r22, Y+1	; 0x01
    1312:	7a 81       	ldd	r23, Y+2	; 0x02
    1314:	61 15       	cp	r22, r1
    1316:	71 05       	cpc	r23, r1
    1318:	11 f0       	breq	.+4      	; 0x131e <writeMQTTString+0x5e>
    131a:	ad df       	rcall	.-166    	; 0x1276 <writeCString>
    131c:	03 c0       	rjmp	.+6      	; 0x1324 <writeMQTTString+0x64>
    131e:	60 e0       	ldi	r22, 0x00	; 0
    1320:	70 e0       	ldi	r23, 0x00	; 0
    1322:	8a df       	rcall	.-236    	; 0x1238 <writeInt>
    1324:	26 96       	adiw	r28, 0x06	; 6
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	f8 94       	cli
    132a:	de bf       	out	0x3e, r29	; 62
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	cd bf       	out	0x3d, r28	; 61
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	1f 91       	pop	r17
    1336:	0f 91       	pop	r16
    1338:	ff 90       	pop	r15
    133a:	ef 90       	pop	r14
    133c:	08 95       	ret

0000133e <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
    133e:	cf 93       	push	r28
    1340:	df 93       	push	r29
    1342:	00 d0       	rcall	.+0      	; 0x1344 <MQTTstrlen+0x6>
    1344:	00 d0       	rcall	.+0      	; 0x1346 <MQTTstrlen+0x8>
    1346:	00 d0       	rcall	.+0      	; 0x1348 <MQTTstrlen+0xa>
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    134c:	49 83       	std	Y+1, r20	; 0x01
    134e:	5a 83       	std	Y+2, r21	; 0x02
    1350:	6b 83       	std	Y+3, r22	; 0x03
    1352:	7c 83       	std	Y+4, r23	; 0x04
    1354:	8d 83       	std	Y+5, r24	; 0x05
    1356:	9e 83       	std	Y+6, r25	; 0x06
    1358:	a9 81       	ldd	r26, Y+1	; 0x01
    135a:	ba 81       	ldd	r27, Y+2	; 0x02
	int rc = 0;

	if (mqttstring.cstring)
    135c:	10 97       	sbiw	r26, 0x00	; 0
    135e:	49 f0       	breq	.+18     	; 0x1372 <MQTTstrlen+0x34>
		rc = strlen(mqttstring.cstring);
    1360:	fd 01       	movw	r30, r26
    1362:	01 90       	ld	r0, Z+
    1364:	00 20       	and	r0, r0
    1366:	e9 f7       	brne	.-6      	; 0x1362 <MQTTstrlen+0x24>
    1368:	31 97       	sbiw	r30, 0x01	; 1
    136a:	cf 01       	movw	r24, r30
    136c:	8a 1b       	sub	r24, r26
    136e:	9b 0b       	sbc	r25, r27
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <MQTTstrlen+0x38>
	else
		rc = mqttstring.lenstring.len;
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	9c 81       	ldd	r25, Y+4	; 0x04
	return rc;
}
    1376:	26 96       	adiw	r28, 0x06	; 6
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	f8 94       	cli
    137c:	de bf       	out	0x3e, r29	; 62
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	cd bf       	out	0x3d, r28	; 61
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	08 95       	ret

00001388 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
    1388:	ef 92       	push	r14
    138a:	ff 92       	push	r15
    138c:	0f 93       	push	r16
    138e:	1f 93       	push	r17
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
    1394:	00 d0       	rcall	.+0      	; 0x1396 <MQTTSerialize_publishLength+0xe>
    1396:	00 d0       	rcall	.+0      	; 0x1398 <MQTTSerialize_publishLength+0x10>
    1398:	00 d0       	rcall	.+0      	; 0x139a <MQTTSerialize_publishLength+0x12>
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	7c 01       	movw	r14, r24
    13a0:	f4 2f       	mov	r31, r20
    13a2:	e5 2f       	mov	r30, r21
    13a4:	86 2f       	mov	r24, r22
    13a6:	97 2f       	mov	r25, r23
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
    13a8:	42 2f       	mov	r20, r18
    13aa:	53 2f       	mov	r21, r19
    13ac:	6f 2f       	mov	r22, r31
    13ae:	7e 2f       	mov	r23, r30
    13b0:	c6 df       	rcall	.-116    	; 0x133e <MQTTstrlen>
    13b2:	02 96       	adiw	r24, 0x02	; 2
    13b4:	80 0f       	add	r24, r16
    13b6:	91 1f       	adc	r25, r17
	if (qos > 0)
    13b8:	1e 14       	cp	r1, r14
    13ba:	1f 04       	cpc	r1, r15
    13bc:	0c f4       	brge	.+2      	; 0x13c0 <MQTTSerialize_publishLength+0x38>
		len += 2; /* packetid */
    13be:	02 96       	adiw	r24, 0x02	; 2
	return len;
}
    13c0:	26 96       	adiw	r28, 0x06	; 6
    13c2:	0f b6       	in	r0, 0x3f	; 63
    13c4:	f8 94       	cli
    13c6:	de bf       	out	0x3e, r29	; 62
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	cd bf       	out	0x3d, r28	; 61
    13cc:	df 91       	pop	r29
    13ce:	cf 91       	pop	r28
    13d0:	1f 91       	pop	r17
    13d2:	0f 91       	pop	r16
    13d4:	ff 90       	pop	r15
    13d6:	ef 90       	pop	r14
    13d8:	08 95       	ret

000013da <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
    13da:	2f 92       	push	r2
    13dc:	3f 92       	push	r3
    13de:	4f 92       	push	r4
    13e0:	5f 92       	push	r5
    13e2:	6f 92       	push	r6
    13e4:	7f 92       	push	r7
    13e6:	8f 92       	push	r8
    13e8:	9f 92       	push	r9
    13ea:	af 92       	push	r10
    13ec:	bf 92       	push	r11
    13ee:	cf 92       	push	r12
    13f0:	df 92       	push	r13
    13f2:	ef 92       	push	r14
    13f4:	ff 92       	push	r15
    13f6:	0f 93       	push	r16
    13f8:	1f 93       	push	r17
    13fa:	cf 93       	push	r28
    13fc:	df 93       	push	r29
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
    1402:	2a 97       	sbiw	r28, 0x0a	; 10
    1404:	0f b6       	in	r0, 0x3f	; 63
    1406:	f8 94       	cli
    1408:	de bf       	out	0x3e, r29	; 62
    140a:	0f be       	out	0x3f, r0	; 63
    140c:	cd bf       	out	0x3d, r28	; 61
    140e:	2c 01       	movw	r4, r24
    1410:	1b 01       	movw	r2, r22
    1412:	49 87       	std	Y+9, r20	; 0x09
    1414:	39 01       	movw	r6, r18
    1416:	0a 87       	std	Y+10, r16	; 0x0a
    1418:	28 2d       	mov	r18, r8
    141a:	8b 82       	std	Y+3, r8	; 0x03
    141c:	39 2d       	mov	r19, r9
    141e:	9c 82       	std	Y+4, r9	; 0x04
    1420:	4a 2d       	mov	r20, r10
    1422:	ad 82       	std	Y+5, r10	; 0x05
    1424:	5b 2d       	mov	r21, r11
    1426:	be 82       	std	Y+6, r11	; 0x06
    1428:	6c 2d       	mov	r22, r12
    142a:	cf 82       	std	Y+7, r12	; 0x07
    142c:	7d 2d       	mov	r23, r13
    142e:	d8 86       	std	Y+8, r13	; 0x08
    1430:	c9 a0       	ldd	r12, Y+33	; 0x21
    1432:	da a0       	ldd	r13, Y+34	; 0x22
	unsigned char *ptr = buf;
    1434:	9a 83       	std	Y+2, r25	; 0x02
    1436:	89 83       	std	Y+1, r24	; 0x01
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
    1438:	86 01       	movw	r16, r12
    143a:	c3 01       	movw	r24, r6
    143c:	a5 df       	rcall	.-182    	; 0x1388 <MQTTSerialize_publishLength>
    143e:	8c 01       	movw	r16, r24
    1440:	e2 de       	rcall	.-572    	; 0x1206 <MQTTPacket_len>
    1442:	28 16       	cp	r2, r24
    1444:	39 06       	cpc	r3, r25
    1446:	b4 f1       	brlt	.+108    	; 0x14b4 <MQTTSerialize_publish+0xda>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
    1448:	60 e3       	ldi	r22, 0x30	; 48
	header.bits.dup = dup;
    144a:	89 85       	ldd	r24, Y+9	; 0x09
    144c:	80 fb       	bst	r24, 0
    144e:	63 f9       	bld	r22, 3
	header.bits.qos = qos;
    1450:	86 2d       	mov	r24, r6
    1452:	83 70       	andi	r24, 0x03	; 3
    1454:	88 0f       	add	r24, r24
    1456:	69 7f       	andi	r22, 0xF9	; 249
    1458:	68 2b       	or	r22, r24
	header.bits.retain = retained;
    145a:	8a 85       	ldd	r24, Y+10	; 0x0a
    145c:	80 fb       	bst	r24, 0
	writeChar(&ptr, header.byte); /* write header */
    145e:	60 f9       	bld	r22, 0
    1460:	ce 01       	movw	r24, r28

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
    1462:	01 96       	adiw	r24, 0x01	; 1
    1464:	df de       	rcall	.-578    	; 0x1224 <writeChar>
    1466:	b8 01       	movw	r22, r16
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	9a 81       	ldd	r25, Y+2	; 0x02
    146c:	a6 de       	rcall	.-692    	; 0x11ba <MQTTPacket_encode>
    146e:	29 81       	ldd	r18, Y+1	; 0x01
    1470:	3a 81       	ldd	r19, Y+2	; 0x02
    1472:	82 0f       	add	r24, r18
    1474:	93 1f       	adc	r25, r19

	writeMQTTString(&ptr, topicName);
    1476:	9a 83       	std	Y+2, r25	; 0x02
    1478:	89 83       	std	Y+1, r24	; 0x01
    147a:	2b 81       	ldd	r18, Y+3	; 0x03
    147c:	3c 81       	ldd	r19, Y+4	; 0x04
    147e:	4d 81       	ldd	r20, Y+5	; 0x05
    1480:	5e 81       	ldd	r21, Y+6	; 0x06
    1482:	6f 81       	ldd	r22, Y+7	; 0x07
    1484:	78 85       	ldd	r23, Y+8	; 0x08
    1486:	ce 01       	movw	r24, r28

	if (qos > 0)
    1488:	01 96       	adiw	r24, 0x01	; 1
    148a:	1a df       	rcall	.-460    	; 0x12c0 <writeMQTTString>
		writeInt(&ptr, packetid);
    148c:	16 14       	cp	r1, r6
    148e:	17 04       	cpc	r1, r7
    1490:	24 f4       	brge	.+8      	; 0x149a <MQTTSerialize_publish+0xc0>
    1492:	b7 01       	movw	r22, r14

	memcpy(ptr, payload, payloadlen);
    1494:	ce 01       	movw	r24, r28
    1496:	01 96       	adiw	r24, 0x01	; 1
    1498:	cf de       	rcall	.-610    	; 0x1238 <writeInt>
    149a:	a6 01       	movw	r20, r12
    149c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    149e:	78 a1       	ldd	r23, Y+32	; 0x20
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
	ptr += payloadlen;

	rc = ptr - buf;
    14a2:	9a 81       	ldd	r25, Y+2	; 0x02
    14a4:	48 d4       	rcall	.+2192   	; 0x1d36 <memcpy>
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	9a 81       	ldd	r25, Y+2	; 0x02
    14aa:	8c 0d       	add	r24, r12
    14ac:	9d 1d       	adc	r25, r13
    14ae:	84 19       	sub	r24, r4
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    14b0:	95 09       	sbc	r25, r5
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <MQTTSerialize_publish+0xde>
	rc = ptr - buf;

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    14b4:	8e ef       	ldi	r24, 0xFE	; 254
    14b6:	9f ef       	ldi	r25, 0xFF	; 255
    14b8:	2a 96       	adiw	r28, 0x0a	; 10
    14ba:	0f b6       	in	r0, 0x3f	; 63
    14bc:	f8 94       	cli
    14be:	de bf       	out	0x3e, r29	; 62
    14c0:	0f be       	out	0x3f, r0	; 63
    14c2:	cd bf       	out	0x3d, r28	; 61
    14c4:	df 91       	pop	r29
    14c6:	cf 91       	pop	r28
    14c8:	1f 91       	pop	r17
    14ca:	0f 91       	pop	r16
    14cc:	ff 90       	pop	r15
    14ce:	ef 90       	pop	r14
    14d0:	df 90       	pop	r13
    14d2:	cf 90       	pop	r12
    14d4:	bf 90       	pop	r11
    14d6:	af 90       	pop	r10
    14d8:	9f 90       	pop	r9
    14da:	8f 90       	pop	r8
    14dc:	7f 90       	pop	r7
    14de:	6f 90       	pop	r6
    14e0:	5f 90       	pop	r5
    14e2:	4f 90       	pop	r4
    14e4:	3f 90       	pop	r3
    14e6:	2f 90       	pop	r2
    14e8:	08 95       	ret

000014ea <mqtt_packet>:
#include "string.h"
#include "MQTT_functions.h" 

/////////////MQTT////////////////////
int mqtt_packet(char *payload, char *package, int buflen)
{
    14ea:	2f 92       	push	r2
    14ec:	3f 92       	push	r3
    14ee:	4f 92       	push	r4
    14f0:	5f 92       	push	r5
    14f2:	6f 92       	push	r6
    14f4:	7f 92       	push	r7
    14f6:	8f 92       	push	r8
    14f8:	9f 92       	push	r9
    14fa:	af 92       	push	r10
    14fc:	bf 92       	push	r11
    14fe:	cf 92       	push	r12
    1500:	df 92       	push	r13
    1502:	ef 92       	push	r14
    1504:	ff 92       	push	r15
    1506:	0f 93       	push	r16
    1508:	1f 93       	push	r17
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	e7 97       	sbiw	r28, 0x37	; 55
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	f8 94       	cli
    1518:	de bf       	out	0x3e, r29	; 62
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	cd bf       	out	0x3d, r28	; 61
    151e:	f8 2e       	mov	r15, r24
    1520:	e9 2e       	mov	r14, r25
    1522:	1b 01       	movw	r2, r22
    1524:	2a 01       	movw	r4, r20
	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
    1526:	81 e3       	ldi	r24, 0x31	; 49
    1528:	e9 e0       	ldi	r30, 0x09	; 9
    152a:	f1 e0       	ldi	r31, 0x01	; 1
    152c:	de 01       	movw	r26, r28
    152e:	11 96       	adiw	r26, 0x01	; 1
    1530:	01 90       	ld	r0, Z+
    1532:	0d 92       	st	X+, r0
    1534:	8a 95       	dec	r24
    1536:	e1 f7       	brne	.-8      	; 0x1530 <mqtt_packet+0x46>
	
	//volatile int buflen = sizeof(&package);
	char buf[256];
	//buflen = sizeof(buf);
	MQTTString topicString = MQTTString_initializer;
    1538:	1d aa       	std	Y+53, r1	; 0x35
    153a:	1c aa       	std	Y+52, r1	; 0x34
    153c:	1f aa       	std	Y+55, r1	; 0x37
    153e:	1e aa       	std	Y+54, r1	; 0x36
	
	int payloadlen = strlen(payload);
    1540:	ef 2d       	mov	r30, r15
    1542:	f9 2f       	mov	r31, r25
    1544:	df 01       	movw	r26, r30
    1546:	0d 90       	ld	r0, X+
    1548:	00 20       	and	r0, r0
    154a:	e9 f7       	brne	.-6      	; 0x1546 <mqtt_packet+0x5c>
    154c:	11 97       	sbiw	r26, 0x01	; 1
    154e:	8d 01       	movw	r16, r26
    1550:	0e 1b       	sub	r16, r30
    1552:	1f 0b       	sbc	r17, r31
	int len = 0;
	
	data.clientID.cstring = "LE";
    1554:	87 ea       	ldi	r24, 0xA7	; 167
    1556:	93 e0       	ldi	r25, 0x03	; 3
    1558:	99 87       	std	Y+9, r25	; 0x09
    155a:	88 87       	std	Y+8, r24	; 0x08
	data.keepAliveInterval = 20;
    155c:	84 e1       	ldi	r24, 0x14	; 20
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	9f 87       	std	Y+15, r25	; 0x0f
    1562:	8e 87       	std	Y+14, r24	; 0x0e
	data.cleansession = 1;
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	88 8b       	std	Y+16, r24	; 0x10
	data.username.cstring = "";
    1568:	83 ea       	ldi	r24, 0xA3	; 163
    156a:	92 e0       	ldi	r25, 0x02	; 2
    156c:	9f a3       	std	Y+39, r25	; 0x27
    156e:	8e a3       	std	Y+38, r24	; 0x26
	data.password.cstring = "";
    1570:	9d a7       	std	Y+45, r25	; 0x2d
    1572:	8c a7       	std	Y+44, r24	; 0x2c
	data.MQTTVersion = 4;
    1574:	84 e0       	ldi	r24, 0x04	; 4
    1576:	8f 83       	std	Y+7, r24	; 0x07

	len = MQTTSerialize_connect((unsigned char *)package, buflen, &data);
    1578:	ae 01       	movw	r20, r28
    157a:	4f 5f       	subi	r20, 0xFF	; 255
    157c:	5f 4f       	sbci	r21, 0xFF	; 255
    157e:	b2 01       	movw	r22, r4
    1580:	c1 01       	movw	r24, r2
    1582:	28 dd       	rcall	.-1456   	; 0xfd4 <MQTTSerialize_connect>
    1584:	3c 01       	movw	r6, r24
	
	topicString.cstring = "LE/0"; //MAKE A GENERAL CONFIGUREATION OF THIS PARAMETER
    1586:	8a ea       	ldi	r24, 0xAA	; 170
    1588:	93 e0       	ldi	r25, 0x03	; 3
    158a:	9b ab       	std	Y+51, r25	; 0x33
    158c:	8a ab       	std	Y+50, r24	; 0x32
	
	len += MQTTSerialize_publish((unsigned char *)(package + len), buflen - len, 0, 0, 0, 0, topicString, (unsigned char *)payload, payloadlen);
    158e:	b2 01       	movw	r22, r4
    1590:	66 19       	sub	r22, r6
    1592:	77 09       	sbc	r23, r7
    1594:	1f 93       	push	r17
    1596:	0f 93       	push	r16
    1598:	ef 92       	push	r14
    159a:	ff 92       	push	r15
    159c:	8a a8       	ldd	r8, Y+50	; 0x32
    159e:	9b a8       	ldd	r9, Y+51	; 0x33
    15a0:	ac a8       	ldd	r10, Y+52	; 0x34
    15a2:	bd a8       	ldd	r11, Y+53	; 0x35
    15a4:	ce a8       	ldd	r12, Y+54	; 0x36
    15a6:	df a8       	ldd	r13, Y+55	; 0x37
    15a8:	e1 2c       	mov	r14, r1
    15aa:	f1 2c       	mov	r15, r1
    15ac:	00 e0       	ldi	r16, 0x00	; 0
    15ae:	20 e0       	ldi	r18, 0x00	; 0
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	40 e0       	ldi	r20, 0x00	; 0
    15b4:	c1 01       	movw	r24, r2
    15b6:	86 0d       	add	r24, r6
    15b8:	97 1d       	adc	r25, r7
    15ba:	0f df       	rcall	.-482    	; 0x13da <MQTTSerialize_publish>
    15bc:	68 0e       	add	r6, r24
    15be:	79 1e       	adc	r7, r25
		
	len += MQTTSerialize_disconnect((unsigned char *)(package + len), buflen - len);
    15c0:	b2 01       	movw	r22, r4
    15c2:	66 19       	sub	r22, r6
    15c4:	77 09       	sbc	r23, r7
    15c6:	c1 01       	movw	r24, r2
    15c8:	86 0d       	add	r24, r6
    15ca:	97 1d       	adc	r25, r7
    15cc:	f3 dd       	rcall	.-1050   	; 0x11b4 <MQTTSerialize_disconnect>
	
	exit:
	
	//return 0;
	return len;
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
}
    15d6:	86 0d       	add	r24, r6
    15d8:	97 1d       	adc	r25, r7
    15da:	e7 96       	adiw	r28, 0x37	; 55
    15dc:	0f b6       	in	r0, 0x3f	; 63
    15de:	f8 94       	cli
    15e0:	de bf       	out	0x3e, r29	; 62
    15e2:	0f be       	out	0x3f, r0	; 63
    15e4:	cd bf       	out	0x3d, r28	; 61
    15e6:	df 91       	pop	r29
    15e8:	cf 91       	pop	r28
    15ea:	1f 91       	pop	r17
    15ec:	0f 91       	pop	r16
    15ee:	ff 90       	pop	r15
    15f0:	ef 90       	pop	r14
    15f2:	df 90       	pop	r13
    15f4:	cf 90       	pop	r12
    15f6:	bf 90       	pop	r11
    15f8:	af 90       	pop	r10
    15fa:	9f 90       	pop	r9
    15fc:	8f 90       	pop	r8
    15fe:	7f 90       	pop	r7
    1600:	6f 90       	pop	r6
    1602:	5f 90       	pop	r5
    1604:	4f 90       	pop	r4
    1606:	3f 90       	pop	r3
    1608:	2f 90       	pop	r2
    160a:	08 95       	ret

0000160c <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    160c:	08 95       	ret

0000160e <__cmpsf2>:
    160e:	40 d0       	rcall	.+128    	; 0x1690 <__fp_cmp>
    1610:	08 f4       	brcc	.+2      	; 0x1614 <__cmpsf2+0x6>
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	08 95       	ret

00001616 <__floatunsisf>:
    1616:	e8 94       	clt
    1618:	09 c0       	rjmp	.+18     	; 0x162c <__floatsisf+0x12>

0000161a <__floatsisf>:
    161a:	97 fb       	bst	r25, 7
    161c:	3e f4       	brtc	.+14     	; 0x162c <__floatsisf+0x12>
    161e:	90 95       	com	r25
    1620:	80 95       	com	r24
    1622:	70 95       	com	r23
    1624:	61 95       	neg	r22
    1626:	7f 4f       	sbci	r23, 0xFF	; 255
    1628:	8f 4f       	sbci	r24, 0xFF	; 255
    162a:	9f 4f       	sbci	r25, 0xFF	; 255
    162c:	99 23       	and	r25, r25
    162e:	a9 f0       	breq	.+42     	; 0x165a <__floatsisf+0x40>
    1630:	f9 2f       	mov	r31, r25
    1632:	96 e9       	ldi	r25, 0x96	; 150
    1634:	bb 27       	eor	r27, r27
    1636:	93 95       	inc	r25
    1638:	f6 95       	lsr	r31
    163a:	87 95       	ror	r24
    163c:	77 95       	ror	r23
    163e:	67 95       	ror	r22
    1640:	b7 95       	ror	r27
    1642:	f1 11       	cpse	r31, r1
    1644:	f8 cf       	rjmp	.-16     	; 0x1636 <__floatsisf+0x1c>
    1646:	fa f4       	brpl	.+62     	; 0x1686 <__floatsisf+0x6c>
    1648:	bb 0f       	add	r27, r27
    164a:	11 f4       	brne	.+4      	; 0x1650 <__floatsisf+0x36>
    164c:	60 ff       	sbrs	r22, 0
    164e:	1b c0       	rjmp	.+54     	; 0x1686 <__floatsisf+0x6c>
    1650:	6f 5f       	subi	r22, 0xFF	; 255
    1652:	7f 4f       	sbci	r23, 0xFF	; 255
    1654:	8f 4f       	sbci	r24, 0xFF	; 255
    1656:	9f 4f       	sbci	r25, 0xFF	; 255
    1658:	16 c0       	rjmp	.+44     	; 0x1686 <__floatsisf+0x6c>
    165a:	88 23       	and	r24, r24
    165c:	11 f0       	breq	.+4      	; 0x1662 <__floatsisf+0x48>
    165e:	96 e9       	ldi	r25, 0x96	; 150
    1660:	11 c0       	rjmp	.+34     	; 0x1684 <__floatsisf+0x6a>
    1662:	77 23       	and	r23, r23
    1664:	21 f0       	breq	.+8      	; 0x166e <__floatsisf+0x54>
    1666:	9e e8       	ldi	r25, 0x8E	; 142
    1668:	87 2f       	mov	r24, r23
    166a:	76 2f       	mov	r23, r22
    166c:	05 c0       	rjmp	.+10     	; 0x1678 <__floatsisf+0x5e>
    166e:	66 23       	and	r22, r22
    1670:	71 f0       	breq	.+28     	; 0x168e <__floatsisf+0x74>
    1672:	96 e8       	ldi	r25, 0x86	; 134
    1674:	86 2f       	mov	r24, r22
    1676:	70 e0       	ldi	r23, 0x00	; 0
    1678:	60 e0       	ldi	r22, 0x00	; 0
    167a:	2a f0       	brmi	.+10     	; 0x1686 <__floatsisf+0x6c>
    167c:	9a 95       	dec	r25
    167e:	66 0f       	add	r22, r22
    1680:	77 1f       	adc	r23, r23
    1682:	88 1f       	adc	r24, r24
    1684:	da f7       	brpl	.-10     	; 0x167c <__floatsisf+0x62>
    1686:	88 0f       	add	r24, r24
    1688:	96 95       	lsr	r25
    168a:	87 95       	ror	r24
    168c:	97 f9       	bld	r25, 7
    168e:	08 95       	ret

00001690 <__fp_cmp>:
    1690:	99 0f       	add	r25, r25
    1692:	00 08       	sbc	r0, r0
    1694:	55 0f       	add	r21, r21
    1696:	aa 0b       	sbc	r26, r26
    1698:	e0 e8       	ldi	r30, 0x80	; 128
    169a:	fe ef       	ldi	r31, 0xFE	; 254
    169c:	16 16       	cp	r1, r22
    169e:	17 06       	cpc	r1, r23
    16a0:	e8 07       	cpc	r30, r24
    16a2:	f9 07       	cpc	r31, r25
    16a4:	c0 f0       	brcs	.+48     	; 0x16d6 <__fp_cmp+0x46>
    16a6:	12 16       	cp	r1, r18
    16a8:	13 06       	cpc	r1, r19
    16aa:	e4 07       	cpc	r30, r20
    16ac:	f5 07       	cpc	r31, r21
    16ae:	98 f0       	brcs	.+38     	; 0x16d6 <__fp_cmp+0x46>
    16b0:	62 1b       	sub	r22, r18
    16b2:	73 0b       	sbc	r23, r19
    16b4:	84 0b       	sbc	r24, r20
    16b6:	95 0b       	sbc	r25, r21
    16b8:	39 f4       	brne	.+14     	; 0x16c8 <__fp_cmp+0x38>
    16ba:	0a 26       	eor	r0, r26
    16bc:	61 f0       	breq	.+24     	; 0x16d6 <__fp_cmp+0x46>
    16be:	23 2b       	or	r18, r19
    16c0:	24 2b       	or	r18, r20
    16c2:	25 2b       	or	r18, r21
    16c4:	21 f4       	brne	.+8      	; 0x16ce <__fp_cmp+0x3e>
    16c6:	08 95       	ret
    16c8:	0a 26       	eor	r0, r26
    16ca:	09 f4       	brne	.+2      	; 0x16ce <__fp_cmp+0x3e>
    16cc:	a1 40       	sbci	r26, 0x01	; 1
    16ce:	a6 95       	lsr	r26
    16d0:	8f ef       	ldi	r24, 0xFF	; 255
    16d2:	81 1d       	adc	r24, r1
    16d4:	81 1d       	adc	r24, r1
    16d6:	08 95       	ret

000016d8 <__gesf2>:
    16d8:	db df       	rcall	.-74     	; 0x1690 <__fp_cmp>
    16da:	08 f4       	brcc	.+2      	; 0x16de <__gesf2+0x6>
    16dc:	8f ef       	ldi	r24, 0xFF	; 255
    16de:	08 95       	ret

000016e0 <pow>:
    16e0:	fa 01       	movw	r30, r20
    16e2:	ee 0f       	add	r30, r30
    16e4:	ff 1f       	adc	r31, r31
    16e6:	30 96       	adiw	r30, 0x00	; 0
    16e8:	21 05       	cpc	r18, r1
    16ea:	31 05       	cpc	r19, r1
    16ec:	99 f1       	breq	.+102    	; 0x1754 <pow+0x74>
    16ee:	61 15       	cp	r22, r1
    16f0:	71 05       	cpc	r23, r1
    16f2:	61 f4       	brne	.+24     	; 0x170c <pow+0x2c>
    16f4:	80 38       	cpi	r24, 0x80	; 128
    16f6:	bf e3       	ldi	r27, 0x3F	; 63
    16f8:	9b 07       	cpc	r25, r27
    16fa:	49 f1       	breq	.+82     	; 0x174e <pow+0x6e>
    16fc:	68 94       	set
    16fe:	90 38       	cpi	r25, 0x80	; 128
    1700:	81 05       	cpc	r24, r1
    1702:	61 f0       	breq	.+24     	; 0x171c <pow+0x3c>
    1704:	80 38       	cpi	r24, 0x80	; 128
    1706:	bf ef       	ldi	r27, 0xFF	; 255
    1708:	9b 07       	cpc	r25, r27
    170a:	41 f0       	breq	.+16     	; 0x171c <pow+0x3c>
    170c:	99 23       	and	r25, r25
    170e:	42 f5       	brpl	.+80     	; 0x1760 <pow+0x80>
    1710:	ff 3f       	cpi	r31, 0xFF	; 255
    1712:	e1 05       	cpc	r30, r1
    1714:	31 05       	cpc	r19, r1
    1716:	21 05       	cpc	r18, r1
    1718:	11 f1       	breq	.+68     	; 0x175e <pow+0x7e>
    171a:	e8 94       	clt
    171c:	08 94       	sec
    171e:	e7 95       	ror	r30
    1720:	d9 01       	movw	r26, r18
    1722:	aa 23       	and	r26, r26
    1724:	29 f4       	brne	.+10     	; 0x1730 <pow+0x50>
    1726:	ab 2f       	mov	r26, r27
    1728:	be 2f       	mov	r27, r30
    172a:	f8 5f       	subi	r31, 0xF8	; 248
    172c:	d0 f3       	brcs	.-12     	; 0x1722 <pow+0x42>
    172e:	10 c0       	rjmp	.+32     	; 0x1750 <pow+0x70>
    1730:	ff 5f       	subi	r31, 0xFF	; 255
    1732:	70 f4       	brcc	.+28     	; 0x1750 <pow+0x70>
    1734:	a6 95       	lsr	r26
    1736:	e0 f7       	brcc	.-8      	; 0x1730 <pow+0x50>
    1738:	f7 39       	cpi	r31, 0x97	; 151
    173a:	50 f0       	brcs	.+20     	; 0x1750 <pow+0x70>
    173c:	19 f0       	breq	.+6      	; 0x1744 <pow+0x64>
    173e:	ff 3a       	cpi	r31, 0xAF	; 175
    1740:	38 f4       	brcc	.+14     	; 0x1750 <pow+0x70>
    1742:	9f 77       	andi	r25, 0x7F	; 127
    1744:	9f 93       	push	r25
    1746:	0c d0       	rcall	.+24     	; 0x1760 <pow+0x80>
    1748:	0f 90       	pop	r0
    174a:	07 fc       	sbrc	r0, 7
    174c:	90 58       	subi	r25, 0x80	; 128
    174e:	08 95       	ret
    1750:	3e f0       	brts	.+14     	; 0x1760 <pow+0x80>
    1752:	49 c0       	rjmp	.+146    	; 0x17e6 <__fp_nan>
    1754:	60 e0       	ldi	r22, 0x00	; 0
    1756:	70 e0       	ldi	r23, 0x00	; 0
    1758:	80 e8       	ldi	r24, 0x80	; 128
    175a:	9f e3       	ldi	r25, 0x3F	; 63
    175c:	08 95       	ret
    175e:	4f e7       	ldi	r20, 0x7F	; 127
    1760:	9f 77       	andi	r25, 0x7F	; 127
    1762:	5f 93       	push	r21
    1764:	4f 93       	push	r20
    1766:	3f 93       	push	r19
    1768:	2f 93       	push	r18
    176a:	d0 d0       	rcall	.+416    	; 0x190c <log>
    176c:	2f 91       	pop	r18
    176e:	3f 91       	pop	r19
    1770:	4f 91       	pop	r20
    1772:	5f 91       	pop	r21
    1774:	3e d1       	rcall	.+636    	; 0x19f2 <__mulsf3>
    1776:	05 c0       	rjmp	.+10     	; 0x1782 <exp>
    1778:	19 f4       	brne	.+6      	; 0x1780 <pow+0xa0>
    177a:	0e f0       	brts	.+2      	; 0x177e <pow+0x9e>
    177c:	2e c0       	rjmp	.+92     	; 0x17da <__fp_inf>
    177e:	7d c0       	rjmp	.+250    	; 0x187a <__fp_zero>
    1780:	32 c0       	rjmp	.+100    	; 0x17e6 <__fp_nan>

00001782 <exp>:
    1782:	61 d0       	rcall	.+194    	; 0x1846 <__fp_splitA>
    1784:	c8 f3       	brcs	.-14     	; 0x1778 <pow+0x98>
    1786:	96 38       	cpi	r25, 0x86	; 134
    1788:	c0 f7       	brcc	.-16     	; 0x177a <pow+0x9a>
    178a:	07 f8       	bld	r0, 7
    178c:	0f 92       	push	r0
    178e:	e8 94       	clt
    1790:	2b e3       	ldi	r18, 0x3B	; 59
    1792:	3a ea       	ldi	r19, 0xAA	; 170
    1794:	48 eb       	ldi	r20, 0xB8	; 184
    1796:	5f e7       	ldi	r21, 0x7F	; 127
    1798:	3a d1       	rcall	.+628    	; 0x1a0e <__mulsf3_pse>
    179a:	0f 92       	push	r0
    179c:	0f 92       	push	r0
    179e:	0f 92       	push	r0
    17a0:	4d b7       	in	r20, 0x3d	; 61
    17a2:	5e b7       	in	r21, 0x3e	; 62
    17a4:	0f 92       	push	r0
    17a6:	f2 d0       	rcall	.+484    	; 0x198c <modf>
    17a8:	e4 e9       	ldi	r30, 0x94	; 148
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	1f d0       	rcall	.+62     	; 0x17ec <__fp_powser>
    17ae:	4f 91       	pop	r20
    17b0:	5f 91       	pop	r21
    17b2:	ef 91       	pop	r30
    17b4:	ff 91       	pop	r31
    17b6:	e5 95       	asr	r30
    17b8:	ee 1f       	adc	r30, r30
    17ba:	ff 1f       	adc	r31, r31
    17bc:	49 f0       	breq	.+18     	; 0x17d0 <exp+0x4e>
    17be:	fe 57       	subi	r31, 0x7E	; 126
    17c0:	e0 68       	ori	r30, 0x80	; 128
    17c2:	44 27       	eor	r20, r20
    17c4:	ee 0f       	add	r30, r30
    17c6:	44 1f       	adc	r20, r20
    17c8:	fa 95       	dec	r31
    17ca:	e1 f7       	brne	.-8      	; 0x17c4 <exp+0x42>
    17cc:	41 95       	neg	r20
    17ce:	55 0b       	sbc	r21, r21
    17d0:	64 d0       	rcall	.+200    	; 0x189a <ldexp>
    17d2:	0f 90       	pop	r0
    17d4:	07 fe       	sbrs	r0, 7
    17d6:	58 c0       	rjmp	.+176    	; 0x1888 <inverse>
    17d8:	08 95       	ret

000017da <__fp_inf>:
    17da:	97 f9       	bld	r25, 7
    17dc:	9f 67       	ori	r25, 0x7F	; 127
    17de:	80 e8       	ldi	r24, 0x80	; 128
    17e0:	70 e0       	ldi	r23, 0x00	; 0
    17e2:	60 e0       	ldi	r22, 0x00	; 0
    17e4:	08 95       	ret

000017e6 <__fp_nan>:
    17e6:	9f ef       	ldi	r25, 0xFF	; 255
    17e8:	80 ec       	ldi	r24, 0xC0	; 192
    17ea:	08 95       	ret

000017ec <__fp_powser>:
    17ec:	df 93       	push	r29
    17ee:	cf 93       	push	r28
    17f0:	1f 93       	push	r17
    17f2:	0f 93       	push	r16
    17f4:	ff 92       	push	r15
    17f6:	ef 92       	push	r14
    17f8:	df 92       	push	r13
    17fa:	7b 01       	movw	r14, r22
    17fc:	8c 01       	movw	r16, r24
    17fe:	68 94       	set
    1800:	05 c0       	rjmp	.+10     	; 0x180c <__fp_powser+0x20>
    1802:	da 2e       	mov	r13, r26
    1804:	ef 01       	movw	r28, r30
    1806:	01 d1       	rcall	.+514    	; 0x1a0a <__mulsf3x>
    1808:	fe 01       	movw	r30, r28
    180a:	e8 94       	clt
    180c:	a5 91       	lpm	r26, Z+
    180e:	25 91       	lpm	r18, Z+
    1810:	35 91       	lpm	r19, Z+
    1812:	45 91       	lpm	r20, Z+
    1814:	55 91       	lpm	r21, Z+
    1816:	ae f3       	brts	.-22     	; 0x1802 <__fp_powser+0x16>
    1818:	ef 01       	movw	r28, r30
    181a:	60 d1       	rcall	.+704    	; 0x1adc <__addsf3x>
    181c:	fe 01       	movw	r30, r28
    181e:	97 01       	movw	r18, r14
    1820:	a8 01       	movw	r20, r16
    1822:	da 94       	dec	r13
    1824:	79 f7       	brne	.-34     	; 0x1804 <__fp_powser+0x18>
    1826:	df 90       	pop	r13
    1828:	ef 90       	pop	r14
    182a:	ff 90       	pop	r15
    182c:	0f 91       	pop	r16
    182e:	1f 91       	pop	r17
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <__fp_split3>:
    1836:	57 fd       	sbrc	r21, 7
    1838:	90 58       	subi	r25, 0x80	; 128
    183a:	44 0f       	add	r20, r20
    183c:	55 1f       	adc	r21, r21
    183e:	59 f0       	breq	.+22     	; 0x1856 <__fp_splitA+0x10>
    1840:	5f 3f       	cpi	r21, 0xFF	; 255
    1842:	71 f0       	breq	.+28     	; 0x1860 <__fp_splitA+0x1a>
    1844:	47 95       	ror	r20

00001846 <__fp_splitA>:
    1846:	88 0f       	add	r24, r24
    1848:	97 fb       	bst	r25, 7
    184a:	99 1f       	adc	r25, r25
    184c:	61 f0       	breq	.+24     	; 0x1866 <__fp_splitA+0x20>
    184e:	9f 3f       	cpi	r25, 0xFF	; 255
    1850:	79 f0       	breq	.+30     	; 0x1870 <__fp_splitA+0x2a>
    1852:	87 95       	ror	r24
    1854:	08 95       	ret
    1856:	12 16       	cp	r1, r18
    1858:	13 06       	cpc	r1, r19
    185a:	14 06       	cpc	r1, r20
    185c:	55 1f       	adc	r21, r21
    185e:	f2 cf       	rjmp	.-28     	; 0x1844 <__fp_split3+0xe>
    1860:	46 95       	lsr	r20
    1862:	f1 df       	rcall	.-30     	; 0x1846 <__fp_splitA>
    1864:	08 c0       	rjmp	.+16     	; 0x1876 <__fp_splitA+0x30>
    1866:	16 16       	cp	r1, r22
    1868:	17 06       	cpc	r1, r23
    186a:	18 06       	cpc	r1, r24
    186c:	99 1f       	adc	r25, r25
    186e:	f1 cf       	rjmp	.-30     	; 0x1852 <__fp_splitA+0xc>
    1870:	86 95       	lsr	r24
    1872:	71 05       	cpc	r23, r1
    1874:	61 05       	cpc	r22, r1
    1876:	08 94       	sec
    1878:	08 95       	ret

0000187a <__fp_zero>:
    187a:	e8 94       	clt

0000187c <__fp_szero>:
    187c:	bb 27       	eor	r27, r27
    187e:	66 27       	eor	r22, r22
    1880:	77 27       	eor	r23, r23
    1882:	cb 01       	movw	r24, r22
    1884:	97 f9       	bld	r25, 7
    1886:	08 95       	ret

00001888 <inverse>:
    1888:	9b 01       	movw	r18, r22
    188a:	ac 01       	movw	r20, r24
    188c:	60 e0       	ldi	r22, 0x00	; 0
    188e:	70 e0       	ldi	r23, 0x00	; 0
    1890:	80 e8       	ldi	r24, 0x80	; 128
    1892:	9f e3       	ldi	r25, 0x3F	; 63
    1894:	76 c1       	rjmp	.+748    	; 0x1b82 <__divsf3>
    1896:	a1 cf       	rjmp	.-190    	; 0x17da <__fp_inf>
    1898:	dc c1       	rjmp	.+952    	; 0x1c52 <__fp_mpack>

0000189a <ldexp>:
    189a:	d5 df       	rcall	.-86     	; 0x1846 <__fp_splitA>
    189c:	e8 f3       	brcs	.-6      	; 0x1898 <inverse+0x10>
    189e:	99 23       	and	r25, r25
    18a0:	d9 f3       	breq	.-10     	; 0x1898 <inverse+0x10>
    18a2:	94 0f       	add	r25, r20
    18a4:	51 1d       	adc	r21, r1
    18a6:	bb f3       	brvs	.-18     	; 0x1896 <inverse+0xe>
    18a8:	91 50       	subi	r25, 0x01	; 1
    18aa:	50 40       	sbci	r21, 0x00	; 0
    18ac:	94 f0       	brlt	.+36     	; 0x18d2 <ldexp+0x38>
    18ae:	59 f0       	breq	.+22     	; 0x18c6 <ldexp+0x2c>
    18b0:	88 23       	and	r24, r24
    18b2:	32 f0       	brmi	.+12     	; 0x18c0 <ldexp+0x26>
    18b4:	66 0f       	add	r22, r22
    18b6:	77 1f       	adc	r23, r23
    18b8:	88 1f       	adc	r24, r24
    18ba:	91 50       	subi	r25, 0x01	; 1
    18bc:	50 40       	sbci	r21, 0x00	; 0
    18be:	c1 f7       	brne	.-16     	; 0x18b0 <ldexp+0x16>
    18c0:	9e 3f       	cpi	r25, 0xFE	; 254
    18c2:	51 05       	cpc	r21, r1
    18c4:	44 f7       	brge	.-48     	; 0x1896 <inverse+0xe>
    18c6:	88 0f       	add	r24, r24
    18c8:	91 1d       	adc	r25, r1
    18ca:	96 95       	lsr	r25
    18cc:	87 95       	ror	r24
    18ce:	97 f9       	bld	r25, 7
    18d0:	08 95       	ret
    18d2:	5f 3f       	cpi	r21, 0xFF	; 255
    18d4:	ac f0       	brlt	.+42     	; 0x1900 <ldexp+0x66>
    18d6:	98 3e       	cpi	r25, 0xE8	; 232
    18d8:	9c f0       	brlt	.+38     	; 0x1900 <ldexp+0x66>
    18da:	bb 27       	eor	r27, r27
    18dc:	86 95       	lsr	r24
    18de:	77 95       	ror	r23
    18e0:	67 95       	ror	r22
    18e2:	b7 95       	ror	r27
    18e4:	08 f4       	brcc	.+2      	; 0x18e8 <ldexp+0x4e>
    18e6:	b1 60       	ori	r27, 0x01	; 1
    18e8:	93 95       	inc	r25
    18ea:	c1 f7       	brne	.-16     	; 0x18dc <ldexp+0x42>
    18ec:	bb 0f       	add	r27, r27
    18ee:	58 f7       	brcc	.-42     	; 0x18c6 <ldexp+0x2c>
    18f0:	11 f4       	brne	.+4      	; 0x18f6 <ldexp+0x5c>
    18f2:	60 ff       	sbrs	r22, 0
    18f4:	e8 cf       	rjmp	.-48     	; 0x18c6 <ldexp+0x2c>
    18f6:	6f 5f       	subi	r22, 0xFF	; 255
    18f8:	7f 4f       	sbci	r23, 0xFF	; 255
    18fa:	8f 4f       	sbci	r24, 0xFF	; 255
    18fc:	9f 4f       	sbci	r25, 0xFF	; 255
    18fe:	e3 cf       	rjmp	.-58     	; 0x18c6 <ldexp+0x2c>
    1900:	bd cf       	rjmp	.-134    	; 0x187c <__fp_szero>
    1902:	0e f0       	brts	.+2      	; 0x1906 <ldexp+0x6c>
    1904:	a6 c1       	rjmp	.+844    	; 0x1c52 <__fp_mpack>
    1906:	6f cf       	rjmp	.-290    	; 0x17e6 <__fp_nan>
    1908:	68 94       	set
    190a:	67 cf       	rjmp	.-306    	; 0x17da <__fp_inf>

0000190c <log>:
    190c:	9c df       	rcall	.-200    	; 0x1846 <__fp_splitA>
    190e:	c8 f3       	brcs	.-14     	; 0x1902 <ldexp+0x68>
    1910:	99 23       	and	r25, r25
    1912:	d1 f3       	breq	.-12     	; 0x1908 <ldexp+0x6e>
    1914:	c6 f3       	brts	.-16     	; 0x1906 <ldexp+0x6c>
    1916:	df 93       	push	r29
    1918:	cf 93       	push	r28
    191a:	1f 93       	push	r17
    191c:	0f 93       	push	r16
    191e:	ff 92       	push	r15
    1920:	c9 2f       	mov	r28, r25
    1922:	dd 27       	eor	r29, r29
    1924:	88 23       	and	r24, r24
    1926:	2a f0       	brmi	.+10     	; 0x1932 <log+0x26>
    1928:	21 97       	sbiw	r28, 0x01	; 1
    192a:	66 0f       	add	r22, r22
    192c:	77 1f       	adc	r23, r23
    192e:	88 1f       	adc	r24, r24
    1930:	da f7       	brpl	.-10     	; 0x1928 <log+0x1c>
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	40 e8       	ldi	r20, 0x80	; 128
    1938:	5f eb       	ldi	r21, 0xBF	; 191
    193a:	9f e3       	ldi	r25, 0x3F	; 63
    193c:	88 39       	cpi	r24, 0x98	; 152
    193e:	20 f0       	brcs	.+8      	; 0x1948 <log+0x3c>
    1940:	80 3e       	cpi	r24, 0xE0	; 224
    1942:	30 f0       	brcs	.+12     	; 0x1950 <log+0x44>
    1944:	21 96       	adiw	r28, 0x01	; 1
    1946:	8f 77       	andi	r24, 0x7F	; 127
    1948:	b8 d0       	rcall	.+368    	; 0x1aba <__addsf3>
    194a:	ec eb       	ldi	r30, 0xBC	; 188
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	03 c0       	rjmp	.+6      	; 0x1956 <log+0x4a>
    1950:	b4 d0       	rcall	.+360    	; 0x1aba <__addsf3>
    1952:	e9 ee       	ldi	r30, 0xE9	; 233
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	4a df       	rcall	.-364    	; 0x17ec <__fp_powser>
    1958:	8b 01       	movw	r16, r22
    195a:	be 01       	movw	r22, r28
    195c:	ec 01       	movw	r28, r24
    195e:	fb 2e       	mov	r15, r27
    1960:	6f 57       	subi	r22, 0x7F	; 127
    1962:	71 09       	sbc	r23, r1
    1964:	75 95       	asr	r23
    1966:	77 1f       	adc	r23, r23
    1968:	88 0b       	sbc	r24, r24
    196a:	99 0b       	sbc	r25, r25
    196c:	56 de       	rcall	.-852    	; 0x161a <__floatsisf>
    196e:	28 e1       	ldi	r18, 0x18	; 24
    1970:	32 e7       	ldi	r19, 0x72	; 114
    1972:	41 e3       	ldi	r20, 0x31	; 49
    1974:	5f e3       	ldi	r21, 0x3F	; 63
    1976:	49 d0       	rcall	.+146    	; 0x1a0a <__mulsf3x>
    1978:	af 2d       	mov	r26, r15
    197a:	98 01       	movw	r18, r16
    197c:	ae 01       	movw	r20, r28
    197e:	ff 90       	pop	r15
    1980:	0f 91       	pop	r16
    1982:	1f 91       	pop	r17
    1984:	cf 91       	pop	r28
    1986:	df 91       	pop	r29
    1988:	a9 d0       	rcall	.+338    	; 0x1adc <__addsf3x>
    198a:	7f c1       	rjmp	.+766    	; 0x1c8a <__fp_round>

0000198c <modf>:
    198c:	fa 01       	movw	r30, r20
    198e:	dc 01       	movw	r26, r24
    1990:	aa 0f       	add	r26, r26
    1992:	bb 1f       	adc	r27, r27
    1994:	9b 01       	movw	r18, r22
    1996:	ac 01       	movw	r20, r24
    1998:	bf 57       	subi	r27, 0x7F	; 127
    199a:	28 f4       	brcc	.+10     	; 0x19a6 <modf+0x1a>
    199c:	22 27       	eor	r18, r18
    199e:	33 27       	eor	r19, r19
    19a0:	44 27       	eor	r20, r20
    19a2:	50 78       	andi	r21, 0x80	; 128
    19a4:	1f c0       	rjmp	.+62     	; 0x19e4 <modf+0x58>
    19a6:	b7 51       	subi	r27, 0x17	; 23
    19a8:	88 f4       	brcc	.+34     	; 0x19cc <modf+0x40>
    19aa:	ab 2f       	mov	r26, r27
    19ac:	00 24       	eor	r0, r0
    19ae:	46 95       	lsr	r20
    19b0:	37 95       	ror	r19
    19b2:	27 95       	ror	r18
    19b4:	01 1c       	adc	r0, r1
    19b6:	a3 95       	inc	r26
    19b8:	d2 f3       	brmi	.-12     	; 0x19ae <modf+0x22>
    19ba:	00 20       	and	r0, r0
    19bc:	69 f0       	breq	.+26     	; 0x19d8 <modf+0x4c>
    19be:	22 0f       	add	r18, r18
    19c0:	33 1f       	adc	r19, r19
    19c2:	44 1f       	adc	r20, r20
    19c4:	b3 95       	inc	r27
    19c6:	da f3       	brmi	.-10     	; 0x19be <modf+0x32>
    19c8:	0d d0       	rcall	.+26     	; 0x19e4 <modf+0x58>
    19ca:	76 c0       	rjmp	.+236    	; 0x1ab8 <__subsf3>
    19cc:	61 30       	cpi	r22, 0x01	; 1
    19ce:	71 05       	cpc	r23, r1
    19d0:	a0 e8       	ldi	r26, 0x80	; 128
    19d2:	8a 07       	cpc	r24, r26
    19d4:	b9 46       	sbci	r27, 0x69	; 105
    19d6:	30 f4       	brcc	.+12     	; 0x19e4 <modf+0x58>
    19d8:	9b 01       	movw	r18, r22
    19da:	ac 01       	movw	r20, r24
    19dc:	66 27       	eor	r22, r22
    19de:	77 27       	eor	r23, r23
    19e0:	88 27       	eor	r24, r24
    19e2:	90 78       	andi	r25, 0x80	; 128
    19e4:	30 96       	adiw	r30, 0x00	; 0
    19e6:	21 f0       	breq	.+8      	; 0x19f0 <modf+0x64>
    19e8:	20 83       	st	Z, r18
    19ea:	31 83       	std	Z+1, r19	; 0x01
    19ec:	42 83       	std	Z+2, r20	; 0x02
    19ee:	53 83       	std	Z+3, r21	; 0x03
    19f0:	08 95       	ret

000019f2 <__mulsf3>:
    19f2:	0b d0       	rcall	.+22     	; 0x1a0a <__mulsf3x>
    19f4:	4a c1       	rjmp	.+660    	; 0x1c8a <__fp_round>
    19f6:	3b d1       	rcall	.+630    	; 0x1c6e <__fp_pscA>
    19f8:	28 f0       	brcs	.+10     	; 0x1a04 <__mulsf3+0x12>
    19fa:	40 d1       	rcall	.+640    	; 0x1c7c <__fp_pscB>
    19fc:	18 f0       	brcs	.+6      	; 0x1a04 <__mulsf3+0x12>
    19fe:	95 23       	and	r25, r21
    1a00:	09 f0       	breq	.+2      	; 0x1a04 <__mulsf3+0x12>
    1a02:	eb ce       	rjmp	.-554    	; 0x17da <__fp_inf>
    1a04:	f0 ce       	rjmp	.-544    	; 0x17e6 <__fp_nan>
    1a06:	11 24       	eor	r1, r1
    1a08:	39 cf       	rjmp	.-398    	; 0x187c <__fp_szero>

00001a0a <__mulsf3x>:
    1a0a:	15 df       	rcall	.-470    	; 0x1836 <__fp_split3>
    1a0c:	a0 f3       	brcs	.-24     	; 0x19f6 <__mulsf3+0x4>

00001a0e <__mulsf3_pse>:
    1a0e:	95 9f       	mul	r25, r21
    1a10:	d1 f3       	breq	.-12     	; 0x1a06 <__mulsf3+0x14>
    1a12:	95 0f       	add	r25, r21
    1a14:	50 e0       	ldi	r21, 0x00	; 0
    1a16:	55 1f       	adc	r21, r21
    1a18:	62 9f       	mul	r22, r18
    1a1a:	f0 01       	movw	r30, r0
    1a1c:	72 9f       	mul	r23, r18
    1a1e:	bb 27       	eor	r27, r27
    1a20:	f0 0d       	add	r31, r0
    1a22:	b1 1d       	adc	r27, r1
    1a24:	63 9f       	mul	r22, r19
    1a26:	aa 27       	eor	r26, r26
    1a28:	f0 0d       	add	r31, r0
    1a2a:	b1 1d       	adc	r27, r1
    1a2c:	aa 1f       	adc	r26, r26
    1a2e:	64 9f       	mul	r22, r20
    1a30:	66 27       	eor	r22, r22
    1a32:	b0 0d       	add	r27, r0
    1a34:	a1 1d       	adc	r26, r1
    1a36:	66 1f       	adc	r22, r22
    1a38:	82 9f       	mul	r24, r18
    1a3a:	22 27       	eor	r18, r18
    1a3c:	b0 0d       	add	r27, r0
    1a3e:	a1 1d       	adc	r26, r1
    1a40:	62 1f       	adc	r22, r18
    1a42:	73 9f       	mul	r23, r19
    1a44:	b0 0d       	add	r27, r0
    1a46:	a1 1d       	adc	r26, r1
    1a48:	62 1f       	adc	r22, r18
    1a4a:	83 9f       	mul	r24, r19
    1a4c:	a0 0d       	add	r26, r0
    1a4e:	61 1d       	adc	r22, r1
    1a50:	22 1f       	adc	r18, r18
    1a52:	74 9f       	mul	r23, r20
    1a54:	33 27       	eor	r19, r19
    1a56:	a0 0d       	add	r26, r0
    1a58:	61 1d       	adc	r22, r1
    1a5a:	23 1f       	adc	r18, r19
    1a5c:	84 9f       	mul	r24, r20
    1a5e:	60 0d       	add	r22, r0
    1a60:	21 1d       	adc	r18, r1
    1a62:	82 2f       	mov	r24, r18
    1a64:	76 2f       	mov	r23, r22
    1a66:	6a 2f       	mov	r22, r26
    1a68:	11 24       	eor	r1, r1
    1a6a:	9f 57       	subi	r25, 0x7F	; 127
    1a6c:	50 40       	sbci	r21, 0x00	; 0
    1a6e:	8a f0       	brmi	.+34     	; 0x1a92 <__mulsf3_pse+0x84>
    1a70:	e1 f0       	breq	.+56     	; 0x1aaa <__mulsf3_pse+0x9c>
    1a72:	88 23       	and	r24, r24
    1a74:	4a f0       	brmi	.+18     	; 0x1a88 <__mulsf3_pse+0x7a>
    1a76:	ee 0f       	add	r30, r30
    1a78:	ff 1f       	adc	r31, r31
    1a7a:	bb 1f       	adc	r27, r27
    1a7c:	66 1f       	adc	r22, r22
    1a7e:	77 1f       	adc	r23, r23
    1a80:	88 1f       	adc	r24, r24
    1a82:	91 50       	subi	r25, 0x01	; 1
    1a84:	50 40       	sbci	r21, 0x00	; 0
    1a86:	a9 f7       	brne	.-22     	; 0x1a72 <__mulsf3_pse+0x64>
    1a88:	9e 3f       	cpi	r25, 0xFE	; 254
    1a8a:	51 05       	cpc	r21, r1
    1a8c:	70 f0       	brcs	.+28     	; 0x1aaa <__mulsf3_pse+0x9c>
    1a8e:	a5 ce       	rjmp	.-694    	; 0x17da <__fp_inf>
    1a90:	f5 ce       	rjmp	.-534    	; 0x187c <__fp_szero>
    1a92:	5f 3f       	cpi	r21, 0xFF	; 255
    1a94:	ec f3       	brlt	.-6      	; 0x1a90 <__mulsf3_pse+0x82>
    1a96:	98 3e       	cpi	r25, 0xE8	; 232
    1a98:	dc f3       	brlt	.-10     	; 0x1a90 <__mulsf3_pse+0x82>
    1a9a:	86 95       	lsr	r24
    1a9c:	77 95       	ror	r23
    1a9e:	67 95       	ror	r22
    1aa0:	b7 95       	ror	r27
    1aa2:	f7 95       	ror	r31
    1aa4:	e7 95       	ror	r30
    1aa6:	9f 5f       	subi	r25, 0xFF	; 255
    1aa8:	c1 f7       	brne	.-16     	; 0x1a9a <__mulsf3_pse+0x8c>
    1aaa:	fe 2b       	or	r31, r30
    1aac:	88 0f       	add	r24, r24
    1aae:	91 1d       	adc	r25, r1
    1ab0:	96 95       	lsr	r25
    1ab2:	87 95       	ror	r24
    1ab4:	97 f9       	bld	r25, 7
    1ab6:	08 95       	ret

00001ab8 <__subsf3>:
    1ab8:	50 58       	subi	r21, 0x80	; 128

00001aba <__addsf3>:
    1aba:	bb 27       	eor	r27, r27
    1abc:	aa 27       	eor	r26, r26
    1abe:	0e d0       	rcall	.+28     	; 0x1adc <__addsf3x>
    1ac0:	e4 c0       	rjmp	.+456    	; 0x1c8a <__fp_round>
    1ac2:	d5 d0       	rcall	.+426    	; 0x1c6e <__fp_pscA>
    1ac4:	30 f0       	brcs	.+12     	; 0x1ad2 <__addsf3+0x18>
    1ac6:	da d0       	rcall	.+436    	; 0x1c7c <__fp_pscB>
    1ac8:	20 f0       	brcs	.+8      	; 0x1ad2 <__addsf3+0x18>
    1aca:	31 f4       	brne	.+12     	; 0x1ad8 <__addsf3+0x1e>
    1acc:	9f 3f       	cpi	r25, 0xFF	; 255
    1ace:	11 f4       	brne	.+4      	; 0x1ad4 <__addsf3+0x1a>
    1ad0:	1e f4       	brtc	.+6      	; 0x1ad8 <__addsf3+0x1e>
    1ad2:	89 ce       	rjmp	.-750    	; 0x17e6 <__fp_nan>
    1ad4:	0e f4       	brtc	.+2      	; 0x1ad8 <__addsf3+0x1e>
    1ad6:	e0 95       	com	r30
    1ad8:	e7 fb       	bst	r30, 7
    1ada:	7f ce       	rjmp	.-770    	; 0x17da <__fp_inf>

00001adc <__addsf3x>:
    1adc:	e9 2f       	mov	r30, r25
    1ade:	ab de       	rcall	.-682    	; 0x1836 <__fp_split3>
    1ae0:	80 f3       	brcs	.-32     	; 0x1ac2 <__addsf3+0x8>
    1ae2:	ba 17       	cp	r27, r26
    1ae4:	62 07       	cpc	r22, r18
    1ae6:	73 07       	cpc	r23, r19
    1ae8:	84 07       	cpc	r24, r20
    1aea:	95 07       	cpc	r25, r21
    1aec:	18 f0       	brcs	.+6      	; 0x1af4 <__addsf3x+0x18>
    1aee:	71 f4       	brne	.+28     	; 0x1b0c <__addsf3x+0x30>
    1af0:	9e f5       	brtc	.+102    	; 0x1b58 <__addsf3x+0x7c>
    1af2:	c3 ce       	rjmp	.-634    	; 0x187a <__fp_zero>
    1af4:	0e f4       	brtc	.+2      	; 0x1af8 <__addsf3x+0x1c>
    1af6:	e0 95       	com	r30
    1af8:	0b 2e       	mov	r0, r27
    1afa:	ba 2f       	mov	r27, r26
    1afc:	a0 2d       	mov	r26, r0
    1afe:	0b 01       	movw	r0, r22
    1b00:	b9 01       	movw	r22, r18
    1b02:	90 01       	movw	r18, r0
    1b04:	0c 01       	movw	r0, r24
    1b06:	ca 01       	movw	r24, r20
    1b08:	a0 01       	movw	r20, r0
    1b0a:	11 24       	eor	r1, r1
    1b0c:	ff 27       	eor	r31, r31
    1b0e:	59 1b       	sub	r21, r25
    1b10:	99 f0       	breq	.+38     	; 0x1b38 <__addsf3x+0x5c>
    1b12:	59 3f       	cpi	r21, 0xF9	; 249
    1b14:	50 f4       	brcc	.+20     	; 0x1b2a <__addsf3x+0x4e>
    1b16:	50 3e       	cpi	r21, 0xE0	; 224
    1b18:	68 f1       	brcs	.+90     	; 0x1b74 <__addsf3x+0x98>
    1b1a:	1a 16       	cp	r1, r26
    1b1c:	f0 40       	sbci	r31, 0x00	; 0
    1b1e:	a2 2f       	mov	r26, r18
    1b20:	23 2f       	mov	r18, r19
    1b22:	34 2f       	mov	r19, r20
    1b24:	44 27       	eor	r20, r20
    1b26:	58 5f       	subi	r21, 0xF8	; 248
    1b28:	f3 cf       	rjmp	.-26     	; 0x1b10 <__addsf3x+0x34>
    1b2a:	46 95       	lsr	r20
    1b2c:	37 95       	ror	r19
    1b2e:	27 95       	ror	r18
    1b30:	a7 95       	ror	r26
    1b32:	f0 40       	sbci	r31, 0x00	; 0
    1b34:	53 95       	inc	r21
    1b36:	c9 f7       	brne	.-14     	; 0x1b2a <__addsf3x+0x4e>
    1b38:	7e f4       	brtc	.+30     	; 0x1b58 <__addsf3x+0x7c>
    1b3a:	1f 16       	cp	r1, r31
    1b3c:	ba 0b       	sbc	r27, r26
    1b3e:	62 0b       	sbc	r22, r18
    1b40:	73 0b       	sbc	r23, r19
    1b42:	84 0b       	sbc	r24, r20
    1b44:	ba f0       	brmi	.+46     	; 0x1b74 <__addsf3x+0x98>
    1b46:	91 50       	subi	r25, 0x01	; 1
    1b48:	a1 f0       	breq	.+40     	; 0x1b72 <__addsf3x+0x96>
    1b4a:	ff 0f       	add	r31, r31
    1b4c:	bb 1f       	adc	r27, r27
    1b4e:	66 1f       	adc	r22, r22
    1b50:	77 1f       	adc	r23, r23
    1b52:	88 1f       	adc	r24, r24
    1b54:	c2 f7       	brpl	.-16     	; 0x1b46 <__addsf3x+0x6a>
    1b56:	0e c0       	rjmp	.+28     	; 0x1b74 <__addsf3x+0x98>
    1b58:	ba 0f       	add	r27, r26
    1b5a:	62 1f       	adc	r22, r18
    1b5c:	73 1f       	adc	r23, r19
    1b5e:	84 1f       	adc	r24, r20
    1b60:	48 f4       	brcc	.+18     	; 0x1b74 <__addsf3x+0x98>
    1b62:	87 95       	ror	r24
    1b64:	77 95       	ror	r23
    1b66:	67 95       	ror	r22
    1b68:	b7 95       	ror	r27
    1b6a:	f7 95       	ror	r31
    1b6c:	9e 3f       	cpi	r25, 0xFE	; 254
    1b6e:	08 f0       	brcs	.+2      	; 0x1b72 <__addsf3x+0x96>
    1b70:	b3 cf       	rjmp	.-154    	; 0x1ad8 <__addsf3+0x1e>
    1b72:	93 95       	inc	r25
    1b74:	88 0f       	add	r24, r24
    1b76:	08 f0       	brcs	.+2      	; 0x1b7a <__addsf3x+0x9e>
    1b78:	99 27       	eor	r25, r25
    1b7a:	ee 0f       	add	r30, r30
    1b7c:	97 95       	ror	r25
    1b7e:	87 95       	ror	r24
    1b80:	08 95       	ret

00001b82 <__divsf3>:
    1b82:	0c d0       	rcall	.+24     	; 0x1b9c <__divsf3x>
    1b84:	82 c0       	rjmp	.+260    	; 0x1c8a <__fp_round>
    1b86:	7a d0       	rcall	.+244    	; 0x1c7c <__fp_pscB>
    1b88:	40 f0       	brcs	.+16     	; 0x1b9a <__divsf3+0x18>
    1b8a:	71 d0       	rcall	.+226    	; 0x1c6e <__fp_pscA>
    1b8c:	30 f0       	brcs	.+12     	; 0x1b9a <__divsf3+0x18>
    1b8e:	21 f4       	brne	.+8      	; 0x1b98 <__divsf3+0x16>
    1b90:	5f 3f       	cpi	r21, 0xFF	; 255
    1b92:	19 f0       	breq	.+6      	; 0x1b9a <__divsf3+0x18>
    1b94:	22 ce       	rjmp	.-956    	; 0x17da <__fp_inf>
    1b96:	51 11       	cpse	r21, r1
    1b98:	71 ce       	rjmp	.-798    	; 0x187c <__fp_szero>
    1b9a:	25 ce       	rjmp	.-950    	; 0x17e6 <__fp_nan>

00001b9c <__divsf3x>:
    1b9c:	4c de       	rcall	.-872    	; 0x1836 <__fp_split3>
    1b9e:	98 f3       	brcs	.-26     	; 0x1b86 <__divsf3+0x4>

00001ba0 <__divsf3_pse>:
    1ba0:	99 23       	and	r25, r25
    1ba2:	c9 f3       	breq	.-14     	; 0x1b96 <__divsf3+0x14>
    1ba4:	55 23       	and	r21, r21
    1ba6:	b1 f3       	breq	.-20     	; 0x1b94 <__divsf3+0x12>
    1ba8:	95 1b       	sub	r25, r21
    1baa:	55 0b       	sbc	r21, r21
    1bac:	bb 27       	eor	r27, r27
    1bae:	aa 27       	eor	r26, r26
    1bb0:	62 17       	cp	r22, r18
    1bb2:	73 07       	cpc	r23, r19
    1bb4:	84 07       	cpc	r24, r20
    1bb6:	38 f0       	brcs	.+14     	; 0x1bc6 <__divsf3_pse+0x26>
    1bb8:	9f 5f       	subi	r25, 0xFF	; 255
    1bba:	5f 4f       	sbci	r21, 0xFF	; 255
    1bbc:	22 0f       	add	r18, r18
    1bbe:	33 1f       	adc	r19, r19
    1bc0:	44 1f       	adc	r20, r20
    1bc2:	aa 1f       	adc	r26, r26
    1bc4:	a9 f3       	breq	.-22     	; 0x1bb0 <__divsf3_pse+0x10>
    1bc6:	33 d0       	rcall	.+102    	; 0x1c2e <__divsf3_pse+0x8e>
    1bc8:	0e 2e       	mov	r0, r30
    1bca:	3a f0       	brmi	.+14     	; 0x1bda <__divsf3_pse+0x3a>
    1bcc:	e0 e8       	ldi	r30, 0x80	; 128
    1bce:	30 d0       	rcall	.+96     	; 0x1c30 <__divsf3_pse+0x90>
    1bd0:	91 50       	subi	r25, 0x01	; 1
    1bd2:	50 40       	sbci	r21, 0x00	; 0
    1bd4:	e6 95       	lsr	r30
    1bd6:	00 1c       	adc	r0, r0
    1bd8:	ca f7       	brpl	.-14     	; 0x1bcc <__divsf3_pse+0x2c>
    1bda:	29 d0       	rcall	.+82     	; 0x1c2e <__divsf3_pse+0x8e>
    1bdc:	fe 2f       	mov	r31, r30
    1bde:	27 d0       	rcall	.+78     	; 0x1c2e <__divsf3_pse+0x8e>
    1be0:	66 0f       	add	r22, r22
    1be2:	77 1f       	adc	r23, r23
    1be4:	88 1f       	adc	r24, r24
    1be6:	bb 1f       	adc	r27, r27
    1be8:	26 17       	cp	r18, r22
    1bea:	37 07       	cpc	r19, r23
    1bec:	48 07       	cpc	r20, r24
    1bee:	ab 07       	cpc	r26, r27
    1bf0:	b0 e8       	ldi	r27, 0x80	; 128
    1bf2:	09 f0       	breq	.+2      	; 0x1bf6 <__divsf3_pse+0x56>
    1bf4:	bb 0b       	sbc	r27, r27
    1bf6:	80 2d       	mov	r24, r0
    1bf8:	bf 01       	movw	r22, r30
    1bfa:	ff 27       	eor	r31, r31
    1bfc:	93 58       	subi	r25, 0x83	; 131
    1bfe:	5f 4f       	sbci	r21, 0xFF	; 255
    1c00:	2a f0       	brmi	.+10     	; 0x1c0c <__divsf3_pse+0x6c>
    1c02:	9e 3f       	cpi	r25, 0xFE	; 254
    1c04:	51 05       	cpc	r21, r1
    1c06:	68 f0       	brcs	.+26     	; 0x1c22 <__divsf3_pse+0x82>
    1c08:	e8 cd       	rjmp	.-1072   	; 0x17da <__fp_inf>
    1c0a:	38 ce       	rjmp	.-912    	; 0x187c <__fp_szero>
    1c0c:	5f 3f       	cpi	r21, 0xFF	; 255
    1c0e:	ec f3       	brlt	.-6      	; 0x1c0a <__divsf3_pse+0x6a>
    1c10:	98 3e       	cpi	r25, 0xE8	; 232
    1c12:	dc f3       	brlt	.-10     	; 0x1c0a <__divsf3_pse+0x6a>
    1c14:	86 95       	lsr	r24
    1c16:	77 95       	ror	r23
    1c18:	67 95       	ror	r22
    1c1a:	b7 95       	ror	r27
    1c1c:	f7 95       	ror	r31
    1c1e:	9f 5f       	subi	r25, 0xFF	; 255
    1c20:	c9 f7       	brne	.-14     	; 0x1c14 <__divsf3_pse+0x74>
    1c22:	88 0f       	add	r24, r24
    1c24:	91 1d       	adc	r25, r1
    1c26:	96 95       	lsr	r25
    1c28:	87 95       	ror	r24
    1c2a:	97 f9       	bld	r25, 7
    1c2c:	08 95       	ret
    1c2e:	e1 e0       	ldi	r30, 0x01	; 1
    1c30:	66 0f       	add	r22, r22
    1c32:	77 1f       	adc	r23, r23
    1c34:	88 1f       	adc	r24, r24
    1c36:	bb 1f       	adc	r27, r27
    1c38:	62 17       	cp	r22, r18
    1c3a:	73 07       	cpc	r23, r19
    1c3c:	84 07       	cpc	r24, r20
    1c3e:	ba 07       	cpc	r27, r26
    1c40:	20 f0       	brcs	.+8      	; 0x1c4a <__divsf3_pse+0xaa>
    1c42:	62 1b       	sub	r22, r18
    1c44:	73 0b       	sbc	r23, r19
    1c46:	84 0b       	sbc	r24, r20
    1c48:	ba 0b       	sbc	r27, r26
    1c4a:	ee 1f       	adc	r30, r30
    1c4c:	88 f7       	brcc	.-30     	; 0x1c30 <__divsf3_pse+0x90>
    1c4e:	e0 95       	com	r30
    1c50:	08 95       	ret

00001c52 <__fp_mpack>:
    1c52:	9f 3f       	cpi	r25, 0xFF	; 255
    1c54:	31 f0       	breq	.+12     	; 0x1c62 <__fp_mpack_finite+0xc>

00001c56 <__fp_mpack_finite>:
    1c56:	91 50       	subi	r25, 0x01	; 1
    1c58:	20 f4       	brcc	.+8      	; 0x1c62 <__fp_mpack_finite+0xc>
    1c5a:	87 95       	ror	r24
    1c5c:	77 95       	ror	r23
    1c5e:	67 95       	ror	r22
    1c60:	b7 95       	ror	r27
    1c62:	88 0f       	add	r24, r24
    1c64:	91 1d       	adc	r25, r1
    1c66:	96 95       	lsr	r25
    1c68:	87 95       	ror	r24
    1c6a:	97 f9       	bld	r25, 7
    1c6c:	08 95       	ret

00001c6e <__fp_pscA>:
    1c6e:	00 24       	eor	r0, r0
    1c70:	0a 94       	dec	r0
    1c72:	16 16       	cp	r1, r22
    1c74:	17 06       	cpc	r1, r23
    1c76:	18 06       	cpc	r1, r24
    1c78:	09 06       	cpc	r0, r25
    1c7a:	08 95       	ret

00001c7c <__fp_pscB>:
    1c7c:	00 24       	eor	r0, r0
    1c7e:	0a 94       	dec	r0
    1c80:	12 16       	cp	r1, r18
    1c82:	13 06       	cpc	r1, r19
    1c84:	14 06       	cpc	r1, r20
    1c86:	05 06       	cpc	r0, r21
    1c88:	08 95       	ret

00001c8a <__fp_round>:
    1c8a:	09 2e       	mov	r0, r25
    1c8c:	03 94       	inc	r0
    1c8e:	00 0c       	add	r0, r0
    1c90:	11 f4       	brne	.+4      	; 0x1c96 <__fp_round+0xc>
    1c92:	88 23       	and	r24, r24
    1c94:	52 f0       	brmi	.+20     	; 0x1caa <__fp_round+0x20>
    1c96:	bb 0f       	add	r27, r27
    1c98:	40 f4       	brcc	.+16     	; 0x1caa <__fp_round+0x20>
    1c9a:	bf 2b       	or	r27, r31
    1c9c:	11 f4       	brne	.+4      	; 0x1ca2 <__fp_round+0x18>
    1c9e:	60 ff       	sbrs	r22, 0
    1ca0:	04 c0       	rjmp	.+8      	; 0x1caa <__fp_round+0x20>
    1ca2:	6f 5f       	subi	r22, 0xFF	; 255
    1ca4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ca8:	9f 4f       	sbci	r25, 0xFF	; 255
    1caa:	08 95       	ret

00001cac <__udivmodsi4>:
    1cac:	a1 e2       	ldi	r26, 0x21	; 33
    1cae:	1a 2e       	mov	r1, r26
    1cb0:	aa 1b       	sub	r26, r26
    1cb2:	bb 1b       	sub	r27, r27
    1cb4:	fd 01       	movw	r30, r26
    1cb6:	0d c0       	rjmp	.+26     	; 0x1cd2 <__udivmodsi4_ep>

00001cb8 <__udivmodsi4_loop>:
    1cb8:	aa 1f       	adc	r26, r26
    1cba:	bb 1f       	adc	r27, r27
    1cbc:	ee 1f       	adc	r30, r30
    1cbe:	ff 1f       	adc	r31, r31
    1cc0:	a2 17       	cp	r26, r18
    1cc2:	b3 07       	cpc	r27, r19
    1cc4:	e4 07       	cpc	r30, r20
    1cc6:	f5 07       	cpc	r31, r21
    1cc8:	20 f0       	brcs	.+8      	; 0x1cd2 <__udivmodsi4_ep>
    1cca:	a2 1b       	sub	r26, r18
    1ccc:	b3 0b       	sbc	r27, r19
    1cce:	e4 0b       	sbc	r30, r20
    1cd0:	f5 0b       	sbc	r31, r21

00001cd2 <__udivmodsi4_ep>:
    1cd2:	66 1f       	adc	r22, r22
    1cd4:	77 1f       	adc	r23, r23
    1cd6:	88 1f       	adc	r24, r24
    1cd8:	99 1f       	adc	r25, r25
    1cda:	1a 94       	dec	r1
    1cdc:	69 f7       	brne	.-38     	; 0x1cb8 <__udivmodsi4_loop>
    1cde:	60 95       	com	r22
    1ce0:	70 95       	com	r23
    1ce2:	80 95       	com	r24
    1ce4:	90 95       	com	r25
    1ce6:	9b 01       	movw	r18, r22
    1ce8:	ac 01       	movw	r20, r24
    1cea:	bd 01       	movw	r22, r26
    1cec:	cf 01       	movw	r24, r30
    1cee:	08 95       	ret

00001cf0 <__tablejump2__>:
    1cf0:	ee 0f       	add	r30, r30
    1cf2:	ff 1f       	adc	r31, r31
    1cf4:	05 90       	lpm	r0, Z+
    1cf6:	f4 91       	lpm	r31, Z
    1cf8:	e0 2d       	mov	r30, r0
    1cfa:	09 94       	ijmp

00001cfc <atoi>:
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	88 27       	eor	r24, r24
    1d00:	99 27       	eor	r25, r25
    1d02:	e8 94       	clt
    1d04:	21 91       	ld	r18, Z+
    1d06:	20 32       	cpi	r18, 0x20	; 32
    1d08:	e9 f3       	breq	.-6      	; 0x1d04 <atoi+0x8>
    1d0a:	29 30       	cpi	r18, 0x09	; 9
    1d0c:	10 f0       	brcs	.+4      	; 0x1d12 <atoi+0x16>
    1d0e:	2e 30       	cpi	r18, 0x0E	; 14
    1d10:	c8 f3       	brcs	.-14     	; 0x1d04 <atoi+0x8>
    1d12:	2b 32       	cpi	r18, 0x2B	; 43
    1d14:	39 f0       	breq	.+14     	; 0x1d24 <atoi+0x28>
    1d16:	2d 32       	cpi	r18, 0x2D	; 45
    1d18:	31 f4       	brne	.+12     	; 0x1d26 <atoi+0x2a>
    1d1a:	68 94       	set
    1d1c:	03 c0       	rjmp	.+6      	; 0x1d24 <atoi+0x28>
    1d1e:	54 d0       	rcall	.+168    	; 0x1dc8 <__mulhi_const_10>
    1d20:	82 0f       	add	r24, r18
    1d22:	91 1d       	adc	r25, r1
    1d24:	21 91       	ld	r18, Z+
    1d26:	20 53       	subi	r18, 0x30	; 48
    1d28:	2a 30       	cpi	r18, 0x0A	; 10
    1d2a:	c8 f3       	brcs	.-14     	; 0x1d1e <atoi+0x22>
    1d2c:	1e f4       	brtc	.+6      	; 0x1d34 <atoi+0x38>
    1d2e:	90 95       	com	r25
    1d30:	81 95       	neg	r24
    1d32:	9f 4f       	sbci	r25, 0xFF	; 255
    1d34:	08 95       	ret

00001d36 <memcpy>:
    1d36:	fb 01       	movw	r30, r22
    1d38:	dc 01       	movw	r26, r24
    1d3a:	02 c0       	rjmp	.+4      	; 0x1d40 <memcpy+0xa>
    1d3c:	01 90       	ld	r0, Z+
    1d3e:	0d 92       	st	X+, r0
    1d40:	41 50       	subi	r20, 0x01	; 1
    1d42:	50 40       	sbci	r21, 0x00	; 0
    1d44:	d8 f7       	brcc	.-10     	; 0x1d3c <memcpy+0x6>
    1d46:	08 95       	ret

00001d48 <strcat>:
    1d48:	fb 01       	movw	r30, r22
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	0d 90       	ld	r0, X+
    1d4e:	00 20       	and	r0, r0
    1d50:	e9 f7       	brne	.-6      	; 0x1d4c <strcat+0x4>
    1d52:	11 97       	sbiw	r26, 0x01	; 1
    1d54:	01 90       	ld	r0, Z+
    1d56:	0d 92       	st	X+, r0
    1d58:	00 20       	and	r0, r0
    1d5a:	e1 f7       	brne	.-8      	; 0x1d54 <strcat+0xc>
    1d5c:	08 95       	ret

00001d5e <strcpy>:
    1d5e:	fb 01       	movw	r30, r22
    1d60:	dc 01       	movw	r26, r24
    1d62:	01 90       	ld	r0, Z+
    1d64:	0d 92       	st	X+, r0
    1d66:	00 20       	and	r0, r0
    1d68:	e1 f7       	brne	.-8      	; 0x1d62 <strcpy+0x4>
    1d6a:	08 95       	ret

00001d6c <strstr>:
    1d6c:	fb 01       	movw	r30, r22
    1d6e:	51 91       	ld	r21, Z+
    1d70:	55 23       	and	r21, r21
    1d72:	a9 f0       	breq	.+42     	; 0x1d9e <strstr+0x32>
    1d74:	bf 01       	movw	r22, r30
    1d76:	dc 01       	movw	r26, r24
    1d78:	4d 91       	ld	r20, X+
    1d7a:	45 17       	cp	r20, r21
    1d7c:	41 11       	cpse	r20, r1
    1d7e:	e1 f7       	brne	.-8      	; 0x1d78 <strstr+0xc>
    1d80:	59 f4       	brne	.+22     	; 0x1d98 <strstr+0x2c>
    1d82:	cd 01       	movw	r24, r26
    1d84:	01 90       	ld	r0, Z+
    1d86:	00 20       	and	r0, r0
    1d88:	49 f0       	breq	.+18     	; 0x1d9c <strstr+0x30>
    1d8a:	4d 91       	ld	r20, X+
    1d8c:	40 15       	cp	r20, r0
    1d8e:	41 11       	cpse	r20, r1
    1d90:	c9 f3       	breq	.-14     	; 0x1d84 <strstr+0x18>
    1d92:	fb 01       	movw	r30, r22
    1d94:	41 11       	cpse	r20, r1
    1d96:	ef cf       	rjmp	.-34     	; 0x1d76 <strstr+0xa>
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	01 97       	sbiw	r24, 0x01	; 1
    1d9e:	08 95       	ret

00001da0 <itoa>:
    1da0:	45 32       	cpi	r20, 0x25	; 37
    1da2:	51 05       	cpc	r21, r1
    1da4:	18 f4       	brcc	.+6      	; 0x1dac <itoa+0xc>
    1da6:	42 30       	cpi	r20, 0x02	; 2
    1da8:	08 f0       	brcs	.+2      	; 0x1dac <itoa+0xc>
    1daa:	04 c0       	rjmp	.+8      	; 0x1db4 <__itoa_ncheck>
    1dac:	fb 01       	movw	r30, r22
    1dae:	10 82       	st	Z, r1
    1db0:	cb 01       	movw	r24, r22
    1db2:	08 95       	ret

00001db4 <__itoa_ncheck>:
    1db4:	bb 27       	eor	r27, r27
    1db6:	4a 30       	cpi	r20, 0x0A	; 10
    1db8:	31 f4       	brne	.+12     	; 0x1dc6 <__itoa_ncheck+0x12>
    1dba:	99 23       	and	r25, r25
    1dbc:	22 f4       	brpl	.+8      	; 0x1dc6 <__itoa_ncheck+0x12>
    1dbe:	bd e2       	ldi	r27, 0x2D	; 45
    1dc0:	90 95       	com	r25
    1dc2:	81 95       	neg	r24
    1dc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc6:	09 c0       	rjmp	.+18     	; 0x1dda <__utoa_common>

00001dc8 <__mulhi_const_10>:
    1dc8:	7a e0       	ldi	r23, 0x0A	; 10
    1dca:	97 9f       	mul	r25, r23
    1dcc:	90 2d       	mov	r25, r0
    1dce:	87 9f       	mul	r24, r23
    1dd0:	80 2d       	mov	r24, r0
    1dd2:	91 0d       	add	r25, r1
    1dd4:	11 24       	eor	r1, r1
    1dd6:	08 95       	ret

00001dd8 <__utoa_ncheck>:
    1dd8:	bb 27       	eor	r27, r27

00001dda <__utoa_common>:
    1dda:	fb 01       	movw	r30, r22
    1ddc:	55 27       	eor	r21, r21
    1dde:	aa 27       	eor	r26, r26
    1de0:	88 0f       	add	r24, r24
    1de2:	99 1f       	adc	r25, r25
    1de4:	aa 1f       	adc	r26, r26
    1de6:	a4 17       	cp	r26, r20
    1de8:	10 f0       	brcs	.+4      	; 0x1dee <__utoa_common+0x14>
    1dea:	a4 1b       	sub	r26, r20
    1dec:	83 95       	inc	r24
    1dee:	50 51       	subi	r21, 0x10	; 16
    1df0:	b9 f7       	brne	.-18     	; 0x1de0 <__utoa_common+0x6>
    1df2:	a0 5d       	subi	r26, 0xD0	; 208
    1df4:	aa 33       	cpi	r26, 0x3A	; 58
    1df6:	08 f0       	brcs	.+2      	; 0x1dfa <__utoa_common+0x20>
    1df8:	a9 5d       	subi	r26, 0xD9	; 217
    1dfa:	a1 93       	st	Z+, r26
    1dfc:	00 97       	sbiw	r24, 0x00	; 0
    1dfe:	79 f7       	brne	.-34     	; 0x1dde <__utoa_common+0x4>
    1e00:	b1 11       	cpse	r27, r1
    1e02:	b1 93       	st	Z+, r27
    1e04:	11 92       	st	Z+, r1
    1e06:	cb 01       	movw	r24, r22
    1e08:	00 c0       	rjmp	.+0      	; 0x1e0a <strrev>

00001e0a <strrev>:
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	67 2f       	mov	r22, r23
    1e10:	71 91       	ld	r23, Z+
    1e12:	77 23       	and	r23, r23
    1e14:	e1 f7       	brne	.-8      	; 0x1e0e <strrev+0x4>
    1e16:	32 97       	sbiw	r30, 0x02	; 2
    1e18:	04 c0       	rjmp	.+8      	; 0x1e22 <strrev+0x18>
    1e1a:	7c 91       	ld	r23, X
    1e1c:	6d 93       	st	X+, r22
    1e1e:	70 83       	st	Z, r23
    1e20:	62 91       	ld	r22, -Z
    1e22:	ae 17       	cp	r26, r30
    1e24:	bf 07       	cpc	r27, r31
    1e26:	c8 f3       	brcs	.-14     	; 0x1e1a <strrev+0x10>
    1e28:	08 95       	ret

00001e2a <_exit>:
    1e2a:	f8 94       	cli

00001e2c <__stop_program>:
    1e2c:	ff cf       	rjmp	.-2      	; 0x1e2c <__stop_program>
