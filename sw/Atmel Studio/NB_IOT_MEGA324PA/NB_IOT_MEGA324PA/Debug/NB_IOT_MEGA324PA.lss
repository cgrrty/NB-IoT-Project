
NB_IOT_MEGA324PA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000370  00800100  0000199c  00001a30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000199c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000124  00800470  00800470  00001da0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001da0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001dd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000310  00000000  00000000  00001e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004f9c  00000000  00000000  00002120  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001972  00000000  00000000  000070bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003804  00000000  00000000  00008a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b0c  00000000  00000000  0000c234  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001512d  00000000  00000000  0000cd40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003e51  00000000  00000000  00021e6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000298  00000000  00000000  00025cbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00005ff5  00000000  00000000  00025f56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
       2:	00 00       	nop
       4:	63 c0       	rjmp	.+198    	; 0xcc <__bad_interrupt>
       6:	00 00       	nop
       8:	61 c0       	rjmp	.+194    	; 0xcc <__bad_interrupt>
       a:	00 00       	nop
       c:	5f c0       	rjmp	.+190    	; 0xcc <__bad_interrupt>
       e:	00 00       	nop
      10:	5d c0       	rjmp	.+186    	; 0xcc <__bad_interrupt>
      12:	00 00       	nop
      14:	5b c0       	rjmp	.+182    	; 0xcc <__bad_interrupt>
      16:	00 00       	nop
      18:	59 c0       	rjmp	.+178    	; 0xcc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	57 c0       	rjmp	.+174    	; 0xcc <__bad_interrupt>
      1e:	00 00       	nop
      20:	0e c5       	rjmp	.+2588   	; 0xa3e <__vector_8>
      22:	00 00       	nop
      24:	53 c0       	rjmp	.+166    	; 0xcc <__bad_interrupt>
      26:	00 00       	nop
      28:	51 c0       	rjmp	.+162    	; 0xcc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4f c0       	rjmp	.+158    	; 0xcc <__bad_interrupt>
      2e:	00 00       	nop
      30:	4d c0       	rjmp	.+154    	; 0xcc <__bad_interrupt>
      32:	00 00       	nop
      34:	4b c0       	rjmp	.+150    	; 0xcc <__bad_interrupt>
      36:	00 00       	nop
      38:	49 c0       	rjmp	.+146    	; 0xcc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	47 c0       	rjmp	.+142    	; 0xcc <__bad_interrupt>
      3e:	00 00       	nop
      40:	45 c0       	rjmp	.+138    	; 0xcc <__bad_interrupt>
      42:	00 00       	nop
      44:	43 c0       	rjmp	.+134    	; 0xcc <__bad_interrupt>
      46:	00 00       	nop
      48:	41 c0       	rjmp	.+130    	; 0xcc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3f c0       	rjmp	.+126    	; 0xcc <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c4       	rjmp	.+2420   	; 0x9c6 <__vector_20>
      52:	00 00       	nop
      54:	3b c0       	rjmp	.+118    	; 0xcc <__bad_interrupt>
      56:	00 00       	nop
      58:	39 c0       	rjmp	.+114    	; 0xcc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	37 c0       	rjmp	.+110    	; 0xcc <__bad_interrupt>
      5e:	00 00       	nop
      60:	35 c0       	rjmp	.+106    	; 0xcc <__bad_interrupt>
      62:	00 00       	nop
      64:	33 c0       	rjmp	.+102    	; 0xcc <__bad_interrupt>
      66:	00 00       	nop
      68:	31 c0       	rjmp	.+98     	; 0xcc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2f c0       	rjmp	.+94     	; 0xcc <__bad_interrupt>
      6e:	00 00       	nop
      70:	2d c0       	rjmp	.+90     	; 0xcc <__bad_interrupt>
      72:	00 00       	nop
      74:	2b c0       	rjmp	.+86     	; 0xcc <__bad_interrupt>
      76:	00 00       	nop
      78:	29 c0       	rjmp	.+82     	; 0xcc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	9f 05       	cpc	r25, r15
      7e:	a3 05       	cpc	r26, r3
      80:	fa 05       	cpc	r31, r10
      82:	15 06       	cpc	r1, r21
      84:	1a 06       	cpc	r1, r26
      86:	1e 06       	cpc	r1, r30
      88:	34 06       	cpc	r3, r20
      8a:	7c 06       	cpc	r7, r28
      8c:	7f 06       	cpc	r7, r31
      8e:	82 06       	cpc	r8, r18
      90:	86 06       	cpc	r8, r22
      92:	8a 06       	cpc	r8, r26

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d8 e0       	ldi	r29, 0x08	; 8
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	14 e0       	ldi	r17, 0x04	; 4
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	ec e9       	ldi	r30, 0x9C	; 156
      a8:	f9 e1       	ldi	r31, 0x19	; 25
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0
      b0:	a0 37       	cpi	r26, 0x70	; 112
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>

000000b6 <__do_clear_bss>:
      b6:	25 e0       	ldi	r18, 0x05	; 5
      b8:	a0 e7       	ldi	r26, 0x70	; 112
      ba:	b4 e0       	ldi	r27, 0x04	; 4
      bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
      be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
      c0:	a4 39       	cpi	r26, 0x94	; 148
      c2:	b2 07       	cpc	r27, r18
      c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
      c6:	59 d6       	rcall	.+3250   	; 0xd7a <main>
      c8:	0c 94 cc 0c 	jmp	0x1998	; 0x1998 <_exit>

000000cc <__bad_interrupt>:
      cc:	99 cf       	rjmp	.-206    	; 0x0 <__vectors>

000000ce <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
      ce:	cf 93       	push	r28
      d0:	df 93       	push	r29
      d2:	1f 92       	push	r1
      d4:	cd b7       	in	r28, 0x3d	; 61
      d6:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
      d8:	9f b7       	in	r25, 0x3f	; 63
      da:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
      dc:	f8 94       	cli
	return flags;
      de:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
      e0:	82 30       	cpi	r24, 0x02	; 2
      e2:	40 f4       	brcc	.+16     	; 0xf4 <sysclk_enable_module+0x26>
		*(reg + port)  &= ~id;
      e4:	e8 2f       	mov	r30, r24
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	ec 59       	subi	r30, 0x9C	; 156
      ea:	ff 4f       	sbci	r31, 0xFF	; 255
      ec:	60 95       	com	r22
      ee:	80 81       	ld	r24, Z
      f0:	68 23       	and	r22, r24
      f2:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
      f4:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
      f6:	0f 90       	pop	r0
      f8:	df 91       	pop	r29
      fa:	cf 91       	pop	r28
      fc:	08 95       	ret

000000fe <usart_putchar>:
	}

	if (baud_offset != USART_BAUD_UNDEFINED) {
		usart->UBRR = baudctrl;
	}
}
      fe:	fc 01       	movw	r30, r24
     100:	90 81       	ld	r25, Z
     102:	95 ff       	sbrs	r25, 5
     104:	fd cf       	rjmp	.-6      	; 0x100 <usart_putchar+0x2>
     106:	66 83       	std	Z+6, r22	; 0x06
     108:	80 e0       	ldi	r24, 0x00	; 0
     10a:	08 95       	ret

0000010c <usart_getchar>:
     10c:	fc 01       	movw	r30, r24
     10e:	90 81       	ld	r25, Z
     110:	99 23       	and	r25, r25
     112:	ec f7       	brge	.-6      	; 0x10e <usart_getchar+0x2>
     114:	86 81       	ldd	r24, Z+6	; 0x06
     116:	08 95       	ret

00000118 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     118:	4f 92       	push	r4
     11a:	5f 92       	push	r5
     11c:	6f 92       	push	r6
     11e:	7f 92       	push	r7
     120:	8f 92       	push	r8
     122:	9f 92       	push	r9
     124:	af 92       	push	r10
     126:	bf 92       	push	r11
     128:	cf 92       	push	r12
     12a:	df 92       	push	r13
     12c:	ef 92       	push	r14
     12e:	ff 92       	push	r15
     130:	0f 93       	push	r16
     132:	1f 93       	push	r17
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
     138:	ec 01       	movw	r28, r24
     13a:	6a 01       	movw	r12, r20
     13c:	7b 01       	movw	r14, r22

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
     13e:	28 01       	movw	r4, r16
     140:	39 01       	movw	r6, r18
     142:	68 94       	set
     144:	12 f8       	bld	r1, 2
     146:	76 94       	lsr	r7
     148:	67 94       	ror	r6
     14a:	57 94       	ror	r5
     14c:	47 94       	ror	r4
     14e:	16 94       	lsr	r1
     150:	d1 f7       	brne	.-12     	; 0x146 <usart_set_baudrate+0x2e>
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;

	if (usart->UCSRnA & USART_U2X_bm) {
     152:	88 81       	ld	r24, Y
     154:	81 fd       	sbrc	r24, 1
     156:	0e c0       	rjmp	.+28     	; 0x174 <usart_set_baudrate+0x5c>
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;
     158:	48 01       	movw	r8, r16
     15a:	59 01       	movw	r10, r18
     15c:	07 2e       	mov	r0, r23
     15e:	73 e1       	ldi	r23, 0x13	; 19
     160:	b6 94       	lsr	r11
     162:	a7 94       	ror	r10
     164:	97 94       	ror	r9
     166:	87 94       	ror	r8
     168:	7a 95       	dec	r23
     16a:	d1 f7       	brne	.-12     	; 0x160 <usart_set_baudrate+0x48>
     16c:	70 2d       	mov	r23, r0

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
     16e:	d3 01       	movw	r26, r6
     170:	c2 01       	movw	r24, r4
     172:	15 c0       	rjmp	.+42     	; 0x19e <usart_set_baudrate+0x86>
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;

	if (usart->UCSRnA & USART_U2X_bm) {
		max_rate /= 2;
     174:	d9 01       	movw	r26, r18
     176:	c8 01       	movw	r24, r16
     178:	68 94       	set
     17a:	13 f8       	bld	r1, 3
     17c:	b6 95       	lsr	r27
     17e:	a7 95       	ror	r26
     180:	97 95       	ror	r25
     182:	87 95       	ror	r24
     184:	16 94       	lsr	r1
     186:	d1 f7       	brne	.-12     	; 0x17c <usart_set_baudrate+0x64>
		min_rate /= 2;
     188:	48 01       	movw	r8, r16
     18a:	59 01       	movw	r10, r18
     18c:	07 2e       	mov	r0, r23
     18e:	74 e1       	ldi	r23, 0x14	; 20
     190:	b6 94       	lsr	r11
     192:	a7 94       	ror	r10
     194:	97 94       	ror	r9
     196:	87 94       	ror	r8
     198:	7a 95       	dec	r23
     19a:	d1 f7       	brne	.-12     	; 0x190 <usart_set_baudrate+0x78>
     19c:	70 2d       	mov	r23, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     19e:	8c 15       	cp	r24, r12
     1a0:	9d 05       	cpc	r25, r13
     1a2:	ae 05       	cpc	r26, r14
     1a4:	bf 05       	cpc	r27, r15
     1a6:	78 f1       	brcs	.+94     	; 0x206 <usart_set_baudrate+0xee>
     1a8:	c8 14       	cp	r12, r8
     1aa:	d9 04       	cpc	r13, r9
     1ac:	ea 04       	cpc	r14, r10
     1ae:	fb 04       	cpc	r15, r11
     1b0:	60 f1       	brcs	.+88     	; 0x20a <usart_set_baudrate+0xf2>
		return false;
	}

	/* Check if double speed is enabled. */
	if (usart->UCSRnA & USART_U2X_bm) {
     1b2:	88 81       	ld	r24, Y
     1b4:	81 ff       	sbrs	r24, 1
     1b6:	10 c0       	rjmp	.+32     	; 0x1d8 <usart_set_baudrate+0xc0>
		baud *= 2;
		ubrr = (uint32_t)(cpu_hz / 8 / baud) - 1;
     1b8:	a7 01       	movw	r20, r14
     1ba:	96 01       	movw	r18, r12
     1bc:	22 0f       	add	r18, r18
     1be:	33 1f       	adc	r19, r19
     1c0:	44 1f       	adc	r20, r20
     1c2:	55 1f       	adc	r21, r21
     1c4:	c3 01       	movw	r24, r6
     1c6:	b2 01       	movw	r22, r4
     1c8:	0e 94 0d 0c 	call	0x181a	; 0x181a <__udivmodsi4>
     1cc:	da 01       	movw	r26, r20
     1ce:	c9 01       	movw	r24, r18
     1d0:	01 97       	sbiw	r24, 0x01	; 1
     1d2:	a1 09       	sbc	r26, r1
     1d4:	b1 09       	sbc	r27, r1
     1d6:	13 c0       	rjmp	.+38     	; 0x1fe <usart_set_baudrate+0xe6>
	} else {
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
     1d8:	c9 01       	movw	r24, r18
     1da:	b8 01       	movw	r22, r16
     1dc:	68 94       	set
     1de:	13 f8       	bld	r1, 3
     1e0:	96 95       	lsr	r25
     1e2:	87 95       	ror	r24
     1e4:	77 95       	ror	r23
     1e6:	67 95       	ror	r22
     1e8:	16 94       	lsr	r1
     1ea:	d1 f7       	brne	.-12     	; 0x1e0 <usart_set_baudrate+0xc8>
     1ec:	a7 01       	movw	r20, r14
     1ee:	96 01       	movw	r18, r12
     1f0:	0e 94 0d 0c 	call	0x181a	; 0x181a <__udivmodsi4>
     1f4:	da 01       	movw	r26, r20
     1f6:	c9 01       	movw	r24, r18
     1f8:	01 97       	sbiw	r24, 0x01	; 1
     1fa:	a1 09       	sbc	r26, r1
     1fc:	b1 09       	sbc	r27, r1
	}

	usart->UBRR = ubrr;
     1fe:	9d 83       	std	Y+5, r25	; 0x05
     200:	8c 83       	std	Y+4, r24	; 0x04
	return true;
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	03 c0       	rjmp	.+6      	; 0x20c <usart_set_baudrate+0xf4>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	01 c0       	rjmp	.+2      	; 0x20c <usart_set_baudrate+0xf4>
     20a:	80 e0       	ldi	r24, 0x00	; 0
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
	}

	usart->UBRR = ubrr;
	return true;
}
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	1f 91       	pop	r17
     212:	0f 91       	pop	r16
     214:	ff 90       	pop	r15
     216:	ef 90       	pop	r14
     218:	df 90       	pop	r13
     21a:	cf 90       	pop	r12
     21c:	bf 90       	pop	r11
     21e:	af 90       	pop	r10
     220:	9f 90       	pop	r9
     222:	8f 90       	pop	r8
     224:	7f 90       	pop	r7
     226:	6f 90       	pop	r6
     228:	5f 90       	pop	r5
     22a:	4f 90       	pop	r4
     22c:	08 95       	ret

0000022e <usart_init_rs232>:
 *
 * \retval true if the initialization was successful
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     22e:	0f 93       	push	r16
     230:	1f 93       	push	r17
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
     236:	ec 01       	movw	r28, r24
     238:	8b 01       	movw	r16, r22
 * \brief usart Pointer to an USART module.
 */
static inline void usart_enable_module_clock(USART_t *usart)
{
#ifdef USART0
	if ((uintptr_t)usart == (uintptr_t)&UCSR0A) {
     23a:	80 3c       	cpi	r24, 0xC0	; 192
     23c:	91 05       	cpc	r25, r1
     23e:	19 f4       	brne	.+6      	; 0x246 <usart_init_rs232+0x18>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
     240:	62 e0       	ldi	r22, 0x02	; 2
     242:	80 e0       	ldi	r24, 0x00	; 0
     244:	44 df       	rcall	.-376    	; 0xce <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_UMSEL01_gm)) | usartmode;
     246:	8a 81       	ldd	r24, Y+2	; 0x02
     248:	8f 73       	andi	r24, 0x3F	; 63
     24a:	8a 83       	std	Y+2, r24	; 0x02
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
	bool result;
	usart_enable_module_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
     24c:	f8 01       	movw	r30, r16
     24e:	26 81       	ldd	r18, Z+6	; 0x06
     250:	35 81       	ldd	r19, Z+5	; 0x05
     252:	84 81       	ldd	r24, Z+4	; 0x04
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->UCSRnC
		= ((usart)->UCSRnC &
     254:	9a 81       	ldd	r25, Y+2	; 0x02
     256:	48 2f       	mov	r20, r24
     258:	43 70       	andi	r20, 0x03	; 3
     25a:	44 0f       	add	r20, r20
     25c:	99 7f       	andi	r25, 0xF9	; 249
     25e:	94 2b       	or	r25, r20
     260:	9a 83       	std	Y+2, r25	; 0x02
			(~USART_CHSIZE01C_gm)) | ((charSize & 0x03)
			<< USART_CHSIZE01C_gp);
	(usart)->UCSRnB
		= ((usart)->UCSRnB &
     262:	99 81       	ldd	r25, Y+1	; 0x01
     264:	84 70       	andi	r24, 0x04	; 4
     266:	88 0f       	add	r24, r24
     268:	88 0f       	add	r24, r24
     26a:	9b 7f       	andi	r25, 0xFB	; 251
     26c:	89 2b       	or	r24, r25
     26e:	89 83       	std	Y+1, r24	; 0x01
			(~USART_CHSIZE2_bm)) | ((charSize & 0x04)
			<< USART_CHSIZE2_bp);

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_PMODE_gm)) | parityMode;
     270:	8a 81       	ldd	r24, Y+2	; 0x02
     272:	8f 7c       	andi	r24, 0xCF	; 207
     274:	83 2b       	or	r24, r19
     276:	8a 83       	std	Y+2, r24	; 0x02

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_STOPB_bm)) | (twoStopBits
     278:	9a 81       	ldd	r25, Y+2	; 0x02
     27a:	97 7f       	andi	r25, 0xF7	; 247
     27c:	82 2f       	mov	r24, r18
     27e:	88 0f       	add	r24, r24
     280:	88 0f       	add	r24, r24
     282:	88 0f       	add	r24, r24
     284:	89 2b       	or	r24, r25
     286:	8a 83       	std	Y+2, r24	; 0x02
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate,
     288:	40 81       	ld	r20, Z
     28a:	51 81       	ldd	r21, Z+1	; 0x01
     28c:	62 81       	ldd	r22, Z+2	; 0x02
     28e:	73 81       	ldd	r23, Z+3	; 0x03
     290:	00 e4       	ldi	r16, 0x40	; 64
     292:	12 e4       	ldi	r17, 0x42	; 66
     294:	2f e0       	ldi	r18, 0x0F	; 15
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	ce 01       	movw	r24, r28
     29a:	3e df       	rcall	.-388    	; 0x118 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_TXEN_bm;
     29c:	99 81       	ldd	r25, Y+1	; 0x01
     29e:	98 60       	ori	r25, 0x08	; 8
     2a0:	99 83       	std	Y+1, r25	; 0x01
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_RXEN_bm;
     2a2:	99 81       	ldd	r25, Y+1	; 0x01
     2a4:	90 61       	ori	r25, 0x10	; 16
     2a6:	99 83       	std	Y+1, r25	; 0x01
			sysclk_get_source_clock_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	return result;
}
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	1f 91       	pop	r17
     2ae:	0f 91       	pop	r16
     2b0:	08 95       	ret

000002b2 <loadcell_min_max_tran>:
 *  Author: jan.rune.herheim
 */ 

#include "loadcell_logger.h"

uint8_t loadcell_min_max_tran(uint16_t current_value, uint16_t *data_array) {
     2b2:	fb 01       	movw	r30, r22
	
	//find tran
	signed int tran = 0; //could go positive and negative, and could store a 15 bits number, hence enough for our 12 bits results.
	uint16_t tran_abs = 0;
	
	tran = current_value - *(data_array + POSITION_PREV); //tran = current - previous
     2b4:	22 81       	ldd	r18, Z+2	; 0x02
     2b6:	33 81       	ldd	r19, Z+3	; 0x03
     2b8:	ac 01       	movw	r20, r24
     2ba:	42 1b       	sub	r20, r18
     2bc:	53 0b       	sbc	r21, r19
     2be:	9a 01       	movw	r18, r20
	if ((abs(tran) > abs(*(data_array+POSITION_TRAN_MAX))) & (*(data_array+POSITION_ACCU_CNT) > 0)) //first step is not valid due to only one value.
     2c0:	da 01       	movw	r26, r20
     2c2:	22 f4       	brpl	.+8      	; 0x2cc <loadcell_min_max_tran+0x1a>
     2c4:	aa 27       	eor	r26, r26
     2c6:	bb 27       	eor	r27, r27
     2c8:	a4 1b       	sub	r26, r20
     2ca:	b5 0b       	sbc	r27, r21
     2cc:	42 85       	ldd	r20, Z+10	; 0x0a
     2ce:	53 85       	ldd	r21, Z+11	; 0x0b
     2d0:	55 23       	and	r21, r21
     2d2:	1c f4       	brge	.+6      	; 0x2da <loadcell_min_max_tran+0x28>
     2d4:	51 95       	neg	r21
     2d6:	41 95       	neg	r20
     2d8:	51 09       	sbc	r21, r1
     2da:	61 e0       	ldi	r22, 0x01	; 1
     2dc:	4a 17       	cp	r20, r26
     2de:	5b 07       	cpc	r21, r27
     2e0:	0c f0       	brlt	.+2      	; 0x2e4 <loadcell_min_max_tran+0x32>
     2e2:	60 e0       	ldi	r22, 0x00	; 0
     2e4:	66 23       	and	r22, r22
     2e6:	51 f0       	breq	.+20     	; 0x2fc <loadcell_min_max_tran+0x4a>
     2e8:	41 e0       	ldi	r20, 0x01	; 1
     2ea:	62 89       	ldd	r22, Z+18	; 0x12
     2ec:	73 89       	ldd	r23, Z+19	; 0x13
     2ee:	67 2b       	or	r22, r23
     2f0:	09 f4       	brne	.+2      	; 0x2f4 <loadcell_min_max_tran+0x42>
     2f2:	40 e0       	ldi	r20, 0x00	; 0
     2f4:	44 23       	and	r20, r20
     2f6:	11 f0       	breq	.+4      	; 0x2fc <loadcell_min_max_tran+0x4a>
// 			}
// 			tran_abs |= (1<<11); //flip the MSB of the 12 bits word to set the negative sign.
// 			tran = tran_abs;
// 		}
		
		*(data_array+POSITION_TRAN_MAX) = tran; //store new tran max.
     2f8:	33 87       	std	Z+11, r19	; 0x0b
     2fa:	22 87       	std	Z+10, r18	; 0x0a
	}
	
	//find min and max
	if (current_value < *(data_array+POSITION_MIN))
     2fc:	26 81       	ldd	r18, Z+6	; 0x06
     2fe:	37 81       	ldd	r19, Z+7	; 0x07
     300:	82 17       	cp	r24, r18
     302:	93 07       	cpc	r25, r19
     304:	10 f4       	brcc	.+4      	; 0x30a <loadcell_min_max_tran+0x58>
	{
		*(data_array+POSITION_MIN) = current_value; //store new min value.
     306:	97 83       	std	Z+7, r25	; 0x07
     308:	86 83       	std	Z+6, r24	; 0x06
	}
	if (current_value > *(data_array+POSITION_MAX))
     30a:	20 85       	ldd	r18, Z+8	; 0x08
     30c:	31 85       	ldd	r19, Z+9	; 0x09
     30e:	28 17       	cp	r18, r24
     310:	39 07       	cpc	r19, r25
     312:	10 f4       	brcc	.+4      	; 0x318 <loadcell_min_max_tran+0x66>
	{
		*(data_array+POSITION_MAX) = current_value; //Store new max.
     314:	91 87       	std	Z+9, r25	; 0x09
     316:	80 87       	std	Z+8, r24	; 0x08
	}
}
     318:	08 95       	ret

0000031a <__portable_avr_delay_cycles>:
	wdt_reset();
	//rtc_init_period(2); //using RTC as sampler timer.
	//wdt_enable(9);
	rtc_init_period(1);
	//sleep_enable();
}
     31a:	04 c0       	rjmp	.+8      	; 0x324 <__portable_avr_delay_cycles+0xa>
     31c:	61 50       	subi	r22, 0x01	; 1
     31e:	71 09       	sbc	r23, r1
     320:	81 09       	sbc	r24, r1
     322:	91 09       	sbc	r25, r1
     324:	61 15       	cp	r22, r1
     326:	71 05       	cpc	r23, r1
     328:	81 05       	cpc	r24, r1
     32a:	91 05       	cpc	r25, r1
     32c:	b9 f7       	brne	.-18     	; 0x31c <__portable_avr_delay_cycles+0x2>
     32e:	08 95       	ret

00000330 <usart_tx_at>:
     330:	0f 93       	push	r16
     332:	1f 93       	push	r17
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	eb 01       	movw	r28, r22
     33a:	68 81       	ld	r22, Y
     33c:	66 23       	and	r22, r22
     33e:	39 f0       	breq	.+14     	; 0x34e <usart_tx_at+0x1e>
     340:	8c 01       	movw	r16, r24
     342:	21 96       	adiw	r28, 0x01	; 1
     344:	c8 01       	movw	r24, r16
     346:	db de       	rcall	.-586    	; 0xfe <usart_putchar>
     348:	69 91       	ld	r22, Y+
     34a:	61 11       	cpse	r22, r1
     34c:	fb cf       	rjmp	.-10     	; 0x344 <usart_tx_at+0x14>
     34e:	df 91       	pop	r29
     350:	cf 91       	pop	r28
     352:	1f 91       	pop	r17
     354:	0f 91       	pop	r16
     356:	08 95       	ret

00000358 <reset_tx_data>:
     358:	44 23       	and	r20, r20
     35a:	61 f0       	breq	.+24     	; 0x374 <reset_tx_data+0x1c>
     35c:	a6 2f       	mov	r26, r22
     35e:	b7 2f       	mov	r27, r23
     360:	e8 2f       	mov	r30, r24
     362:	f9 2f       	mov	r31, r25
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	2d 91       	ld	r18, X+
     368:	3d 91       	ld	r19, X+
     36a:	21 93       	st	Z+, r18
     36c:	31 93       	st	Z+, r19
     36e:	8f 5f       	subi	r24, 0xFF	; 255
     370:	48 13       	cpse	r20, r24
     372:	f9 cf       	rjmp	.-14     	; 0x366 <reset_tx_data+0xe>
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	08 95       	ret

00000378 <reset_char_array>:
     378:	66 23       	and	r22, r22
     37a:	59 f0       	breq	.+22     	; 0x392 <reset_char_array+0x1a>
     37c:	fc 01       	movw	r30, r24
     37e:	61 50       	subi	r22, 0x01	; 1
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	6f 5f       	subi	r22, 0xFF	; 255
     384:	7f 4f       	sbci	r23, 0xFF	; 255
     386:	86 0f       	add	r24, r22
     388:	97 1f       	adc	r25, r23
     38a:	11 92       	st	Z+, r1
     38c:	e8 17       	cp	r30, r24
     38e:	f9 07       	cpc	r31, r25
     390:	e1 f7       	brne	.-8      	; 0x38a <reset_char_array+0x12>
     392:	08 95       	ret

00000394 <reset_all_data>:
     394:	64 e6       	ldi	r22, 0x64	; 100
     396:	8d e6       	ldi	r24, 0x6D	; 109
     398:	95 e0       	ldi	r25, 0x05	; 5
     39a:	ee df       	rcall	.-36     	; 0x378 <reset_char_array>
     39c:	64 e6       	ldi	r22, 0x64	; 100
     39e:	84 e7       	ldi	r24, 0x74	; 116
     3a0:	94 e0       	ldi	r25, 0x04	; 4
     3a2:	ea df       	rcall	.-44     	; 0x378 <reset_char_array>
     3a4:	41 e1       	ldi	r20, 0x11	; 17
     3a6:	65 e5       	ldi	r22, 0x55	; 85
     3a8:	73 e0       	ldi	r23, 0x03	; 3
     3aa:	82 e7       	ldi	r24, 0x72	; 114
     3ac:	95 e0       	ldi	r25, 0x05	; 5
     3ae:	d4 cf       	rjmp	.-88     	; 0x358 <reset_tx_data>
     3b0:	08 95       	ret

000003b2 <rtc_init_period>:
     3b2:	14 be       	out	0x34, r1	; 52
     3b4:	e0 e6       	ldi	r30, 0x60	; 96
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	88 e1       	ldi	r24, 0x18	; 24
     3ba:	80 83       	st	Z, r24
     3bc:	86 e4       	ldi	r24, 0x46	; 70
     3be:	80 83       	st	Z, r24
     3c0:	08 95       	ret

000003c2 <loadcell_pins_init>:
     3c2:	56 9a       	sbi	0x0a, 6	; 10
     3c4:	5e 98       	cbi	0x0b, 6	; 11
     3c6:	08 95       	ret

000003c8 <radio_pins_init>:
     3c8:	54 9a       	sbi	0x0a, 4	; 10
     3ca:	55 98       	cbi	0x0a, 5	; 10
     3cc:	08 95       	ret

000003ce <my_delay_10ms>:
     3ce:	cf 93       	push	r28
     3d0:	88 23       	and	r24, r24
     3d2:	41 f0       	breq	.+16     	; 0x3e4 <my_delay_10ms+0x16>
     3d4:	c8 2f       	mov	r28, r24
     3d6:	63 e8       	ldi	r22, 0x83	; 131
     3d8:	76 e0       	ldi	r23, 0x06	; 6
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	9d df       	rcall	.-198    	; 0x31a <__portable_avr_delay_cycles>
     3e0:	c1 50       	subi	r28, 0x01	; 1
     3e2:	c9 f7       	brne	.-14     	; 0x3d6 <my_delay_10ms+0x8>
     3e4:	cf 91       	pop	r28
     3e6:	08 95       	ret

000003e8 <loadcell_power_on>:
     3e8:	5e 9a       	sbi	0x0b, 6	; 11
     3ea:	63 e8       	ldi	r22, 0x83	; 131
     3ec:	76 e0       	ldi	r23, 0x06	; 6
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	93 cf       	rjmp	.-218    	; 0x31a <__portable_avr_delay_cycles>
     3f4:	08 95       	ret

000003f6 <loadcell_power_off>:
     3f6:	5e 98       	cbi	0x0b, 6	; 11
     3f8:	08 95       	ret

000003fa <radio_power_on>:
     3fa:	1f 93       	push	r17
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	5c 98       	cbi	0x0b, 4	; 11
     402:	67 ea       	ldi	r22, 0xA7	; 167
     404:	70 e0       	ldi	r23, 0x00	; 0
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	87 df       	rcall	.-242    	; 0x31a <__portable_avr_delay_cycles>
     40c:	5c 9a       	sbi	0x0b, 4	; 11
     40e:	6b e1       	ldi	r22, 0x1B	; 27
     410:	71 e4       	ldi	r23, 0x41	; 65
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	81 df       	rcall	.-254    	; 0x31a <__portable_avr_delay_cycles>
     418:	5c 98       	cbi	0x0b, 4	; 11
     41a:	6b e0       	ldi	r22, 0x0B	; 11
     41c:	7b e8       	ldi	r23, 0x8B	; 139
     41e:	82 e0       	ldi	r24, 0x02	; 2
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	7b df       	rcall	.-266    	; 0x31a <__portable_avr_delay_cycles>
     424:	5c 9a       	sbi	0x0b, 4	; 11
     426:	4d 99       	sbic	0x09, 5	; 9
     428:	16 c0       	rjmp	.+44     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     42a:	c0 e0       	ldi	r28, 0x00	; 0
     42c:	d1 e0       	ldi	r29, 0x01	; 1
     42e:	10 e0       	ldi	r17, 0x00	; 0
     430:	66 e3       	ldi	r22, 0x36	; 54
     432:	72 e8       	ldi	r23, 0x82	; 130
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	70 df       	rcall	.-288    	; 0x31a <__portable_avr_delay_cycles>
     43a:	cf 5f       	subi	r28, 0xFF	; 255
     43c:	89 b1       	in	r24, 0x09	; 9
     43e:	85 fb       	bst	r24, 5
     440:	88 27       	eor	r24, r24
     442:	80 f9       	bld	r24, 0
     444:	8d 17       	cp	r24, r29
     446:	41 f0       	breq	.+16     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     448:	8d 2f       	mov	r24, r29
     44a:	cb 31       	cpi	r28, 0x1B	; 27
     44c:	08 f0       	brcs	.+2      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44e:	81 2f       	mov	r24, r17
     450:	81 11       	cpse	r24, r1
     452:	ee cf       	rjmp	.-36     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     454:	01 c0       	rjmp	.+2      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     456:	c0 e0       	ldi	r28, 0x00	; 0
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	cb 31       	cpi	r28, 0x1B	; 27
     45c:	09 f0       	breq	.+2      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	1f 91       	pop	r17
     466:	08 95       	ret

00000468 <radio_power_off_at>:
     468:	1f 93       	push	r17
     46a:	cf 93       	push	r28
     46c:	df 93       	push	r29
     46e:	4d 9b       	sbis	0x09, 5	; 9
     470:	2f c0       	rjmp	.+94     	; 0x4d0 <radio_power_off_at+0x68>
     472:	c0 e0       	ldi	r28, 0x00	; 0
     474:	d1 e0       	ldi	r29, 0x01	; 1
     476:	10 e0       	ldi	r17, 0x00	; 0
     478:	6a e3       	ldi	r22, 0x3A	; 58
     47a:	71 e0       	ldi	r23, 0x01	; 1
     47c:	88 ec       	ldi	r24, 0xC8	; 200
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	57 df       	rcall	.-338    	; 0x330 <usart_tx_at>
     482:	6a e3       	ldi	r22, 0x3A	; 58
     484:	71 e0       	ldi	r23, 0x01	; 1
     486:	80 ec       	ldi	r24, 0xC0	; 192
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	52 df       	rcall	.-348    	; 0x330 <usart_tx_at>
     48c:	5c 98       	cbi	0x0b, 4	; 11
     48e:	6b e2       	ldi	r22, 0x2B	; 43
     490:	7c e2       	ldi	r23, 0x2C	; 44
     492:	8a e0       	ldi	r24, 0x0A	; 10
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	41 df       	rcall	.-382    	; 0x31a <__portable_avr_delay_cycles>
     498:	4d 9b       	sbis	0x09, 5	; 9
     49a:	10 c0       	rjmp	.+32     	; 0x4bc <radio_power_off_at+0x54>
     49c:	66 e4       	ldi	r22, 0x46	; 70
     49e:	71 e0       	ldi	r23, 0x01	; 1
     4a0:	88 ec       	ldi	r24, 0xC8	; 200
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	45 df       	rcall	.-374    	; 0x330 <usart_tx_at>
     4a6:	66 e4       	ldi	r22, 0x46	; 70
     4a8:	71 e0       	ldi	r23, 0x01	; 1
     4aa:	80 ec       	ldi	r24, 0xC0	; 192
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	40 df       	rcall	.-384    	; 0x330 <usart_tx_at>
     4b0:	5c 98       	cbi	0x0b, 4	; 11
     4b2:	61 e4       	ldi	r22, 0x41	; 65
     4b4:	72 e4       	ldi	r23, 0x42	; 66
     4b6:	8f e0       	ldi	r24, 0x0F	; 15
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	2f df       	rcall	.-418    	; 0x31a <__portable_avr_delay_cycles>
     4bc:	cf 5f       	subi	r28, 0xFF	; 255
     4be:	4d 9b       	sbis	0x09, 5	; 9
     4c0:	08 c0       	rjmp	.+16     	; 0x4d2 <radio_power_off_at+0x6a>
     4c2:	8d 2f       	mov	r24, r29
     4c4:	cb 31       	cpi	r28, 0x1B	; 27
     4c6:	08 f0       	brcs	.+2      	; 0x4ca <radio_power_off_at+0x62>
     4c8:	81 2f       	mov	r24, r17
     4ca:	81 11       	cpse	r24, r1
     4cc:	d5 cf       	rjmp	.-86     	; 0x478 <radio_power_off_at+0x10>
     4ce:	01 c0       	rjmp	.+2      	; 0x4d2 <radio_power_off_at+0x6a>
     4d0:	c0 e0       	ldi	r28, 0x00	; 0
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	cb 31       	cpi	r28, 0x1B	; 27
     4d6:	09 f0       	breq	.+2      	; 0x4da <radio_power_off_at+0x72>
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	1f 91       	pop	r17
     4e0:	08 95       	ret

000004e2 <adc_result_average>:
     4e2:	6f 92       	push	r6
     4e4:	7f 92       	push	r7
     4e6:	8f 92       	push	r8
     4e8:	9f 92       	push	r9
     4ea:	af 92       	push	r10
     4ec:	bf 92       	push	r11
     4ee:	cf 92       	push	r12
     4f0:	df 92       	push	r13
     4f2:	ef 92       	push	r14
     4f4:	ff 92       	push	r15
     4f6:	0f 93       	push	r16
     4f8:	1f 93       	push	r17
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
     502:	0d b7       	in	r16, 0x3d	; 61
     504:	1e b7       	in	r17, 0x3e	; 62
     506:	46 2f       	mov	r20, r22
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	44 0f       	add	r20, r20
     50c:	55 1f       	adc	r21, r21
     50e:	2d b7       	in	r18, 0x3d	; 61
     510:	3e b7       	in	r19, 0x3e	; 62
     512:	24 1b       	sub	r18, r20
     514:	35 0b       	sbc	r19, r21
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	f8 94       	cli
     51a:	3e bf       	out	0x3e, r19	; 62
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	2d bf       	out	0x3d, r18	; 61
     520:	ad b7       	in	r26, 0x3d	; 61
     522:	be b7       	in	r27, 0x3e	; 62
     524:	11 96       	adiw	r26, 0x01	; 1
     526:	e4 e6       	ldi	r30, 0x64	; 100
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	90 81       	ld	r25, Z
     52c:	9e 7f       	andi	r25, 0xFE	; 254
     52e:	90 83       	st	Z, r25
     530:	97 e8       	ldi	r25, 0x87	; 135
     532:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     536:	66 23       	and	r22, r22
     538:	49 f1       	breq	.+82     	; 0x58c <adc_result_average+0xaa>
     53a:	3d 01       	movw	r6, r26
     53c:	81 2c       	mov	r8, r1
     53e:	91 2c       	mov	r9, r1
     540:	54 01       	movw	r10, r8
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	0f 2e       	mov	r0, r31
     546:	fc e7       	ldi	r31, 0x7C	; 124
     548:	cf 2e       	mov	r12, r31
     54a:	d1 2c       	mov	r13, r1
     54c:	f0 2d       	mov	r31, r0
     54e:	80 64       	ori	r24, 0x40	; 64
     550:	ea e7       	ldi	r30, 0x7A	; 122
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	0f 2e       	mov	r0, r31
     556:	f8 e7       	ldi	r31, 0x78	; 120
     558:	ef 2e       	mov	r14, r31
     55a:	f1 2c       	mov	r15, r1
     55c:	f0 2d       	mov	r31, r0
     55e:	d6 01       	movw	r26, r12
     560:	8c 93       	st	X, r24
     562:	90 81       	ld	r25, Z
     564:	90 64       	ori	r25, 0x40	; 64
     566:	90 83       	st	Z, r25
     568:	90 81       	ld	r25, Z
     56a:	96 fd       	sbrc	r25, 6
     56c:	fd cf       	rjmp	.-6      	; 0x568 <adc_result_average+0x86>
     56e:	d7 01       	movw	r26, r14
     570:	4d 91       	ld	r20, X+
     572:	5c 91       	ld	r21, X
     574:	d3 01       	movw	r26, r6
     576:	4d 93       	st	X+, r20
     578:	5d 93       	st	X+, r21
     57a:	3d 01       	movw	r6, r26
     57c:	84 0e       	add	r8, r20
     57e:	95 1e       	adc	r9, r21
     580:	a1 1c       	adc	r10, r1
     582:	b1 1c       	adc	r11, r1
     584:	3f 5f       	subi	r19, 0xFF	; 255
     586:	63 13       	cpse	r22, r19
     588:	ea cf       	rjmp	.-44     	; 0x55e <adc_result_average+0x7c>
     58a:	03 c0       	rjmp	.+6      	; 0x592 <adc_result_average+0xb0>
     58c:	81 2c       	mov	r8, r1
     58e:	91 2c       	mov	r9, r1
     590:	54 01       	movw	r10, r8
     592:	26 2f       	mov	r18, r22
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	40 e0       	ldi	r20, 0x00	; 0
     598:	50 e0       	ldi	r21, 0x00	; 0
     59a:	c5 01       	movw	r24, r10
     59c:	b4 01       	movw	r22, r8
     59e:	0e 94 0d 0c 	call	0x181a	; 0x181a <__udivmodsi4>
     5a2:	c9 01       	movw	r24, r18
     5a4:	0f b6       	in	r0, 0x3f	; 63
     5a6:	f8 94       	cli
     5a8:	1e bf       	out	0x3e, r17	; 62
     5aa:	0f be       	out	0x3f, r0	; 63
     5ac:	0d bf       	out	0x3d, r16	; 61
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	1f 91       	pop	r17
     5b4:	0f 91       	pop	r16
     5b6:	ff 90       	pop	r15
     5b8:	ef 90       	pop	r14
     5ba:	df 90       	pop	r13
     5bc:	cf 90       	pop	r12
     5be:	bf 90       	pop	r11
     5c0:	af 90       	pop	r10
     5c2:	9f 90       	pop	r9
     5c4:	8f 90       	pop	r8
     5c6:	7f 90       	pop	r7
     5c8:	6f 90       	pop	r6
     5ca:	08 95       	ret

000005cc <at_get_radio_network_time>:
     5cc:	ef 92       	push	r14
     5ce:	ff 92       	push	r15
     5d0:	0f 93       	push	r16
     5d2:	1f 93       	push	r17
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	00 d0       	rcall	.+0      	; 0x5da <at_get_radio_network_time+0xe>
     5da:	1f 92       	push	r1
     5dc:	cd b7       	in	r28, 0x3d	; 61
     5de:	de b7       	in	r29, 0x3e	; 62
     5e0:	1a 82       	std	Y+2, r1	; 0x02
     5e2:	19 82       	std	Y+1, r1	; 0x01
     5e4:	1b 82       	std	Y+3, r1	; 0x03
     5e6:	0f 2e       	mov	r0, r31
     5e8:	f0 e0       	ldi	r31, 0x00	; 0
     5ea:	ef 2e       	mov	r14, r31
     5ec:	f5 e0       	ldi	r31, 0x05	; 5
     5ee:	ff 2e       	mov	r15, r31
     5f0:	f0 2d       	mov	r31, r0
     5f2:	0a e0       	ldi	r16, 0x0A	; 10
     5f4:	10 e0       	ldi	r17, 0x00	; 0
     5f6:	f7 01       	movw	r30, r14
     5f8:	31 97       	sbiw	r30, 0x01	; 1
     5fa:	80 81       	ld	r24, Z
     5fc:	89 83       	std	Y+1, r24	; 0x01
     5fe:	f7 01       	movw	r30, r14
     600:	80 81       	ld	r24, Z
     602:	8a 83       	std	Y+2, r24	; 0x02
     604:	ce 01       	movw	r24, r28
     606:	01 96       	adiw	r24, 0x01	; 1
     608:	0e 94 35 0c 	call	0x186a	; 0x186a <atoi>
     60c:	f8 01       	movw	r30, r16
     60e:	ee 0f       	add	r30, r30
     610:	ff 1f       	adc	r31, r31
     612:	ee 58       	subi	r30, 0x8E	; 142
     614:	fa 4f       	sbci	r31, 0xFA	; 250
     616:	91 83       	std	Z+1, r25	; 0x01
     618:	80 83       	st	Z, r24
     61a:	f3 e0       	ldi	r31, 0x03	; 3
     61c:	ef 0e       	add	r14, r31
     61e:	f1 1c       	adc	r15, r1
     620:	0f 5f       	subi	r16, 0xFF	; 255
     622:	1f 4f       	sbci	r17, 0xFF	; 255
     624:	00 31       	cpi	r16, 0x10	; 16
     626:	11 05       	cpc	r17, r1
     628:	31 f7       	brne	.-52     	; 0x5f6 <at_get_radio_network_time+0x2a>
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	0f 90       	pop	r0
     630:	df 91       	pop	r29
     632:	cf 91       	pop	r28
     634:	1f 91       	pop	r17
     636:	0f 91       	pop	r16
     638:	ff 90       	pop	r15
     63a:	ef 90       	pop	r14
     63c:	08 95       	ret

0000063e <tx_at_response>:
     63e:	0f 93       	push	r16
     640:	1f 93       	push	r17
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	ec 01       	movw	r28, r24
     648:	88 85       	ldd	r24, Y+8	; 0x08
     64a:	88 23       	and	r24, r24
     64c:	09 f4       	brne	.+2      	; 0x650 <tx_at_response+0x12>
     64e:	77 c0       	rjmp	.+238    	; 0x73e <tx_at_response+0x100>
     650:	10 e0       	ldi	r17, 0x00	; 0
     652:	00 e0       	ldi	r16, 0x00	; 0
     654:	60 e8       	ldi	r22, 0x80	; 128
     656:	8d ee       	ldi	r24, 0xED	; 237
     658:	94 e0       	ldi	r25, 0x04	; 4
     65a:	8e de       	rcall	.-740    	; 0x378 <reset_char_array>
     65c:	10 92 e5 04 	sts	0x04E5, r1	; 0x8004e5 <response_counter>
     660:	8c 81       	ldd	r24, Y+4	; 0x04
     662:	9d 81       	ldd	r25, Y+5	; 0x05
     664:	ae 81       	ldd	r26, Y+6	; 0x06
     666:	bf 81       	ldd	r27, Y+7	; 0x07
     668:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <response_timeout>
     66c:	90 93 e2 04 	sts	0x04E2, r25	; 0x8004e2 <response_timeout+0x1>
     670:	a0 93 e3 04 	sts	0x04E3, r26	; 0x8004e3 <response_timeout+0x2>
     674:	b0 93 e4 04 	sts	0x04E4, r27	; 0x8004e4 <response_timeout+0x3>
     678:	10 92 dd 04 	sts	0x04DD, r1	; 0x8004dd <response_timeout_counter>
     67c:	10 92 de 04 	sts	0x04DE, r1	; 0x8004de <response_timeout_counter+0x1>
     680:	10 92 df 04 	sts	0x04DF, r1	; 0x8004df <response_timeout_counter+0x2>
     684:	10 92 e0 04 	sts	0x04E0, r1	; 0x8004e0 <response_timeout_counter+0x3>
     688:	68 81       	ld	r22, Y
     68a:	79 81       	ldd	r23, Y+1	; 0x01
     68c:	80 ec       	ldi	r24, 0xC0	; 192
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	4f de       	rcall	.-866    	; 0x330 <usart_tx_at>
     692:	78 94       	sei
     694:	e0 ec       	ldi	r30, 0xC0	; 192
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	81 81       	ldd	r24, Z+1	; 0x01
     69a:	80 68       	ori	r24, 0x80	; 128
     69c:	81 83       	std	Z+1, r24	; 0x01
     69e:	40 91 dd 04 	lds	r20, 0x04DD	; 0x8004dd <response_timeout_counter>
     6a2:	50 91 de 04 	lds	r21, 0x04DE	; 0x8004de <response_timeout_counter+0x1>
     6a6:	60 91 df 04 	lds	r22, 0x04DF	; 0x8004df <response_timeout_counter+0x2>
     6aa:	70 91 e0 04 	lds	r23, 0x04E0	; 0x8004e0 <response_timeout_counter+0x3>
     6ae:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <response_timeout>
     6b2:	90 91 e2 04 	lds	r25, 0x04E2	; 0x8004e2 <response_timeout+0x1>
     6b6:	a0 91 e3 04 	lds	r26, 0x04E3	; 0x8004e3 <response_timeout+0x2>
     6ba:	b0 91 e4 04 	lds	r27, 0x04E4	; 0x8004e4 <response_timeout+0x3>
     6be:	48 17       	cp	r20, r24
     6c0:	59 07       	cpc	r21, r25
     6c2:	6a 07       	cpc	r22, r26
     6c4:	7b 07       	cpc	r23, r27
     6c6:	98 f5       	brcc	.+102    	; 0x72e <tx_at_response+0xf0>
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	81 de       	rcall	.-766    	; 0x3ce <my_delay_10ms>
     6cc:	6a 81       	ldd	r22, Y+2	; 0x02
     6ce:	7b 81       	ldd	r23, Y+3	; 0x03
     6d0:	8d ee       	ldi	r24, 0xED	; 237
     6d2:	94 e0       	ldi	r25, 0x04	; 4
     6d4:	0e 94 6d 0c 	call	0x18da	; 0x18da <strstr>
     6d8:	89 2b       	or	r24, r25
     6da:	99 f5       	brne	.+102    	; 0x742 <tx_at_response+0x104>
     6dc:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <response_timeout_counter>
     6e0:	90 91 de 04 	lds	r25, 0x04DE	; 0x8004de <response_timeout_counter+0x1>
     6e4:	a0 91 df 04 	lds	r26, 0x04DF	; 0x8004df <response_timeout_counter+0x2>
     6e8:	b0 91 e0 04 	lds	r27, 0x04E0	; 0x8004e0 <response_timeout_counter+0x3>
     6ec:	01 96       	adiw	r24, 0x01	; 1
     6ee:	a1 1d       	adc	r26, r1
     6f0:	b1 1d       	adc	r27, r1
     6f2:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <response_timeout_counter>
     6f6:	90 93 de 04 	sts	0x04DE, r25	; 0x8004de <response_timeout_counter+0x1>
     6fa:	a0 93 df 04 	sts	0x04DF, r26	; 0x8004df <response_timeout_counter+0x2>
     6fe:	b0 93 e0 04 	sts	0x04E0, r27	; 0x8004e0 <response_timeout_counter+0x3>
     702:	40 91 dd 04 	lds	r20, 0x04DD	; 0x8004dd <response_timeout_counter>
     706:	50 91 de 04 	lds	r21, 0x04DE	; 0x8004de <response_timeout_counter+0x1>
     70a:	60 91 df 04 	lds	r22, 0x04DF	; 0x8004df <response_timeout_counter+0x2>
     70e:	70 91 e0 04 	lds	r23, 0x04E0	; 0x8004e0 <response_timeout_counter+0x3>
     712:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <response_timeout>
     716:	90 91 e2 04 	lds	r25, 0x04E2	; 0x8004e2 <response_timeout+0x1>
     71a:	a0 91 e3 04 	lds	r26, 0x04E3	; 0x8004e3 <response_timeout+0x2>
     71e:	b0 91 e4 04 	lds	r27, 0x04E4	; 0x8004e4 <response_timeout+0x3>
     722:	48 17       	cp	r20, r24
     724:	59 07       	cpc	r21, r25
     726:	6a 07       	cpc	r22, r26
     728:	7b 07       	cpc	r23, r27
     72a:	70 f2       	brcs	.-100    	; 0x6c8 <tx_at_response+0x8a>
     72c:	01 e0       	ldi	r16, 0x01	; 1
     72e:	8e e1       	ldi	r24, 0x1E	; 30
     730:	4e de       	rcall	.-868    	; 0x3ce <my_delay_10ms>
     732:	1f 5f       	subi	r17, 0xFF	; 255
     734:	88 85       	ldd	r24, Y+8	; 0x08
     736:	18 17       	cp	r17, r24
     738:	08 f4       	brcc	.+2      	; 0x73c <tx_at_response+0xfe>
     73a:	8c cf       	rjmp	.-232    	; 0x654 <tx_at_response+0x16>
     73c:	03 c0       	rjmp	.+6      	; 0x744 <tx_at_response+0x106>
     73e:	00 e0       	ldi	r16, 0x00	; 0
     740:	01 c0       	rjmp	.+2      	; 0x744 <tx_at_response+0x106>
     742:	00 e0       	ldi	r16, 0x00	; 0
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	43 de       	rcall	.-890    	; 0x3ce <my_delay_10ms>
     748:	e0 ec       	ldi	r30, 0xC0	; 192
     74a:	f0 e0       	ldi	r31, 0x00	; 0
     74c:	81 81       	ldd	r24, Z+1	; 0x01
     74e:	8f 77       	andi	r24, 0x7F	; 127
     750:	81 83       	std	Z+1, r24	; 0x01
     752:	6d ee       	ldi	r22, 0xED	; 237
     754:	74 e0       	ldi	r23, 0x04	; 4
     756:	88 ec       	ldi	r24, 0xC8	; 200
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	ea dd       	rcall	.-1068   	; 0x330 <usart_tx_at>
     75c:	80 2f       	mov	r24, r16
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	1f 91       	pop	r17
     764:	0f 91       	pop	r16
     766:	08 95       	ret

00000768 <tx_data_response>:
     768:	ef 92       	push	r14
     76a:	ff 92       	push	r15
     76c:	0f 93       	push	r16
     76e:	1f 93       	push	r17
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	7c 01       	movw	r14, r24
     776:	8b 01       	movw	r16, r22
     778:	60 e8       	ldi	r22, 0x80	; 128
     77a:	8d ee       	ldi	r24, 0xED	; 237
     77c:	94 e0       	ldi	r25, 0x04	; 4
     77e:	fc dd       	rcall	.-1032   	; 0x378 <reset_char_array>
     780:	10 92 e5 04 	sts	0x04E5, r1	; 0x8004e5 <response_counter>
     784:	10 16       	cp	r1, r16
     786:	11 06       	cpc	r1, r17
     788:	74 f4       	brge	.+28     	; 0x7a6 <tx_data_response+0x3e>
     78a:	c0 e0       	ldi	r28, 0x00	; 0
     78c:	f7 01       	movw	r30, r14
     78e:	ec 0f       	add	r30, r28
     790:	f1 1d       	adc	r31, r1
     792:	60 81       	ld	r22, Z
     794:	80 ec       	ldi	r24, 0xC0	; 192
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	b2 dc       	rcall	.-1692   	; 0xfe <usart_putchar>
     79a:	cf 5f       	subi	r28, 0xFF	; 255
     79c:	8c 2f       	mov	r24, r28
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	80 17       	cp	r24, r16
     7a2:	91 07       	cpc	r25, r17
     7a4:	9c f3       	brlt	.-26     	; 0x78c <tx_data_response+0x24>
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	80 ec       	ldi	r24, 0xC0	; 192
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	a8 dc       	rcall	.-1712   	; 0xfe <usart_putchar>
     7ae:	78 94       	sei
     7b0:	c0 ec       	ldi	r28, 0xC0	; 192
     7b2:	d0 e0       	ldi	r29, 0x00	; 0
     7b4:	89 81       	ldd	r24, Y+1	; 0x01
     7b6:	80 68       	ori	r24, 0x80	; 128
     7b8:	89 83       	std	Y+1, r24	; 0x01
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	08 de       	rcall	.-1008   	; 0x3ce <my_delay_10ms>
     7be:	89 81       	ldd	r24, Y+1	; 0x01
     7c0:	8f 77       	andi	r24, 0x7F	; 127
     7c2:	89 83       	std	Y+1, r24	; 0x01
     7c4:	6d ee       	ldi	r22, 0xED	; 237
     7c6:	74 e0       	ldi	r23, 0x04	; 4
     7c8:	88 ec       	ldi	r24, 0xC8	; 200
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	b1 dd       	rcall	.-1182   	; 0x330 <usart_tx_at>
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	1f 91       	pop	r17
     7d6:	0f 91       	pop	r16
     7d8:	ff 90       	pop	r15
     7da:	ef 90       	pop	r14
     7dc:	08 95       	ret

000007de <data_to_char>:
     7de:	7f 92       	push	r7
     7e0:	8f 92       	push	r8
     7e2:	9f 92       	push	r9
     7e4:	af 92       	push	r10
     7e6:	bf 92       	push	r11
     7e8:	cf 92       	push	r12
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	cf 93       	push	r28
     7f6:	df 93       	push	r29
     7f8:	00 d0       	rcall	.+0      	; 0x7fa <data_to_char+0x1c>
     7fa:	00 d0       	rcall	.+0      	; 0x7fc <data_to_char+0x1e>
     7fc:	1f 92       	push	r1
     7fe:	cd b7       	in	r28, 0x3d	; 61
     800:	de b7       	in	r29, 0x3e	; 62
     802:	6c 01       	movw	r12, r24
     804:	1a 82       	std	Y+2, r1	; 0x02
     806:	19 82       	std	Y+1, r1	; 0x01
     808:	fe 01       	movw	r30, r28
     80a:	33 96       	adiw	r30, 0x03	; 3
     80c:	93 e0       	ldi	r25, 0x03	; 3
     80e:	df 01       	movw	r26, r30
     810:	1d 92       	st	X+, r1
     812:	9a 95       	dec	r25
     814:	e9 f7       	brne	.-6      	; 0x810 <data_to_char+0x32>
     816:	e6 2e       	mov	r14, r22
     818:	f1 2c       	mov	r15, r1
     81a:	b1 e0       	ldi	r27, 0x01	; 1
     81c:	eb 1a       	sub	r14, r27
     81e:	f1 08       	sbc	r15, r1
     820:	5a f1       	brmi	.+86     	; 0x878 <data_to_char+0x9a>
     822:	49 01       	movw	r8, r18
     824:	5a 01       	movw	r10, r20
     826:	00 e0       	ldi	r16, 0x00	; 0
     828:	10 e0       	ldi	r17, 0x00	; 0
     82a:	71 2c       	mov	r7, r1
     82c:	e7 2d       	mov	r30, r7
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	ee 0f       	add	r30, r30
     832:	ff 1f       	adc	r31, r31
     834:	ec 0d       	add	r30, r12
     836:	fd 1d       	adc	r31, r13
     838:	a4 01       	movw	r20, r8
     83a:	be 01       	movw	r22, r28
     83c:	6f 5f       	subi	r22, 0xFF	; 255
     83e:	7f 4f       	sbci	r23, 0xFF	; 255
     840:	80 81       	ld	r24, Z
     842:	91 81       	ldd	r25, Z+1	; 0x01
     844:	0e 94 87 0c 	call	0x190e	; 0x190e <itoa>
     848:	c8 01       	movw	r24, r16
     84a:	88 0f       	add	r24, r24
     84c:	99 1f       	adc	r25, r25
     84e:	88 0f       	add	r24, r24
     850:	99 1f       	adc	r25, r25
     852:	80 0f       	add	r24, r16
     854:	91 1f       	adc	r25, r17
     856:	be 01       	movw	r22, r28
     858:	6f 5f       	subi	r22, 0xFF	; 255
     85a:	7f 4f       	sbci	r23, 0xFF	; 255
     85c:	8a 0d       	add	r24, r10
     85e:	9b 1d       	adc	r25, r11
     860:	0e 94 66 0c 	call	0x18cc	; 0x18cc <strcpy>
     864:	65 e0       	ldi	r22, 0x05	; 5
     866:	ce 01       	movw	r24, r28
     868:	01 96       	adiw	r24, 0x01	; 1
     86a:	86 dd       	rcall	.-1268   	; 0x378 <reset_char_array>
     86c:	73 94       	inc	r7
     86e:	07 2d       	mov	r16, r7
     870:	10 e0       	ldi	r17, 0x00	; 0
     872:	e0 16       	cp	r14, r16
     874:	f1 06       	cpc	r15, r17
     876:	d4 f6       	brge	.-76     	; 0x82c <data_to_char+0x4e>
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	0f 90       	pop	r0
     87c:	0f 90       	pop	r0
     87e:	0f 90       	pop	r0
     880:	0f 90       	pop	r0
     882:	0f 90       	pop	r0
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
     888:	1f 91       	pop	r17
     88a:	0f 91       	pop	r16
     88c:	ff 90       	pop	r15
     88e:	ef 90       	pop	r14
     890:	df 90       	pop	r13
     892:	cf 90       	pop	r12
     894:	bf 90       	pop	r11
     896:	af 90       	pop	r10
     898:	9f 90       	pop	r9
     89a:	8f 90       	pop	r8
     89c:	7f 90       	pop	r7
     89e:	08 95       	ret

000008a0 <at_rf_status>:
     8a0:	88 e5       	ldi	r24, 0x58	; 88
     8a2:	94 e0       	ldi	r25, 0x04	; 4
     8a4:	cc de       	rcall	.-616    	; 0x63e <tx_at_response>
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	08 95       	ret

000008aa <at_rf_gprs>:
     8aa:	8f e4       	ldi	r24, 0x4F	; 79
     8ac:	94 e0       	ldi	r25, 0x04	; 4
     8ae:	c7 de       	rcall	.-626    	; 0x63e <tx_at_response>
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	08 95       	ret

000008b4 <at_rf_connect>:
     8b4:	cf 92       	push	r12
     8b6:	df 92       	push	r13
     8b8:	ef 92       	push	r14
     8ba:	ff 92       	push	r15
     8bc:	0f 93       	push	r16
     8be:	1f 93       	push	r17
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	68 94       	set
     8c6:	ee 24       	eor	r14, r14
     8c8:	e2 f8       	bld	r14, 2
     8ca:	07 e0       	ldi	r16, 0x07	; 7
     8cc:	14 e0       	ldi	r17, 0x04	; 4
     8ce:	ff 24       	eor	r15, r15
     8d0:	f3 94       	inc	r15
     8d2:	0f 2e       	mov	r0, r31
     8d4:	f3 e0       	ldi	r31, 0x03	; 3
     8d6:	df 2e       	mov	r13, r31
     8d8:	f0 2d       	mov	r31, r0
     8da:	68 94       	set
     8dc:	cc 24       	eor	r12, r12
     8de:	c1 f8       	bld	r12, 1
     8e0:	82 30       	cpi	r24, 0x02	; 2
     8e2:	61 f1       	breq	.+88     	; 0x93c <__stack+0x3d>
     8e4:	28 f4       	brcc	.+10     	; 0x8f0 <at_rf_connect+0x3c>
     8e6:	88 23       	and	r24, r24
     8e8:	49 f0       	breq	.+18     	; 0x8fc <at_rf_connect+0x48>
     8ea:	81 30       	cpi	r24, 0x01	; 1
     8ec:	b9 f0       	breq	.+46     	; 0x91c <__stack+0x1d>
     8ee:	f8 cf       	rjmp	.-16     	; 0x8e0 <at_rf_connect+0x2c>
     8f0:	83 30       	cpi	r24, 0x03	; 3
     8f2:	59 f1       	breq	.+86     	; 0x94a <__stack+0x4b>
     8f4:	84 30       	cpi	r24, 0x04	; 4
     8f6:	09 f4       	brne	.+2      	; 0x8fa <at_rf_connect+0x46>
     8f8:	3a c0       	rjmp	.+116    	; 0x96e <__stack+0x6f>
     8fa:	f2 cf       	rjmp	.-28     	; 0x8e0 <at_rf_connect+0x2c>
     8fc:	cd ea       	ldi	r28, 0xAD	; 173
     8fe:	d3 e0       	ldi	r29, 0x03	; 3
     900:	ce 01       	movw	r24, r28
     902:	9d de       	rcall	.-710    	; 0x63e <tx_at_response>
     904:	29 96       	adiw	r28, 0x09	; 9
     906:	0c 17       	cp	r16, r28
     908:	1d 07       	cpc	r17, r29
     90a:	d1 f7       	brne	.-12     	; 0x900 <__stack+0x1>
     90c:	86 e4       	ldi	r24, 0x46	; 70
     90e:	94 e0       	ldi	r25, 0x04	; 4
     910:	96 de       	rcall	.-724    	; 0x63e <tx_at_response>
     912:	81 11       	cpse	r24, r1
     914:	22 c0       	rjmp	.+68     	; 0x95a <__stack+0x5b>
     916:	5a de       	rcall	.-844    	; 0x5cc <at_get_radio_network_time>
     918:	8f 2d       	mov	r24, r15
     91a:	e2 cf       	rjmp	.-60     	; 0x8e0 <at_rf_connect+0x2c>
     91c:	89 e1       	ldi	r24, 0x19	; 25
     91e:	94 e0       	ldi	r25, 0x04	; 4
     920:	8e de       	rcall	.-740    	; 0x63e <tx_at_response>
     922:	88 23       	and	r24, r24
     924:	e1 f0       	breq	.+56     	; 0x95e <__stack+0x5f>
     926:	c8 01       	movw	r24, r16
     928:	8a de       	rcall	.-748    	; 0x63e <tx_at_response>
     92a:	88 23       	and	r24, r24
     92c:	d1 f0       	breq	.+52     	; 0x962 <__stack+0x63>
     92e:	80 e1       	ldi	r24, 0x10	; 16
     930:	94 e0       	ldi	r25, 0x04	; 4
     932:	85 de       	rcall	.-758    	; 0x63e <tx_at_response>
     934:	88 23       	and	r24, r24
     936:	b9 f0       	breq	.+46     	; 0x966 <__stack+0x67>
     938:	8c 2d       	mov	r24, r12
     93a:	d2 cf       	rjmp	.-92     	; 0x8e0 <at_rf_connect+0x2c>
     93c:	8b e2       	ldi	r24, 0x2B	; 43
     93e:	94 e0       	ldi	r25, 0x04	; 4
     940:	7e de       	rcall	.-772    	; 0x63e <tx_at_response>
     942:	88 23       	and	r24, r24
     944:	91 f0       	breq	.+36     	; 0x96a <__stack+0x6b>
     946:	8f 2d       	mov	r24, r15
     948:	cb cf       	rjmp	.-106    	; 0x8e0 <at_rf_connect+0x2c>
     94a:	84 e3       	ldi	r24, 0x34	; 52
     94c:	94 e0       	ldi	r25, 0x04	; 4
     94e:	77 de       	rcall	.-786    	; 0x63e <tx_at_response>
     950:	8d e3       	ldi	r24, 0x3D	; 61
     952:	94 e0       	ldi	r25, 0x04	; 4
     954:	74 de       	rcall	.-792    	; 0x63e <tx_at_response>
     956:	8e 2d       	mov	r24, r14
     958:	c3 cf       	rjmp	.-122    	; 0x8e0 <at_rf_connect+0x2c>
     95a:	8f 2d       	mov	r24, r15
     95c:	c1 cf       	rjmp	.-126    	; 0x8e0 <at_rf_connect+0x2c>
     95e:	8d 2d       	mov	r24, r13
     960:	bf cf       	rjmp	.-130    	; 0x8e0 <at_rf_connect+0x2c>
     962:	8d 2d       	mov	r24, r13
     964:	bd cf       	rjmp	.-134    	; 0x8e0 <at_rf_connect+0x2c>
     966:	8d 2d       	mov	r24, r13
     968:	bb cf       	rjmp	.-138    	; 0x8e0 <at_rf_connect+0x2c>
     96a:	8e 2d       	mov	r24, r14
     96c:	b9 cf       	rjmp	.-142    	; 0x8e0 <at_rf_connect+0x2c>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	1f 91       	pop	r17
     976:	0f 91       	pop	r16
     978:	ff 90       	pop	r15
     97a:	ef 90       	pop	r14
     97c:	df 90       	pop	r13
     97e:	cf 90       	pop	r12
     980:	08 95       	ret

00000982 <tx>:
     982:	0f 93       	push	r16
     984:	1f 93       	push	r17
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	ec 01       	movw	r28, r24
     98c:	8b 01       	movw	r16, r22
     98e:	82 e9       	ldi	r24, 0x92	; 146
     990:	93 e0       	ldi	r25, 0x03	; 3
     992:	55 de       	rcall	.-854    	; 0x63e <tx_at_response>
     994:	81 30       	cpi	r24, 0x01	; 1
     996:	61 f0       	breq	.+24     	; 0x9b0 <tx+0x2e>
     998:	b8 01       	movw	r22, r16
     99a:	ce 01       	movw	r24, r28
     99c:	e5 de       	rcall	.-566    	; 0x768 <tx_data_response>
     99e:	8b e9       	ldi	r24, 0x9B	; 155
     9a0:	93 e0       	ldi	r25, 0x03	; 3
     9a2:	4d de       	rcall	.-870    	; 0x63e <tx_at_response>
     9a4:	84 ea       	ldi	r24, 0xA4	; 164
     9a6:	93 e0       	ldi	r25, 0x03	; 3
     9a8:	4a de       	rcall	.-876    	; 0x63e <tx_at_response>
     9aa:	87 e7       	ldi	r24, 0x77	; 119
     9ac:	93 e0       	ldi	r25, 0x03	; 3
     9ae:	47 de       	rcall	.-882    	; 0x63e <tx_at_response>
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	1f 91       	pop	r17
     9b8:	0f 91       	pop	r16
     9ba:	08 95       	ret

000009bc <at_rf_disconnect>:
     9bc:	80 e8       	ldi	r24, 0x80	; 128
     9be:	93 e0       	ldi	r25, 0x03	; 3
     9c0:	3e de       	rcall	.-900    	; 0x63e <tx_at_response>
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	08 95       	ret

000009c6 <__vector_20>:
     9c6:	1f 92       	push	r1
     9c8:	0f 92       	push	r0
     9ca:	0f b6       	in	r0, 0x3f	; 63
     9cc:	0f 92       	push	r0
     9ce:	11 24       	eor	r1, r1
     9d0:	2f 93       	push	r18
     9d2:	3f 93       	push	r19
     9d4:	4f 93       	push	r20
     9d6:	5f 93       	push	r21
     9d8:	6f 93       	push	r22
     9da:	7f 93       	push	r23
     9dc:	8f 93       	push	r24
     9de:	9f 93       	push	r25
     9e0:	af 93       	push	r26
     9e2:	bf 93       	push	r27
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	ef 93       	push	r30
     9ea:	ff 93       	push	r31
     9ec:	c0 91 e5 04 	lds	r28, 0x04E5	; 0x8004e5 <response_counter>
     9f0:	d0 e0       	ldi	r29, 0x00	; 0
     9f2:	c3 51       	subi	r28, 0x13	; 19
     9f4:	db 4f       	sbci	r29, 0xFB	; 251
     9f6:	80 ec       	ldi	r24, 0xC0	; 192
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	88 db       	rcall	.-2288   	; 0x10c <usart_getchar>
     9fc:	88 83       	st	Y, r24
     9fe:	80 91 e5 04 	lds	r24, 0x04E5	; 0x8004e5 <response_counter>
     a02:	8f 5f       	subi	r24, 0xFF	; 255
     a04:	80 93 e5 04 	sts	0x04E5, r24	; 0x8004e5 <response_counter>
     a08:	10 92 dd 04 	sts	0x04DD, r1	; 0x8004dd <response_timeout_counter>
     a0c:	10 92 de 04 	sts	0x04DE, r1	; 0x8004de <response_timeout_counter+0x1>
     a10:	10 92 df 04 	sts	0x04DF, r1	; 0x8004df <response_timeout_counter+0x2>
     a14:	10 92 e0 04 	sts	0x04E0, r1	; 0x8004e0 <response_timeout_counter+0x3>
     a18:	ff 91       	pop	r31
     a1a:	ef 91       	pop	r30
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	bf 91       	pop	r27
     a22:	af 91       	pop	r26
     a24:	9f 91       	pop	r25
     a26:	8f 91       	pop	r24
     a28:	7f 91       	pop	r23
     a2a:	6f 91       	pop	r22
     a2c:	5f 91       	pop	r21
     a2e:	4f 91       	pop	r20
     a30:	3f 91       	pop	r19
     a32:	2f 91       	pop	r18
     a34:	0f 90       	pop	r0
     a36:	0f be       	out	0x3f, r0	; 63
     a38:	0f 90       	pop	r0
     a3a:	1f 90       	pop	r1
     a3c:	18 95       	reti

00000a3e <__vector_8>:

//main_function()
ISR(WDT_vect)
{
     a3e:	1f 92       	push	r1
     a40:	0f 92       	push	r0
     a42:	0f b6       	in	r0, 0x3f	; 63
     a44:	0f 92       	push	r0
     a46:	11 24       	eor	r1, r1
     a48:	7f 92       	push	r7
     a4a:	8f 92       	push	r8
     a4c:	9f 92       	push	r9
     a4e:	af 92       	push	r10
     a50:	bf 92       	push	r11
     a52:	cf 92       	push	r12
     a54:	df 92       	push	r13
     a56:	ef 92       	push	r14
     a58:	ff 92       	push	r15
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
     a5e:	2f 93       	push	r18
     a60:	3f 93       	push	r19
     a62:	4f 93       	push	r20
     a64:	5f 93       	push	r21
     a66:	6f 93       	push	r22
     a68:	7f 93       	push	r23
     a6a:	8f 93       	push	r24
     a6c:	9f 93       	push	r25
     a6e:	af 93       	push	r26
     a70:	bf 93       	push	r27
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	ef 93       	push	r30
     a78:	ff 93       	push	r31
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	f8 94       	cli
     a7e:	a8 95       	wdr
     a80:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     a84:	88 61       	ori	r24, 0x18	; 24
     a86:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     a8a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     a8e:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
	wdt_counter++; //watchdog set at 1 second timeout
     a90:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     a94:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     a98:	01 96       	adiw	r24, 0x01	; 1
     a9a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     a9e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	usart_tx_at(USART_TERMINAL, RESPONSE_FOOTER); //DEBUG
     aa2:	63 ee       	ldi	r22, 0xE3	; 227
     aa4:	72 e0       	ldi	r23, 0x02	; 2
     aa6:	88 ec       	ldi	r24, 0xC8	; 200
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	42 dc       	rcall	.-1916   	; 0x330 <usart_tx_at>
	usart_putchar(USART_TERMINAL, (0x30+wdt_counter)); //DEBUG
     aac:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     ab0:	60 5d       	subi	r22, 0xD0	; 208
     ab2:	88 ec       	ldi	r24, 0xC8	; 200
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	23 db       	rcall	.-2490   	; 0xfe <usart_putchar>
	usart_tx_at(USART_TERMINAL, RESPONSE_FOOTER); //DEBUG
     ab8:	63 ee       	ldi	r22, 0xE3	; 227
     aba:	72 e0       	ldi	r23, 0x02	; 2
     abc:	88 ec       	ldi	r24, 0xC8	; 200
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	37 dc       	rcall	.-1938   	; 0x330 <usart_tx_at>

	if (wdt_counter < WAKEUP_RATE)
     ac2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     ac6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     aca:	89 2b       	or	r24, r25
     acc:	09 f4       	brne	.+2      	; 0xad0 <__vector_8+0x92>
     ace:	33 c1       	rjmp	.+614    	; 0xd36 <__vector_8+0x2f8>
	{
		goto END;
	} else {wdt_counter = 0;} //reset counter if limit is reached.
     ad0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
     ad4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	
	RTC_ISR_ACTIVE = 1;
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <RTC_ISR_ACTIVE>
				controller_next_state = READ_EXT_DATA;
				RTC_ISR_ACTIVE = 0; //FINISHED, break LOOP!
				break;
			
			default:
				controller_next_state = RESET_REGISTERS; //TRY RESET.
     ade:	0f 2e       	mov	r0, r31
     ae0:	fb e0       	ldi	r31, 0x0B	; 11
     ae2:	df 2e       	mov	r13, r31
     ae4:	f0 2d       	mov	r31, r0
 				{
// 					//tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_DISNNECT); //set failure status
// 					controller_next_state = RF_POWER_OFF; // RF_DISCONNECT; //if failure go to disconnect
// 					break;
 				}
				controller_next_state = RF_POWER_OFF;
     ae6:	1a e0       	ldi	r17, 0x0A	; 10
			case TX_DATA:
				controller_next_state = RX_DATA;
				break;
			
			case RX_DATA:
				controller_next_state = RF_DISCONNECT;
     ae8:	0f 2e       	mov	r0, r31
     aea:	f9 e0       	ldi	r31, 0x09	; 9
     aec:	ef 2e       	mov	r14, r31
     aee:	f0 2d       	mov	r31, r0
				}
				controller_next_state = TX_DATA;
				break;
			
			case TX_DATA:
				controller_next_state = RX_DATA;
     af0:	68 94       	set
     af2:	99 24       	eor	r9, r9
     af4:	93 f8       	bld	r9, 3
				}
				controller_next_state = GENERATE_PACKAGE;
				break;
			
			case GENERATE_PACKAGE:
				transfer_data_package_counter = 2;
     af6:	68 94       	set
     af8:	ff 24       	eor	r15, r15
     afa:	f1 f8       	bld	r15, 1
     afc:	00 e0       	ldi	r16, 0x00	; 0
					#endif // DEBUG

					transfer_data_package_counter++;
					
				}
				controller_next_state = TX_DATA;
     afe:	0f 2e       	mov	r0, r31
     b00:	f7 e0       	ldi	r31, 0x07	; 7
     b02:	af 2e       	mov	r10, r31
     b04:	f0 2d       	mov	r31, r0
				{
					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_CONNECT); //set failure status
					controller_next_state = RF_POWER_OFF; // RF_DISCONNECT; //if failure go to disconnect
					break;
				}
				controller_next_state = GENERATE_PACKAGE;
     b06:	0f 2e       	mov	r0, r31
     b08:	f6 e0       	ldi	r31, 0x06	; 6
     b0a:	7f 2e       	mov	r7, r31
     b0c:	f0 2d       	mov	r31, r0
				 
				//usart_putchar(USART_TERMINAL, 0x40);
				at_rf_gprs();
				if (at_rf_connect(0) != 0) //Connect to network. MAKE STATUS REPORT FROM THIS!!!!!!!
				{
					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_CONNECT); //set failure status
     b0e:	c2 e7       	ldi	r28, 0x72	; 114
     b10:	d5 e0       	ldi	r29, 0x05	; 5
					
// 					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_POWER_ON); //set failure status
// 					controller_next_state = RF_POWER_OFF; //if failure go to power off
// 					break;
 				}
				controller_next_state = RF_CONNECT;
     b12:	0f 2e       	mov	r0, r31
     b14:	f5 e0       	ldi	r31, 0x05	; 5
     b16:	bf 2e       	mov	r11, r31
     b18:	f0 2d       	mov	r31, r0
				break;
			
			case STORE_EXT_MEM:
				tx_data[POSITION_TIME] = 0; //reset accumulation counter if something???????????????
				
				controller_next_state = RF_POWER_ON;
     b1a:	68 94       	set
     b1c:	cc 24       	eor	r12, r12
     b1e:	c2 f8       	bld	r12, 2
				tx_data[POSITION_TIME] = transmit_counter; //increase timestamp counter.
			
				if (tx_data[POSITION_TIME] >= (TRANSMIT_RATE/WAKEUP_RATE)) //if accumulation limit is reached.
				{
					transmit_counter = 0; //reset counter
					controller_next_state = CALC; //limit reached, go to next
     b20:	68 94       	set
     b22:	88 24       	eor	r8, r8
     b24:	81 f8       	bld	r8, 1
	
	RTC_ISR_ACTIVE = 1;
	while (RTC_ISR_ACTIVE == 1)
	{
		
		switch(controller_state) {
     b26:	e0 91 e9 04 	lds	r30, 0x04E9	; 0x8004e9 <controller_state>
     b2a:	8e 2f       	mov	r24, r30
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	8c 30       	cpi	r24, 0x0C	; 12
     b30:	91 05       	cpc	r25, r1
     b32:	08 f0       	brcs	.+2      	; 0xb36 <__vector_8+0xf8>
     b34:	f5 c0       	rjmp	.+490    	; 0xd20 <__vector_8+0x2e2>
     b36:	fc 01       	movw	r30, r24
     b38:	e2 5c       	subi	r30, 0xC2	; 194
     b3a:	ff 4f       	sbci	r31, 0xFF	; 255
			
			case READ_EXT_DATA:
				controller_next_state = MEASURE;
     b3c:	90 c6       	rjmp	.+3360   	; 0x185e <__tablejump2__>
				break;
			
			case MEASURE:
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL///////////////////////////
				loadcell_power_on();
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	80 93 e8 04 	sts	0x04E8, r24	; 0x8004e8 <controller_next_state>
				tx_data[POSITION_CURRENT] = adc_result_average(ADC_MUX_ADC0, ADC_NUM_AVG); //NEED TO FIX ADC CONVERSINS!!!!!!!!
     b44:	ef c0       	rjmp	.+478    	; 0xd24 <__vector_8+0x2e6>
     b46:	50 dc       	rcall	.-1888   	; 0x3e8 <loadcell_power_on>
     b48:	6e 2d       	mov	r22, r14
// 				tx_data[POSITION_ANA3] = adc_result_average(ADC_MUX_ADC3, ADC_NUM_AVG); //
// 				tx_data[POSITION_ANA4] = adc_result_average(ADC_MUX_ADC4, ADC_NUM_AVG); //
// 				tx_data[POSITION_ANA5] = adc_result_average(ADC_MUX_ADC5, ADC_NUM_AVG); //
// 				//tx_data[POSITION_TEMP] = adc_result_average(ADC_MUX_TEMPSENSE, 1); //PIN CHANGE HAVE NO EFFECT ON ADCB
 				//tx_data[POSITION_VDD] = adc_result_average(ADC_MUX_1V1, 1); //PIN CHANGE HAVE NO EFFECT ON ADCB
				 tx_data[POSITION_VDD] = ((1.05*1024)/(adc_result_average(ADC_MUX_1V1, 1)))*1000; //PIN CHANGE HAVE NO EFFECT ON ADCB
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	ca dc       	rcall	.-1644   	; 0x4e2 <adc_result_average>
     b4e:	99 83       	std	Y+1, r25	; 0x01
     b50:	88 83       	st	Y, r24
     b52:	61 e0       	ldi	r22, 0x01	; 1
     b54:	8e e1       	ldi	r24, 0x1E	; 30
     b56:	c5 dc       	rcall	.-1654   	; 0x4e2 <adc_result_average>
     b58:	bc 01       	movw	r22, r24
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	6c d5       	rcall	.+2776   	; 0x1638 <__floatunsisf>
     b60:	9b 01       	movw	r18, r22
     b62:	ac 01       	movw	r20, r24
     b64:	66 e6       	ldi	r22, 0x66	; 102
     b66:	76 e6       	ldi	r23, 0x66	; 102
     b68:	86 e8       	ldi	r24, 0x86	; 134
     b6a:	94 e4       	ldi	r25, 0x44	; 68
     b6c:	d1 d4       	rcall	.+2466   	; 0x1510 <__divsf3>
     b6e:	20 e0       	ldi	r18, 0x00	; 0
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	4a e7       	ldi	r20, 0x7A	; 122
     b74:	54 e4       	ldi	r21, 0x44	; 68
				 
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL///////////////////////////
				loadcell_power_off();
     b76:	ee d5       	rcall	.+3036   	; 0x1754 <__mulsf3>
     b78:	33 d5       	rcall	.+2662   	; 0x15e0 <__fixunssfsi>
				//////////////////////////////////////////////////////////////////////////
				
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				accu_data += tx_data[POSITION_CURRENT]; //controller_measure(9, &tx_data); //measure with averaging, and accumulate.
     b7a:	7f 87       	std	Y+15, r23	; 0x0f
     b7c:	6e 87       	std	Y+14, r22	; 0x0e
     b7e:	3b dc       	rcall	.-1930   	; 0x3f6 <loadcell_power_off>
     b80:	28 81       	ld	r18, Y
     b82:	39 81       	ldd	r19, Y+1	; 0x01
     b84:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <accu_data>
     b88:	90 91 da 04 	lds	r25, 0x04DA	; 0x8004da <accu_data+0x1>
     b8c:	a0 91 db 04 	lds	r26, 0x04DB	; 0x8004db <accu_data+0x2>
     b90:	b0 91 dc 04 	lds	r27, 0x04DC	; 0x8004dc <accu_data+0x3>
     b94:	82 0f       	add	r24, r18
     b96:	93 1f       	adc	r25, r19
     b98:	a1 1d       	adc	r26, r1
     b9a:	b1 1d       	adc	r27, r1
     b9c:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <accu_data>
     ba0:	90 93 da 04 	sts	0x04DA, r25	; 0x8004da <accu_data+0x1>
				loadcell_min_max_tran(tx_data[POSITION_CURRENT], &tx_data); //check if new value should be stored in min, max and tran.
     ba4:	a0 93 db 04 	sts	0x04DB, r26	; 0x8004db <accu_data+0x2>
     ba8:	b0 93 dc 04 	sts	0x04DC, r27	; 0x8004dc <accu_data+0x3>
     bac:	88 81       	ld	r24, Y
				tx_data[POSITION_PREV] = tx_data[POSITION_CURRENT]; //store adc value for next measurement.
     bae:	99 81       	ldd	r25, Y+1	; 0x01
     bb0:	be 01       	movw	r22, r28
     bb2:	7f db       	rcall	.-2306   	; 0x2b2 <loadcell_min_max_tran>
     bb4:	88 81       	ld	r24, Y
				///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				
				transmit_counter++;		
     bb6:	99 81       	ldd	r25, Y+1	; 0x01
     bb8:	9b 83       	std	Y+3, r25	; 0x03
     bba:	8a 83       	std	Y+2, r24	; 0x02
     bbc:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <transmit_counter>
     bc0:	90 91 e7 04 	lds	r25, 0x04E7	; 0x8004e7 <transmit_counter+0x1>
     bc4:	01 96       	adiw	r24, 0x01	; 1
     bc6:	90 93 e7 04 	sts	0x04E7, r25	; 0x8004e7 <transmit_counter+0x1>
				tx_data[POSITION_TIME] = transmit_counter; //increase timestamp counter.
     bca:	80 93 e6 04 	sts	0x04E6, r24	; 0x8004e6 <transmit_counter>
			
				if (tx_data[POSITION_TIME] >= (TRANSMIT_RATE/WAKEUP_RATE)) //if accumulation limit is reached.
     bce:	9b 8b       	std	Y+19, r25	; 0x13
     bd0:	8a 8b       	std	Y+18, r24	; 0x12
     bd2:	8a 89       	ldd	r24, Y+18	; 0x12
     bd4:	9b 89       	ldd	r25, Y+19	; 0x13
				{
					transmit_counter = 0; //reset counter
     bd6:	88 35       	cpi	r24, 0x58	; 88
     bd8:	92 40       	sbci	r25, 0x02	; 2
     bda:	38 f0       	brcs	.+14     	; 0xbea <__vector_8+0x1ac>
     bdc:	10 92 e7 04 	sts	0x04E7, r1	; 0x8004e7 <transmit_counter+0x1>
					controller_next_state = CALC; //limit reached, go to next
     be0:	10 92 e6 04 	sts	0x04E6, r1	; 0x8004e6 <transmit_counter>
					} else {
					controller_next_state = READ_EXT_DATA; //Start from top again
     be4:	80 92 e8 04 	sts	0x04E8, r8	; 0x8004e8 <controller_next_state>
					RTC_ISR_ACTIVE = 0; //Break loop and go to sleep again
     be8:	9d c0       	rjmp	.+314    	; 0xd24 <__vector_8+0x2e6>
     bea:	10 92 e8 04 	sts	0x04E8, r1	; 0x8004e8 <controller_next_state>
				}
				break;
			
			case CALC:
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				tx_data[POSITION_AVG] = controller_calc_avg(accu_data, tx_data[POSITION_TIME]); //calc and store average.
     bee:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <RTC_ISR_ACTIVE>


uint16_t controller_calc_avg(uint32_t data, uint16_t cnt) {
	uint16_t avg = 0;
	
	avg = data/cnt;
     bf2:	98 c0       	rjmp	.+304    	; 0xd24 <__vector_8+0x2e6>
     bf4:	2a 89       	ldd	r18, Y+18	; 0x12
     bf6:	3b 89       	ldd	r19, Y+19	; 0x13
     bf8:	40 e0       	ldi	r20, 0x00	; 0
     bfa:	50 e0       	ldi	r21, 0x00	; 0
     bfc:	60 91 d9 04 	lds	r22, 0x04D9	; 0x8004d9 <accu_data>
     c00:	70 91 da 04 	lds	r23, 0x04DA	; 0x8004da <accu_data+0x1>
     c04:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <accu_data+0x2>
				}
				break;
			
			case CALC:
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				tx_data[POSITION_AVG] = controller_calc_avg(accu_data, tx_data[POSITION_TIME]); //calc and store average.
     c08:	90 91 dc 04 	lds	r25, 0x04DC	; 0x8004dc <accu_data+0x3>
				accu_data = 0; //reset parameters
     c0c:	06 d6       	rcall	.+3084   	; 0x181a <__udivmodsi4>
     c0e:	3d 83       	std	Y+5, r19	; 0x05
     c10:	2c 83       	std	Y+4, r18	; 0x04
     c12:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <accu_data>
     c16:	10 92 da 04 	sts	0x04DA, r1	; 0x8004da <accu_data+0x1>
				///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				controller_next_state = STORE_EXT_MEM;
     c1a:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <accu_data+0x2>
				break;
     c1e:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <accu_data+0x3>
			
			case STORE_EXT_MEM:
				tx_data[POSITION_TIME] = 0; //reset accumulation counter if something???????????????
				
				controller_next_state = RF_POWER_ON;
     c22:	83 e0       	ldi	r24, 0x03	; 3
				break;
     c24:	80 93 e8 04 	sts	0x04E8, r24	; 0x8004e8 <controller_next_state>
			
			case RF_POWER_ON:
				if (radio_power_on() == 1) //power on and check if it fails
     c28:	7d c0       	rjmp	.+250    	; 0xd24 <__vector_8+0x2e6>
					
// 					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_POWER_ON); //set failure status
// 					controller_next_state = RF_POWER_OFF; //if failure go to power off
// 					break;
 				}
				controller_next_state = RF_CONNECT;
     c2a:	1b 8a       	std	Y+19, r1	; 0x13
     c2c:	1a 8a       	std	Y+18, r1	; 0x12
				break;
     c2e:	c0 92 e8 04 	sts	0x04E8, r12	; 0x8004e8 <controller_next_state>
			
			case RF_CONNECT: //NEED MORE POWER!!!!!!
				if (at_rf_status() != 0)
     c32:	78 c0       	rjmp	.+240    	; 0xd24 <__vector_8+0x2e6>
     c34:	e2 db       	rcall	.-2108   	; 0x3fa <radio_power_on>
     c36:	b0 92 e8 04 	sts	0x04E8, r11	; 0x8004e8 <controller_next_state>
				{
					controller_next_state = RF_POWER_OFF; // RF_DISCONNECT; //if failure go to disconnect
     c3a:	74 c0       	rjmp	.+232    	; 0xd24 <__vector_8+0x2e6>
					break;
     c3c:	31 de       	rcall	.-926    	; 0x8a0 <at_rf_status>
				}
				 
				//usart_putchar(USART_TERMINAL, 0x40);
				at_rf_gprs();
     c3e:	88 23       	and	r24, r24
     c40:	19 f0       	breq	.+6      	; 0xc48 <__vector_8+0x20a>
				if (at_rf_connect(0) != 0) //Connect to network. MAKE STATUS REPORT FROM THIS!!!!!!!
     c42:	10 93 e8 04 	sts	0x04E8, r17	; 0x8004e8 <controller_next_state>
     c46:	6e c0       	rjmp	.+220    	; 0xd24 <__vector_8+0x2e6>
     c48:	30 de       	rcall	.-928    	; 0x8aa <at_rf_gprs>
     c4a:	80 e0       	ldi	r24, 0x00	; 0
				{
					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_CONNECT); //set failure status
     c4c:	33 de       	rcall	.-922    	; 0x8b4 <at_rf_connect>
     c4e:	88 23       	and	r24, r24
     c50:	41 f0       	breq	.+16     	; 0xc62 <__vector_8+0x224>
     c52:	88 a1       	ldd	r24, Y+32	; 0x20
     c54:	99 a1       	ldd	r25, Y+33	; 0x21
					controller_next_state = RF_POWER_OFF; // RF_DISCONNECT; //if failure go to disconnect
     c56:	82 60       	ori	r24, 0x02	; 2
     c58:	99 a3       	std	Y+33, r25	; 0x21
					break;
				}
				controller_next_state = GENERATE_PACKAGE;
     c5a:	88 a3       	std	Y+32, r24	; 0x20
				break;
     c5c:	10 93 e8 04 	sts	0x04E8, r17	; 0x8004e8 <controller_next_state>
			
			case GENERATE_PACKAGE:
				transfer_data_package_counter = 2;
     c60:	61 c0       	rjmp	.+194    	; 0xd24 <__vector_8+0x2e6>
     c62:	70 92 e8 04 	sts	0x04E8, r7	; 0x8004e8 <controller_next_state>
     c66:	5e c0       	rjmp	.+188    	; 0xd24 <__vector_8+0x2e6>
				while (transfer_data_package_counter < 8)
 				{
					data_to_char(&tx_data[transfer_data_package_counter], 1, &tx_data_bytes, TRANSFER_DATA_BASE); //data to ascii
     c68:	f0 92 70 04 	sts	0x0470, r15	; 0x800470 <__data_end>
     c6c:	00 93 71 04 	sts	0x0471, r16	; 0x800471 <__data_end+0x1>
     c70:	8f 2d       	mov	r24, r15
     c72:	90 2f       	mov	r25, r16
     c74:	88 0f       	add	r24, r24
     c76:	99 1f       	adc	r25, r25
     c78:	2a e0       	ldi	r18, 0x0A	; 10
     c7a:	30 e0       	ldi	r19, 0x00	; 0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     c7c:	4d e6       	ldi	r20, 0x6D	; 109
     c7e:	55 e0       	ldi	r21, 0x05	; 5
     c80:	61 e0       	ldi	r22, 0x01	; 1
     c82:	8e 58       	subi	r24, 0x8E	; 142
     c84:	9a 4f       	sbci	r25, 0xFA	; 250
     c86:	ab dd       	rcall	.-1194   	; 0x7de <data_to_char>
     c88:	41 2f       	mov	r20, r17
     c8a:	6a ee       	ldi	r22, 0xEA	; 234
					itoa(transfer_data_package_counter, mqtt_sub_topic, 10); //counter to text for sub-topic
					transfer_data_length_package = mqtt_packet(&tx_data_bytes, &tx_data_package, TRANSFER_DATA_SIZE_PACKAGE, &mqtt_sub_topic); //convert ascii data to MQTT package.
     c8c:	74 e0       	ldi	r23, 0x04	; 4
     c8e:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <__data_end>
     c92:	90 91 71 04 	lds	r25, 0x0471	; 0x800471 <__data_end+0x1>
     c96:	45 d6       	rcall	.+3210   	; 0x1922 <__itoa_ncheck>
     c98:	2a ee       	ldi	r18, 0xEA	; 234
     c9a:	34 e0       	ldi	r19, 0x04	; 4
     c9c:	44 e6       	ldi	r20, 0x64	; 100
     c9e:	50 e0       	ldi	r21, 0x00	; 0
     ca0:	64 e7       	ldi	r22, 0x74	; 116
								
					if (transfer_data_package_counter > 2)
     ca2:	74 e0       	ldi	r23, 0x04	; 4
     ca4:	8d e6       	ldi	r24, 0x6D	; 109
     ca6:	95 e0       	ldi	r25, 0x05	; 5
     ca8:	91 d3       	rcall	.+1826   	; 0x13cc <mqtt_packet>
     caa:	90 93 73 04 	sts	0x0473, r25	; 0x800473 <transfer_data_length_package+0x1>
					{
						//status for open new connection
						at_rf_connect(1); //1	
     cae:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <transfer_data_length_package>
     cb2:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <__data_end>
					}
					
					tx(&tx_data_package, transfer_data_length_package); //transmit package. GENERATE STATUS FROM THIS.
     cb6:	90 91 71 04 	lds	r25, 0x0471	; 0x800471 <__data_end+0x1>
     cba:	03 97       	sbiw	r24, 0x03	; 3
     cbc:	14 f0       	brlt	.+4      	; 0xcc2 <__vector_8+0x284>
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	f9 dd       	rcall	.-1038   	; 0x8b4 <at_rf_connect>
     cc2:	60 91 72 04 	lds	r22, 0x0472	; 0x800472 <transfer_data_length_package>
					reset_char_array(&mqtt_sub_topic, 3);
     cc6:	70 91 73 04 	lds	r23, 0x0473	; 0x800473 <transfer_data_length_package+0x1>
     cca:	84 e7       	ldi	r24, 0x74	; 116
// 						itoa(transfer_data_length_package, package_lenght, 10);
// 						strcpy(mystring, package_lenght);
// 						usart_tx_at(USART_TERMINAL, mystring);
					#endif // DEBUG

					transfer_data_package_counter++;
     ccc:	94 e0       	ldi	r25, 0x04	; 4
     cce:	59 de       	rcall	.-846    	; 0x982 <tx>
     cd0:	63 e0       	ldi	r22, 0x03	; 3
     cd2:	8a ee       	ldi	r24, 0xEA	; 234
     cd4:	94 e0       	ldi	r25, 0x04	; 4
     cd6:	50 db       	rcall	.-2400   	; 0x378 <reset_char_array>
     cd8:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <__data_end>
				controller_next_state = GENERATE_PACKAGE;
				break;
			
			case GENERATE_PACKAGE:
				transfer_data_package_counter = 2;
				while (transfer_data_package_counter < 8)
     cdc:	90 91 71 04 	lds	r25, 0x0471	; 0x800471 <__data_end+0x1>
     ce0:	01 96       	adiw	r24, 0x01	; 1
					#endif // DEBUG

					transfer_data_package_counter++;
					
				}
				controller_next_state = TX_DATA;
     ce2:	90 93 71 04 	sts	0x0471, r25	; 0x800471 <__data_end+0x1>
				break;
     ce6:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <__data_end>
			
			case TX_DATA:
				controller_next_state = RX_DATA;
     cea:	88 30       	cpi	r24, 0x08	; 8
				break;
     cec:	91 05       	cpc	r25, r1
			
			case RX_DATA:
				controller_next_state = RF_DISCONNECT;
     cee:	0c f4       	brge	.+2      	; 0xcf2 <__vector_8+0x2b4>
     cf0:	c1 cf       	rjmp	.-126    	; 0xc74 <__vector_8+0x236>
				break;
     cf2:	a0 92 e8 04 	sts	0x04E8, r10	; 0x8004e8 <controller_next_state>
			
			case RF_DISCONNECT:
 				if (at_rf_disconnect() != 0) //Status will not be transmitted, but could probably be stored for later.
     cf6:	16 c0       	rjmp	.+44     	; 0xd24 <__vector_8+0x2e6>
 				{
// 					//tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_DISNNECT); //set failure status
// 					controller_next_state = RF_POWER_OFF; // RF_DISCONNECT; //if failure go to disconnect
// 					break;
 				}
				controller_next_state = RF_POWER_OFF;
     cf8:	90 92 e8 04 	sts	0x04E8, r9	; 0x8004e8 <controller_next_state>
				break;
			
			case RF_POWER_OFF:
				radio_power_off_at(); //radio power down
     cfc:	13 c0       	rjmp	.+38     	; 0xd24 <__vector_8+0x2e6>
				controller_next_state = RESET_REGISTERS;
     cfe:	e0 92 e8 04 	sts	0x04E8, r14	; 0x8004e8 <controller_next_state>
				break;
     d02:	10 c0       	rjmp	.+32     	; 0xd24 <__vector_8+0x2e6>
			
			case RESET_REGISTERS:
				reset_all_data(); //reset all arrays
     d04:	5b de       	rcall	.-842    	; 0x9bc <at_rf_disconnect>
     d06:	10 93 e8 04 	sts	0x04E8, r17	; 0x8004e8 <controller_next_state>
				controller_next_state = READ_EXT_DATA;
     d0a:	0c c0       	rjmp	.+24     	; 0xd24 <__vector_8+0x2e6>
				RTC_ISR_ACTIVE = 0; //FINISHED, break LOOP!
     d0c:	ad db       	rcall	.-2214   	; 0x468 <radio_power_off_at>
     d0e:	d0 92 e8 04 	sts	0x04E8, r13	; 0x8004e8 <controller_next_state>
				break;
			
			default:
				controller_next_state = RESET_REGISTERS; //TRY RESET.
     d12:	08 c0       	rjmp	.+16     	; 0xd24 <__vector_8+0x2e6>
     d14:	3f db       	rcall	.-2434   	; 0x394 <reset_all_data>
				break;
		}
		
		controller_state = controller_next_state; //NEXT STATE => STATE
     d16:	10 92 e8 04 	sts	0x04E8, r1	; 0x8004e8 <controller_next_state>
     d1a:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <RTC_ISR_ACTIVE>
	{
		goto END;
	} else {wdt_counter = 0;} //reset counter if limit is reached.
	
	RTC_ISR_ACTIVE = 1;
	while (RTC_ISR_ACTIVE == 1)
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <__vector_8+0x2e6>
     d20:	d0 92 e8 04 	sts	0x04E8, r13	; 0x8004e8 <controller_next_state>
     d24:	80 91 e8 04 	lds	r24, 0x04E8	; 0x8004e8 <controller_next_state>
		
	}

	END:
	
	wdt_reset();
     d28:	80 93 e9 04 	sts	0x04E9, r24	; 0x8004e9 <controller_state>
	//wdt_enable();
	rtc_init_period(1);
     d2c:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <RTC_ISR_ACTIVE>
     d30:	81 30       	cpi	r24, 0x01	; 1
	return;
	
}
     d32:	09 f4       	brne	.+2      	; 0xd36 <__vector_8+0x2f8>
     d34:	f8 ce       	rjmp	.-528    	; 0xb26 <__vector_8+0xe8>
     d36:	a8 95       	wdr
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	3a db       	rcall	.-2444   	; 0x3b2 <rtc_init_period>
     d3e:	ff 91       	pop	r31
     d40:	ef 91       	pop	r30
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	bf 91       	pop	r27
     d48:	af 91       	pop	r26
     d4a:	9f 91       	pop	r25
     d4c:	8f 91       	pop	r24
     d4e:	7f 91       	pop	r23
     d50:	6f 91       	pop	r22
     d52:	5f 91       	pop	r21
     d54:	4f 91       	pop	r20
     d56:	3f 91       	pop	r19
     d58:	2f 91       	pop	r18
     d5a:	1f 91       	pop	r17
     d5c:	0f 91       	pop	r16
     d5e:	ff 90       	pop	r15
     d60:	ef 90       	pop	r14
     d62:	df 90       	pop	r13
     d64:	cf 90       	pop	r12
     d66:	bf 90       	pop	r11
     d68:	af 90       	pop	r10
     d6a:	9f 90       	pop	r9
     d6c:	8f 90       	pop	r8
     d6e:	7f 90       	pop	r7
     d70:	0f 90       	pop	r0
     d72:	0f be       	out	0x3f, r0	; 63
     d74:	0f 90       	pop	r0
     d76:	1f 90       	pop	r1
     d78:	18 95       	reti

00000d7a <main>:
		
	/* Initialize the board.
	 * The board-specific conf_board.h file contains the configuration of
	 * the board initialization.
	 */
	board_init();
     d7a:	f8 94       	cli
}
#endif // DEBUG

static void adc_initialization(void)
{
	PRR0 &= ~(1<<PRADC); //enable ADC clock
     d7c:	c8 d3       	rcall	.+1936   	; 0x150e <board_init>
     d7e:	e4 e6       	ldi	r30, 0x64	; 100
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	8e 7f       	andi	r24, 0xFE	; 254
 *
 * \param prescaler   ADC clock prescaler
 */
static inline void adc_init(enum adc_prescaler prescaler)
{
	ADCSRA = (uint8_t)prescaler | (1 << ADEN);
     d86:	80 83       	st	Z, r24
     d88:	87 e8       	ldi	r24, 0x87	; 135
     d8a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	//Enable The receiver and transmitter
	UCSR0B |= (1<<3);
	*/
	//////////////////////////////////////////////////////////////////////////
	//unsigned char data = 0x40;
	usart_init_rs232(USART_RADIO, &USART_OPTIONS); //Radio UART
     d8e:	62 e0       	ldi	r22, 0x02	; 2
     d90:	71 e0       	ldi	r23, 0x01	; 1
     d92:	80 ec       	ldi	r24, 0xC0	; 192
	sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	4b da       	rcall	.-2922   	; 0x22e <usart_init_rs232>
     d98:	62 e0       	ldi	r22, 0x02	; 2
	
	usart_init_rs232(USART_TERMINAL, &USART_OPTIONS); //Radio UART
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	98 d9       	rcall	.-3280   	; 0xce <sysclk_enable_module>
     d9e:	62 e0       	ldi	r22, 0x02	; 2
     da0:	71 e0       	ldi	r23, 0x01	; 1
	sysclk_enable_module(POWER_RED_REG0, PRUSART1_bm);
     da2:	88 ec       	ldi	r24, 0xC8	; 200
     da4:	90 e0       	ldi	r25, 0x00	; 0
// 	
// 	//initialize radio pins
 	delay_s(1); //wait for voltages to settle
     da6:	43 da       	rcall	.-2938   	; 0x22e <usart_init_rs232>
     da8:	60 e1       	ldi	r22, 0x10	; 16
     daa:	80 e0       	ldi	r24, 0x00	; 0
 	radio_pins_init();
     dac:	90 d9       	rcall	.-3296   	; 0xce <sysclk_enable_module>
     dae:	6b e0       	ldi	r22, 0x0B	; 11
     db0:	7b e8       	ldi	r23, 0x8B	; 139
     db2:	82 e0       	ldi	r24, 0x02	; 2
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	b1 da       	rcall	.-2718   	; 0x31a <__portable_avr_delay_cycles>
     db8:	07 db       	rcall	.-2546   	; 0x3c8 <radio_pins_init>
     dba:	6b e0       	ldi	r22, 0x0B	; 11
     dbc:	7b e8       	ldi	r23, 0x8B	; 139
     dbe:	82 e0       	ldi	r24, 0x02	; 2
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	ab da       	rcall	.-2730   	; 0x31a <__portable_avr_delay_cycles>
     dc4:	fe da       	rcall	.-2564   	; 0x3c2 <loadcell_pins_init>
     dc6:	50 db       	rcall	.-2400   	; 0x468 <radio_power_off_at>
     dc8:	e5 da       	rcall	.-2614   	; 0x394 <reset_all_data>
     dca:	82 e0       	ldi	r24, 0x02	; 2
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	f1 da       	rcall	.-2590   	; 0x3b2 <rtc_init_period>
     dd0:	83 b7       	in	r24, 0x33	; 51
     dd2:	81 7f       	andi	r24, 0xF1	; 241
     dd4:	84 60       	ori	r24, 0x04	; 4
     dd6:	83 bf       	out	0x33, r24	; 51
     dd8:	78 94       	sei
     dda:	83 b7       	in	r24, 0x33	; 51
     ddc:	81 60       	ori	r24, 0x01	; 1
     dde:	83 bf       	out	0x33, r24	; 51
     de0:	85 b7       	in	r24, 0x35	; 53
     de2:	80 66       	ori	r24, 0x60	; 96
     de4:	85 bf       	out	0x35, r24	; 53
     de6:	8f 7d       	andi	r24, 0xDF	; 223
     de8:	85 bf       	out	0x35, r24	; 53
     dea:	88 95       	sleep
     dec:	83 b7       	in	r24, 0x33	; 51
     dee:	8e 7f       	andi	r24, 0xFE	; 254
     df0:	83 bf       	out	0x33, r24	; 51
     df2:	f3 cf       	rjmp	.-26     	; 0xdda <main+0x60>

00000df4 <MQTTSerialize_connectLength>:

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
     df4:	ef 92       	push	r14
     df6:	ff 92       	push	r15
     df8:	0f 93       	push	r16
     dfa:	1f 93       	push	r17
     dfc:	cf 93       	push	r28
     dfe:	df 93       	push	r29
     e00:	ec 01       	movw	r28, r24
     e02:	8e 81       	ldd	r24, Y+6	; 0x06
     e04:	83 30       	cpi	r24, 0x03	; 3
     e06:	29 f0       	breq	.+10     	; 0xe12 <MQTTSerialize_connectLength+0x1e>
     e08:	84 30       	cpi	r24, 0x04	; 4
     e0a:	31 f4       	brne	.+12     	; 0xe18 <MQTTSerialize_connectLength+0x24>
     e0c:	0a e0       	ldi	r16, 0x0A	; 10
     e0e:	10 e0       	ldi	r17, 0x00	; 0
     e10:	05 c0       	rjmp	.+10     	; 0xe1c <MQTTSerialize_connectLength+0x28>
     e12:	0c e0       	ldi	r16, 0x0C	; 12
     e14:	10 e0       	ldi	r17, 0x00	; 0
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <MQTTSerialize_connectLength+0x28>
     e18:	00 e0       	ldi	r16, 0x00	; 0
     e1a:	10 e0       	ldi	r17, 0x00	; 0
     e1c:	4f 81       	ldd	r20, Y+7	; 0x07
     e1e:	58 85       	ldd	r21, Y+8	; 0x08
     e20:	69 85       	ldd	r22, Y+9	; 0x09
     e22:	7a 85       	ldd	r23, Y+10	; 0x0a
     e24:	8b 85       	ldd	r24, Y+11	; 0x0b
     e26:	9c 85       	ldd	r25, Y+12	; 0x0c
     e28:	fb d1       	rcall	.+1014   	; 0x1220 <MQTTstrlen>
     e2a:	02 96       	adiw	r24, 0x02	; 2
     e2c:	08 0f       	add	r16, r24
     e2e:	19 1f       	adc	r17, r25
     e30:	88 89       	ldd	r24, Y+16	; 0x10
     e32:	88 23       	and	r24, r24
     e34:	a1 f0       	breq	.+40     	; 0xe5e <MQTTSerialize_connectLength+0x6a>
     e36:	4f 89       	ldd	r20, Y+23	; 0x17
     e38:	58 8d       	ldd	r21, Y+24	; 0x18
     e3a:	69 8d       	ldd	r22, Y+25	; 0x19
     e3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e40:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e42:	ee d1       	rcall	.+988    	; 0x1220 <MQTTstrlen>
     e44:	7c 01       	movw	r14, r24
     e46:	4d 8d       	ldd	r20, Y+29	; 0x1d
     e48:	5e 8d       	ldd	r21, Y+30	; 0x1e
     e4a:	6f 8d       	ldd	r22, Y+31	; 0x1f
     e4c:	78 a1       	ldd	r23, Y+32	; 0x20
     e4e:	89 a1       	ldd	r24, Y+33	; 0x21
     e50:	9a a1       	ldd	r25, Y+34	; 0x22
     e52:	e6 d1       	rcall	.+972    	; 0x1220 <MQTTstrlen>
     e54:	8e 0d       	add	r24, r14
     e56:	9f 1d       	adc	r25, r15
     e58:	04 96       	adiw	r24, 0x04	; 4
     e5a:	08 0f       	add	r16, r24
     e5c:	19 1f       	adc	r17, r25
     e5e:	8d a1       	ldd	r24, Y+37	; 0x25
     e60:	9e a1       	ldd	r25, Y+38	; 0x26
     e62:	89 2b       	or	r24, r25
     e64:	21 f4       	brne	.+8      	; 0xe6e <MQTTSerialize_connectLength+0x7a>
     e66:	89 a5       	ldd	r24, Y+41	; 0x29
     e68:	9a a5       	ldd	r25, Y+42	; 0x2a
     e6a:	89 2b       	or	r24, r25
     e6c:	51 f0       	breq	.+20     	; 0xe82 <MQTTSerialize_connectLength+0x8e>
     e6e:	4d a1       	ldd	r20, Y+37	; 0x25
     e70:	5e a1       	ldd	r21, Y+38	; 0x26
     e72:	6f a1       	ldd	r22, Y+39	; 0x27
     e74:	78 a5       	ldd	r23, Y+40	; 0x28
     e76:	89 a5       	ldd	r24, Y+41	; 0x29
     e78:	9a a5       	ldd	r25, Y+42	; 0x2a
     e7a:	d2 d1       	rcall	.+932    	; 0x1220 <MQTTstrlen>
     e7c:	02 96       	adiw	r24, 0x02	; 2
     e7e:	08 0f       	add	r16, r24
     e80:	19 1f       	adc	r17, r25
     e82:	8b a5       	ldd	r24, Y+43	; 0x2b
     e84:	9c a5       	ldd	r25, Y+44	; 0x2c
     e86:	89 2b       	or	r24, r25
     e88:	21 f4       	brne	.+8      	; 0xe92 <MQTTSerialize_connectLength+0x9e>
     e8a:	8f a5       	ldd	r24, Y+47	; 0x2f
     e8c:	98 a9       	ldd	r25, Y+48	; 0x30
     e8e:	89 2b       	or	r24, r25
     e90:	51 f0       	breq	.+20     	; 0xea6 <MQTTSerialize_connectLength+0xb2>
     e92:	4b a5       	ldd	r20, Y+43	; 0x2b
     e94:	5c a5       	ldd	r21, Y+44	; 0x2c
     e96:	6d a5       	ldd	r22, Y+45	; 0x2d
     e98:	7e a5       	ldd	r23, Y+46	; 0x2e
     e9a:	8f a5       	ldd	r24, Y+47	; 0x2f
     e9c:	98 a9       	ldd	r25, Y+48	; 0x30
     e9e:	c0 d1       	rcall	.+896    	; 0x1220 <MQTTstrlen>
     ea0:	02 96       	adiw	r24, 0x02	; 2
     ea2:	08 0f       	add	r16, r24
     ea4:	19 1f       	adc	r17, r25
     ea6:	c8 01       	movw	r24, r16
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	1f 91       	pop	r17
     eae:	0f 91       	pop	r16
     eb0:	ff 90       	pop	r15
     eb2:	ef 90       	pop	r14
     eb4:	08 95       	ret

00000eb6 <MQTTSerialize_connect>:
     eb6:	af 92       	push	r10
     eb8:	bf 92       	push	r11
     eba:	cf 92       	push	r12
     ebc:	df 92       	push	r13
     ebe:	ef 92       	push	r14
     ec0:	ff 92       	push	r15
     ec2:	0f 93       	push	r16
     ec4:	1f 93       	push	r17
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
     eca:	00 d0       	rcall	.+0      	; 0xecc <MQTTSerialize_connect+0x16>
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	6c 01       	movw	r12, r24
     ed2:	5b 01       	movw	r10, r22
     ed4:	8a 01       	movw	r16, r20
     ed6:	9a 83       	std	Y+2, r25	; 0x02
     ed8:	89 83       	std	Y+1, r24	; 0x01
     eda:	ca 01       	movw	r24, r20
     edc:	8b df       	rcall	.-234    	; 0xdf4 <MQTTSerialize_connectLength>
     ede:	7c 01       	movw	r14, r24
     ee0:	03 d1       	rcall	.+518    	; 0x10e8 <MQTTPacket_len>
     ee2:	a8 16       	cp	r10, r24
     ee4:	b9 06       	cpc	r11, r25
     ee6:	0c f4       	brge	.+2      	; 0xeea <MQTTSerialize_connect+0x34>
     ee8:	9f c0       	rjmp	.+318    	; 0x1028 <MQTTSerialize_connect+0x172>
     eea:	60 e1       	ldi	r22, 0x10	; 16
     eec:	ce 01       	movw	r24, r28
     eee:	01 96       	adiw	r24, 0x01	; 1
     ef0:	0a d1       	rcall	.+532    	; 0x1106 <writeChar>
     ef2:	b7 01       	movw	r22, r14
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	9a 81       	ldd	r25, Y+2	; 0x02
     ef8:	d1 d0       	rcall	.+418    	; 0x109c <MQTTPacket_encode>
     efa:	29 81       	ldd	r18, Y+1	; 0x01
     efc:	3a 81       	ldd	r19, Y+2	; 0x02
     efe:	82 0f       	add	r24, r18
     f00:	93 1f       	adc	r25, r19
     f02:	9a 83       	std	Y+2, r25	; 0x02
     f04:	89 83       	std	Y+1, r24	; 0x01
     f06:	f8 01       	movw	r30, r16
     f08:	86 81       	ldd	r24, Z+6	; 0x06
     f0a:	84 30       	cpi	r24, 0x04	; 4
     f0c:	51 f4       	brne	.+20     	; 0xf22 <MQTTSerialize_connect+0x6c>
     f0e:	61 e6       	ldi	r22, 0x61	; 97
     f10:	74 e0       	ldi	r23, 0x04	; 4
     f12:	ce 01       	movw	r24, r28
     f14:	01 96       	adiw	r24, 0x01	; 1
     f16:	20 d1       	rcall	.+576    	; 0x1158 <writeCString>
     f18:	64 e0       	ldi	r22, 0x04	; 4
     f1a:	ce 01       	movw	r24, r28
     f1c:	01 96       	adiw	r24, 0x01	; 1
     f1e:	f3 d0       	rcall	.+486    	; 0x1106 <writeChar>
     f20:	09 c0       	rjmp	.+18     	; 0xf34 <MQTTSerialize_connect+0x7e>
     f22:	66 e6       	ldi	r22, 0x66	; 102
     f24:	74 e0       	ldi	r23, 0x04	; 4
     f26:	ce 01       	movw	r24, r28
     f28:	01 96       	adiw	r24, 0x01	; 1
     f2a:	16 d1       	rcall	.+556    	; 0x1158 <writeCString>
     f2c:	63 e0       	ldi	r22, 0x03	; 3
     f2e:	ce 01       	movw	r24, r28
     f30:	01 96       	adiw	r24, 0x01	; 1
     f32:	e9 d0       	rcall	.+466    	; 0x1106 <writeChar>
     f34:	f1 2c       	mov	r15, r1
     f36:	f8 01       	movw	r30, r16
     f38:	87 85       	ldd	r24, Z+15	; 0x0f
     f3a:	80 fb       	bst	r24, 0
     f3c:	f1 f8       	bld	r15, 1
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 89       	ldd	r25, Z+16	; 0x10
     f42:	91 11       	cpse	r25, r1
     f44:	01 c0       	rjmp	.+2      	; 0xf48 <MQTTSerialize_connect+0x92>
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	80 fb       	bst	r24, 0
     f4a:	f2 f8       	bld	r15, 2
     f4c:	f2 fe       	sbrs	r15, 2
     f4e:	0d c0       	rjmp	.+26     	; 0xf6a <MQTTSerialize_connect+0xb4>
     f50:	f8 01       	movw	r30, r16
     f52:	84 a1       	ldd	r24, Z+36	; 0x24
     f54:	83 70       	andi	r24, 0x03	; 3
     f56:	88 0f       	add	r24, r24
     f58:	88 0f       	add	r24, r24
     f5a:	88 0f       	add	r24, r24
     f5c:	9f 2d       	mov	r25, r15
     f5e:	97 7e       	andi	r25, 0xE7	; 231
     f60:	f9 2e       	mov	r15, r25
     f62:	f8 2a       	or	r15, r24
     f64:	83 a1       	ldd	r24, Z+35	; 0x23
     f66:	80 fb       	bst	r24, 0
     f68:	f5 f8       	bld	r15, 5
     f6a:	f8 01       	movw	r30, r16
     f6c:	85 a1       	ldd	r24, Z+37	; 0x25
     f6e:	96 a1       	ldd	r25, Z+38	; 0x26
     f70:	89 2b       	or	r24, r25
     f72:	21 f4       	brne	.+8      	; 0xf7c <MQTTSerialize_connect+0xc6>
     f74:	81 a5       	ldd	r24, Z+41	; 0x29
     f76:	92 a5       	ldd	r25, Z+42	; 0x2a
     f78:	89 2b       	or	r24, r25
     f7a:	11 f0       	breq	.+4      	; 0xf80 <MQTTSerialize_connect+0xca>
     f7c:	68 94       	set
     f7e:	f7 f8       	bld	r15, 7
     f80:	f8 01       	movw	r30, r16
     f82:	83 a5       	ldd	r24, Z+43	; 0x2b
     f84:	94 a5       	ldd	r25, Z+44	; 0x2c
     f86:	89 2b       	or	r24, r25
     f88:	21 f4       	brne	.+8      	; 0xf92 <MQTTSerialize_connect+0xdc>
     f8a:	87 a5       	ldd	r24, Z+47	; 0x2f
     f8c:	90 a9       	ldd	r25, Z+48	; 0x30
     f8e:	89 2b       	or	r24, r25
     f90:	11 f0       	breq	.+4      	; 0xf96 <MQTTSerialize_connect+0xe0>
     f92:	68 94       	set
     f94:	f6 f8       	bld	r15, 6
     f96:	6f 2d       	mov	r22, r15
     f98:	ce 01       	movw	r24, r28
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	b4 d0       	rcall	.+360    	; 0x1106 <writeChar>
     f9e:	f8 01       	movw	r30, r16
     fa0:	65 85       	ldd	r22, Z+13	; 0x0d
     fa2:	76 85       	ldd	r23, Z+14	; 0x0e
     fa4:	ce 01       	movw	r24, r28
     fa6:	01 96       	adiw	r24, 0x01	; 1
     fa8:	b8 d0       	rcall	.+368    	; 0x111a <writeInt>
     faa:	f8 01       	movw	r30, r16
     fac:	27 81       	ldd	r18, Z+7	; 0x07
     fae:	30 85       	ldd	r19, Z+8	; 0x08
     fb0:	41 85       	ldd	r20, Z+9	; 0x09
     fb2:	52 85       	ldd	r21, Z+10	; 0x0a
     fb4:	63 85       	ldd	r22, Z+11	; 0x0b
     fb6:	74 85       	ldd	r23, Z+12	; 0x0c
     fb8:	ce 01       	movw	r24, r28
     fba:	01 96       	adiw	r24, 0x01	; 1
     fbc:	f2 d0       	rcall	.+484    	; 0x11a2 <writeMQTTString>
     fbe:	f8 01       	movw	r30, r16
     fc0:	80 89       	ldd	r24, Z+16	; 0x10
     fc2:	88 23       	and	r24, r24
     fc4:	99 f0       	breq	.+38     	; 0xfec <MQTTSerialize_connect+0x136>
     fc6:	27 89       	ldd	r18, Z+23	; 0x17
     fc8:	30 8d       	ldd	r19, Z+24	; 0x18
     fca:	41 8d       	ldd	r20, Z+25	; 0x19
     fcc:	52 8d       	ldd	r21, Z+26	; 0x1a
     fce:	63 8d       	ldd	r22, Z+27	; 0x1b
     fd0:	74 8d       	ldd	r23, Z+28	; 0x1c
     fd2:	ce 01       	movw	r24, r28
     fd4:	01 96       	adiw	r24, 0x01	; 1
     fd6:	e5 d0       	rcall	.+458    	; 0x11a2 <writeMQTTString>
     fd8:	f8 01       	movw	r30, r16
     fda:	25 8d       	ldd	r18, Z+29	; 0x1d
     fdc:	36 8d       	ldd	r19, Z+30	; 0x1e
     fde:	47 8d       	ldd	r20, Z+31	; 0x1f
     fe0:	50 a1       	ldd	r21, Z+32	; 0x20
     fe2:	61 a1       	ldd	r22, Z+33	; 0x21
     fe4:	72 a1       	ldd	r23, Z+34	; 0x22
     fe6:	ce 01       	movw	r24, r28
     fe8:	01 96       	adiw	r24, 0x01	; 1
     fea:	db d0       	rcall	.+438    	; 0x11a2 <writeMQTTString>
     fec:	ef 2c       	mov	r14, r15
     fee:	ff 20       	and	r15, r15
     ff0:	54 f4       	brge	.+20     	; 0x1006 <MQTTSerialize_connect+0x150>
     ff2:	f8 01       	movw	r30, r16
     ff4:	25 a1       	ldd	r18, Z+37	; 0x25
     ff6:	36 a1       	ldd	r19, Z+38	; 0x26
     ff8:	47 a1       	ldd	r20, Z+39	; 0x27
     ffa:	50 a5       	ldd	r21, Z+40	; 0x28
     ffc:	61 a5       	ldd	r22, Z+41	; 0x29
     ffe:	72 a5       	ldd	r23, Z+42	; 0x2a
    1000:	ce 01       	movw	r24, r28
    1002:	01 96       	adiw	r24, 0x01	; 1
    1004:	ce d0       	rcall	.+412    	; 0x11a2 <writeMQTTString>
    1006:	e6 fe       	sbrs	r14, 6
    1008:	0a c0       	rjmp	.+20     	; 0x101e <MQTTSerialize_connect+0x168>
    100a:	f8 01       	movw	r30, r16
    100c:	23 a5       	ldd	r18, Z+43	; 0x2b
    100e:	34 a5       	ldd	r19, Z+44	; 0x2c
    1010:	45 a5       	ldd	r20, Z+45	; 0x2d
    1012:	56 a5       	ldd	r21, Z+46	; 0x2e
    1014:	67 a5       	ldd	r22, Z+47	; 0x2f
    1016:	70 a9       	ldd	r23, Z+48	; 0x30
    1018:	ce 01       	movw	r24, r28
    101a:	01 96       	adiw	r24, 0x01	; 1
    101c:	c2 d0       	rcall	.+388    	; 0x11a2 <writeMQTTString>
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	9a 81       	ldd	r25, Y+2	; 0x02
    1022:	8c 19       	sub	r24, r12
    1024:	9d 09       	sbc	r25, r13
    1026:	02 c0       	rjmp	.+4      	; 0x102c <MQTTSerialize_connect+0x176>
    1028:	8e ef       	ldi	r24, 0xFE	; 254
    102a:	9f ef       	ldi	r25, 0xFF	; 255
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	df 91       	pop	r29
    1032:	cf 91       	pop	r28
    1034:	1f 91       	pop	r17
    1036:	0f 91       	pop	r16
    1038:	ff 90       	pop	r15
    103a:	ef 90       	pop	r14
    103c:	df 90       	pop	r13
    103e:	cf 90       	pop	r12
    1040:	bf 90       	pop	r11
    1042:	af 90       	pop	r10
    1044:	08 95       	ret

00001046 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    104e:	00 d0       	rcall	.+0      	; 0x1050 <MQTTSerialize_zero+0xa>
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
    1054:	9a 83       	std	Y+2, r25	; 0x02
    1056:	89 83       	std	Y+1, r24	; 0x01

	FUNC_ENTRY;
	if (buflen < 2)
    1058:	62 30       	cpi	r22, 0x02	; 2
    105a:	71 05       	cpc	r23, r1
    105c:	9c f0       	brlt	.+38     	; 0x1084 <MQTTSerialize_zero+0x3e>
    105e:	8c 01       	movw	r16, r24
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
    1060:	64 2f       	mov	r22, r20
    1062:	62 95       	swap	r22
    1064:	60 7f       	andi	r22, 0xF0	; 240
	writeChar(&ptr, header.byte); /* write header */
    1066:	ce 01       	movw	r24, r28
    1068:	01 96       	adiw	r24, 0x01	; 1
    106a:	4d d0       	rcall	.+154    	; 0x1106 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	9a 81       	ldd	r25, Y+2	; 0x02
    1074:	13 d0       	rcall	.+38     	; 0x109c <MQTTPacket_encode>
	rc = ptr - buf;
    1076:	29 81       	ldd	r18, Y+1	; 0x01
    1078:	3a 81       	ldd	r19, Y+2	; 0x02
    107a:	82 0f       	add	r24, r18
    107c:	93 1f       	adc	r25, r19
    107e:	80 1b       	sub	r24, r16
    1080:	91 0b       	sbc	r25, r17
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <MQTTSerialize_zero+0x42>
	unsigned char *ptr = buf;

	FUNC_ENTRY;
	if (buflen < 2)
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    1084:	8e ef       	ldi	r24, 0xFE	; 254
    1086:	9f ef       	ldi	r25, 0xFF	; 255
	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
	rc = ptr - buf;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	1f 91       	pop	r17
    1092:	0f 91       	pop	r16
    1094:	08 95       	ret

00001096 <MQTTSerialize_disconnect>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
    1096:	4e e0       	ldi	r20, 0x0E	; 14
    1098:	d6 cf       	rjmp	.-84     	; 0x1046 <MQTTSerialize_zero>
}
    109a:	08 95       	ret

0000109c <MQTTPacket_encode>:
		}
	}
	mqttstring->cstring = NULL;
	FUNC_EXIT_RC(rc);
	return rc;
}
    109c:	dc 01       	movw	r26, r24
    109e:	e0 e0       	ldi	r30, 0x00	; 0
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	9b 01       	movw	r18, r22
    10a4:	2f 77       	andi	r18, 0x7F	; 127
    10a6:	30 78       	andi	r19, 0x80	; 128
    10a8:	33 23       	and	r19, r19
    10aa:	34 f4       	brge	.+12     	; 0x10b8 <MQTTPacket_encode+0x1c>
    10ac:	21 50       	subi	r18, 0x01	; 1
    10ae:	31 09       	sbc	r19, r1
    10b0:	20 68       	ori	r18, 0x80	; 128
    10b2:	3f 6f       	ori	r19, 0xFF	; 255
    10b4:	2f 5f       	subi	r18, 0xFF	; 255
    10b6:	3f 4f       	sbci	r19, 0xFF	; 255
    10b8:	ab 01       	movw	r20, r22
    10ba:	77 23       	and	r23, r23
    10bc:	14 f4       	brge	.+4      	; 0x10c2 <MQTTPacket_encode+0x26>
    10be:	41 58       	subi	r20, 0x81	; 129
    10c0:	5f 4f       	sbci	r21, 0xFF	; 255
    10c2:	ba 01       	movw	r22, r20
    10c4:	66 0f       	add	r22, r22
    10c6:	67 2f       	mov	r22, r23
    10c8:	66 1f       	adc	r22, r22
    10ca:	77 0b       	sbc	r23, r23
    10cc:	16 16       	cp	r1, r22
    10ce:	17 06       	cpc	r1, r23
    10d0:	24 f4       	brge	.+8      	; 0x10da <MQTTPacket_encode+0x3e>
    10d2:	31 96       	adiw	r30, 0x01	; 1
    10d4:	20 68       	ori	r18, 0x80	; 128
    10d6:	2d 93       	st	X+, r18
    10d8:	e4 cf       	rjmp	.-56     	; 0x10a2 <MQTTPacket_encode+0x6>
    10da:	dc 01       	movw	r26, r24
    10dc:	ae 0f       	add	r26, r30
    10de:	bf 1f       	adc	r27, r31
    10e0:	2c 93       	st	X, r18
    10e2:	cf 01       	movw	r24, r30
    10e4:	01 96       	adiw	r24, 0x01	; 1
    10e6:	08 95       	ret

000010e8 <MQTTPacket_len>:
    10e8:	9c 01       	movw	r18, r24
    10ea:	2f 5f       	subi	r18, 0xFF	; 255
    10ec:	3f 4f       	sbci	r19, 0xFF	; 255
    10ee:	20 38       	cpi	r18, 0x80	; 128
    10f0:	31 05       	cpc	r19, r1
    10f2:	14 f4       	brge	.+4      	; 0x10f8 <MQTTPacket_len+0x10>
    10f4:	02 96       	adiw	r24, 0x02	; 2
    10f6:	08 95       	ret
    10f8:	21 15       	cp	r18, r1
    10fa:	30 44       	sbci	r19, 0x40	; 64
    10fc:	14 f4       	brge	.+4      	; 0x1102 <MQTTPacket_len+0x1a>
    10fe:	03 96       	adiw	r24, 0x03	; 3
    1100:	08 95       	ret
    1102:	04 96       	adiw	r24, 0x04	; 4
    1104:	08 95       	ret

00001106 <writeChar>:
    1106:	fc 01       	movw	r30, r24
    1108:	a0 81       	ld	r26, Z
    110a:	b1 81       	ldd	r27, Z+1	; 0x01
    110c:	6c 93       	st	X, r22
    110e:	80 81       	ld	r24, Z
    1110:	91 81       	ldd	r25, Z+1	; 0x01
    1112:	01 96       	adiw	r24, 0x01	; 1
    1114:	91 83       	std	Z+1, r25	; 0x01
    1116:	80 83       	st	Z, r24
    1118:	08 95       	ret

0000111a <writeInt>:
    111a:	fc 01       	movw	r30, r24
    111c:	a0 81       	ld	r26, Z
    111e:	b1 81       	ldd	r27, Z+1	; 0x01
    1120:	cb 01       	movw	r24, r22
    1122:	77 23       	and	r23, r23
    1124:	14 f4       	brge	.+4      	; 0x112a <writeInt+0x10>
    1126:	81 50       	subi	r24, 0x01	; 1
    1128:	9f 4f       	sbci	r25, 0xFF	; 255
    112a:	9c 93       	st	X, r25
    112c:	a0 81       	ld	r26, Z
    112e:	b1 81       	ldd	r27, Z+1	; 0x01
    1130:	cd 01       	movw	r24, r26
    1132:	01 96       	adiw	r24, 0x01	; 1
    1134:	91 83       	std	Z+1, r25	; 0x01
    1136:	80 83       	st	Z, r24
    1138:	70 78       	andi	r23, 0x80	; 128
    113a:	77 23       	and	r23, r23
    113c:	2c f4       	brge	.+10     	; 0x1148 <writeInt+0x2e>
    113e:	61 50       	subi	r22, 0x01	; 1
    1140:	71 09       	sbc	r23, r1
    1142:	7f 6f       	ori	r23, 0xFF	; 255
    1144:	6f 5f       	subi	r22, 0xFF	; 255
    1146:	7f 4f       	sbci	r23, 0xFF	; 255
    1148:	11 96       	adiw	r26, 0x01	; 1
    114a:	6c 93       	st	X, r22
    114c:	80 81       	ld	r24, Z
    114e:	91 81       	ldd	r25, Z+1	; 0x01
    1150:	01 96       	adiw	r24, 0x01	; 1
    1152:	91 83       	std	Z+1, r25	; 0x01
    1154:	80 83       	st	Z, r24
    1156:	08 95       	ret

00001158 <writeCString>:
    1158:	ef 92       	push	r14
    115a:	ff 92       	push	r15
    115c:	0f 93       	push	r16
    115e:	1f 93       	push	r17
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	8c 01       	movw	r16, r24
    1166:	7b 01       	movw	r14, r22
    1168:	eb 01       	movw	r28, r22
    116a:	09 90       	ld	r0, Y+
    116c:	00 20       	and	r0, r0
    116e:	e9 f7       	brne	.-6      	; 0x116a <writeCString+0x12>
    1170:	21 97       	sbiw	r28, 0x01	; 1
    1172:	c6 1b       	sub	r28, r22
    1174:	d7 0b       	sbc	r29, r23
    1176:	be 01       	movw	r22, r28
    1178:	d0 df       	rcall	.-96     	; 0x111a <writeInt>
    117a:	ae 01       	movw	r20, r28
    117c:	b7 01       	movw	r22, r14
    117e:	f8 01       	movw	r30, r16
    1180:	80 81       	ld	r24, Z
    1182:	91 81       	ldd	r25, Z+1	; 0x01
    1184:	8f d3       	rcall	.+1822   	; 0x18a4 <memcpy>
    1186:	f8 01       	movw	r30, r16
    1188:	80 81       	ld	r24, Z
    118a:	91 81       	ldd	r25, Z+1	; 0x01
    118c:	c8 0f       	add	r28, r24
    118e:	d9 1f       	adc	r29, r25
    1190:	d1 83       	std	Z+1, r29	; 0x01
    1192:	c0 83       	st	Z, r28
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	1f 91       	pop	r17
    119a:	0f 91       	pop	r16
    119c:	ff 90       	pop	r15
    119e:	ef 90       	pop	r14
    11a0:	08 95       	ret

000011a2 <writeMQTTString>:
    11a2:	ef 92       	push	r14
    11a4:	ff 92       	push	r15
    11a6:	0f 93       	push	r16
    11a8:	1f 93       	push	r17
    11aa:	cf 93       	push	r28
    11ac:	df 93       	push	r29
    11ae:	00 d0       	rcall	.+0      	; 0x11b0 <writeMQTTString+0xe>
    11b0:	00 d0       	rcall	.+0      	; 0x11b2 <writeMQTTString+0x10>
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <writeMQTTString+0x12>
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
    11b8:	7c 01       	movw	r14, r24
    11ba:	29 83       	std	Y+1, r18	; 0x01
    11bc:	3a 83       	std	Y+2, r19	; 0x02
    11be:	4b 83       	std	Y+3, r20	; 0x03
    11c0:	5c 83       	std	Y+4, r21	; 0x04
    11c2:	6d 83       	std	Y+5, r22	; 0x05
    11c4:	7e 83       	std	Y+6, r23	; 0x06
    11c6:	0b 81       	ldd	r16, Y+3	; 0x03
    11c8:	1c 81       	ldd	r17, Y+4	; 0x04
    11ca:	10 16       	cp	r1, r16
    11cc:	11 06       	cpc	r1, r17
    11ce:	8c f4       	brge	.+34     	; 0x11f2 <writeMQTTString+0x50>
    11d0:	b8 01       	movw	r22, r16
    11d2:	a3 df       	rcall	.-186    	; 0x111a <writeInt>
    11d4:	6d 81       	ldd	r22, Y+5	; 0x05
    11d6:	7e 81       	ldd	r23, Y+6	; 0x06
    11d8:	a8 01       	movw	r20, r16
    11da:	f7 01       	movw	r30, r14
    11dc:	80 81       	ld	r24, Z
    11de:	91 81       	ldd	r25, Z+1	; 0x01
    11e0:	61 d3       	rcall	.+1730   	; 0x18a4 <memcpy>
    11e2:	f7 01       	movw	r30, r14
    11e4:	80 81       	ld	r24, Z
    11e6:	91 81       	ldd	r25, Z+1	; 0x01
    11e8:	08 0f       	add	r16, r24
    11ea:	19 1f       	adc	r17, r25
    11ec:	11 83       	std	Z+1, r17	; 0x01
    11ee:	00 83       	st	Z, r16
    11f0:	0a c0       	rjmp	.+20     	; 0x1206 <writeMQTTString+0x64>
    11f2:	69 81       	ldd	r22, Y+1	; 0x01
    11f4:	7a 81       	ldd	r23, Y+2	; 0x02
    11f6:	61 15       	cp	r22, r1
    11f8:	71 05       	cpc	r23, r1
    11fa:	11 f0       	breq	.+4      	; 0x1200 <writeMQTTString+0x5e>
    11fc:	ad df       	rcall	.-166    	; 0x1158 <writeCString>
    11fe:	03 c0       	rjmp	.+6      	; 0x1206 <writeMQTTString+0x64>
    1200:	60 e0       	ldi	r22, 0x00	; 0
    1202:	70 e0       	ldi	r23, 0x00	; 0
    1204:	8a df       	rcall	.-236    	; 0x111a <writeInt>
    1206:	26 96       	adiw	r28, 0x06	; 6
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	f8 94       	cli
    120c:	de bf       	out	0x3e, r29	; 62
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	cd bf       	out	0x3d, r28	; 61
    1212:	df 91       	pop	r29
    1214:	cf 91       	pop	r28
    1216:	1f 91       	pop	r17
    1218:	0f 91       	pop	r16
    121a:	ff 90       	pop	r15
    121c:	ef 90       	pop	r14
    121e:	08 95       	ret

00001220 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
    1220:	cf 93       	push	r28
    1222:	df 93       	push	r29
    1224:	00 d0       	rcall	.+0      	; 0x1226 <MQTTstrlen+0x6>
    1226:	00 d0       	rcall	.+0      	; 0x1228 <MQTTstrlen+0x8>
    1228:	00 d0       	rcall	.+0      	; 0x122a <MQTTstrlen+0xa>
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    122e:	49 83       	std	Y+1, r20	; 0x01
    1230:	5a 83       	std	Y+2, r21	; 0x02
    1232:	6b 83       	std	Y+3, r22	; 0x03
    1234:	7c 83       	std	Y+4, r23	; 0x04
    1236:	8d 83       	std	Y+5, r24	; 0x05
    1238:	9e 83       	std	Y+6, r25	; 0x06
    123a:	a9 81       	ldd	r26, Y+1	; 0x01
    123c:	ba 81       	ldd	r27, Y+2	; 0x02
	int rc = 0;

	if (mqttstring.cstring)
    123e:	10 97       	sbiw	r26, 0x00	; 0
    1240:	49 f0       	breq	.+18     	; 0x1254 <MQTTstrlen+0x34>
		rc = strlen(mqttstring.cstring);
    1242:	fd 01       	movw	r30, r26
    1244:	01 90       	ld	r0, Z+
    1246:	00 20       	and	r0, r0
    1248:	e9 f7       	brne	.-6      	; 0x1244 <MQTTstrlen+0x24>
    124a:	31 97       	sbiw	r30, 0x01	; 1
    124c:	cf 01       	movw	r24, r30
    124e:	8a 1b       	sub	r24, r26
    1250:	9b 0b       	sbc	r25, r27
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <MQTTstrlen+0x38>
	else
		rc = mqttstring.lenstring.len;
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	9c 81       	ldd	r25, Y+4	; 0x04
	return rc;
}
    1258:	26 96       	adiw	r28, 0x06	; 6
    125a:	0f b6       	in	r0, 0x3f	; 63
    125c:	f8 94       	cli
    125e:	de bf       	out	0x3e, r29	; 62
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	cd bf       	out	0x3d, r28	; 61
    1264:	df 91       	pop	r29
    1266:	cf 91       	pop	r28
    1268:	08 95       	ret

0000126a <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
    126a:	ef 92       	push	r14
    126c:	ff 92       	push	r15
    126e:	0f 93       	push	r16
    1270:	1f 93       	push	r17
    1272:	cf 93       	push	r28
    1274:	df 93       	push	r29
    1276:	00 d0       	rcall	.+0      	; 0x1278 <MQTTSerialize_publishLength+0xe>
    1278:	00 d0       	rcall	.+0      	; 0x127a <MQTTSerialize_publishLength+0x10>
    127a:	00 d0       	rcall	.+0      	; 0x127c <MQTTSerialize_publishLength+0x12>
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
    1280:	7c 01       	movw	r14, r24
    1282:	f4 2f       	mov	r31, r20
    1284:	e5 2f       	mov	r30, r21
    1286:	86 2f       	mov	r24, r22
    1288:	97 2f       	mov	r25, r23
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
    128a:	42 2f       	mov	r20, r18
    128c:	53 2f       	mov	r21, r19
    128e:	6f 2f       	mov	r22, r31
    1290:	7e 2f       	mov	r23, r30
    1292:	c6 df       	rcall	.-116    	; 0x1220 <MQTTstrlen>
    1294:	02 96       	adiw	r24, 0x02	; 2
    1296:	80 0f       	add	r24, r16
    1298:	91 1f       	adc	r25, r17
	if (qos > 0)
    129a:	1e 14       	cp	r1, r14
    129c:	1f 04       	cpc	r1, r15
    129e:	0c f4       	brge	.+2      	; 0x12a2 <MQTTSerialize_publishLength+0x38>
		len += 2; /* packetid */
    12a0:	02 96       	adiw	r24, 0x02	; 2
	return len;
}
    12a2:	26 96       	adiw	r28, 0x06	; 6
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	cd bf       	out	0x3d, r28	; 61
    12ae:	df 91       	pop	r29
    12b0:	cf 91       	pop	r28
    12b2:	1f 91       	pop	r17
    12b4:	0f 91       	pop	r16
    12b6:	ff 90       	pop	r15
    12b8:	ef 90       	pop	r14
    12ba:	08 95       	ret

000012bc <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
    12bc:	2f 92       	push	r2
    12be:	3f 92       	push	r3
    12c0:	4f 92       	push	r4
    12c2:	5f 92       	push	r5
    12c4:	6f 92       	push	r6
    12c6:	7f 92       	push	r7
    12c8:	8f 92       	push	r8
    12ca:	9f 92       	push	r9
    12cc:	af 92       	push	r10
    12ce:	bf 92       	push	r11
    12d0:	cf 92       	push	r12
    12d2:	df 92       	push	r13
    12d4:	ef 92       	push	r14
    12d6:	ff 92       	push	r15
    12d8:	0f 93       	push	r16
    12da:	1f 93       	push	r17
    12dc:	cf 93       	push	r28
    12de:	df 93       	push	r29
    12e0:	cd b7       	in	r28, 0x3d	; 61
    12e2:	de b7       	in	r29, 0x3e	; 62
    12e4:	2a 97       	sbiw	r28, 0x0a	; 10
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	f8 94       	cli
    12ea:	de bf       	out	0x3e, r29	; 62
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	cd bf       	out	0x3d, r28	; 61
    12f0:	2c 01       	movw	r4, r24
    12f2:	1b 01       	movw	r2, r22
    12f4:	49 87       	std	Y+9, r20	; 0x09
    12f6:	39 01       	movw	r6, r18
    12f8:	0a 87       	std	Y+10, r16	; 0x0a
    12fa:	28 2d       	mov	r18, r8
    12fc:	8b 82       	std	Y+3, r8	; 0x03
    12fe:	39 2d       	mov	r19, r9
    1300:	9c 82       	std	Y+4, r9	; 0x04
    1302:	4a 2d       	mov	r20, r10
    1304:	ad 82       	std	Y+5, r10	; 0x05
    1306:	5b 2d       	mov	r21, r11
    1308:	be 82       	std	Y+6, r11	; 0x06
    130a:	6c 2d       	mov	r22, r12
    130c:	cf 82       	std	Y+7, r12	; 0x07
    130e:	7d 2d       	mov	r23, r13
    1310:	d8 86       	std	Y+8, r13	; 0x08
    1312:	c9 a0       	ldd	r12, Y+33	; 0x21
    1314:	da a0       	ldd	r13, Y+34	; 0x22
	unsigned char *ptr = buf;
    1316:	9a 83       	std	Y+2, r25	; 0x02
    1318:	89 83       	std	Y+1, r24	; 0x01
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
    131a:	86 01       	movw	r16, r12
    131c:	c3 01       	movw	r24, r6
    131e:	a5 df       	rcall	.-182    	; 0x126a <MQTTSerialize_publishLength>
    1320:	8c 01       	movw	r16, r24
    1322:	e2 de       	rcall	.-572    	; 0x10e8 <MQTTPacket_len>
    1324:	28 16       	cp	r2, r24
    1326:	39 06       	cpc	r3, r25
    1328:	b4 f1       	brlt	.+108    	; 0x1396 <MQTTSerialize_publish+0xda>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
    132a:	60 e3       	ldi	r22, 0x30	; 48
	header.bits.dup = dup;
    132c:	89 85       	ldd	r24, Y+9	; 0x09
    132e:	80 fb       	bst	r24, 0
    1330:	63 f9       	bld	r22, 3
	header.bits.qos = qos;
    1332:	86 2d       	mov	r24, r6
    1334:	83 70       	andi	r24, 0x03	; 3
    1336:	88 0f       	add	r24, r24
    1338:	69 7f       	andi	r22, 0xF9	; 249
    133a:	68 2b       	or	r22, r24
	header.bits.retain = retained;
    133c:	8a 85       	ldd	r24, Y+10	; 0x0a
    133e:	80 fb       	bst	r24, 0
	writeChar(&ptr, header.byte); /* write header */
    1340:	60 f9       	bld	r22, 0
    1342:	ce 01       	movw	r24, r28

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
    1344:	01 96       	adiw	r24, 0x01	; 1
    1346:	df de       	rcall	.-578    	; 0x1106 <writeChar>
    1348:	b8 01       	movw	r22, r16
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	9a 81       	ldd	r25, Y+2	; 0x02
    134e:	a6 de       	rcall	.-692    	; 0x109c <MQTTPacket_encode>
    1350:	29 81       	ldd	r18, Y+1	; 0x01
    1352:	3a 81       	ldd	r19, Y+2	; 0x02
    1354:	82 0f       	add	r24, r18
    1356:	93 1f       	adc	r25, r19

	writeMQTTString(&ptr, topicName);
    1358:	9a 83       	std	Y+2, r25	; 0x02
    135a:	89 83       	std	Y+1, r24	; 0x01
    135c:	2b 81       	ldd	r18, Y+3	; 0x03
    135e:	3c 81       	ldd	r19, Y+4	; 0x04
    1360:	4d 81       	ldd	r20, Y+5	; 0x05
    1362:	5e 81       	ldd	r21, Y+6	; 0x06
    1364:	6f 81       	ldd	r22, Y+7	; 0x07
    1366:	78 85       	ldd	r23, Y+8	; 0x08
    1368:	ce 01       	movw	r24, r28

	if (qos > 0)
    136a:	01 96       	adiw	r24, 0x01	; 1
    136c:	1a df       	rcall	.-460    	; 0x11a2 <writeMQTTString>
		writeInt(&ptr, packetid);
    136e:	16 14       	cp	r1, r6
    1370:	17 04       	cpc	r1, r7
    1372:	24 f4       	brge	.+8      	; 0x137c <MQTTSerialize_publish+0xc0>
    1374:	b7 01       	movw	r22, r14

	memcpy(ptr, payload, payloadlen);
    1376:	ce 01       	movw	r24, r28
    1378:	01 96       	adiw	r24, 0x01	; 1
    137a:	cf de       	rcall	.-610    	; 0x111a <writeInt>
    137c:	a6 01       	movw	r20, r12
    137e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1380:	78 a1       	ldd	r23, Y+32	; 0x20
    1382:	89 81       	ldd	r24, Y+1	; 0x01
	ptr += payloadlen;

	rc = ptr - buf;
    1384:	9a 81       	ldd	r25, Y+2	; 0x02
    1386:	8e d2       	rcall	.+1308   	; 0x18a4 <memcpy>
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	9a 81       	ldd	r25, Y+2	; 0x02
    138c:	8c 0d       	add	r24, r12
    138e:	9d 1d       	adc	r25, r13
    1390:	84 19       	sub	r24, r4
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    1392:	95 09       	sbc	r25, r5
    1394:	02 c0       	rjmp	.+4      	; 0x139a <MQTTSerialize_publish+0xde>
	rc = ptr - buf;

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    1396:	8e ef       	ldi	r24, 0xFE	; 254
    1398:	9f ef       	ldi	r25, 0xFF	; 255
    139a:	2a 96       	adiw	r28, 0x0a	; 10
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	f8 94       	cli
    13a0:	de bf       	out	0x3e, r29	; 62
    13a2:	0f be       	out	0x3f, r0	; 63
    13a4:	cd bf       	out	0x3d, r28	; 61
    13a6:	df 91       	pop	r29
    13a8:	cf 91       	pop	r28
    13aa:	1f 91       	pop	r17
    13ac:	0f 91       	pop	r16
    13ae:	ff 90       	pop	r15
    13b0:	ef 90       	pop	r14
    13b2:	df 90       	pop	r13
    13b4:	cf 90       	pop	r12
    13b6:	bf 90       	pop	r11
    13b8:	af 90       	pop	r10
    13ba:	9f 90       	pop	r9
    13bc:	8f 90       	pop	r8
    13be:	7f 90       	pop	r7
    13c0:	6f 90       	pop	r6
    13c2:	5f 90       	pop	r5
    13c4:	4f 90       	pop	r4
    13c6:	3f 90       	pop	r3
    13c8:	2f 90       	pop	r2
    13ca:	08 95       	ret

000013cc <mqtt_packet>:
#include "string.h"
#include "MQTT_functions.h" 

/////////////MQTT////////////////////
int mqtt_packet(char *payload, char *package, int buflen, char *sub_topic)
{
    13cc:	2f 92       	push	r2
    13ce:	3f 92       	push	r3
    13d0:	4f 92       	push	r4
    13d2:	5f 92       	push	r5
    13d4:	6f 92       	push	r6
    13d6:	7f 92       	push	r7
    13d8:	8f 92       	push	r8
    13da:	9f 92       	push	r9
    13dc:	af 92       	push	r10
    13de:	bf 92       	push	r11
    13e0:	cf 92       	push	r12
    13e2:	df 92       	push	r13
    13e4:	ef 92       	push	r14
    13e6:	ff 92       	push	r15
    13e8:	0f 93       	push	r16
    13ea:	1f 93       	push	r17
    13ec:	cf 93       	push	r28
    13ee:	df 93       	push	r29
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
    13f4:	ed 97       	sbiw	r28, 0x3d	; 61
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	f8 94       	cli
    13fa:	de bf       	out	0x3e, r29	; 62
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	cd bf       	out	0x3d, r28	; 61
    1400:	b8 2e       	mov	r11, r24
    1402:	a9 2e       	mov	r10, r25
    1404:	1b 01       	movw	r2, r22
    1406:	2a 01       	movw	r4, r20
    1408:	79 01       	movw	r14, r18
	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
    140a:	81 e3       	ldi	r24, 0x31	; 49
    140c:	e9 e0       	ldi	r30, 0x09	; 9
    140e:	f1 e0       	ldi	r31, 0x01	; 1
    1410:	de 01       	movw	r26, r28
    1412:	11 96       	adiw	r26, 0x01	; 1
    1414:	01 90       	ld	r0, Z+
    1416:	0d 92       	st	X+, r0
    1418:	8a 95       	dec	r24
    141a:	e1 f7       	brne	.-8      	; 0x1414 <mqtt_packet+0x48>
	
	//volatile int buflen = sizeof(&package);
	char buf[256];
	//buflen = sizeof(buf);
	MQTTString topicString = MQTTString_initializer;
    141c:	1d aa       	std	Y+53, r1	; 0x35
    141e:	1c aa       	std	Y+52, r1	; 0x34
    1420:	1f aa       	std	Y+55, r1	; 0x37
    1422:	1e aa       	std	Y+54, r1	; 0x36
	
	int payloadlen = strlen(payload);
    1424:	eb 2d       	mov	r30, r11
    1426:	f9 2f       	mov	r31, r25
    1428:	df 01       	movw	r26, r30
    142a:	0d 90       	ld	r0, X+
    142c:	00 20       	and	r0, r0
    142e:	e9 f7       	brne	.-6      	; 0x142a <mqtt_packet+0x5e>
    1430:	11 97       	sbiw	r26, 0x01	; 1
    1432:	8d 01       	movw	r16, r26
    1434:	0e 1b       	sub	r16, r30
    1436:	1f 0b       	sbc	r17, r31
	int len = 0;
	
	data.clientID.cstring = "LE";
    1438:	8d e6       	ldi	r24, 0x6D	; 109
    143a:	94 e0       	ldi	r25, 0x04	; 4
    143c:	99 87       	std	Y+9, r25	; 0x09
    143e:	88 87       	std	Y+8, r24	; 0x08
	//data.clientID.cstring = MQTT_TOPIC; //FIX SO THIS ONE WORKS, COULD BE AN ADDITIONAL INPUT.
	data.keepAliveInterval = 20;
    1440:	84 e1       	ldi	r24, 0x14	; 20
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	9f 87       	std	Y+15, r25	; 0x0f
    1446:	8e 87       	std	Y+14, r24	; 0x0e
	data.cleansession = 1;
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	88 8b       	std	Y+16, r24	; 0x10
	data.username.cstring = "";
    144c:	85 ee       	ldi	r24, 0xE5	; 229
    144e:	92 e0       	ldi	r25, 0x02	; 2
    1450:	9f a3       	std	Y+39, r25	; 0x27
    1452:	8e a3       	std	Y+38, r24	; 0x26
	data.password.cstring = "";
    1454:	9d a7       	std	Y+45, r25	; 0x2d
    1456:	8c a7       	std	Y+44, r24	; 0x2c
	data.MQTTVersion = 4;
    1458:	84 e0       	ldi	r24, 0x04	; 4
    145a:	8f 83       	std	Y+7, r24	; 0x07

	len = MQTTSerialize_connect((unsigned char *)package, buflen, &data);
    145c:	ae 01       	movw	r20, r28
    145e:	4f 5f       	subi	r20, 0xFF	; 255
    1460:	5f 4f       	sbci	r21, 0xFF	; 255
    1462:	b2 01       	movw	r22, r4
    1464:	c1 01       	movw	r24, r2
    1466:	27 dd       	rcall	.-1458   	; 0xeb6 <MQTTSerialize_connect>
    1468:	3c 01       	movw	r6, r24
	
	//topicString.cstring = "LE/0"; //MAKE A GENERAL CONFIGUREATION OF THIS PARAMETER
	char main_sub_topic[6] = "LE/";
    146a:	8c e4       	ldi	r24, 0x4C	; 76
    146c:	95 e4       	ldi	r25, 0x45	; 69
    146e:	99 af       	std	Y+57, r25	; 0x39
    1470:	88 af       	std	Y+56, r24	; 0x38
    1472:	8f e2       	ldi	r24, 0x2F	; 47
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	9b af       	std	Y+59, r25	; 0x3b
    1478:	8a af       	std	Y+58, r24	; 0x3a
    147a:	1d ae       	std	Y+61, r1	; 0x3d
    147c:	1c ae       	std	Y+60, r1	; 0x3c
	strcat(main_sub_topic, sub_topic);
    147e:	6e 01       	movw	r12, r28
    1480:	88 e3       	ldi	r24, 0x38	; 56
    1482:	c8 0e       	add	r12, r24
    1484:	d1 1c       	adc	r13, r1
    1486:	b7 01       	movw	r22, r14
    1488:	c6 01       	movw	r24, r12
    148a:	15 d2       	rcall	.+1066   	; 0x18b6 <strcat>
	topicString.cstring = main_sub_topic;
    148c:	db aa       	std	Y+51, r13	; 0x33
    148e:	ca aa       	std	Y+50, r12	; 0x32
	
	
	len += MQTTSerialize_publish((unsigned char *)(package + len), buflen - len, 0, 0, 0, 0, topicString, (unsigned char *)payload, payloadlen);
    1490:	b2 01       	movw	r22, r4
    1492:	66 19       	sub	r22, r6
    1494:	77 09       	sbc	r23, r7
    1496:	1f 93       	push	r17
    1498:	0f 93       	push	r16
    149a:	af 92       	push	r10
    149c:	bf 92       	push	r11
    149e:	8a a8       	ldd	r8, Y+50	; 0x32
    14a0:	9b a8       	ldd	r9, Y+51	; 0x33
    14a2:	ac a8       	ldd	r10, Y+52	; 0x34
    14a4:	bd a8       	ldd	r11, Y+53	; 0x35
    14a6:	ce a8       	ldd	r12, Y+54	; 0x36
    14a8:	df a8       	ldd	r13, Y+55	; 0x37
    14aa:	e1 2c       	mov	r14, r1
    14ac:	f1 2c       	mov	r15, r1
    14ae:	00 e0       	ldi	r16, 0x00	; 0
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	40 e0       	ldi	r20, 0x00	; 0
    14b6:	c1 01       	movw	r24, r2
    14b8:	86 0d       	add	r24, r6
    14ba:	97 1d       	adc	r25, r7
    14bc:	ff de       	rcall	.-514    	; 0x12bc <MQTTSerialize_publish>
    14be:	68 0e       	add	r6, r24
    14c0:	79 1e       	adc	r7, r25
		
	len += MQTTSerialize_disconnect((unsigned char *)(package + len), buflen - len);
    14c2:	b2 01       	movw	r22, r4
    14c4:	66 19       	sub	r22, r6
    14c6:	77 09       	sbc	r23, r7
    14c8:	c1 01       	movw	r24, r2
    14ca:	86 0d       	add	r24, r6
    14cc:	97 1d       	adc	r25, r7
    14ce:	e3 dd       	rcall	.-1082   	; 0x1096 <MQTTSerialize_disconnect>
	
	exit:
	
	//return 0;
	return len;
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
}
    14d8:	86 0d       	add	r24, r6
    14da:	97 1d       	adc	r25, r7
    14dc:	ed 96       	adiw	r28, 0x3d	; 61
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	f8 94       	cli
    14e2:	de bf       	out	0x3e, r29	; 62
    14e4:	0f be       	out	0x3f, r0	; 63
    14e6:	cd bf       	out	0x3d, r28	; 61
    14e8:	df 91       	pop	r29
    14ea:	cf 91       	pop	r28
    14ec:	1f 91       	pop	r17
    14ee:	0f 91       	pop	r16
    14f0:	ff 90       	pop	r15
    14f2:	ef 90       	pop	r14
    14f4:	df 90       	pop	r13
    14f6:	cf 90       	pop	r12
    14f8:	bf 90       	pop	r11
    14fa:	af 90       	pop	r10
    14fc:	9f 90       	pop	r9
    14fe:	8f 90       	pop	r8
    1500:	7f 90       	pop	r7
    1502:	6f 90       	pop	r6
    1504:	5f 90       	pop	r5
    1506:	4f 90       	pop	r4
    1508:	3f 90       	pop	r3
    150a:	2f 90       	pop	r2
    150c:	08 95       	ret

0000150e <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    150e:	08 95       	ret

00001510 <__divsf3>:
    1510:	0c d0       	rcall	.+24     	; 0x152a <__divsf3x>
    1512:	e6 c0       	rjmp	.+460    	; 0x16e0 <__fp_round>
    1514:	de d0       	rcall	.+444    	; 0x16d2 <__fp_pscB>
    1516:	40 f0       	brcs	.+16     	; 0x1528 <__divsf3+0x18>
    1518:	d5 d0       	rcall	.+426    	; 0x16c4 <__fp_pscA>
    151a:	30 f0       	brcs	.+12     	; 0x1528 <__divsf3+0x18>
    151c:	21 f4       	brne	.+8      	; 0x1526 <__divsf3+0x16>
    151e:	5f 3f       	cpi	r21, 0xFF	; 255
    1520:	19 f0       	breq	.+6      	; 0x1528 <__divsf3+0x18>
    1522:	c7 c0       	rjmp	.+398    	; 0x16b2 <__fp_inf>
    1524:	51 11       	cpse	r21, r1
    1526:	10 c1       	rjmp	.+544    	; 0x1748 <__fp_szero>
    1528:	ca c0       	rjmp	.+404    	; 0x16be <__fp_nan>

0000152a <__divsf3x>:
    152a:	eb d0       	rcall	.+470    	; 0x1702 <__fp_split3>
    152c:	98 f3       	brcs	.-26     	; 0x1514 <__divsf3+0x4>

0000152e <__divsf3_pse>:
    152e:	99 23       	and	r25, r25
    1530:	c9 f3       	breq	.-14     	; 0x1524 <__divsf3+0x14>
    1532:	55 23       	and	r21, r21
    1534:	b1 f3       	breq	.-20     	; 0x1522 <__divsf3+0x12>
    1536:	95 1b       	sub	r25, r21
    1538:	55 0b       	sbc	r21, r21
    153a:	bb 27       	eor	r27, r27
    153c:	aa 27       	eor	r26, r26
    153e:	62 17       	cp	r22, r18
    1540:	73 07       	cpc	r23, r19
    1542:	84 07       	cpc	r24, r20
    1544:	38 f0       	brcs	.+14     	; 0x1554 <__divsf3_pse+0x26>
    1546:	9f 5f       	subi	r25, 0xFF	; 255
    1548:	5f 4f       	sbci	r21, 0xFF	; 255
    154a:	22 0f       	add	r18, r18
    154c:	33 1f       	adc	r19, r19
    154e:	44 1f       	adc	r20, r20
    1550:	aa 1f       	adc	r26, r26
    1552:	a9 f3       	breq	.-22     	; 0x153e <__divsf3_pse+0x10>
    1554:	33 d0       	rcall	.+102    	; 0x15bc <__divsf3_pse+0x8e>
    1556:	0e 2e       	mov	r0, r30
    1558:	3a f0       	brmi	.+14     	; 0x1568 <__divsf3_pse+0x3a>
    155a:	e0 e8       	ldi	r30, 0x80	; 128
    155c:	30 d0       	rcall	.+96     	; 0x15be <__divsf3_pse+0x90>
    155e:	91 50       	subi	r25, 0x01	; 1
    1560:	50 40       	sbci	r21, 0x00	; 0
    1562:	e6 95       	lsr	r30
    1564:	00 1c       	adc	r0, r0
    1566:	ca f7       	brpl	.-14     	; 0x155a <__divsf3_pse+0x2c>
    1568:	29 d0       	rcall	.+82     	; 0x15bc <__divsf3_pse+0x8e>
    156a:	fe 2f       	mov	r31, r30
    156c:	27 d0       	rcall	.+78     	; 0x15bc <__divsf3_pse+0x8e>
    156e:	66 0f       	add	r22, r22
    1570:	77 1f       	adc	r23, r23
    1572:	88 1f       	adc	r24, r24
    1574:	bb 1f       	adc	r27, r27
    1576:	26 17       	cp	r18, r22
    1578:	37 07       	cpc	r19, r23
    157a:	48 07       	cpc	r20, r24
    157c:	ab 07       	cpc	r26, r27
    157e:	b0 e8       	ldi	r27, 0x80	; 128
    1580:	09 f0       	breq	.+2      	; 0x1584 <__divsf3_pse+0x56>
    1582:	bb 0b       	sbc	r27, r27
    1584:	80 2d       	mov	r24, r0
    1586:	bf 01       	movw	r22, r30
    1588:	ff 27       	eor	r31, r31
    158a:	93 58       	subi	r25, 0x83	; 131
    158c:	5f 4f       	sbci	r21, 0xFF	; 255
    158e:	2a f0       	brmi	.+10     	; 0x159a <__divsf3_pse+0x6c>
    1590:	9e 3f       	cpi	r25, 0xFE	; 254
    1592:	51 05       	cpc	r21, r1
    1594:	68 f0       	brcs	.+26     	; 0x15b0 <__divsf3_pse+0x82>
    1596:	8d c0       	rjmp	.+282    	; 0x16b2 <__fp_inf>
    1598:	d7 c0       	rjmp	.+430    	; 0x1748 <__fp_szero>
    159a:	5f 3f       	cpi	r21, 0xFF	; 255
    159c:	ec f3       	brlt	.-6      	; 0x1598 <__divsf3_pse+0x6a>
    159e:	98 3e       	cpi	r25, 0xE8	; 232
    15a0:	dc f3       	brlt	.-10     	; 0x1598 <__divsf3_pse+0x6a>
    15a2:	86 95       	lsr	r24
    15a4:	77 95       	ror	r23
    15a6:	67 95       	ror	r22
    15a8:	b7 95       	ror	r27
    15aa:	f7 95       	ror	r31
    15ac:	9f 5f       	subi	r25, 0xFF	; 255
    15ae:	c9 f7       	brne	.-14     	; 0x15a2 <__divsf3_pse+0x74>
    15b0:	88 0f       	add	r24, r24
    15b2:	91 1d       	adc	r25, r1
    15b4:	96 95       	lsr	r25
    15b6:	87 95       	ror	r24
    15b8:	97 f9       	bld	r25, 7
    15ba:	08 95       	ret
    15bc:	e1 e0       	ldi	r30, 0x01	; 1
    15be:	66 0f       	add	r22, r22
    15c0:	77 1f       	adc	r23, r23
    15c2:	88 1f       	adc	r24, r24
    15c4:	bb 1f       	adc	r27, r27
    15c6:	62 17       	cp	r22, r18
    15c8:	73 07       	cpc	r23, r19
    15ca:	84 07       	cpc	r24, r20
    15cc:	ba 07       	cpc	r27, r26
    15ce:	20 f0       	brcs	.+8      	; 0x15d8 <__divsf3_pse+0xaa>
    15d0:	62 1b       	sub	r22, r18
    15d2:	73 0b       	sbc	r23, r19
    15d4:	84 0b       	sbc	r24, r20
    15d6:	ba 0b       	sbc	r27, r26
    15d8:	ee 1f       	adc	r30, r30
    15da:	88 f7       	brcc	.-30     	; 0x15be <__divsf3_pse+0x90>
    15dc:	e0 95       	com	r30
    15de:	08 95       	ret

000015e0 <__fixunssfsi>:
    15e0:	98 d0       	rcall	.+304    	; 0x1712 <__fp_splitA>
    15e2:	88 f0       	brcs	.+34     	; 0x1606 <__fixunssfsi+0x26>
    15e4:	9f 57       	subi	r25, 0x7F	; 127
    15e6:	90 f0       	brcs	.+36     	; 0x160c <__fixunssfsi+0x2c>
    15e8:	b9 2f       	mov	r27, r25
    15ea:	99 27       	eor	r25, r25
    15ec:	b7 51       	subi	r27, 0x17	; 23
    15ee:	a0 f0       	brcs	.+40     	; 0x1618 <__fixunssfsi+0x38>
    15f0:	d1 f0       	breq	.+52     	; 0x1626 <__fixunssfsi+0x46>
    15f2:	66 0f       	add	r22, r22
    15f4:	77 1f       	adc	r23, r23
    15f6:	88 1f       	adc	r24, r24
    15f8:	99 1f       	adc	r25, r25
    15fa:	1a f0       	brmi	.+6      	; 0x1602 <__fixunssfsi+0x22>
    15fc:	ba 95       	dec	r27
    15fe:	c9 f7       	brne	.-14     	; 0x15f2 <__fixunssfsi+0x12>
    1600:	12 c0       	rjmp	.+36     	; 0x1626 <__fixunssfsi+0x46>
    1602:	b1 30       	cpi	r27, 0x01	; 1
    1604:	81 f0       	breq	.+32     	; 0x1626 <__fixunssfsi+0x46>
    1606:	9f d0       	rcall	.+318    	; 0x1746 <__fp_zero>
    1608:	b1 e0       	ldi	r27, 0x01	; 1
    160a:	08 95       	ret
    160c:	9c c0       	rjmp	.+312    	; 0x1746 <__fp_zero>
    160e:	67 2f       	mov	r22, r23
    1610:	78 2f       	mov	r23, r24
    1612:	88 27       	eor	r24, r24
    1614:	b8 5f       	subi	r27, 0xF8	; 248
    1616:	39 f0       	breq	.+14     	; 0x1626 <__fixunssfsi+0x46>
    1618:	b9 3f       	cpi	r27, 0xF9	; 249
    161a:	cc f3       	brlt	.-14     	; 0x160e <__fixunssfsi+0x2e>
    161c:	86 95       	lsr	r24
    161e:	77 95       	ror	r23
    1620:	67 95       	ror	r22
    1622:	b3 95       	inc	r27
    1624:	d9 f7       	brne	.-10     	; 0x161c <__fixunssfsi+0x3c>
    1626:	3e f4       	brtc	.+14     	; 0x1636 <__fixunssfsi+0x56>
    1628:	90 95       	com	r25
    162a:	80 95       	com	r24
    162c:	70 95       	com	r23
    162e:	61 95       	neg	r22
    1630:	7f 4f       	sbci	r23, 0xFF	; 255
    1632:	8f 4f       	sbci	r24, 0xFF	; 255
    1634:	9f 4f       	sbci	r25, 0xFF	; 255
    1636:	08 95       	ret

00001638 <__floatunsisf>:
    1638:	e8 94       	clt
    163a:	09 c0       	rjmp	.+18     	; 0x164e <__floatsisf+0x12>

0000163c <__floatsisf>:
    163c:	97 fb       	bst	r25, 7
    163e:	3e f4       	brtc	.+14     	; 0x164e <__floatsisf+0x12>
    1640:	90 95       	com	r25
    1642:	80 95       	com	r24
    1644:	70 95       	com	r23
    1646:	61 95       	neg	r22
    1648:	7f 4f       	sbci	r23, 0xFF	; 255
    164a:	8f 4f       	sbci	r24, 0xFF	; 255
    164c:	9f 4f       	sbci	r25, 0xFF	; 255
    164e:	99 23       	and	r25, r25
    1650:	a9 f0       	breq	.+42     	; 0x167c <__floatsisf+0x40>
    1652:	f9 2f       	mov	r31, r25
    1654:	96 e9       	ldi	r25, 0x96	; 150
    1656:	bb 27       	eor	r27, r27
    1658:	93 95       	inc	r25
    165a:	f6 95       	lsr	r31
    165c:	87 95       	ror	r24
    165e:	77 95       	ror	r23
    1660:	67 95       	ror	r22
    1662:	b7 95       	ror	r27
    1664:	f1 11       	cpse	r31, r1
    1666:	f8 cf       	rjmp	.-16     	; 0x1658 <__floatsisf+0x1c>
    1668:	fa f4       	brpl	.+62     	; 0x16a8 <__floatsisf+0x6c>
    166a:	bb 0f       	add	r27, r27
    166c:	11 f4       	brne	.+4      	; 0x1672 <__floatsisf+0x36>
    166e:	60 ff       	sbrs	r22, 0
    1670:	1b c0       	rjmp	.+54     	; 0x16a8 <__floatsisf+0x6c>
    1672:	6f 5f       	subi	r22, 0xFF	; 255
    1674:	7f 4f       	sbci	r23, 0xFF	; 255
    1676:	8f 4f       	sbci	r24, 0xFF	; 255
    1678:	9f 4f       	sbci	r25, 0xFF	; 255
    167a:	16 c0       	rjmp	.+44     	; 0x16a8 <__floatsisf+0x6c>
    167c:	88 23       	and	r24, r24
    167e:	11 f0       	breq	.+4      	; 0x1684 <__floatsisf+0x48>
    1680:	96 e9       	ldi	r25, 0x96	; 150
    1682:	11 c0       	rjmp	.+34     	; 0x16a6 <__floatsisf+0x6a>
    1684:	77 23       	and	r23, r23
    1686:	21 f0       	breq	.+8      	; 0x1690 <__floatsisf+0x54>
    1688:	9e e8       	ldi	r25, 0x8E	; 142
    168a:	87 2f       	mov	r24, r23
    168c:	76 2f       	mov	r23, r22
    168e:	05 c0       	rjmp	.+10     	; 0x169a <__floatsisf+0x5e>
    1690:	66 23       	and	r22, r22
    1692:	71 f0       	breq	.+28     	; 0x16b0 <__floatsisf+0x74>
    1694:	96 e8       	ldi	r25, 0x86	; 134
    1696:	86 2f       	mov	r24, r22
    1698:	70 e0       	ldi	r23, 0x00	; 0
    169a:	60 e0       	ldi	r22, 0x00	; 0
    169c:	2a f0       	brmi	.+10     	; 0x16a8 <__floatsisf+0x6c>
    169e:	9a 95       	dec	r25
    16a0:	66 0f       	add	r22, r22
    16a2:	77 1f       	adc	r23, r23
    16a4:	88 1f       	adc	r24, r24
    16a6:	da f7       	brpl	.-10     	; 0x169e <__floatsisf+0x62>
    16a8:	88 0f       	add	r24, r24
    16aa:	96 95       	lsr	r25
    16ac:	87 95       	ror	r24
    16ae:	97 f9       	bld	r25, 7
    16b0:	08 95       	ret

000016b2 <__fp_inf>:
    16b2:	97 f9       	bld	r25, 7
    16b4:	9f 67       	ori	r25, 0x7F	; 127
    16b6:	80 e8       	ldi	r24, 0x80	; 128
    16b8:	70 e0       	ldi	r23, 0x00	; 0
    16ba:	60 e0       	ldi	r22, 0x00	; 0
    16bc:	08 95       	ret

000016be <__fp_nan>:
    16be:	9f ef       	ldi	r25, 0xFF	; 255
    16c0:	80 ec       	ldi	r24, 0xC0	; 192
    16c2:	08 95       	ret

000016c4 <__fp_pscA>:
    16c4:	00 24       	eor	r0, r0
    16c6:	0a 94       	dec	r0
    16c8:	16 16       	cp	r1, r22
    16ca:	17 06       	cpc	r1, r23
    16cc:	18 06       	cpc	r1, r24
    16ce:	09 06       	cpc	r0, r25
    16d0:	08 95       	ret

000016d2 <__fp_pscB>:
    16d2:	00 24       	eor	r0, r0
    16d4:	0a 94       	dec	r0
    16d6:	12 16       	cp	r1, r18
    16d8:	13 06       	cpc	r1, r19
    16da:	14 06       	cpc	r1, r20
    16dc:	05 06       	cpc	r0, r21
    16de:	08 95       	ret

000016e0 <__fp_round>:
    16e0:	09 2e       	mov	r0, r25
    16e2:	03 94       	inc	r0
    16e4:	00 0c       	add	r0, r0
    16e6:	11 f4       	brne	.+4      	; 0x16ec <__fp_round+0xc>
    16e8:	88 23       	and	r24, r24
    16ea:	52 f0       	brmi	.+20     	; 0x1700 <__fp_round+0x20>
    16ec:	bb 0f       	add	r27, r27
    16ee:	40 f4       	brcc	.+16     	; 0x1700 <__fp_round+0x20>
    16f0:	bf 2b       	or	r27, r31
    16f2:	11 f4       	brne	.+4      	; 0x16f8 <__fp_round+0x18>
    16f4:	60 ff       	sbrs	r22, 0
    16f6:	04 c0       	rjmp	.+8      	; 0x1700 <__fp_round+0x20>
    16f8:	6f 5f       	subi	r22, 0xFF	; 255
    16fa:	7f 4f       	sbci	r23, 0xFF	; 255
    16fc:	8f 4f       	sbci	r24, 0xFF	; 255
    16fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1700:	08 95       	ret

00001702 <__fp_split3>:
    1702:	57 fd       	sbrc	r21, 7
    1704:	90 58       	subi	r25, 0x80	; 128
    1706:	44 0f       	add	r20, r20
    1708:	55 1f       	adc	r21, r21
    170a:	59 f0       	breq	.+22     	; 0x1722 <__fp_splitA+0x10>
    170c:	5f 3f       	cpi	r21, 0xFF	; 255
    170e:	71 f0       	breq	.+28     	; 0x172c <__fp_splitA+0x1a>
    1710:	47 95       	ror	r20

00001712 <__fp_splitA>:
    1712:	88 0f       	add	r24, r24
    1714:	97 fb       	bst	r25, 7
    1716:	99 1f       	adc	r25, r25
    1718:	61 f0       	breq	.+24     	; 0x1732 <__fp_splitA+0x20>
    171a:	9f 3f       	cpi	r25, 0xFF	; 255
    171c:	79 f0       	breq	.+30     	; 0x173c <__fp_splitA+0x2a>
    171e:	87 95       	ror	r24
    1720:	08 95       	ret
    1722:	12 16       	cp	r1, r18
    1724:	13 06       	cpc	r1, r19
    1726:	14 06       	cpc	r1, r20
    1728:	55 1f       	adc	r21, r21
    172a:	f2 cf       	rjmp	.-28     	; 0x1710 <__fp_split3+0xe>
    172c:	46 95       	lsr	r20
    172e:	f1 df       	rcall	.-30     	; 0x1712 <__fp_splitA>
    1730:	08 c0       	rjmp	.+16     	; 0x1742 <__fp_splitA+0x30>
    1732:	16 16       	cp	r1, r22
    1734:	17 06       	cpc	r1, r23
    1736:	18 06       	cpc	r1, r24
    1738:	99 1f       	adc	r25, r25
    173a:	f1 cf       	rjmp	.-30     	; 0x171e <__fp_splitA+0xc>
    173c:	86 95       	lsr	r24
    173e:	71 05       	cpc	r23, r1
    1740:	61 05       	cpc	r22, r1
    1742:	08 94       	sec
    1744:	08 95       	ret

00001746 <__fp_zero>:
    1746:	e8 94       	clt

00001748 <__fp_szero>:
    1748:	bb 27       	eor	r27, r27
    174a:	66 27       	eor	r22, r22
    174c:	77 27       	eor	r23, r23
    174e:	cb 01       	movw	r24, r22
    1750:	97 f9       	bld	r25, 7
    1752:	08 95       	ret

00001754 <__mulsf3>:
    1754:	0b d0       	rcall	.+22     	; 0x176c <__mulsf3x>
    1756:	c4 cf       	rjmp	.-120    	; 0x16e0 <__fp_round>
    1758:	b5 df       	rcall	.-150    	; 0x16c4 <__fp_pscA>
    175a:	28 f0       	brcs	.+10     	; 0x1766 <__mulsf3+0x12>
    175c:	ba df       	rcall	.-140    	; 0x16d2 <__fp_pscB>
    175e:	18 f0       	brcs	.+6      	; 0x1766 <__mulsf3+0x12>
    1760:	95 23       	and	r25, r21
    1762:	09 f0       	breq	.+2      	; 0x1766 <__mulsf3+0x12>
    1764:	a6 cf       	rjmp	.-180    	; 0x16b2 <__fp_inf>
    1766:	ab cf       	rjmp	.-170    	; 0x16be <__fp_nan>
    1768:	11 24       	eor	r1, r1
    176a:	ee cf       	rjmp	.-36     	; 0x1748 <__fp_szero>

0000176c <__mulsf3x>:
    176c:	ca df       	rcall	.-108    	; 0x1702 <__fp_split3>
    176e:	a0 f3       	brcs	.-24     	; 0x1758 <__mulsf3+0x4>

00001770 <__mulsf3_pse>:
    1770:	95 9f       	mul	r25, r21
    1772:	d1 f3       	breq	.-12     	; 0x1768 <__mulsf3+0x14>
    1774:	95 0f       	add	r25, r21
    1776:	50 e0       	ldi	r21, 0x00	; 0
    1778:	55 1f       	adc	r21, r21
    177a:	62 9f       	mul	r22, r18
    177c:	f0 01       	movw	r30, r0
    177e:	72 9f       	mul	r23, r18
    1780:	bb 27       	eor	r27, r27
    1782:	f0 0d       	add	r31, r0
    1784:	b1 1d       	adc	r27, r1
    1786:	63 9f       	mul	r22, r19
    1788:	aa 27       	eor	r26, r26
    178a:	f0 0d       	add	r31, r0
    178c:	b1 1d       	adc	r27, r1
    178e:	aa 1f       	adc	r26, r26
    1790:	64 9f       	mul	r22, r20
    1792:	66 27       	eor	r22, r22
    1794:	b0 0d       	add	r27, r0
    1796:	a1 1d       	adc	r26, r1
    1798:	66 1f       	adc	r22, r22
    179a:	82 9f       	mul	r24, r18
    179c:	22 27       	eor	r18, r18
    179e:	b0 0d       	add	r27, r0
    17a0:	a1 1d       	adc	r26, r1
    17a2:	62 1f       	adc	r22, r18
    17a4:	73 9f       	mul	r23, r19
    17a6:	b0 0d       	add	r27, r0
    17a8:	a1 1d       	adc	r26, r1
    17aa:	62 1f       	adc	r22, r18
    17ac:	83 9f       	mul	r24, r19
    17ae:	a0 0d       	add	r26, r0
    17b0:	61 1d       	adc	r22, r1
    17b2:	22 1f       	adc	r18, r18
    17b4:	74 9f       	mul	r23, r20
    17b6:	33 27       	eor	r19, r19
    17b8:	a0 0d       	add	r26, r0
    17ba:	61 1d       	adc	r22, r1
    17bc:	23 1f       	adc	r18, r19
    17be:	84 9f       	mul	r24, r20
    17c0:	60 0d       	add	r22, r0
    17c2:	21 1d       	adc	r18, r1
    17c4:	82 2f       	mov	r24, r18
    17c6:	76 2f       	mov	r23, r22
    17c8:	6a 2f       	mov	r22, r26
    17ca:	11 24       	eor	r1, r1
    17cc:	9f 57       	subi	r25, 0x7F	; 127
    17ce:	50 40       	sbci	r21, 0x00	; 0
    17d0:	8a f0       	brmi	.+34     	; 0x17f4 <__mulsf3_pse+0x84>
    17d2:	e1 f0       	breq	.+56     	; 0x180c <__mulsf3_pse+0x9c>
    17d4:	88 23       	and	r24, r24
    17d6:	4a f0       	brmi	.+18     	; 0x17ea <__mulsf3_pse+0x7a>
    17d8:	ee 0f       	add	r30, r30
    17da:	ff 1f       	adc	r31, r31
    17dc:	bb 1f       	adc	r27, r27
    17de:	66 1f       	adc	r22, r22
    17e0:	77 1f       	adc	r23, r23
    17e2:	88 1f       	adc	r24, r24
    17e4:	91 50       	subi	r25, 0x01	; 1
    17e6:	50 40       	sbci	r21, 0x00	; 0
    17e8:	a9 f7       	brne	.-22     	; 0x17d4 <__mulsf3_pse+0x64>
    17ea:	9e 3f       	cpi	r25, 0xFE	; 254
    17ec:	51 05       	cpc	r21, r1
    17ee:	70 f0       	brcs	.+28     	; 0x180c <__mulsf3_pse+0x9c>
    17f0:	60 cf       	rjmp	.-320    	; 0x16b2 <__fp_inf>
    17f2:	aa cf       	rjmp	.-172    	; 0x1748 <__fp_szero>
    17f4:	5f 3f       	cpi	r21, 0xFF	; 255
    17f6:	ec f3       	brlt	.-6      	; 0x17f2 <__mulsf3_pse+0x82>
    17f8:	98 3e       	cpi	r25, 0xE8	; 232
    17fa:	dc f3       	brlt	.-10     	; 0x17f2 <__mulsf3_pse+0x82>
    17fc:	86 95       	lsr	r24
    17fe:	77 95       	ror	r23
    1800:	67 95       	ror	r22
    1802:	b7 95       	ror	r27
    1804:	f7 95       	ror	r31
    1806:	e7 95       	ror	r30
    1808:	9f 5f       	subi	r25, 0xFF	; 255
    180a:	c1 f7       	brne	.-16     	; 0x17fc <__mulsf3_pse+0x8c>
    180c:	fe 2b       	or	r31, r30
    180e:	88 0f       	add	r24, r24
    1810:	91 1d       	adc	r25, r1
    1812:	96 95       	lsr	r25
    1814:	87 95       	ror	r24
    1816:	97 f9       	bld	r25, 7
    1818:	08 95       	ret

0000181a <__udivmodsi4>:
    181a:	a1 e2       	ldi	r26, 0x21	; 33
    181c:	1a 2e       	mov	r1, r26
    181e:	aa 1b       	sub	r26, r26
    1820:	bb 1b       	sub	r27, r27
    1822:	fd 01       	movw	r30, r26
    1824:	0d c0       	rjmp	.+26     	; 0x1840 <__udivmodsi4_ep>

00001826 <__udivmodsi4_loop>:
    1826:	aa 1f       	adc	r26, r26
    1828:	bb 1f       	adc	r27, r27
    182a:	ee 1f       	adc	r30, r30
    182c:	ff 1f       	adc	r31, r31
    182e:	a2 17       	cp	r26, r18
    1830:	b3 07       	cpc	r27, r19
    1832:	e4 07       	cpc	r30, r20
    1834:	f5 07       	cpc	r31, r21
    1836:	20 f0       	brcs	.+8      	; 0x1840 <__udivmodsi4_ep>
    1838:	a2 1b       	sub	r26, r18
    183a:	b3 0b       	sbc	r27, r19
    183c:	e4 0b       	sbc	r30, r20
    183e:	f5 0b       	sbc	r31, r21

00001840 <__udivmodsi4_ep>:
    1840:	66 1f       	adc	r22, r22
    1842:	77 1f       	adc	r23, r23
    1844:	88 1f       	adc	r24, r24
    1846:	99 1f       	adc	r25, r25
    1848:	1a 94       	dec	r1
    184a:	69 f7       	brne	.-38     	; 0x1826 <__udivmodsi4_loop>
    184c:	60 95       	com	r22
    184e:	70 95       	com	r23
    1850:	80 95       	com	r24
    1852:	90 95       	com	r25
    1854:	9b 01       	movw	r18, r22
    1856:	ac 01       	movw	r20, r24
    1858:	bd 01       	movw	r22, r26
    185a:	cf 01       	movw	r24, r30
    185c:	08 95       	ret

0000185e <__tablejump2__>:
    185e:	ee 0f       	add	r30, r30
    1860:	ff 1f       	adc	r31, r31
    1862:	05 90       	lpm	r0, Z+
    1864:	f4 91       	lpm	r31, Z
    1866:	e0 2d       	mov	r30, r0
    1868:	09 94       	ijmp

0000186a <atoi>:
    186a:	fc 01       	movw	r30, r24
    186c:	88 27       	eor	r24, r24
    186e:	99 27       	eor	r25, r25
    1870:	e8 94       	clt
    1872:	21 91       	ld	r18, Z+
    1874:	20 32       	cpi	r18, 0x20	; 32
    1876:	e9 f3       	breq	.-6      	; 0x1872 <atoi+0x8>
    1878:	29 30       	cpi	r18, 0x09	; 9
    187a:	10 f0       	brcs	.+4      	; 0x1880 <atoi+0x16>
    187c:	2e 30       	cpi	r18, 0x0E	; 14
    187e:	c8 f3       	brcs	.-14     	; 0x1872 <atoi+0x8>
    1880:	2b 32       	cpi	r18, 0x2B	; 43
    1882:	39 f0       	breq	.+14     	; 0x1892 <atoi+0x28>
    1884:	2d 32       	cpi	r18, 0x2D	; 45
    1886:	31 f4       	brne	.+12     	; 0x1894 <atoi+0x2a>
    1888:	68 94       	set
    188a:	03 c0       	rjmp	.+6      	; 0x1892 <atoi+0x28>
    188c:	54 d0       	rcall	.+168    	; 0x1936 <__mulhi_const_10>
    188e:	82 0f       	add	r24, r18
    1890:	91 1d       	adc	r25, r1
    1892:	21 91       	ld	r18, Z+
    1894:	20 53       	subi	r18, 0x30	; 48
    1896:	2a 30       	cpi	r18, 0x0A	; 10
    1898:	c8 f3       	brcs	.-14     	; 0x188c <atoi+0x22>
    189a:	1e f4       	brtc	.+6      	; 0x18a2 <atoi+0x38>
    189c:	90 95       	com	r25
    189e:	81 95       	neg	r24
    18a0:	9f 4f       	sbci	r25, 0xFF	; 255
    18a2:	08 95       	ret

000018a4 <memcpy>:
    18a4:	fb 01       	movw	r30, r22
    18a6:	dc 01       	movw	r26, r24
    18a8:	02 c0       	rjmp	.+4      	; 0x18ae <memcpy+0xa>
    18aa:	01 90       	ld	r0, Z+
    18ac:	0d 92       	st	X+, r0
    18ae:	41 50       	subi	r20, 0x01	; 1
    18b0:	50 40       	sbci	r21, 0x00	; 0
    18b2:	d8 f7       	brcc	.-10     	; 0x18aa <memcpy+0x6>
    18b4:	08 95       	ret

000018b6 <strcat>:
    18b6:	fb 01       	movw	r30, r22
    18b8:	dc 01       	movw	r26, r24
    18ba:	0d 90       	ld	r0, X+
    18bc:	00 20       	and	r0, r0
    18be:	e9 f7       	brne	.-6      	; 0x18ba <strcat+0x4>
    18c0:	11 97       	sbiw	r26, 0x01	; 1
    18c2:	01 90       	ld	r0, Z+
    18c4:	0d 92       	st	X+, r0
    18c6:	00 20       	and	r0, r0
    18c8:	e1 f7       	brne	.-8      	; 0x18c2 <strcat+0xc>
    18ca:	08 95       	ret

000018cc <strcpy>:
    18cc:	fb 01       	movw	r30, r22
    18ce:	dc 01       	movw	r26, r24
    18d0:	01 90       	ld	r0, Z+
    18d2:	0d 92       	st	X+, r0
    18d4:	00 20       	and	r0, r0
    18d6:	e1 f7       	brne	.-8      	; 0x18d0 <strcpy+0x4>
    18d8:	08 95       	ret

000018da <strstr>:
    18da:	fb 01       	movw	r30, r22
    18dc:	51 91       	ld	r21, Z+
    18de:	55 23       	and	r21, r21
    18e0:	a9 f0       	breq	.+42     	; 0x190c <strstr+0x32>
    18e2:	bf 01       	movw	r22, r30
    18e4:	dc 01       	movw	r26, r24
    18e6:	4d 91       	ld	r20, X+
    18e8:	45 17       	cp	r20, r21
    18ea:	41 11       	cpse	r20, r1
    18ec:	e1 f7       	brne	.-8      	; 0x18e6 <strstr+0xc>
    18ee:	59 f4       	brne	.+22     	; 0x1906 <strstr+0x2c>
    18f0:	cd 01       	movw	r24, r26
    18f2:	01 90       	ld	r0, Z+
    18f4:	00 20       	and	r0, r0
    18f6:	49 f0       	breq	.+18     	; 0x190a <strstr+0x30>
    18f8:	4d 91       	ld	r20, X+
    18fa:	40 15       	cp	r20, r0
    18fc:	41 11       	cpse	r20, r1
    18fe:	c9 f3       	breq	.-14     	; 0x18f2 <strstr+0x18>
    1900:	fb 01       	movw	r30, r22
    1902:	41 11       	cpse	r20, r1
    1904:	ef cf       	rjmp	.-34     	; 0x18e4 <strstr+0xa>
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	01 97       	sbiw	r24, 0x01	; 1
    190c:	08 95       	ret

0000190e <itoa>:
    190e:	45 32       	cpi	r20, 0x25	; 37
    1910:	51 05       	cpc	r21, r1
    1912:	18 f4       	brcc	.+6      	; 0x191a <itoa+0xc>
    1914:	42 30       	cpi	r20, 0x02	; 2
    1916:	08 f0       	brcs	.+2      	; 0x191a <itoa+0xc>
    1918:	04 c0       	rjmp	.+8      	; 0x1922 <__itoa_ncheck>
    191a:	fb 01       	movw	r30, r22
    191c:	10 82       	st	Z, r1
    191e:	cb 01       	movw	r24, r22
    1920:	08 95       	ret

00001922 <__itoa_ncheck>:
    1922:	bb 27       	eor	r27, r27
    1924:	4a 30       	cpi	r20, 0x0A	; 10
    1926:	31 f4       	brne	.+12     	; 0x1934 <__itoa_ncheck+0x12>
    1928:	99 23       	and	r25, r25
    192a:	22 f4       	brpl	.+8      	; 0x1934 <__itoa_ncheck+0x12>
    192c:	bd e2       	ldi	r27, 0x2D	; 45
    192e:	90 95       	com	r25
    1930:	81 95       	neg	r24
    1932:	9f 4f       	sbci	r25, 0xFF	; 255
    1934:	09 c0       	rjmp	.+18     	; 0x1948 <__utoa_common>

00001936 <__mulhi_const_10>:
    1936:	7a e0       	ldi	r23, 0x0A	; 10
    1938:	97 9f       	mul	r25, r23
    193a:	90 2d       	mov	r25, r0
    193c:	87 9f       	mul	r24, r23
    193e:	80 2d       	mov	r24, r0
    1940:	91 0d       	add	r25, r1
    1942:	11 24       	eor	r1, r1
    1944:	08 95       	ret

00001946 <__utoa_ncheck>:
    1946:	bb 27       	eor	r27, r27

00001948 <__utoa_common>:
    1948:	fb 01       	movw	r30, r22
    194a:	55 27       	eor	r21, r21
    194c:	aa 27       	eor	r26, r26
    194e:	88 0f       	add	r24, r24
    1950:	99 1f       	adc	r25, r25
    1952:	aa 1f       	adc	r26, r26
    1954:	a4 17       	cp	r26, r20
    1956:	10 f0       	brcs	.+4      	; 0x195c <__utoa_common+0x14>
    1958:	a4 1b       	sub	r26, r20
    195a:	83 95       	inc	r24
    195c:	50 51       	subi	r21, 0x10	; 16
    195e:	b9 f7       	brne	.-18     	; 0x194e <__utoa_common+0x6>
    1960:	a0 5d       	subi	r26, 0xD0	; 208
    1962:	aa 33       	cpi	r26, 0x3A	; 58
    1964:	08 f0       	brcs	.+2      	; 0x1968 <__utoa_common+0x20>
    1966:	a9 5d       	subi	r26, 0xD9	; 217
    1968:	a1 93       	st	Z+, r26
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	79 f7       	brne	.-34     	; 0x194c <__utoa_common+0x4>
    196e:	b1 11       	cpse	r27, r1
    1970:	b1 93       	st	Z+, r27
    1972:	11 92       	st	Z+, r1
    1974:	cb 01       	movw	r24, r22
    1976:	00 c0       	rjmp	.+0      	; 0x1978 <strrev>

00001978 <strrev>:
    1978:	dc 01       	movw	r26, r24
    197a:	fc 01       	movw	r30, r24
    197c:	67 2f       	mov	r22, r23
    197e:	71 91       	ld	r23, Z+
    1980:	77 23       	and	r23, r23
    1982:	e1 f7       	brne	.-8      	; 0x197c <strrev+0x4>
    1984:	32 97       	sbiw	r30, 0x02	; 2
    1986:	04 c0       	rjmp	.+8      	; 0x1990 <strrev+0x18>
    1988:	7c 91       	ld	r23, X
    198a:	6d 93       	st	X+, r22
    198c:	70 83       	st	Z, r23
    198e:	62 91       	ld	r22, -Z
    1990:	ae 17       	cp	r26, r30
    1992:	bf 07       	cpc	r27, r31
    1994:	c8 f3       	brcs	.-14     	; 0x1988 <strrev+0x10>
    1996:	08 95       	ret

00001998 <_exit>:
    1998:	f8 94       	cli

0000199a <__stop_program>:
    199a:	ff cf       	rjmp	.-2      	; 0x199a <__stop_program>
