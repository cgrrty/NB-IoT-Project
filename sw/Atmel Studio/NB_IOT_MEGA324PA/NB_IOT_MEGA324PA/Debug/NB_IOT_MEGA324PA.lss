
NB_IOT_MEGA324PA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000296  00800100  00001852  000018e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001852  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000017e  00800396  00800396  00001b7c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b7c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001bac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a0  00000000  00000000  00001bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000447b  00000000  00000000  00001e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001777  00000000  00000000  00006307  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000307f  00000000  00000000  00007a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009b0  00000000  00000000  0000ab00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00014d6f  00000000  00000000  0000b4b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003a18  00000000  00000000  0002021f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000238  00000000  00000000  00023c37  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00001d91  00000000  00000000  00023e6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8a c0       	rjmp	.+276    	; 0x116 <__ctors_end>
       2:	00 00       	nop
       4:	a4 c0       	rjmp	.+328    	; 0x14e <__bad_interrupt>
       6:	00 00       	nop
       8:	a2 c0       	rjmp	.+324    	; 0x14e <__bad_interrupt>
       a:	00 00       	nop
       c:	a0 c0       	rjmp	.+320    	; 0x14e <__bad_interrupt>
       e:	00 00       	nop
      10:	9e c0       	rjmp	.+316    	; 0x14e <__bad_interrupt>
      12:	00 00       	nop
      14:	9c c0       	rjmp	.+312    	; 0x14e <__bad_interrupt>
      16:	00 00       	nop
      18:	9a c0       	rjmp	.+308    	; 0x14e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	98 c0       	rjmp	.+304    	; 0x14e <__bad_interrupt>
      1e:	00 00       	nop
      20:	96 c0       	rjmp	.+300    	; 0x14e <__bad_interrupt>
      22:	00 00       	nop
      24:	94 c0       	rjmp	.+296    	; 0x14e <__bad_interrupt>
      26:	00 00       	nop
      28:	92 c0       	rjmp	.+292    	; 0x14e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	90 c0       	rjmp	.+288    	; 0x14e <__bad_interrupt>
      2e:	00 00       	nop
      30:	8e c0       	rjmp	.+284    	; 0x14e <__bad_interrupt>
      32:	00 00       	nop
      34:	8c c0       	rjmp	.+280    	; 0x14e <__bad_interrupt>
      36:	00 00       	nop
      38:	8a c0       	rjmp	.+276    	; 0x14e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	88 c0       	rjmp	.+272    	; 0x14e <__bad_interrupt>
      3e:	00 00       	nop
      40:	86 c0       	rjmp	.+268    	; 0x14e <__bad_interrupt>
      42:	00 00       	nop
      44:	84 c0       	rjmp	.+264    	; 0x14e <__bad_interrupt>
      46:	00 00       	nop
      48:	82 c0       	rjmp	.+260    	; 0x14e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	80 c0       	rjmp	.+256    	; 0x14e <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c3       	rjmp	.+1662   	; 0x6d0 <__vector_20>
      52:	00 00       	nop
      54:	7c c0       	rjmp	.+248    	; 0x14e <__bad_interrupt>
      56:	00 00       	nop
      58:	7a c0       	rjmp	.+244    	; 0x14e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	78 c0       	rjmp	.+240    	; 0x14e <__bad_interrupt>
      5e:	00 00       	nop
      60:	76 c0       	rjmp	.+236    	; 0x14e <__bad_interrupt>
      62:	00 00       	nop
      64:	74 c0       	rjmp	.+232    	; 0x14e <__bad_interrupt>
      66:	00 00       	nop
      68:	72 c0       	rjmp	.+228    	; 0x14e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	70 c0       	rjmp	.+224    	; 0x14e <__bad_interrupt>
      6e:	00 00       	nop
      70:	6e c0       	rjmp	.+220    	; 0x14e <__bad_interrupt>
      72:	00 00       	nop
      74:	6c c0       	rjmp	.+216    	; 0x14e <__bad_interrupt>
      76:	00 00       	nop
      78:	6a c0       	rjmp	.+212    	; 0x14e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f2 03       	fmuls	r23, r18
      7e:	f5 03       	fmuls	r23, r21
      80:	2e 04       	cpc	r2, r14
      82:	4a 04       	cpc	r4, r10
      84:	51 04       	cpc	r5, r1
      86:	55 04       	cpc	r5, r5
      88:	59 04       	cpc	r5, r9
      8a:	6f 04       	cpc	r6, r15
      8c:	72 04       	cpc	r7, r2
      8e:	75 04       	cpc	r7, r5
      90:	79 04       	cpc	r7, r9
      92:	7d 04       	cpc	r7, r13
      94:	07 63       	ori	r16, 0x37	; 55
      96:	42 36       	cpi	r20, 0x62	; 98
      98:	b7 9b       	sbis	0x16, 7	; 22
      9a:	d8 a7       	std	Y+40, r29	; 0x28
      9c:	1a 39       	cpi	r17, 0x9A	; 154
      9e:	68 56       	subi	r22, 0x68	; 104
      a0:	18 ae       	std	Y+56, r1	; 0x38
      a2:	ba ab       	std	Y+50, r27	; 0x32
      a4:	55 8c       	ldd	r5, Z+29	; 0x1d
      a6:	1d 3c       	cpi	r17, 0xCD	; 205
      a8:	b7 cc       	rjmp	.-1682   	; 0xfffffa18 <__eeprom_end+0xff7efa18>
      aa:	57 63       	ori	r21, 0x37	; 55
      ac:	bd 6d       	ori	r27, 0xDD	; 221
      ae:	ed fd       	.word	0xfded	; ????
      b0:	75 3e       	cpi	r23, 0xE5	; 229
      b2:	f6 17       	cp	r31, r22
      b4:	72 31       	cpi	r23, 0x12	; 18
      b6:	bf 00       	.word	0x00bf	; ????
      b8:	00 00       	nop
      ba:	80 3f       	cpi	r24, 0xF0	; 240
      bc:	08 00       	.word	0x0008	; ????
      be:	00 00       	nop
      c0:	be 92       	st	-X, r11
      c2:	24 49       	sbci	r18, 0x94	; 148
      c4:	12 3e       	cpi	r17, 0xE2	; 226
      c6:	ab aa       	std	Y+51, r10	; 0x33
      c8:	aa 2a       	or	r10, r26
      ca:	be cd       	rjmp	.-1156   	; 0xfffffc48 <__eeprom_end+0xff7efc48>
      cc:	cc cc       	rjmp	.-1640   	; 0xfffffa66 <__eeprom_end+0xff7efa66>
      ce:	4c 3e       	cpi	r20, 0xEC	; 236
      d0:	00 00       	nop
      d2:	00 80       	ld	r0, Z
      d4:	be ab       	std	Y+54, r27	; 0x36
      d6:	aa aa       	std	Y+50, r10	; 0x32
      d8:	aa 3e       	cpi	r26, 0xEA	; 234
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	bf 00       	.word	0x00bf	; ????
      e0:	00 00       	nop
      e2:	80 3f       	cpi	r24, 0xF0	; 240
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	00 08       	sbc	r0, r0
      ea:	41 78       	andi	r20, 0x81	; 129
      ec:	d3 bb       	out	0x13, r29	; 19
      ee:	43 87       	std	Z+11, r20	; 0x0b
      f0:	d1 13       	cpse	r29, r17
      f2:	3d 19       	sub	r19, r13
      f4:	0e 3c       	cpi	r16, 0xCE	; 206
      f6:	c3 bd       	out	0x23, r28	; 35
      f8:	42 82       	std	Z+2, r4	; 0x02
      fa:	ad 2b       	or	r26, r29
      fc:	3e 68       	ori	r19, 0x8E	; 142
      fe:	ec 82       	std	Y+4, r14	; 0x04
     100:	76 be       	out	0x36, r7	; 54
     102:	d9 8f       	std	Y+25, r29	; 0x19
     104:	e1 a9       	ldd	r30, Z+49	; 0x31
     106:	3e 4c       	sbci	r19, 0xCE	; 206
     108:	80 ef       	ldi	r24, 0xF0	; 240
     10a:	ff be       	out	0x3f, r15	; 63
     10c:	01 c4       	rjmp	.+2050   	; 0x910 <__stack+0x11>
     10e:	ff 7f       	andi	r31, 0xFF	; 255
     110:	3f 00       	.word	0x003f	; ????
     112:	00 00       	nop
	...

00000116 <__ctors_end>:
     116:	11 24       	eor	r1, r1
     118:	1f be       	out	0x3f, r1	; 63
     11a:	cf ef       	ldi	r28, 0xFF	; 255
     11c:	d8 e0       	ldi	r29, 0x08	; 8
     11e:	de bf       	out	0x3e, r29	; 62
     120:	cd bf       	out	0x3d, r28	; 61

00000122 <__do_copy_data>:
     122:	13 e0       	ldi	r17, 0x03	; 3
     124:	a0 e0       	ldi	r26, 0x00	; 0
     126:	b1 e0       	ldi	r27, 0x01	; 1
     128:	e2 e5       	ldi	r30, 0x52	; 82
     12a:	f8 e1       	ldi	r31, 0x18	; 24
     12c:	02 c0       	rjmp	.+4      	; 0x132 <__do_copy_data+0x10>
     12e:	05 90       	lpm	r0, Z+
     130:	0d 92       	st	X+, r0
     132:	a6 39       	cpi	r26, 0x96	; 150
     134:	b1 07       	cpc	r27, r17
     136:	d9 f7       	brne	.-10     	; 0x12e <__do_copy_data+0xc>

00000138 <__do_clear_bss>:
     138:	25 e0       	ldi	r18, 0x05	; 5
     13a:	a6 e9       	ldi	r26, 0x96	; 150
     13c:	b3 e0       	ldi	r27, 0x03	; 3
     13e:	01 c0       	rjmp	.+2      	; 0x142 <.do_clear_bss_start>

00000140 <.do_clear_bss_loop>:
     140:	1d 92       	st	X+, r1

00000142 <.do_clear_bss_start>:
     142:	a4 31       	cpi	r26, 0x14	; 20
     144:	b2 07       	cpc	r27, r18
     146:	e1 f7       	brne	.-8      	; 0x140 <.do_clear_bss_loop>
     148:	f8 d3       	rcall	.+2032   	; 0x93a <main>
     14a:	0c 94 27 0c 	jmp	0x184e	; 0x184e <_exit>

0000014e <__bad_interrupt>:
     14e:	58 cf       	rjmp	.-336    	; 0x0 <__vectors>

00000150 <usart_putchar>:
 * \param c The data to send.
 *
 * \return STATUS_OK
 */
status_code_t usart_putchar(USART_t *usart, uint8_t c)
{
     150:	fc 01       	movw	r30, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t *usart)
{
	return (usart)->UCSRnA & USART_DRE_bm;
     152:	90 81       	ld	r25, Z
	while (usart_data_register_is_empty(usart) == false) {
     154:	95 ff       	sbrs	r25, 5
     156:	fd cf       	rjmp	.-6      	; 0x152 <usart_putchar+0x2>
	}

	usart->UDR = c;
     158:	66 83       	std	Z+6, r22	; 0x06
	return STATUS_OK;
}
     15a:	80 e0       	ldi	r24, 0x00	; 0
     15c:	08 95       	ret

0000015e <usart_getchar>:
 * \param usart The USART module.
 *
 * \return The received data.
 */
uint8_t usart_getchar(USART_t *usart)
{
     15e:	fc 01       	movw	r30, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_rx_is_complete(USART_t *usart)
{
	return (usart)->UCSRnA & USART_RXC_bm;
     160:	90 81       	ld	r25, Z
	while (usart_rx_is_complete(usart) == false) {
     162:	99 23       	and	r25, r25
     164:	ec f7       	brge	.-6      	; 0x160 <usart_getchar+0x2>
	}

	return ((uint8_t)usart->UDR);
     166:	86 81       	ldd	r24, Z+6	; 0x06
}
     168:	08 95       	ret

0000016a <loadcell_min_max_tran>:
 *  Author: jan.rune.herheim
 */ 

#include "loadcell_logger.h"

uint8_t loadcell_min_max_tran(uint16_t current_value, uint16_t *data_array) {
     16a:	fb 01       	movw	r30, r22
	
	//find tran
	signed int tran = 0; //could go positive and negative, and could store a 15 bits number, hence enough for our 12 bits results.
	uint16_t tran_abs = 0;
	
	tran = current_value - *(data_array + POSITION_PREV); //tran = current - previous
     16c:	22 81       	ldd	r18, Z+2	; 0x02
     16e:	33 81       	ldd	r19, Z+3	; 0x03
     170:	ac 01       	movw	r20, r24
     172:	42 1b       	sub	r20, r18
     174:	53 0b       	sbc	r21, r19
     176:	9a 01       	movw	r18, r20
	if ((abs(tran) > abs(*(data_array+POSITION_TRAN_MAX))) & (*(data_array+POSITION_ACCU_CNT) > 0)) //first step is not valid due to only one value.
     178:	22 f4       	brpl	.+8      	; 0x182 <loadcell_min_max_tran+0x18>
     17a:	44 27       	eor	r20, r20
     17c:	55 27       	eor	r21, r21
     17e:	42 1b       	sub	r20, r18
     180:	53 0b       	sbc	r21, r19
     182:	62 85       	ldd	r22, Z+10	; 0x0a
     184:	73 85       	ldd	r23, Z+11	; 0x0b
     186:	77 23       	and	r23, r23
     188:	1c f4       	brge	.+6      	; 0x190 <loadcell_min_max_tran+0x26>
     18a:	71 95       	neg	r23
     18c:	61 95       	neg	r22
     18e:	71 09       	sbc	r23, r1
     190:	a1 e0       	ldi	r26, 0x01	; 1
     192:	64 17       	cp	r22, r20
     194:	75 07       	cpc	r23, r21
     196:	0c f0       	brlt	.+2      	; 0x19a <loadcell_min_max_tran+0x30>
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	aa 23       	and	r26, r26
     19c:	a1 f0       	breq	.+40     	; 0x1c6 <loadcell_min_max_tran+0x5c>
     19e:	61 e0       	ldi	r22, 0x01	; 1
     1a0:	a2 89       	ldd	r26, Z+18	; 0x12
     1a2:	b3 89       	ldd	r27, Z+19	; 0x13
     1a4:	ab 2b       	or	r26, r27
     1a6:	09 f4       	brne	.+2      	; 0x1aa <loadcell_min_max_tran+0x40>
     1a8:	60 e0       	ldi	r22, 0x00	; 0
     1aa:	66 23       	and	r22, r22
     1ac:	61 f0       	breq	.+24     	; 0x1c6 <loadcell_min_max_tran+0x5c>
	{
		if (tran < 0)
     1ae:	33 23       	and	r19, r19
     1b0:	44 f4       	brge	.+16     	; 0x1c2 <loadcell_min_max_tran+0x58>
		{
			tran_abs = abs(tran); //check if >2047, if yes this is the max limit that could be transferred.
     1b2:	9a 01       	movw	r18, r20
			if (tran_abs >= 0x7ff) //if yes the set to max value
     1b4:	2f 3f       	cpi	r18, 0xFF	; 255
     1b6:	57 e0       	ldi	r21, 0x07	; 7
     1b8:	35 07       	cpc	r19, r21
     1ba:	10 f0       	brcs	.+4      	; 0x1c0 <loadcell_min_max_tran+0x56>
			{
				tran_abs = 0x7ff;
     1bc:	2f ef       	ldi	r18, 0xFF	; 255
     1be:	37 e0       	ldi	r19, 0x07	; 7
			}
			tran_abs |= (1<<11); //flip the MSB of the 12 bits word to set the negative sign.
			tran = tran_abs;
     1c0:	38 60       	ori	r19, 0x08	; 8
		}
		
		*(data_array+POSITION_TRAN_MAX) = tran; //store new tran max.
     1c2:	33 87       	std	Z+11, r19	; 0x0b
     1c4:	22 87       	std	Z+10, r18	; 0x0a
	}
	
	//find min and max
	if (current_value < *(data_array+POSITION_MIN))
     1c6:	26 81       	ldd	r18, Z+6	; 0x06
     1c8:	37 81       	ldd	r19, Z+7	; 0x07
     1ca:	82 17       	cp	r24, r18
     1cc:	93 07       	cpc	r25, r19
     1ce:	10 f4       	brcc	.+4      	; 0x1d4 <loadcell_min_max_tran+0x6a>
	{
		*(data_array+POSITION_MIN) = current_value; //store new min value.
     1d0:	97 83       	std	Z+7, r25	; 0x07
     1d2:	86 83       	std	Z+6, r24	; 0x06
	}
	if (current_value > *(data_array+POSITION_MAX))
     1d4:	20 85       	ldd	r18, Z+8	; 0x08
     1d6:	31 85       	ldd	r19, Z+9	; 0x09
     1d8:	28 17       	cp	r18, r24
     1da:	39 07       	cpc	r19, r25
     1dc:	10 f4       	brcc	.+4      	; 0x1e2 <loadcell_min_max_tran+0x78>
	{
		*(data_array+POSITION_MAX) = current_value; //Store new max.
     1de:	91 87       	std	Z+9, r25	; 0x09
     1e0:	80 87       	std	Z+8, r24	; 0x08
	}
}
     1e2:	08 95       	ret

000001e4 <__portable_avr_delay_cycles>:
	}
	usart_tx_at(USART_RADIO, CTRL_Z);
	//if (tx_at_response(&m95_tx[2])) {/*status = 1; goto END;*/} //SPECIFIED TO ELEMENT 0 FIX!!!!!!
			
	END: return status;
}
     1e4:	04 c0       	rjmp	.+8      	; 0x1ee <__portable_avr_delay_cycles+0xa>
     1e6:	61 50       	subi	r22, 0x01	; 1
     1e8:	71 09       	sbc	r23, r1
     1ea:	81 09       	sbc	r24, r1
     1ec:	91 09       	sbc	r25, r1
     1ee:	61 15       	cp	r22, r1
     1f0:	71 05       	cpc	r23, r1
     1f2:	81 05       	cpc	r24, r1
     1f4:	91 05       	cpc	r25, r1
     1f6:	b9 f7       	brne	.-18     	; 0x1e6 <__portable_avr_delay_cycles+0x2>
     1f8:	08 95       	ret

000001fa <usart_tx_at>:
     1fa:	0f 93       	push	r16
     1fc:	1f 93       	push	r17
     1fe:	cf 93       	push	r28
     200:	df 93       	push	r29
     202:	eb 01       	movw	r28, r22
     204:	68 81       	ld	r22, Y
     206:	66 23       	and	r22, r22
     208:	39 f0       	breq	.+14     	; 0x218 <usart_tx_at+0x1e>
     20a:	8c 01       	movw	r16, r24
     20c:	21 96       	adiw	r28, 0x01	; 1
     20e:	c8 01       	movw	r24, r16
     210:	9f df       	rcall	.-194    	; 0x150 <usart_putchar>
     212:	69 91       	ld	r22, Y+
     214:	61 11       	cpse	r22, r1
     216:	fb cf       	rjmp	.-10     	; 0x20e <usart_tx_at+0x14>
     218:	df 91       	pop	r29
     21a:	cf 91       	pop	r28
     21c:	1f 91       	pop	r17
     21e:	0f 91       	pop	r16
     220:	08 95       	ret

00000222 <reset_tx_data>:
     222:	44 23       	and	r20, r20
     224:	61 f0       	breq	.+24     	; 0x23e <reset_tx_data+0x1c>
     226:	a6 2f       	mov	r26, r22
     228:	b7 2f       	mov	r27, r23
     22a:	e8 2f       	mov	r30, r24
     22c:	f9 2f       	mov	r31, r25
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	2d 91       	ld	r18, X+
     232:	3d 91       	ld	r19, X+
     234:	21 93       	st	Z+, r18
     236:	31 93       	st	Z+, r19
     238:	8f 5f       	subi	r24, 0xFF	; 255
     23a:	48 13       	cpse	r20, r24
     23c:	f9 cf       	rjmp	.-14     	; 0x230 <reset_tx_data+0xe>
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	08 95       	ret

00000242 <reset_char_array>:
     242:	66 23       	and	r22, r22
     244:	59 f0       	breq	.+22     	; 0x25c <reset_char_array+0x1a>
     246:	fc 01       	movw	r30, r24
     248:	61 50       	subi	r22, 0x01	; 1
     24a:	70 e0       	ldi	r23, 0x00	; 0
     24c:	6f 5f       	subi	r22, 0xFF	; 255
     24e:	7f 4f       	sbci	r23, 0xFF	; 255
     250:	86 0f       	add	r24, r22
     252:	97 1f       	adc	r25, r23
     254:	11 92       	st	Z+, r1
     256:	e8 17       	cp	r30, r24
     258:	f9 07       	cpc	r31, r25
     25a:	e1 f7       	brne	.-8      	; 0x254 <reset_char_array+0x12>
     25c:	08 95       	ret

0000025e <reset_all_data>:
     25e:	41 e1       	ldi	r20, 0x11	; 17
     260:	66 ec       	ldi	r22, 0xC6	; 198
     262:	72 e0       	ldi	r23, 0x02	; 2
     264:	82 ef       	ldi	r24, 0xF2	; 242
     266:	94 e0       	ldi	r25, 0x04	; 4
     268:	dc df       	rcall	.-72     	; 0x222 <reset_tx_data>
     26a:	64 e6       	ldi	r22, 0x64	; 100
     26c:	8c ef       	ldi	r24, 0xFC	; 252
     26e:	93 e0       	ldi	r25, 0x03	; 3
     270:	e8 df       	rcall	.-48     	; 0x242 <reset_char_array>
     272:	64 e6       	ldi	r22, 0x64	; 100
     274:	88 e9       	ldi	r24, 0x98	; 152
     276:	93 e0       	ldi	r25, 0x03	; 3
     278:	e4 cf       	rjmp	.-56     	; 0x242 <reset_char_array>
     27a:	08 95       	ret

0000027c <radio_power_on>:
     27c:	1f 93       	push	r17
     27e:	cf 93       	push	r28
     280:	df 93       	push	r29
     282:	5c 98       	cbi	0x0b, 4	; 11
     284:	67 ea       	ldi	r22, 0xA7	; 167
     286:	70 e0       	ldi	r23, 0x00	; 0
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	ab df       	rcall	.-170    	; 0x1e4 <__portable_avr_delay_cycles>
     28e:	5c 9a       	sbi	0x0b, 4	; 11
     290:	6b e1       	ldi	r22, 0x1B	; 27
     292:	71 e4       	ldi	r23, 0x41	; 65
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	a5 df       	rcall	.-182    	; 0x1e4 <__portable_avr_delay_cycles>
     29a:	5c 98       	cbi	0x0b, 4	; 11
     29c:	66 ed       	ldi	r22, 0xD6	; 214
     29e:	78 e0       	ldi	r23, 0x08	; 8
     2a0:	82 e0       	ldi	r24, 0x02	; 2
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	9f df       	rcall	.-194    	; 0x1e4 <__portable_avr_delay_cycles>
     2a6:	6b e6       	ldi	r22, 0x6B	; 107
     2a8:	74 e0       	ldi	r23, 0x04	; 4
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	9a df       	rcall	.-204    	; 0x1e4 <__portable_avr_delay_cycles>
     2b0:	5c 9a       	sbi	0x0b, 4	; 11
     2b2:	4d 99       	sbic	0x09, 5	; 9
     2b4:	16 c0       	rjmp	.+44     	; 0x2e2 <radio_power_on+0x66>
     2b6:	c0 e0       	ldi	r28, 0x00	; 0
     2b8:	d1 e0       	ldi	r29, 0x01	; 1
     2ba:	10 e0       	ldi	r17, 0x00	; 0
     2bc:	61 e5       	ldi	r22, 0x51	; 81
     2be:	73 ec       	ldi	r23, 0xC3	; 195
     2c0:	80 e0       	ldi	r24, 0x00	; 0
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	8f df       	rcall	.-226    	; 0x1e4 <__portable_avr_delay_cycles>
     2c6:	cf 5f       	subi	r28, 0xFF	; 255
     2c8:	89 b1       	in	r24, 0x09	; 9
     2ca:	85 fb       	bst	r24, 5
     2cc:	88 27       	eor	r24, r24
     2ce:	80 f9       	bld	r24, 0
     2d0:	8d 17       	cp	r24, r29
     2d2:	41 f0       	breq	.+16     	; 0x2e4 <radio_power_on+0x68>
     2d4:	8d 2f       	mov	r24, r29
     2d6:	cb 31       	cpi	r28, 0x1B	; 27
     2d8:	08 f0       	brcs	.+2      	; 0x2dc <radio_power_on+0x60>
     2da:	81 2f       	mov	r24, r17
     2dc:	81 11       	cpse	r24, r1
     2de:	ee cf       	rjmp	.-36     	; 0x2bc <radio_power_on+0x40>
     2e0:	01 c0       	rjmp	.+2      	; 0x2e4 <radio_power_on+0x68>
     2e2:	c0 e0       	ldi	r28, 0x00	; 0
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	cb 31       	cpi	r28, 0x1B	; 27
     2e8:	09 f0       	breq	.+2      	; 0x2ec <radio_power_on+0x70>
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	1f 91       	pop	r17
     2f2:	08 95       	ret

000002f4 <radio_power_down>:
     2f4:	5c 9a       	sbi	0x0b, 4	; 11
     2f6:	5c 98       	cbi	0x0b, 4	; 11
     2f8:	66 ed       	ldi	r22, 0xD6	; 214
     2fa:	78 e0       	ldi	r23, 0x08	; 8
     2fc:	82 e0       	ldi	r24, 0x02	; 2
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	71 df       	rcall	.-286    	; 0x1e4 <__portable_avr_delay_cycles>
     302:	5c 9a       	sbi	0x0b, 4	; 11
     304:	6b e0       	ldi	r22, 0x0B	; 11
     306:	7b e8       	ldi	r23, 0x8B	; 139
     308:	82 e0       	ldi	r24, 0x02	; 2
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	6b df       	rcall	.-298    	; 0x1e4 <__portable_avr_delay_cycles>
     30e:	89 b1       	in	r24, 0x09	; 9
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	08 95       	ret

00000314 <at_get_radio_network_time>:
     314:	ef 92       	push	r14
     316:	ff 92       	push	r15
     318:	0f 93       	push	r16
     31a:	1f 93       	push	r17
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	00 d0       	rcall	.+0      	; 0x322 <at_get_radio_network_time+0xe>
     322:	1f 92       	push	r1
     324:	cd b7       	in	r28, 0x3d	; 61
     326:	de b7       	in	r29, 0x3e	; 62
     328:	1a 82       	std	Y+2, r1	; 0x02
     32a:	19 82       	std	Y+1, r1	; 0x01
     32c:	1b 82       	std	Y+3, r1	; 0x03
     32e:	0f 2e       	mov	r0, r31
     330:	f5 e8       	ldi	r31, 0x85	; 133
     332:	ef 2e       	mov	r14, r31
     334:	f4 e0       	ldi	r31, 0x04	; 4
     336:	ff 2e       	mov	r15, r31
     338:	f0 2d       	mov	r31, r0
     33a:	0a e0       	ldi	r16, 0x0A	; 10
     33c:	10 e0       	ldi	r17, 0x00	; 0
     33e:	f7 01       	movw	r30, r14
     340:	31 97       	sbiw	r30, 0x01	; 1
     342:	80 81       	ld	r24, Z
     344:	89 83       	std	Y+1, r24	; 0x01
     346:	f7 01       	movw	r30, r14
     348:	80 81       	ld	r24, Z
     34a:	8a 83       	std	Y+2, r24	; 0x02
     34c:	ce 01       	movw	r24, r28
     34e:	01 96       	adiw	r24, 0x01	; 1
     350:	0e 94 97 0b 	call	0x172e	; 0x172e <atoi>
     354:	f8 01       	movw	r30, r16
     356:	ee 0f       	add	r30, r30
     358:	ff 1f       	adc	r31, r31
     35a:	ee 50       	subi	r30, 0x0E	; 14
     35c:	fb 4f       	sbci	r31, 0xFB	; 251
     35e:	91 83       	std	Z+1, r25	; 0x01
     360:	80 83       	st	Z, r24
     362:	f3 e0       	ldi	r31, 0x03	; 3
     364:	ef 0e       	add	r14, r31
     366:	f1 1c       	adc	r15, r1
     368:	0f 5f       	subi	r16, 0xFF	; 255
     36a:	1f 4f       	sbci	r17, 0xFF	; 255
     36c:	00 31       	cpi	r16, 0x10	; 16
     36e:	11 05       	cpc	r17, r1
     370:	31 f7       	brne	.-52     	; 0x33e <at_get_radio_network_time+0x2a>
     372:	0f 90       	pop	r0
     374:	0f 90       	pop	r0
     376:	0f 90       	pop	r0
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	1f 91       	pop	r17
     37e:	0f 91       	pop	r16
     380:	ff 90       	pop	r15
     382:	ef 90       	pop	r14
     384:	08 95       	ret

00000386 <tx_at_response>:
     386:	ff 92       	push	r15
     388:	0f 93       	push	r16
     38a:	1f 93       	push	r17
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	ec 01       	movw	r28, r24
     392:	88 85       	ldd	r24, Y+8	; 0x08
     394:	88 23       	and	r24, r24
     396:	09 f4       	brne	.+2      	; 0x39a <tx_at_response+0x14>
     398:	6a c0       	rjmp	.+212    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     39a:	00 e0       	ldi	r16, 0x00	; 0
     39c:	f1 2c       	mov	r15, r1
     39e:	11 e0       	ldi	r17, 0x01	; 1
     3a0:	60 e8       	ldi	r22, 0x80	; 128
     3a2:	82 e7       	ldi	r24, 0x72	; 114
     3a4:	94 e0       	ldi	r25, 0x04	; 4
     3a6:	4d df       	rcall	.-358    	; 0x242 <reset_char_array>
     3a8:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <response_counter>
     3ac:	8c 81       	ldd	r24, Y+4	; 0x04
     3ae:	9d 81       	ldd	r25, Y+5	; 0x05
     3b0:	ae 81       	ldd	r26, Y+6	; 0x06
     3b2:	bf 81       	ldd	r27, Y+7	; 0x07
     3b4:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <response_timeout>
     3b8:	90 93 6a 04 	sts	0x046A, r25	; 0x80046a <response_timeout+0x1>
     3bc:	a0 93 6b 04 	sts	0x046B, r26	; 0x80046b <response_timeout+0x2>
     3c0:	b0 93 6c 04 	sts	0x046C, r27	; 0x80046c <response_timeout+0x3>
     3c4:	10 92 65 04 	sts	0x0465, r1	; 0x800465 <response_timeout_counter>
     3c8:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <response_timeout_counter+0x1>
     3cc:	10 92 67 04 	sts	0x0467, r1	; 0x800467 <response_timeout_counter+0x2>
     3d0:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <response_timeout_counter+0x3>
     3d4:	68 81       	ld	r22, Y
     3d6:	79 81       	ldd	r23, Y+1	; 0x01
     3d8:	80 ec       	ldi	r24, 0xC0	; 192
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	0e df       	rcall	.-484    	; 0x1fa <usart_tx_at>
     3de:	78 94       	sei
     3e0:	e0 ec       	ldi	r30, 0xC0	; 192
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	81 81       	ldd	r24, Z+1	; 0x01
     3e6:	80 68       	ori	r24, 0x80	; 128
     3e8:	81 83       	std	Z+1, r24	; 0x01
     3ea:	21 c0       	rjmp	.+66     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     3ec:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <response_timeout_counter>
     3f0:	90 91 66 04 	lds	r25, 0x0466	; 0x800466 <response_timeout_counter+0x1>
     3f4:	a0 91 67 04 	lds	r26, 0x0467	; 0x800467 <response_timeout_counter+0x2>
     3f8:	b0 91 68 04 	lds	r27, 0x0468	; 0x800468 <response_timeout_counter+0x3>
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	a1 1d       	adc	r26, r1
     400:	b1 1d       	adc	r27, r1
     402:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <response_timeout_counter>
     406:	90 93 66 04 	sts	0x0466, r25	; 0x800466 <response_timeout_counter+0x1>
     40a:	a0 93 67 04 	sts	0x0467, r26	; 0x800467 <response_timeout_counter+0x2>
     40e:	b0 93 68 04 	sts	0x0468, r27	; 0x800468 <response_timeout_counter+0x3>
     412:	61 e0       	ldi	r22, 0x01	; 1
     414:	70 e0       	ldi	r23, 0x00	; 0
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	e4 de       	rcall	.-568    	; 0x1e4 <__portable_avr_delay_cycles>
     41c:	6a 81       	ldd	r22, Y+2	; 0x02
     41e:	7b 81       	ldd	r23, Y+3	; 0x03
     420:	82 e7       	ldi	r24, 0x72	; 114
     422:	94 e0       	ldi	r25, 0x04	; 4
     424:	0e 94 c8 0b 	call	0x1790	; 0x1790 <strstr>
     428:	f1 2e       	mov	r15, r17
     42a:	89 2b       	or	r24, r25
     42c:	11 f5       	brne	.+68     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     42e:	40 91 65 04 	lds	r20, 0x0465	; 0x800465 <response_timeout_counter>
     432:	50 91 66 04 	lds	r21, 0x0466	; 0x800466 <response_timeout_counter+0x1>
     436:	60 91 67 04 	lds	r22, 0x0467	; 0x800467 <response_timeout_counter+0x2>
     43a:	70 91 68 04 	lds	r23, 0x0468	; 0x800468 <response_timeout_counter+0x3>
     43e:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <response_timeout>
     442:	90 91 6a 04 	lds	r25, 0x046A	; 0x80046a <response_timeout+0x1>
     446:	a0 91 6b 04 	lds	r26, 0x046B	; 0x80046b <response_timeout+0x2>
     44a:	b0 91 6c 04 	lds	r27, 0x046C	; 0x80046c <response_timeout+0x3>
     44e:	48 17       	cp	r20, r24
     450:	59 07       	cpc	r21, r25
     452:	6a 07       	cpc	r22, r26
     454:	7b 07       	cpc	r23, r27
     456:	50 f2       	brcs	.-108    	; 0x3ec <tx_at_response+0x66>
     458:	61 e5       	ldi	r22, 0x51	; 81
     45a:	73 ec       	ldi	r23, 0xC3	; 195
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	c1 de       	rcall	.-638    	; 0x1e4 <__portable_avr_delay_cycles>
     462:	0f 5f       	subi	r16, 0xFF	; 255
     464:	88 85       	ldd	r24, Y+8	; 0x08
     466:	08 17       	cp	r16, r24
     468:	08 f4       	brcc	.+2      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     46a:	9a cf       	rjmp	.-204    	; 0x3a0 <tx_at_response+0x1a>
     46c:	03 c0       	rjmp	.+6      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     46e:	f1 2c       	mov	r15, r1
     470:	01 c0       	rjmp	.+2      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     472:	f1 2c       	mov	r15, r1
     474:	e0 ec       	ldi	r30, 0xC0	; 192
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	81 81       	ldd	r24, Z+1	; 0x01
     47a:	8f 77       	andi	r24, 0x7F	; 127
     47c:	81 83       	std	Z+1, r24	; 0x01
     47e:	62 e7       	ldi	r22, 0x72	; 114
     480:	74 e0       	ldi	r23, 0x04	; 4
     482:	88 ec       	ldi	r24, 0xC8	; 200
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	b9 de       	rcall	.-654    	; 0x1fa <usart_tx_at>
     488:	8f 2d       	mov	r24, r15
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	1f 91       	pop	r17
     490:	0f 91       	pop	r16
     492:	ff 90       	pop	r15
     494:	08 95       	ret

00000496 <data_to_char>:
     496:	2f 92       	push	r2
     498:	3f 92       	push	r3
     49a:	4f 92       	push	r4
     49c:	5f 92       	push	r5
     49e:	6f 92       	push	r6
     4a0:	7f 92       	push	r7
     4a2:	8f 92       	push	r8
     4a4:	9f 92       	push	r9
     4a6:	af 92       	push	r10
     4a8:	bf 92       	push	r11
     4aa:	cf 92       	push	r12
     4ac:	df 92       	push	r13
     4ae:	ef 92       	push	r14
     4b0:	ff 92       	push	r15
     4b2:	0f 93       	push	r16
     4b4:	1f 93       	push	r17
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
     4ba:	cd b7       	in	r28, 0x3d	; 61
     4bc:	de b7       	in	r29, 0x3e	; 62
     4be:	63 97       	sbiw	r28, 0x13	; 19
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	f8 94       	cli
     4c4:	de bf       	out	0x3e, r29	; 62
     4c6:	0f be       	out	0x3f, r0	; 63
     4c8:	cd bf       	out	0x3d, r28	; 61
     4ca:	9b 8b       	std	Y+19, r25	; 0x13
     4cc:	8a 8b       	std	Y+18, r24	; 0x12
     4ce:	3f 87       	std	Y+15, r19	; 0x0f
     4d0:	2e 87       	std	Y+14, r18	; 0x0e
     4d2:	1a 82       	std	Y+2, r1	; 0x02
     4d4:	19 82       	std	Y+1, r1	; 0x01
     4d6:	fe 01       	movw	r30, r28
     4d8:	33 96       	adiw	r30, 0x03	; 3
     4da:	83 e0       	ldi	r24, 0x03	; 3
     4dc:	df 01       	movw	r26, r30
     4de:	1d 92       	st	X+, r1
     4e0:	8a 95       	dec	r24
     4e2:	e9 f7       	brne	.-6      	; 0x4de <data_to_char+0x48>
     4e4:	aa 88       	ldd	r10, Y+18	; 0x12
     4e6:	bb 88       	ldd	r11, Y+19	; 0x13
     4e8:	15 01       	movw	r2, r10
     4ea:	b4 e1       	ldi	r27, 0x14	; 20
     4ec:	2b 0e       	add	r2, r27
     4ee:	31 1c       	adc	r3, r1
     4f0:	8e 85       	ldd	r24, Y+14	; 0x0e
     4f2:	9f 85       	ldd	r25, Y+15	; 0x0f
     4f4:	09 2e       	mov	r0, r25
     4f6:	00 0c       	add	r0, r0
     4f8:	aa 0b       	sbc	r26, r26
     4fa:	bb 0b       	sbc	r27, r27
     4fc:	8a 87       	std	Y+10, r24	; 0x0a
     4fe:	9b 87       	std	Y+11, r25	; 0x0b
     500:	ac 87       	std	Y+12, r26	; 0x0c
     502:	bd 87       	std	Y+13, r27	; 0x0d
     504:	39 8a       	std	Y+17, r3	; 0x11
     506:	28 8a       	std	Y+16, r2	; 0x10
     508:	6a 01       	movw	r12, r20
     50a:	68 c0       	rjmp	.+208    	; 0x5dc <data_to_char+0x146>
     50c:	e9 2c       	mov	r14, r9
     50e:	f3 2c       	mov	r15, r3
     510:	6a 85       	ldd	r22, Y+10	; 0x0a
     512:	7b 85       	ldd	r23, Y+11	; 0x0b
     514:	8c 85       	ldd	r24, Y+12	; 0x0c
     516:	9d 85       	ldd	r25, Y+13	; 0x0d
     518:	99 d5       	rcall	.+2866   	; 0x104c <__floatsisf>
     51a:	2b 01       	movw	r4, r22
     51c:	3c 01       	movw	r6, r24
     51e:	b8 01       	movw	r22, r16
     520:	01 2e       	mov	r0, r17
     522:	00 0c       	add	r0, r0
     524:	88 0b       	sbc	r24, r24
     526:	99 0b       	sbc	r25, r25
     528:	91 d5       	rcall	.+2850   	; 0x104c <__floatsisf>
     52a:	9b 01       	movw	r18, r22
     52c:	ac 01       	movw	r20, r24
     52e:	c3 01       	movw	r24, r6
     530:	b2 01       	movw	r22, r4
     532:	ef d5       	rcall	.+3038   	; 0x1112 <pow>
     534:	6e 83       	std	Y+6, r22	; 0x06
     536:	7f 83       	std	Y+7, r23	; 0x07
     538:	88 87       	std	Y+8, r24	; 0x08
     53a:	99 87       	std	Y+9, r25	; 0x09
     53c:	d5 01       	movw	r26, r10
     53e:	6d 91       	ld	r22, X+
     540:	7c 91       	ld	r23, X
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	80 d5       	rcall	.+2816   	; 0x1048 <__floatunsisf>
     548:	2e 81       	ldd	r18, Y+6	; 0x06
     54a:	3f 81       	ldd	r19, Y+7	; 0x07
     54c:	48 85       	ldd	r20, Y+8	; 0x08
     54e:	59 85       	ldd	r21, Y+9	; 0x09
     550:	77 d5       	rcall	.+2798   	; 0x1040 <__cmpsf2>
     552:	88 23       	and	r24, r24
     554:	4c f4       	brge	.+18     	; 0x568 <data_to_char+0xd2>
     556:	f6 01       	movw	r30, r12
     558:	01 90       	ld	r0, Z+
     55a:	00 20       	and	r0, r0
     55c:	e9 f7       	brne	.-6      	; 0x558 <data_to_char+0xc2>
     55e:	31 97       	sbiw	r30, 0x01	; 1
     560:	80 e3       	ldi	r24, 0x30	; 48
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	91 83       	std	Z+1, r25	; 0x01
     566:	80 83       	st	Z, r24
     568:	01 50       	subi	r16, 0x01	; 1
     56a:	11 09       	sbc	r17, r1
     56c:	79 f6       	brne	.-98     	; 0x50c <data_to_char+0x76>
     56e:	92 e0       	ldi	r25, 0x02	; 2
     570:	a9 0e       	add	r10, r25
     572:	b1 1c       	adc	r11, r1
     574:	4e 85       	ldd	r20, Y+14	; 0x0e
     576:	5f 85       	ldd	r21, Y+15	; 0x0f
     578:	be 01       	movw	r22, r28
     57a:	6f 5f       	subi	r22, 0xFF	; 255
     57c:	7f 4f       	sbci	r23, 0xFF	; 255
     57e:	d7 01       	movw	r26, r14
     580:	8d 91       	ld	r24, X+
     582:	9c 91       	ld	r25, X
     584:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <itoa>
     588:	be 01       	movw	r22, r28
     58a:	6f 5f       	subi	r22, 0xFF	; 255
     58c:	7f 4f       	sbci	r23, 0xFF	; 255
     58e:	c6 01       	movw	r24, r12
     590:	0e 94 bd 0b 	call	0x177a	; 0x177a <strcat>
     594:	f6 01       	movw	r30, r12
     596:	01 90       	ld	r0, Z+
     598:	00 20       	and	r0, r0
     59a:	e9 f7       	brne	.-6      	; 0x596 <data_to_char+0x100>
     59c:	31 97       	sbiw	r30, 0x01	; 1
     59e:	8c e2       	ldi	r24, 0x2C	; 44
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	91 83       	std	Z+1, r25	; 0x01
     5a4:	80 83       	st	Z, r24
     5a6:	65 e0       	ldi	r22, 0x05	; 5
     5a8:	ce 01       	movw	r24, r28
     5aa:	01 96       	adiw	r24, 0x01	; 1
     5ac:	4a de       	rcall	.-876    	; 0x242 <reset_char_array>
     5ae:	a8 89       	ldd	r26, Y+16	; 0x10
     5b0:	b9 89       	ldd	r27, Y+17	; 0x11
     5b2:	aa 16       	cp	r10, r26
     5b4:	bb 06       	cpc	r11, r27
     5b6:	91 f4       	brne	.+36     	; 0x5dc <data_to_char+0x146>
     5b8:	1d 01       	movw	r2, r26
     5ba:	46 01       	movw	r8, r12
     5bc:	ea 88       	ldd	r14, Y+18	; 0x12
     5be:	fb 88       	ldd	r15, Y+19	; 0x13
     5c0:	b2 e2       	ldi	r27, 0x22	; 34
     5c2:	eb 0e       	add	r14, r27
     5c4:	f1 1c       	adc	r15, r1
     5c6:	0f 2e       	mov	r0, r31
     5c8:	f0 e3       	ldi	r31, 0x30	; 48
     5ca:	af 2e       	mov	r10, r31
     5cc:	b1 2c       	mov	r11, r1
     5ce:	f0 2d       	mov	r31, r0
     5d0:	0f 2e       	mov	r0, r31
     5d2:	fc e2       	ldi	r31, 0x2C	; 44
     5d4:	cf 2e       	mov	r12, r31
     5d6:	d1 2c       	mov	r13, r1
     5d8:	f0 2d       	mov	r31, r0
     5da:	2d c0       	rjmp	.+90     	; 0x636 <data_to_char+0x1a0>
     5dc:	03 e0       	ldi	r16, 0x03	; 3
     5de:	10 e0       	ldi	r17, 0x00	; 0
     5e0:	9a 2c       	mov	r9, r10
     5e2:	3b 2c       	mov	r3, r11
     5e4:	93 cf       	rjmp	.-218    	; 0x50c <data_to_char+0x76>
     5e6:	f4 01       	movw	r30, r8
     5e8:	01 90       	ld	r0, Z+
     5ea:	00 20       	and	r0, r0
     5ec:	e9 f7       	brne	.-6      	; 0x5e8 <data_to_char+0x152>
     5ee:	31 97       	sbiw	r30, 0x01	; 1
     5f0:	b1 82       	std	Z+1, r11	; 0x01
     5f2:	a0 82       	st	Z, r10
     5f4:	e2 e0       	ldi	r30, 0x02	; 2
     5f6:	2e 0e       	add	r2, r30
     5f8:	31 1c       	adc	r3, r1
     5fa:	4e 85       	ldd	r20, Y+14	; 0x0e
     5fc:	5f 85       	ldd	r21, Y+15	; 0x0f
     5fe:	be 01       	movw	r22, r28
     600:	6f 5f       	subi	r22, 0xFF	; 255
     602:	7f 4f       	sbci	r23, 0xFF	; 255
     604:	d8 01       	movw	r26, r16
     606:	8d 91       	ld	r24, X+
     608:	9c 91       	ld	r25, X
     60a:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <itoa>
     60e:	be 01       	movw	r22, r28
     610:	6f 5f       	subi	r22, 0xFF	; 255
     612:	7f 4f       	sbci	r23, 0xFF	; 255
     614:	c4 01       	movw	r24, r8
     616:	0e 94 bd 0b 	call	0x177a	; 0x177a <strcat>
     61a:	f4 01       	movw	r30, r8
     61c:	01 90       	ld	r0, Z+
     61e:	00 20       	and	r0, r0
     620:	e9 f7       	brne	.-6      	; 0x61c <data_to_char+0x186>
     622:	31 97       	sbiw	r30, 0x01	; 1
     624:	d1 82       	std	Z+1, r13	; 0x01
     626:	c0 82       	st	Z, r12
     628:	65 e0       	ldi	r22, 0x05	; 5
     62a:	ce 01       	movw	r24, r28
     62c:	01 96       	adiw	r24, 0x01	; 1
     62e:	09 de       	rcall	.-1006   	; 0x242 <reset_char_array>
     630:	e2 14       	cp	r14, r2
     632:	f3 04       	cpc	r15, r3
     634:	79 f0       	breq	.+30     	; 0x654 <data_to_char+0x1be>
     636:	81 01       	movw	r16, r2
     638:	f1 01       	movw	r30, r2
     63a:	60 81       	ld	r22, Z
     63c:	71 81       	ldd	r23, Z+1	; 0x01
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	02 d5       	rcall	.+2564   	; 0x1048 <__floatunsisf>
     644:	9b 01       	movw	r18, r22
     646:	ac 01       	movw	r20, r24
     648:	c3 01       	movw	r24, r6
     64a:	b2 01       	movw	r22, r4
     64c:	5e d5       	rcall	.+2748   	; 0x110a <__gesf2>
     64e:	18 16       	cp	r1, r24
     650:	8c f6       	brge	.-94     	; 0x5f4 <data_to_char+0x15e>
     652:	c9 cf       	rjmp	.-110    	; 0x5e6 <data_to_char+0x150>
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	63 96       	adiw	r28, 0x13	; 19
     658:	0f b6       	in	r0, 0x3f	; 63
     65a:	f8 94       	cli
     65c:	de bf       	out	0x3e, r29	; 62
     65e:	0f be       	out	0x3f, r0	; 63
     660:	cd bf       	out	0x3d, r28	; 61
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	1f 91       	pop	r17
     668:	0f 91       	pop	r16
     66a:	ff 90       	pop	r15
     66c:	ef 90       	pop	r14
     66e:	df 90       	pop	r13
     670:	cf 90       	pop	r12
     672:	bf 90       	pop	r11
     674:	af 90       	pop	r10
     676:	9f 90       	pop	r9
     678:	8f 90       	pop	r8
     67a:	7f 90       	pop	r7
     67c:	6f 90       	pop	r6
     67e:	5f 90       	pop	r5
     680:	4f 90       	pop	r4
     682:	3f 90       	pop	r3
     684:	2f 90       	pop	r2
     686:	08 95       	ret

00000688 <at_rf_connect>:
     688:	0f 93       	push	r16
     68a:	1f 93       	push	r17
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	ca ef       	ldi	r28, 0xFA	; 250
     692:	d2 e0       	ldi	r29, 0x02	; 2
     694:	08 e7       	ldi	r16, 0x78	; 120
     696:	13 e0       	ldi	r17, 0x03	; 3
     698:	ce 01       	movw	r24, r28
     69a:	75 de       	rcall	.-790    	; 0x386 <tx_at_response>
     69c:	29 96       	adiw	r28, 0x09	; 9
     69e:	c0 17       	cp	r28, r16
     6a0:	d1 07       	cpc	r29, r17
     6a2:	d1 f7       	brne	.-12     	; 0x698 <at_rf_connect+0x10>
     6a4:	88 e7       	ldi	r24, 0x78	; 120
     6a6:	93 e0       	ldi	r25, 0x03	; 3
     6a8:	6e de       	rcall	.-804    	; 0x386 <tx_at_response>
     6aa:	81 11       	cpse	r24, r1
     6ac:	03 c0       	rjmp	.+6      	; 0x6b4 <at_rf_connect+0x2c>
     6ae:	32 de       	rcall	.-924    	; 0x314 <at_get_radio_network_time>
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	01 c0       	rjmp	.+2      	; 0x6b6 <at_rf_connect+0x2e>
     6b4:	80 e2       	ldi	r24, 0x20	; 32
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	1f 91       	pop	r17
     6bc:	0f 91       	pop	r16
     6be:	08 95       	ret

000006c0 <at_rf_disconnect>:
     6c0:	88 ee       	ldi	r24, 0xE8	; 232
     6c2:	92 e0       	ldi	r25, 0x02	; 2
     6c4:	60 de       	rcall	.-832    	; 0x386 <tx_at_response>
     6c6:	81 ef       	ldi	r24, 0xF1	; 241
     6c8:	92 e0       	ldi	r25, 0x02	; 2
     6ca:	5d de       	rcall	.-838    	; 0x386 <tx_at_response>
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	08 95       	ret

000006d0 <__vector_20>:

ISR(USART0_RX_vect)
{
     6d0:	1f 92       	push	r1
     6d2:	0f 92       	push	r0
     6d4:	0f b6       	in	r0, 0x3f	; 63
     6d6:	0f 92       	push	r0
     6d8:	11 24       	eor	r1, r1
     6da:	2f 93       	push	r18
     6dc:	3f 93       	push	r19
     6de:	4f 93       	push	r20
     6e0:	5f 93       	push	r21
     6e2:	6f 93       	push	r22
     6e4:	7f 93       	push	r23
     6e6:	8f 93       	push	r24
     6e8:	9f 93       	push	r25
     6ea:	af 93       	push	r26
     6ec:	bf 93       	push	r27
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	ef 93       	push	r30
     6f4:	ff 93       	push	r31
	*(response + response_counter) = usart_getchar(USART_RADIO);
     6f6:	c0 91 6d 04 	lds	r28, 0x046D	; 0x80046d <response_counter>
     6fa:	d0 e0       	ldi	r29, 0x00	; 0
     6fc:	ce 58       	subi	r28, 0x8E	; 142
     6fe:	db 4f       	sbci	r29, 0xFB	; 251
     700:	80 ec       	ldi	r24, 0xC0	; 192
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	2c dd       	rcall	.-1448   	; 0x15e <usart_getchar>
     706:	88 83       	st	Y, r24
	response_counter++;
     708:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <response_counter>
     70c:	8f 5f       	subi	r24, 0xFF	; 255
     70e:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <response_counter>
	response_timeout_counter = 0; //reset global timeout counter for each byte read. Could ideally be lower for 20 seconds timeout commands. FIX!!!!!
     712:	10 92 65 04 	sts	0x0465, r1	; 0x800465 <response_timeout_counter>
     716:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <response_timeout_counter+0x1>
     71a:	10 92 67 04 	sts	0x0467, r1	; 0x800467 <response_timeout_counter+0x2>
     71e:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <response_timeout_counter+0x3>
}
     722:	ff 91       	pop	r31
     724:	ef 91       	pop	r30
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	bf 91       	pop	r27
     72c:	af 91       	pop	r26
     72e:	9f 91       	pop	r25
     730:	8f 91       	pop	r24
     732:	7f 91       	pop	r23
     734:	6f 91       	pop	r22
     736:	5f 91       	pop	r21
     738:	4f 91       	pop	r20
     73a:	3f 91       	pop	r19
     73c:	2f 91       	pop	r18
     73e:	0f 90       	pop	r0
     740:	0f be       	out	0x3f, r0	; 63
     742:	0f 90       	pop	r0
     744:	1f 90       	pop	r1
     746:	18 95       	reti

00000748 <main_function>:

//ISR(WDT_vect)
void main_function()
{
     748:	7f 92       	push	r7
     74a:	8f 92       	push	r8
     74c:	9f 92       	push	r9
     74e:	af 92       	push	r10
     750:	bf 92       	push	r11
     752:	cf 92       	push	r12
     754:	df 92       	push	r13
     756:	ef 92       	push	r14
     758:	ff 92       	push	r15
     75a:	0f 93       	push	r16
     75c:	1f 93       	push	r17
     75e:	cf 93       	push	r28
     760:	df 93       	push	r29
		led_blink(50); //DEBUG
	#endif // DEBUG
	
	//MEGA SPECIFIC LONG TIME RTC FUNCTION
	wdt_counter++; //increment counter 
	if (wdt_counter < SAMPLING_TIME)
     762:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     766:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     76a:	01 96       	adiw	r24, 0x01	; 1
     76c:	29 f4       	brne	.+10     	; 0x778 <main_function+0x30>
	#ifdef DEBUG
		led_blink(50); //DEBUG
	#endif // DEBUG
	
	//MEGA SPECIFIC LONG TIME RTC FUNCTION
	wdt_counter++; //increment counter 
     76e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
     772:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
     776:	d2 c0       	rjmp	.+420    	; 0x91c <__stack+0x1d>
	if (wdt_counter < SAMPLING_TIME)
	{
		goto END; //BREAK ISR IF TRANSMIT 
	} else {wdt_counter = 0;}
     778:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
     77c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	//////////////////////////////////////////////////////////////////////////
	
	RTC_ISR_ACTIVE = 1;
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <RTC_ISR_ACTIVE>
				controller_next_state = READ_EXT_DATA;
				RTC_ISR_ACTIVE = 0; //FINISHED, break LOOP!
				break;
			
			default:
				controller_next_state = RESET_REGISTERS; //TRY RESET.
     786:	1b e0       	ldi	r17, 0x0B	; 11
				controller_next_state = RF_DISCONNECT;
				break;
			
			case RF_DISCONNECT:
				at_rf_disconnect(); //Disconnect
				controller_next_state = RF_POWER_OFF;
     788:	0f 2e       	mov	r0, r31
     78a:	fa e0       	ldi	r31, 0x0A	; 10
     78c:	8f 2e       	mov	r8, r31
     78e:	f0 2d       	mov	r31, r0
				//tx(&tx_data_package, transfer_data_length_package); //transmit package. GENERATE STATUS FROM THIS.
				controller_next_state = RX_DATA;
				break;
			
			case RX_DATA:
				controller_next_state = RF_DISCONNECT;
     790:	0f 2e       	mov	r0, r31
     792:	f9 e0       	ldi	r31, 0x09	; 9
     794:	9f 2e       	mov	r9, r31
     796:	f0 2d       	mov	r31, r0
				controller_next_state = TX_DATA;
				break;
			
			case TX_DATA:
				//tx(&tx_data_package, transfer_data_length_package); //transmit package. GENERATE STATUS FROM THIS.
				controller_next_state = RX_DATA;
     798:	68 94       	set
     79a:	aa 24       	eor	r10, r10
     79c:	a3 f8       	bld	r10, 3
	// 				char mystring[5] = "";
	// 				itoa(transfer_data_length_package, package_lenght, 10);
	// 				strcpy(mystring, package_lenght);
	// 				usart_tx_at(USART_TERMINAL, mystring);
				#endif // DEBUG
				controller_next_state = TX_DATA;
     79e:	0f 2e       	mov	r0, r31
     7a0:	f7 e0       	ldi	r31, 0x07	; 7
     7a2:	bf 2e       	mov	r11, r31
     7a4:	f0 2d       	mov	r31, r0
			{
// 				tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_CONNECT); //set failure status
// 				controller_next_state = RF_DISCONNECT; //if failure go to disconnect
// 				break;
			}
			controller_next_state = GENERATE_PACKAGE;
     7a6:	0f 2e       	mov	r0, r31
     7a8:	f6 e0       	ldi	r31, 0x06	; 6
     7aa:	cf 2e       	mov	r12, r31
     7ac:	f0 2d       	mov	r31, r0
// 				{
// 	// 				tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_POWER_ON); //set failure status
// 	// 				controller_next_state = RF_POWER_OFF; //if failure go to power off
// 	// 				break;
// 				}
			controller_next_state = RF_CONNECT;
     7ae:	0f 2e       	mov	r0, r31
     7b0:	f5 e0       	ldi	r31, 0x05	; 5
     7b2:	df 2e       	mov	r13, r31
     7b4:	f0 2d       	mov	r31, r0
				controller_next_state = STORE_EXT_MEM;
				break;
			
			case STORE_EXT_MEM:
				tx_data[POSITION_TIME] = 0; //reset accumulation counter if something???????????????
				controller_next_state = RF_POWER_ON;
     7b6:	68 94       	set
     7b8:	ee 24       	eor	r14, r14
     7ba:	e2 f8       	bld	r14, 2
				
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				tx_data[POSITION_AVG] = controller_calc_avg(accu_data, tx_data[POSITION_TIME]); //calc and store average.
				accu_data = 0; //reset parameters
				///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				controller_next_state = STORE_EXT_MEM;
     7bc:	0f 2e       	mov	r0, r31
     7be:	f3 e0       	ldi	r31, 0x03	; 3
     7c0:	ff 2e       	mov	r15, r31
     7c2:	f0 2d       	mov	r31, r0
				tx_data[POSITION_TIME] = transmit_counter; //increase timestamp counter.
			
				if (tx_data[POSITION_TIME] >= (TRANSMIT_RATE/WAKEUP_RATE)) //if accumulation limit is reached.
				{
					transmit_counter = 0; //reset counter
					controller_next_state = CALC; //limit reached, go to next
     7c4:	68 94       	set
     7c6:	77 24       	eor	r7, r7
     7c8:	71 f8       	bld	r7, 1
// 				uint16_t ext_data = (response[0] << 8) | response[1]; //convert response to bytes and store in data registers
// 				//This position needs to be specified for each use case dependent on available registers.
// 				tx_data[POSITION_DIO] = ext_data;
// 				//////////////////////////////////////////////////////////////////////////
				
				controller_next_state = MEASURE;
     7ca:	01 e0       	ldi	r16, 0x01	; 1
	
	RTC_ISR_ACTIVE = 1;
	while (RTC_ISR_ACTIVE == 1)
	{
		
		switch(controller_state) {
     7cc:	e0 91 71 04 	lds	r30, 0x0471	; 0x800471 <controller_state>
     7d0:	8e 2f       	mov	r24, r30
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	8c 30       	cpi	r24, 0x0C	; 12
     7d6:	91 05       	cpc	r25, r1
     7d8:	08 f0       	brcs	.+2      	; 0x7dc <main_function+0x94>
     7da:	95 c0       	rjmp	.+298    	; 0x906 <__stack+0x7>
     7dc:	fc 01       	movw	r30, r24
     7de:	e2 5c       	subi	r30, 0xC2	; 194
     7e0:	ff 4f       	sbci	r31, 0xFF	; 255
     7e2:	9f c7       	rjmp	.+3902   	; 0x1722 <__tablejump2__>
// 				uint16_t ext_data = (response[0] << 8) | response[1]; //convert response to bytes and store in data registers
// 				//This position needs to be specified for each use case dependent on available registers.
// 				tx_data[POSITION_DIO] = ext_data;
// 				//////////////////////////////////////////////////////////////////////////
				
				controller_next_state = MEASURE;
     7e4:	00 93 70 04 	sts	0x0470, r16	; 0x800470 <controller_next_state>
				//controller_next_state = RF_CONNECT; //DEBUG
				break;
     7e8:	90 c0       	rjmp	.+288    	; 0x90a <__stack+0xb>
// 				tx_data[POSITION_ANA5] = adc_result_average(ADC_MUX_ADC5, ADC_NUM_AVG); //
// 				//tx_data[POSITION_TEMP] = adc_result_average(ADC_MUX_TEMPSENSE, 1); //PIN CHANGE HAVE NO EFFECT ON ADCB
// 				tx_data[POSITION_VDD] = adc_result_average(ADC_MUX_1V1, 1); //PIN CHANGE HAVE NO EFFECT ON ADCB
// 			
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				accu_data += tx_data[POSITION_CURRENT]; //controller_measure(9, &tx_data); //measure with averaging, and accumulate.
     7ea:	c2 ef       	ldi	r28, 0xF2	; 242
     7ec:	d4 e0       	ldi	r29, 0x04	; 4
     7ee:	28 81       	ld	r18, Y
     7f0:	39 81       	ldd	r19, Y+1	; 0x01
     7f2:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <accu_data>
     7f6:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <accu_data+0x1>
     7fa:	a0 91 63 04 	lds	r26, 0x0463	; 0x800463 <accu_data+0x2>
     7fe:	b0 91 64 04 	lds	r27, 0x0464	; 0x800464 <accu_data+0x3>
     802:	82 0f       	add	r24, r18
     804:	93 1f       	adc	r25, r19
     806:	a1 1d       	adc	r26, r1
     808:	b1 1d       	adc	r27, r1
     80a:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <accu_data>
     80e:	90 93 62 04 	sts	0x0462, r25	; 0x800462 <accu_data+0x1>
     812:	a0 93 63 04 	sts	0x0463, r26	; 0x800463 <accu_data+0x2>
     816:	b0 93 64 04 	sts	0x0464, r27	; 0x800464 <accu_data+0x3>
				loadcell_min_max_tran(tx_data[POSITION_CURRENT], &tx_data); //check if new value should be stored in min, max and tran.
     81a:	88 81       	ld	r24, Y
     81c:	99 81       	ldd	r25, Y+1	; 0x01
     81e:	be 01       	movw	r22, r28
     820:	a4 dc       	rcall	.-1720   	; 0x16a <loadcell_min_max_tran>
 				tx_data[POSITION_PREV] = tx_data[POSITION_CURRENT]; //store adc value for next measurement.
     822:	88 81       	ld	r24, Y
     824:	99 81       	ldd	r25, Y+1	; 0x01
     826:	9b 83       	std	Y+3, r25	; 0x03
     828:	8a 83       	std	Y+2, r24	; 0x02
				///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				
				transmit_counter++;		
     82a:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <transmit_counter>
     82e:	90 91 6f 04 	lds	r25, 0x046F	; 0x80046f <transmit_counter+0x1>
     832:	01 96       	adiw	r24, 0x01	; 1
     834:	90 93 6f 04 	sts	0x046F, r25	; 0x80046f <transmit_counter+0x1>
     838:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <transmit_counter>
				tx_data[POSITION_TIME] = transmit_counter; //increase timestamp counter.
     83c:	9b 8b       	std	Y+19, r25	; 0x13
     83e:	8a 8b       	std	Y+18, r24	; 0x12
			
				if (tx_data[POSITION_TIME] >= (TRANSMIT_RATE/WAKEUP_RATE)) //if accumulation limit is reached.
     840:	8a 89       	ldd	r24, Y+18	; 0x12
     842:	9b 89       	ldd	r25, Y+19	; 0x13
     844:	02 97       	sbiw	r24, 0x02	; 2
     846:	38 f0       	brcs	.+14     	; 0x856 <main_function+0x10e>
				{
					transmit_counter = 0; //reset counter
     848:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <transmit_counter+0x1>
     84c:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <transmit_counter>
					controller_next_state = CALC; //limit reached, go to next
     850:	70 92 70 04 	sts	0x0470, r7	; 0x800470 <controller_next_state>
     854:	5a c0       	rjmp	.+180    	; 0x90a <__stack+0xb>
					} else {
					controller_next_state = READ_EXT_DATA; //Start from top again
     856:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <controller_next_state>
     85a:	57 c0       	rjmp	.+174    	; 0x90a <__stack+0xb>
			
			case CALC:
				//led_blink(3000); //DEBUG
				
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				tx_data[POSITION_AVG] = controller_calc_avg(accu_data, tx_data[POSITION_TIME]); //calc and store average.
     85c:	c2 ef       	ldi	r28, 0xF2	; 242
     85e:	d4 e0       	ldi	r29, 0x04	; 4
     860:	2a 89       	ldd	r18, Y+18	; 0x12
     862:	3b 89       	ldd	r19, Y+19	; 0x13


uint16_t controller_calc_avg(uint32_t data, uint16_t cnt) {
	uint16_t avg = 0;
	
	avg = data/cnt;
     864:	40 e0       	ldi	r20, 0x00	; 0
     866:	50 e0       	ldi	r21, 0x00	; 0
     868:	60 91 61 04 	lds	r22, 0x0461	; 0x800461 <accu_data>
     86c:	70 91 62 04 	lds	r23, 0x0462	; 0x800462 <accu_data+0x1>
     870:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <accu_data+0x2>
     874:	90 91 64 04 	lds	r25, 0x0464	; 0x800464 <accu_data+0x3>
     878:	32 d7       	rcall	.+3684   	; 0x16de <__udivmodsi4>
			
			case CALC:
				//led_blink(3000); //DEBUG
				
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				tx_data[POSITION_AVG] = controller_calc_avg(accu_data, tx_data[POSITION_TIME]); //calc and store average.
     87a:	3d 83       	std	Y+5, r19	; 0x05
     87c:	2c 83       	std	Y+4, r18	; 0x04
				accu_data = 0; //reset parameters
     87e:	10 92 61 04 	sts	0x0461, r1	; 0x800461 <accu_data>
     882:	10 92 62 04 	sts	0x0462, r1	; 0x800462 <accu_data+0x1>
     886:	10 92 63 04 	sts	0x0463, r1	; 0x800463 <accu_data+0x2>
     88a:	10 92 64 04 	sts	0x0464, r1	; 0x800464 <accu_data+0x3>
				///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				controller_next_state = STORE_EXT_MEM;
     88e:	f0 92 70 04 	sts	0x0470, r15	; 0x800470 <controller_next_state>
				break;
     892:	3b c0       	rjmp	.+118    	; 0x90a <__stack+0xb>
			
			case STORE_EXT_MEM:
				tx_data[POSITION_TIME] = 0; //reset accumulation counter if something???????????????
     894:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <tx_data+0x13>
     898:	10 92 04 05 	sts	0x0504, r1	; 0x800504 <tx_data+0x12>
				controller_next_state = RF_POWER_ON;
     89c:	e0 92 70 04 	sts	0x0470, r14	; 0x800470 <controller_next_state>
				break;
			
			case RF_POWER_ON:
			radio_power_on();
     8a0:	34 c0       	rjmp	.+104    	; 0x90a <__stack+0xb>
// 				{
// 	// 				tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_POWER_ON); //set failure status
// 	// 				controller_next_state = RF_POWER_OFF; //if failure go to power off
// 	// 				break;
// 				}
			controller_next_state = RF_CONNECT;
     8a2:	ec dc       	rcall	.-1576   	; 0x27c <radio_power_on>
			break;
     8a4:	d0 92 70 04 	sts	0x0470, r13	; 0x800470 <controller_next_state>
			
			case RF_CONNECT:
			if (at_rf_connect() != 0) //Connect to network. MAKE STATUS REPORT FROM THIS!!!!!!!
     8a8:	30 c0       	rjmp	.+96     	; 0x90a <__stack+0xb>
			{
// 				tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_CONNECT); //set failure status
// 				controller_next_state = RF_DISCONNECT; //if failure go to disconnect
// 				break;
			}
			controller_next_state = GENERATE_PACKAGE;
     8aa:	ee de       	rcall	.-548    	; 0x688 <at_rf_connect>
     8ac:	c0 92 70 04 	sts	0x0470, r12	; 0x800470 <controller_next_state>
			break;
			
			case GENERATE_PACKAGE:
				data_to_char(&tx_data, TX_DATA_SIZE, &tx_data_bytes, TRANSFER_DATA_BASE);
     8b0:	2c c0       	rjmp	.+88     	; 0x90a <__stack+0xb>
     8b2:	2a e0       	ldi	r18, 0x0A	; 10
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	4c ef       	ldi	r20, 0xFC	; 252
     8b8:	53 e0       	ldi	r21, 0x03	; 3
     8ba:	61 e1       	ldi	r22, 0x11	; 17
     8bc:	82 ef       	ldi	r24, 0xF2	; 242
     8be:	94 e0       	ldi	r25, 0x04	; 4
				transfer_data_length_package = mqtt_packet(&tx_data_bytes, &tx_data_package, TRANSFER_DATA_SIZE_PACKAGE); //convert ascii data to MQTT package.
     8c0:	ea dd       	rcall	.-1068   	; 0x496 <data_to_char>
     8c2:	44 e6       	ldi	r20, 0x64	; 100
     8c4:	50 e0       	ldi	r21, 0x00	; 0
     8c6:	68 e9       	ldi	r22, 0x98	; 152
     8c8:	73 e0       	ldi	r23, 0x03	; 3
     8ca:	8c ef       	ldi	r24, 0xFC	; 252
     8cc:	93 e0       	ldi	r25, 0x03	; 3
     8ce:	26 d3       	rcall	.+1612   	; 0xf1c <mqtt_packet>
     8d0:	90 93 97 03 	sts	0x0397, r25	; 0x800397 <__data_end+0x1>
     8d4:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <__data_end>
	// 				char mystring[5] = "";
	// 				itoa(transfer_data_length_package, package_lenght, 10);
	// 				strcpy(mystring, package_lenght);
	// 				usart_tx_at(USART_TERMINAL, mystring);
				#endif // DEBUG
				controller_next_state = TX_DATA;
     8d8:	b0 92 70 04 	sts	0x0470, r11	; 0x800470 <controller_next_state>
				break;
			
			case TX_DATA:
				//tx(&tx_data_package, transfer_data_length_package); //transmit package. GENERATE STATUS FROM THIS.
				controller_next_state = RX_DATA;
				break;
     8dc:	16 c0       	rjmp	.+44     	; 0x90a <__stack+0xb>
			
			case RX_DATA:
				controller_next_state = RF_DISCONNECT;
     8de:	a0 92 70 04 	sts	0x0470, r10	; 0x800470 <controller_next_state>
				break;
			
			case RF_DISCONNECT:
				at_rf_disconnect(); //Disconnect
     8e2:	13 c0       	rjmp	.+38     	; 0x90a <__stack+0xb>
				controller_next_state = RF_POWER_OFF;
     8e4:	90 92 70 04 	sts	0x0470, r9	; 0x800470 <controller_next_state>
				break;
			
			case RF_POWER_OFF:
				radio_power_down(); //radio power down
     8e8:	10 c0       	rjmp	.+32     	; 0x90a <__stack+0xb>
     8ea:	ea de       	rcall	.-556    	; 0x6c0 <at_rf_disconnect>
				controller_next_state = RESET_REGISTERS;
     8ec:	80 92 70 04 	sts	0x0470, r8	; 0x800470 <controller_next_state>
				break;
     8f0:	0c c0       	rjmp	.+24     	; 0x90a <__stack+0xb>
			
			case RESET_REGISTERS:
				reset_all_data(); //reset all arrays
     8f2:	00 dd       	rcall	.-1536   	; 0x2f4 <radio_power_down>
     8f4:	10 93 70 04 	sts	0x0470, r17	; 0x800470 <controller_next_state>
				controller_next_state = READ_EXT_DATA;
     8f8:	08 c0       	rjmp	.+16     	; 0x90a <__stack+0xb>
				RTC_ISR_ACTIVE = 0; //FINISHED, break LOOP!
     8fa:	b1 dc       	rcall	.-1694   	; 0x25e <reset_all_data>
     8fc:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <controller_next_state>
				break;
			
			default:
				controller_next_state = RESET_REGISTERS; //TRY RESET.
     900:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <RTC_ISR_ACTIVE>
				break;
			
		}
		
		controller_state = controller_next_state; //NEXT STATE => STATE
     904:	02 c0       	rjmp	.+4      	; 0x90a <__stack+0xb>
     906:	10 93 70 04 	sts	0x0470, r17	; 0x800470 <controller_next_state>
     90a:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <controller_next_state>
		goto END; //BREAK ISR IF TRANSMIT 
	} else {wdt_counter = 0;}
	//////////////////////////////////////////////////////////////////////////
	
	RTC_ISR_ACTIVE = 1;
	while (RTC_ISR_ACTIVE == 1)
     90e:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <controller_state>
     912:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <RTC_ISR_ACTIVE>

	
	//WDTCSR |= (1<<WDIE);
	
	END:
	cli();
     916:	81 30       	cpi	r24, 0x01	; 1
//	sei();
	//wdt_enable(1);
}
     918:	09 f4       	brne	.+2      	; 0x91c <__stack+0x1d>
     91a:	58 cf       	rjmp	.-336    	; 0x7cc <main_function+0x84>
     91c:	f8 94       	cli
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	1f 91       	pop	r17
     924:	0f 91       	pop	r16
     926:	ff 90       	pop	r15
     928:	ef 90       	pop	r14
     92a:	df 90       	pop	r13
     92c:	cf 90       	pop	r12
     92e:	bf 90       	pop	r11
     930:	af 90       	pop	r10
     932:	9f 90       	pop	r9
     934:	8f 90       	pop	r8
     936:	7f 90       	pop	r7
     938:	08 95       	ret

0000093a <main>:
	//go to sleep and let interrupts do the work...zzz....zzzz
	while (1)
	{
		/*sleepmgr_enter_sleep();*/
		//sleep_enable();
		main_function();
     93a:	f8 94       	cli
     93c:	80 d3       	rcall	.+1792   	; 0x103e <board_init>
     93e:	89 b1       	in	r24, 0x09	; 9
     940:	03 df       	rcall	.-506    	; 0x748 <main_function>
     942:	fe cf       	rjmp	.-4      	; 0x940 <main+0x6>

00000944 <MQTTSerialize_connectLength>:

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	cf 93       	push	r28
     94e:	df 93       	push	r29
     950:	ec 01       	movw	r28, r24
     952:	8e 81       	ldd	r24, Y+6	; 0x06
     954:	83 30       	cpi	r24, 0x03	; 3
     956:	29 f0       	breq	.+10     	; 0x962 <MQTTSerialize_connectLength+0x1e>
     958:	84 30       	cpi	r24, 0x04	; 4
     95a:	31 f4       	brne	.+12     	; 0x968 <MQTTSerialize_connectLength+0x24>
     95c:	0a e0       	ldi	r16, 0x0A	; 10
     95e:	10 e0       	ldi	r17, 0x00	; 0
     960:	05 c0       	rjmp	.+10     	; 0x96c <MQTTSerialize_connectLength+0x28>
     962:	0c e0       	ldi	r16, 0x0C	; 12
     964:	10 e0       	ldi	r17, 0x00	; 0
     966:	02 c0       	rjmp	.+4      	; 0x96c <MQTTSerialize_connectLength+0x28>
     968:	00 e0       	ldi	r16, 0x00	; 0
     96a:	10 e0       	ldi	r17, 0x00	; 0
     96c:	4f 81       	ldd	r20, Y+7	; 0x07
     96e:	58 85       	ldd	r21, Y+8	; 0x08
     970:	69 85       	ldd	r22, Y+9	; 0x09
     972:	7a 85       	ldd	r23, Y+10	; 0x0a
     974:	8b 85       	ldd	r24, Y+11	; 0x0b
     976:	9c 85       	ldd	r25, Y+12	; 0x0c
     978:	fb d1       	rcall	.+1014   	; 0xd70 <MQTTstrlen>
     97a:	02 96       	adiw	r24, 0x02	; 2
     97c:	08 0f       	add	r16, r24
     97e:	19 1f       	adc	r17, r25
     980:	88 89       	ldd	r24, Y+16	; 0x10
     982:	88 23       	and	r24, r24
     984:	a1 f0       	breq	.+40     	; 0x9ae <MQTTSerialize_connectLength+0x6a>
     986:	4f 89       	ldd	r20, Y+23	; 0x17
     988:	58 8d       	ldd	r21, Y+24	; 0x18
     98a:	69 8d       	ldd	r22, Y+25	; 0x19
     98c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     98e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     990:	9c 8d       	ldd	r25, Y+28	; 0x1c
     992:	ee d1       	rcall	.+988    	; 0xd70 <MQTTstrlen>
     994:	7c 01       	movw	r14, r24
     996:	4d 8d       	ldd	r20, Y+29	; 0x1d
     998:	5e 8d       	ldd	r21, Y+30	; 0x1e
     99a:	6f 8d       	ldd	r22, Y+31	; 0x1f
     99c:	78 a1       	ldd	r23, Y+32	; 0x20
     99e:	89 a1       	ldd	r24, Y+33	; 0x21
     9a0:	9a a1       	ldd	r25, Y+34	; 0x22
     9a2:	e6 d1       	rcall	.+972    	; 0xd70 <MQTTstrlen>
     9a4:	8e 0d       	add	r24, r14
     9a6:	9f 1d       	adc	r25, r15
     9a8:	04 96       	adiw	r24, 0x04	; 4
     9aa:	08 0f       	add	r16, r24
     9ac:	19 1f       	adc	r17, r25
     9ae:	8d a1       	ldd	r24, Y+37	; 0x25
     9b0:	9e a1       	ldd	r25, Y+38	; 0x26
     9b2:	89 2b       	or	r24, r25
     9b4:	21 f4       	brne	.+8      	; 0x9be <MQTTSerialize_connectLength+0x7a>
     9b6:	89 a5       	ldd	r24, Y+41	; 0x29
     9b8:	9a a5       	ldd	r25, Y+42	; 0x2a
     9ba:	89 2b       	or	r24, r25
     9bc:	51 f0       	breq	.+20     	; 0x9d2 <MQTTSerialize_connectLength+0x8e>
     9be:	4d a1       	ldd	r20, Y+37	; 0x25
     9c0:	5e a1       	ldd	r21, Y+38	; 0x26
     9c2:	6f a1       	ldd	r22, Y+39	; 0x27
     9c4:	78 a5       	ldd	r23, Y+40	; 0x28
     9c6:	89 a5       	ldd	r24, Y+41	; 0x29
     9c8:	9a a5       	ldd	r25, Y+42	; 0x2a
     9ca:	d2 d1       	rcall	.+932    	; 0xd70 <MQTTstrlen>
     9cc:	02 96       	adiw	r24, 0x02	; 2
     9ce:	08 0f       	add	r16, r24
     9d0:	19 1f       	adc	r17, r25
     9d2:	8b a5       	ldd	r24, Y+43	; 0x2b
     9d4:	9c a5       	ldd	r25, Y+44	; 0x2c
     9d6:	89 2b       	or	r24, r25
     9d8:	21 f4       	brne	.+8      	; 0x9e2 <MQTTSerialize_connectLength+0x9e>
     9da:	8f a5       	ldd	r24, Y+47	; 0x2f
     9dc:	98 a9       	ldd	r25, Y+48	; 0x30
     9de:	89 2b       	or	r24, r25
     9e0:	51 f0       	breq	.+20     	; 0x9f6 <MQTTSerialize_connectLength+0xb2>
     9e2:	4b a5       	ldd	r20, Y+43	; 0x2b
     9e4:	5c a5       	ldd	r21, Y+44	; 0x2c
     9e6:	6d a5       	ldd	r22, Y+45	; 0x2d
     9e8:	7e a5       	ldd	r23, Y+46	; 0x2e
     9ea:	8f a5       	ldd	r24, Y+47	; 0x2f
     9ec:	98 a9       	ldd	r25, Y+48	; 0x30
     9ee:	c0 d1       	rcall	.+896    	; 0xd70 <MQTTstrlen>
     9f0:	02 96       	adiw	r24, 0x02	; 2
     9f2:	08 0f       	add	r16, r24
     9f4:	19 1f       	adc	r17, r25
     9f6:	c8 01       	movw	r24, r16
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	1f 91       	pop	r17
     9fe:	0f 91       	pop	r16
     a00:	ff 90       	pop	r15
     a02:	ef 90       	pop	r14
     a04:	08 95       	ret

00000a06 <MQTTSerialize_connect>:
     a06:	af 92       	push	r10
     a08:	bf 92       	push	r11
     a0a:	cf 92       	push	r12
     a0c:	df 92       	push	r13
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
     a1a:	00 d0       	rcall	.+0      	; 0xa1c <MQTTSerialize_connect+0x16>
     a1c:	cd b7       	in	r28, 0x3d	; 61
     a1e:	de b7       	in	r29, 0x3e	; 62
     a20:	6c 01       	movw	r12, r24
     a22:	5b 01       	movw	r10, r22
     a24:	8a 01       	movw	r16, r20
     a26:	9a 83       	std	Y+2, r25	; 0x02
     a28:	89 83       	std	Y+1, r24	; 0x01
     a2a:	ca 01       	movw	r24, r20
     a2c:	8b df       	rcall	.-234    	; 0x944 <MQTTSerialize_connectLength>
     a2e:	7c 01       	movw	r14, r24
     a30:	03 d1       	rcall	.+518    	; 0xc38 <MQTTPacket_len>
     a32:	a8 16       	cp	r10, r24
     a34:	b9 06       	cpc	r11, r25
     a36:	0c f4       	brge	.+2      	; 0xa3a <MQTTSerialize_connect+0x34>
     a38:	9f c0       	rjmp	.+318    	; 0xb78 <MQTTSerialize_connect+0x172>
     a3a:	60 e1       	ldi	r22, 0x10	; 16
     a3c:	ce 01       	movw	r24, r28
     a3e:	01 96       	adiw	r24, 0x01	; 1
     a40:	0a d1       	rcall	.+532    	; 0xc56 <writeChar>
     a42:	b7 01       	movw	r22, r14
     a44:	89 81       	ldd	r24, Y+1	; 0x01
     a46:	9a 81       	ldd	r25, Y+2	; 0x02
     a48:	d1 d0       	rcall	.+418    	; 0xbec <MQTTPacket_encode>
     a4a:	29 81       	ldd	r18, Y+1	; 0x01
     a4c:	3a 81       	ldd	r19, Y+2	; 0x02
     a4e:	82 0f       	add	r24, r18
     a50:	93 1f       	adc	r25, r19
     a52:	9a 83       	std	Y+2, r25	; 0x02
     a54:	89 83       	std	Y+1, r24	; 0x01
     a56:	f8 01       	movw	r30, r16
     a58:	86 81       	ldd	r24, Z+6	; 0x06
     a5a:	84 30       	cpi	r24, 0x04	; 4
     a5c:	51 f4       	brne	.+20     	; 0xa72 <MQTTSerialize_connect+0x6c>
     a5e:	61 e8       	ldi	r22, 0x81	; 129
     a60:	73 e0       	ldi	r23, 0x03	; 3
     a62:	ce 01       	movw	r24, r28
     a64:	01 96       	adiw	r24, 0x01	; 1
     a66:	20 d1       	rcall	.+576    	; 0xca8 <writeCString>
     a68:	64 e0       	ldi	r22, 0x04	; 4
     a6a:	ce 01       	movw	r24, r28
     a6c:	01 96       	adiw	r24, 0x01	; 1
     a6e:	f3 d0       	rcall	.+486    	; 0xc56 <writeChar>
     a70:	09 c0       	rjmp	.+18     	; 0xa84 <MQTTSerialize_connect+0x7e>
     a72:	66 e8       	ldi	r22, 0x86	; 134
     a74:	73 e0       	ldi	r23, 0x03	; 3
     a76:	ce 01       	movw	r24, r28
     a78:	01 96       	adiw	r24, 0x01	; 1
     a7a:	16 d1       	rcall	.+556    	; 0xca8 <writeCString>
     a7c:	63 e0       	ldi	r22, 0x03	; 3
     a7e:	ce 01       	movw	r24, r28
     a80:	01 96       	adiw	r24, 0x01	; 1
     a82:	e9 d0       	rcall	.+466    	; 0xc56 <writeChar>
     a84:	f1 2c       	mov	r15, r1
     a86:	f8 01       	movw	r30, r16
     a88:	87 85       	ldd	r24, Z+15	; 0x0f
     a8a:	80 fb       	bst	r24, 0
     a8c:	f1 f8       	bld	r15, 1
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	90 89       	ldd	r25, Z+16	; 0x10
     a92:	91 11       	cpse	r25, r1
     a94:	01 c0       	rjmp	.+2      	; 0xa98 <MQTTSerialize_connect+0x92>
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	80 fb       	bst	r24, 0
     a9a:	f2 f8       	bld	r15, 2
     a9c:	f2 fe       	sbrs	r15, 2
     a9e:	0d c0       	rjmp	.+26     	; 0xaba <MQTTSerialize_connect+0xb4>
     aa0:	f8 01       	movw	r30, r16
     aa2:	84 a1       	ldd	r24, Z+36	; 0x24
     aa4:	83 70       	andi	r24, 0x03	; 3
     aa6:	88 0f       	add	r24, r24
     aa8:	88 0f       	add	r24, r24
     aaa:	88 0f       	add	r24, r24
     aac:	9f 2d       	mov	r25, r15
     aae:	97 7e       	andi	r25, 0xE7	; 231
     ab0:	f9 2e       	mov	r15, r25
     ab2:	f8 2a       	or	r15, r24
     ab4:	83 a1       	ldd	r24, Z+35	; 0x23
     ab6:	80 fb       	bst	r24, 0
     ab8:	f5 f8       	bld	r15, 5
     aba:	f8 01       	movw	r30, r16
     abc:	85 a1       	ldd	r24, Z+37	; 0x25
     abe:	96 a1       	ldd	r25, Z+38	; 0x26
     ac0:	89 2b       	or	r24, r25
     ac2:	21 f4       	brne	.+8      	; 0xacc <MQTTSerialize_connect+0xc6>
     ac4:	81 a5       	ldd	r24, Z+41	; 0x29
     ac6:	92 a5       	ldd	r25, Z+42	; 0x2a
     ac8:	89 2b       	or	r24, r25
     aca:	11 f0       	breq	.+4      	; 0xad0 <MQTTSerialize_connect+0xca>
     acc:	68 94       	set
     ace:	f7 f8       	bld	r15, 7
     ad0:	f8 01       	movw	r30, r16
     ad2:	83 a5       	ldd	r24, Z+43	; 0x2b
     ad4:	94 a5       	ldd	r25, Z+44	; 0x2c
     ad6:	89 2b       	or	r24, r25
     ad8:	21 f4       	brne	.+8      	; 0xae2 <MQTTSerialize_connect+0xdc>
     ada:	87 a5       	ldd	r24, Z+47	; 0x2f
     adc:	90 a9       	ldd	r25, Z+48	; 0x30
     ade:	89 2b       	or	r24, r25
     ae0:	11 f0       	breq	.+4      	; 0xae6 <MQTTSerialize_connect+0xe0>
     ae2:	68 94       	set
     ae4:	f6 f8       	bld	r15, 6
     ae6:	6f 2d       	mov	r22, r15
     ae8:	ce 01       	movw	r24, r28
     aea:	01 96       	adiw	r24, 0x01	; 1
     aec:	b4 d0       	rcall	.+360    	; 0xc56 <writeChar>
     aee:	f8 01       	movw	r30, r16
     af0:	65 85       	ldd	r22, Z+13	; 0x0d
     af2:	76 85       	ldd	r23, Z+14	; 0x0e
     af4:	ce 01       	movw	r24, r28
     af6:	01 96       	adiw	r24, 0x01	; 1
     af8:	b8 d0       	rcall	.+368    	; 0xc6a <writeInt>
     afa:	f8 01       	movw	r30, r16
     afc:	27 81       	ldd	r18, Z+7	; 0x07
     afe:	30 85       	ldd	r19, Z+8	; 0x08
     b00:	41 85       	ldd	r20, Z+9	; 0x09
     b02:	52 85       	ldd	r21, Z+10	; 0x0a
     b04:	63 85       	ldd	r22, Z+11	; 0x0b
     b06:	74 85       	ldd	r23, Z+12	; 0x0c
     b08:	ce 01       	movw	r24, r28
     b0a:	01 96       	adiw	r24, 0x01	; 1
     b0c:	f2 d0       	rcall	.+484    	; 0xcf2 <writeMQTTString>
     b0e:	f8 01       	movw	r30, r16
     b10:	80 89       	ldd	r24, Z+16	; 0x10
     b12:	88 23       	and	r24, r24
     b14:	99 f0       	breq	.+38     	; 0xb3c <MQTTSerialize_connect+0x136>
     b16:	27 89       	ldd	r18, Z+23	; 0x17
     b18:	30 8d       	ldd	r19, Z+24	; 0x18
     b1a:	41 8d       	ldd	r20, Z+25	; 0x19
     b1c:	52 8d       	ldd	r21, Z+26	; 0x1a
     b1e:	63 8d       	ldd	r22, Z+27	; 0x1b
     b20:	74 8d       	ldd	r23, Z+28	; 0x1c
     b22:	ce 01       	movw	r24, r28
     b24:	01 96       	adiw	r24, 0x01	; 1
     b26:	e5 d0       	rcall	.+458    	; 0xcf2 <writeMQTTString>
     b28:	f8 01       	movw	r30, r16
     b2a:	25 8d       	ldd	r18, Z+29	; 0x1d
     b2c:	36 8d       	ldd	r19, Z+30	; 0x1e
     b2e:	47 8d       	ldd	r20, Z+31	; 0x1f
     b30:	50 a1       	ldd	r21, Z+32	; 0x20
     b32:	61 a1       	ldd	r22, Z+33	; 0x21
     b34:	72 a1       	ldd	r23, Z+34	; 0x22
     b36:	ce 01       	movw	r24, r28
     b38:	01 96       	adiw	r24, 0x01	; 1
     b3a:	db d0       	rcall	.+438    	; 0xcf2 <writeMQTTString>
     b3c:	ef 2c       	mov	r14, r15
     b3e:	ff 20       	and	r15, r15
     b40:	54 f4       	brge	.+20     	; 0xb56 <MQTTSerialize_connect+0x150>
     b42:	f8 01       	movw	r30, r16
     b44:	25 a1       	ldd	r18, Z+37	; 0x25
     b46:	36 a1       	ldd	r19, Z+38	; 0x26
     b48:	47 a1       	ldd	r20, Z+39	; 0x27
     b4a:	50 a5       	ldd	r21, Z+40	; 0x28
     b4c:	61 a5       	ldd	r22, Z+41	; 0x29
     b4e:	72 a5       	ldd	r23, Z+42	; 0x2a
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	ce d0       	rcall	.+412    	; 0xcf2 <writeMQTTString>
     b56:	e6 fe       	sbrs	r14, 6
     b58:	0a c0       	rjmp	.+20     	; 0xb6e <MQTTSerialize_connect+0x168>
     b5a:	f8 01       	movw	r30, r16
     b5c:	23 a5       	ldd	r18, Z+43	; 0x2b
     b5e:	34 a5       	ldd	r19, Z+44	; 0x2c
     b60:	45 a5       	ldd	r20, Z+45	; 0x2d
     b62:	56 a5       	ldd	r21, Z+46	; 0x2e
     b64:	67 a5       	ldd	r22, Z+47	; 0x2f
     b66:	70 a9       	ldd	r23, Z+48	; 0x30
     b68:	ce 01       	movw	r24, r28
     b6a:	01 96       	adiw	r24, 0x01	; 1
     b6c:	c2 d0       	rcall	.+388    	; 0xcf2 <writeMQTTString>
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	9a 81       	ldd	r25, Y+2	; 0x02
     b72:	8c 19       	sub	r24, r12
     b74:	9d 09       	sbc	r25, r13
     b76:	02 c0       	rjmp	.+4      	; 0xb7c <MQTTSerialize_connect+0x176>
     b78:	8e ef       	ldi	r24, 0xFE	; 254
     b7a:	9f ef       	ldi	r25, 0xFF	; 255
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	df 90       	pop	r13
     b8e:	cf 90       	pop	r12
     b90:	bf 90       	pop	r11
     b92:	af 90       	pop	r10
     b94:	08 95       	ret

00000b96 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
     b96:	0f 93       	push	r16
     b98:	1f 93       	push	r17
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
     b9e:	00 d0       	rcall	.+0      	; 0xba0 <MQTTSerialize_zero+0xa>
     ba0:	cd b7       	in	r28, 0x3d	; 61
     ba2:	de b7       	in	r29, 0x3e	; 62
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
     ba4:	9a 83       	std	Y+2, r25	; 0x02
     ba6:	89 83       	std	Y+1, r24	; 0x01

	FUNC_ENTRY;
	if (buflen < 2)
     ba8:	62 30       	cpi	r22, 0x02	; 2
     baa:	71 05       	cpc	r23, r1
     bac:	9c f0       	brlt	.+38     	; 0xbd4 <MQTTSerialize_zero+0x3e>
     bae:	8c 01       	movw	r16, r24
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
     bb0:	64 2f       	mov	r22, r20
     bb2:	62 95       	swap	r22
     bb4:	60 7f       	andi	r22, 0xF0	; 240
	writeChar(&ptr, header.byte); /* write header */
     bb6:	ce 01       	movw	r24, r28
     bb8:	01 96       	adiw	r24, 0x01	; 1
     bba:	4d d0       	rcall	.+154    	; 0xc56 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
     bbc:	60 e0       	ldi	r22, 0x00	; 0
     bbe:	70 e0       	ldi	r23, 0x00	; 0
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	9a 81       	ldd	r25, Y+2	; 0x02
     bc4:	13 d0       	rcall	.+38     	; 0xbec <MQTTPacket_encode>
	rc = ptr - buf;
     bc6:	29 81       	ldd	r18, Y+1	; 0x01
     bc8:	3a 81       	ldd	r19, Y+2	; 0x02
     bca:	82 0f       	add	r24, r18
     bcc:	93 1f       	adc	r25, r19
     bce:	80 1b       	sub	r24, r16
     bd0:	91 0b       	sbc	r25, r17
     bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <MQTTSerialize_zero+0x42>
	unsigned char *ptr = buf;

	FUNC_ENTRY;
	if (buflen < 2)
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
     bd4:	8e ef       	ldi	r24, 0xFE	; 254
     bd6:	9f ef       	ldi	r25, 0xFF	; 255
	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
	rc = ptr - buf;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
     bd8:	0f 90       	pop	r0
     bda:	0f 90       	pop	r0
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	1f 91       	pop	r17
     be2:	0f 91       	pop	r16
     be4:	08 95       	ret

00000be6 <MQTTSerialize_disconnect>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
     be6:	4e e0       	ldi	r20, 0x0E	; 14
     be8:	d6 cf       	rjmp	.-84     	; 0xb96 <MQTTSerialize_zero>
}
     bea:	08 95       	ret

00000bec <MQTTPacket_encode>:
		}
	}
	mqttstring->cstring = NULL;
	FUNC_EXIT_RC(rc);
	return rc;
}
     bec:	dc 01       	movw	r26, r24
     bee:	e0 e0       	ldi	r30, 0x00	; 0
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	9b 01       	movw	r18, r22
     bf4:	2f 77       	andi	r18, 0x7F	; 127
     bf6:	30 78       	andi	r19, 0x80	; 128
     bf8:	33 23       	and	r19, r19
     bfa:	34 f4       	brge	.+12     	; 0xc08 <MQTTPacket_encode+0x1c>
     bfc:	21 50       	subi	r18, 0x01	; 1
     bfe:	31 09       	sbc	r19, r1
     c00:	20 68       	ori	r18, 0x80	; 128
     c02:	3f 6f       	ori	r19, 0xFF	; 255
     c04:	2f 5f       	subi	r18, 0xFF	; 255
     c06:	3f 4f       	sbci	r19, 0xFF	; 255
     c08:	ab 01       	movw	r20, r22
     c0a:	77 23       	and	r23, r23
     c0c:	14 f4       	brge	.+4      	; 0xc12 <MQTTPacket_encode+0x26>
     c0e:	41 58       	subi	r20, 0x81	; 129
     c10:	5f 4f       	sbci	r21, 0xFF	; 255
     c12:	ba 01       	movw	r22, r20
     c14:	66 0f       	add	r22, r22
     c16:	67 2f       	mov	r22, r23
     c18:	66 1f       	adc	r22, r22
     c1a:	77 0b       	sbc	r23, r23
     c1c:	16 16       	cp	r1, r22
     c1e:	17 06       	cpc	r1, r23
     c20:	24 f4       	brge	.+8      	; 0xc2a <MQTTPacket_encode+0x3e>
     c22:	31 96       	adiw	r30, 0x01	; 1
     c24:	20 68       	ori	r18, 0x80	; 128
     c26:	2d 93       	st	X+, r18
     c28:	e4 cf       	rjmp	.-56     	; 0xbf2 <MQTTPacket_encode+0x6>
     c2a:	dc 01       	movw	r26, r24
     c2c:	ae 0f       	add	r26, r30
     c2e:	bf 1f       	adc	r27, r31
     c30:	2c 93       	st	X, r18
     c32:	cf 01       	movw	r24, r30
     c34:	01 96       	adiw	r24, 0x01	; 1
     c36:	08 95       	ret

00000c38 <MQTTPacket_len>:
     c38:	9c 01       	movw	r18, r24
     c3a:	2f 5f       	subi	r18, 0xFF	; 255
     c3c:	3f 4f       	sbci	r19, 0xFF	; 255
     c3e:	20 38       	cpi	r18, 0x80	; 128
     c40:	31 05       	cpc	r19, r1
     c42:	14 f4       	brge	.+4      	; 0xc48 <MQTTPacket_len+0x10>
     c44:	02 96       	adiw	r24, 0x02	; 2
     c46:	08 95       	ret
     c48:	21 15       	cp	r18, r1
     c4a:	30 44       	sbci	r19, 0x40	; 64
     c4c:	14 f4       	brge	.+4      	; 0xc52 <MQTTPacket_len+0x1a>
     c4e:	03 96       	adiw	r24, 0x03	; 3
     c50:	08 95       	ret
     c52:	04 96       	adiw	r24, 0x04	; 4
     c54:	08 95       	ret

00000c56 <writeChar>:
     c56:	fc 01       	movw	r30, r24
     c58:	a0 81       	ld	r26, Z
     c5a:	b1 81       	ldd	r27, Z+1	; 0x01
     c5c:	6c 93       	st	X, r22
     c5e:	80 81       	ld	r24, Z
     c60:	91 81       	ldd	r25, Z+1	; 0x01
     c62:	01 96       	adiw	r24, 0x01	; 1
     c64:	91 83       	std	Z+1, r25	; 0x01
     c66:	80 83       	st	Z, r24
     c68:	08 95       	ret

00000c6a <writeInt>:
     c6a:	fc 01       	movw	r30, r24
     c6c:	a0 81       	ld	r26, Z
     c6e:	b1 81       	ldd	r27, Z+1	; 0x01
     c70:	cb 01       	movw	r24, r22
     c72:	77 23       	and	r23, r23
     c74:	14 f4       	brge	.+4      	; 0xc7a <writeInt+0x10>
     c76:	81 50       	subi	r24, 0x01	; 1
     c78:	9f 4f       	sbci	r25, 0xFF	; 255
     c7a:	9c 93       	st	X, r25
     c7c:	a0 81       	ld	r26, Z
     c7e:	b1 81       	ldd	r27, Z+1	; 0x01
     c80:	cd 01       	movw	r24, r26
     c82:	01 96       	adiw	r24, 0x01	; 1
     c84:	91 83       	std	Z+1, r25	; 0x01
     c86:	80 83       	st	Z, r24
     c88:	70 78       	andi	r23, 0x80	; 128
     c8a:	77 23       	and	r23, r23
     c8c:	2c f4       	brge	.+10     	; 0xc98 <writeInt+0x2e>
     c8e:	61 50       	subi	r22, 0x01	; 1
     c90:	71 09       	sbc	r23, r1
     c92:	7f 6f       	ori	r23, 0xFF	; 255
     c94:	6f 5f       	subi	r22, 0xFF	; 255
     c96:	7f 4f       	sbci	r23, 0xFF	; 255
     c98:	11 96       	adiw	r26, 0x01	; 1
     c9a:	6c 93       	st	X, r22
     c9c:	80 81       	ld	r24, Z
     c9e:	91 81       	ldd	r25, Z+1	; 0x01
     ca0:	01 96       	adiw	r24, 0x01	; 1
     ca2:	91 83       	std	Z+1, r25	; 0x01
     ca4:	80 83       	st	Z, r24
     ca6:	08 95       	ret

00000ca8 <writeCString>:
     ca8:	ef 92       	push	r14
     caa:	ff 92       	push	r15
     cac:	0f 93       	push	r16
     cae:	1f 93       	push	r17
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
     cb4:	8c 01       	movw	r16, r24
     cb6:	7b 01       	movw	r14, r22
     cb8:	eb 01       	movw	r28, r22
     cba:	09 90       	ld	r0, Y+
     cbc:	00 20       	and	r0, r0
     cbe:	e9 f7       	brne	.-6      	; 0xcba <writeCString+0x12>
     cc0:	21 97       	sbiw	r28, 0x01	; 1
     cc2:	c6 1b       	sub	r28, r22
     cc4:	d7 0b       	sbc	r29, r23
     cc6:	be 01       	movw	r22, r28
     cc8:	d0 df       	rcall	.-96     	; 0xc6a <writeInt>
     cca:	ae 01       	movw	r20, r28
     ccc:	b7 01       	movw	r22, r14
     cce:	f8 01       	movw	r30, r16
     cd0:	80 81       	ld	r24, Z
     cd2:	91 81       	ldd	r25, Z+1	; 0x01
     cd4:	49 d5       	rcall	.+2706   	; 0x1768 <memcpy>
     cd6:	f8 01       	movw	r30, r16
     cd8:	80 81       	ld	r24, Z
     cda:	91 81       	ldd	r25, Z+1	; 0x01
     cdc:	c8 0f       	add	r28, r24
     cde:	d9 1f       	adc	r29, r25
     ce0:	d1 83       	std	Z+1, r29	; 0x01
     ce2:	c0 83       	st	Z, r28
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	1f 91       	pop	r17
     cea:	0f 91       	pop	r16
     cec:	ff 90       	pop	r15
     cee:	ef 90       	pop	r14
     cf0:	08 95       	ret

00000cf2 <writeMQTTString>:
     cf2:	ef 92       	push	r14
     cf4:	ff 92       	push	r15
     cf6:	0f 93       	push	r16
     cf8:	1f 93       	push	r17
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	00 d0       	rcall	.+0      	; 0xd00 <writeMQTTString+0xe>
     d00:	00 d0       	rcall	.+0      	; 0xd02 <writeMQTTString+0x10>
     d02:	00 d0       	rcall	.+0      	; 0xd04 <writeMQTTString+0x12>
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
     d08:	7c 01       	movw	r14, r24
     d0a:	29 83       	std	Y+1, r18	; 0x01
     d0c:	3a 83       	std	Y+2, r19	; 0x02
     d0e:	4b 83       	std	Y+3, r20	; 0x03
     d10:	5c 83       	std	Y+4, r21	; 0x04
     d12:	6d 83       	std	Y+5, r22	; 0x05
     d14:	7e 83       	std	Y+6, r23	; 0x06
     d16:	0b 81       	ldd	r16, Y+3	; 0x03
     d18:	1c 81       	ldd	r17, Y+4	; 0x04
     d1a:	10 16       	cp	r1, r16
     d1c:	11 06       	cpc	r1, r17
     d1e:	8c f4       	brge	.+34     	; 0xd42 <writeMQTTString+0x50>
     d20:	b8 01       	movw	r22, r16
     d22:	a3 df       	rcall	.-186    	; 0xc6a <writeInt>
     d24:	6d 81       	ldd	r22, Y+5	; 0x05
     d26:	7e 81       	ldd	r23, Y+6	; 0x06
     d28:	a8 01       	movw	r20, r16
     d2a:	f7 01       	movw	r30, r14
     d2c:	80 81       	ld	r24, Z
     d2e:	91 81       	ldd	r25, Z+1	; 0x01
     d30:	1b d5       	rcall	.+2614   	; 0x1768 <memcpy>
     d32:	f7 01       	movw	r30, r14
     d34:	80 81       	ld	r24, Z
     d36:	91 81       	ldd	r25, Z+1	; 0x01
     d38:	08 0f       	add	r16, r24
     d3a:	19 1f       	adc	r17, r25
     d3c:	11 83       	std	Z+1, r17	; 0x01
     d3e:	00 83       	st	Z, r16
     d40:	0a c0       	rjmp	.+20     	; 0xd56 <writeMQTTString+0x64>
     d42:	69 81       	ldd	r22, Y+1	; 0x01
     d44:	7a 81       	ldd	r23, Y+2	; 0x02
     d46:	61 15       	cp	r22, r1
     d48:	71 05       	cpc	r23, r1
     d4a:	11 f0       	breq	.+4      	; 0xd50 <writeMQTTString+0x5e>
     d4c:	ad df       	rcall	.-166    	; 0xca8 <writeCString>
     d4e:	03 c0       	rjmp	.+6      	; 0xd56 <writeMQTTString+0x64>
     d50:	60 e0       	ldi	r22, 0x00	; 0
     d52:	70 e0       	ldi	r23, 0x00	; 0
     d54:	8a df       	rcall	.-236    	; 0xc6a <writeInt>
     d56:	26 96       	adiw	r28, 0x06	; 6
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	f8 94       	cli
     d5c:	de bf       	out	0x3e, r29	; 62
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	cd bf       	out	0x3d, r28	; 61
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	1f 91       	pop	r17
     d68:	0f 91       	pop	r16
     d6a:	ff 90       	pop	r15
     d6c:	ef 90       	pop	r14
     d6e:	08 95       	ret

00000d70 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	00 d0       	rcall	.+0      	; 0xd76 <MQTTstrlen+0x6>
     d76:	00 d0       	rcall	.+0      	; 0xd78 <MQTTstrlen+0x8>
     d78:	00 d0       	rcall	.+0      	; 0xd7a <MQTTstrlen+0xa>
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	49 83       	std	Y+1, r20	; 0x01
     d80:	5a 83       	std	Y+2, r21	; 0x02
     d82:	6b 83       	std	Y+3, r22	; 0x03
     d84:	7c 83       	std	Y+4, r23	; 0x04
     d86:	8d 83       	std	Y+5, r24	; 0x05
     d88:	9e 83       	std	Y+6, r25	; 0x06
     d8a:	a9 81       	ldd	r26, Y+1	; 0x01
     d8c:	ba 81       	ldd	r27, Y+2	; 0x02
	int rc = 0;

	if (mqttstring.cstring)
     d8e:	10 97       	sbiw	r26, 0x00	; 0
     d90:	49 f0       	breq	.+18     	; 0xda4 <MQTTstrlen+0x34>
		rc = strlen(mqttstring.cstring);
     d92:	fd 01       	movw	r30, r26
     d94:	01 90       	ld	r0, Z+
     d96:	00 20       	and	r0, r0
     d98:	e9 f7       	brne	.-6      	; 0xd94 <MQTTstrlen+0x24>
     d9a:	31 97       	sbiw	r30, 0x01	; 1
     d9c:	cf 01       	movw	r24, r30
     d9e:	8a 1b       	sub	r24, r26
     da0:	9b 0b       	sbc	r25, r27
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <MQTTstrlen+0x38>
	else
		rc = mqttstring.lenstring.len;
     da4:	8b 81       	ldd	r24, Y+3	; 0x03
     da6:	9c 81       	ldd	r25, Y+4	; 0x04
	return rc;
}
     da8:	26 96       	adiw	r28, 0x06	; 6
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	f8 94       	cli
     dae:	de bf       	out	0x3e, r29	; 62
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	cd bf       	out	0x3d, r28	; 61
     db4:	df 91       	pop	r29
     db6:	cf 91       	pop	r28
     db8:	08 95       	ret

00000dba <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
     dba:	ef 92       	push	r14
     dbc:	ff 92       	push	r15
     dbe:	0f 93       	push	r16
     dc0:	1f 93       	push	r17
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
     dc6:	00 d0       	rcall	.+0      	; 0xdc8 <MQTTSerialize_publishLength+0xe>
     dc8:	00 d0       	rcall	.+0      	; 0xdca <MQTTSerialize_publishLength+0x10>
     dca:	00 d0       	rcall	.+0      	; 0xdcc <MQTTSerialize_publishLength+0x12>
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	7c 01       	movw	r14, r24
     dd2:	f4 2f       	mov	r31, r20
     dd4:	e5 2f       	mov	r30, r21
     dd6:	86 2f       	mov	r24, r22
     dd8:	97 2f       	mov	r25, r23
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
     dda:	42 2f       	mov	r20, r18
     ddc:	53 2f       	mov	r21, r19
     dde:	6f 2f       	mov	r22, r31
     de0:	7e 2f       	mov	r23, r30
     de2:	c6 df       	rcall	.-116    	; 0xd70 <MQTTstrlen>
     de4:	02 96       	adiw	r24, 0x02	; 2
     de6:	80 0f       	add	r24, r16
     de8:	91 1f       	adc	r25, r17
	if (qos > 0)
     dea:	1e 14       	cp	r1, r14
     dec:	1f 04       	cpc	r1, r15
     dee:	0c f4       	brge	.+2      	; 0xdf2 <MQTTSerialize_publishLength+0x38>
		len += 2; /* packetid */
     df0:	02 96       	adiw	r24, 0x02	; 2
	return len;
}
     df2:	26 96       	adiw	r28, 0x06	; 6
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	f8 94       	cli
     df8:	de bf       	out	0x3e, r29	; 62
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	cd bf       	out	0x3d, r28	; 61
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	1f 91       	pop	r17
     e04:	0f 91       	pop	r16
     e06:	ff 90       	pop	r15
     e08:	ef 90       	pop	r14
     e0a:	08 95       	ret

00000e0c <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
     e0c:	2f 92       	push	r2
     e0e:	3f 92       	push	r3
     e10:	4f 92       	push	r4
     e12:	5f 92       	push	r5
     e14:	6f 92       	push	r6
     e16:	7f 92       	push	r7
     e18:	8f 92       	push	r8
     e1a:	9f 92       	push	r9
     e1c:	af 92       	push	r10
     e1e:	bf 92       	push	r11
     e20:	cf 92       	push	r12
     e22:	df 92       	push	r13
     e24:	ef 92       	push	r14
     e26:	ff 92       	push	r15
     e28:	0f 93       	push	r16
     e2a:	1f 93       	push	r17
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
     e34:	2a 97       	sbiw	r28, 0x0a	; 10
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	f8 94       	cli
     e3a:	de bf       	out	0x3e, r29	; 62
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	cd bf       	out	0x3d, r28	; 61
     e40:	2c 01       	movw	r4, r24
     e42:	1b 01       	movw	r2, r22
     e44:	49 87       	std	Y+9, r20	; 0x09
     e46:	39 01       	movw	r6, r18
     e48:	0a 87       	std	Y+10, r16	; 0x0a
     e4a:	28 2d       	mov	r18, r8
     e4c:	8b 82       	std	Y+3, r8	; 0x03
     e4e:	39 2d       	mov	r19, r9
     e50:	9c 82       	std	Y+4, r9	; 0x04
     e52:	4a 2d       	mov	r20, r10
     e54:	ad 82       	std	Y+5, r10	; 0x05
     e56:	5b 2d       	mov	r21, r11
     e58:	be 82       	std	Y+6, r11	; 0x06
     e5a:	6c 2d       	mov	r22, r12
     e5c:	cf 82       	std	Y+7, r12	; 0x07
     e5e:	7d 2d       	mov	r23, r13
     e60:	d8 86       	std	Y+8, r13	; 0x08
     e62:	c9 a0       	ldd	r12, Y+33	; 0x21
     e64:	da a0       	ldd	r13, Y+34	; 0x22
	unsigned char *ptr = buf;
     e66:	9a 83       	std	Y+2, r25	; 0x02
     e68:	89 83       	std	Y+1, r24	; 0x01
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
     e6a:	86 01       	movw	r16, r12
     e6c:	c3 01       	movw	r24, r6
     e6e:	a5 df       	rcall	.-182    	; 0xdba <MQTTSerialize_publishLength>
     e70:	8c 01       	movw	r16, r24
     e72:	e2 de       	rcall	.-572    	; 0xc38 <MQTTPacket_len>
     e74:	28 16       	cp	r2, r24
     e76:	39 06       	cpc	r3, r25
     e78:	b4 f1       	brlt	.+108    	; 0xee6 <MQTTSerialize_publish+0xda>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
     e7a:	60 e3       	ldi	r22, 0x30	; 48
	header.bits.dup = dup;
     e7c:	89 85       	ldd	r24, Y+9	; 0x09
     e7e:	80 fb       	bst	r24, 0
     e80:	63 f9       	bld	r22, 3
	header.bits.qos = qos;
     e82:	86 2d       	mov	r24, r6
     e84:	83 70       	andi	r24, 0x03	; 3
     e86:	88 0f       	add	r24, r24
     e88:	69 7f       	andi	r22, 0xF9	; 249
     e8a:	68 2b       	or	r22, r24
	header.bits.retain = retained;
     e8c:	8a 85       	ldd	r24, Y+10	; 0x0a
     e8e:	80 fb       	bst	r24, 0
	writeChar(&ptr, header.byte); /* write header */
     e90:	60 f9       	bld	r22, 0
     e92:	ce 01       	movw	r24, r28

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
     e94:	01 96       	adiw	r24, 0x01	; 1
     e96:	df de       	rcall	.-578    	; 0xc56 <writeChar>
     e98:	b8 01       	movw	r22, r16
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	9a 81       	ldd	r25, Y+2	; 0x02
     e9e:	a6 de       	rcall	.-692    	; 0xbec <MQTTPacket_encode>
     ea0:	29 81       	ldd	r18, Y+1	; 0x01
     ea2:	3a 81       	ldd	r19, Y+2	; 0x02
     ea4:	82 0f       	add	r24, r18
     ea6:	93 1f       	adc	r25, r19

	writeMQTTString(&ptr, topicName);
     ea8:	9a 83       	std	Y+2, r25	; 0x02
     eaa:	89 83       	std	Y+1, r24	; 0x01
     eac:	2b 81       	ldd	r18, Y+3	; 0x03
     eae:	3c 81       	ldd	r19, Y+4	; 0x04
     eb0:	4d 81       	ldd	r20, Y+5	; 0x05
     eb2:	5e 81       	ldd	r21, Y+6	; 0x06
     eb4:	6f 81       	ldd	r22, Y+7	; 0x07
     eb6:	78 85       	ldd	r23, Y+8	; 0x08
     eb8:	ce 01       	movw	r24, r28

	if (qos > 0)
     eba:	01 96       	adiw	r24, 0x01	; 1
     ebc:	1a df       	rcall	.-460    	; 0xcf2 <writeMQTTString>
		writeInt(&ptr, packetid);
     ebe:	16 14       	cp	r1, r6
     ec0:	17 04       	cpc	r1, r7
     ec2:	24 f4       	brge	.+8      	; 0xecc <MQTTSerialize_publish+0xc0>
     ec4:	b7 01       	movw	r22, r14

	memcpy(ptr, payload, payloadlen);
     ec6:	ce 01       	movw	r24, r28
     ec8:	01 96       	adiw	r24, 0x01	; 1
     eca:	cf de       	rcall	.-610    	; 0xc6a <writeInt>
     ecc:	a6 01       	movw	r20, r12
     ece:	6f 8d       	ldd	r22, Y+31	; 0x1f
     ed0:	78 a1       	ldd	r23, Y+32	; 0x20
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
	ptr += payloadlen;

	rc = ptr - buf;
     ed4:	9a 81       	ldd	r25, Y+2	; 0x02
     ed6:	48 d4       	rcall	.+2192   	; 0x1768 <memcpy>
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	9a 81       	ldd	r25, Y+2	; 0x02
     edc:	8c 0d       	add	r24, r12
     ede:	9d 1d       	adc	r25, r13
     ee0:	84 19       	sub	r24, r4
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
     ee2:	95 09       	sbc	r25, r5
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <MQTTSerialize_publish+0xde>
	rc = ptr - buf;

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
     ee6:	8e ef       	ldi	r24, 0xFE	; 254
     ee8:	9f ef       	ldi	r25, 0xFF	; 255
     eea:	2a 96       	adiw	r28, 0x0a	; 10
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	f8 94       	cli
     ef0:	de bf       	out	0x3e, r29	; 62
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	cd bf       	out	0x3d, r28	; 61
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	1f 91       	pop	r17
     efc:	0f 91       	pop	r16
     efe:	ff 90       	pop	r15
     f00:	ef 90       	pop	r14
     f02:	df 90       	pop	r13
     f04:	cf 90       	pop	r12
     f06:	bf 90       	pop	r11
     f08:	af 90       	pop	r10
     f0a:	9f 90       	pop	r9
     f0c:	8f 90       	pop	r8
     f0e:	7f 90       	pop	r7
     f10:	6f 90       	pop	r6
     f12:	5f 90       	pop	r5
     f14:	4f 90       	pop	r4
     f16:	3f 90       	pop	r3
     f18:	2f 90       	pop	r2
     f1a:	08 95       	ret

00000f1c <mqtt_packet>:
#include "string.h"
#include "MQTT_functions.h" 

/////////////MQTT////////////////////
int mqtt_packet(char *payload, char *package, int buflen)
{
     f1c:	2f 92       	push	r2
     f1e:	3f 92       	push	r3
     f20:	4f 92       	push	r4
     f22:	5f 92       	push	r5
     f24:	6f 92       	push	r6
     f26:	7f 92       	push	r7
     f28:	8f 92       	push	r8
     f2a:	9f 92       	push	r9
     f2c:	af 92       	push	r10
     f2e:	bf 92       	push	r11
     f30:	cf 92       	push	r12
     f32:	df 92       	push	r13
     f34:	ef 92       	push	r14
     f36:	ff 92       	push	r15
     f38:	0f 93       	push	r16
     f3a:	1f 93       	push	r17
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	e7 97       	sbiw	r28, 0x37	; 55
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	f8 2e       	mov	r15, r24
     f52:	e9 2e       	mov	r14, r25
     f54:	1b 01       	movw	r2, r22
     f56:	2a 01       	movw	r4, r20
	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
     f58:	81 e3       	ldi	r24, 0x31	; 49
     f5a:	e2 e0       	ldi	r30, 0x02	; 2
     f5c:	f1 e0       	ldi	r31, 0x01	; 1
     f5e:	de 01       	movw	r26, r28
     f60:	11 96       	adiw	r26, 0x01	; 1
     f62:	01 90       	ld	r0, Z+
     f64:	0d 92       	st	X+, r0
     f66:	8a 95       	dec	r24
     f68:	e1 f7       	brne	.-8      	; 0xf62 <mqtt_packet+0x46>
	
	//volatile int buflen = sizeof(&package);
	char buf[256];
	//buflen = sizeof(buf);
	MQTTString topicString = MQTTString_initializer;
     f6a:	1d aa       	std	Y+53, r1	; 0x35
     f6c:	1c aa       	std	Y+52, r1	; 0x34
     f6e:	1f aa       	std	Y+55, r1	; 0x37
     f70:	1e aa       	std	Y+54, r1	; 0x36
	
	int payloadlen = strlen(payload);
     f72:	ef 2d       	mov	r30, r15
     f74:	f9 2f       	mov	r31, r25
     f76:	df 01       	movw	r26, r30
     f78:	0d 90       	ld	r0, X+
     f7a:	00 20       	and	r0, r0
     f7c:	e9 f7       	brne	.-6      	; 0xf78 <mqtt_packet+0x5c>
     f7e:	11 97       	sbiw	r26, 0x01	; 1
     f80:	8d 01       	movw	r16, r26
     f82:	0e 1b       	sub	r16, r30
     f84:	1f 0b       	sbc	r17, r31
	int len = 0;
	
	data.clientID.cstring = "LE";
     f86:	8d e8       	ldi	r24, 0x8D	; 141
     f88:	93 e0       	ldi	r25, 0x03	; 3
     f8a:	99 87       	std	Y+9, r25	; 0x09
     f8c:	88 87       	std	Y+8, r24	; 0x08
	data.keepAliveInterval = 20;
     f8e:	84 e1       	ldi	r24, 0x14	; 20
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	9f 87       	std	Y+15, r25	; 0x0f
     f94:	8e 87       	std	Y+14, r24	; 0x0e
	data.cleansession = 1;
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	88 8b       	std	Y+16, r24	; 0x10
	data.username.cstring = "";
     f9a:	84 e8       	ldi	r24, 0x84	; 132
     f9c:	92 e0       	ldi	r25, 0x02	; 2
     f9e:	9f a3       	std	Y+39, r25	; 0x27
     fa0:	8e a3       	std	Y+38, r24	; 0x26
	data.password.cstring = "";
     fa2:	9d a7       	std	Y+45, r25	; 0x2d
     fa4:	8c a7       	std	Y+44, r24	; 0x2c
	data.MQTTVersion = 4;
     fa6:	84 e0       	ldi	r24, 0x04	; 4
     fa8:	8f 83       	std	Y+7, r24	; 0x07

	len = MQTTSerialize_connect((unsigned char *)package, buflen, &data);
     faa:	ae 01       	movw	r20, r28
     fac:	4f 5f       	subi	r20, 0xFF	; 255
     fae:	5f 4f       	sbci	r21, 0xFF	; 255
     fb0:	b2 01       	movw	r22, r4
     fb2:	c1 01       	movw	r24, r2
     fb4:	28 dd       	rcall	.-1456   	; 0xa06 <MQTTSerialize_connect>
     fb6:	3c 01       	movw	r6, r24
	
	topicString.cstring = "LE/0"; //MAKE A GENERAL CONFIGUREATION OF THIS PARAMETER
     fb8:	80 e9       	ldi	r24, 0x90	; 144
     fba:	93 e0       	ldi	r25, 0x03	; 3
     fbc:	9b ab       	std	Y+51, r25	; 0x33
     fbe:	8a ab       	std	Y+50, r24	; 0x32
	
	len += MQTTSerialize_publish((unsigned char *)(package + len), buflen - len, 0, 0, 0, 0, topicString, (unsigned char *)payload, payloadlen);
     fc0:	b2 01       	movw	r22, r4
     fc2:	66 19       	sub	r22, r6
     fc4:	77 09       	sbc	r23, r7
     fc6:	1f 93       	push	r17
     fc8:	0f 93       	push	r16
     fca:	ef 92       	push	r14
     fcc:	ff 92       	push	r15
     fce:	8a a8       	ldd	r8, Y+50	; 0x32
     fd0:	9b a8       	ldd	r9, Y+51	; 0x33
     fd2:	ac a8       	ldd	r10, Y+52	; 0x34
     fd4:	bd a8       	ldd	r11, Y+53	; 0x35
     fd6:	ce a8       	ldd	r12, Y+54	; 0x36
     fd8:	df a8       	ldd	r13, Y+55	; 0x37
     fda:	e1 2c       	mov	r14, r1
     fdc:	f1 2c       	mov	r15, r1
     fde:	00 e0       	ldi	r16, 0x00	; 0
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	40 e0       	ldi	r20, 0x00	; 0
     fe6:	c1 01       	movw	r24, r2
     fe8:	86 0d       	add	r24, r6
     fea:	97 1d       	adc	r25, r7
     fec:	0f df       	rcall	.-482    	; 0xe0c <MQTTSerialize_publish>
     fee:	68 0e       	add	r6, r24
     ff0:	79 1e       	adc	r7, r25
		
	len += MQTTSerialize_disconnect((unsigned char *)(package + len), buflen - len);
     ff2:	b2 01       	movw	r22, r4
     ff4:	66 19       	sub	r22, r6
     ff6:	77 09       	sbc	r23, r7
     ff8:	c1 01       	movw	r24, r2
     ffa:	86 0d       	add	r24, r6
     ffc:	97 1d       	adc	r25, r7
     ffe:	f3 dd       	rcall	.-1050   	; 0xbe6 <MQTTSerialize_disconnect>
	
	exit:
	
	//return 0;
	return len;
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
}
    1008:	86 0d       	add	r24, r6
    100a:	97 1d       	adc	r25, r7
    100c:	e7 96       	adiw	r28, 0x37	; 55
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	df 91       	pop	r29
    101a:	cf 91       	pop	r28
    101c:	1f 91       	pop	r17
    101e:	0f 91       	pop	r16
    1020:	ff 90       	pop	r15
    1022:	ef 90       	pop	r14
    1024:	df 90       	pop	r13
    1026:	cf 90       	pop	r12
    1028:	bf 90       	pop	r11
    102a:	af 90       	pop	r10
    102c:	9f 90       	pop	r9
    102e:	8f 90       	pop	r8
    1030:	7f 90       	pop	r7
    1032:	6f 90       	pop	r6
    1034:	5f 90       	pop	r5
    1036:	4f 90       	pop	r4
    1038:	3f 90       	pop	r3
    103a:	2f 90       	pop	r2
    103c:	08 95       	ret

0000103e <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    103e:	08 95       	ret

00001040 <__cmpsf2>:
    1040:	40 d0       	rcall	.+128    	; 0x10c2 <__fp_cmp>
    1042:	08 f4       	brcc	.+2      	; 0x1046 <__cmpsf2+0x6>
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	08 95       	ret

00001048 <__floatunsisf>:
    1048:	e8 94       	clt
    104a:	09 c0       	rjmp	.+18     	; 0x105e <__floatsisf+0x12>

0000104c <__floatsisf>:
    104c:	97 fb       	bst	r25, 7
    104e:	3e f4       	brtc	.+14     	; 0x105e <__floatsisf+0x12>
    1050:	90 95       	com	r25
    1052:	80 95       	com	r24
    1054:	70 95       	com	r23
    1056:	61 95       	neg	r22
    1058:	7f 4f       	sbci	r23, 0xFF	; 255
    105a:	8f 4f       	sbci	r24, 0xFF	; 255
    105c:	9f 4f       	sbci	r25, 0xFF	; 255
    105e:	99 23       	and	r25, r25
    1060:	a9 f0       	breq	.+42     	; 0x108c <__floatsisf+0x40>
    1062:	f9 2f       	mov	r31, r25
    1064:	96 e9       	ldi	r25, 0x96	; 150
    1066:	bb 27       	eor	r27, r27
    1068:	93 95       	inc	r25
    106a:	f6 95       	lsr	r31
    106c:	87 95       	ror	r24
    106e:	77 95       	ror	r23
    1070:	67 95       	ror	r22
    1072:	b7 95       	ror	r27
    1074:	f1 11       	cpse	r31, r1
    1076:	f8 cf       	rjmp	.-16     	; 0x1068 <__floatsisf+0x1c>
    1078:	fa f4       	brpl	.+62     	; 0x10b8 <__floatsisf+0x6c>
    107a:	bb 0f       	add	r27, r27
    107c:	11 f4       	brne	.+4      	; 0x1082 <__floatsisf+0x36>
    107e:	60 ff       	sbrs	r22, 0
    1080:	1b c0       	rjmp	.+54     	; 0x10b8 <__floatsisf+0x6c>
    1082:	6f 5f       	subi	r22, 0xFF	; 255
    1084:	7f 4f       	sbci	r23, 0xFF	; 255
    1086:	8f 4f       	sbci	r24, 0xFF	; 255
    1088:	9f 4f       	sbci	r25, 0xFF	; 255
    108a:	16 c0       	rjmp	.+44     	; 0x10b8 <__floatsisf+0x6c>
    108c:	88 23       	and	r24, r24
    108e:	11 f0       	breq	.+4      	; 0x1094 <__floatsisf+0x48>
    1090:	96 e9       	ldi	r25, 0x96	; 150
    1092:	11 c0       	rjmp	.+34     	; 0x10b6 <__floatsisf+0x6a>
    1094:	77 23       	and	r23, r23
    1096:	21 f0       	breq	.+8      	; 0x10a0 <__floatsisf+0x54>
    1098:	9e e8       	ldi	r25, 0x8E	; 142
    109a:	87 2f       	mov	r24, r23
    109c:	76 2f       	mov	r23, r22
    109e:	05 c0       	rjmp	.+10     	; 0x10aa <__floatsisf+0x5e>
    10a0:	66 23       	and	r22, r22
    10a2:	71 f0       	breq	.+28     	; 0x10c0 <__floatsisf+0x74>
    10a4:	96 e8       	ldi	r25, 0x86	; 134
    10a6:	86 2f       	mov	r24, r22
    10a8:	70 e0       	ldi	r23, 0x00	; 0
    10aa:	60 e0       	ldi	r22, 0x00	; 0
    10ac:	2a f0       	brmi	.+10     	; 0x10b8 <__floatsisf+0x6c>
    10ae:	9a 95       	dec	r25
    10b0:	66 0f       	add	r22, r22
    10b2:	77 1f       	adc	r23, r23
    10b4:	88 1f       	adc	r24, r24
    10b6:	da f7       	brpl	.-10     	; 0x10ae <__floatsisf+0x62>
    10b8:	88 0f       	add	r24, r24
    10ba:	96 95       	lsr	r25
    10bc:	87 95       	ror	r24
    10be:	97 f9       	bld	r25, 7
    10c0:	08 95       	ret

000010c2 <__fp_cmp>:
    10c2:	99 0f       	add	r25, r25
    10c4:	00 08       	sbc	r0, r0
    10c6:	55 0f       	add	r21, r21
    10c8:	aa 0b       	sbc	r26, r26
    10ca:	e0 e8       	ldi	r30, 0x80	; 128
    10cc:	fe ef       	ldi	r31, 0xFE	; 254
    10ce:	16 16       	cp	r1, r22
    10d0:	17 06       	cpc	r1, r23
    10d2:	e8 07       	cpc	r30, r24
    10d4:	f9 07       	cpc	r31, r25
    10d6:	c0 f0       	brcs	.+48     	; 0x1108 <__fp_cmp+0x46>
    10d8:	12 16       	cp	r1, r18
    10da:	13 06       	cpc	r1, r19
    10dc:	e4 07       	cpc	r30, r20
    10de:	f5 07       	cpc	r31, r21
    10e0:	98 f0       	brcs	.+38     	; 0x1108 <__fp_cmp+0x46>
    10e2:	62 1b       	sub	r22, r18
    10e4:	73 0b       	sbc	r23, r19
    10e6:	84 0b       	sbc	r24, r20
    10e8:	95 0b       	sbc	r25, r21
    10ea:	39 f4       	brne	.+14     	; 0x10fa <__fp_cmp+0x38>
    10ec:	0a 26       	eor	r0, r26
    10ee:	61 f0       	breq	.+24     	; 0x1108 <__fp_cmp+0x46>
    10f0:	23 2b       	or	r18, r19
    10f2:	24 2b       	or	r18, r20
    10f4:	25 2b       	or	r18, r21
    10f6:	21 f4       	brne	.+8      	; 0x1100 <__fp_cmp+0x3e>
    10f8:	08 95       	ret
    10fa:	0a 26       	eor	r0, r26
    10fc:	09 f4       	brne	.+2      	; 0x1100 <__fp_cmp+0x3e>
    10fe:	a1 40       	sbci	r26, 0x01	; 1
    1100:	a6 95       	lsr	r26
    1102:	8f ef       	ldi	r24, 0xFF	; 255
    1104:	81 1d       	adc	r24, r1
    1106:	81 1d       	adc	r24, r1
    1108:	08 95       	ret

0000110a <__gesf2>:
    110a:	db df       	rcall	.-74     	; 0x10c2 <__fp_cmp>
    110c:	08 f4       	brcc	.+2      	; 0x1110 <__gesf2+0x6>
    110e:	8f ef       	ldi	r24, 0xFF	; 255
    1110:	08 95       	ret

00001112 <pow>:
    1112:	fa 01       	movw	r30, r20
    1114:	ee 0f       	add	r30, r30
    1116:	ff 1f       	adc	r31, r31
    1118:	30 96       	adiw	r30, 0x00	; 0
    111a:	21 05       	cpc	r18, r1
    111c:	31 05       	cpc	r19, r1
    111e:	99 f1       	breq	.+102    	; 0x1186 <pow+0x74>
    1120:	61 15       	cp	r22, r1
    1122:	71 05       	cpc	r23, r1
    1124:	61 f4       	brne	.+24     	; 0x113e <pow+0x2c>
    1126:	80 38       	cpi	r24, 0x80	; 128
    1128:	bf e3       	ldi	r27, 0x3F	; 63
    112a:	9b 07       	cpc	r25, r27
    112c:	49 f1       	breq	.+82     	; 0x1180 <pow+0x6e>
    112e:	68 94       	set
    1130:	90 38       	cpi	r25, 0x80	; 128
    1132:	81 05       	cpc	r24, r1
    1134:	61 f0       	breq	.+24     	; 0x114e <pow+0x3c>
    1136:	80 38       	cpi	r24, 0x80	; 128
    1138:	bf ef       	ldi	r27, 0xFF	; 255
    113a:	9b 07       	cpc	r25, r27
    113c:	41 f0       	breq	.+16     	; 0x114e <pow+0x3c>
    113e:	99 23       	and	r25, r25
    1140:	42 f5       	brpl	.+80     	; 0x1192 <pow+0x80>
    1142:	ff 3f       	cpi	r31, 0xFF	; 255
    1144:	e1 05       	cpc	r30, r1
    1146:	31 05       	cpc	r19, r1
    1148:	21 05       	cpc	r18, r1
    114a:	11 f1       	breq	.+68     	; 0x1190 <pow+0x7e>
    114c:	e8 94       	clt
    114e:	08 94       	sec
    1150:	e7 95       	ror	r30
    1152:	d9 01       	movw	r26, r18
    1154:	aa 23       	and	r26, r26
    1156:	29 f4       	brne	.+10     	; 0x1162 <pow+0x50>
    1158:	ab 2f       	mov	r26, r27
    115a:	be 2f       	mov	r27, r30
    115c:	f8 5f       	subi	r31, 0xF8	; 248
    115e:	d0 f3       	brcs	.-12     	; 0x1154 <pow+0x42>
    1160:	10 c0       	rjmp	.+32     	; 0x1182 <pow+0x70>
    1162:	ff 5f       	subi	r31, 0xFF	; 255
    1164:	70 f4       	brcc	.+28     	; 0x1182 <pow+0x70>
    1166:	a6 95       	lsr	r26
    1168:	e0 f7       	brcc	.-8      	; 0x1162 <pow+0x50>
    116a:	f7 39       	cpi	r31, 0x97	; 151
    116c:	50 f0       	brcs	.+20     	; 0x1182 <pow+0x70>
    116e:	19 f0       	breq	.+6      	; 0x1176 <pow+0x64>
    1170:	ff 3a       	cpi	r31, 0xAF	; 175
    1172:	38 f4       	brcc	.+14     	; 0x1182 <pow+0x70>
    1174:	9f 77       	andi	r25, 0x7F	; 127
    1176:	9f 93       	push	r25
    1178:	0c d0       	rcall	.+24     	; 0x1192 <pow+0x80>
    117a:	0f 90       	pop	r0
    117c:	07 fc       	sbrc	r0, 7
    117e:	90 58       	subi	r25, 0x80	; 128
    1180:	08 95       	ret
    1182:	3e f0       	brts	.+14     	; 0x1192 <pow+0x80>
    1184:	49 c0       	rjmp	.+146    	; 0x1218 <__fp_nan>
    1186:	60 e0       	ldi	r22, 0x00	; 0
    1188:	70 e0       	ldi	r23, 0x00	; 0
    118a:	80 e8       	ldi	r24, 0x80	; 128
    118c:	9f e3       	ldi	r25, 0x3F	; 63
    118e:	08 95       	ret
    1190:	4f e7       	ldi	r20, 0x7F	; 127
    1192:	9f 77       	andi	r25, 0x7F	; 127
    1194:	5f 93       	push	r21
    1196:	4f 93       	push	r20
    1198:	3f 93       	push	r19
    119a:	2f 93       	push	r18
    119c:	d0 d0       	rcall	.+416    	; 0x133e <log>
    119e:	2f 91       	pop	r18
    11a0:	3f 91       	pop	r19
    11a2:	4f 91       	pop	r20
    11a4:	5f 91       	pop	r21
    11a6:	3e d1       	rcall	.+636    	; 0x1424 <__mulsf3>
    11a8:	05 c0       	rjmp	.+10     	; 0x11b4 <exp>
    11aa:	19 f4       	brne	.+6      	; 0x11b2 <pow+0xa0>
    11ac:	0e f0       	brts	.+2      	; 0x11b0 <pow+0x9e>
    11ae:	2e c0       	rjmp	.+92     	; 0x120c <__fp_inf>
    11b0:	7d c0       	rjmp	.+250    	; 0x12ac <__fp_zero>
    11b2:	32 c0       	rjmp	.+100    	; 0x1218 <__fp_nan>

000011b4 <exp>:
    11b4:	61 d0       	rcall	.+194    	; 0x1278 <__fp_splitA>
    11b6:	c8 f3       	brcs	.-14     	; 0x11aa <pow+0x98>
    11b8:	96 38       	cpi	r25, 0x86	; 134
    11ba:	c0 f7       	brcc	.-16     	; 0x11ac <pow+0x9a>
    11bc:	07 f8       	bld	r0, 7
    11be:	0f 92       	push	r0
    11c0:	e8 94       	clt
    11c2:	2b e3       	ldi	r18, 0x3B	; 59
    11c4:	3a ea       	ldi	r19, 0xAA	; 170
    11c6:	48 eb       	ldi	r20, 0xB8	; 184
    11c8:	5f e7       	ldi	r21, 0x7F	; 127
    11ca:	3a d1       	rcall	.+628    	; 0x1440 <__mulsf3_pse>
    11cc:	0f 92       	push	r0
    11ce:	0f 92       	push	r0
    11d0:	0f 92       	push	r0
    11d2:	4d b7       	in	r20, 0x3d	; 61
    11d4:	5e b7       	in	r21, 0x3e	; 62
    11d6:	0f 92       	push	r0
    11d8:	f2 d0       	rcall	.+484    	; 0x13be <modf>
    11da:	e4 e9       	ldi	r30, 0x94	; 148
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	1f d0       	rcall	.+62     	; 0x121e <__fp_powser>
    11e0:	4f 91       	pop	r20
    11e2:	5f 91       	pop	r21
    11e4:	ef 91       	pop	r30
    11e6:	ff 91       	pop	r31
    11e8:	e5 95       	asr	r30
    11ea:	ee 1f       	adc	r30, r30
    11ec:	ff 1f       	adc	r31, r31
    11ee:	49 f0       	breq	.+18     	; 0x1202 <exp+0x4e>
    11f0:	fe 57       	subi	r31, 0x7E	; 126
    11f2:	e0 68       	ori	r30, 0x80	; 128
    11f4:	44 27       	eor	r20, r20
    11f6:	ee 0f       	add	r30, r30
    11f8:	44 1f       	adc	r20, r20
    11fa:	fa 95       	dec	r31
    11fc:	e1 f7       	brne	.-8      	; 0x11f6 <exp+0x42>
    11fe:	41 95       	neg	r20
    1200:	55 0b       	sbc	r21, r21
    1202:	64 d0       	rcall	.+200    	; 0x12cc <ldexp>
    1204:	0f 90       	pop	r0
    1206:	07 fe       	sbrs	r0, 7
    1208:	58 c0       	rjmp	.+176    	; 0x12ba <inverse>
    120a:	08 95       	ret

0000120c <__fp_inf>:
    120c:	97 f9       	bld	r25, 7
    120e:	9f 67       	ori	r25, 0x7F	; 127
    1210:	80 e8       	ldi	r24, 0x80	; 128
    1212:	70 e0       	ldi	r23, 0x00	; 0
    1214:	60 e0       	ldi	r22, 0x00	; 0
    1216:	08 95       	ret

00001218 <__fp_nan>:
    1218:	9f ef       	ldi	r25, 0xFF	; 255
    121a:	80 ec       	ldi	r24, 0xC0	; 192
    121c:	08 95       	ret

0000121e <__fp_powser>:
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	1f 93       	push	r17
    1224:	0f 93       	push	r16
    1226:	ff 92       	push	r15
    1228:	ef 92       	push	r14
    122a:	df 92       	push	r13
    122c:	7b 01       	movw	r14, r22
    122e:	8c 01       	movw	r16, r24
    1230:	68 94       	set
    1232:	05 c0       	rjmp	.+10     	; 0x123e <__fp_powser+0x20>
    1234:	da 2e       	mov	r13, r26
    1236:	ef 01       	movw	r28, r30
    1238:	01 d1       	rcall	.+514    	; 0x143c <__mulsf3x>
    123a:	fe 01       	movw	r30, r28
    123c:	e8 94       	clt
    123e:	a5 91       	lpm	r26, Z+
    1240:	25 91       	lpm	r18, Z+
    1242:	35 91       	lpm	r19, Z+
    1244:	45 91       	lpm	r20, Z+
    1246:	55 91       	lpm	r21, Z+
    1248:	ae f3       	brts	.-22     	; 0x1234 <__fp_powser+0x16>
    124a:	ef 01       	movw	r28, r30
    124c:	60 d1       	rcall	.+704    	; 0x150e <__addsf3x>
    124e:	fe 01       	movw	r30, r28
    1250:	97 01       	movw	r18, r14
    1252:	a8 01       	movw	r20, r16
    1254:	da 94       	dec	r13
    1256:	79 f7       	brne	.-34     	; 0x1236 <__fp_powser+0x18>
    1258:	df 90       	pop	r13
    125a:	ef 90       	pop	r14
    125c:	ff 90       	pop	r15
    125e:	0f 91       	pop	r16
    1260:	1f 91       	pop	r17
    1262:	cf 91       	pop	r28
    1264:	df 91       	pop	r29
    1266:	08 95       	ret

00001268 <__fp_split3>:
    1268:	57 fd       	sbrc	r21, 7
    126a:	90 58       	subi	r25, 0x80	; 128
    126c:	44 0f       	add	r20, r20
    126e:	55 1f       	adc	r21, r21
    1270:	59 f0       	breq	.+22     	; 0x1288 <__fp_splitA+0x10>
    1272:	5f 3f       	cpi	r21, 0xFF	; 255
    1274:	71 f0       	breq	.+28     	; 0x1292 <__fp_splitA+0x1a>
    1276:	47 95       	ror	r20

00001278 <__fp_splitA>:
    1278:	88 0f       	add	r24, r24
    127a:	97 fb       	bst	r25, 7
    127c:	99 1f       	adc	r25, r25
    127e:	61 f0       	breq	.+24     	; 0x1298 <__fp_splitA+0x20>
    1280:	9f 3f       	cpi	r25, 0xFF	; 255
    1282:	79 f0       	breq	.+30     	; 0x12a2 <__fp_splitA+0x2a>
    1284:	87 95       	ror	r24
    1286:	08 95       	ret
    1288:	12 16       	cp	r1, r18
    128a:	13 06       	cpc	r1, r19
    128c:	14 06       	cpc	r1, r20
    128e:	55 1f       	adc	r21, r21
    1290:	f2 cf       	rjmp	.-28     	; 0x1276 <__fp_split3+0xe>
    1292:	46 95       	lsr	r20
    1294:	f1 df       	rcall	.-30     	; 0x1278 <__fp_splitA>
    1296:	08 c0       	rjmp	.+16     	; 0x12a8 <__fp_splitA+0x30>
    1298:	16 16       	cp	r1, r22
    129a:	17 06       	cpc	r1, r23
    129c:	18 06       	cpc	r1, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	f1 cf       	rjmp	.-30     	; 0x1284 <__fp_splitA+0xc>
    12a2:	86 95       	lsr	r24
    12a4:	71 05       	cpc	r23, r1
    12a6:	61 05       	cpc	r22, r1
    12a8:	08 94       	sec
    12aa:	08 95       	ret

000012ac <__fp_zero>:
    12ac:	e8 94       	clt

000012ae <__fp_szero>:
    12ae:	bb 27       	eor	r27, r27
    12b0:	66 27       	eor	r22, r22
    12b2:	77 27       	eor	r23, r23
    12b4:	cb 01       	movw	r24, r22
    12b6:	97 f9       	bld	r25, 7
    12b8:	08 95       	ret

000012ba <inverse>:
    12ba:	9b 01       	movw	r18, r22
    12bc:	ac 01       	movw	r20, r24
    12be:	60 e0       	ldi	r22, 0x00	; 0
    12c0:	70 e0       	ldi	r23, 0x00	; 0
    12c2:	80 e8       	ldi	r24, 0x80	; 128
    12c4:	9f e3       	ldi	r25, 0x3F	; 63
    12c6:	76 c1       	rjmp	.+748    	; 0x15b4 <__divsf3>
    12c8:	a1 cf       	rjmp	.-190    	; 0x120c <__fp_inf>
    12ca:	dc c1       	rjmp	.+952    	; 0x1684 <__fp_mpack>

000012cc <ldexp>:
    12cc:	d5 df       	rcall	.-86     	; 0x1278 <__fp_splitA>
    12ce:	e8 f3       	brcs	.-6      	; 0x12ca <inverse+0x10>
    12d0:	99 23       	and	r25, r25
    12d2:	d9 f3       	breq	.-10     	; 0x12ca <inverse+0x10>
    12d4:	94 0f       	add	r25, r20
    12d6:	51 1d       	adc	r21, r1
    12d8:	bb f3       	brvs	.-18     	; 0x12c8 <inverse+0xe>
    12da:	91 50       	subi	r25, 0x01	; 1
    12dc:	50 40       	sbci	r21, 0x00	; 0
    12de:	94 f0       	brlt	.+36     	; 0x1304 <ldexp+0x38>
    12e0:	59 f0       	breq	.+22     	; 0x12f8 <ldexp+0x2c>
    12e2:	88 23       	and	r24, r24
    12e4:	32 f0       	brmi	.+12     	; 0x12f2 <ldexp+0x26>
    12e6:	66 0f       	add	r22, r22
    12e8:	77 1f       	adc	r23, r23
    12ea:	88 1f       	adc	r24, r24
    12ec:	91 50       	subi	r25, 0x01	; 1
    12ee:	50 40       	sbci	r21, 0x00	; 0
    12f0:	c1 f7       	brne	.-16     	; 0x12e2 <ldexp+0x16>
    12f2:	9e 3f       	cpi	r25, 0xFE	; 254
    12f4:	51 05       	cpc	r21, r1
    12f6:	44 f7       	brge	.-48     	; 0x12c8 <inverse+0xe>
    12f8:	88 0f       	add	r24, r24
    12fa:	91 1d       	adc	r25, r1
    12fc:	96 95       	lsr	r25
    12fe:	87 95       	ror	r24
    1300:	97 f9       	bld	r25, 7
    1302:	08 95       	ret
    1304:	5f 3f       	cpi	r21, 0xFF	; 255
    1306:	ac f0       	brlt	.+42     	; 0x1332 <ldexp+0x66>
    1308:	98 3e       	cpi	r25, 0xE8	; 232
    130a:	9c f0       	brlt	.+38     	; 0x1332 <ldexp+0x66>
    130c:	bb 27       	eor	r27, r27
    130e:	86 95       	lsr	r24
    1310:	77 95       	ror	r23
    1312:	67 95       	ror	r22
    1314:	b7 95       	ror	r27
    1316:	08 f4       	brcc	.+2      	; 0x131a <ldexp+0x4e>
    1318:	b1 60       	ori	r27, 0x01	; 1
    131a:	93 95       	inc	r25
    131c:	c1 f7       	brne	.-16     	; 0x130e <ldexp+0x42>
    131e:	bb 0f       	add	r27, r27
    1320:	58 f7       	brcc	.-42     	; 0x12f8 <ldexp+0x2c>
    1322:	11 f4       	brne	.+4      	; 0x1328 <ldexp+0x5c>
    1324:	60 ff       	sbrs	r22, 0
    1326:	e8 cf       	rjmp	.-48     	; 0x12f8 <ldexp+0x2c>
    1328:	6f 5f       	subi	r22, 0xFF	; 255
    132a:	7f 4f       	sbci	r23, 0xFF	; 255
    132c:	8f 4f       	sbci	r24, 0xFF	; 255
    132e:	9f 4f       	sbci	r25, 0xFF	; 255
    1330:	e3 cf       	rjmp	.-58     	; 0x12f8 <ldexp+0x2c>
    1332:	bd cf       	rjmp	.-134    	; 0x12ae <__fp_szero>
    1334:	0e f0       	brts	.+2      	; 0x1338 <ldexp+0x6c>
    1336:	a6 c1       	rjmp	.+844    	; 0x1684 <__fp_mpack>
    1338:	6f cf       	rjmp	.-290    	; 0x1218 <__fp_nan>
    133a:	68 94       	set
    133c:	67 cf       	rjmp	.-306    	; 0x120c <__fp_inf>

0000133e <log>:
    133e:	9c df       	rcall	.-200    	; 0x1278 <__fp_splitA>
    1340:	c8 f3       	brcs	.-14     	; 0x1334 <ldexp+0x68>
    1342:	99 23       	and	r25, r25
    1344:	d1 f3       	breq	.-12     	; 0x133a <ldexp+0x6e>
    1346:	c6 f3       	brts	.-16     	; 0x1338 <ldexp+0x6c>
    1348:	df 93       	push	r29
    134a:	cf 93       	push	r28
    134c:	1f 93       	push	r17
    134e:	0f 93       	push	r16
    1350:	ff 92       	push	r15
    1352:	c9 2f       	mov	r28, r25
    1354:	dd 27       	eor	r29, r29
    1356:	88 23       	and	r24, r24
    1358:	2a f0       	brmi	.+10     	; 0x1364 <log+0x26>
    135a:	21 97       	sbiw	r28, 0x01	; 1
    135c:	66 0f       	add	r22, r22
    135e:	77 1f       	adc	r23, r23
    1360:	88 1f       	adc	r24, r24
    1362:	da f7       	brpl	.-10     	; 0x135a <log+0x1c>
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	40 e8       	ldi	r20, 0x80	; 128
    136a:	5f eb       	ldi	r21, 0xBF	; 191
    136c:	9f e3       	ldi	r25, 0x3F	; 63
    136e:	88 39       	cpi	r24, 0x98	; 152
    1370:	20 f0       	brcs	.+8      	; 0x137a <log+0x3c>
    1372:	80 3e       	cpi	r24, 0xE0	; 224
    1374:	30 f0       	brcs	.+12     	; 0x1382 <log+0x44>
    1376:	21 96       	adiw	r28, 0x01	; 1
    1378:	8f 77       	andi	r24, 0x7F	; 127
    137a:	b8 d0       	rcall	.+368    	; 0x14ec <__addsf3>
    137c:	ec eb       	ldi	r30, 0xBC	; 188
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	03 c0       	rjmp	.+6      	; 0x1388 <log+0x4a>
    1382:	b4 d0       	rcall	.+360    	; 0x14ec <__addsf3>
    1384:	e9 ee       	ldi	r30, 0xE9	; 233
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	4a df       	rcall	.-364    	; 0x121e <__fp_powser>
    138a:	8b 01       	movw	r16, r22
    138c:	be 01       	movw	r22, r28
    138e:	ec 01       	movw	r28, r24
    1390:	fb 2e       	mov	r15, r27
    1392:	6f 57       	subi	r22, 0x7F	; 127
    1394:	71 09       	sbc	r23, r1
    1396:	75 95       	asr	r23
    1398:	77 1f       	adc	r23, r23
    139a:	88 0b       	sbc	r24, r24
    139c:	99 0b       	sbc	r25, r25
    139e:	56 de       	rcall	.-852    	; 0x104c <__floatsisf>
    13a0:	28 e1       	ldi	r18, 0x18	; 24
    13a2:	32 e7       	ldi	r19, 0x72	; 114
    13a4:	41 e3       	ldi	r20, 0x31	; 49
    13a6:	5f e3       	ldi	r21, 0x3F	; 63
    13a8:	49 d0       	rcall	.+146    	; 0x143c <__mulsf3x>
    13aa:	af 2d       	mov	r26, r15
    13ac:	98 01       	movw	r18, r16
    13ae:	ae 01       	movw	r20, r28
    13b0:	ff 90       	pop	r15
    13b2:	0f 91       	pop	r16
    13b4:	1f 91       	pop	r17
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	a9 d0       	rcall	.+338    	; 0x150e <__addsf3x>
    13bc:	7f c1       	rjmp	.+766    	; 0x16bc <__fp_round>

000013be <modf>:
    13be:	fa 01       	movw	r30, r20
    13c0:	dc 01       	movw	r26, r24
    13c2:	aa 0f       	add	r26, r26
    13c4:	bb 1f       	adc	r27, r27
    13c6:	9b 01       	movw	r18, r22
    13c8:	ac 01       	movw	r20, r24
    13ca:	bf 57       	subi	r27, 0x7F	; 127
    13cc:	28 f4       	brcc	.+10     	; 0x13d8 <modf+0x1a>
    13ce:	22 27       	eor	r18, r18
    13d0:	33 27       	eor	r19, r19
    13d2:	44 27       	eor	r20, r20
    13d4:	50 78       	andi	r21, 0x80	; 128
    13d6:	1f c0       	rjmp	.+62     	; 0x1416 <modf+0x58>
    13d8:	b7 51       	subi	r27, 0x17	; 23
    13da:	88 f4       	brcc	.+34     	; 0x13fe <modf+0x40>
    13dc:	ab 2f       	mov	r26, r27
    13de:	00 24       	eor	r0, r0
    13e0:	46 95       	lsr	r20
    13e2:	37 95       	ror	r19
    13e4:	27 95       	ror	r18
    13e6:	01 1c       	adc	r0, r1
    13e8:	a3 95       	inc	r26
    13ea:	d2 f3       	brmi	.-12     	; 0x13e0 <modf+0x22>
    13ec:	00 20       	and	r0, r0
    13ee:	69 f0       	breq	.+26     	; 0x140a <modf+0x4c>
    13f0:	22 0f       	add	r18, r18
    13f2:	33 1f       	adc	r19, r19
    13f4:	44 1f       	adc	r20, r20
    13f6:	b3 95       	inc	r27
    13f8:	da f3       	brmi	.-10     	; 0x13f0 <modf+0x32>
    13fa:	0d d0       	rcall	.+26     	; 0x1416 <modf+0x58>
    13fc:	76 c0       	rjmp	.+236    	; 0x14ea <__subsf3>
    13fe:	61 30       	cpi	r22, 0x01	; 1
    1400:	71 05       	cpc	r23, r1
    1402:	a0 e8       	ldi	r26, 0x80	; 128
    1404:	8a 07       	cpc	r24, r26
    1406:	b9 46       	sbci	r27, 0x69	; 105
    1408:	30 f4       	brcc	.+12     	; 0x1416 <modf+0x58>
    140a:	9b 01       	movw	r18, r22
    140c:	ac 01       	movw	r20, r24
    140e:	66 27       	eor	r22, r22
    1410:	77 27       	eor	r23, r23
    1412:	88 27       	eor	r24, r24
    1414:	90 78       	andi	r25, 0x80	; 128
    1416:	30 96       	adiw	r30, 0x00	; 0
    1418:	21 f0       	breq	.+8      	; 0x1422 <modf+0x64>
    141a:	20 83       	st	Z, r18
    141c:	31 83       	std	Z+1, r19	; 0x01
    141e:	42 83       	std	Z+2, r20	; 0x02
    1420:	53 83       	std	Z+3, r21	; 0x03
    1422:	08 95       	ret

00001424 <__mulsf3>:
    1424:	0b d0       	rcall	.+22     	; 0x143c <__mulsf3x>
    1426:	4a c1       	rjmp	.+660    	; 0x16bc <__fp_round>
    1428:	3b d1       	rcall	.+630    	; 0x16a0 <__fp_pscA>
    142a:	28 f0       	brcs	.+10     	; 0x1436 <__mulsf3+0x12>
    142c:	40 d1       	rcall	.+640    	; 0x16ae <__fp_pscB>
    142e:	18 f0       	brcs	.+6      	; 0x1436 <__mulsf3+0x12>
    1430:	95 23       	and	r25, r21
    1432:	09 f0       	breq	.+2      	; 0x1436 <__mulsf3+0x12>
    1434:	eb ce       	rjmp	.-554    	; 0x120c <__fp_inf>
    1436:	f0 ce       	rjmp	.-544    	; 0x1218 <__fp_nan>
    1438:	11 24       	eor	r1, r1
    143a:	39 cf       	rjmp	.-398    	; 0x12ae <__fp_szero>

0000143c <__mulsf3x>:
    143c:	15 df       	rcall	.-470    	; 0x1268 <__fp_split3>
    143e:	a0 f3       	brcs	.-24     	; 0x1428 <__mulsf3+0x4>

00001440 <__mulsf3_pse>:
    1440:	95 9f       	mul	r25, r21
    1442:	d1 f3       	breq	.-12     	; 0x1438 <__mulsf3+0x14>
    1444:	95 0f       	add	r25, r21
    1446:	50 e0       	ldi	r21, 0x00	; 0
    1448:	55 1f       	adc	r21, r21
    144a:	62 9f       	mul	r22, r18
    144c:	f0 01       	movw	r30, r0
    144e:	72 9f       	mul	r23, r18
    1450:	bb 27       	eor	r27, r27
    1452:	f0 0d       	add	r31, r0
    1454:	b1 1d       	adc	r27, r1
    1456:	63 9f       	mul	r22, r19
    1458:	aa 27       	eor	r26, r26
    145a:	f0 0d       	add	r31, r0
    145c:	b1 1d       	adc	r27, r1
    145e:	aa 1f       	adc	r26, r26
    1460:	64 9f       	mul	r22, r20
    1462:	66 27       	eor	r22, r22
    1464:	b0 0d       	add	r27, r0
    1466:	a1 1d       	adc	r26, r1
    1468:	66 1f       	adc	r22, r22
    146a:	82 9f       	mul	r24, r18
    146c:	22 27       	eor	r18, r18
    146e:	b0 0d       	add	r27, r0
    1470:	a1 1d       	adc	r26, r1
    1472:	62 1f       	adc	r22, r18
    1474:	73 9f       	mul	r23, r19
    1476:	b0 0d       	add	r27, r0
    1478:	a1 1d       	adc	r26, r1
    147a:	62 1f       	adc	r22, r18
    147c:	83 9f       	mul	r24, r19
    147e:	a0 0d       	add	r26, r0
    1480:	61 1d       	adc	r22, r1
    1482:	22 1f       	adc	r18, r18
    1484:	74 9f       	mul	r23, r20
    1486:	33 27       	eor	r19, r19
    1488:	a0 0d       	add	r26, r0
    148a:	61 1d       	adc	r22, r1
    148c:	23 1f       	adc	r18, r19
    148e:	84 9f       	mul	r24, r20
    1490:	60 0d       	add	r22, r0
    1492:	21 1d       	adc	r18, r1
    1494:	82 2f       	mov	r24, r18
    1496:	76 2f       	mov	r23, r22
    1498:	6a 2f       	mov	r22, r26
    149a:	11 24       	eor	r1, r1
    149c:	9f 57       	subi	r25, 0x7F	; 127
    149e:	50 40       	sbci	r21, 0x00	; 0
    14a0:	8a f0       	brmi	.+34     	; 0x14c4 <__mulsf3_pse+0x84>
    14a2:	e1 f0       	breq	.+56     	; 0x14dc <__mulsf3_pse+0x9c>
    14a4:	88 23       	and	r24, r24
    14a6:	4a f0       	brmi	.+18     	; 0x14ba <__mulsf3_pse+0x7a>
    14a8:	ee 0f       	add	r30, r30
    14aa:	ff 1f       	adc	r31, r31
    14ac:	bb 1f       	adc	r27, r27
    14ae:	66 1f       	adc	r22, r22
    14b0:	77 1f       	adc	r23, r23
    14b2:	88 1f       	adc	r24, r24
    14b4:	91 50       	subi	r25, 0x01	; 1
    14b6:	50 40       	sbci	r21, 0x00	; 0
    14b8:	a9 f7       	brne	.-22     	; 0x14a4 <__mulsf3_pse+0x64>
    14ba:	9e 3f       	cpi	r25, 0xFE	; 254
    14bc:	51 05       	cpc	r21, r1
    14be:	70 f0       	brcs	.+28     	; 0x14dc <__mulsf3_pse+0x9c>
    14c0:	a5 ce       	rjmp	.-694    	; 0x120c <__fp_inf>
    14c2:	f5 ce       	rjmp	.-534    	; 0x12ae <__fp_szero>
    14c4:	5f 3f       	cpi	r21, 0xFF	; 255
    14c6:	ec f3       	brlt	.-6      	; 0x14c2 <__mulsf3_pse+0x82>
    14c8:	98 3e       	cpi	r25, 0xE8	; 232
    14ca:	dc f3       	brlt	.-10     	; 0x14c2 <__mulsf3_pse+0x82>
    14cc:	86 95       	lsr	r24
    14ce:	77 95       	ror	r23
    14d0:	67 95       	ror	r22
    14d2:	b7 95       	ror	r27
    14d4:	f7 95       	ror	r31
    14d6:	e7 95       	ror	r30
    14d8:	9f 5f       	subi	r25, 0xFF	; 255
    14da:	c1 f7       	brne	.-16     	; 0x14cc <__mulsf3_pse+0x8c>
    14dc:	fe 2b       	or	r31, r30
    14de:	88 0f       	add	r24, r24
    14e0:	91 1d       	adc	r25, r1
    14e2:	96 95       	lsr	r25
    14e4:	87 95       	ror	r24
    14e6:	97 f9       	bld	r25, 7
    14e8:	08 95       	ret

000014ea <__subsf3>:
    14ea:	50 58       	subi	r21, 0x80	; 128

000014ec <__addsf3>:
    14ec:	bb 27       	eor	r27, r27
    14ee:	aa 27       	eor	r26, r26
    14f0:	0e d0       	rcall	.+28     	; 0x150e <__addsf3x>
    14f2:	e4 c0       	rjmp	.+456    	; 0x16bc <__fp_round>
    14f4:	d5 d0       	rcall	.+426    	; 0x16a0 <__fp_pscA>
    14f6:	30 f0       	brcs	.+12     	; 0x1504 <__addsf3+0x18>
    14f8:	da d0       	rcall	.+436    	; 0x16ae <__fp_pscB>
    14fa:	20 f0       	brcs	.+8      	; 0x1504 <__addsf3+0x18>
    14fc:	31 f4       	brne	.+12     	; 0x150a <__addsf3+0x1e>
    14fe:	9f 3f       	cpi	r25, 0xFF	; 255
    1500:	11 f4       	brne	.+4      	; 0x1506 <__addsf3+0x1a>
    1502:	1e f4       	brtc	.+6      	; 0x150a <__addsf3+0x1e>
    1504:	89 ce       	rjmp	.-750    	; 0x1218 <__fp_nan>
    1506:	0e f4       	brtc	.+2      	; 0x150a <__addsf3+0x1e>
    1508:	e0 95       	com	r30
    150a:	e7 fb       	bst	r30, 7
    150c:	7f ce       	rjmp	.-770    	; 0x120c <__fp_inf>

0000150e <__addsf3x>:
    150e:	e9 2f       	mov	r30, r25
    1510:	ab de       	rcall	.-682    	; 0x1268 <__fp_split3>
    1512:	80 f3       	brcs	.-32     	; 0x14f4 <__addsf3+0x8>
    1514:	ba 17       	cp	r27, r26
    1516:	62 07       	cpc	r22, r18
    1518:	73 07       	cpc	r23, r19
    151a:	84 07       	cpc	r24, r20
    151c:	95 07       	cpc	r25, r21
    151e:	18 f0       	brcs	.+6      	; 0x1526 <__addsf3x+0x18>
    1520:	71 f4       	brne	.+28     	; 0x153e <__addsf3x+0x30>
    1522:	9e f5       	brtc	.+102    	; 0x158a <__addsf3x+0x7c>
    1524:	c3 ce       	rjmp	.-634    	; 0x12ac <__fp_zero>
    1526:	0e f4       	brtc	.+2      	; 0x152a <__addsf3x+0x1c>
    1528:	e0 95       	com	r30
    152a:	0b 2e       	mov	r0, r27
    152c:	ba 2f       	mov	r27, r26
    152e:	a0 2d       	mov	r26, r0
    1530:	0b 01       	movw	r0, r22
    1532:	b9 01       	movw	r22, r18
    1534:	90 01       	movw	r18, r0
    1536:	0c 01       	movw	r0, r24
    1538:	ca 01       	movw	r24, r20
    153a:	a0 01       	movw	r20, r0
    153c:	11 24       	eor	r1, r1
    153e:	ff 27       	eor	r31, r31
    1540:	59 1b       	sub	r21, r25
    1542:	99 f0       	breq	.+38     	; 0x156a <__addsf3x+0x5c>
    1544:	59 3f       	cpi	r21, 0xF9	; 249
    1546:	50 f4       	brcc	.+20     	; 0x155c <__addsf3x+0x4e>
    1548:	50 3e       	cpi	r21, 0xE0	; 224
    154a:	68 f1       	brcs	.+90     	; 0x15a6 <__addsf3x+0x98>
    154c:	1a 16       	cp	r1, r26
    154e:	f0 40       	sbci	r31, 0x00	; 0
    1550:	a2 2f       	mov	r26, r18
    1552:	23 2f       	mov	r18, r19
    1554:	34 2f       	mov	r19, r20
    1556:	44 27       	eor	r20, r20
    1558:	58 5f       	subi	r21, 0xF8	; 248
    155a:	f3 cf       	rjmp	.-26     	; 0x1542 <__addsf3x+0x34>
    155c:	46 95       	lsr	r20
    155e:	37 95       	ror	r19
    1560:	27 95       	ror	r18
    1562:	a7 95       	ror	r26
    1564:	f0 40       	sbci	r31, 0x00	; 0
    1566:	53 95       	inc	r21
    1568:	c9 f7       	brne	.-14     	; 0x155c <__addsf3x+0x4e>
    156a:	7e f4       	brtc	.+30     	; 0x158a <__addsf3x+0x7c>
    156c:	1f 16       	cp	r1, r31
    156e:	ba 0b       	sbc	r27, r26
    1570:	62 0b       	sbc	r22, r18
    1572:	73 0b       	sbc	r23, r19
    1574:	84 0b       	sbc	r24, r20
    1576:	ba f0       	brmi	.+46     	; 0x15a6 <__addsf3x+0x98>
    1578:	91 50       	subi	r25, 0x01	; 1
    157a:	a1 f0       	breq	.+40     	; 0x15a4 <__addsf3x+0x96>
    157c:	ff 0f       	add	r31, r31
    157e:	bb 1f       	adc	r27, r27
    1580:	66 1f       	adc	r22, r22
    1582:	77 1f       	adc	r23, r23
    1584:	88 1f       	adc	r24, r24
    1586:	c2 f7       	brpl	.-16     	; 0x1578 <__addsf3x+0x6a>
    1588:	0e c0       	rjmp	.+28     	; 0x15a6 <__addsf3x+0x98>
    158a:	ba 0f       	add	r27, r26
    158c:	62 1f       	adc	r22, r18
    158e:	73 1f       	adc	r23, r19
    1590:	84 1f       	adc	r24, r20
    1592:	48 f4       	brcc	.+18     	; 0x15a6 <__addsf3x+0x98>
    1594:	87 95       	ror	r24
    1596:	77 95       	ror	r23
    1598:	67 95       	ror	r22
    159a:	b7 95       	ror	r27
    159c:	f7 95       	ror	r31
    159e:	9e 3f       	cpi	r25, 0xFE	; 254
    15a0:	08 f0       	brcs	.+2      	; 0x15a4 <__addsf3x+0x96>
    15a2:	b3 cf       	rjmp	.-154    	; 0x150a <__addsf3+0x1e>
    15a4:	93 95       	inc	r25
    15a6:	88 0f       	add	r24, r24
    15a8:	08 f0       	brcs	.+2      	; 0x15ac <__addsf3x+0x9e>
    15aa:	99 27       	eor	r25, r25
    15ac:	ee 0f       	add	r30, r30
    15ae:	97 95       	ror	r25
    15b0:	87 95       	ror	r24
    15b2:	08 95       	ret

000015b4 <__divsf3>:
    15b4:	0c d0       	rcall	.+24     	; 0x15ce <__divsf3x>
    15b6:	82 c0       	rjmp	.+260    	; 0x16bc <__fp_round>
    15b8:	7a d0       	rcall	.+244    	; 0x16ae <__fp_pscB>
    15ba:	40 f0       	brcs	.+16     	; 0x15cc <__divsf3+0x18>
    15bc:	71 d0       	rcall	.+226    	; 0x16a0 <__fp_pscA>
    15be:	30 f0       	brcs	.+12     	; 0x15cc <__divsf3+0x18>
    15c0:	21 f4       	brne	.+8      	; 0x15ca <__divsf3+0x16>
    15c2:	5f 3f       	cpi	r21, 0xFF	; 255
    15c4:	19 f0       	breq	.+6      	; 0x15cc <__divsf3+0x18>
    15c6:	22 ce       	rjmp	.-956    	; 0x120c <__fp_inf>
    15c8:	51 11       	cpse	r21, r1
    15ca:	71 ce       	rjmp	.-798    	; 0x12ae <__fp_szero>
    15cc:	25 ce       	rjmp	.-950    	; 0x1218 <__fp_nan>

000015ce <__divsf3x>:
    15ce:	4c de       	rcall	.-872    	; 0x1268 <__fp_split3>
    15d0:	98 f3       	brcs	.-26     	; 0x15b8 <__divsf3+0x4>

000015d2 <__divsf3_pse>:
    15d2:	99 23       	and	r25, r25
    15d4:	c9 f3       	breq	.-14     	; 0x15c8 <__divsf3+0x14>
    15d6:	55 23       	and	r21, r21
    15d8:	b1 f3       	breq	.-20     	; 0x15c6 <__divsf3+0x12>
    15da:	95 1b       	sub	r25, r21
    15dc:	55 0b       	sbc	r21, r21
    15de:	bb 27       	eor	r27, r27
    15e0:	aa 27       	eor	r26, r26
    15e2:	62 17       	cp	r22, r18
    15e4:	73 07       	cpc	r23, r19
    15e6:	84 07       	cpc	r24, r20
    15e8:	38 f0       	brcs	.+14     	; 0x15f8 <__divsf3_pse+0x26>
    15ea:	9f 5f       	subi	r25, 0xFF	; 255
    15ec:	5f 4f       	sbci	r21, 0xFF	; 255
    15ee:	22 0f       	add	r18, r18
    15f0:	33 1f       	adc	r19, r19
    15f2:	44 1f       	adc	r20, r20
    15f4:	aa 1f       	adc	r26, r26
    15f6:	a9 f3       	breq	.-22     	; 0x15e2 <__divsf3_pse+0x10>
    15f8:	33 d0       	rcall	.+102    	; 0x1660 <__divsf3_pse+0x8e>
    15fa:	0e 2e       	mov	r0, r30
    15fc:	3a f0       	brmi	.+14     	; 0x160c <__divsf3_pse+0x3a>
    15fe:	e0 e8       	ldi	r30, 0x80	; 128
    1600:	30 d0       	rcall	.+96     	; 0x1662 <__divsf3_pse+0x90>
    1602:	91 50       	subi	r25, 0x01	; 1
    1604:	50 40       	sbci	r21, 0x00	; 0
    1606:	e6 95       	lsr	r30
    1608:	00 1c       	adc	r0, r0
    160a:	ca f7       	brpl	.-14     	; 0x15fe <__divsf3_pse+0x2c>
    160c:	29 d0       	rcall	.+82     	; 0x1660 <__divsf3_pse+0x8e>
    160e:	fe 2f       	mov	r31, r30
    1610:	27 d0       	rcall	.+78     	; 0x1660 <__divsf3_pse+0x8e>
    1612:	66 0f       	add	r22, r22
    1614:	77 1f       	adc	r23, r23
    1616:	88 1f       	adc	r24, r24
    1618:	bb 1f       	adc	r27, r27
    161a:	26 17       	cp	r18, r22
    161c:	37 07       	cpc	r19, r23
    161e:	48 07       	cpc	r20, r24
    1620:	ab 07       	cpc	r26, r27
    1622:	b0 e8       	ldi	r27, 0x80	; 128
    1624:	09 f0       	breq	.+2      	; 0x1628 <__divsf3_pse+0x56>
    1626:	bb 0b       	sbc	r27, r27
    1628:	80 2d       	mov	r24, r0
    162a:	bf 01       	movw	r22, r30
    162c:	ff 27       	eor	r31, r31
    162e:	93 58       	subi	r25, 0x83	; 131
    1630:	5f 4f       	sbci	r21, 0xFF	; 255
    1632:	2a f0       	brmi	.+10     	; 0x163e <__divsf3_pse+0x6c>
    1634:	9e 3f       	cpi	r25, 0xFE	; 254
    1636:	51 05       	cpc	r21, r1
    1638:	68 f0       	brcs	.+26     	; 0x1654 <__divsf3_pse+0x82>
    163a:	e8 cd       	rjmp	.-1072   	; 0x120c <__fp_inf>
    163c:	38 ce       	rjmp	.-912    	; 0x12ae <__fp_szero>
    163e:	5f 3f       	cpi	r21, 0xFF	; 255
    1640:	ec f3       	brlt	.-6      	; 0x163c <__divsf3_pse+0x6a>
    1642:	98 3e       	cpi	r25, 0xE8	; 232
    1644:	dc f3       	brlt	.-10     	; 0x163c <__divsf3_pse+0x6a>
    1646:	86 95       	lsr	r24
    1648:	77 95       	ror	r23
    164a:	67 95       	ror	r22
    164c:	b7 95       	ror	r27
    164e:	f7 95       	ror	r31
    1650:	9f 5f       	subi	r25, 0xFF	; 255
    1652:	c9 f7       	brne	.-14     	; 0x1646 <__divsf3_pse+0x74>
    1654:	88 0f       	add	r24, r24
    1656:	91 1d       	adc	r25, r1
    1658:	96 95       	lsr	r25
    165a:	87 95       	ror	r24
    165c:	97 f9       	bld	r25, 7
    165e:	08 95       	ret
    1660:	e1 e0       	ldi	r30, 0x01	; 1
    1662:	66 0f       	add	r22, r22
    1664:	77 1f       	adc	r23, r23
    1666:	88 1f       	adc	r24, r24
    1668:	bb 1f       	adc	r27, r27
    166a:	62 17       	cp	r22, r18
    166c:	73 07       	cpc	r23, r19
    166e:	84 07       	cpc	r24, r20
    1670:	ba 07       	cpc	r27, r26
    1672:	20 f0       	brcs	.+8      	; 0x167c <__divsf3_pse+0xaa>
    1674:	62 1b       	sub	r22, r18
    1676:	73 0b       	sbc	r23, r19
    1678:	84 0b       	sbc	r24, r20
    167a:	ba 0b       	sbc	r27, r26
    167c:	ee 1f       	adc	r30, r30
    167e:	88 f7       	brcc	.-30     	; 0x1662 <__divsf3_pse+0x90>
    1680:	e0 95       	com	r30
    1682:	08 95       	ret

00001684 <__fp_mpack>:
    1684:	9f 3f       	cpi	r25, 0xFF	; 255
    1686:	31 f0       	breq	.+12     	; 0x1694 <__fp_mpack_finite+0xc>

00001688 <__fp_mpack_finite>:
    1688:	91 50       	subi	r25, 0x01	; 1
    168a:	20 f4       	brcc	.+8      	; 0x1694 <__fp_mpack_finite+0xc>
    168c:	87 95       	ror	r24
    168e:	77 95       	ror	r23
    1690:	67 95       	ror	r22
    1692:	b7 95       	ror	r27
    1694:	88 0f       	add	r24, r24
    1696:	91 1d       	adc	r25, r1
    1698:	96 95       	lsr	r25
    169a:	87 95       	ror	r24
    169c:	97 f9       	bld	r25, 7
    169e:	08 95       	ret

000016a0 <__fp_pscA>:
    16a0:	00 24       	eor	r0, r0
    16a2:	0a 94       	dec	r0
    16a4:	16 16       	cp	r1, r22
    16a6:	17 06       	cpc	r1, r23
    16a8:	18 06       	cpc	r1, r24
    16aa:	09 06       	cpc	r0, r25
    16ac:	08 95       	ret

000016ae <__fp_pscB>:
    16ae:	00 24       	eor	r0, r0
    16b0:	0a 94       	dec	r0
    16b2:	12 16       	cp	r1, r18
    16b4:	13 06       	cpc	r1, r19
    16b6:	14 06       	cpc	r1, r20
    16b8:	05 06       	cpc	r0, r21
    16ba:	08 95       	ret

000016bc <__fp_round>:
    16bc:	09 2e       	mov	r0, r25
    16be:	03 94       	inc	r0
    16c0:	00 0c       	add	r0, r0
    16c2:	11 f4       	brne	.+4      	; 0x16c8 <__fp_round+0xc>
    16c4:	88 23       	and	r24, r24
    16c6:	52 f0       	brmi	.+20     	; 0x16dc <__fp_round+0x20>
    16c8:	bb 0f       	add	r27, r27
    16ca:	40 f4       	brcc	.+16     	; 0x16dc <__fp_round+0x20>
    16cc:	bf 2b       	or	r27, r31
    16ce:	11 f4       	brne	.+4      	; 0x16d4 <__fp_round+0x18>
    16d0:	60 ff       	sbrs	r22, 0
    16d2:	04 c0       	rjmp	.+8      	; 0x16dc <__fp_round+0x20>
    16d4:	6f 5f       	subi	r22, 0xFF	; 255
    16d6:	7f 4f       	sbci	r23, 0xFF	; 255
    16d8:	8f 4f       	sbci	r24, 0xFF	; 255
    16da:	9f 4f       	sbci	r25, 0xFF	; 255
    16dc:	08 95       	ret

000016de <__udivmodsi4>:
    16de:	a1 e2       	ldi	r26, 0x21	; 33
    16e0:	1a 2e       	mov	r1, r26
    16e2:	aa 1b       	sub	r26, r26
    16e4:	bb 1b       	sub	r27, r27
    16e6:	fd 01       	movw	r30, r26
    16e8:	0d c0       	rjmp	.+26     	; 0x1704 <__udivmodsi4_ep>

000016ea <__udivmodsi4_loop>:
    16ea:	aa 1f       	adc	r26, r26
    16ec:	bb 1f       	adc	r27, r27
    16ee:	ee 1f       	adc	r30, r30
    16f0:	ff 1f       	adc	r31, r31
    16f2:	a2 17       	cp	r26, r18
    16f4:	b3 07       	cpc	r27, r19
    16f6:	e4 07       	cpc	r30, r20
    16f8:	f5 07       	cpc	r31, r21
    16fa:	20 f0       	brcs	.+8      	; 0x1704 <__udivmodsi4_ep>
    16fc:	a2 1b       	sub	r26, r18
    16fe:	b3 0b       	sbc	r27, r19
    1700:	e4 0b       	sbc	r30, r20
    1702:	f5 0b       	sbc	r31, r21

00001704 <__udivmodsi4_ep>:
    1704:	66 1f       	adc	r22, r22
    1706:	77 1f       	adc	r23, r23
    1708:	88 1f       	adc	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	1a 94       	dec	r1
    170e:	69 f7       	brne	.-38     	; 0x16ea <__udivmodsi4_loop>
    1710:	60 95       	com	r22
    1712:	70 95       	com	r23
    1714:	80 95       	com	r24
    1716:	90 95       	com	r25
    1718:	9b 01       	movw	r18, r22
    171a:	ac 01       	movw	r20, r24
    171c:	bd 01       	movw	r22, r26
    171e:	cf 01       	movw	r24, r30
    1720:	08 95       	ret

00001722 <__tablejump2__>:
    1722:	ee 0f       	add	r30, r30
    1724:	ff 1f       	adc	r31, r31
    1726:	05 90       	lpm	r0, Z+
    1728:	f4 91       	lpm	r31, Z
    172a:	e0 2d       	mov	r30, r0
    172c:	09 94       	ijmp

0000172e <atoi>:
    172e:	fc 01       	movw	r30, r24
    1730:	88 27       	eor	r24, r24
    1732:	99 27       	eor	r25, r25
    1734:	e8 94       	clt
    1736:	21 91       	ld	r18, Z+
    1738:	20 32       	cpi	r18, 0x20	; 32
    173a:	e9 f3       	breq	.-6      	; 0x1736 <atoi+0x8>
    173c:	29 30       	cpi	r18, 0x09	; 9
    173e:	10 f0       	brcs	.+4      	; 0x1744 <atoi+0x16>
    1740:	2e 30       	cpi	r18, 0x0E	; 14
    1742:	c8 f3       	brcs	.-14     	; 0x1736 <atoi+0x8>
    1744:	2b 32       	cpi	r18, 0x2B	; 43
    1746:	39 f0       	breq	.+14     	; 0x1756 <atoi+0x28>
    1748:	2d 32       	cpi	r18, 0x2D	; 45
    174a:	31 f4       	brne	.+12     	; 0x1758 <atoi+0x2a>
    174c:	68 94       	set
    174e:	03 c0       	rjmp	.+6      	; 0x1756 <atoi+0x28>
    1750:	4d d0       	rcall	.+154    	; 0x17ec <__mulhi_const_10>
    1752:	82 0f       	add	r24, r18
    1754:	91 1d       	adc	r25, r1
    1756:	21 91       	ld	r18, Z+
    1758:	20 53       	subi	r18, 0x30	; 48
    175a:	2a 30       	cpi	r18, 0x0A	; 10
    175c:	c8 f3       	brcs	.-14     	; 0x1750 <atoi+0x22>
    175e:	1e f4       	brtc	.+6      	; 0x1766 <atoi+0x38>
    1760:	90 95       	com	r25
    1762:	81 95       	neg	r24
    1764:	9f 4f       	sbci	r25, 0xFF	; 255
    1766:	08 95       	ret

00001768 <memcpy>:
    1768:	fb 01       	movw	r30, r22
    176a:	dc 01       	movw	r26, r24
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <memcpy+0xa>
    176e:	01 90       	ld	r0, Z+
    1770:	0d 92       	st	X+, r0
    1772:	41 50       	subi	r20, 0x01	; 1
    1774:	50 40       	sbci	r21, 0x00	; 0
    1776:	d8 f7       	brcc	.-10     	; 0x176e <memcpy+0x6>
    1778:	08 95       	ret

0000177a <strcat>:
    177a:	fb 01       	movw	r30, r22
    177c:	dc 01       	movw	r26, r24
    177e:	0d 90       	ld	r0, X+
    1780:	00 20       	and	r0, r0
    1782:	e9 f7       	brne	.-6      	; 0x177e <strcat+0x4>
    1784:	11 97       	sbiw	r26, 0x01	; 1
    1786:	01 90       	ld	r0, Z+
    1788:	0d 92       	st	X+, r0
    178a:	00 20       	and	r0, r0
    178c:	e1 f7       	brne	.-8      	; 0x1786 <strcat+0xc>
    178e:	08 95       	ret

00001790 <strstr>:
    1790:	fb 01       	movw	r30, r22
    1792:	51 91       	ld	r21, Z+
    1794:	55 23       	and	r21, r21
    1796:	a9 f0       	breq	.+42     	; 0x17c2 <strstr+0x32>
    1798:	bf 01       	movw	r22, r30
    179a:	dc 01       	movw	r26, r24
    179c:	4d 91       	ld	r20, X+
    179e:	45 17       	cp	r20, r21
    17a0:	41 11       	cpse	r20, r1
    17a2:	e1 f7       	brne	.-8      	; 0x179c <strstr+0xc>
    17a4:	59 f4       	brne	.+22     	; 0x17bc <strstr+0x2c>
    17a6:	cd 01       	movw	r24, r26
    17a8:	01 90       	ld	r0, Z+
    17aa:	00 20       	and	r0, r0
    17ac:	49 f0       	breq	.+18     	; 0x17c0 <strstr+0x30>
    17ae:	4d 91       	ld	r20, X+
    17b0:	40 15       	cp	r20, r0
    17b2:	41 11       	cpse	r20, r1
    17b4:	c9 f3       	breq	.-14     	; 0x17a8 <strstr+0x18>
    17b6:	fb 01       	movw	r30, r22
    17b8:	41 11       	cpse	r20, r1
    17ba:	ef cf       	rjmp	.-34     	; 0x179a <strstr+0xa>
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	01 97       	sbiw	r24, 0x01	; 1
    17c2:	08 95       	ret

000017c4 <itoa>:
    17c4:	45 32       	cpi	r20, 0x25	; 37
    17c6:	51 05       	cpc	r21, r1
    17c8:	18 f4       	brcc	.+6      	; 0x17d0 <itoa+0xc>
    17ca:	42 30       	cpi	r20, 0x02	; 2
    17cc:	08 f0       	brcs	.+2      	; 0x17d0 <itoa+0xc>
    17ce:	04 c0       	rjmp	.+8      	; 0x17d8 <__itoa_ncheck>
    17d0:	fb 01       	movw	r30, r22
    17d2:	10 82       	st	Z, r1
    17d4:	cb 01       	movw	r24, r22
    17d6:	08 95       	ret

000017d8 <__itoa_ncheck>:
    17d8:	bb 27       	eor	r27, r27
    17da:	4a 30       	cpi	r20, 0x0A	; 10
    17dc:	31 f4       	brne	.+12     	; 0x17ea <__itoa_ncheck+0x12>
    17de:	99 23       	and	r25, r25
    17e0:	22 f4       	brpl	.+8      	; 0x17ea <__itoa_ncheck+0x12>
    17e2:	bd e2       	ldi	r27, 0x2D	; 45
    17e4:	90 95       	com	r25
    17e6:	81 95       	neg	r24
    17e8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ea:	09 c0       	rjmp	.+18     	; 0x17fe <__utoa_common>

000017ec <__mulhi_const_10>:
    17ec:	7a e0       	ldi	r23, 0x0A	; 10
    17ee:	97 9f       	mul	r25, r23
    17f0:	90 2d       	mov	r25, r0
    17f2:	87 9f       	mul	r24, r23
    17f4:	80 2d       	mov	r24, r0
    17f6:	91 0d       	add	r25, r1
    17f8:	11 24       	eor	r1, r1
    17fa:	08 95       	ret

000017fc <__utoa_ncheck>:
    17fc:	bb 27       	eor	r27, r27

000017fe <__utoa_common>:
    17fe:	fb 01       	movw	r30, r22
    1800:	55 27       	eor	r21, r21
    1802:	aa 27       	eor	r26, r26
    1804:	88 0f       	add	r24, r24
    1806:	99 1f       	adc	r25, r25
    1808:	aa 1f       	adc	r26, r26
    180a:	a4 17       	cp	r26, r20
    180c:	10 f0       	brcs	.+4      	; 0x1812 <__utoa_common+0x14>
    180e:	a4 1b       	sub	r26, r20
    1810:	83 95       	inc	r24
    1812:	50 51       	subi	r21, 0x10	; 16
    1814:	b9 f7       	brne	.-18     	; 0x1804 <__utoa_common+0x6>
    1816:	a0 5d       	subi	r26, 0xD0	; 208
    1818:	aa 33       	cpi	r26, 0x3A	; 58
    181a:	08 f0       	brcs	.+2      	; 0x181e <__utoa_common+0x20>
    181c:	a9 5d       	subi	r26, 0xD9	; 217
    181e:	a1 93       	st	Z+, r26
    1820:	00 97       	sbiw	r24, 0x00	; 0
    1822:	79 f7       	brne	.-34     	; 0x1802 <__utoa_common+0x4>
    1824:	b1 11       	cpse	r27, r1
    1826:	b1 93       	st	Z+, r27
    1828:	11 92       	st	Z+, r1
    182a:	cb 01       	movw	r24, r22
    182c:	00 c0       	rjmp	.+0      	; 0x182e <strrev>

0000182e <strrev>:
    182e:	dc 01       	movw	r26, r24
    1830:	fc 01       	movw	r30, r24
    1832:	67 2f       	mov	r22, r23
    1834:	71 91       	ld	r23, Z+
    1836:	77 23       	and	r23, r23
    1838:	e1 f7       	brne	.-8      	; 0x1832 <strrev+0x4>
    183a:	32 97       	sbiw	r30, 0x02	; 2
    183c:	04 c0       	rjmp	.+8      	; 0x1846 <strrev+0x18>
    183e:	7c 91       	ld	r23, X
    1840:	6d 93       	st	X+, r22
    1842:	70 83       	st	Z, r23
    1844:	62 91       	ld	r22, -Z
    1846:	ae 17       	cp	r26, r30
    1848:	bf 07       	cpc	r27, r31
    184a:	c8 f3       	brcs	.-14     	; 0x183e <strrev+0x10>
    184c:	08 95       	ret

0000184e <_exit>:
    184e:	f8 94       	cli

00001850 <__stop_program>:
    1850:	ff cf       	rjmp	.-2      	; 0x1850 <__stop_program>
