
NB_IOT_MEGA328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001da  00800100  000021dc  00002270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020f  008002da  008002da  0000244a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000244a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000247c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  000024bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004cb8  00000000  00000000  00002784  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001850  00000000  00000000  0000743c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000317e  00000000  00000000  00008c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ae8  00000000  00000000  0000be0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00012ef8  00000000  00000000  0000c8f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000040c8  00000000  00000000  0001f7ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000290  00000000  00000000  000238b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004f62  00000000  00000000  00023b44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	80 c0       	rjmp	.+256    	; 0x102 <__ctors_end>
       2:	00 00       	nop
       4:	9a c0       	rjmp	.+308    	; 0x13a <__bad_interrupt>
       6:	00 00       	nop
       8:	98 c0       	rjmp	.+304    	; 0x13a <__bad_interrupt>
       a:	00 00       	nop
       c:	96 c0       	rjmp	.+300    	; 0x13a <__bad_interrupt>
       e:	00 00       	nop
      10:	94 c0       	rjmp	.+296    	; 0x13a <__bad_interrupt>
      12:	00 00       	nop
      14:	92 c0       	rjmp	.+292    	; 0x13a <__bad_interrupt>
      16:	00 00       	nop
      18:	34 c5       	rjmp	.+2664   	; 0xa82 <__vector_6>
      1a:	00 00       	nop
      1c:	8e c0       	rjmp	.+284    	; 0x13a <__bad_interrupt>
      1e:	00 00       	nop
      20:	8c c0       	rjmp	.+280    	; 0x13a <__bad_interrupt>
      22:	00 00       	nop
      24:	8a c0       	rjmp	.+276    	; 0x13a <__bad_interrupt>
      26:	00 00       	nop
      28:	88 c0       	rjmp	.+272    	; 0x13a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	86 c0       	rjmp	.+268    	; 0x13a <__bad_interrupt>
      2e:	00 00       	nop
      30:	84 c0       	rjmp	.+264    	; 0x13a <__bad_interrupt>
      32:	00 00       	nop
      34:	82 c0       	rjmp	.+260    	; 0x13a <__bad_interrupt>
      36:	00 00       	nop
      38:	80 c0       	rjmp	.+256    	; 0x13a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7e c0       	rjmp	.+252    	; 0x13a <__bad_interrupt>
      3e:	00 00       	nop
      40:	7c c0       	rjmp	.+248    	; 0x13a <__bad_interrupt>
      42:	00 00       	nop
      44:	7a c0       	rjmp	.+244    	; 0x13a <__bad_interrupt>
      46:	00 00       	nop
      48:	78 c0       	rjmp	.+240    	; 0x13a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	76 c0       	rjmp	.+236    	; 0x13a <__bad_interrupt>
      4e:	00 00       	nop
      50:	74 c0       	rjmp	.+232    	; 0x13a <__bad_interrupt>
      52:	00 00       	nop
      54:	72 c0       	rjmp	.+228    	; 0x13a <__bad_interrupt>
      56:	00 00       	nop
      58:	70 c0       	rjmp	.+224    	; 0x13a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6e c0       	rjmp	.+220    	; 0x13a <__bad_interrupt>
      5e:	00 00       	nop
      60:	6c c0       	rjmp	.+216    	; 0x13a <__bad_interrupt>
      62:	00 00       	nop
      64:	6a c0       	rjmp	.+212    	; 0x13a <__bad_interrupt>
      66:	00 00       	nop
      68:	bf 05       	cpc	r27, r15
      6a:	e7 05       	cpc	r30, r7
      6c:	4a 06       	cpc	r4, r26
      6e:	6c 06       	cpc	r6, r28
      70:	73 06       	cpc	r7, r19
      72:	83 06       	cpc	r8, r19
      74:	93 06       	cpc	r9, r19
      76:	ca 06       	cpc	r12, r26
      78:	d4 06       	cpc	r13, r20
      7a:	d7 06       	cpc	r13, r23
      7c:	db 06       	cpc	r13, r27
      7e:	df 06       	cpc	r13, r31
      80:	07 63       	ori	r16, 0x37	; 55
      82:	42 36       	cpi	r20, 0x62	; 98
      84:	b7 9b       	sbis	0x16, 7	; 22
      86:	d8 a7       	std	Y+40, r29	; 0x28
      88:	1a 39       	cpi	r17, 0x9A	; 154
      8a:	68 56       	subi	r22, 0x68	; 104
      8c:	18 ae       	std	Y+56, r1	; 0x38
      8e:	ba ab       	std	Y+50, r27	; 0x32
      90:	55 8c       	ldd	r5, Z+29	; 0x1d
      92:	1d 3c       	cpi	r17, 0xCD	; 205
      94:	b7 cc       	rjmp	.-1682   	; 0xfffffa04 <__eeprom_end+0xff7efa04>
      96:	57 63       	ori	r21, 0x37	; 55
      98:	bd 6d       	ori	r27, 0xDD	; 221
      9a:	ed fd       	.word	0xfded	; ????
      9c:	75 3e       	cpi	r23, 0xE5	; 229
      9e:	f6 17       	cp	r31, r22
      a0:	72 31       	cpi	r23, 0x12	; 18
      a2:	bf 00       	.word	0x00bf	; ????
      a4:	00 00       	nop
      a6:	80 3f       	cpi	r24, 0xF0	; 240
      a8:	08 00       	.word	0x0008	; ????
      aa:	00 00       	nop
      ac:	be 92       	st	-X, r11
      ae:	24 49       	sbci	r18, 0x94	; 148
      b0:	12 3e       	cpi	r17, 0xE2	; 226
      b2:	ab aa       	std	Y+51, r10	; 0x33
      b4:	aa 2a       	or	r10, r26
      b6:	be cd       	rjmp	.-1156   	; 0xfffffc34 <__eeprom_end+0xff7efc34>
      b8:	cc cc       	rjmp	.-1640   	; 0xfffffa52 <__eeprom_end+0xff7efa52>
      ba:	4c 3e       	cpi	r20, 0xEC	; 236
      bc:	00 00       	nop
      be:	00 80       	ld	r0, Z
      c0:	be ab       	std	Y+54, r27	; 0x36
      c2:	aa aa       	std	Y+50, r10	; 0x32
      c4:	aa 3e       	cpi	r26, 0xEA	; 234
      c6:	00 00       	nop
      c8:	00 00       	nop
      ca:	bf 00       	.word	0x00bf	; ????
      cc:	00 00       	nop
      ce:	80 3f       	cpi	r24, 0xF0	; 240
      d0:	00 00       	nop
      d2:	00 00       	nop
      d4:	00 08       	sbc	r0, r0
      d6:	41 78       	andi	r20, 0x81	; 129
      d8:	d3 bb       	out	0x13, r29	; 19
      da:	43 87       	std	Z+11, r20	; 0x0b
      dc:	d1 13       	cpse	r29, r17
      de:	3d 19       	sub	r19, r13
      e0:	0e 3c       	cpi	r16, 0xCE	; 206
      e2:	c3 bd       	out	0x23, r28	; 35
      e4:	42 82       	std	Z+2, r4	; 0x02
      e6:	ad 2b       	or	r26, r29
      e8:	3e 68       	ori	r19, 0x8E	; 142
      ea:	ec 82       	std	Y+4, r14	; 0x04
      ec:	76 be       	out	0x36, r7	; 54
      ee:	d9 8f       	std	Y+25, r29	; 0x19
      f0:	e1 a9       	ldd	r30, Z+49	; 0x31
      f2:	3e 4c       	sbci	r19, 0xCE	; 206
      f4:	80 ef       	ldi	r24, 0xF0	; 240
      f6:	ff be       	out	0x3f, r15	; 63
      f8:	01 c4       	rjmp	.+2050   	; 0x8fc <data_to_char+0xec>
      fa:	ff 7f       	andi	r31, 0xFF	; 255
      fc:	3f 00       	.word	0x003f	; ????
      fe:	00 00       	nop
	...

00000102 <__ctors_end>:
     102:	11 24       	eor	r1, r1
     104:	1f be       	out	0x3f, r1	; 63
     106:	cf ef       	ldi	r28, 0xFF	; 255
     108:	d8 e0       	ldi	r29, 0x08	; 8
     10a:	de bf       	out	0x3e, r29	; 62
     10c:	cd bf       	out	0x3d, r28	; 61

0000010e <__do_copy_data>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a0 e0       	ldi	r26, 0x00	; 0
     112:	b1 e0       	ldi	r27, 0x01	; 1
     114:	ec ed       	ldi	r30, 0xDC	; 220
     116:	f1 e2       	ldi	r31, 0x21	; 33
     118:	02 c0       	rjmp	.+4      	; 0x11e <__do_copy_data+0x10>
     11a:	05 90       	lpm	r0, Z+
     11c:	0d 92       	st	X+, r0
     11e:	aa 3d       	cpi	r26, 0xDA	; 218
     120:	b1 07       	cpc	r27, r17
     122:	d9 f7       	brne	.-10     	; 0x11a <__do_copy_data+0xc>

00000124 <__do_clear_bss>:
     124:	24 e0       	ldi	r18, 0x04	; 4
     126:	aa ed       	ldi	r26, 0xDA	; 218
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	01 c0       	rjmp	.+2      	; 0x12e <.do_clear_bss_start>

0000012c <.do_clear_bss_loop>:
     12c:	1d 92       	st	X+, r1

0000012e <.do_clear_bss_start>:
     12e:	a9 3e       	cpi	r26, 0xE9	; 233
     130:	b2 07       	cpc	r27, r18
     132:	e1 f7       	brne	.-8      	; 0x12c <.do_clear_bss_loop>
     134:	7e d6       	rcall	.+3324   	; 0xe32 <main>
     136:	0c 94 ec 10 	jmp	0x21d8	; 0x21d8 <_exit>

0000013a <__bad_interrupt>:
     13a:	62 cf       	rjmp	.-316    	; 0x0 <__vectors>

0000013c <__portable_avr_delay_cycles>:
uint16_t controller_calc_avg(uint32_t data, uint16_t cnt) {
	uint16_t avg = 0;
	
	avg = data/cnt;
	return avg;
}
     13c:	04 c0       	rjmp	.+8      	; 0x146 <__portable_avr_delay_cycles+0xa>
     13e:	61 50       	subi	r22, 0x01	; 1
     140:	71 09       	sbc	r23, r1
     142:	81 09       	sbc	r24, r1
     144:	91 09       	sbc	r25, r1
     146:	61 15       	cp	r22, r1
     148:	71 05       	cpc	r23, r1
     14a:	81 05       	cpc	r24, r1
     14c:	91 05       	cpc	r25, r1
     14e:	b9 f7       	brne	.-18     	; 0x13e <__portable_avr_delay_cycles+0x2>
     150:	08 95       	ret

00000152 <usart_tx_at>:
     152:	0f 93       	push	r16
     154:	1f 93       	push	r17
     156:	cf 93       	push	r28
     158:	df 93       	push	r29
     15a:	eb 01       	movw	r28, r22
     15c:	68 81       	ld	r22, Y
     15e:	66 23       	and	r22, r22
     160:	39 f0       	breq	.+14     	; 0x170 <usart_tx_at+0x1e>
     162:	8c 01       	movw	r16, r24
     164:	21 96       	adiw	r28, 0x01	; 1
     166:	c8 01       	movw	r24, r16
     168:	b1 d6       	rcall	.+3426   	; 0xecc <usart_putchar>
     16a:	69 91       	ld	r22, Y+
     16c:	61 11       	cpse	r22, r1
     16e:	fb cf       	rjmp	.-10     	; 0x166 <usart_tx_at+0x14>
     170:	df 91       	pop	r29
     172:	cf 91       	pop	r28
     174:	1f 91       	pop	r17
     176:	0f 91       	pop	r16
     178:	08 95       	ret

0000017a <usart_rx_at>:
     17a:	0f 93       	push	r16
     17c:	1f 93       	push	r17
     17e:	fc 01       	movw	r30, r24
     180:	da 01       	movw	r26, r20
     182:	88 ee       	ldi	r24, 0xE8	; 232
     184:	93 e0       	ldi	r25, 0x03	; 3
     186:	68 9f       	mul	r22, r24
     188:	80 01       	movw	r16, r0
     18a:	69 9f       	mul	r22, r25
     18c:	10 0d       	add	r17, r0
     18e:	78 9f       	mul	r23, r24
     190:	10 0d       	add	r17, r0
     192:	11 24       	eor	r1, r1
     194:	20 e0       	ldi	r18, 0x00	; 0
     196:	30 e0       	ldi	r19, 0x00	; 0
     198:	80 81       	ld	r24, Z
     19a:	88 23       	and	r24, r24
     19c:	dc f0       	brlt	.+54     	; 0x1d4 <usart_rx_at+0x5a>
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	01 15       	cp	r16, r1
     1a2:	11 05       	cpc	r17, r1
     1a4:	21 05       	cpc	r18, r1
     1a6:	31 05       	cpc	r19, r1
     1a8:	09 f4       	brne	.+2      	; 0x1ac <usart_rx_at+0x32>
     1aa:	80 e0       	ldi	r24, 0x00	; 0
     1ac:	88 23       	and	r24, r24
     1ae:	91 f0       	breq	.+36     	; 0x1d4 <usart_rx_at+0x5a>
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	50 e0       	ldi	r21, 0x00	; 0
     1b4:	01 50       	subi	r16, 0x01	; 1
     1b6:	11 09       	sbc	r17, r1
     1b8:	21 09       	sbc	r18, r1
     1ba:	31 09       	sbc	r19, r1
     1bc:	90 81       	ld	r25, Z
     1be:	99 23       	and	r25, r25
     1c0:	4c f0       	brlt	.+18     	; 0x1d4 <usart_rx_at+0x5a>
     1c2:	98 2f       	mov	r25, r24
     1c4:	01 15       	cp	r16, r1
     1c6:	11 05       	cpc	r17, r1
     1c8:	21 05       	cpc	r18, r1
     1ca:	31 05       	cpc	r19, r1
     1cc:	09 f4       	brne	.+2      	; 0x1d0 <usart_rx_at+0x56>
     1ce:	95 2f       	mov	r25, r21
     1d0:	91 11       	cpse	r25, r1
     1d2:	f0 cf       	rjmp	.-32     	; 0x1b4 <usart_rx_at+0x3a>
     1d4:	01 2b       	or	r16, r17
     1d6:	02 2b       	or	r16, r18
     1d8:	03 2b       	or	r16, r19
     1da:	11 f4       	brne	.+4      	; 0x1e0 <usart_rx_at+0x66>
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	8c 93       	st	X, r24
     1e0:	86 81       	ldd	r24, Z+6	; 0x06
     1e2:	1f 91       	pop	r17
     1e4:	0f 91       	pop	r16
     1e6:	08 95       	ret

000001e8 <at_response>:
     1e8:	7f 92       	push	r7
     1ea:	8f 92       	push	r8
     1ec:	9f 92       	push	r9
     1ee:	af 92       	push	r10
     1f0:	bf 92       	push	r11
     1f2:	cf 92       	push	r12
     1f4:	df 92       	push	r13
     1f6:	ef 92       	push	r14
     1f8:	ff 92       	push	r15
     1fa:	0f 93       	push	r16
     1fc:	1f 93       	push	r17
     1fe:	cf 93       	push	r28
     200:	df 93       	push	r29
     202:	1f 92       	push	r1
     204:	cd b7       	in	r28, 0x3d	; 61
     206:	de b7       	in	r29, 0x3e	; 62
     208:	5c 01       	movw	r10, r24
     20a:	6b 01       	movw	r12, r22
     20c:	7a 01       	movw	r14, r20
     20e:	19 82       	std	Y+1, r1	; 0x01
     210:	10 e0       	ldi	r17, 0x00	; 0
     212:	01 e0       	ldi	r16, 0x01	; 1
     214:	71 2c       	mov	r7, r1
     216:	47 01       	movw	r8, r14
     218:	81 0e       	add	r8, r17
     21a:	91 1c       	adc	r9, r1
     21c:	ae 01       	movw	r20, r28
     21e:	4f 5f       	subi	r20, 0xFF	; 255
     220:	5f 4f       	sbci	r21, 0xFF	; 255
     222:	b6 01       	movw	r22, r12
     224:	c5 01       	movw	r24, r10
     226:	a9 df       	rcall	.-174    	; 0x17a <usart_rx_at>
     228:	f4 01       	movw	r30, r8
     22a:	80 83       	st	Z, r24
     22c:	1f 5f       	subi	r17, 0xFF	; 255
     22e:	89 81       	ldd	r24, Y+1	; 0x01
     230:	90 2f       	mov	r25, r16
     232:	81 11       	cpse	r24, r1
     234:	97 2d       	mov	r25, r7
     236:	99 23       	and	r25, r25
     238:	31 f0       	breq	.+12     	; 0x246 <at_response+0x5e>
     23a:	90 2f       	mov	r25, r16
     23c:	14 36       	cpi	r17, 0x64	; 100
     23e:	08 f0       	brcs	.+2      	; 0x242 <at_response+0x5a>
     240:	97 2d       	mov	r25, r7
     242:	91 11       	cpse	r25, r1
     244:	e8 cf       	rjmp	.-48     	; 0x216 <at_response+0x2e>
     246:	0f 90       	pop	r0
     248:	df 91       	pop	r29
     24a:	cf 91       	pop	r28
     24c:	1f 91       	pop	r17
     24e:	0f 91       	pop	r16
     250:	ff 90       	pop	r15
     252:	ef 90       	pop	r14
     254:	df 90       	pop	r13
     256:	cf 90       	pop	r12
     258:	bf 90       	pop	r11
     25a:	af 90       	pop	r10
     25c:	9f 90       	pop	r9
     25e:	8f 90       	pop	r8
     260:	7f 90       	pop	r7
     262:	08 95       	ret

00000264 <radio_pins_init>:
     264:	52 9a       	sbi	0x0a, 2	; 10
     266:	54 98       	cbi	0x0a, 4	; 10
     268:	08 95       	ret

0000026a <radio_power_down>:
     26a:	5a 98       	cbi	0x0b, 2	; 11
     26c:	6b e0       	ldi	r22, 0x0B	; 11
     26e:	7b e8       	ldi	r23, 0x8B	; 139
     270:	82 e0       	ldi	r24, 0x02	; 2
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	63 df       	rcall	.-314    	; 0x13c <__portable_avr_delay_cycles>
     276:	5a 9a       	sbi	0x0b, 2	; 11
     278:	6b e0       	ldi	r22, 0x0B	; 11
     27a:	7b e8       	ldi	r23, 0x8B	; 139
     27c:	82 e0       	ldi	r24, 0x02	; 2
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	5d df       	rcall	.-326    	; 0x13c <__portable_avr_delay_cycles>
     282:	5a 98       	cbi	0x0b, 2	; 11
     284:	89 b1       	in	r24, 0x09	; 9
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	08 95       	ret

0000028a <reset_tx_data>:
     28a:	44 23       	and	r20, r20
     28c:	61 f0       	breq	.+24     	; 0x2a6 <reset_tx_data+0x1c>
     28e:	a6 2f       	mov	r26, r22
     290:	b7 2f       	mov	r27, r23
     292:	e8 2f       	mov	r30, r24
     294:	f9 2f       	mov	r31, r25
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	2d 91       	ld	r18, X+
     29a:	3d 91       	ld	r19, X+
     29c:	21 93       	st	Z+, r18
     29e:	31 93       	st	Z+, r19
     2a0:	8f 5f       	subi	r24, 0xFF	; 255
     2a2:	48 13       	cpse	r20, r24
     2a4:	f9 cf       	rjmp	.-14     	; 0x298 <reset_tx_data+0xe>
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	08 95       	ret

000002aa <reset_char_array>:
     2aa:	66 23       	and	r22, r22
     2ac:	59 f0       	breq	.+22     	; 0x2c4 <reset_char_array+0x1a>
     2ae:	fc 01       	movw	r30, r24
     2b0:	61 50       	subi	r22, 0x01	; 1
     2b2:	70 e0       	ldi	r23, 0x00	; 0
     2b4:	6f 5f       	subi	r22, 0xFF	; 255
     2b6:	7f 4f       	sbci	r23, 0xFF	; 255
     2b8:	86 0f       	add	r24, r22
     2ba:	97 1f       	adc	r25, r23
     2bc:	11 92       	st	Z+, r1
     2be:	e8 17       	cp	r30, r24
     2c0:	f9 07       	cpc	r31, r25
     2c2:	e1 f7       	brne	.-8      	; 0x2bc <reset_char_array+0x12>
     2c4:	08 95       	ret

000002c6 <reset_all_data>:
     2c6:	41 e1       	ldi	r20, 0x11	; 17
     2c8:	67 e0       	ldi	r22, 0x07	; 7
     2ca:	71 e0       	ldi	r23, 0x01	; 1
     2cc:	87 ec       	ldi	r24, 0xC7	; 199
     2ce:	94 e0       	ldi	r25, 0x04	; 4
     2d0:	dc df       	rcall	.-72     	; 0x28a <reset_tx_data>
     2d2:	60 e8       	ldi	r22, 0x80	; 128
     2d4:	8c ed       	ldi	r24, 0xDC	; 220
     2d6:	93 e0       	ldi	r25, 0x03	; 3
     2d8:	e8 df       	rcall	.-48     	; 0x2aa <reset_char_array>
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	8c ed       	ldi	r24, 0xDC	; 220
     2de:	92 e0       	ldi	r25, 0x02	; 2
     2e0:	e4 cf       	rjmp	.-56     	; 0x2aa <reset_char_array>
     2e2:	08 95       	ret

000002e4 <rtc_init_period>:
     2e4:	14 be       	out	0x34, r1	; 52
     2e6:	e0 e6       	ldi	r30, 0x60	; 96
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	88 e1       	ldi	r24, 0x18	; 24
     2ec:	80 83       	st	Z, r24
     2ee:	86 e4       	ldi	r24, 0x46	; 70
     2f0:	80 83       	st	Z, r24
     2f2:	08 95       	ret

000002f4 <led_blink>:
     2f4:	af 92       	push	r10
     2f6:	bf 92       	push	r11
     2f8:	cf 92       	push	r12
     2fa:	df 92       	push	r13
     2fc:	ef 92       	push	r14
     2fe:	ff 92       	push	r15
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	2d 9a       	sbi	0x05, 5	; 5
     30a:	00 97       	sbiw	r24, 0x00	; 0
     30c:	e1 f1       	breq	.+120    	; 0x386 <led_blink+0x92>
     30e:	68 94       	set
     310:	aa 24       	eor	r10, r10
     312:	a6 f8       	bld	r10, 6
     314:	0f 2e       	mov	r0, r31
     316:	f2 e4       	ldi	r31, 0x42	; 66
     318:	bf 2e       	mov	r11, r31
     31a:	f0 2d       	mov	r31, r0
     31c:	0f 2e       	mov	r0, r31
     31e:	ff e0       	ldi	r31, 0x0F	; 15
     320:	cf 2e       	mov	r12, r31
     322:	f0 2d       	mov	r31, r0
     324:	d1 2c       	mov	r13, r1
     326:	e1 2c       	mov	r14, r1
     328:	f1 2c       	mov	r15, r1
     32a:	00 e0       	ldi	r16, 0x00	; 0
     32c:	10 e0       	ldi	r17, 0x00	; 0
     32e:	28 2f       	mov	r18, r24
     330:	39 2f       	mov	r19, r25
     332:	40 e0       	ldi	r20, 0x00	; 0
     334:	50 e0       	ldi	r21, 0x00	; 0
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	70 e0       	ldi	r23, 0x00	; 0
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <__muldi3>
     342:	0f 2e       	mov	r0, r31
     344:	f6 e0       	ldi	r31, 0x06	; 6
     346:	af 2e       	mov	r10, r31
     348:	f0 2d       	mov	r31, r0
     34a:	b1 2c       	mov	r11, r1
     34c:	c1 2c       	mov	r12, r1
     34e:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <__udivdi3>
     352:	29 51       	subi	r18, 0x19	; 25
     354:	3c 4f       	sbci	r19, 0xFC	; 252
     356:	4f 4f       	sbci	r20, 0xFF	; 255
     358:	5f 4f       	sbci	r21, 0xFF	; 255
     35a:	6f 4f       	sbci	r22, 0xFF	; 255
     35c:	7f 4f       	sbci	r23, 0xFF	; 255
     35e:	8f 4f       	sbci	r24, 0xFF	; 255
     360:	9f 4f       	sbci	r25, 0xFF	; 255
     362:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__floatundisf>
     366:	20 e0       	ldi	r18, 0x00	; 0
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	4a e7       	ldi	r20, 0x7A	; 122
     36c:	54 e4       	ldi	r21, 0x44	; 68
     36e:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__divsf3>
     372:	0e 94 22 0c 	call	0x1844	; 0x1844 <__fixunssfsi>
     376:	6b 01       	movw	r12, r22
     378:	7c 01       	movw	r14, r24
     37a:	e0 de       	rcall	.-576    	; 0x13c <__portable_avr_delay_cycles>
     37c:	2d 98       	cbi	0x05, 5	; 5
     37e:	c7 01       	movw	r24, r14
     380:	b6 01       	movw	r22, r12
     382:	dc de       	rcall	.-584    	; 0x13c <__portable_avr_delay_cycles>
     384:	0b c0       	rjmp	.+22     	; 0x39c <led_blink+0xa8>
     386:	61 e0       	ldi	r22, 0x01	; 1
     388:	70 e0       	ldi	r23, 0x00	; 0
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	d6 de       	rcall	.-596    	; 0x13c <__portable_avr_delay_cycles>
     390:	2d 98       	cbi	0x05, 5	; 5
     392:	61 e0       	ldi	r22, 0x01	; 1
     394:	70 e0       	ldi	r23, 0x00	; 0
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	d0 de       	rcall	.-608    	; 0x13c <__portable_avr_delay_cycles>
     39c:	df 91       	pop	r29
     39e:	cf 91       	pop	r28
     3a0:	1f 91       	pop	r17
     3a2:	0f 91       	pop	r16
     3a4:	ff 90       	pop	r15
     3a6:	ef 90       	pop	r14
     3a8:	df 90       	pop	r13
     3aa:	cf 90       	pop	r12
     3ac:	bf 90       	pop	r11
     3ae:	af 90       	pop	r10
     3b0:	08 95       	ret

000003b2 <adc_result_average>:
     3b2:	3f 92       	push	r3
     3b4:	4f 92       	push	r4
     3b6:	5f 92       	push	r5
     3b8:	6f 92       	push	r6
     3ba:	7f 92       	push	r7
     3bc:	8f 92       	push	r8
     3be:	9f 92       	push	r9
     3c0:	af 92       	push	r10
     3c2:	bf 92       	push	r11
     3c4:	cf 92       	push	r12
     3c6:	df 92       	push	r13
     3c8:	ef 92       	push	r14
     3ca:	ff 92       	push	r15
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	00 d0       	rcall	.+0      	; 0x3d6 <adc_result_average+0x24>
     3d6:	cd b7       	in	r28, 0x3d	; 61
     3d8:	de b7       	in	r29, 0x3e	; 62
     3da:	e6 2e       	mov	r14, r22
     3dc:	2d b7       	in	r18, 0x3d	; 61
     3de:	3e b7       	in	r19, 0x3e	; 62
     3e0:	3a 83       	std	Y+2, r19	; 0x02
     3e2:	29 83       	std	Y+1, r18	; 0x01
     3e4:	26 2f       	mov	r18, r22
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	22 0f       	add	r18, r18
     3ea:	33 1f       	adc	r19, r19
     3ec:	4d b7       	in	r20, 0x3d	; 61
     3ee:	5e b7       	in	r21, 0x3e	; 62
     3f0:	42 1b       	sub	r20, r18
     3f2:	53 0b       	sbc	r21, r19
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	f8 94       	cli
     3f8:	5e bf       	out	0x3e, r21	; 62
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	4d bf       	out	0x3d, r20	; 61
     3fe:	2d b7       	in	r18, 0x3d	; 61
     400:	3e b7       	in	r19, 0x3e	; 62
     402:	2f 5f       	subi	r18, 0xFF	; 255
     404:	3f 4f       	sbci	r19, 0xFF	; 255
     406:	e4 e6       	ldi	r30, 0x64	; 100
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	90 81       	ld	r25, Z
     40c:	9e 7f       	andi	r25, 0xFE	; 254
     40e:	90 83       	st	Z, r25
     410:	97 e8       	ldi	r25, 0x87	; 135
     412:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     416:	66 23       	and	r22, r22
     418:	91 f1       	breq	.+100    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     41a:	69 01       	movw	r12, r18
     41c:	41 2c       	mov	r4, r1
     41e:	51 2c       	mov	r5, r1
     420:	32 01       	movw	r6, r4
     422:	f1 2c       	mov	r15, r1
     424:	0f 2e       	mov	r0, r31
     426:	fc e7       	ldi	r31, 0x7C	; 124
     428:	8f 2e       	mov	r8, r31
     42a:	91 2c       	mov	r9, r1
     42c:	f0 2d       	mov	r31, r0
     42e:	80 64       	ori	r24, 0x40	; 64
     430:	38 2e       	mov	r3, r24
     432:	0a e7       	ldi	r16, 0x7A	; 122
     434:	10 e0       	ldi	r17, 0x00	; 0
     436:	0f 2e       	mov	r0, r31
     438:	f8 e7       	ldi	r31, 0x78	; 120
     43a:	af 2e       	mov	r10, r31
     43c:	b1 2c       	mov	r11, r1
     43e:	f0 2d       	mov	r31, r0
     440:	f4 01       	movw	r30, r8
     442:	30 82       	st	Z, r3
     444:	f8 01       	movw	r30, r16
     446:	80 81       	ld	r24, Z
     448:	80 64       	ori	r24, 0x40	; 64
     44a:	80 83       	st	Z, r24
     44c:	f8 01       	movw	r30, r16
     44e:	80 81       	ld	r24, Z
     450:	86 fd       	sbrc	r24, 6
     452:	fc cf       	rjmp	.-8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     454:	f5 01       	movw	r30, r10
     456:	80 81       	ld	r24, Z
     458:	91 81       	ldd	r25, Z+1	; 0x01
     45a:	f6 01       	movw	r30, r12
     45c:	81 93       	st	Z+, r24
     45e:	91 93       	st	Z+, r25
     460:	6f 01       	movw	r12, r30
     462:	48 0e       	add	r4, r24
     464:	59 1e       	adc	r5, r25
     466:	61 1c       	adc	r6, r1
     468:	71 1c       	adc	r7, r1
     46a:	8d 32       	cpi	r24, 0x2D	; 45
     46c:	91 40       	sbci	r25, 0x01	; 1
     46e:	18 f0       	brcs	.+6      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     470:	88 ee       	ldi	r24, 0xE8	; 232
     472:	93 e0       	ldi	r25, 0x03	; 3
     474:	3f df       	rcall	.-386    	; 0x2f4 <led_blink>
     476:	f3 94       	inc	r15
     478:	ef 10       	cpse	r14, r15
     47a:	e2 cf       	rjmp	.-60     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     47c:	03 c0       	rjmp	.+6      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     47e:	41 2c       	mov	r4, r1
     480:	51 2c       	mov	r5, r1
     482:	32 01       	movw	r6, r4
     484:	2e 2d       	mov	r18, r14
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	40 e0       	ldi	r20, 0x00	; 0
     48a:	50 e0       	ldi	r21, 0x00	; 0
     48c:	c3 01       	movw	r24, r6
     48e:	b2 01       	movw	r22, r4
     490:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__udivmodsi4>
     494:	c9 01       	movw	r24, r18
     496:	29 81       	ldd	r18, Y+1	; 0x01
     498:	3a 81       	ldd	r19, Y+2	; 0x02
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	f8 94       	cli
     49e:	3e bf       	out	0x3e, r19	; 62
     4a0:	0f be       	out	0x3f, r0	; 63
     4a2:	2d bf       	out	0x3d, r18	; 61
     4a4:	0f 90       	pop	r0
     4a6:	0f 90       	pop	r0
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	1f 91       	pop	r17
     4ae:	0f 91       	pop	r16
     4b0:	ff 90       	pop	r15
     4b2:	ef 90       	pop	r14
     4b4:	df 90       	pop	r13
     4b6:	cf 90       	pop	r12
     4b8:	bf 90       	pop	r11
     4ba:	af 90       	pop	r10
     4bc:	9f 90       	pop	r9
     4be:	8f 90       	pop	r8
     4c0:	7f 90       	pop	r7
     4c2:	6f 90       	pop	r6
     4c4:	5f 90       	pop	r5
     4c6:	4f 90       	pop	r4
     4c8:	3f 90       	pop	r3
     4ca:	08 95       	ret

000004cc <radio_power_on>:
     4cc:	1f 93       	push	r17
     4ce:	cf 93       	push	r28
     4d0:	df 93       	push	r29
     4d2:	5a 98       	cbi	0x0b, 2	; 11
     4d4:	67 ea       	ldi	r22, 0xA7	; 167
     4d6:	70 e0       	ldi	r23, 0x00	; 0
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	2f de       	rcall	.-930    	; 0x13c <__portable_avr_delay_cycles>
     4de:	5a 9a       	sbi	0x0b, 2	; 11
     4e0:	6b e1       	ldi	r22, 0x1B	; 27
     4e2:	71 e4       	ldi	r23, 0x41	; 65
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	29 de       	rcall	.-942    	; 0x13c <__portable_avr_delay_cycles>
     4ea:	5a 98       	cbi	0x0b, 2	; 11
     4ec:	66 ed       	ldi	r22, 0xD6	; 214
     4ee:	78 e0       	ldi	r23, 0x08	; 8
     4f0:	82 e0       	ldi	r24, 0x02	; 2
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	23 de       	rcall	.-954    	; 0x13c <__portable_avr_delay_cycles>
     4f6:	6b e6       	ldi	r22, 0x6B	; 107
     4f8:	74 e0       	ldi	r23, 0x04	; 4
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	1e de       	rcall	.-964    	; 0x13c <__portable_avr_delay_cycles>
     500:	5a 9a       	sbi	0x0b, 2	; 11
     502:	4c 99       	sbic	0x09, 4	; 9
     504:	15 c0       	rjmp	.+42     	; 0x530 <radio_power_on+0x64>
     506:	c0 e0       	ldi	r28, 0x00	; 0
     508:	d1 e0       	ldi	r29, 0x01	; 1
     50a:	10 e0       	ldi	r17, 0x00	; 0
     50c:	61 e5       	ldi	r22, 0x51	; 81
     50e:	73 ec       	ldi	r23, 0xC3	; 195
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	13 de       	rcall	.-986    	; 0x13c <__portable_avr_delay_cycles>
     516:	cf 5f       	subi	r28, 0xFF	; 255
     518:	89 b1       	in	r24, 0x09	; 9
     51a:	82 95       	swap	r24
     51c:	81 70       	andi	r24, 0x01	; 1
     51e:	8d 17       	cp	r24, r29
     520:	41 f0       	breq	.+16     	; 0x532 <radio_power_on+0x66>
     522:	8d 2f       	mov	r24, r29
     524:	cb 31       	cpi	r28, 0x1B	; 27
     526:	08 f0       	brcs	.+2      	; 0x52a <radio_power_on+0x5e>
     528:	81 2f       	mov	r24, r17
     52a:	81 11       	cpse	r24, r1
     52c:	ef cf       	rjmp	.-34     	; 0x50c <radio_power_on+0x40>
     52e:	01 c0       	rjmp	.+2      	; 0x532 <radio_power_on+0x66>
     530:	c0 e0       	ldi	r28, 0x00	; 0
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	cb 31       	cpi	r28, 0x1B	; 27
     536:	09 f0       	breq	.+2      	; 0x53a <radio_power_on+0x6e>
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	1f 91       	pop	r17
     540:	08 95       	ret

00000542 <at_get_radio_network_time>:

void at_get_radio_network_time(){
     542:	ef 92       	push	r14
     544:	ff 92       	push	r15
     546:	0f 93       	push	r16
     548:	1f 93       	push	r17
     54a:	cf 93       	push	r28
     54c:	df 93       	push	r29
     54e:	00 d0       	rcall	.+0      	; 0x550 <at_get_radio_network_time+0xe>
     550:	1f 92       	push	r1
     552:	cd b7       	in	r28, 0x3d	; 61
     554:	de b7       	in	r29, 0x3e	; 62
	
	int j = 0;
	int k = AT_QLTS_START;
	char temp[3] = "";
     556:	1a 82       	std	Y+2, r1	; 0x02
     558:	19 82       	std	Y+1, r1	; 0x01
     55a:	1b 82       	std	Y+3, r1	; 0x03
     55c:	0f 2e       	mov	r0, r31
     55e:	f6 e7       	ldi	r31, 0x76	; 118
     560:	ef 2e       	mov	r14, r31
     562:	f4 e0       	ldi	r31, 0x04	; 4
     564:	ff 2e       	mov	r15, r31
     566:	f0 2d       	mov	r31, r0
     568:	0a e0       	ldi	r16, 0x0A	; 10
     56a:	10 e0       	ldi	r17, 0x00	; 0
     56c:	f7 01       	movw	r30, r14
     56e:	31 97       	sbiw	r30, 0x01	; 1
	while (j < 6)
	{
		int i = 0;
		while (i < 2)
		{
			temp[i] = *(response+k+i);
     570:	80 81       	ld	r24, Z
     572:	89 83       	std	Y+1, r24	; 0x01
     574:	f7 01       	movw	r30, r14
     576:	80 81       	ld	r24, Z
     578:	8a 83       	std	Y+2, r24	; 0x02
			i++;
		}
		tx_data[POSITION_YEAR+j] = atoi(temp);
     57a:	ce 01       	movw	r24, r28
     57c:	01 96       	adiw	r24, 0x01	; 1
     57e:	0e 94 55 10 	call	0x20aa	; 0x20aa <atoi>
     582:	f8 01       	movw	r30, r16
     584:	ee 0f       	add	r30, r30
     586:	ff 1f       	adc	r31, r31
     588:	e9 53       	subi	r30, 0x39	; 57
     58a:	fb 4f       	sbci	r31, 0xFB	; 251
     58c:	91 83       	std	Z+1, r25	; 0x01
     58e:	80 83       	st	Z, r24
     590:	f3 e0       	ldi	r31, 0x03	; 3
     592:	ef 0e       	add	r14, r31
     594:	f1 1c       	adc	r15, r1
     596:	0f 5f       	subi	r16, 0xFF	; 255
     598:	1f 4f       	sbci	r17, 0xFF	; 255
	
	int j = 0;
	int k = AT_QLTS_START;
	char temp[3] = "";
	
	while (j < 6)
     59a:	00 31       	cpi	r16, 0x10	; 16
     59c:	11 05       	cpc	r17, r1
     59e:	31 f7       	brne	.-52     	; 0x56c <at_get_radio_network_time+0x2a>
		tx_data[POSITION_YEAR+j] = atoi(temp);
		k = k+3;
		j++;
	}
	
}
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	0f 90       	pop	r0
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	1f 91       	pop	r17
     5ac:	0f 91       	pop	r16
     5ae:	ff 90       	pop	r15
     5b0:	ef 90       	pop	r14
     5b2:	08 95       	ret

000005b4 <tx_at_response>:

uint8_t tx_at_response(uint8_t *cmd, char *compare, uint8_t response_time, uint8_t repeat) {
     5b4:	cf 92       	push	r12
     5b6:	df 92       	push	r13
     5b8:	ef 92       	push	r14
     5ba:	ff 92       	push	r15
     5bc:	0f 93       	push	r16
     5be:	1f 93       	push	r17
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
     5c4:	7c 01       	movw	r14, r24
     5c6:	6b 01       	movw	r12, r22
     5c8:	d2 2f       	mov	r29, r18
	uint8_t status = 0; //tx status, 0 = alles ok.
	uint8_t tx_at_cnt = 0; //nr of AT command sent
	char *ret; //response pointer
	
	ret = 0;
	while (tx_at_cnt < repeat) //9*300ms ~ 3s
     5ca:	22 23       	and	r18, r18
     5cc:	11 f1       	breq	.+68     	; 0x612 <tx_at_response+0x5e>
     5ce:	c0 e0       	ldi	r28, 0x00	; 0
	{
		reset_char_array(&response, RESPONSE_SIZE); //reset response buffer
		usart_tx_at(USART_SERIAL_SIM900, cmd); //send AT command to radio
		at_response(USART_SERIAL_SIM900, response_time, &response); //read the response from the radio
     5d0:	04 2f       	mov	r16, r20
     5d2:	10 e0       	ldi	r17, 0x00	; 0
	char *ret; //response pointer
	
	ret = 0;
	while (tx_at_cnt < repeat) //9*300ms ~ 3s
	{
		reset_char_array(&response, RESPONSE_SIZE); //reset response buffer
     5d4:	64 e6       	ldi	r22, 0x64	; 100
     5d6:	83 e6       	ldi	r24, 0x63	; 99
     5d8:	94 e0       	ldi	r25, 0x04	; 4
     5da:	67 de       	rcall	.-818    	; 0x2aa <reset_char_array>
		usart_tx_at(USART_SERIAL_SIM900, cmd); //send AT command to radio
     5dc:	b7 01       	movw	r22, r14
     5de:	80 ec       	ldi	r24, 0xC0	; 192
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	b7 dd       	rcall	.-1170   	; 0x152 <usart_tx_at>
		at_response(USART_SERIAL_SIM900, response_time, &response); //read the response from the radio
     5e4:	43 e6       	ldi	r20, 0x63	; 99
     5e6:	54 e0       	ldi	r21, 0x04	; 4
     5e8:	b8 01       	movw	r22, r16
     5ea:	80 ec       	ldi	r24, 0xC0	; 192
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	fc dd       	rcall	.-1032   	; 0x1e8 <at_response>
		ret = strstr(response, compare); //DO THE COMPARISON AND BREAK THE LOOP TO SAVE TIME => AVOID THE DELAY ROUTINE.
     5f0:	b6 01       	movw	r22, r12
     5f2:	83 e6       	ldi	r24, 0x63	; 99
     5f4:	94 e0       	ldi	r25, 0x04	; 4
     5f6:	0e 94 8d 10 	call	0x211a	; 0x211a <strstr>
		
		if (ret != 0) //correct response received
     5fa:	89 2b       	or	r24, r25
     5fc:	61 f4       	brne	.+24     	; 0x616 <tx_at_response+0x62>
			break;
			} else {
			status = 1;
		}
		
		delay_ms(AT_REPEAT_DELAY);
     5fe:	61 e5       	ldi	r22, 0x51	; 81
     600:	73 ec       	ldi	r23, 0xC3	; 195
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	9a dd       	rcall	.-1228   	; 0x13c <__portable_avr_delay_cycles>
		tx_at_cnt++;
     608:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t status = 0; //tx status, 0 = alles ok.
	uint8_t tx_at_cnt = 0; //nr of AT command sent
	char *ret; //response pointer
	
	ret = 0;
	while (tx_at_cnt < repeat) //9*300ms ~ 3s
     60a:	dc 13       	cpse	r29, r28
     60c:	e3 cf       	rjmp	.-58     	; 0x5d4 <tx_at_response+0x20>
		if (ret != 0) //correct response received
		{
			status = 0;
			break;
			} else {
			status = 1;
     60e:	c1 e0       	ldi	r28, 0x01	; 1
     610:	03 c0       	rjmp	.+6      	; 0x618 <tx_at_response+0x64>
	
}

uint8_t tx_at_response(uint8_t *cmd, char *compare, uint8_t response_time, uint8_t repeat) {
	
	uint8_t status = 0; //tx status, 0 = alles ok.
     612:	c0 e0       	ldi	r28, 0x00	; 0
     614:	01 c0       	rjmp	.+2      	; 0x618 <tx_at_response+0x64>
		delay_ms(AT_REPEAT_DELAY);
		tx_at_cnt++;
	}
	
	#ifdef DEBUG
	usart_tx_at(USART_SERIAL_EXAMPLE, response); //DEBUG
     616:	c0 e0       	ldi	r28, 0x00	; 0
     618:	63 e6       	ldi	r22, 0x63	; 99
     61a:	74 e0       	ldi	r23, 0x04	; 4
     61c:	80 ec       	ldi	r24, 0xC0	; 192
     61e:	90 e0       	ldi	r25, 0x00	; 0
	#endif // DEBUG
	

	return status;
}
     620:	98 dd       	rcall	.-1232   	; 0x152 <usart_tx_at>
     622:	8c 2f       	mov	r24, r28
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	1f 91       	pop	r17
     62a:	0f 91       	pop	r16
     62c:	ff 90       	pop	r15
     62e:	ef 90       	pop	r14
     630:	df 90       	pop	r13
     632:	cf 90       	pop	r12
     634:	08 95       	ret

00000636 <at_rf_connect>:
	
	WILL MATCH FLOWCHART IN VISIO
	*/
	uint8_t status = 0;
		
	if (tx_at_response(AT_QNSTATUS, AT_QNSTATUS_COMPARE, RESPONSE_TIME_300M, AT_REPEAT_LONG)) {goto END;}
     636:	2b e1       	ldi	r18, 0x1B	; 27
     638:	4c e2       	ldi	r20, 0x2C	; 44
     63a:	6c e5       	ldi	r22, 0x5C	; 92
     63c:	71 e0       	ldi	r23, 0x01	; 1
     63e:	88 e6       	ldi	r24, 0x68	; 104
     640:	91 e0       	ldi	r25, 0x01	; 1
     642:	b8 df       	rcall	.-144    	; 0x5b4 <tx_at_response>
     644:	81 11       	cpse	r24, r1
     646:	81 c0       	rjmp	.+258    	; 0x74a <at_rf_connect+0x114>
		//if (tx_at_response(AT_QNSTATUS, LOCAL_IP, 1, AT_REPEAT) == 1) {goto END;} //DEBUG
	if (tx_at_response(AT_QIFGCNT, RESPONSE_OK, RESPONSE_TIME_300M, AT_REPEAT)) {goto END;}
     648:	29 e0       	ldi	r18, 0x09	; 9
     64a:	4c e2       	ldi	r20, 0x2C	; 44
     64c:	6a e4       	ldi	r22, 0x4A	; 74
     64e:	72 e0       	ldi	r23, 0x02	; 2
     650:	85 e7       	ldi	r24, 0x75	; 117
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	af df       	rcall	.-162    	; 0x5b4 <tx_at_response>
     656:	81 11       	cpse	r24, r1
     658:	7a c0       	rjmp	.+244    	; 0x74e <at_rf_connect+0x118>
	if (tx_at_response(AT_QICSGP, RESPONSE_OK, RESPONSE_TIME_300M, AT_REPEAT)) {goto END;}
     65a:	29 e0       	ldi	r18, 0x09	; 9
     65c:	4c e2       	ldi	r20, 0x2C	; 44
     65e:	6a e4       	ldi	r22, 0x4A	; 74
     660:	72 e0       	ldi	r23, 0x02	; 2
     662:	83 e8       	ldi	r24, 0x83	; 131
     664:	91 e0       	ldi	r25, 0x01	; 1
     666:	a6 df       	rcall	.-180    	; 0x5b4 <tx_at_response>
     668:	81 11       	cpse	r24, r1
     66a:	73 c0       	rjmp	.+230    	; 0x752 <at_rf_connect+0x11c>
	
	if (tx_at_response(AT_QIMUX, RESPONSE_OK, RESPONSE_TIME_300M, AT_REPEAT)) {goto END;}
     66c:	29 e0       	ldi	r18, 0x09	; 9
     66e:	4c e2       	ldi	r20, 0x2C	; 44
     670:	6a e4       	ldi	r22, 0x4A	; 74
     672:	72 e0       	ldi	r23, 0x02	; 2
     674:	8b ea       	ldi	r24, 0xAB	; 171
     676:	91 e0       	ldi	r25, 0x01	; 1
     678:	9d df       	rcall	.-198    	; 0x5b4 <tx_at_response>
     67a:	81 11       	cpse	r24, r1
     67c:	6c c0       	rjmp	.+216    	; 0x756 <at_rf_connect+0x120>
	if (tx_at_response(AT_QIMODE, RESPONSE_OK, RESPONSE_TIME_300M, AT_REPEAT)) {goto END;}
     67e:	29 e0       	ldi	r18, 0x09	; 9
     680:	4c e2       	ldi	r20, 0x2C	; 44
     682:	6a e4       	ldi	r22, 0x4A	; 74
     684:	72 e0       	ldi	r23, 0x02	; 2
     686:	87 eb       	ldi	r24, 0xB7	; 183
     688:	91 e0       	ldi	r25, 0x01	; 1
     68a:	94 df       	rcall	.-216    	; 0x5b4 <tx_at_response>
     68c:	81 11       	cpse	r24, r1
     68e:	65 c0       	rjmp	.+202    	; 0x75a <at_rf_connect+0x124>
	if (tx_at_response(AT_QIDNSIP, RESPONSE_OK, RESPONSE_TIME_300M, AT_REPEAT)) {goto END;}
     690:	29 e0       	ldi	r18, 0x09	; 9
     692:	4c e2       	ldi	r20, 0x2C	; 44
     694:	6a e4       	ldi	r22, 0x4A	; 74
     696:	72 e0       	ldi	r23, 0x02	; 2
     698:	84 ec       	ldi	r24, 0xC4	; 196
     69a:	91 e0       	ldi	r25, 0x01	; 1
     69c:	8b df       	rcall	.-234    	; 0x5b4 <tx_at_response>
     69e:	81 11       	cpse	r24, r1
	if (tx_at_response(AT_QIREGAPP, RESPONSE_OK, RESPONSE_TIME_300M, AT_REPEAT)) {goto END;}
     6a0:	5e c0       	rjmp	.+188    	; 0x75e <at_rf_connect+0x128>
     6a2:	29 e0       	ldi	r18, 0x09	; 9
     6a4:	4c e2       	ldi	r20, 0x2C	; 44
     6a6:	6a e4       	ldi	r22, 0x4A	; 74
     6a8:	72 e0       	ldi	r23, 0x02	; 2
     6aa:	82 ed       	ldi	r24, 0xD2	; 210
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	82 df       	rcall	.-252    	; 0x5b4 <tx_at_response>
	if (tx_at_response(AT_QISTAT, AT_QISTAT_COMPARE_IP_START, RESPONSE_TIME_300M, AT_REPEAT)) {goto END;} //CHECK IP STATUS
     6b0:	81 11       	cpse	r24, r1
     6b2:	57 c0       	rjmp	.+174    	; 0x762 <at_rf_connect+0x12c>
     6b4:	29 e0       	ldi	r18, 0x09	; 9
     6b6:	4c e2       	ldi	r20, 0x2C	; 44
     6b8:	6f ed       	ldi	r22, 0xDF	; 223
     6ba:	71 e0       	ldi	r23, 0x01	; 1
     6bc:	88 ee       	ldi	r24, 0xE8	; 232
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	79 df       	rcall	.-270    	; 0x5b4 <tx_at_response>
	if (tx_at_response(AT_QIACT, AT_QIACT_COMPARE, RESPONSE_TIME_20S, AT_REPEAT)) {goto END;}
     6c2:	81 11       	cpse	r24, r1
     6c4:	50 c0       	rjmp	.+160    	; 0x766 <at_rf_connect+0x130>
     6c6:	29 e0       	ldi	r18, 0x09	; 9
     6c8:	40 e2       	ldi	r20, 0x20	; 32
     6ca:	63 ef       	ldi	r22, 0xF3	; 243
     6cc:	71 e0       	ldi	r23, 0x01	; 1
     6ce:	89 ef       	ldi	r24, 0xF9	; 249
     6d0:	91 e0       	ldi	r25, 0x01	; 1
     6d2:	70 df       	rcall	.-288    	; 0x5b4 <tx_at_response>
	if (tx_at_response(AT_QILOCIP, LOCAL_IP, RESPONSE_TIME_300M, AT_REPEAT)) {goto END;} //Need local IP
     6d4:	81 11       	cpse	r24, r1
     6d6:	49 c0       	rjmp	.+146    	; 0x76a <at_rf_connect+0x134>
     6d8:	29 e0       	ldi	r18, 0x09	; 9
     6da:	4c e2       	ldi	r20, 0x2C	; 44
     6dc:	63 e0       	ldi	r22, 0x03	; 3
     6de:	72 e0       	ldi	r23, 0x02	; 2
     6e0:	86 e0       	ldi	r24, 0x06	; 6
     6e2:	92 e0       	ldi	r25, 0x02	; 2
     6e4:	67 df       	rcall	.-306    	; 0x5b4 <tx_at_response>
	if (tx_at_response(AT_QISTAT, AT_QISTAT_COMPARE_CONNECT_OK || 
     6e6:	81 11       	cpse	r24, r1
     6e8:	42 c0       	rjmp	.+132    	; 0x76e <at_rf_connect+0x138>
     6ea:	29 e0       	ldi	r18, 0x09	; 9
     6ec:	4c e2       	ldi	r20, 0x2C	; 44
     6ee:	61 e0       	ldi	r22, 0x01	; 1
     6f0:	70 e0       	ldi	r23, 0x00	; 0
     6f2:	88 ee       	ldi	r24, 0xE8	; 232
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	5e df       	rcall	.-324    	; 0x5b4 <tx_at_response>
								AT_QISTAT_COMPARE_IP_INITIAL ||
								AT_QISTAT_COMPARE_IP_STATUS ||
								AT_QISTAT_COMPARE_IP_CLOSE, RESPONSE_TIME_300M, AT_REPEAT)) {goto END;} //CHECK IP STATUS
	if (tx_at_response(AT_QIOPEN, RESPONSE_OK, RESPONSE_TIME_20S, AT_REPEAT)) {status = 1; goto END;}
     6f8:	81 11       	cpse	r24, r1
     6fa:	3b c0       	rjmp	.+118    	; 0x772 <at_rf_connect+0x13c>
     6fc:	29 e0       	ldi	r18, 0x09	; 9
     6fe:	40 e2       	ldi	r20, 0x20	; 32
     700:	6a e4       	ldi	r22, 0x4A	; 74
     702:	72 e0       	ldi	r23, 0x02	; 2
     704:	82 e1       	ldi	r24, 0x12	; 18
     706:	92 e0       	ldi	r25, 0x02	; 2
     708:	55 df       	rcall	.-342    	; 0x5b4 <tx_at_response>
	if (tx_at_response(AT_QISRVC, RESPONSE_OK, RESPONSE_TIME_300M, AT_REPEAT)) {goto END;}
     70a:	81 11       	cpse	r24, r1
     70c:	34 c0       	rjmp	.+104    	; 0x776 <at_rf_connect+0x140>
     70e:	29 e0       	ldi	r18, 0x09	; 9
     710:	4c e2       	ldi	r20, 0x2C	; 44
     712:	6a e4       	ldi	r22, 0x4A	; 74
     714:	72 e0       	ldi	r23, 0x02	; 2
     716:	85 e3       	ldi	r24, 0x35	; 53
     718:	92 e0       	ldi	r25, 0x02	; 2
     71a:	4c df       	rcall	.-360    	; 0x5b4 <tx_at_response>
	if (tx_at_response(AT_QISTAT, AT_QISTAT_COMPARE_CONNECT_OK, RESPONSE_TIME_300M, AT_REPEAT)) {goto END;} //CHECK IP STATUS
     71c:	81 11       	cpse	r24, r1
     71e:	2d c0       	rjmp	.+90     	; 0x77a <at_rf_connect+0x144>
     720:	29 e0       	ldi	r18, 0x09	; 9
     722:	4c e2       	ldi	r20, 0x2C	; 44
     724:	62 e4       	ldi	r22, 0x42	; 66
     726:	72 e0       	ldi	r23, 0x02	; 2
     728:	88 ee       	ldi	r24, 0xE8	; 232
     72a:	91 e0       	ldi	r25, 0x01	; 1
	if (tx_at_response(AT_QLTS, AT_QLTS_COMPARE, RESPONSE_TIME_300M, AT_REPEAT)) {status = 32; goto END;} else {at_get_radio_network_time();} //get network's time
     72c:	43 df       	rcall	.-378    	; 0x5b4 <tx_at_response>
     72e:	81 11       	cpse	r24, r1
     730:	26 c0       	rjmp	.+76     	; 0x77e <at_rf_connect+0x148>
     732:	29 e0       	ldi	r18, 0x09	; 9
     734:	4c e2       	ldi	r20, 0x2C	; 44
     736:	6d e4       	ldi	r22, 0x4D	; 77
     738:	72 e0       	ldi	r23, 0x02	; 2
     73a:	84 e5       	ldi	r24, 0x54	; 84
     73c:	92 e0       	ldi	r25, 0x02	; 2
     73e:	3a df       	rcall	.-396    	; 0x5b4 <tx_at_response>
     740:	81 11       	cpse	r24, r1
     742:	1f c0       	rjmp	.+62     	; 0x782 <at_rf_connect+0x14c>
	status = 1 => one of the AT commands was not executed sucessfully.
	status = 32 => QLTS, i.e. the network time didn't execute sucessfully.
	
	WILL MATCH FLOWCHART IN VISIO
	*/
	uint8_t status = 0;
     744:	fe de       	rcall	.-516    	; 0x542 <at_get_radio_network_time>
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	08 95       	ret
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	08 95       	ret
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	08 95       	ret
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	08 95       	ret
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	08 95       	ret
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	08 95       	ret
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	08 95       	ret
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	08 95       	ret
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	08 95       	ret
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	08 95       	ret
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	08 95       	ret
     772:	80 e0       	ldi	r24, 0x00	; 0
	if (tx_at_response(AT_QILOCIP, LOCAL_IP, RESPONSE_TIME_300M, AT_REPEAT)) {goto END;} //Need local IP
	if (tx_at_response(AT_QISTAT, AT_QISTAT_COMPARE_CONNECT_OK || 
								AT_QISTAT_COMPARE_IP_INITIAL ||
								AT_QISTAT_COMPARE_IP_STATUS ||
								AT_QISTAT_COMPARE_IP_CLOSE, RESPONSE_TIME_300M, AT_REPEAT)) {goto END;} //CHECK IP STATUS
	if (tx_at_response(AT_QIOPEN, RESPONSE_OK, RESPONSE_TIME_20S, AT_REPEAT)) {status = 1; goto END;}
     774:	08 95       	ret
     776:	81 e0       	ldi	r24, 0x01	; 1
	status = 1 => one of the AT commands was not executed sucessfully.
	status = 32 => QLTS, i.e. the network time didn't execute sucessfully.
	
	WILL MATCH FLOWCHART IN VISIO
	*/
	uint8_t status = 0;
     778:	08 95       	ret
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	08 95       	ret
     77e:	80 e0       	ldi	r24, 0x00	; 0
								AT_QISTAT_COMPARE_IP_STATUS ||
								AT_QISTAT_COMPARE_IP_CLOSE, RESPONSE_TIME_300M, AT_REPEAT)) {goto END;} //CHECK IP STATUS
	if (tx_at_response(AT_QIOPEN, RESPONSE_OK, RESPONSE_TIME_20S, AT_REPEAT)) {status = 1; goto END;}
	if (tx_at_response(AT_QISRVC, RESPONSE_OK, RESPONSE_TIME_300M, AT_REPEAT)) {goto END;}
	if (tx_at_response(AT_QISTAT, AT_QISTAT_COMPARE_CONNECT_OK, RESPONSE_TIME_300M, AT_REPEAT)) {goto END;} //CHECK IP STATUS
	if (tx_at_response(AT_QLTS, AT_QLTS_COMPARE, RESPONSE_TIME_300M, AT_REPEAT)) {status = 32; goto END;} else {at_get_radio_network_time();} //get network's time
     780:	08 95       	ret
	
	END: return status;
}
     782:	80 e2       	ldi	r24, 0x20	; 32
     784:	08 95       	ret

00000786 <at_rf_disconnect>:
	
	WILL MATCH FLOWCHART IN VISIO
	*/
	uint8_t status = 0;
	
	if (tx_at_response(AT_QICLOSE, RESPONSE_OK, RESPONSE_TIME_300M, AT_REPEAT)) {goto END;}
     786:	29 e0       	ldi	r18, 0x09	; 9
     788:	4c e2       	ldi	r20, 0x2C	; 44
     78a:	6a e4       	ldi	r22, 0x4A	; 74
     78c:	72 e0       	ldi	r23, 0x02	; 2
     78e:	8d e5       	ldi	r24, 0x5D	; 93
     790:	92 e0       	ldi	r25, 0x02	; 2
     792:	10 df       	rcall	.-480    	; 0x5b4 <tx_at_response>
     794:	81 11       	cpse	r24, r1
     796:	07 c0       	rjmp	.+14     	; 0x7a6 <at_rf_disconnect+0x20>
	if (tx_at_response(AT_QIDEACT, RESPONSE_OK, RESPONSE_TIME_20S, AT_REPEAT)) {goto END;}
     798:	29 e0       	ldi	r18, 0x09	; 9
     79a:	40 e2       	ldi	r20, 0x20	; 32
     79c:	6a e4       	ldi	r22, 0x4A	; 74
     79e:	72 e0       	ldi	r23, 0x02	; 2
     7a0:	89 e6       	ldi	r24, 0x69	; 105
     7a2:	92 e0       	ldi	r25, 0x02	; 2
     7a4:	07 df       	rcall	.-498    	; 0x5b4 <tx_at_response>
	
	END: return status;
}
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	08 95       	ret

000007aa <tx>:

uint8_t tx(char *data, int len) {
     7aa:	ef 92       	push	r14
     7ac:	ff 92       	push	r15
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	7c 01       	movw	r14, r24
     7b8:	8b 01       	movw	r16, r22
	status > 0 => one of the AT commands was not executed sucessfully.
	*/
	uint8_t status = 0;
	int i = 0;
	
	if (tx_at_response(AT_QISEND, AT_QISEND_COMPARE, RESPONSE_TIME_300M, AT_REPEAT)) {status = 1; goto END;}
     7ba:	29 e0       	ldi	r18, 0x09	; 9
     7bc:	4c e2       	ldi	r20, 0x2C	; 44
     7be:	65 e7       	ldi	r22, 0x75	; 117
     7c0:	72 e0       	ldi	r23, 0x02	; 2
     7c2:	87 e7       	ldi	r24, 0x77	; 119
     7c4:	92 e0       	ldi	r25, 0x02	; 2
     7c6:	f6 de       	rcall	.-532    	; 0x5b4 <tx_at_response>
     7c8:	81 11       	cpse	r24, r1
     7ca:	18 c0       	rjmp	.+48     	; 0x7fc <tx+0x52>
	while (i < len)
     7cc:	10 16       	cp	r1, r16
     7ce:	11 06       	cpc	r1, r17
     7d0:	54 f4       	brge	.+20     	; 0x7e6 <tx+0x3c>
     7d2:	e7 01       	movw	r28, r14
     7d4:	0e 0d       	add	r16, r14
     7d6:	1f 1d       	adc	r17, r15
	{
		//usart_putchar(USART_SERIAL_SIM900, *(data+i));
		#ifdef DEBUG
		usart_putchar(USART_SERIAL_EXAMPLE, *(data+i)); //DEBUG
     7d8:	69 91       	ld	r22, Y+
     7da:	80 ec       	ldi	r24, 0xC0	; 192
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	76 d3       	rcall	.+1772   	; 0xecc <usart_putchar>
	*/
	uint8_t status = 0;
	int i = 0;
	
	if (tx_at_response(AT_QISEND, AT_QISEND_COMPARE, RESPONSE_TIME_300M, AT_REPEAT)) {status = 1; goto END;}
	while (i < len)
     7e0:	c0 17       	cp	r28, r16
     7e2:	d1 07       	cpc	r29, r17
     7e4:	c9 f7       	brne	.-14     	; 0x7d8 <tx+0x2e>
		#endif // DEBUG
		
		i++;
	}
	
	if (tx_at_response(CTRL_Z, NULL, RESPONSE_TIME_300M, AT_REPEAT)) {status = 2; goto END;}
     7e6:	29 e0       	ldi	r18, 0x09	; 9
     7e8:	4c e2       	ldi	r20, 0x2C	; 44
     7ea:	60 e0       	ldi	r22, 0x00	; 0
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	82 e8       	ldi	r24, 0x82	; 130
     7f0:	92 e0       	ldi	r25, 0x02	; 2
     7f2:	e0 de       	rcall	.-576    	; 0x5b4 <tx_at_response>
     7f4:	88 23       	and	r24, r24
     7f6:	21 f0       	breq	.+8      	; 0x800 <tx+0x56>
     7f8:	82 e0       	ldi	r24, 0x02	; 2
     7fa:	03 c0       	rjmp	.+6      	; 0x802 <tx+0x58>
	status > 0 => one of the AT commands was not executed sucessfully.
	*/
	uint8_t status = 0;
	int i = 0;
	
	if (tx_at_response(AT_QISEND, AT_QISEND_COMPARE, RESPONSE_TIME_300M, AT_REPEAT)) {status = 1; goto END;}
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	01 c0       	rjmp	.+2      	; 0x802 <tx+0x58>
uint8_t tx(char *data, int len) {
	/*
	status = 0 => all AT commands was executed sucesessfully
	status > 0 => one of the AT commands was not executed sucessfully.
	*/
	uint8_t status = 0;
     800:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	if (tx_at_response(CTRL_Z, NULL, RESPONSE_TIME_300M, AT_REPEAT)) {status = 2; goto END;}
	
	END: return status;
}
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	1f 91       	pop	r17
     808:	0f 91       	pop	r16
     80a:	ff 90       	pop	r15
     80c:	ef 90       	pop	r14
     80e:	08 95       	ret

00000810 <data_to_char>:

uint8_t data_to_char(uint16_t *array_data, uint8_t array_data_len, char *array_ascii, int base) {
     810:	2f 92       	push	r2
     812:	3f 92       	push	r3
     814:	4f 92       	push	r4
     816:	5f 92       	push	r5
     818:	6f 92       	push	r6
     81a:	7f 92       	push	r7
     81c:	8f 92       	push	r8
     81e:	9f 92       	push	r9
     820:	af 92       	push	r10
     822:	bf 92       	push	r11
     824:	cf 92       	push	r12
     826:	df 92       	push	r13
     828:	ef 92       	push	r14
     82a:	ff 92       	push	r15
     82c:	0f 93       	push	r16
     82e:	1f 93       	push	r17
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
     838:	63 97       	sbiw	r28, 0x13	; 19
     83a:	0f b6       	in	r0, 0x3f	; 63
     83c:	f8 94       	cli
     83e:	de bf       	out	0x3e, r29	; 62
     840:	0f be       	out	0x3f, r0	; 63
     842:	cd bf       	out	0x3d, r28	; 61
     844:	9b 8b       	std	Y+19, r25	; 0x13
     846:	8a 8b       	std	Y+18, r24	; 0x12
     848:	3f 87       	std	Y+15, r19	; 0x0f
     84a:	2e 87       	std	Y+14, r18	; 0x0e
	uint8_t status = 0;
	uint8_t i = 0;
	uint8_t j = 0;
	char temp[5] = ""; //MAX 4 VALUES + NULL TERMINATION
     84c:	1a 82       	std	Y+2, r1	; 0x02
     84e:	19 82       	std	Y+1, r1	; 0x01
     850:	fe 01       	movw	r30, r28
     852:	33 96       	adiw	r30, 0x03	; 3
     854:	83 e0       	ldi	r24, 0x03	; 3
     856:	df 01       	movw	r26, r30
     858:	1d 92       	st	X+, r1
     85a:	8a 95       	dec	r24
     85c:	e9 f7       	brne	.-6      	; 0x858 <data_to_char+0x48>
     85e:	aa 88       	ldd	r10, Y+18	; 0x12
     860:	bb 88       	ldd	r11, Y+19	; 0x13
     862:	15 01       	movw	r2, r10
     864:	b4 e1       	ldi	r27, 0x14	; 20
     866:	2b 0e       	add	r2, r27
     868:	31 1c       	adc	r3, r1
	while (i <= POSITION_TIME)
	{
		j=1;
		while (TX_DATA_DIGITS-j > 0)
		{
			if ((*(array_data+i) < pow(base,TX_DATA_DIGITS-j))) //CHECK IF NUMBER IS LESS THAN LIMITS
     86a:	8e 85       	ldd	r24, Y+14	; 0x0e
     86c:	9f 85       	ldd	r25, Y+15	; 0x0f
     86e:	09 2e       	mov	r0, r25
     870:	00 0c       	add	r0, r0
     872:	aa 0b       	sbc	r26, r26
     874:	bb 0b       	sbc	r27, r27
     876:	8a 87       	std	Y+10, r24	; 0x0a
     878:	9b 87       	std	Y+11, r25	; 0x0b
     87a:	ac 87       	std	Y+12, r26	; 0x0c
     87c:	bd 87       	std	Y+13, r27	; 0x0d
     87e:	39 8a       	std	Y+17, r3	; 0x11
     880:	28 8a       	std	Y+16, r2	; 0x10
     882:	6a 01       	movw	r12, r20
     884:	6a c0       	rjmp	.+212    	; 0x95a <__stack+0x5b>
     886:	e9 2c       	mov	r14, r9
     888:	f3 2c       	mov	r15, r3
     88a:	6a 85       	ldd	r22, Y+10	; 0x0a
     88c:	7b 85       	ldd	r23, Y+11	; 0x0b
     88e:	8c 85       	ldd	r24, Y+12	; 0x0c
     890:	9d 85       	ldd	r25, Y+13	; 0x0d
     892:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__floatsisf>
     896:	2b 01       	movw	r4, r22
     898:	3c 01       	movw	r6, r24
     89a:	b8 01       	movw	r22, r16
     89c:	01 2e       	mov	r0, r17
     89e:	00 0c       	add	r0, r0
     8a0:	88 0b       	sbc	r24, r24
     8a2:	99 0b       	sbc	r25, r25
     8a4:	fd d7       	rcall	.+4090   	; 0x18a0 <__floatsisf>
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	c3 01       	movw	r24, r6
     8ac:	b2 01       	movw	r22, r4
     8ae:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <pow>
     8b2:	6e 83       	std	Y+6, r22	; 0x06
     8b4:	7f 83       	std	Y+7, r23	; 0x07
     8b6:	88 87       	std	Y+8, r24	; 0x08
     8b8:	99 87       	std	Y+9, r25	; 0x09
     8ba:	d5 01       	movw	r26, r10
     8bc:	6d 91       	ld	r22, X+
     8be:	7c 91       	ld	r23, X
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	eb d7       	rcall	.+4054   	; 0x189c <__floatunsisf>
     8c6:	2e 81       	ldd	r18, Y+6	; 0x06
     8c8:	3f 81       	ldd	r19, Y+7	; 0x07
     8ca:	48 85       	ldd	r20, Y+8	; 0x08
     8cc:	59 85       	ldd	r21, Y+9	; 0x09
     8ce:	4e d7       	rcall	.+3740   	; 0x176c <__cmpsf2>
     8d0:	88 23       	and	r24, r24
     8d2:	4c f4       	brge	.+18     	; 0x8e6 <data_to_char+0xd6>
			{
				strcat(array_ascii, "0"); //ADD LEADING ZEROS
     8d4:	f6 01       	movw	r30, r12
     8d6:	01 90       	ld	r0, Z+
     8d8:	00 20       	and	r0, r0
     8da:	e9 f7       	brne	.-6      	; 0x8d6 <data_to_char+0xc6>
     8dc:	31 97       	sbiw	r30, 0x01	; 1
     8de:	80 e3       	ldi	r24, 0x30	; 48
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	91 83       	std	Z+1, r25	; 0x01
     8e4:	80 83       	st	Z, r24
     8e6:	01 50       	subi	r16, 0x01	; 1
     8e8:	11 09       	sbc	r17, r1
	
	//CONVERT ALL 2 BYTES NUMBERS
	while (i <= POSITION_TIME)
	{
		j=1;
		while (TX_DATA_DIGITS-j > 0)
     8ea:	69 f6       	brne	.-102    	; 0x886 <data_to_char+0x76>
     8ec:	92 e0       	ldi	r25, 0x02	; 2
     8ee:	a9 0e       	add	r10, r25
     8f0:	b1 1c       	adc	r11, r1
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
     8f2:	4e 85       	ldd	r20, Y+14	; 0x0e
     8f4:	5f 85       	ldd	r21, Y+15	; 0x0f
     8f6:	be 01       	movw	r22, r28
     8f8:	6f 5f       	subi	r22, 0xFF	; 255
     8fa:	7f 4f       	sbci	r23, 0xFF	; 255
     8fc:	d7 01       	movw	r26, r14
     8fe:	8d 91       	ld	r24, X+
     900:	9c 91       	ld	r25, X
     902:	0e 94 a7 10 	call	0x214e	; 0x214e <itoa>
			} else {
			temp[0] = (*(array_data+i) >> 8) & 0xff; //JUST GRAB THE BYTES
			temp[1] = *(array_data+i) & 0xff;
		}
		
		strcat(array_ascii, temp); //APPEND NUMBER
     906:	be 01       	movw	r22, r28
     908:	6f 5f       	subi	r22, 0xFF	; 255
     90a:	7f 4f       	sbci	r23, 0xFF	; 255
     90c:	c6 01       	movw	r24, r12
     90e:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <strcat>
		strcat(array_ascii, ","); //DEBUG
     912:	f6 01       	movw	r30, r12
     914:	01 90       	ld	r0, Z+
     916:	00 20       	and	r0, r0
     918:	e9 f7       	brne	.-6      	; 0x914 <__stack+0x15>
     91a:	31 97       	sbiw	r30, 0x01	; 1
     91c:	8c e2       	ldi	r24, 0x2C	; 44
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	91 83       	std	Z+1, r25	; 0x01
     922:	80 83       	st	Z, r24
		reset_char_array(&temp, sizeof(temp));
     924:	65 e0       	ldi	r22, 0x05	; 5
     926:	ce 01       	movw	r24, r28
     928:	01 96       	adiw	r24, 0x01	; 1
     92a:	bf dc       	rcall	.-1666   	; 0x2aa <reset_char_array>
	uint8_t i = 0;
	uint8_t j = 0;
	char temp[5] = ""; //MAX 4 VALUES + NULL TERMINATION
	
	//CONVERT ALL 2 BYTES NUMBERS
	while (i <= POSITION_TIME)
     92c:	a8 89       	ldd	r26, Y+16	; 0x10
     92e:	b9 89       	ldd	r27, Y+17	; 0x11
     930:	aa 16       	cp	r10, r26
     932:	bb 06       	cpc	r11, r27
     934:	91 f4       	brne	.+36     	; 0x95a <__stack+0x5b>
     936:	1d 01       	movw	r2, r26
     938:	46 01       	movw	r8, r12
     93a:	ea 88       	ldd	r14, Y+18	; 0x12
     93c:	fb 88       	ldd	r15, Y+19	; 0x13
     93e:	b2 e2       	ldi	r27, 0x22	; 34
     940:	eb 0e       	add	r14, r27
     942:	f1 1c       	adc	r15, r1
		j=1;
		while (TX_DATE_DIGITS-j > 0)
		{
			if ((*(array_data+i) < pow(base,TX_DATE_DIGITS-j))) //CHECK IF NUMBER IS LESS THAN LIMITS
			{
				strcat(array_ascii, "0"); //ADD LEADING ZEROS
     944:	0f 2e       	mov	r0, r31
     946:	f0 e3       	ldi	r31, 0x30	; 48
     948:	af 2e       	mov	r10, r31
     94a:	b1 2c       	mov	r11, r1
     94c:	f0 2d       	mov	r31, r0
			} else {
			temp[0] = *(array_data+i) & 0xff; //JUST GRAB THE BYTES
		}
		
		strcat(array_ascii, temp); //APPEND NUMBER
		strcat(array_ascii, ","); //DEBUG
     94e:	0f 2e       	mov	r0, r31
     950:	fc e2       	ldi	r31, 0x2C	; 44
     952:	cf 2e       	mov	r12, r31
     954:	d1 2c       	mov	r13, r1
     956:	f0 2d       	mov	r31, r0
     958:	2d c0       	rjmp	.+90     	; 0x9b4 <__stack+0xb5>
	if (tx_at_response(CTRL_Z, NULL, RESPONSE_TIME_300M, AT_REPEAT)) {status = 2; goto END;}
	
	END: return status;
}

uint8_t data_to_char(uint16_t *array_data, uint8_t array_data_len, char *array_ascii, int base) {
     95a:	03 e0       	ldi	r16, 0x03	; 3
     95c:	10 e0       	ldi	r17, 0x00	; 0
     95e:	9a 2c       	mov	r9, r10
     960:	3b 2c       	mov	r3, r11
     962:	91 cf       	rjmp	.-222    	; 0x886 <data_to_char+0x76>
		j=1;
		while (TX_DATE_DIGITS-j > 0)
		{
			if ((*(array_data+i) < pow(base,TX_DATE_DIGITS-j))) //CHECK IF NUMBER IS LESS THAN LIMITS
			{
				strcat(array_ascii, "0"); //ADD LEADING ZEROS
     964:	f4 01       	movw	r30, r8
     966:	01 90       	ld	r0, Z+
     968:	00 20       	and	r0, r0
     96a:	e9 f7       	brne	.-6      	; 0x966 <__stack+0x67>
     96c:	31 97       	sbiw	r30, 0x01	; 1
     96e:	b1 82       	std	Z+1, r11	; 0x01
     970:	a0 82       	st	Z, r10
     972:	e2 e0       	ldi	r30, 0x02	; 2
     974:	2e 0e       	add	r2, r30
     976:	31 1c       	adc	r3, r1
     978:	4e 85       	ldd	r20, Y+14	; 0x0e
     97a:	5f 85       	ldd	r21, Y+15	; 0x0f
     97c:	be 01       	movw	r22, r28
     97e:	6f 5f       	subi	r22, 0xFF	; 255
     980:	7f 4f       	sbci	r23, 0xFF	; 255
     982:	d8 01       	movw	r26, r16
     984:	8d 91       	ld	r24, X+
     986:	9c 91       	ld	r25, X
     988:	0e 94 a7 10 	call	0x214e	; 0x214e <itoa>
			itoa(*(array_data+i), temp, base); //CONVERT NUMBER TO ASCII
			} else {
			temp[0] = *(array_data+i) & 0xff; //JUST GRAB THE BYTES
		}
		
		strcat(array_ascii, temp); //APPEND NUMBER
     98c:	be 01       	movw	r22, r28
     98e:	6f 5f       	subi	r22, 0xFF	; 255
     990:	7f 4f       	sbci	r23, 0xFF	; 255
     992:	c4 01       	movw	r24, r8
     994:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <strcat>
		strcat(array_ascii, ","); //DEBUG
     998:	f4 01       	movw	r30, r8
     99a:	01 90       	ld	r0, Z+
     99c:	00 20       	and	r0, r0
     99e:	e9 f7       	brne	.-6      	; 0x99a <__stack+0x9b>
     9a0:	31 97       	sbiw	r30, 0x01	; 1
     9a2:	d1 82       	std	Z+1, r13	; 0x01
     9a4:	c0 82       	st	Z, r12
		reset_char_array(&temp, sizeof(temp));
     9a6:	65 e0       	ldi	r22, 0x05	; 5
     9a8:	ce 01       	movw	r24, r28
     9aa:	01 96       	adiw	r24, 0x01	; 1
     9ac:	7e dc       	rcall	.-1796   	; 0x2aa <reset_char_array>
	}
	//////////////////////////////////////////////////////////////////////////
	
	//CONVERT ALL 1 BYTES NUMBERS
	i = POSITION_YEAR;
	while (i <= POSITION_STATUS)
     9ae:	e2 14       	cp	r14, r2
     9b0:	f3 04       	cpc	r15, r3
     9b2:	81 f0       	breq	.+32     	; 0x9d4 <__stack+0xd5>
     9b4:	81 01       	movw	r16, r2
	{
		j=1;
		while (TX_DATE_DIGITS-j > 0)
		{
			if ((*(array_data+i) < pow(base,TX_DATE_DIGITS-j))) //CHECK IF NUMBER IS LESS THAN LIMITS
     9b6:	f1 01       	movw	r30, r2
     9b8:	60 81       	ld	r22, Z
     9ba:	71 81       	ldd	r23, Z+1	; 0x01
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	6d d7       	rcall	.+3802   	; 0x189c <__floatunsisf>
     9c2:	9b 01       	movw	r18, r22
     9c4:	ac 01       	movw	r20, r24
     9c6:	c3 01       	movw	r24, r6
     9c8:	b2 01       	movw	r22, r4
     9ca:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__gesf2>
     9ce:	18 16       	cp	r1, r24
     9d0:	84 f6       	brge	.-96     	; 0x972 <__stack+0x73>
     9d2:	c8 cf       	rjmp	.-112    	; 0x964 <__stack+0x65>
		reset_char_array(&temp, sizeof(temp));
		i++;
	}
	//////////////////////////////////////////////////////////////////////////
	return status;
}
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	63 96       	adiw	r28, 0x13	; 19
     9d8:	0f b6       	in	r0, 0x3f	; 63
     9da:	f8 94       	cli
     9dc:	de bf       	out	0x3e, r29	; 62
     9de:	0f be       	out	0x3f, r0	; 63
     9e0:	cd bf       	out	0x3d, r28	; 61
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	ff 90       	pop	r15
     9ec:	ef 90       	pop	r14
     9ee:	df 90       	pop	r13
     9f0:	cf 90       	pop	r12
     9f2:	bf 90       	pop	r11
     9f4:	af 90       	pop	r10
     9f6:	9f 90       	pop	r9
     9f8:	8f 90       	pop	r8
     9fa:	7f 90       	pop	r7
     9fc:	6f 90       	pop	r6
     9fe:	5f 90       	pop	r5
     a00:	4f 90       	pop	r4
     a02:	3f 90       	pop	r3
     a04:	2f 90       	pop	r2
     a06:	08 95       	ret

00000a08 <loadcell_min_max_tran>:

uint8_t loadcell_min_max_tran(uint16_t current_value, uint16_t *data_array) {
     a08:	fb 01       	movw	r30, r22
	
	//find tran
	signed int tran = 0; //could go positive and negative, and could store a 15 bits number, hence enough for our 12 bits results.
	uint16_t tran_abs = 0;
	
	tran = current_value - *(data_array + POSITION_PREV); //tran = current - previous
     a0a:	22 81       	ldd	r18, Z+2	; 0x02
     a0c:	33 81       	ldd	r19, Z+3	; 0x03
     a0e:	ac 01       	movw	r20, r24
     a10:	42 1b       	sub	r20, r18
     a12:	53 0b       	sbc	r21, r19
     a14:	9a 01       	movw	r18, r20
	if ((abs(tran) > abs(*(data_array+POSITION_TRAN_MAX))) & (*(data_array+POSITION_ACCU_CNT) > 0)) //first step is not valid due to only one value.
     a16:	22 f4       	brpl	.+8      	; 0xa20 <loadcell_min_max_tran+0x18>
     a18:	44 27       	eor	r20, r20
     a1a:	55 27       	eor	r21, r21
     a1c:	42 1b       	sub	r20, r18
     a1e:	53 0b       	sbc	r21, r19
     a20:	62 85       	ldd	r22, Z+10	; 0x0a
     a22:	73 85       	ldd	r23, Z+11	; 0x0b
     a24:	77 23       	and	r23, r23
     a26:	1c f4       	brge	.+6      	; 0xa2e <loadcell_min_max_tran+0x26>
     a28:	71 95       	neg	r23
     a2a:	61 95       	neg	r22
     a2c:	71 09       	sbc	r23, r1
     a2e:	a1 e0       	ldi	r26, 0x01	; 1
     a30:	64 17       	cp	r22, r20
     a32:	75 07       	cpc	r23, r21
     a34:	0c f0       	brlt	.+2      	; 0xa38 <loadcell_min_max_tran+0x30>
     a36:	a0 e0       	ldi	r26, 0x00	; 0
     a38:	aa 23       	and	r26, r26
     a3a:	a1 f0       	breq	.+40     	; 0xa64 <loadcell_min_max_tran+0x5c>
     a3c:	61 e0       	ldi	r22, 0x01	; 1
     a3e:	a2 89       	ldd	r26, Z+18	; 0x12
     a40:	b3 89       	ldd	r27, Z+19	; 0x13
     a42:	ab 2b       	or	r26, r27
     a44:	09 f4       	brne	.+2      	; 0xa48 <loadcell_min_max_tran+0x40>
     a46:	60 e0       	ldi	r22, 0x00	; 0
     a48:	66 23       	and	r22, r22
     a4a:	61 f0       	breq	.+24     	; 0xa64 <loadcell_min_max_tran+0x5c>
	{
		if (tran < 0)
     a4c:	33 23       	and	r19, r19
     a4e:	44 f4       	brge	.+16     	; 0xa60 <loadcell_min_max_tran+0x58>
		{
			tran_abs = abs(tran); //check if >2047, if yes this is the max limit that could be transferred.
     a50:	9a 01       	movw	r18, r20
			if (tran_abs >= 0x7ff) //if yes the set to max value
     a52:	2f 3f       	cpi	r18, 0xFF	; 255
     a54:	57 e0       	ldi	r21, 0x07	; 7
     a56:	35 07       	cpc	r19, r21
     a58:	10 f0       	brcs	.+4      	; 0xa5e <loadcell_min_max_tran+0x56>
			{
				tran_abs = 0x7ff;
     a5a:	2f ef       	ldi	r18, 0xFF	; 255
     a5c:	37 e0       	ldi	r19, 0x07	; 7
			}
			tran_abs |= (1<<11); //flip the MSB of the 12 bits word to set the negative sign.
			tran = tran_abs;
     a5e:	38 60       	ori	r19, 0x08	; 8
		}
		
		*(data_array+POSITION_TRAN_MAX) = tran; //store new tran max.
     a60:	33 87       	std	Z+11, r19	; 0x0b
     a62:	22 87       	std	Z+10, r18	; 0x0a
	}
	
	//find min and max
	if (current_value < *(data_array+POSITION_MIN))
     a64:	26 81       	ldd	r18, Z+6	; 0x06
     a66:	37 81       	ldd	r19, Z+7	; 0x07
     a68:	82 17       	cp	r24, r18
     a6a:	93 07       	cpc	r25, r19
     a6c:	10 f4       	brcc	.+4      	; 0xa72 <loadcell_min_max_tran+0x6a>
	{
		*(data_array+POSITION_MIN) = current_value; //store new min value.
     a6e:	97 83       	std	Z+7, r25	; 0x07
     a70:	86 83       	std	Z+6, r24	; 0x06
	}
	if (current_value > *(data_array+POSITION_MAX))
     a72:	20 85       	ldd	r18, Z+8	; 0x08
     a74:	31 85       	ldd	r19, Z+9	; 0x09
     a76:	28 17       	cp	r18, r24
     a78:	39 07       	cpc	r19, r25
     a7a:	10 f4       	brcc	.+4      	; 0xa80 <loadcell_min_max_tran+0x78>
	{
		*(data_array+POSITION_MAX) = current_value; //Store new max.
     a7c:	91 87       	std	Z+9, r25	; 0x09
     a7e:	80 87       	std	Z+8, r24	; 0x08
	}
}
     a80:	08 95       	ret

00000a82 <__vector_6>:


ISR(WDT_vect)
{
     a82:	1f 92       	push	r1
     a84:	0f 92       	push	r0
     a86:	0f b6       	in	r0, 0x3f	; 63
     a88:	0f 92       	push	r0
     a8a:	11 24       	eor	r1, r1
     a8c:	3f 92       	push	r3
     a8e:	4f 92       	push	r4
     a90:	5f 92       	push	r5
     a92:	6f 92       	push	r6
     a94:	7f 92       	push	r7
     a96:	8f 92       	push	r8
     a98:	9f 92       	push	r9
     a9a:	af 92       	push	r10
     a9c:	bf 92       	push	r11
     a9e:	cf 92       	push	r12
     aa0:	df 92       	push	r13
     aa2:	ef 92       	push	r14
     aa4:	ff 92       	push	r15
     aa6:	0f 93       	push	r16
     aa8:	1f 93       	push	r17
     aaa:	2f 93       	push	r18
     aac:	3f 93       	push	r19
     aae:	4f 93       	push	r20
     ab0:	5f 93       	push	r21
     ab2:	6f 93       	push	r22
     ab4:	7f 93       	push	r23
     ab6:	8f 93       	push	r24
     ab8:	9f 93       	push	r25
     aba:	af 93       	push	r26
     abc:	bf 93       	push	r27
     abe:	ef 93       	push	r30
     ac0:	ff 93       	push	r31
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	cd b7       	in	r28, 0x3d	; 61
     ac8:	de b7       	in	r29, 0x3e	; 62
     aca:	2a 97       	sbiw	r28, 0x0a	; 10
     acc:	de bf       	out	0x3e, r29	; 62
     ace:	cd bf       	out	0x3d, r28	; 61
	
	cli();
     ad0:	f8 94       	cli
	#ifdef DEBUG
		led_blink(50); //DEBUG
     ad2:	82 e3       	ldi	r24, 0x32	; 50
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	0e dc       	rcall	.-2020   	; 0x2f4 <led_blink>
	#endif // DEBUG
	
	//MEGA SPECIFIC LONG TIME RTC FUNCTION
	wdt_counter++; //increment counter 
     ad8:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <wdt_counter>
     adc:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <wdt_counter+0x1>
     ae0:	01 96       	adiw	r24, 0x01	; 1
     ae2:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <wdt_counter+0x1>
     ae6:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <wdt_counter>
	if (wdt_counter < SAMPLING_TIME)
     aea:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <wdt_counter>
     aee:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <wdt_counter+0x1>
     af2:	89 2b       	or	r24, r25
     af4:	09 f4       	brne	.+2      	; 0xaf8 <__vector_6+0x76>
     af6:	74 c1       	rjmp	.+744    	; 0xde0 <__vector_6+0x35e>
	{
		goto END; //BREAK ISR IF TRANSMIT 
	} else {wdt_counter = 0;}
     af8:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <wdt_counter+0x1>
     afc:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <wdt_counter>
	//////////////////////////////////////////////////////////////////////////
	
	RTC_ISR_ACTIVE = 1;
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <RTC_ISR_ACTIVE>
	while (RTC_ISR_ACTIVE == 1)
     b06:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <RTC_ISR_ACTIVE>
     b0a:	81 30       	cpi	r24, 0x01	; 1
     b0c:	09 f0       	breq	.+2      	; 0xb10 <__vector_6+0x8e>
     b0e:	68 c1       	rjmp	.+720    	; 0xde0 <__vector_6+0x35e>
				controller_next_state = RF_POWER_OFF;
				break;
			
			case RF_POWER_OFF:
				radio_power_down(); //radio power down
				controller_next_state = RESET_REGISTERS;
     b10:	0f 2e       	mov	r0, r31
     b12:	fb e0       	ldi	r31, 0x0B	; 11
     b14:	6f 2e       	mov	r6, r31
     b16:	f0 2d       	mov	r31, r0
				controller_next_state = RF_DISCONNECT;
				break;
			
			case RF_DISCONNECT:
				at_rf_disconnect(); //Disconnect
				controller_next_state = RF_POWER_OFF;
     b18:	0f 2e       	mov	r0, r31
     b1a:	fa e0       	ldi	r31, 0x0A	; 10
     b1c:	df 2e       	mov	r13, r31
     b1e:	f0 2d       	mov	r31, r0
				tx(&tx_data_package, transfer_data_length_package); //transmit package. GENERATE STATUS FROM THIS.
				controller_next_state = RX_DATA;
				break;
			
			case RX_DATA:
				controller_next_state = RF_DISCONNECT;
     b20:	0f 2e       	mov	r0, r31
     b22:	f9 e0       	ldi	r31, 0x09	; 9
     b24:	ff 2e       	mov	r15, r31
     b26:	f0 2d       	mov	r31, r0
				controller_next_state = TX_DATA;
				break;
			
			case TX_DATA:
				tx(&tx_data_package, transfer_data_length_package); //transmit package. GENERATE STATUS FROM THIS.
				controller_next_state = RX_DATA;
     b28:	68 94       	set
     b2a:	77 24       	eor	r7, r7
     b2c:	73 f8       	bld	r7, 3
			
			case GENERATE_PACKAGE:
				data_to_char(&tx_data, TX_DATA_SIZE, &tx_data_bytes, TRANSFER_DATA_BASE);
				transfer_data_length_package = mqtt_packet(&tx_data_bytes, &tx_data_package, TRANSFER_DATA_SIZE_PACKAGE); //convert ascii data to MQTT package.
				#ifdef DEBUG //output package size
				char package_lenght[5] = "";
     b2e:	0f 2e       	mov	r0, r31
     b30:	f3 e0       	ldi	r31, 0x03	; 3
     b32:	ef 2e       	mov	r14, r31
     b34:	f0 2d       	mov	r31, r0
     b36:	4e 01       	movw	r8, r28
     b38:	28 e0       	ldi	r18, 0x08	; 8
     b3a:	82 0e       	add	r8, r18
     b3c:	91 1c       	adc	r9, r1
				char mystring[5] = "";
     b3e:	5e 01       	movw	r10, r28
     b40:	83 e0       	ldi	r24, 0x03	; 3
     b42:	a8 0e       	add	r10, r24
     b44:	b1 1c       	adc	r11, r1
				itoa(transfer_data_length_package, package_lenght, 10);
				strcpy(mystring, package_lenght);
				usart_tx_at(USART_SERIAL_EXAMPLE, mystring);
				#endif // DEBUG
				controller_next_state = TX_DATA;
     b46:	0f 2e       	mov	r0, r31
     b48:	f7 e0       	ldi	r31, 0x07	; 7
     b4a:	4f 2e       	mov	r4, r31
     b4c:	f0 2d       	mov	r31, r0
				{
					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_CONNECT); //set failure status
					controller_next_state = RF_DISCONNECT; //if failure go to disconnect
					break;
				}
				controller_next_state = GENERATE_PACKAGE;
     b4e:	0f 2e       	mov	r0, r31
     b50:	f6 e0       	ldi	r31, 0x06	; 6
     b52:	3f 2e       	mov	r3, r31
     b54:	f0 2d       	mov	r31, r0
					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_POWER_ON); //set failure status
					controller_next_state = RF_POWER_OFF; //if failure go to power off
					break;
				}
				
				controller_next_state = RF_CONNECT;
     b56:	0f 2e       	mov	r0, r31
     b58:	f5 e0       	ldi	r31, 0x05	; 5
     b5a:	5f 2e       	mov	r5, r31
     b5c:	f0 2d       	mov	r31, r0
				controller_next_state = STORE_EXT_MEM;
				break;
			
			case STORE_EXT_MEM:
				tx_data[POSITION_TIME] = 0; //reset accumulation counter if something???????????????
				controller_next_state = RF_POWER_ON;
     b5e:	68 94       	set
     b60:	cc 24       	eor	r12, r12
     b62:	c2 f8       	bld	r12, 2
	
	RTC_ISR_ACTIVE = 1;
	while (RTC_ISR_ACTIVE == 1)
	{
		
		switch(controller_state) {
     b64:	e0 91 62 04 	lds	r30, 0x0462	; 0x800462 <controller_state>
     b68:	8e 2f       	mov	r24, r30
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	8c 30       	cpi	r24, 0x0C	; 12
     b6e:	91 05       	cpc	r25, r1
     b70:	08 f0       	brcs	.+2      	; 0xb74 <__vector_6+0xf2>
     b72:	2b c1       	rjmp	.+598    	; 0xdca <__vector_6+0x348>
     b74:	fc 01       	movw	r30, r24
     b76:	ec 5c       	subi	r30, 0xCC	; 204
     b78:	ff 4f       	sbci	r31, 0xFF	; 255
     b7a:	0c 94 91 0f 	jmp	0x1f22	; 0x1f22 <__tablejump2__>
			
			case READ_EXT_DATA:
				reset_char_array(&response, RESPONSE_SIZE); //reset response buffer
     b7e:	64 e6       	ldi	r22, 0x64	; 100
     b80:	83 e6       	ldi	r24, 0x63	; 99
     b82:	94 e0       	ldi	r25, 0x04	; 4
     b84:	92 db       	rcall	.-2268   	; 0x2aa <reset_char_array>
				REQUEST_DATA_PORT |= (1<<REQUEST_DATA_PIN); //set signal high
     b86:	5f 9a       	sbi	0x0b, 7	; 11
				at_response(USART_EXT_DATA, RESPONSE_TIME_300M, &response); //read the response from the radio
     b88:	43 e6       	ldi	r20, 0x63	; 99
     b8a:	54 e0       	ldi	r21, 0x04	; 4
     b8c:	6c e2       	ldi	r22, 0x2C	; 44
     b8e:	71 e0       	ldi	r23, 0x01	; 1
     b90:	80 ec       	ldi	r24, 0xC0	; 192
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	29 db       	rcall	.-2478   	; 0x1e8 <at_response>
				REQUEST_DATA_PORT &= ~(1<<REQUEST_DATA_PIN); //set signal low
     b96:	5f 98       	cbi	0x0b, 7	; 11
				#ifdef DEBUG
				usart_tx_at(USART_SERIAL_EXAMPLE, response);
     b98:	63 e6       	ldi	r22, 0x63	; 99
     b9a:	74 e0       	ldi	r23, 0x04	; 4
     b9c:	80 ec       	ldi	r24, 0xC0	; 192
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	d8 da       	rcall	.-2640   	; 0x152 <usart_tx_at>
				#endif // _DEBUG
				uint16_t ext_data = (response[0] << 8) | response[1]; //convert response to bytes and store in data registers
     ba2:	e3 e6       	ldi	r30, 0x63	; 99
     ba4:	f4 e0       	ldi	r31, 0x04	; 4
     ba6:	20 81       	ld	r18, Z
     ba8:	81 81       	ldd	r24, Z+1	; 0x01
     baa:	02 2e       	mov	r0, r18
     bac:	00 0c       	add	r0, r0
     bae:	33 0b       	sbc	r19, r19
     bb0:	32 2f       	mov	r19, r18
     bb2:	22 27       	eor	r18, r18
     bb4:	08 2e       	mov	r0, r24
     bb6:	00 0c       	add	r0, r0
     bb8:	99 0b       	sbc	r25, r25
     bba:	82 2b       	or	r24, r18
     bbc:	93 2b       	or	r25, r19
				//This position needs to be specified for each use case dependent on available registers.
				tx_data[POSITION_DIO] = ext_data;
     bbe:	90 93 d8 04 	sts	0x04D8, r25	; 0x8004d8 <tx_data+0x11>
     bc2:	80 93 d7 04 	sts	0x04D7, r24	; 0x8004d7 <tx_data+0x10>
				//////////////////////////////////////////////////////////////////////////
				
				controller_next_state = MEASURE;
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <controller_next_state>
				//controller_next_state = RESET_REGISTERS; //DEBUG
				break;
			
			case MEASURE:
				//GENERAL MEASUREMENTS
				tx_data[POSITION_ANA0] = adc_result_average(ADC_MUX_ADC0, ADC_NUM_AVG); //NEED TO FIX ADC CONVERSINS!!!!!!!!
     bcc:	00 c1       	rjmp	.+512    	; 0xdce <__vector_6+0x34c>
     bce:	6f 2d       	mov	r22, r15
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	ef db       	rcall	.-2082   	; 0x3b2 <adc_result_average>
     bd4:	07 ec       	ldi	r16, 0xC7	; 199
     bd6:	14 e0       	ldi	r17, 0x04	; 4
     bd8:	f8 01       	movw	r30, r16
     bda:	91 83       	std	Z+1, r25	; 0x01
				tx_data[POSITION_ANA1] = adc_result_average(ADC_MUX_ADC1, ADC_NUM_AVG); //
     bdc:	80 83       	st	Z, r24
     bde:	6f 2d       	mov	r22, r15
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	e7 db       	rcall	.-2098   	; 0x3b2 <adc_result_average>
     be4:	f8 01       	movw	r30, r16
     be6:	93 83       	std	Z+3, r25	; 0x03
				tx_data[POSITION_ANA2] = adc_result_average(ADC_MUX_ADC2, ADC_NUM_AVG); //
     be8:	82 83       	std	Z+2, r24	; 0x02
     bea:	6f 2d       	mov	r22, r15
     bec:	82 e0       	ldi	r24, 0x02	; 2
     bee:	e1 db       	rcall	.-2110   	; 0x3b2 <adc_result_average>
     bf0:	f8 01       	movw	r30, r16
     bf2:	95 83       	std	Z+5, r25	; 0x05
				tx_data[POSITION_ANA3] = adc_result_average(ADC_MUX_ADC3, ADC_NUM_AVG); //
     bf4:	84 83       	std	Z+4, r24	; 0x04
     bf6:	6f 2d       	mov	r22, r15
     bf8:	8e 2d       	mov	r24, r14
     bfa:	db db       	rcall	.-2122   	; 0x3b2 <adc_result_average>
     bfc:	f8 01       	movw	r30, r16
				tx_data[POSITION_ANA4] = adc_result_average(ADC_MUX_ADC4, ADC_NUM_AVG); //
     bfe:	97 83       	std	Z+7, r25	; 0x07
     c00:	86 83       	std	Z+6, r24	; 0x06
     c02:	6f 2d       	mov	r22, r15
     c04:	8c 2d       	mov	r24, r12
     c06:	d5 db       	rcall	.-2134   	; 0x3b2 <adc_result_average>
				tx_data[POSITION_ANA5] = adc_result_average(ADC_MUX_ADC5, ADC_NUM_AVG); //
     c08:	f8 01       	movw	r30, r16
     c0a:	91 87       	std	Z+9, r25	; 0x09
     c0c:	80 87       	std	Z+8, r24	; 0x08
     c0e:	6f 2d       	mov	r22, r15
     c10:	85 2d       	mov	r24, r5
     c12:	cf db       	rcall	.-2146   	; 0x3b2 <adc_result_average>
				tx_data[POSITION_TEMP] = adc_result_average(ADC_MUX_TEMPSENSE, 1); //PIN CHANGE HAVE NO EFFECT ON ADCB
     c14:	f8 01       	movw	r30, r16
     c16:	93 87       	std	Z+11, r25	; 0x0b
     c18:	82 87       	std	Z+10, r24	; 0x0a
     c1a:	61 e0       	ldi	r22, 0x01	; 1
     c1c:	87 2d       	mov	r24, r7
     c1e:	c9 db       	rcall	.-2158   	; 0x3b2 <adc_result_average>
     c20:	f8 01       	movw	r30, r16
				tx_data[POSITION_VDD] = adc_result_average(ADC_MUX_1V1, 1); //PIN CHANGE HAVE NO EFFECT ON ADCB
     c22:	95 87       	std	Z+13, r25	; 0x0d
     c24:	84 87       	std	Z+12, r24	; 0x0c
     c26:	61 e0       	ldi	r22, 0x01	; 1
     c28:	8e e0       	ldi	r24, 0x0E	; 14
     c2a:	c3 db       	rcall	.-2170   	; 0x3b2 <adc_result_average>
     c2c:	f8 01       	movw	r30, r16
     c2e:	97 87       	std	Z+15, r25	; 0x0f
			
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				accu_data += tx_data[POSITION_CURRENT]; //controller_measure(9, &tx_data); //measure with averaging, and accumulate.
     c30:	86 87       	std	Z+14, r24	; 0x0e
     c32:	20 81       	ld	r18, Z
     c34:	31 81       	ldd	r19, Z+1	; 0x01
     c36:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <accu_data>
     c3a:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <accu_data+0x1>
     c3e:	a0 91 5f 04 	lds	r26, 0x045F	; 0x80045f <accu_data+0x2>
     c42:	b0 91 60 04 	lds	r27, 0x0460	; 0x800460 <accu_data+0x3>
     c46:	82 0f       	add	r24, r18
     c48:	93 1f       	adc	r25, r19
     c4a:	a1 1d       	adc	r26, r1
     c4c:	b1 1d       	adc	r27, r1
     c4e:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <accu_data>
     c52:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <accu_data+0x1>
     c56:	a0 93 5f 04 	sts	0x045F, r26	; 0x80045f <accu_data+0x2>
				loadcell_min_max_tran(tx_data[POSITION_CURRENT], &tx_data); //check if new value should be stored in min, max and tran.
     c5a:	b0 93 60 04 	sts	0x0460, r27	; 0x800460 <accu_data+0x3>
     c5e:	80 81       	ld	r24, Z
     c60:	91 81       	ldd	r25, Z+1	; 0x01
     c62:	b8 01       	movw	r22, r16
 				tx_data[POSITION_PREV] = tx_data[POSITION_CURRENT]; //store adc value for next measurement.
     c64:	d1 de       	rcall	.-606    	; 0xa08 <loadcell_min_max_tran>
     c66:	f8 01       	movw	r30, r16
     c68:	80 81       	ld	r24, Z
     c6a:	91 81       	ldd	r25, Z+1	; 0x01
     c6c:	93 83       	std	Z+3, r25	; 0x03
				///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
								
				tx_data[POSITION_TIME]++; //increase timestamp counter.
     c6e:	82 83       	std	Z+2, r24	; 0x02
     c70:	82 89       	ldd	r24, Z+18	; 0x12
     c72:	93 89       	ldd	r25, Z+19	; 0x13
     c74:	01 96       	adiw	r24, 0x01	; 1
     c76:	93 8b       	std	Z+19, r25	; 0x13
			
				if (tx_data[POSITION_TIME] >= (TRANSMIT_RATE/WAKEUP_RATE)) //if accumulation limit is reached.
     c78:	82 8b       	std	Z+18, r24	; 0x12
     c7a:	82 89       	ldd	r24, Z+18	; 0x12
     c7c:	93 89       	ldd	r25, Z+19	; 0x13
				{
					controller_next_state = CALC; //limit reached, go to next
     c7e:	0a 97       	sbiw	r24, 0x0a	; 10
     c80:	20 f0       	brcs	.+8      	; 0xc8a <__vector_6+0x208>
     c82:	82 e0       	ldi	r24, 0x02	; 2
     c84:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <controller_next_state>
					} else {
					controller_next_state = READ_EXT_DATA; //Start from top again
     c88:	a2 c0       	rjmp	.+324    	; 0xdce <__vector_6+0x34c>
					RTC_ISR_ACTIVE = 0; //Break loop and go to sleep again
     c8a:	10 92 61 04 	sts	0x0461, r1	; 0x800461 <controller_next_state>
     c8e:	10 92 5c 04 	sts	0x045C, r1	; 0x80045c <RTC_ISR_ACTIVE>
				}
				break;
			
			case CALC:
				led_blink(3000); //DEBUG
     c92:	9d c0       	rjmp	.+314    	; 0xdce <__vector_6+0x34c>
     c94:	88 eb       	ldi	r24, 0xB8	; 184
     c96:	9b e0       	ldi	r25, 0x0B	; 11
				
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				tx_data[POSITION_AVG] = controller_calc_avg(accu_data, tx_data[POSITION_TIME]); //calc and store average.
     c98:	2d db       	rcall	.-2470   	; 0x2f4 <led_blink>
     c9a:	07 ec       	ldi	r16, 0xC7	; 199
     c9c:	14 e0       	ldi	r17, 0x04	; 4
     c9e:	f8 01       	movw	r30, r16
     ca0:	22 89       	ldd	r18, Z+18	; 0x12


uint16_t controller_calc_avg(uint32_t data, uint16_t cnt) {
	uint16_t avg = 0;
	
	avg = data/cnt;
     ca2:	33 89       	ldd	r19, Z+19	; 0x13
     ca4:	40 e0       	ldi	r20, 0x00	; 0
     ca6:	50 e0       	ldi	r21, 0x00	; 0
     ca8:	60 91 5d 04 	lds	r22, 0x045D	; 0x80045d <accu_data>
     cac:	70 91 5e 04 	lds	r23, 0x045E	; 0x80045e <accu_data+0x1>
     cb0:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <accu_data+0x2>
     cb4:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <accu_data+0x3>
     cb8:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__udivmodsi4>
			
			case CALC:
				led_blink(3000); //DEBUG
				
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				tx_data[POSITION_AVG] = controller_calc_avg(accu_data, tx_data[POSITION_TIME]); //calc and store average.
     cbc:	f8 01       	movw	r30, r16
     cbe:	35 83       	std	Z+5, r19	; 0x05
				accu_data = 0; //reset parameters
     cc0:	24 83       	std	Z+4, r18	; 0x04
     cc2:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <accu_data>
     cc6:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <accu_data+0x1>
     cca:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <accu_data+0x2>
				///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				controller_next_state = STORE_EXT_MEM;
     cce:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <accu_data+0x3>
				break;
     cd2:	e0 92 61 04 	sts	0x0461, r14	; 0x800461 <controller_next_state>
			
			case STORE_EXT_MEM:
				tx_data[POSITION_TIME] = 0; //reset accumulation counter if something???????????????
     cd6:	7b c0       	rjmp	.+246    	; 0xdce <__vector_6+0x34c>
     cd8:	10 92 da 04 	sts	0x04DA, r1	; 0x8004da <tx_data+0x13>
				controller_next_state = RF_POWER_ON;
     cdc:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <tx_data+0x12>
				break;
     ce0:	c0 92 61 04 	sts	0x0461, r12	; 0x800461 <controller_next_state>
			
			case RF_POWER_ON:
				
				if (radio_power_on() == 1) //power on and check if it fails
     ce4:	74 c0       	rjmp	.+232    	; 0xdce <__vector_6+0x34c>
     ce6:	f2 db       	rcall	.-2076   	; 0x4cc <radio_power_on>
				{
					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_POWER_ON); //set failure status
     ce8:	81 30       	cpi	r24, 0x01	; 1
     cea:	51 f4       	brne	.+20     	; 0xd00 <__vector_6+0x27e>
     cec:	e7 ec       	ldi	r30, 0xC7	; 199
     cee:	f4 e0       	ldi	r31, 0x04	; 4
     cf0:	80 a1       	ldd	r24, Z+32	; 0x20
     cf2:	91 a1       	ldd	r25, Z+33	; 0x21
     cf4:	81 60       	ori	r24, 0x01	; 1
					controller_next_state = RF_POWER_OFF; //if failure go to power off
     cf6:	91 a3       	std	Z+33, r25	; 0x21
     cf8:	80 a3       	std	Z+32, r24	; 0x20
					break;
     cfa:	d0 92 61 04 	sts	0x0461, r13	; 0x800461 <controller_next_state>
				}
				
				controller_next_state = RF_CONNECT;
     cfe:	67 c0       	rjmp	.+206    	; 0xdce <__vector_6+0x34c>
				break;
     d00:	50 92 61 04 	sts	0x0461, r5	; 0x800461 <controller_next_state>
			
			case RF_CONNECT:
				if (at_rf_connect() != 0) //Connect to network. MAKE STATUS REPORT FROM THIS!!!!!!!
     d04:	64 c0       	rjmp	.+200    	; 0xdce <__vector_6+0x34c>
     d06:	97 dc       	rcall	.-1746   	; 0x636 <at_rf_connect>
     d08:	88 23       	and	r24, r24
				{
					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_CONNECT); //set failure status
     d0a:	51 f0       	breq	.+20     	; 0xd20 <__vector_6+0x29e>
     d0c:	e7 ec       	ldi	r30, 0xC7	; 199
     d0e:	f4 e0       	ldi	r31, 0x04	; 4
     d10:	80 a1       	ldd	r24, Z+32	; 0x20
     d12:	91 a1       	ldd	r25, Z+33	; 0x21
     d14:	82 60       	ori	r24, 0x02	; 2
					controller_next_state = RF_DISCONNECT; //if failure go to disconnect
     d16:	91 a3       	std	Z+33, r25	; 0x21
     d18:	80 a3       	std	Z+32, r24	; 0x20
					break;
     d1a:	f0 92 61 04 	sts	0x0461, r15	; 0x800461 <controller_next_state>
				}
				controller_next_state = GENERATE_PACKAGE;
				break;
     d1e:	57 c0       	rjmp	.+174    	; 0xdce <__vector_6+0x34c>
			
			case GENERATE_PACKAGE:
				data_to_char(&tx_data, TX_DATA_SIZE, &tx_data_bytes, TRANSFER_DATA_BASE);
     d20:	30 92 61 04 	sts	0x0461, r3	; 0x800461 <controller_next_state>
     d24:	54 c0       	rjmp	.+168    	; 0xdce <__vector_6+0x34c>
     d26:	2a e0       	ldi	r18, 0x0A	; 10
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	4c ed       	ldi	r20, 0xDC	; 220
     d2c:	53 e0       	ldi	r21, 0x03	; 3
     d2e:	61 e1       	ldi	r22, 0x11	; 17
     d30:	87 ec       	ldi	r24, 0xC7	; 199
				transfer_data_length_package = mqtt_packet(&tx_data_bytes, &tx_data_package, TRANSFER_DATA_SIZE_PACKAGE); //convert ascii data to MQTT package.
     d32:	94 e0       	ldi	r25, 0x04	; 4
     d34:	6d dd       	rcall	.-1318   	; 0x810 <data_to_char>
     d36:	40 e0       	ldi	r20, 0x00	; 0
     d38:	51 e0       	ldi	r21, 0x01	; 1
     d3a:	6c ed       	ldi	r22, 0xDC	; 220
     d3c:	72 e0       	ldi	r23, 0x02	; 2
     d3e:	8c ed       	ldi	r24, 0xDC	; 220
     d40:	93 e0       	ldi	r25, 0x03	; 3
     d42:	82 d4       	rcall	.+2308   	; 0x1648 <mqtt_packet>
     d44:	90 93 db 02 	sts	0x02DB, r25	; 0x8002db <__data_end+0x1>
     d48:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <__data_end>
				#ifdef DEBUG //output package size
				char package_lenght[5] = "";
     d4c:	1f 82       	std	Y+7, r1	; 0x07
     d4e:	1e 82       	std	Y+6, r1	; 0x06
     d50:	f4 01       	movw	r30, r8
     d52:	2e 2d       	mov	r18, r14
     d54:	11 92       	st	Z+, r1
     d56:	2a 95       	dec	r18
				char mystring[5] = "";
     d58:	e9 f7       	brne	.-6      	; 0xd54 <__vector_6+0x2d2>
     d5a:	1a 82       	std	Y+2, r1	; 0x02
     d5c:	19 82       	std	Y+1, r1	; 0x01
     d5e:	f5 01       	movw	r30, r10
     d60:	2e 2d       	mov	r18, r14
     d62:	11 92       	st	Z+, r1
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     d64:	2a 95       	dec	r18
     d66:	e9 f7       	brne	.-6      	; 0xd62 <__vector_6+0x2e0>
     d68:	4d 2d       	mov	r20, r13
     d6a:	be 01       	movw	r22, r28
     d6c:	6a 5f       	subi	r22, 0xFA	; 250
				itoa(transfer_data_length_package, package_lenght, 10);
				strcpy(mystring, package_lenght);
     d6e:	7f 4f       	sbci	r23, 0xFF	; 255
     d70:	0e 94 b1 10 	call	0x2162	; 0x2162 <__itoa_ncheck>
     d74:	be 01       	movw	r22, r28
     d76:	6a 5f       	subi	r22, 0xFA	; 250
     d78:	7f 4f       	sbci	r23, 0xFF	; 255
				usart_tx_at(USART_SERIAL_EXAMPLE, mystring);
     d7a:	ce 01       	movw	r24, r28
     d7c:	01 96       	adiw	r24, 0x01	; 1
     d7e:	0e 94 86 10 	call	0x210c	; 0x210c <strcpy>
     d82:	be 01       	movw	r22, r28
     d84:	6f 5f       	subi	r22, 0xFF	; 255
				#endif // DEBUG
				controller_next_state = TX_DATA;
     d86:	7f 4f       	sbci	r23, 0xFF	; 255
				break;
     d88:	80 ec       	ldi	r24, 0xC0	; 192
			
			case TX_DATA:
				tx(&tx_data_package, transfer_data_length_package); //transmit package. GENERATE STATUS FROM THIS.
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	e2 d9       	rcall	.-3132   	; 0x152 <usart_tx_at>
     d8e:	40 92 61 04 	sts	0x0461, r4	; 0x800461 <controller_next_state>
     d92:	1d c0       	rjmp	.+58     	; 0xdce <__vector_6+0x34c>
     d94:	60 91 da 02 	lds	r22, 0x02DA	; 0x8002da <__data_end>
				controller_next_state = RX_DATA;
     d98:	70 91 db 02 	lds	r23, 0x02DB	; 0x8002db <__data_end+0x1>
				break;
     d9c:	8c ed       	ldi	r24, 0xDC	; 220
			
			case RX_DATA:
				controller_next_state = RF_DISCONNECT;
     d9e:	92 e0       	ldi	r25, 0x02	; 2
     da0:	04 dd       	rcall	.-1528   	; 0x7aa <tx>
				break;
     da2:	70 92 61 04 	sts	0x0461, r7	; 0x800461 <controller_next_state>
			
			case RF_DISCONNECT:
				at_rf_disconnect(); //Disconnect
     da6:	13 c0       	rjmp	.+38     	; 0xdce <__vector_6+0x34c>
				controller_next_state = RF_POWER_OFF;
     da8:	f0 92 61 04 	sts	0x0461, r15	; 0x800461 <controller_next_state>
				break;
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__vector_6+0x34c>
			
			case RF_POWER_OFF:
				radio_power_down(); //radio power down
     dae:	eb dc       	rcall	.-1578   	; 0x786 <at_rf_disconnect>
     db0:	d0 92 61 04 	sts	0x0461, r13	; 0x800461 <controller_next_state>
				controller_next_state = RESET_REGISTERS;
     db4:	0c c0       	rjmp	.+24     	; 0xdce <__vector_6+0x34c>
				break;
     db6:	59 da       	rcall	.-2894   	; 0x26a <radio_power_down>
			
			case RESET_REGISTERS:
				reset_all_data(); //reset all arrays
     db8:	60 92 61 04 	sts	0x0461, r6	; 0x800461 <controller_next_state>
				controller_next_state = READ_EXT_DATA;
     dbc:	08 c0       	rjmp	.+16     	; 0xdce <__vector_6+0x34c>
     dbe:	83 da       	rcall	.-2810   	; 0x2c6 <reset_all_data>
				RTC_ISR_ACTIVE = 0; //FINISHED, break LOOP!
     dc0:	10 92 61 04 	sts	0x0461, r1	; 0x800461 <controller_next_state>
				break;
     dc4:	10 92 5c 04 	sts	0x045C, r1	; 0x80045c <RTC_ISR_ACTIVE>
			
			default:
				controller_next_state = RESET_REGISTERS; //TRY RESET.
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <__vector_6+0x34c>
				break;
			
		}
		
		controller_state = controller_next_state; //NEXT STATE => STATE
     dca:	60 92 61 04 	sts	0x0461, r6	; 0x800461 <controller_next_state>
     dce:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <controller_next_state>
		goto END; //BREAK ISR IF TRANSMIT 
	} else {wdt_counter = 0;}
	//////////////////////////////////////////////////////////////////////////
	
	RTC_ISR_ACTIVE = 1;
	while (RTC_ISR_ACTIVE == 1)
     dd2:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <controller_state>
     dd6:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <RTC_ISR_ACTIVE>
     dda:	81 30       	cpi	r24, 0x01	; 1

	
	//WDTCSR |= (1<<WDIE);
	
	END:
	sei();
     ddc:	09 f4       	brne	.+2      	; 0xde0 <__vector_6+0x35e>
}
     dde:	c2 ce       	rjmp	.-636    	; 0xb64 <__vector_6+0xe2>
     de0:	78 94       	sei
     de2:	2a 96       	adiw	r28, 0x0a	; 10
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	f8 94       	cli
     de8:	de bf       	out	0x3e, r29	; 62
     dea:	0f be       	out	0x3f, r0	; 63
     dec:	cd bf       	out	0x3d, r28	; 61
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	ff 91       	pop	r31
     df4:	ef 91       	pop	r30
     df6:	bf 91       	pop	r27
     df8:	af 91       	pop	r26
     dfa:	9f 91       	pop	r25
     dfc:	8f 91       	pop	r24
     dfe:	7f 91       	pop	r23
     e00:	6f 91       	pop	r22
     e02:	5f 91       	pop	r21
     e04:	4f 91       	pop	r20
     e06:	3f 91       	pop	r19
     e08:	2f 91       	pop	r18
     e0a:	1f 91       	pop	r17
     e0c:	0f 91       	pop	r16
     e0e:	ff 90       	pop	r15
     e10:	ef 90       	pop	r14
     e12:	df 90       	pop	r13
     e14:	cf 90       	pop	r12
     e16:	bf 90       	pop	r11
     e18:	af 90       	pop	r10
     e1a:	9f 90       	pop	r9
     e1c:	8f 90       	pop	r8
     e1e:	7f 90       	pop	r7
     e20:	6f 90       	pop	r6
     e22:	5f 90       	pop	r5
     e24:	4f 90       	pop	r4
     e26:	3f 90       	pop	r3
     e28:	0f 90       	pop	r0
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	0f 90       	pop	r0
     e2e:	1f 90       	pop	r1
     e30:	18 95       	reti

00000e32 <main>:
	 * The board-specific conf_board.h file contains the configuration of
	 * the board initialization.
	 */
	board_init();
	//pmic_init(); //XMEGA
	sysclk_init(); //disables all peripheral clocks
     e32:	f8 94       	cli
     e34:	9a d4       	rcall	.+2356   	; 0x176a <board_init>
		.paritytype = USART_PARITY,
		.stopbits = USART_STOP_BIT
	};
	//////////////////////////////////////////////////////////////////////////
	
	usart_init_rs232(USART_SERIAL_SIM900, &USART_OPTIONS); //Radio UART
     e36:	17 d0       	rcall	.+46     	; 0xe66 <sysclk_init>
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	71 e0       	ldi	r23, 0x01	; 1
	sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
     e3c:	80 ec       	ldi	r24, 0xC0	; 192
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	d5 d0       	rcall	.+426    	; 0xfec <usart_init_rs232>
	
	//initialize radio pins
	radio_pins_init();
     e42:	62 e0       	ldi	r22, 0x02	; 2
	delay_s(1);
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	2c d0       	rcall	.+88     	; 0xea0 <sysclk_enable_module>
     e48:	0d da       	rcall	.-3046   	; 0x264 <radio_pins_init>
	
	//Shut down radio if already awake
	//check if radio is off, and turn of if it's on
	if (STATUS_PORT & (1<<STATUS_PIN))
     e4a:	6b e0       	ldi	r22, 0x0B	; 11
	{
		radio_power_down();
     e4c:	7b e8       	ldi	r23, 0x8B	; 139
     e4e:	82 e0       	ldi	r24, 0x02	; 2
	}
	////////////////////////////////////////////////////////
	
	//reset all tx data and date
	reset_all_data();
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	74 d9       	rcall	.-3352   	; 0x13c <__portable_avr_delay_cycles>
	
	//RTC setup.
	//PR.PRGEN &= ~(1<<2); //enable the RTC clock
	//sleepmgr_init();
	//rtc_init_period(WAKEUP_RATE); //using RTC as sampler timer.
	rtc_init_period(1); //using RTC as sampler timer.
     e54:	4c 99       	sbic	0x09, 4	; 9
     e56:	09 da       	rcall	.-3054   	; 0x26a <radio_power_down>
     e58:	36 da       	rcall	.-2964   	; 0x2c6 <reset_all_data>
     e5a:	81 e0       	ldi	r24, 0x01	; 1
	
	sei(); //enable interrupts
     e5c:	90 e0       	ldi	r25, 0x00	; 0
	
	
	
	#ifdef DEBUG
		DDRB |= (1<<5);
     e5e:	42 da       	rcall	.-2940   	; 0x2e4 <rtc_init_period>
     e60:	78 94       	sei
     e62:	25 9a       	sbi	0x04, 5	; 4
     e64:	ff cf       	rjmp	.-2      	; 0xe64 <main+0x32>

00000e66 <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	1f 92       	push	r1
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
     e70:	8f ef       	ldi	r24, 0xFF	; 255
     e72:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	}
#endif
#if !MEGA_UNSPECIFIED && !MEGA_XX
	/* Set up system clock prescalers if different from defaults */
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
     e76:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
		*(reg++) = 0xFF;
	}
#endif
#if !MEGA_UNSPECIFIED && !MEGA_XX
	/* Set up system clock prescalers if different from defaults */
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
     e7a:	83 30       	cpi	r24, 0x03	; 3
     e7c:	69 f0       	breq	.+26     	; 0xe98 <sysclk_init+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e7e:	8f b7       	in	r24, 0x3f	; 63
     e80:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     e82:	f8 94       	cli
	return flags;
     e84:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
     e86:	5f 93       	push	r21
     e88:	50 e8       	ldi	r21, 0x80	; 128
     e8a:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     e8e:	53 e0       	ldi	r21, 0x03	; 3
     e90:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     e94:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e96:	8f bf       	out	0x3f, r24	; 63
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
     e98:	0f 90       	pop	r0
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	08 95       	ret

00000ea0 <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	1f 92       	push	r1
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     eaa:	9f b7       	in	r25, 0x3f	; 63
     eac:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     eae:	f8 94       	cli
	return flags;
     eb0:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
     eb2:	81 11       	cpse	r24, r1
     eb4:	06 c0       	rjmp	.+12     	; 0xec2 <sysclk_enable_module+0x22>
		*(reg + port)  &= ~id;
     eb6:	e4 e6       	ldi	r30, 0x64	; 100
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	60 95       	com	r22
     ebc:	80 81       	ld	r24, Z
     ebe:	68 23       	and	r22, r24
     ec0:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     ec2:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     ec4:	0f 90       	pop	r0
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	08 95       	ret

00000ecc <usart_putchar>:
	}

	if (baud_offset != USART_BAUD_UNDEFINED) {
		usart->UBRR = baudctrl;
	}
}
     ecc:	fc 01       	movw	r30, r24
     ece:	90 81       	ld	r25, Z
     ed0:	95 ff       	sbrs	r25, 5
     ed2:	fd cf       	rjmp	.-6      	; 0xece <usart_putchar+0x2>
     ed4:	66 83       	std	Z+6, r22	; 0x06
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	08 95       	ret

00000eda <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     eda:	4f 92       	push	r4
     edc:	5f 92       	push	r5
     ede:	6f 92       	push	r6
     ee0:	7f 92       	push	r7
     ee2:	8f 92       	push	r8
     ee4:	9f 92       	push	r9
     ee6:	af 92       	push	r10
     ee8:	bf 92       	push	r11
     eea:	cf 92       	push	r12
     eec:	df 92       	push	r13
     eee:	ef 92       	push	r14
     ef0:	ff 92       	push	r15
     ef2:	0f 93       	push	r16
     ef4:	1f 93       	push	r17
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
     efa:	ec 01       	movw	r28, r24
     efc:	6a 01       	movw	r12, r20
     efe:	7b 01       	movw	r14, r22

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
     f00:	28 01       	movw	r4, r16
     f02:	39 01       	movw	r6, r18
     f04:	68 94       	set
     f06:	12 f8       	bld	r1, 2
     f08:	76 94       	lsr	r7
     f0a:	67 94       	ror	r6
     f0c:	57 94       	ror	r5
     f0e:	47 94       	ror	r4
     f10:	16 94       	lsr	r1
     f12:	d1 f7       	brne	.-12     	; 0xf08 <usart_set_baudrate+0x2e>
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;

	if (usart->UCSRnA & USART_U2X_bm) {
     f14:	88 81       	ld	r24, Y
     f16:	81 fd       	sbrc	r24, 1
     f18:	0e c0       	rjmp	.+28     	; 0xf36 <usart_set_baudrate+0x5c>
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;
     f1a:	48 01       	movw	r8, r16
     f1c:	59 01       	movw	r10, r18
     f1e:	07 2e       	mov	r0, r23
     f20:	73 e1       	ldi	r23, 0x13	; 19
     f22:	b6 94       	lsr	r11
     f24:	a7 94       	ror	r10
     f26:	97 94       	ror	r9
     f28:	87 94       	ror	r8
     f2a:	7a 95       	dec	r23
     f2c:	d1 f7       	brne	.-12     	; 0xf22 <usart_set_baudrate+0x48>
     f2e:	70 2d       	mov	r23, r0

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
     f30:	d3 01       	movw	r26, r6
     f32:	c2 01       	movw	r24, r4
     f34:	15 c0       	rjmp	.+42     	; 0xf60 <usart_set_baudrate+0x86>
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;

	if (usart->UCSRnA & USART_U2X_bm) {
		max_rate /= 2;
     f36:	d9 01       	movw	r26, r18
     f38:	c8 01       	movw	r24, r16
     f3a:	68 94       	set
     f3c:	13 f8       	bld	r1, 3
     f3e:	b6 95       	lsr	r27
     f40:	a7 95       	ror	r26
     f42:	97 95       	ror	r25
     f44:	87 95       	ror	r24
     f46:	16 94       	lsr	r1
     f48:	d1 f7       	brne	.-12     	; 0xf3e <usart_set_baudrate+0x64>
		min_rate /= 2;
     f4a:	48 01       	movw	r8, r16
     f4c:	59 01       	movw	r10, r18
     f4e:	07 2e       	mov	r0, r23
     f50:	74 e1       	ldi	r23, 0x14	; 20
     f52:	b6 94       	lsr	r11
     f54:	a7 94       	ror	r10
     f56:	97 94       	ror	r9
     f58:	87 94       	ror	r8
     f5a:	7a 95       	dec	r23
     f5c:	d1 f7       	brne	.-12     	; 0xf52 <usart_set_baudrate+0x78>
     f5e:	70 2d       	mov	r23, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     f60:	8c 15       	cp	r24, r12
     f62:	9d 05       	cpc	r25, r13
     f64:	ae 05       	cpc	r26, r14
     f66:	bf 05       	cpc	r27, r15
     f68:	68 f1       	brcs	.+90     	; 0xfc4 <usart_set_baudrate+0xea>
     f6a:	c8 14       	cp	r12, r8
     f6c:	d9 04       	cpc	r13, r9
     f6e:	ea 04       	cpc	r14, r10
     f70:	fb 04       	cpc	r15, r11
     f72:	50 f1       	brcs	.+84     	; 0xfc8 <usart_set_baudrate+0xee>
		return false;
	}

	/* Check if double speed is enabled. */
	if (usart->UCSRnA & USART_U2X_bm) {
     f74:	88 81       	ld	r24, Y
     f76:	81 ff       	sbrs	r24, 1
     f78:	0f c0       	rjmp	.+30     	; 0xf98 <usart_set_baudrate+0xbe>
		baud *= 2;
		ubrr = (uint32_t)(cpu_hz / 8 / baud) - 1;
     f7a:	a7 01       	movw	r20, r14
     f7c:	96 01       	movw	r18, r12
     f7e:	22 0f       	add	r18, r18
     f80:	33 1f       	adc	r19, r19
     f82:	44 1f       	adc	r20, r20
     f84:	55 1f       	adc	r21, r21
     f86:	c3 01       	movw	r24, r6
     f88:	b2 01       	movw	r22, r4
     f8a:	a9 d7       	rcall	.+3922   	; 0x1ede <__udivmodsi4>
     f8c:	da 01       	movw	r26, r20
     f8e:	c9 01       	movw	r24, r18
     f90:	01 97       	sbiw	r24, 0x01	; 1
     f92:	a1 09       	sbc	r26, r1
     f94:	b1 09       	sbc	r27, r1
     f96:	12 c0       	rjmp	.+36     	; 0xfbc <usart_set_baudrate+0xe2>
	} else {
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
     f98:	c9 01       	movw	r24, r18
     f9a:	b8 01       	movw	r22, r16
     f9c:	68 94       	set
     f9e:	13 f8       	bld	r1, 3
     fa0:	96 95       	lsr	r25
     fa2:	87 95       	ror	r24
     fa4:	77 95       	ror	r23
     fa6:	67 95       	ror	r22
     fa8:	16 94       	lsr	r1
     faa:	d1 f7       	brne	.-12     	; 0xfa0 <usart_set_baudrate+0xc6>
     fac:	a7 01       	movw	r20, r14
     fae:	96 01       	movw	r18, r12
     fb0:	96 d7       	rcall	.+3884   	; 0x1ede <__udivmodsi4>
     fb2:	da 01       	movw	r26, r20
     fb4:	c9 01       	movw	r24, r18
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	a1 09       	sbc	r26, r1
     fba:	b1 09       	sbc	r27, r1
	}

	usart->UBRR = ubrr;
     fbc:	9d 83       	std	Y+5, r25	; 0x05
     fbe:	8c 83       	std	Y+4, r24	; 0x04
	return true;
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	03 c0       	rjmp	.+6      	; 0xfca <usart_set_baudrate+0xf0>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	01 c0       	rjmp	.+2      	; 0xfca <usart_set_baudrate+0xf0>
     fc8:	80 e0       	ldi	r24, 0x00	; 0
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
	}

	usart->UBRR = ubrr;
	return true;
}
     fca:	df 91       	pop	r29
     fcc:	cf 91       	pop	r28
     fce:	1f 91       	pop	r17
     fd0:	0f 91       	pop	r16
     fd2:	ff 90       	pop	r15
     fd4:	ef 90       	pop	r14
     fd6:	df 90       	pop	r13
     fd8:	cf 90       	pop	r12
     fda:	bf 90       	pop	r11
     fdc:	af 90       	pop	r10
     fde:	9f 90       	pop	r9
     fe0:	8f 90       	pop	r8
     fe2:	7f 90       	pop	r7
     fe4:	6f 90       	pop	r6
     fe6:	5f 90       	pop	r5
     fe8:	4f 90       	pop	r4
     fea:	08 95       	ret

00000fec <usart_init_rs232>:
 *
 * \retval true if the initialization was successful
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     fec:	0f 93       	push	r16
     fee:	1f 93       	push	r17
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	ec 01       	movw	r28, r24
     ff6:	8b 01       	movw	r16, r22
 * \brief usart Pointer to an USART module.
 */
static inline void usart_enable_module_clock(USART_t *usart)
{
#ifdef USART0
	if ((uintptr_t)usart == (uintptr_t)&UCSR0A) {
     ff8:	80 3c       	cpi	r24, 0xC0	; 192
     ffa:	91 05       	cpc	r25, r1
     ffc:	19 f4       	brne	.+6      	; 0x1004 <usart_init_rs232+0x18>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
     ffe:	62 e0       	ldi	r22, 0x02	; 2
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	4e df       	rcall	.-356    	; 0xea0 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_UMSEL01_gm)) | usartmode;
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	8f 73       	andi	r24, 0x3F	; 63
    1008:	8a 83       	std	Y+2, r24	; 0x02
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
	bool result;
	usart_enable_module_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
    100a:	f8 01       	movw	r30, r16
    100c:	26 81       	ldd	r18, Z+6	; 0x06
    100e:	35 81       	ldd	r19, Z+5	; 0x05
    1010:	84 81       	ldd	r24, Z+4	; 0x04
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->UCSRnC
		= ((usart)->UCSRnC &
    1012:	9a 81       	ldd	r25, Y+2	; 0x02
    1014:	48 2f       	mov	r20, r24
    1016:	43 70       	andi	r20, 0x03	; 3
    1018:	44 0f       	add	r20, r20
    101a:	99 7f       	andi	r25, 0xF9	; 249
    101c:	94 2b       	or	r25, r20
    101e:	9a 83       	std	Y+2, r25	; 0x02
			(~USART_CHSIZE01C_gm)) | ((charSize & 0x03)
			<< USART_CHSIZE01C_gp);
	(usart)->UCSRnB
		= ((usart)->UCSRnB &
    1020:	99 81       	ldd	r25, Y+1	; 0x01
    1022:	84 70       	andi	r24, 0x04	; 4
    1024:	88 0f       	add	r24, r24
    1026:	88 0f       	add	r24, r24
    1028:	9b 7f       	andi	r25, 0xFB	; 251
    102a:	89 2b       	or	r24, r25
    102c:	89 83       	std	Y+1, r24	; 0x01
			(~USART_CHSIZE2_bm)) | ((charSize & 0x04)
			<< USART_CHSIZE2_bp);

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_PMODE_gm)) | parityMode;
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	8f 7c       	andi	r24, 0xCF	; 207
    1032:	83 2b       	or	r24, r19
    1034:	8a 83       	std	Y+2, r24	; 0x02

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_STOPB_bm)) | (twoStopBits
    1036:	9a 81       	ldd	r25, Y+2	; 0x02
    1038:	97 7f       	andi	r25, 0xF7	; 247
    103a:	82 2f       	mov	r24, r18
    103c:	88 0f       	add	r24, r24
    103e:	88 0f       	add	r24, r24
    1040:	88 0f       	add	r24, r24
    1042:	89 2b       	or	r24, r25
    1044:	8a 83       	std	Y+2, r24	; 0x02
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate,
    1046:	40 81       	ld	r20, Z
    1048:	51 81       	ldd	r21, Z+1	; 0x01
    104a:	62 81       	ldd	r22, Z+2	; 0x02
    104c:	73 81       	ldd	r23, Z+3	; 0x03
    104e:	00 e4       	ldi	r16, 0x40	; 64
    1050:	12 e4       	ldi	r17, 0x42	; 66
    1052:	2f e0       	ldi	r18, 0x0F	; 15
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	ce 01       	movw	r24, r28
    1058:	40 df       	rcall	.-384    	; 0xeda <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_TXEN_bm;
    105a:	99 81       	ldd	r25, Y+1	; 0x01
    105c:	98 60       	ori	r25, 0x08	; 8
    105e:	99 83       	std	Y+1, r25	; 0x01
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_RXEN_bm;
    1060:	99 81       	ldd	r25, Y+1	; 0x01
    1062:	90 61       	ori	r25, 0x10	; 16
    1064:	99 83       	std	Y+1, r25	; 0x01
			sysclk_get_source_clock_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	return result;
}
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	08 95       	ret

00001070 <MQTTSerialize_connectLength>:

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    1070:	ef 92       	push	r14
    1072:	ff 92       	push	r15
    1074:	0f 93       	push	r16
    1076:	1f 93       	push	r17
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	ec 01       	movw	r28, r24
    107e:	8e 81       	ldd	r24, Y+6	; 0x06
    1080:	83 30       	cpi	r24, 0x03	; 3
    1082:	29 f0       	breq	.+10     	; 0x108e <MQTTSerialize_connectLength+0x1e>
    1084:	84 30       	cpi	r24, 0x04	; 4
    1086:	31 f4       	brne	.+12     	; 0x1094 <MQTTSerialize_connectLength+0x24>
    1088:	0a e0       	ldi	r16, 0x0A	; 10
    108a:	10 e0       	ldi	r17, 0x00	; 0
    108c:	05 c0       	rjmp	.+10     	; 0x1098 <MQTTSerialize_connectLength+0x28>
    108e:	0c e0       	ldi	r16, 0x0C	; 12
    1090:	10 e0       	ldi	r17, 0x00	; 0
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <MQTTSerialize_connectLength+0x28>
    1094:	00 e0       	ldi	r16, 0x00	; 0
    1096:	10 e0       	ldi	r17, 0x00	; 0
    1098:	4f 81       	ldd	r20, Y+7	; 0x07
    109a:	58 85       	ldd	r21, Y+8	; 0x08
    109c:	69 85       	ldd	r22, Y+9	; 0x09
    109e:	7a 85       	ldd	r23, Y+10	; 0x0a
    10a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    10a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    10a4:	fb d1       	rcall	.+1014   	; 0x149c <MQTTstrlen>
    10a6:	02 96       	adiw	r24, 0x02	; 2
    10a8:	08 0f       	add	r16, r24
    10aa:	19 1f       	adc	r17, r25
    10ac:	88 89       	ldd	r24, Y+16	; 0x10
    10ae:	88 23       	and	r24, r24
    10b0:	a1 f0       	breq	.+40     	; 0x10da <MQTTSerialize_connectLength+0x6a>
    10b2:	4f 89       	ldd	r20, Y+23	; 0x17
    10b4:	58 8d       	ldd	r21, Y+24	; 0x18
    10b6:	69 8d       	ldd	r22, Y+25	; 0x19
    10b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10be:	ee d1       	rcall	.+988    	; 0x149c <MQTTstrlen>
    10c0:	7c 01       	movw	r14, r24
    10c2:	4d 8d       	ldd	r20, Y+29	; 0x1d
    10c4:	5e 8d       	ldd	r21, Y+30	; 0x1e
    10c6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    10c8:	78 a1       	ldd	r23, Y+32	; 0x20
    10ca:	89 a1       	ldd	r24, Y+33	; 0x21
    10cc:	9a a1       	ldd	r25, Y+34	; 0x22
    10ce:	e6 d1       	rcall	.+972    	; 0x149c <MQTTstrlen>
    10d0:	8e 0d       	add	r24, r14
    10d2:	9f 1d       	adc	r25, r15
    10d4:	04 96       	adiw	r24, 0x04	; 4
    10d6:	08 0f       	add	r16, r24
    10d8:	19 1f       	adc	r17, r25
    10da:	8d a1       	ldd	r24, Y+37	; 0x25
    10dc:	9e a1       	ldd	r25, Y+38	; 0x26
    10de:	89 2b       	or	r24, r25
    10e0:	21 f4       	brne	.+8      	; 0x10ea <MQTTSerialize_connectLength+0x7a>
    10e2:	89 a5       	ldd	r24, Y+41	; 0x29
    10e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    10e6:	89 2b       	or	r24, r25
    10e8:	51 f0       	breq	.+20     	; 0x10fe <MQTTSerialize_connectLength+0x8e>
    10ea:	4d a1       	ldd	r20, Y+37	; 0x25
    10ec:	5e a1       	ldd	r21, Y+38	; 0x26
    10ee:	6f a1       	ldd	r22, Y+39	; 0x27
    10f0:	78 a5       	ldd	r23, Y+40	; 0x28
    10f2:	89 a5       	ldd	r24, Y+41	; 0x29
    10f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    10f6:	d2 d1       	rcall	.+932    	; 0x149c <MQTTstrlen>
    10f8:	02 96       	adiw	r24, 0x02	; 2
    10fa:	08 0f       	add	r16, r24
    10fc:	19 1f       	adc	r17, r25
    10fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    1100:	9c a5       	ldd	r25, Y+44	; 0x2c
    1102:	89 2b       	or	r24, r25
    1104:	21 f4       	brne	.+8      	; 0x110e <MQTTSerialize_connectLength+0x9e>
    1106:	8f a5       	ldd	r24, Y+47	; 0x2f
    1108:	98 a9       	ldd	r25, Y+48	; 0x30
    110a:	89 2b       	or	r24, r25
    110c:	51 f0       	breq	.+20     	; 0x1122 <MQTTSerialize_connectLength+0xb2>
    110e:	4b a5       	ldd	r20, Y+43	; 0x2b
    1110:	5c a5       	ldd	r21, Y+44	; 0x2c
    1112:	6d a5       	ldd	r22, Y+45	; 0x2d
    1114:	7e a5       	ldd	r23, Y+46	; 0x2e
    1116:	8f a5       	ldd	r24, Y+47	; 0x2f
    1118:	98 a9       	ldd	r25, Y+48	; 0x30
    111a:	c0 d1       	rcall	.+896    	; 0x149c <MQTTstrlen>
    111c:	02 96       	adiw	r24, 0x02	; 2
    111e:	08 0f       	add	r16, r24
    1120:	19 1f       	adc	r17, r25
    1122:	c8 01       	movw	r24, r16
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	1f 91       	pop	r17
    112a:	0f 91       	pop	r16
    112c:	ff 90       	pop	r15
    112e:	ef 90       	pop	r14
    1130:	08 95       	ret

00001132 <MQTTSerialize_connect>:
    1132:	af 92       	push	r10
    1134:	bf 92       	push	r11
    1136:	cf 92       	push	r12
    1138:	df 92       	push	r13
    113a:	ef 92       	push	r14
    113c:	ff 92       	push	r15
    113e:	0f 93       	push	r16
    1140:	1f 93       	push	r17
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	00 d0       	rcall	.+0      	; 0x1148 <MQTTSerialize_connect+0x16>
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
    114c:	6c 01       	movw	r12, r24
    114e:	5b 01       	movw	r10, r22
    1150:	8a 01       	movw	r16, r20
    1152:	9a 83       	std	Y+2, r25	; 0x02
    1154:	89 83       	std	Y+1, r24	; 0x01
    1156:	ca 01       	movw	r24, r20
    1158:	8b df       	rcall	.-234    	; 0x1070 <MQTTSerialize_connectLength>
    115a:	7c 01       	movw	r14, r24
    115c:	03 d1       	rcall	.+518    	; 0x1364 <MQTTPacket_len>
    115e:	a8 16       	cp	r10, r24
    1160:	b9 06       	cpc	r11, r25
    1162:	0c f4       	brge	.+2      	; 0x1166 <MQTTSerialize_connect+0x34>
    1164:	9f c0       	rjmp	.+318    	; 0x12a4 <MQTTSerialize_connect+0x172>
    1166:	60 e1       	ldi	r22, 0x10	; 16
    1168:	ce 01       	movw	r24, r28
    116a:	01 96       	adiw	r24, 0x01	; 1
    116c:	0a d1       	rcall	.+532    	; 0x1382 <writeChar>
    116e:	b7 01       	movw	r22, r14
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	9a 81       	ldd	r25, Y+2	; 0x02
    1174:	d1 d0       	rcall	.+418    	; 0x1318 <MQTTPacket_encode>
    1176:	29 81       	ldd	r18, Y+1	; 0x01
    1178:	3a 81       	ldd	r19, Y+2	; 0x02
    117a:	82 0f       	add	r24, r18
    117c:	93 1f       	adc	r25, r19
    117e:	9a 83       	std	Y+2, r25	; 0x02
    1180:	89 83       	std	Y+1, r24	; 0x01
    1182:	f8 01       	movw	r30, r16
    1184:	86 81       	ldd	r24, Z+6	; 0x06
    1186:	84 30       	cpi	r24, 0x04	; 4
    1188:	51 f4       	brne	.+20     	; 0x119e <MQTTSerialize_connect+0x6c>
    118a:	65 ec       	ldi	r22, 0xC5	; 197
    118c:	72 e0       	ldi	r23, 0x02	; 2
    118e:	ce 01       	movw	r24, r28
    1190:	01 96       	adiw	r24, 0x01	; 1
    1192:	20 d1       	rcall	.+576    	; 0x13d4 <writeCString>
    1194:	64 e0       	ldi	r22, 0x04	; 4
    1196:	ce 01       	movw	r24, r28
    1198:	01 96       	adiw	r24, 0x01	; 1
    119a:	f3 d0       	rcall	.+486    	; 0x1382 <writeChar>
    119c:	09 c0       	rjmp	.+18     	; 0x11b0 <MQTTSerialize_connect+0x7e>
    119e:	6a ec       	ldi	r22, 0xCA	; 202
    11a0:	72 e0       	ldi	r23, 0x02	; 2
    11a2:	ce 01       	movw	r24, r28
    11a4:	01 96       	adiw	r24, 0x01	; 1
    11a6:	16 d1       	rcall	.+556    	; 0x13d4 <writeCString>
    11a8:	63 e0       	ldi	r22, 0x03	; 3
    11aa:	ce 01       	movw	r24, r28
    11ac:	01 96       	adiw	r24, 0x01	; 1
    11ae:	e9 d0       	rcall	.+466    	; 0x1382 <writeChar>
    11b0:	f1 2c       	mov	r15, r1
    11b2:	f8 01       	movw	r30, r16
    11b4:	87 85       	ldd	r24, Z+15	; 0x0f
    11b6:	80 fb       	bst	r24, 0
    11b8:	f1 f8       	bld	r15, 1
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 89       	ldd	r25, Z+16	; 0x10
    11be:	91 11       	cpse	r25, r1
    11c0:	01 c0       	rjmp	.+2      	; 0x11c4 <MQTTSerialize_connect+0x92>
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	80 fb       	bst	r24, 0
    11c6:	f2 f8       	bld	r15, 2
    11c8:	f2 fe       	sbrs	r15, 2
    11ca:	0d c0       	rjmp	.+26     	; 0x11e6 <MQTTSerialize_connect+0xb4>
    11cc:	f8 01       	movw	r30, r16
    11ce:	84 a1       	ldd	r24, Z+36	; 0x24
    11d0:	83 70       	andi	r24, 0x03	; 3
    11d2:	88 0f       	add	r24, r24
    11d4:	88 0f       	add	r24, r24
    11d6:	88 0f       	add	r24, r24
    11d8:	9f 2d       	mov	r25, r15
    11da:	97 7e       	andi	r25, 0xE7	; 231
    11dc:	f9 2e       	mov	r15, r25
    11de:	f8 2a       	or	r15, r24
    11e0:	83 a1       	ldd	r24, Z+35	; 0x23
    11e2:	80 fb       	bst	r24, 0
    11e4:	f5 f8       	bld	r15, 5
    11e6:	f8 01       	movw	r30, r16
    11e8:	85 a1       	ldd	r24, Z+37	; 0x25
    11ea:	96 a1       	ldd	r25, Z+38	; 0x26
    11ec:	89 2b       	or	r24, r25
    11ee:	21 f4       	brne	.+8      	; 0x11f8 <MQTTSerialize_connect+0xc6>
    11f0:	81 a5       	ldd	r24, Z+41	; 0x29
    11f2:	92 a5       	ldd	r25, Z+42	; 0x2a
    11f4:	89 2b       	or	r24, r25
    11f6:	11 f0       	breq	.+4      	; 0x11fc <MQTTSerialize_connect+0xca>
    11f8:	68 94       	set
    11fa:	f7 f8       	bld	r15, 7
    11fc:	f8 01       	movw	r30, r16
    11fe:	83 a5       	ldd	r24, Z+43	; 0x2b
    1200:	94 a5       	ldd	r25, Z+44	; 0x2c
    1202:	89 2b       	or	r24, r25
    1204:	21 f4       	brne	.+8      	; 0x120e <MQTTSerialize_connect+0xdc>
    1206:	87 a5       	ldd	r24, Z+47	; 0x2f
    1208:	90 a9       	ldd	r25, Z+48	; 0x30
    120a:	89 2b       	or	r24, r25
    120c:	11 f0       	breq	.+4      	; 0x1212 <MQTTSerialize_connect+0xe0>
    120e:	68 94       	set
    1210:	f6 f8       	bld	r15, 6
    1212:	6f 2d       	mov	r22, r15
    1214:	ce 01       	movw	r24, r28
    1216:	01 96       	adiw	r24, 0x01	; 1
    1218:	b4 d0       	rcall	.+360    	; 0x1382 <writeChar>
    121a:	f8 01       	movw	r30, r16
    121c:	65 85       	ldd	r22, Z+13	; 0x0d
    121e:	76 85       	ldd	r23, Z+14	; 0x0e
    1220:	ce 01       	movw	r24, r28
    1222:	01 96       	adiw	r24, 0x01	; 1
    1224:	b8 d0       	rcall	.+368    	; 0x1396 <writeInt>
    1226:	f8 01       	movw	r30, r16
    1228:	27 81       	ldd	r18, Z+7	; 0x07
    122a:	30 85       	ldd	r19, Z+8	; 0x08
    122c:	41 85       	ldd	r20, Z+9	; 0x09
    122e:	52 85       	ldd	r21, Z+10	; 0x0a
    1230:	63 85       	ldd	r22, Z+11	; 0x0b
    1232:	74 85       	ldd	r23, Z+12	; 0x0c
    1234:	ce 01       	movw	r24, r28
    1236:	01 96       	adiw	r24, 0x01	; 1
    1238:	f2 d0       	rcall	.+484    	; 0x141e <writeMQTTString>
    123a:	f8 01       	movw	r30, r16
    123c:	80 89       	ldd	r24, Z+16	; 0x10
    123e:	88 23       	and	r24, r24
    1240:	99 f0       	breq	.+38     	; 0x1268 <MQTTSerialize_connect+0x136>
    1242:	27 89       	ldd	r18, Z+23	; 0x17
    1244:	30 8d       	ldd	r19, Z+24	; 0x18
    1246:	41 8d       	ldd	r20, Z+25	; 0x19
    1248:	52 8d       	ldd	r21, Z+26	; 0x1a
    124a:	63 8d       	ldd	r22, Z+27	; 0x1b
    124c:	74 8d       	ldd	r23, Z+28	; 0x1c
    124e:	ce 01       	movw	r24, r28
    1250:	01 96       	adiw	r24, 0x01	; 1
    1252:	e5 d0       	rcall	.+458    	; 0x141e <writeMQTTString>
    1254:	f8 01       	movw	r30, r16
    1256:	25 8d       	ldd	r18, Z+29	; 0x1d
    1258:	36 8d       	ldd	r19, Z+30	; 0x1e
    125a:	47 8d       	ldd	r20, Z+31	; 0x1f
    125c:	50 a1       	ldd	r21, Z+32	; 0x20
    125e:	61 a1       	ldd	r22, Z+33	; 0x21
    1260:	72 a1       	ldd	r23, Z+34	; 0x22
    1262:	ce 01       	movw	r24, r28
    1264:	01 96       	adiw	r24, 0x01	; 1
    1266:	db d0       	rcall	.+438    	; 0x141e <writeMQTTString>
    1268:	ef 2c       	mov	r14, r15
    126a:	ff 20       	and	r15, r15
    126c:	54 f4       	brge	.+20     	; 0x1282 <MQTTSerialize_connect+0x150>
    126e:	f8 01       	movw	r30, r16
    1270:	25 a1       	ldd	r18, Z+37	; 0x25
    1272:	36 a1       	ldd	r19, Z+38	; 0x26
    1274:	47 a1       	ldd	r20, Z+39	; 0x27
    1276:	50 a5       	ldd	r21, Z+40	; 0x28
    1278:	61 a5       	ldd	r22, Z+41	; 0x29
    127a:	72 a5       	ldd	r23, Z+42	; 0x2a
    127c:	ce 01       	movw	r24, r28
    127e:	01 96       	adiw	r24, 0x01	; 1
    1280:	ce d0       	rcall	.+412    	; 0x141e <writeMQTTString>
    1282:	e6 fe       	sbrs	r14, 6
    1284:	0a c0       	rjmp	.+20     	; 0x129a <MQTTSerialize_connect+0x168>
    1286:	f8 01       	movw	r30, r16
    1288:	23 a5       	ldd	r18, Z+43	; 0x2b
    128a:	34 a5       	ldd	r19, Z+44	; 0x2c
    128c:	45 a5       	ldd	r20, Z+45	; 0x2d
    128e:	56 a5       	ldd	r21, Z+46	; 0x2e
    1290:	67 a5       	ldd	r22, Z+47	; 0x2f
    1292:	70 a9       	ldd	r23, Z+48	; 0x30
    1294:	ce 01       	movw	r24, r28
    1296:	01 96       	adiw	r24, 0x01	; 1
    1298:	c2 d0       	rcall	.+388    	; 0x141e <writeMQTTString>
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	9a 81       	ldd	r25, Y+2	; 0x02
    129e:	8c 19       	sub	r24, r12
    12a0:	9d 09       	sbc	r25, r13
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <MQTTSerialize_connect+0x176>
    12a4:	8e ef       	ldi	r24, 0xFE	; 254
    12a6:	9f ef       	ldi	r25, 0xFF	; 255
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
    12b0:	1f 91       	pop	r17
    12b2:	0f 91       	pop	r16
    12b4:	ff 90       	pop	r15
    12b6:	ef 90       	pop	r14
    12b8:	df 90       	pop	r13
    12ba:	cf 90       	pop	r12
    12bc:	bf 90       	pop	r11
    12be:	af 90       	pop	r10
    12c0:	08 95       	ret

000012c2 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
    12c2:	0f 93       	push	r16
    12c4:	1f 93       	push	r17
    12c6:	cf 93       	push	r28
    12c8:	df 93       	push	r29
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <MQTTSerialize_zero+0xa>
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
    12d0:	9a 83       	std	Y+2, r25	; 0x02
    12d2:	89 83       	std	Y+1, r24	; 0x01

	FUNC_ENTRY;
	if (buflen < 2)
    12d4:	62 30       	cpi	r22, 0x02	; 2
    12d6:	71 05       	cpc	r23, r1
    12d8:	9c f0       	brlt	.+38     	; 0x1300 <MQTTSerialize_zero+0x3e>
    12da:	8c 01       	movw	r16, r24
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
    12dc:	64 2f       	mov	r22, r20
    12de:	62 95       	swap	r22
    12e0:	60 7f       	andi	r22, 0xF0	; 240
	writeChar(&ptr, header.byte); /* write header */
    12e2:	ce 01       	movw	r24, r28
    12e4:	01 96       	adiw	r24, 0x01	; 1
    12e6:	4d d0       	rcall	.+154    	; 0x1382 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
    12e8:	60 e0       	ldi	r22, 0x00	; 0
    12ea:	70 e0       	ldi	r23, 0x00	; 0
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
    12ee:	9a 81       	ldd	r25, Y+2	; 0x02
    12f0:	13 d0       	rcall	.+38     	; 0x1318 <MQTTPacket_encode>
	rc = ptr - buf;
    12f2:	29 81       	ldd	r18, Y+1	; 0x01
    12f4:	3a 81       	ldd	r19, Y+2	; 0x02
    12f6:	82 0f       	add	r24, r18
    12f8:	93 1f       	adc	r25, r19
    12fa:	80 1b       	sub	r24, r16
    12fc:	91 0b       	sbc	r25, r17
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <MQTTSerialize_zero+0x42>
	unsigned char *ptr = buf;

	FUNC_ENTRY;
	if (buflen < 2)
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    1300:	8e ef       	ldi	r24, 0xFE	; 254
    1302:	9f ef       	ldi	r25, 0xFF	; 255
	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
	rc = ptr - buf;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	df 91       	pop	r29
    130a:	cf 91       	pop	r28
    130c:	1f 91       	pop	r17
    130e:	0f 91       	pop	r16
    1310:	08 95       	ret

00001312 <MQTTSerialize_disconnect>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
    1312:	4e e0       	ldi	r20, 0x0E	; 14
    1314:	d6 cf       	rjmp	.-84     	; 0x12c2 <MQTTSerialize_zero>
}
    1316:	08 95       	ret

00001318 <MQTTPacket_encode>:
		}
	}
	mqttstring->cstring = NULL;
	FUNC_EXIT_RC(rc);
	return rc;
}
    1318:	dc 01       	movw	r26, r24
    131a:	e0 e0       	ldi	r30, 0x00	; 0
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	9b 01       	movw	r18, r22
    1320:	2f 77       	andi	r18, 0x7F	; 127
    1322:	30 78       	andi	r19, 0x80	; 128
    1324:	33 23       	and	r19, r19
    1326:	34 f4       	brge	.+12     	; 0x1334 <MQTTPacket_encode+0x1c>
    1328:	21 50       	subi	r18, 0x01	; 1
    132a:	31 09       	sbc	r19, r1
    132c:	20 68       	ori	r18, 0x80	; 128
    132e:	3f 6f       	ori	r19, 0xFF	; 255
    1330:	2f 5f       	subi	r18, 0xFF	; 255
    1332:	3f 4f       	sbci	r19, 0xFF	; 255
    1334:	ab 01       	movw	r20, r22
    1336:	77 23       	and	r23, r23
    1338:	14 f4       	brge	.+4      	; 0x133e <MQTTPacket_encode+0x26>
    133a:	41 58       	subi	r20, 0x81	; 129
    133c:	5f 4f       	sbci	r21, 0xFF	; 255
    133e:	ba 01       	movw	r22, r20
    1340:	66 0f       	add	r22, r22
    1342:	67 2f       	mov	r22, r23
    1344:	66 1f       	adc	r22, r22
    1346:	77 0b       	sbc	r23, r23
    1348:	16 16       	cp	r1, r22
    134a:	17 06       	cpc	r1, r23
    134c:	24 f4       	brge	.+8      	; 0x1356 <MQTTPacket_encode+0x3e>
    134e:	31 96       	adiw	r30, 0x01	; 1
    1350:	20 68       	ori	r18, 0x80	; 128
    1352:	2d 93       	st	X+, r18
    1354:	e4 cf       	rjmp	.-56     	; 0x131e <MQTTPacket_encode+0x6>
    1356:	dc 01       	movw	r26, r24
    1358:	ae 0f       	add	r26, r30
    135a:	bf 1f       	adc	r27, r31
    135c:	2c 93       	st	X, r18
    135e:	cf 01       	movw	r24, r30
    1360:	01 96       	adiw	r24, 0x01	; 1
    1362:	08 95       	ret

00001364 <MQTTPacket_len>:
    1364:	9c 01       	movw	r18, r24
    1366:	2f 5f       	subi	r18, 0xFF	; 255
    1368:	3f 4f       	sbci	r19, 0xFF	; 255
    136a:	20 38       	cpi	r18, 0x80	; 128
    136c:	31 05       	cpc	r19, r1
    136e:	14 f4       	brge	.+4      	; 0x1374 <MQTTPacket_len+0x10>
    1370:	02 96       	adiw	r24, 0x02	; 2
    1372:	08 95       	ret
    1374:	21 15       	cp	r18, r1
    1376:	30 44       	sbci	r19, 0x40	; 64
    1378:	14 f4       	brge	.+4      	; 0x137e <MQTTPacket_len+0x1a>
    137a:	03 96       	adiw	r24, 0x03	; 3
    137c:	08 95       	ret
    137e:	04 96       	adiw	r24, 0x04	; 4
    1380:	08 95       	ret

00001382 <writeChar>:
    1382:	fc 01       	movw	r30, r24
    1384:	a0 81       	ld	r26, Z
    1386:	b1 81       	ldd	r27, Z+1	; 0x01
    1388:	6c 93       	st	X, r22
    138a:	80 81       	ld	r24, Z
    138c:	91 81       	ldd	r25, Z+1	; 0x01
    138e:	01 96       	adiw	r24, 0x01	; 1
    1390:	91 83       	std	Z+1, r25	; 0x01
    1392:	80 83       	st	Z, r24
    1394:	08 95       	ret

00001396 <writeInt>:
    1396:	fc 01       	movw	r30, r24
    1398:	a0 81       	ld	r26, Z
    139a:	b1 81       	ldd	r27, Z+1	; 0x01
    139c:	cb 01       	movw	r24, r22
    139e:	77 23       	and	r23, r23
    13a0:	14 f4       	brge	.+4      	; 0x13a6 <writeInt+0x10>
    13a2:	81 50       	subi	r24, 0x01	; 1
    13a4:	9f 4f       	sbci	r25, 0xFF	; 255
    13a6:	9c 93       	st	X, r25
    13a8:	a0 81       	ld	r26, Z
    13aa:	b1 81       	ldd	r27, Z+1	; 0x01
    13ac:	cd 01       	movw	r24, r26
    13ae:	01 96       	adiw	r24, 0x01	; 1
    13b0:	91 83       	std	Z+1, r25	; 0x01
    13b2:	80 83       	st	Z, r24
    13b4:	70 78       	andi	r23, 0x80	; 128
    13b6:	77 23       	and	r23, r23
    13b8:	2c f4       	brge	.+10     	; 0x13c4 <writeInt+0x2e>
    13ba:	61 50       	subi	r22, 0x01	; 1
    13bc:	71 09       	sbc	r23, r1
    13be:	7f 6f       	ori	r23, 0xFF	; 255
    13c0:	6f 5f       	subi	r22, 0xFF	; 255
    13c2:	7f 4f       	sbci	r23, 0xFF	; 255
    13c4:	11 96       	adiw	r26, 0x01	; 1
    13c6:	6c 93       	st	X, r22
    13c8:	80 81       	ld	r24, Z
    13ca:	91 81       	ldd	r25, Z+1	; 0x01
    13cc:	01 96       	adiw	r24, 0x01	; 1
    13ce:	91 83       	std	Z+1, r25	; 0x01
    13d0:	80 83       	st	Z, r24
    13d2:	08 95       	ret

000013d4 <writeCString>:
    13d4:	ef 92       	push	r14
    13d6:	ff 92       	push	r15
    13d8:	0f 93       	push	r16
    13da:	1f 93       	push	r17
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	8c 01       	movw	r16, r24
    13e2:	7b 01       	movw	r14, r22
    13e4:	eb 01       	movw	r28, r22
    13e6:	09 90       	ld	r0, Y+
    13e8:	00 20       	and	r0, r0
    13ea:	e9 f7       	brne	.-6      	; 0x13e6 <writeCString+0x12>
    13ec:	21 97       	sbiw	r28, 0x01	; 1
    13ee:	c6 1b       	sub	r28, r22
    13f0:	d7 0b       	sbc	r29, r23
    13f2:	be 01       	movw	r22, r28
    13f4:	d0 df       	rcall	.-96     	; 0x1396 <writeInt>
    13f6:	ae 01       	movw	r20, r28
    13f8:	b7 01       	movw	r22, r14
    13fa:	f8 01       	movw	r30, r16
    13fc:	80 81       	ld	r24, Z
    13fe:	91 81       	ldd	r25, Z+1	; 0x01
    1400:	71 d6       	rcall	.+3298   	; 0x20e4 <memcpy>
    1402:	f8 01       	movw	r30, r16
    1404:	80 81       	ld	r24, Z
    1406:	91 81       	ldd	r25, Z+1	; 0x01
    1408:	c8 0f       	add	r28, r24
    140a:	d9 1f       	adc	r29, r25
    140c:	d1 83       	std	Z+1, r29	; 0x01
    140e:	c0 83       	st	Z, r28
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	1f 91       	pop	r17
    1416:	0f 91       	pop	r16
    1418:	ff 90       	pop	r15
    141a:	ef 90       	pop	r14
    141c:	08 95       	ret

0000141e <writeMQTTString>:
    141e:	ef 92       	push	r14
    1420:	ff 92       	push	r15
    1422:	0f 93       	push	r16
    1424:	1f 93       	push	r17
    1426:	cf 93       	push	r28
    1428:	df 93       	push	r29
    142a:	00 d0       	rcall	.+0      	; 0x142c <writeMQTTString+0xe>
    142c:	00 d0       	rcall	.+0      	; 0x142e <writeMQTTString+0x10>
    142e:	00 d0       	rcall	.+0      	; 0x1430 <writeMQTTString+0x12>
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
    1434:	7c 01       	movw	r14, r24
    1436:	29 83       	std	Y+1, r18	; 0x01
    1438:	3a 83       	std	Y+2, r19	; 0x02
    143a:	4b 83       	std	Y+3, r20	; 0x03
    143c:	5c 83       	std	Y+4, r21	; 0x04
    143e:	6d 83       	std	Y+5, r22	; 0x05
    1440:	7e 83       	std	Y+6, r23	; 0x06
    1442:	0b 81       	ldd	r16, Y+3	; 0x03
    1444:	1c 81       	ldd	r17, Y+4	; 0x04
    1446:	10 16       	cp	r1, r16
    1448:	11 06       	cpc	r1, r17
    144a:	8c f4       	brge	.+34     	; 0x146e <writeMQTTString+0x50>
    144c:	b8 01       	movw	r22, r16
    144e:	a3 df       	rcall	.-186    	; 0x1396 <writeInt>
    1450:	6d 81       	ldd	r22, Y+5	; 0x05
    1452:	7e 81       	ldd	r23, Y+6	; 0x06
    1454:	a8 01       	movw	r20, r16
    1456:	f7 01       	movw	r30, r14
    1458:	80 81       	ld	r24, Z
    145a:	91 81       	ldd	r25, Z+1	; 0x01
    145c:	43 d6       	rcall	.+3206   	; 0x20e4 <memcpy>
    145e:	f7 01       	movw	r30, r14
    1460:	80 81       	ld	r24, Z
    1462:	91 81       	ldd	r25, Z+1	; 0x01
    1464:	08 0f       	add	r16, r24
    1466:	19 1f       	adc	r17, r25
    1468:	11 83       	std	Z+1, r17	; 0x01
    146a:	00 83       	st	Z, r16
    146c:	0a c0       	rjmp	.+20     	; 0x1482 <writeMQTTString+0x64>
    146e:	69 81       	ldd	r22, Y+1	; 0x01
    1470:	7a 81       	ldd	r23, Y+2	; 0x02
    1472:	61 15       	cp	r22, r1
    1474:	71 05       	cpc	r23, r1
    1476:	11 f0       	breq	.+4      	; 0x147c <writeMQTTString+0x5e>
    1478:	ad df       	rcall	.-166    	; 0x13d4 <writeCString>
    147a:	03 c0       	rjmp	.+6      	; 0x1482 <writeMQTTString+0x64>
    147c:	60 e0       	ldi	r22, 0x00	; 0
    147e:	70 e0       	ldi	r23, 0x00	; 0
    1480:	8a df       	rcall	.-236    	; 0x1396 <writeInt>
    1482:	26 96       	adiw	r28, 0x06	; 6
    1484:	0f b6       	in	r0, 0x3f	; 63
    1486:	f8 94       	cli
    1488:	de bf       	out	0x3e, r29	; 62
    148a:	0f be       	out	0x3f, r0	; 63
    148c:	cd bf       	out	0x3d, r28	; 61
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	1f 91       	pop	r17
    1494:	0f 91       	pop	r16
    1496:	ff 90       	pop	r15
    1498:	ef 90       	pop	r14
    149a:	08 95       	ret

0000149c <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
    14a0:	00 d0       	rcall	.+0      	; 0x14a2 <MQTTstrlen+0x6>
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <MQTTstrlen+0x8>
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <MQTTstrlen+0xa>
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    14aa:	49 83       	std	Y+1, r20	; 0x01
    14ac:	5a 83       	std	Y+2, r21	; 0x02
    14ae:	6b 83       	std	Y+3, r22	; 0x03
    14b0:	7c 83       	std	Y+4, r23	; 0x04
    14b2:	8d 83       	std	Y+5, r24	; 0x05
    14b4:	9e 83       	std	Y+6, r25	; 0x06
    14b6:	a9 81       	ldd	r26, Y+1	; 0x01
    14b8:	ba 81       	ldd	r27, Y+2	; 0x02
	int rc = 0;

	if (mqttstring.cstring)
    14ba:	10 97       	sbiw	r26, 0x00	; 0
    14bc:	49 f0       	breq	.+18     	; 0x14d0 <MQTTstrlen+0x34>
		rc = strlen(mqttstring.cstring);
    14be:	fd 01       	movw	r30, r26
    14c0:	01 90       	ld	r0, Z+
    14c2:	00 20       	and	r0, r0
    14c4:	e9 f7       	brne	.-6      	; 0x14c0 <MQTTstrlen+0x24>
    14c6:	31 97       	sbiw	r30, 0x01	; 1
    14c8:	cf 01       	movw	r24, r30
    14ca:	8a 1b       	sub	r24, r26
    14cc:	9b 0b       	sbc	r25, r27
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <MQTTstrlen+0x38>
	else
		rc = mqttstring.lenstring.len;
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    14d2:	9c 81       	ldd	r25, Y+4	; 0x04
	return rc;
}
    14d4:	26 96       	adiw	r28, 0x06	; 6
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	f8 94       	cli
    14da:	de bf       	out	0x3e, r29	; 62
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	cd bf       	out	0x3d, r28	; 61
    14e0:	df 91       	pop	r29
    14e2:	cf 91       	pop	r28
    14e4:	08 95       	ret

000014e6 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
    14e6:	ef 92       	push	r14
    14e8:	ff 92       	push	r15
    14ea:	0f 93       	push	r16
    14ec:	1f 93       	push	r17
    14ee:	cf 93       	push	r28
    14f0:	df 93       	push	r29
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <MQTTSerialize_publishLength+0xe>
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <MQTTSerialize_publishLength+0x10>
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <MQTTSerialize_publishLength+0x12>
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
    14fc:	7c 01       	movw	r14, r24
    14fe:	f4 2f       	mov	r31, r20
    1500:	e5 2f       	mov	r30, r21
    1502:	86 2f       	mov	r24, r22
    1504:	97 2f       	mov	r25, r23
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
    1506:	42 2f       	mov	r20, r18
    1508:	53 2f       	mov	r21, r19
    150a:	6f 2f       	mov	r22, r31
    150c:	7e 2f       	mov	r23, r30
    150e:	c6 df       	rcall	.-116    	; 0x149c <MQTTstrlen>
    1510:	02 96       	adiw	r24, 0x02	; 2
    1512:	80 0f       	add	r24, r16
    1514:	91 1f       	adc	r25, r17
	if (qos > 0)
    1516:	1e 14       	cp	r1, r14
    1518:	1f 04       	cpc	r1, r15
    151a:	0c f4       	brge	.+2      	; 0x151e <MQTTSerialize_publishLength+0x38>
		len += 2; /* packetid */
    151c:	02 96       	adiw	r24, 0x02	; 2
	return len;
}
    151e:	26 96       	adiw	r28, 0x06	; 6
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	f8 94       	cli
    1524:	de bf       	out	0x3e, r29	; 62
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	cd bf       	out	0x3d, r28	; 61
    152a:	df 91       	pop	r29
    152c:	cf 91       	pop	r28
    152e:	1f 91       	pop	r17
    1530:	0f 91       	pop	r16
    1532:	ff 90       	pop	r15
    1534:	ef 90       	pop	r14
    1536:	08 95       	ret

00001538 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
    1538:	2f 92       	push	r2
    153a:	3f 92       	push	r3
    153c:	4f 92       	push	r4
    153e:	5f 92       	push	r5
    1540:	6f 92       	push	r6
    1542:	7f 92       	push	r7
    1544:	8f 92       	push	r8
    1546:	9f 92       	push	r9
    1548:	af 92       	push	r10
    154a:	bf 92       	push	r11
    154c:	cf 92       	push	r12
    154e:	df 92       	push	r13
    1550:	ef 92       	push	r14
    1552:	ff 92       	push	r15
    1554:	0f 93       	push	r16
    1556:	1f 93       	push	r17
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	2a 97       	sbiw	r28, 0x0a	; 10
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	f8 94       	cli
    1566:	de bf       	out	0x3e, r29	; 62
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	cd bf       	out	0x3d, r28	; 61
    156c:	2c 01       	movw	r4, r24
    156e:	1b 01       	movw	r2, r22
    1570:	49 87       	std	Y+9, r20	; 0x09
    1572:	39 01       	movw	r6, r18
    1574:	0a 87       	std	Y+10, r16	; 0x0a
    1576:	28 2d       	mov	r18, r8
    1578:	8b 82       	std	Y+3, r8	; 0x03
    157a:	39 2d       	mov	r19, r9
    157c:	9c 82       	std	Y+4, r9	; 0x04
    157e:	4a 2d       	mov	r20, r10
    1580:	ad 82       	std	Y+5, r10	; 0x05
    1582:	5b 2d       	mov	r21, r11
    1584:	be 82       	std	Y+6, r11	; 0x06
    1586:	6c 2d       	mov	r22, r12
    1588:	cf 82       	std	Y+7, r12	; 0x07
    158a:	7d 2d       	mov	r23, r13
    158c:	d8 86       	std	Y+8, r13	; 0x08
    158e:	c9 a0       	ldd	r12, Y+33	; 0x21
    1590:	da a0       	ldd	r13, Y+34	; 0x22
	unsigned char *ptr = buf;
    1592:	9a 83       	std	Y+2, r25	; 0x02
    1594:	89 83       	std	Y+1, r24	; 0x01
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
    1596:	86 01       	movw	r16, r12
    1598:	c3 01       	movw	r24, r6
    159a:	a5 df       	rcall	.-182    	; 0x14e6 <MQTTSerialize_publishLength>
    159c:	8c 01       	movw	r16, r24
    159e:	e2 de       	rcall	.-572    	; 0x1364 <MQTTPacket_len>
    15a0:	28 16       	cp	r2, r24
    15a2:	39 06       	cpc	r3, r25
    15a4:	b4 f1       	brlt	.+108    	; 0x1612 <MQTTSerialize_publish+0xda>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
    15a6:	60 e3       	ldi	r22, 0x30	; 48
	header.bits.dup = dup;
    15a8:	89 85       	ldd	r24, Y+9	; 0x09
    15aa:	80 fb       	bst	r24, 0
    15ac:	63 f9       	bld	r22, 3
	header.bits.qos = qos;
    15ae:	86 2d       	mov	r24, r6
    15b0:	83 70       	andi	r24, 0x03	; 3
    15b2:	88 0f       	add	r24, r24
    15b4:	69 7f       	andi	r22, 0xF9	; 249
    15b6:	68 2b       	or	r22, r24
	header.bits.retain = retained;
    15b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    15ba:	80 fb       	bst	r24, 0
	writeChar(&ptr, header.byte); /* write header */
    15bc:	60 f9       	bld	r22, 0
    15be:	ce 01       	movw	r24, r28

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
    15c0:	01 96       	adiw	r24, 0x01	; 1
    15c2:	df de       	rcall	.-578    	; 0x1382 <writeChar>
    15c4:	b8 01       	movw	r22, r16
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ca:	a6 de       	rcall	.-692    	; 0x1318 <MQTTPacket_encode>
    15cc:	29 81       	ldd	r18, Y+1	; 0x01
    15ce:	3a 81       	ldd	r19, Y+2	; 0x02
    15d0:	82 0f       	add	r24, r18
    15d2:	93 1f       	adc	r25, r19

	writeMQTTString(&ptr, topicName);
    15d4:	9a 83       	std	Y+2, r25	; 0x02
    15d6:	89 83       	std	Y+1, r24	; 0x01
    15d8:	2b 81       	ldd	r18, Y+3	; 0x03
    15da:	3c 81       	ldd	r19, Y+4	; 0x04
    15dc:	4d 81       	ldd	r20, Y+5	; 0x05
    15de:	5e 81       	ldd	r21, Y+6	; 0x06
    15e0:	6f 81       	ldd	r22, Y+7	; 0x07
    15e2:	78 85       	ldd	r23, Y+8	; 0x08
    15e4:	ce 01       	movw	r24, r28

	if (qos > 0)
    15e6:	01 96       	adiw	r24, 0x01	; 1
    15e8:	1a df       	rcall	.-460    	; 0x141e <writeMQTTString>
		writeInt(&ptr, packetid);
    15ea:	16 14       	cp	r1, r6
    15ec:	17 04       	cpc	r1, r7
    15ee:	24 f4       	brge	.+8      	; 0x15f8 <MQTTSerialize_publish+0xc0>
    15f0:	b7 01       	movw	r22, r14

	memcpy(ptr, payload, payloadlen);
    15f2:	ce 01       	movw	r24, r28
    15f4:	01 96       	adiw	r24, 0x01	; 1
    15f6:	cf de       	rcall	.-610    	; 0x1396 <writeInt>
    15f8:	a6 01       	movw	r20, r12
    15fa:	6f 8d       	ldd	r22, Y+31	; 0x1f
    15fc:	78 a1       	ldd	r23, Y+32	; 0x20
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
	ptr += payloadlen;

	rc = ptr - buf;
    1600:	9a 81       	ldd	r25, Y+2	; 0x02
    1602:	70 d5       	rcall	.+2784   	; 0x20e4 <memcpy>
    1604:	89 81       	ldd	r24, Y+1	; 0x01
    1606:	9a 81       	ldd	r25, Y+2	; 0x02
    1608:	8c 0d       	add	r24, r12
    160a:	9d 1d       	adc	r25, r13
    160c:	84 19       	sub	r24, r4
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    160e:	95 09       	sbc	r25, r5
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <MQTTSerialize_publish+0xde>
	rc = ptr - buf;

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    1612:	8e ef       	ldi	r24, 0xFE	; 254
    1614:	9f ef       	ldi	r25, 0xFF	; 255
    1616:	2a 96       	adiw	r28, 0x0a	; 10
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	f8 94       	cli
    161c:	de bf       	out	0x3e, r29	; 62
    161e:	0f be       	out	0x3f, r0	; 63
    1620:	cd bf       	out	0x3d, r28	; 61
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	1f 91       	pop	r17
    1628:	0f 91       	pop	r16
    162a:	ff 90       	pop	r15
    162c:	ef 90       	pop	r14
    162e:	df 90       	pop	r13
    1630:	cf 90       	pop	r12
    1632:	bf 90       	pop	r11
    1634:	af 90       	pop	r10
    1636:	9f 90       	pop	r9
    1638:	8f 90       	pop	r8
    163a:	7f 90       	pop	r7
    163c:	6f 90       	pop	r6
    163e:	5f 90       	pop	r5
    1640:	4f 90       	pop	r4
    1642:	3f 90       	pop	r3
    1644:	2f 90       	pop	r2
    1646:	08 95       	ret

00001648 <mqtt_packet>:
#include "string.h"
#include "MQTT_functions.h" 

/////////////MQTT////////////////////
int mqtt_packet(char *payload, char *package, int buflen)
{
    1648:	2f 92       	push	r2
    164a:	3f 92       	push	r3
    164c:	4f 92       	push	r4
    164e:	5f 92       	push	r5
    1650:	6f 92       	push	r6
    1652:	7f 92       	push	r7
    1654:	8f 92       	push	r8
    1656:	9f 92       	push	r9
    1658:	af 92       	push	r10
    165a:	bf 92       	push	r11
    165c:	cf 92       	push	r12
    165e:	df 92       	push	r13
    1660:	ef 92       	push	r14
    1662:	ff 92       	push	r15
    1664:	0f 93       	push	r16
    1666:	1f 93       	push	r17
    1668:	cf 93       	push	r28
    166a:	df 93       	push	r29
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    1670:	e7 97       	sbiw	r28, 0x37	; 55
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	f8 94       	cli
    1676:	de bf       	out	0x3e, r29	; 62
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	cd bf       	out	0x3d, r28	; 61
    167c:	f8 2e       	mov	r15, r24
    167e:	e9 2e       	mov	r14, r25
    1680:	1b 01       	movw	r2, r22
    1682:	2a 01       	movw	r4, r20
	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
    1684:	81 e3       	ldi	r24, 0x31	; 49
    1686:	eb e2       	ldi	r30, 0x2B	; 43
    1688:	f1 e0       	ldi	r31, 0x01	; 1
    168a:	de 01       	movw	r26, r28
    168c:	11 96       	adiw	r26, 0x01	; 1
    168e:	01 90       	ld	r0, Z+
    1690:	0d 92       	st	X+, r0
    1692:	8a 95       	dec	r24
    1694:	e1 f7       	brne	.-8      	; 0x168e <mqtt_packet+0x46>
	
	//volatile int buflen = sizeof(&package);
	char buf[256];
	//buflen = sizeof(buf);
	MQTTString topicString = MQTTString_initializer;
    1696:	1d aa       	std	Y+53, r1	; 0x35
    1698:	1c aa       	std	Y+52, r1	; 0x34
    169a:	1f aa       	std	Y+55, r1	; 0x37
    169c:	1e aa       	std	Y+54, r1	; 0x36
	
	int payloadlen = strlen(payload);
    169e:	ef 2d       	mov	r30, r15
    16a0:	f9 2f       	mov	r31, r25
    16a2:	df 01       	movw	r26, r30
    16a4:	0d 90       	ld	r0, X+
    16a6:	00 20       	and	r0, r0
    16a8:	e9 f7       	brne	.-6      	; 0x16a4 <mqtt_packet+0x5c>
    16aa:	11 97       	sbiw	r26, 0x01	; 1
    16ac:	8d 01       	movw	r16, r26
    16ae:	0e 1b       	sub	r16, r30
    16b0:	1f 0b       	sbc	r17, r31
	int len = 0;
	
	data.clientID.cstring = "LE";
    16b2:	81 ed       	ldi	r24, 0xD1	; 209
    16b4:	92 e0       	ldi	r25, 0x02	; 2
    16b6:	99 87       	std	Y+9, r25	; 0x09
    16b8:	88 87       	std	Y+8, r24	; 0x08
	data.keepAliveInterval = 20;
    16ba:	84 e1       	ldi	r24, 0x14	; 20
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	9f 87       	std	Y+15, r25	; 0x0f
    16c0:	8e 87       	std	Y+14, r24	; 0x0e
	data.cleansession = 1;
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	88 8b       	std	Y+16, r24	; 0x10
	data.username.cstring = "";
    16c6:	8a ea       	ldi	r24, 0xAA	; 170
    16c8:	91 e0       	ldi	r25, 0x01	; 1
    16ca:	9f a3       	std	Y+39, r25	; 0x27
    16cc:	8e a3       	std	Y+38, r24	; 0x26
	data.password.cstring = "";
    16ce:	9d a7       	std	Y+45, r25	; 0x2d
    16d0:	8c a7       	std	Y+44, r24	; 0x2c
	data.MQTTVersion = 4;
    16d2:	84 e0       	ldi	r24, 0x04	; 4
    16d4:	8f 83       	std	Y+7, r24	; 0x07

	len = MQTTSerialize_connect((unsigned char *)package, buflen, &data);
    16d6:	ae 01       	movw	r20, r28
    16d8:	4f 5f       	subi	r20, 0xFF	; 255
    16da:	5f 4f       	sbci	r21, 0xFF	; 255
    16dc:	b2 01       	movw	r22, r4
    16de:	c1 01       	movw	r24, r2
    16e0:	28 dd       	rcall	.-1456   	; 0x1132 <MQTTSerialize_connect>
    16e2:	3c 01       	movw	r6, r24
	
	topicString.cstring = "LE/0"; //MAKE A GENERAL CONFIGUREATION OF THIS PARAMETER
    16e4:	84 ed       	ldi	r24, 0xD4	; 212
    16e6:	92 e0       	ldi	r25, 0x02	; 2
    16e8:	9b ab       	std	Y+51, r25	; 0x33
    16ea:	8a ab       	std	Y+50, r24	; 0x32
	
	len += MQTTSerialize_publish((unsigned char *)(package + len), buflen - len, 0, 0, 0, 0, topicString, (unsigned char *)payload, payloadlen);
    16ec:	b2 01       	movw	r22, r4
    16ee:	66 19       	sub	r22, r6
    16f0:	77 09       	sbc	r23, r7
    16f2:	1f 93       	push	r17
    16f4:	0f 93       	push	r16
    16f6:	ef 92       	push	r14
    16f8:	ff 92       	push	r15
    16fa:	8a a8       	ldd	r8, Y+50	; 0x32
    16fc:	9b a8       	ldd	r9, Y+51	; 0x33
    16fe:	ac a8       	ldd	r10, Y+52	; 0x34
    1700:	bd a8       	ldd	r11, Y+53	; 0x35
    1702:	ce a8       	ldd	r12, Y+54	; 0x36
    1704:	df a8       	ldd	r13, Y+55	; 0x37
    1706:	e1 2c       	mov	r14, r1
    1708:	f1 2c       	mov	r15, r1
    170a:	00 e0       	ldi	r16, 0x00	; 0
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	40 e0       	ldi	r20, 0x00	; 0
    1712:	c1 01       	movw	r24, r2
    1714:	86 0d       	add	r24, r6
    1716:	97 1d       	adc	r25, r7
    1718:	0f df       	rcall	.-482    	; 0x1538 <MQTTSerialize_publish>
    171a:	68 0e       	add	r6, r24
    171c:	79 1e       	adc	r7, r25
		
	len += MQTTSerialize_disconnect((unsigned char *)(package + len), buflen - len);
    171e:	b2 01       	movw	r22, r4
    1720:	66 19       	sub	r22, r6
    1722:	77 09       	sbc	r23, r7
    1724:	c1 01       	movw	r24, r2
    1726:	86 0d       	add	r24, r6
    1728:	97 1d       	adc	r25, r7
    172a:	f3 dd       	rcall	.-1050   	; 0x1312 <MQTTSerialize_disconnect>
	
	exit:
	
	//return 0;
	return len;
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	0f 90       	pop	r0
}
    1734:	86 0d       	add	r24, r6
    1736:	97 1d       	adc	r25, r7
    1738:	e7 96       	adiw	r28, 0x37	; 55
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	f8 94       	cli
    173e:	de bf       	out	0x3e, r29	; 62
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	cd bf       	out	0x3d, r28	; 61
    1744:	df 91       	pop	r29
    1746:	cf 91       	pop	r28
    1748:	1f 91       	pop	r17
    174a:	0f 91       	pop	r16
    174c:	ff 90       	pop	r15
    174e:	ef 90       	pop	r14
    1750:	df 90       	pop	r13
    1752:	cf 90       	pop	r12
    1754:	bf 90       	pop	r11
    1756:	af 90       	pop	r10
    1758:	9f 90       	pop	r9
    175a:	8f 90       	pop	r8
    175c:	7f 90       	pop	r7
    175e:	6f 90       	pop	r6
    1760:	5f 90       	pop	r5
    1762:	4f 90       	pop	r4
    1764:	3f 90       	pop	r3
    1766:	2f 90       	pop	r2
    1768:	08 95       	ret

0000176a <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    176a:	08 95       	ret

0000176c <__cmpsf2>:
    176c:	12 d1       	rcall	.+548    	; 0x1992 <__fp_cmp>
    176e:	08 f4       	brcc	.+2      	; 0x1772 <__cmpsf2+0x6>
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	08 95       	ret

00001774 <__divsf3>:
    1774:	0c d0       	rcall	.+24     	; 0x178e <__divsf3x>
    1776:	48 c1       	rjmp	.+656    	; 0x1a08 <__fp_round>
    1778:	40 d1       	rcall	.+640    	; 0x19fa <__fp_pscB>
    177a:	40 f0       	brcs	.+16     	; 0x178c <__divsf3+0x18>
    177c:	37 d1       	rcall	.+622    	; 0x19ec <__fp_pscA>
    177e:	30 f0       	brcs	.+12     	; 0x178c <__divsf3+0x18>
    1780:	21 f4       	brne	.+8      	; 0x178a <__divsf3+0x16>
    1782:	5f 3f       	cpi	r21, 0xFF	; 255
    1784:	19 f0       	breq	.+6      	; 0x178c <__divsf3+0x18>
    1786:	29 c1       	rjmp	.+594    	; 0x19da <__fp_inf>
    1788:	51 11       	cpse	r21, r1
    178a:	72 c1       	rjmp	.+740    	; 0x1a70 <__fp_szero>
    178c:	2c c1       	rjmp	.+600    	; 0x19e6 <__fp_nan>

0000178e <__divsf3x>:
    178e:	4d d1       	rcall	.+666    	; 0x1a2a <__fp_split3>
    1790:	98 f3       	brcs	.-26     	; 0x1778 <__divsf3+0x4>

00001792 <__divsf3_pse>:
    1792:	99 23       	and	r25, r25
    1794:	c9 f3       	breq	.-14     	; 0x1788 <__divsf3+0x14>
    1796:	55 23       	and	r21, r21
    1798:	b1 f3       	breq	.-20     	; 0x1786 <__divsf3+0x12>
    179a:	95 1b       	sub	r25, r21
    179c:	55 0b       	sbc	r21, r21
    179e:	bb 27       	eor	r27, r27
    17a0:	aa 27       	eor	r26, r26
    17a2:	62 17       	cp	r22, r18
    17a4:	73 07       	cpc	r23, r19
    17a6:	84 07       	cpc	r24, r20
    17a8:	38 f0       	brcs	.+14     	; 0x17b8 <__divsf3_pse+0x26>
    17aa:	9f 5f       	subi	r25, 0xFF	; 255
    17ac:	5f 4f       	sbci	r21, 0xFF	; 255
    17ae:	22 0f       	add	r18, r18
    17b0:	33 1f       	adc	r19, r19
    17b2:	44 1f       	adc	r20, r20
    17b4:	aa 1f       	adc	r26, r26
    17b6:	a9 f3       	breq	.-22     	; 0x17a2 <__divsf3_pse+0x10>
    17b8:	33 d0       	rcall	.+102    	; 0x1820 <__divsf3_pse+0x8e>
    17ba:	0e 2e       	mov	r0, r30
    17bc:	3a f0       	brmi	.+14     	; 0x17cc <__divsf3_pse+0x3a>
    17be:	e0 e8       	ldi	r30, 0x80	; 128
    17c0:	30 d0       	rcall	.+96     	; 0x1822 <__divsf3_pse+0x90>
    17c2:	91 50       	subi	r25, 0x01	; 1
    17c4:	50 40       	sbci	r21, 0x00	; 0
    17c6:	e6 95       	lsr	r30
    17c8:	00 1c       	adc	r0, r0
    17ca:	ca f7       	brpl	.-14     	; 0x17be <__divsf3_pse+0x2c>
    17cc:	29 d0       	rcall	.+82     	; 0x1820 <__divsf3_pse+0x8e>
    17ce:	fe 2f       	mov	r31, r30
    17d0:	27 d0       	rcall	.+78     	; 0x1820 <__divsf3_pse+0x8e>
    17d2:	66 0f       	add	r22, r22
    17d4:	77 1f       	adc	r23, r23
    17d6:	88 1f       	adc	r24, r24
    17d8:	bb 1f       	adc	r27, r27
    17da:	26 17       	cp	r18, r22
    17dc:	37 07       	cpc	r19, r23
    17de:	48 07       	cpc	r20, r24
    17e0:	ab 07       	cpc	r26, r27
    17e2:	b0 e8       	ldi	r27, 0x80	; 128
    17e4:	09 f0       	breq	.+2      	; 0x17e8 <__divsf3_pse+0x56>
    17e6:	bb 0b       	sbc	r27, r27
    17e8:	80 2d       	mov	r24, r0
    17ea:	bf 01       	movw	r22, r30
    17ec:	ff 27       	eor	r31, r31
    17ee:	93 58       	subi	r25, 0x83	; 131
    17f0:	5f 4f       	sbci	r21, 0xFF	; 255
    17f2:	2a f0       	brmi	.+10     	; 0x17fe <__divsf3_pse+0x6c>
    17f4:	9e 3f       	cpi	r25, 0xFE	; 254
    17f6:	51 05       	cpc	r21, r1
    17f8:	68 f0       	brcs	.+26     	; 0x1814 <__divsf3_pse+0x82>
    17fa:	ef c0       	rjmp	.+478    	; 0x19da <__fp_inf>
    17fc:	39 c1       	rjmp	.+626    	; 0x1a70 <__fp_szero>
    17fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1800:	ec f3       	brlt	.-6      	; 0x17fc <__divsf3_pse+0x6a>
    1802:	98 3e       	cpi	r25, 0xE8	; 232
    1804:	dc f3       	brlt	.-10     	; 0x17fc <__divsf3_pse+0x6a>
    1806:	86 95       	lsr	r24
    1808:	77 95       	ror	r23
    180a:	67 95       	ror	r22
    180c:	b7 95       	ror	r27
    180e:	f7 95       	ror	r31
    1810:	9f 5f       	subi	r25, 0xFF	; 255
    1812:	c9 f7       	brne	.-14     	; 0x1806 <__divsf3_pse+0x74>
    1814:	88 0f       	add	r24, r24
    1816:	91 1d       	adc	r25, r1
    1818:	96 95       	lsr	r25
    181a:	87 95       	ror	r24
    181c:	97 f9       	bld	r25, 7
    181e:	08 95       	ret
    1820:	e1 e0       	ldi	r30, 0x01	; 1
    1822:	66 0f       	add	r22, r22
    1824:	77 1f       	adc	r23, r23
    1826:	88 1f       	adc	r24, r24
    1828:	bb 1f       	adc	r27, r27
    182a:	62 17       	cp	r22, r18
    182c:	73 07       	cpc	r23, r19
    182e:	84 07       	cpc	r24, r20
    1830:	ba 07       	cpc	r27, r26
    1832:	20 f0       	brcs	.+8      	; 0x183c <__divsf3_pse+0xaa>
    1834:	62 1b       	sub	r22, r18
    1836:	73 0b       	sbc	r23, r19
    1838:	84 0b       	sbc	r24, r20
    183a:	ba 0b       	sbc	r27, r26
    183c:	ee 1f       	adc	r30, r30
    183e:	88 f7       	brcc	.-30     	; 0x1822 <__divsf3_pse+0x90>
    1840:	e0 95       	com	r30
    1842:	08 95       	ret

00001844 <__fixunssfsi>:
    1844:	fa d0       	rcall	.+500    	; 0x1a3a <__fp_splitA>
    1846:	88 f0       	brcs	.+34     	; 0x186a <__fixunssfsi+0x26>
    1848:	9f 57       	subi	r25, 0x7F	; 127
    184a:	90 f0       	brcs	.+36     	; 0x1870 <__fixunssfsi+0x2c>
    184c:	b9 2f       	mov	r27, r25
    184e:	99 27       	eor	r25, r25
    1850:	b7 51       	subi	r27, 0x17	; 23
    1852:	a0 f0       	brcs	.+40     	; 0x187c <__fixunssfsi+0x38>
    1854:	d1 f0       	breq	.+52     	; 0x188a <__fixunssfsi+0x46>
    1856:	66 0f       	add	r22, r22
    1858:	77 1f       	adc	r23, r23
    185a:	88 1f       	adc	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	1a f0       	brmi	.+6      	; 0x1866 <__fixunssfsi+0x22>
    1860:	ba 95       	dec	r27
    1862:	c9 f7       	brne	.-14     	; 0x1856 <__fixunssfsi+0x12>
    1864:	12 c0       	rjmp	.+36     	; 0x188a <__fixunssfsi+0x46>
    1866:	b1 30       	cpi	r27, 0x01	; 1
    1868:	81 f0       	breq	.+32     	; 0x188a <__fixunssfsi+0x46>
    186a:	01 d1       	rcall	.+514    	; 0x1a6e <__fp_zero>
    186c:	b1 e0       	ldi	r27, 0x01	; 1
    186e:	08 95       	ret
    1870:	fe c0       	rjmp	.+508    	; 0x1a6e <__fp_zero>
    1872:	67 2f       	mov	r22, r23
    1874:	78 2f       	mov	r23, r24
    1876:	88 27       	eor	r24, r24
    1878:	b8 5f       	subi	r27, 0xF8	; 248
    187a:	39 f0       	breq	.+14     	; 0x188a <__fixunssfsi+0x46>
    187c:	b9 3f       	cpi	r27, 0xF9	; 249
    187e:	cc f3       	brlt	.-14     	; 0x1872 <__fixunssfsi+0x2e>
    1880:	86 95       	lsr	r24
    1882:	77 95       	ror	r23
    1884:	67 95       	ror	r22
    1886:	b3 95       	inc	r27
    1888:	d9 f7       	brne	.-10     	; 0x1880 <__fixunssfsi+0x3c>
    188a:	3e f4       	brtc	.+14     	; 0x189a <__fixunssfsi+0x56>
    188c:	90 95       	com	r25
    188e:	80 95       	com	r24
    1890:	70 95       	com	r23
    1892:	61 95       	neg	r22
    1894:	7f 4f       	sbci	r23, 0xFF	; 255
    1896:	8f 4f       	sbci	r24, 0xFF	; 255
    1898:	9f 4f       	sbci	r25, 0xFF	; 255
    189a:	08 95       	ret

0000189c <__floatunsisf>:
    189c:	e8 94       	clt
    189e:	09 c0       	rjmp	.+18     	; 0x18b2 <__floatsisf+0x12>

000018a0 <__floatsisf>:
    18a0:	97 fb       	bst	r25, 7
    18a2:	3e f4       	brtc	.+14     	; 0x18b2 <__floatsisf+0x12>
    18a4:	90 95       	com	r25
    18a6:	80 95       	com	r24
    18a8:	70 95       	com	r23
    18aa:	61 95       	neg	r22
    18ac:	7f 4f       	sbci	r23, 0xFF	; 255
    18ae:	8f 4f       	sbci	r24, 0xFF	; 255
    18b0:	9f 4f       	sbci	r25, 0xFF	; 255
    18b2:	99 23       	and	r25, r25
    18b4:	a9 f0       	breq	.+42     	; 0x18e0 <__floatsisf+0x40>
    18b6:	f9 2f       	mov	r31, r25
    18b8:	96 e9       	ldi	r25, 0x96	; 150
    18ba:	bb 27       	eor	r27, r27
    18bc:	93 95       	inc	r25
    18be:	f6 95       	lsr	r31
    18c0:	87 95       	ror	r24
    18c2:	77 95       	ror	r23
    18c4:	67 95       	ror	r22
    18c6:	b7 95       	ror	r27
    18c8:	f1 11       	cpse	r31, r1
    18ca:	f8 cf       	rjmp	.-16     	; 0x18bc <__floatsisf+0x1c>
    18cc:	fa f4       	brpl	.+62     	; 0x190c <__floatsisf+0x6c>
    18ce:	bb 0f       	add	r27, r27
    18d0:	11 f4       	brne	.+4      	; 0x18d6 <__floatsisf+0x36>
    18d2:	60 ff       	sbrs	r22, 0
    18d4:	1b c0       	rjmp	.+54     	; 0x190c <__floatsisf+0x6c>
    18d6:	6f 5f       	subi	r22, 0xFF	; 255
    18d8:	7f 4f       	sbci	r23, 0xFF	; 255
    18da:	8f 4f       	sbci	r24, 0xFF	; 255
    18dc:	9f 4f       	sbci	r25, 0xFF	; 255
    18de:	16 c0       	rjmp	.+44     	; 0x190c <__floatsisf+0x6c>
    18e0:	88 23       	and	r24, r24
    18e2:	11 f0       	breq	.+4      	; 0x18e8 <__floatsisf+0x48>
    18e4:	96 e9       	ldi	r25, 0x96	; 150
    18e6:	11 c0       	rjmp	.+34     	; 0x190a <__floatsisf+0x6a>
    18e8:	77 23       	and	r23, r23
    18ea:	21 f0       	breq	.+8      	; 0x18f4 <__floatsisf+0x54>
    18ec:	9e e8       	ldi	r25, 0x8E	; 142
    18ee:	87 2f       	mov	r24, r23
    18f0:	76 2f       	mov	r23, r22
    18f2:	05 c0       	rjmp	.+10     	; 0x18fe <__floatsisf+0x5e>
    18f4:	66 23       	and	r22, r22
    18f6:	71 f0       	breq	.+28     	; 0x1914 <__floatsisf+0x74>
    18f8:	96 e8       	ldi	r25, 0x86	; 134
    18fa:	86 2f       	mov	r24, r22
    18fc:	70 e0       	ldi	r23, 0x00	; 0
    18fe:	60 e0       	ldi	r22, 0x00	; 0
    1900:	2a f0       	brmi	.+10     	; 0x190c <__floatsisf+0x6c>
    1902:	9a 95       	dec	r25
    1904:	66 0f       	add	r22, r22
    1906:	77 1f       	adc	r23, r23
    1908:	88 1f       	adc	r24, r24
    190a:	da f7       	brpl	.-10     	; 0x1902 <__floatsisf+0x62>
    190c:	88 0f       	add	r24, r24
    190e:	96 95       	lsr	r25
    1910:	87 95       	ror	r24
    1912:	97 f9       	bld	r25, 7
    1914:	08 95       	ret

00001916 <__floatundisf>:
    1916:	e8 94       	clt

00001918 <__fp_di2sf>:
    1918:	f9 2f       	mov	r31, r25
    191a:	96 eb       	ldi	r25, 0xB6	; 182
    191c:	ff 23       	and	r31, r31
    191e:	81 f0       	breq	.+32     	; 0x1940 <__fp_di2sf+0x28>
    1920:	12 16       	cp	r1, r18
    1922:	13 06       	cpc	r1, r19
    1924:	14 06       	cpc	r1, r20
    1926:	44 0b       	sbc	r20, r20
    1928:	93 95       	inc	r25
    192a:	f6 95       	lsr	r31
    192c:	87 95       	ror	r24
    192e:	77 95       	ror	r23
    1930:	67 95       	ror	r22
    1932:	57 95       	ror	r21
    1934:	40 40       	sbci	r20, 0x00	; 0
    1936:	ff 23       	and	r31, r31
    1938:	b9 f7       	brne	.-18     	; 0x1928 <__fp_di2sf+0x10>
    193a:	1b c0       	rjmp	.+54     	; 0x1972 <__fp_di2sf+0x5a>
    193c:	99 27       	eor	r25, r25
    193e:	08 95       	ret
    1940:	88 23       	and	r24, r24
    1942:	51 f4       	brne	.+20     	; 0x1958 <__fp_di2sf+0x40>
    1944:	98 50       	subi	r25, 0x08	; 8
    1946:	d2 f7       	brpl	.-12     	; 0x193c <__fp_di2sf+0x24>
    1948:	87 2b       	or	r24, r23
    194a:	76 2f       	mov	r23, r22
    194c:	65 2f       	mov	r22, r21
    194e:	54 2f       	mov	r21, r20
    1950:	43 2f       	mov	r20, r19
    1952:	32 2f       	mov	r19, r18
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	b1 f3       	breq	.-20     	; 0x1944 <__fp_di2sf+0x2c>
    1958:	12 16       	cp	r1, r18
    195a:	13 06       	cpc	r1, r19
    195c:	14 06       	cpc	r1, r20
    195e:	44 0b       	sbc	r20, r20
    1960:	88 23       	and	r24, r24
    1962:	3a f0       	brmi	.+14     	; 0x1972 <__fp_di2sf+0x5a>
    1964:	9a 95       	dec	r25
    1966:	44 0f       	add	r20, r20
    1968:	55 1f       	adc	r21, r21
    196a:	66 1f       	adc	r22, r22
    196c:	77 1f       	adc	r23, r23
    196e:	88 1f       	adc	r24, r24
    1970:	ca f7       	brpl	.-14     	; 0x1964 <__fp_di2sf+0x4c>
    1972:	55 23       	and	r21, r21
    1974:	4a f4       	brpl	.+18     	; 0x1988 <__fp_di2sf+0x70>
    1976:	44 0f       	add	r20, r20
    1978:	55 1f       	adc	r21, r21
    197a:	11 f4       	brne	.+4      	; 0x1980 <__fp_di2sf+0x68>
    197c:	60 ff       	sbrs	r22, 0
    197e:	04 c0       	rjmp	.+8      	; 0x1988 <__fp_di2sf+0x70>
    1980:	6f 5f       	subi	r22, 0xFF	; 255
    1982:	7f 4f       	sbci	r23, 0xFF	; 255
    1984:	8f 4f       	sbci	r24, 0xFF	; 255
    1986:	9f 4f       	sbci	r25, 0xFF	; 255
    1988:	88 0f       	add	r24, r24
    198a:	96 95       	lsr	r25
    198c:	87 95       	ror	r24
    198e:	97 f9       	bld	r25, 7
    1990:	08 95       	ret

00001992 <__fp_cmp>:
    1992:	99 0f       	add	r25, r25
    1994:	00 08       	sbc	r0, r0
    1996:	55 0f       	add	r21, r21
    1998:	aa 0b       	sbc	r26, r26
    199a:	e0 e8       	ldi	r30, 0x80	; 128
    199c:	fe ef       	ldi	r31, 0xFE	; 254
    199e:	16 16       	cp	r1, r22
    19a0:	17 06       	cpc	r1, r23
    19a2:	e8 07       	cpc	r30, r24
    19a4:	f9 07       	cpc	r31, r25
    19a6:	c0 f0       	brcs	.+48     	; 0x19d8 <__fp_cmp+0x46>
    19a8:	12 16       	cp	r1, r18
    19aa:	13 06       	cpc	r1, r19
    19ac:	e4 07       	cpc	r30, r20
    19ae:	f5 07       	cpc	r31, r21
    19b0:	98 f0       	brcs	.+38     	; 0x19d8 <__fp_cmp+0x46>
    19b2:	62 1b       	sub	r22, r18
    19b4:	73 0b       	sbc	r23, r19
    19b6:	84 0b       	sbc	r24, r20
    19b8:	95 0b       	sbc	r25, r21
    19ba:	39 f4       	brne	.+14     	; 0x19ca <__fp_cmp+0x38>
    19bc:	0a 26       	eor	r0, r26
    19be:	61 f0       	breq	.+24     	; 0x19d8 <__fp_cmp+0x46>
    19c0:	23 2b       	or	r18, r19
    19c2:	24 2b       	or	r18, r20
    19c4:	25 2b       	or	r18, r21
    19c6:	21 f4       	brne	.+8      	; 0x19d0 <__fp_cmp+0x3e>
    19c8:	08 95       	ret
    19ca:	0a 26       	eor	r0, r26
    19cc:	09 f4       	brne	.+2      	; 0x19d0 <__fp_cmp+0x3e>
    19ce:	a1 40       	sbci	r26, 0x01	; 1
    19d0:	a6 95       	lsr	r26
    19d2:	8f ef       	ldi	r24, 0xFF	; 255
    19d4:	81 1d       	adc	r24, r1
    19d6:	81 1d       	adc	r24, r1
    19d8:	08 95       	ret

000019da <__fp_inf>:
    19da:	97 f9       	bld	r25, 7
    19dc:	9f 67       	ori	r25, 0x7F	; 127
    19de:	80 e8       	ldi	r24, 0x80	; 128
    19e0:	70 e0       	ldi	r23, 0x00	; 0
    19e2:	60 e0       	ldi	r22, 0x00	; 0
    19e4:	08 95       	ret

000019e6 <__fp_nan>:
    19e6:	9f ef       	ldi	r25, 0xFF	; 255
    19e8:	80 ec       	ldi	r24, 0xC0	; 192
    19ea:	08 95       	ret

000019ec <__fp_pscA>:
    19ec:	00 24       	eor	r0, r0
    19ee:	0a 94       	dec	r0
    19f0:	16 16       	cp	r1, r22
    19f2:	17 06       	cpc	r1, r23
    19f4:	18 06       	cpc	r1, r24
    19f6:	09 06       	cpc	r0, r25
    19f8:	08 95       	ret

000019fa <__fp_pscB>:
    19fa:	00 24       	eor	r0, r0
    19fc:	0a 94       	dec	r0
    19fe:	12 16       	cp	r1, r18
    1a00:	13 06       	cpc	r1, r19
    1a02:	14 06       	cpc	r1, r20
    1a04:	05 06       	cpc	r0, r21
    1a06:	08 95       	ret

00001a08 <__fp_round>:
    1a08:	09 2e       	mov	r0, r25
    1a0a:	03 94       	inc	r0
    1a0c:	00 0c       	add	r0, r0
    1a0e:	11 f4       	brne	.+4      	; 0x1a14 <__fp_round+0xc>
    1a10:	88 23       	and	r24, r24
    1a12:	52 f0       	brmi	.+20     	; 0x1a28 <__fp_round+0x20>
    1a14:	bb 0f       	add	r27, r27
    1a16:	40 f4       	brcc	.+16     	; 0x1a28 <__fp_round+0x20>
    1a18:	bf 2b       	or	r27, r31
    1a1a:	11 f4       	brne	.+4      	; 0x1a20 <__fp_round+0x18>
    1a1c:	60 ff       	sbrs	r22, 0
    1a1e:	04 c0       	rjmp	.+8      	; 0x1a28 <__fp_round+0x20>
    1a20:	6f 5f       	subi	r22, 0xFF	; 255
    1a22:	7f 4f       	sbci	r23, 0xFF	; 255
    1a24:	8f 4f       	sbci	r24, 0xFF	; 255
    1a26:	9f 4f       	sbci	r25, 0xFF	; 255
    1a28:	08 95       	ret

00001a2a <__fp_split3>:
    1a2a:	57 fd       	sbrc	r21, 7
    1a2c:	90 58       	subi	r25, 0x80	; 128
    1a2e:	44 0f       	add	r20, r20
    1a30:	55 1f       	adc	r21, r21
    1a32:	59 f0       	breq	.+22     	; 0x1a4a <__fp_splitA+0x10>
    1a34:	5f 3f       	cpi	r21, 0xFF	; 255
    1a36:	71 f0       	breq	.+28     	; 0x1a54 <__fp_splitA+0x1a>
    1a38:	47 95       	ror	r20

00001a3a <__fp_splitA>:
    1a3a:	88 0f       	add	r24, r24
    1a3c:	97 fb       	bst	r25, 7
    1a3e:	99 1f       	adc	r25, r25
    1a40:	61 f0       	breq	.+24     	; 0x1a5a <__fp_splitA+0x20>
    1a42:	9f 3f       	cpi	r25, 0xFF	; 255
    1a44:	79 f0       	breq	.+30     	; 0x1a64 <__fp_splitA+0x2a>
    1a46:	87 95       	ror	r24
    1a48:	08 95       	ret
    1a4a:	12 16       	cp	r1, r18
    1a4c:	13 06       	cpc	r1, r19
    1a4e:	14 06       	cpc	r1, r20
    1a50:	55 1f       	adc	r21, r21
    1a52:	f2 cf       	rjmp	.-28     	; 0x1a38 <__fp_split3+0xe>
    1a54:	46 95       	lsr	r20
    1a56:	f1 df       	rcall	.-30     	; 0x1a3a <__fp_splitA>
    1a58:	08 c0       	rjmp	.+16     	; 0x1a6a <__fp_splitA+0x30>
    1a5a:	16 16       	cp	r1, r22
    1a5c:	17 06       	cpc	r1, r23
    1a5e:	18 06       	cpc	r1, r24
    1a60:	99 1f       	adc	r25, r25
    1a62:	f1 cf       	rjmp	.-30     	; 0x1a46 <__fp_splitA+0xc>
    1a64:	86 95       	lsr	r24
    1a66:	71 05       	cpc	r23, r1
    1a68:	61 05       	cpc	r22, r1
    1a6a:	08 94       	sec
    1a6c:	08 95       	ret

00001a6e <__fp_zero>:
    1a6e:	e8 94       	clt

00001a70 <__fp_szero>:
    1a70:	bb 27       	eor	r27, r27
    1a72:	66 27       	eor	r22, r22
    1a74:	77 27       	eor	r23, r23
    1a76:	cb 01       	movw	r24, r22
    1a78:	97 f9       	bld	r25, 7
    1a7a:	08 95       	ret

00001a7c <__gesf2>:
    1a7c:	8a df       	rcall	.-236    	; 0x1992 <__fp_cmp>
    1a7e:	08 f4       	brcc	.+2      	; 0x1a82 <__gesf2+0x6>
    1a80:	8f ef       	ldi	r24, 0xFF	; 255
    1a82:	08 95       	ret

00001a84 <pow>:
    1a84:	fa 01       	movw	r30, r20
    1a86:	ee 0f       	add	r30, r30
    1a88:	ff 1f       	adc	r31, r31
    1a8a:	30 96       	adiw	r30, 0x00	; 0
    1a8c:	21 05       	cpc	r18, r1
    1a8e:	31 05       	cpc	r19, r1
    1a90:	99 f1       	breq	.+102    	; 0x1af8 <pow+0x74>
    1a92:	61 15       	cp	r22, r1
    1a94:	71 05       	cpc	r23, r1
    1a96:	61 f4       	brne	.+24     	; 0x1ab0 <pow+0x2c>
    1a98:	80 38       	cpi	r24, 0x80	; 128
    1a9a:	bf e3       	ldi	r27, 0x3F	; 63
    1a9c:	9b 07       	cpc	r25, r27
    1a9e:	49 f1       	breq	.+82     	; 0x1af2 <pow+0x6e>
    1aa0:	68 94       	set
    1aa2:	90 38       	cpi	r25, 0x80	; 128
    1aa4:	81 05       	cpc	r24, r1
    1aa6:	61 f0       	breq	.+24     	; 0x1ac0 <pow+0x3c>
    1aa8:	80 38       	cpi	r24, 0x80	; 128
    1aaa:	bf ef       	ldi	r27, 0xFF	; 255
    1aac:	9b 07       	cpc	r25, r27
    1aae:	41 f0       	breq	.+16     	; 0x1ac0 <pow+0x3c>
    1ab0:	99 23       	and	r25, r25
    1ab2:	42 f5       	brpl	.+80     	; 0x1b04 <pow+0x80>
    1ab4:	ff 3f       	cpi	r31, 0xFF	; 255
    1ab6:	e1 05       	cpc	r30, r1
    1ab8:	31 05       	cpc	r19, r1
    1aba:	21 05       	cpc	r18, r1
    1abc:	11 f1       	breq	.+68     	; 0x1b02 <pow+0x7e>
    1abe:	e8 94       	clt
    1ac0:	08 94       	sec
    1ac2:	e7 95       	ror	r30
    1ac4:	d9 01       	movw	r26, r18
    1ac6:	aa 23       	and	r26, r26
    1ac8:	29 f4       	brne	.+10     	; 0x1ad4 <pow+0x50>
    1aca:	ab 2f       	mov	r26, r27
    1acc:	be 2f       	mov	r27, r30
    1ace:	f8 5f       	subi	r31, 0xF8	; 248
    1ad0:	d0 f3       	brcs	.-12     	; 0x1ac6 <pow+0x42>
    1ad2:	10 c0       	rjmp	.+32     	; 0x1af4 <pow+0x70>
    1ad4:	ff 5f       	subi	r31, 0xFF	; 255
    1ad6:	70 f4       	brcc	.+28     	; 0x1af4 <pow+0x70>
    1ad8:	a6 95       	lsr	r26
    1ada:	e0 f7       	brcc	.-8      	; 0x1ad4 <pow+0x50>
    1adc:	f7 39       	cpi	r31, 0x97	; 151
    1ade:	50 f0       	brcs	.+20     	; 0x1af4 <pow+0x70>
    1ae0:	19 f0       	breq	.+6      	; 0x1ae8 <pow+0x64>
    1ae2:	ff 3a       	cpi	r31, 0xAF	; 175
    1ae4:	38 f4       	brcc	.+14     	; 0x1af4 <pow+0x70>
    1ae6:	9f 77       	andi	r25, 0x7F	; 127
    1ae8:	9f 93       	push	r25
    1aea:	0c d0       	rcall	.+24     	; 0x1b04 <pow+0x80>
    1aec:	0f 90       	pop	r0
    1aee:	07 fc       	sbrc	r0, 7
    1af0:	90 58       	subi	r25, 0x80	; 128
    1af2:	08 95       	ret
    1af4:	3e f0       	brts	.+14     	; 0x1b04 <pow+0x80>
    1af6:	77 cf       	rjmp	.-274    	; 0x19e6 <__fp_nan>
    1af8:	60 e0       	ldi	r22, 0x00	; 0
    1afa:	70 e0       	ldi	r23, 0x00	; 0
    1afc:	80 e8       	ldi	r24, 0x80	; 128
    1afe:	9f e3       	ldi	r25, 0x3F	; 63
    1b00:	08 95       	ret
    1b02:	4f e7       	ldi	r20, 0x7F	; 127
    1b04:	9f 77       	andi	r25, 0x7F	; 127
    1b06:	5f 93       	push	r21
    1b08:	4f 93       	push	r20
    1b0a:	3f 93       	push	r19
    1b0c:	2f 93       	push	r18
    1b0e:	9e d0       	rcall	.+316    	; 0x1c4c <log>
    1b10:	2f 91       	pop	r18
    1b12:	3f 91       	pop	r19
    1b14:	4f 91       	pop	r20
    1b16:	5f 91       	pop	r21
    1b18:	0c d1       	rcall	.+536    	; 0x1d32 <__mulsf3>
    1b1a:	05 c0       	rjmp	.+10     	; 0x1b26 <exp>
    1b1c:	19 f4       	brne	.+6      	; 0x1b24 <pow+0xa0>
    1b1e:	0e f0       	brts	.+2      	; 0x1b22 <pow+0x9e>
    1b20:	5c cf       	rjmp	.-328    	; 0x19da <__fp_inf>
    1b22:	a5 cf       	rjmp	.-182    	; 0x1a6e <__fp_zero>
    1b24:	60 cf       	rjmp	.-320    	; 0x19e6 <__fp_nan>

00001b26 <exp>:
    1b26:	89 df       	rcall	.-238    	; 0x1a3a <__fp_splitA>
    1b28:	c8 f3       	brcs	.-14     	; 0x1b1c <pow+0x98>
    1b2a:	96 38       	cpi	r25, 0x86	; 134
    1b2c:	c0 f7       	brcc	.-16     	; 0x1b1e <pow+0x9a>
    1b2e:	07 f8       	bld	r0, 7
    1b30:	0f 92       	push	r0
    1b32:	e8 94       	clt
    1b34:	2b e3       	ldi	r18, 0x3B	; 59
    1b36:	3a ea       	ldi	r19, 0xAA	; 170
    1b38:	48 eb       	ldi	r20, 0xB8	; 184
    1b3a:	5f e7       	ldi	r21, 0x7F	; 127
    1b3c:	08 d1       	rcall	.+528    	; 0x1d4e <__mulsf3_pse>
    1b3e:	0f 92       	push	r0
    1b40:	0f 92       	push	r0
    1b42:	0f 92       	push	r0
    1b44:	4d b7       	in	r20, 0x3d	; 61
    1b46:	5e b7       	in	r21, 0x3e	; 62
    1b48:	0f 92       	push	r0
    1b4a:	c0 d0       	rcall	.+384    	; 0x1ccc <modf>
    1b4c:	e0 e8       	ldi	r30, 0x80	; 128
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	16 d0       	rcall	.+44     	; 0x1b7e <__fp_powser>
    1b52:	4f 91       	pop	r20
    1b54:	5f 91       	pop	r21
    1b56:	ef 91       	pop	r30
    1b58:	ff 91       	pop	r31
    1b5a:	e5 95       	asr	r30
    1b5c:	ee 1f       	adc	r30, r30
    1b5e:	ff 1f       	adc	r31, r31
    1b60:	49 f0       	breq	.+18     	; 0x1b74 <exp+0x4e>
    1b62:	fe 57       	subi	r31, 0x7E	; 126
    1b64:	e0 68       	ori	r30, 0x80	; 128
    1b66:	44 27       	eor	r20, r20
    1b68:	ee 0f       	add	r30, r30
    1b6a:	44 1f       	adc	r20, r20
    1b6c:	fa 95       	dec	r31
    1b6e:	e1 f7       	brne	.-8      	; 0x1b68 <exp+0x42>
    1b70:	41 95       	neg	r20
    1b72:	55 0b       	sbc	r21, r21
    1b74:	32 d0       	rcall	.+100    	; 0x1bda <ldexp>
    1b76:	0f 90       	pop	r0
    1b78:	07 fe       	sbrs	r0, 7
    1b7a:	26 c0       	rjmp	.+76     	; 0x1bc8 <inverse>
    1b7c:	08 95       	ret

00001b7e <__fp_powser>:
    1b7e:	df 93       	push	r29
    1b80:	cf 93       	push	r28
    1b82:	1f 93       	push	r17
    1b84:	0f 93       	push	r16
    1b86:	ff 92       	push	r15
    1b88:	ef 92       	push	r14
    1b8a:	df 92       	push	r13
    1b8c:	7b 01       	movw	r14, r22
    1b8e:	8c 01       	movw	r16, r24
    1b90:	68 94       	set
    1b92:	05 c0       	rjmp	.+10     	; 0x1b9e <__fp_powser+0x20>
    1b94:	da 2e       	mov	r13, r26
    1b96:	ef 01       	movw	r28, r30
    1b98:	d8 d0       	rcall	.+432    	; 0x1d4a <__mulsf3x>
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	e8 94       	clt
    1b9e:	a5 91       	lpm	r26, Z+
    1ba0:	25 91       	lpm	r18, Z+
    1ba2:	35 91       	lpm	r19, Z+
    1ba4:	45 91       	lpm	r20, Z+
    1ba6:	55 91       	lpm	r21, Z+
    1ba8:	ae f3       	brts	.-22     	; 0x1b94 <__fp_powser+0x16>
    1baa:	ef 01       	movw	r28, r30
    1bac:	37 d1       	rcall	.+622    	; 0x1e1c <__addsf3x>
    1bae:	fe 01       	movw	r30, r28
    1bb0:	97 01       	movw	r18, r14
    1bb2:	a8 01       	movw	r20, r16
    1bb4:	da 94       	dec	r13
    1bb6:	79 f7       	brne	.-34     	; 0x1b96 <__fp_powser+0x18>
    1bb8:	df 90       	pop	r13
    1bba:	ef 90       	pop	r14
    1bbc:	ff 90       	pop	r15
    1bbe:	0f 91       	pop	r16
    1bc0:	1f 91       	pop	r17
    1bc2:	cf 91       	pop	r28
    1bc4:	df 91       	pop	r29
    1bc6:	08 95       	ret

00001bc8 <inverse>:
    1bc8:	9b 01       	movw	r18, r22
    1bca:	ac 01       	movw	r20, r24
    1bcc:	60 e0       	ldi	r22, 0x00	; 0
    1bce:	70 e0       	ldi	r23, 0x00	; 0
    1bd0:	80 e8       	ldi	r24, 0x80	; 128
    1bd2:	9f e3       	ldi	r25, 0x3F	; 63
    1bd4:	cf cd       	rjmp	.-1122   	; 0x1774 <__divsf3>
    1bd6:	01 cf       	rjmp	.-510    	; 0x19da <__fp_inf>
    1bd8:	74 c1       	rjmp	.+744    	; 0x1ec2 <__fp_mpack>

00001bda <ldexp>:
    1bda:	2f df       	rcall	.-418    	; 0x1a3a <__fp_splitA>
    1bdc:	e8 f3       	brcs	.-6      	; 0x1bd8 <inverse+0x10>
    1bde:	99 23       	and	r25, r25
    1be0:	d9 f3       	breq	.-10     	; 0x1bd8 <inverse+0x10>
    1be2:	94 0f       	add	r25, r20
    1be4:	51 1d       	adc	r21, r1
    1be6:	bb f3       	brvs	.-18     	; 0x1bd6 <inverse+0xe>
    1be8:	91 50       	subi	r25, 0x01	; 1
    1bea:	50 40       	sbci	r21, 0x00	; 0
    1bec:	94 f0       	brlt	.+36     	; 0x1c12 <ldexp+0x38>
    1bee:	59 f0       	breq	.+22     	; 0x1c06 <ldexp+0x2c>
    1bf0:	88 23       	and	r24, r24
    1bf2:	32 f0       	brmi	.+12     	; 0x1c00 <ldexp+0x26>
    1bf4:	66 0f       	add	r22, r22
    1bf6:	77 1f       	adc	r23, r23
    1bf8:	88 1f       	adc	r24, r24
    1bfa:	91 50       	subi	r25, 0x01	; 1
    1bfc:	50 40       	sbci	r21, 0x00	; 0
    1bfe:	c1 f7       	brne	.-16     	; 0x1bf0 <ldexp+0x16>
    1c00:	9e 3f       	cpi	r25, 0xFE	; 254
    1c02:	51 05       	cpc	r21, r1
    1c04:	44 f7       	brge	.-48     	; 0x1bd6 <inverse+0xe>
    1c06:	88 0f       	add	r24, r24
    1c08:	91 1d       	adc	r25, r1
    1c0a:	96 95       	lsr	r25
    1c0c:	87 95       	ror	r24
    1c0e:	97 f9       	bld	r25, 7
    1c10:	08 95       	ret
    1c12:	5f 3f       	cpi	r21, 0xFF	; 255
    1c14:	ac f0       	brlt	.+42     	; 0x1c40 <ldexp+0x66>
    1c16:	98 3e       	cpi	r25, 0xE8	; 232
    1c18:	9c f0       	brlt	.+38     	; 0x1c40 <ldexp+0x66>
    1c1a:	bb 27       	eor	r27, r27
    1c1c:	86 95       	lsr	r24
    1c1e:	77 95       	ror	r23
    1c20:	67 95       	ror	r22
    1c22:	b7 95       	ror	r27
    1c24:	08 f4       	brcc	.+2      	; 0x1c28 <ldexp+0x4e>
    1c26:	b1 60       	ori	r27, 0x01	; 1
    1c28:	93 95       	inc	r25
    1c2a:	c1 f7       	brne	.-16     	; 0x1c1c <ldexp+0x42>
    1c2c:	bb 0f       	add	r27, r27
    1c2e:	58 f7       	brcc	.-42     	; 0x1c06 <ldexp+0x2c>
    1c30:	11 f4       	brne	.+4      	; 0x1c36 <ldexp+0x5c>
    1c32:	60 ff       	sbrs	r22, 0
    1c34:	e8 cf       	rjmp	.-48     	; 0x1c06 <ldexp+0x2c>
    1c36:	6f 5f       	subi	r22, 0xFF	; 255
    1c38:	7f 4f       	sbci	r23, 0xFF	; 255
    1c3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c3e:	e3 cf       	rjmp	.-58     	; 0x1c06 <ldexp+0x2c>
    1c40:	17 cf       	rjmp	.-466    	; 0x1a70 <__fp_szero>
    1c42:	0e f0       	brts	.+2      	; 0x1c46 <ldexp+0x6c>
    1c44:	3e c1       	rjmp	.+636    	; 0x1ec2 <__fp_mpack>
    1c46:	cf ce       	rjmp	.-610    	; 0x19e6 <__fp_nan>
    1c48:	68 94       	set
    1c4a:	c7 ce       	rjmp	.-626    	; 0x19da <__fp_inf>

00001c4c <log>:
    1c4c:	f6 de       	rcall	.-532    	; 0x1a3a <__fp_splitA>
    1c4e:	c8 f3       	brcs	.-14     	; 0x1c42 <ldexp+0x68>
    1c50:	99 23       	and	r25, r25
    1c52:	d1 f3       	breq	.-12     	; 0x1c48 <ldexp+0x6e>
    1c54:	c6 f3       	brts	.-16     	; 0x1c46 <ldexp+0x6c>
    1c56:	df 93       	push	r29
    1c58:	cf 93       	push	r28
    1c5a:	1f 93       	push	r17
    1c5c:	0f 93       	push	r16
    1c5e:	ff 92       	push	r15
    1c60:	c9 2f       	mov	r28, r25
    1c62:	dd 27       	eor	r29, r29
    1c64:	88 23       	and	r24, r24
    1c66:	2a f0       	brmi	.+10     	; 0x1c72 <log+0x26>
    1c68:	21 97       	sbiw	r28, 0x01	; 1
    1c6a:	66 0f       	add	r22, r22
    1c6c:	77 1f       	adc	r23, r23
    1c6e:	88 1f       	adc	r24, r24
    1c70:	da f7       	brpl	.-10     	; 0x1c68 <log+0x1c>
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	40 e8       	ldi	r20, 0x80	; 128
    1c78:	5f eb       	ldi	r21, 0xBF	; 191
    1c7a:	9f e3       	ldi	r25, 0x3F	; 63
    1c7c:	88 39       	cpi	r24, 0x98	; 152
    1c7e:	20 f0       	brcs	.+8      	; 0x1c88 <log+0x3c>
    1c80:	80 3e       	cpi	r24, 0xE0	; 224
    1c82:	30 f0       	brcs	.+12     	; 0x1c90 <log+0x44>
    1c84:	21 96       	adiw	r28, 0x01	; 1
    1c86:	8f 77       	andi	r24, 0x7F	; 127
    1c88:	b8 d0       	rcall	.+368    	; 0x1dfa <__addsf3>
    1c8a:	e8 ea       	ldi	r30, 0xA8	; 168
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	03 c0       	rjmp	.+6      	; 0x1c96 <log+0x4a>
    1c90:	b4 d0       	rcall	.+360    	; 0x1dfa <__addsf3>
    1c92:	e5 ed       	ldi	r30, 0xD5	; 213
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	73 df       	rcall	.-282    	; 0x1b7e <__fp_powser>
    1c98:	8b 01       	movw	r16, r22
    1c9a:	be 01       	movw	r22, r28
    1c9c:	ec 01       	movw	r28, r24
    1c9e:	fb 2e       	mov	r15, r27
    1ca0:	6f 57       	subi	r22, 0x7F	; 127
    1ca2:	71 09       	sbc	r23, r1
    1ca4:	75 95       	asr	r23
    1ca6:	77 1f       	adc	r23, r23
    1ca8:	88 0b       	sbc	r24, r24
    1caa:	99 0b       	sbc	r25, r25
    1cac:	f9 dd       	rcall	.-1038   	; 0x18a0 <__floatsisf>
    1cae:	28 e1       	ldi	r18, 0x18	; 24
    1cb0:	32 e7       	ldi	r19, 0x72	; 114
    1cb2:	41 e3       	ldi	r20, 0x31	; 49
    1cb4:	5f e3       	ldi	r21, 0x3F	; 63
    1cb6:	49 d0       	rcall	.+146    	; 0x1d4a <__mulsf3x>
    1cb8:	af 2d       	mov	r26, r15
    1cba:	98 01       	movw	r18, r16
    1cbc:	ae 01       	movw	r20, r28
    1cbe:	ff 90       	pop	r15
    1cc0:	0f 91       	pop	r16
    1cc2:	1f 91       	pop	r17
    1cc4:	cf 91       	pop	r28
    1cc6:	df 91       	pop	r29
    1cc8:	a9 d0       	rcall	.+338    	; 0x1e1c <__addsf3x>
    1cca:	9e ce       	rjmp	.-708    	; 0x1a08 <__fp_round>

00001ccc <modf>:
    1ccc:	fa 01       	movw	r30, r20
    1cce:	dc 01       	movw	r26, r24
    1cd0:	aa 0f       	add	r26, r26
    1cd2:	bb 1f       	adc	r27, r27
    1cd4:	9b 01       	movw	r18, r22
    1cd6:	ac 01       	movw	r20, r24
    1cd8:	bf 57       	subi	r27, 0x7F	; 127
    1cda:	28 f4       	brcc	.+10     	; 0x1ce6 <modf+0x1a>
    1cdc:	22 27       	eor	r18, r18
    1cde:	33 27       	eor	r19, r19
    1ce0:	44 27       	eor	r20, r20
    1ce2:	50 78       	andi	r21, 0x80	; 128
    1ce4:	1f c0       	rjmp	.+62     	; 0x1d24 <modf+0x58>
    1ce6:	b7 51       	subi	r27, 0x17	; 23
    1ce8:	88 f4       	brcc	.+34     	; 0x1d0c <modf+0x40>
    1cea:	ab 2f       	mov	r26, r27
    1cec:	00 24       	eor	r0, r0
    1cee:	46 95       	lsr	r20
    1cf0:	37 95       	ror	r19
    1cf2:	27 95       	ror	r18
    1cf4:	01 1c       	adc	r0, r1
    1cf6:	a3 95       	inc	r26
    1cf8:	d2 f3       	brmi	.-12     	; 0x1cee <modf+0x22>
    1cfa:	00 20       	and	r0, r0
    1cfc:	69 f0       	breq	.+26     	; 0x1d18 <modf+0x4c>
    1cfe:	22 0f       	add	r18, r18
    1d00:	33 1f       	adc	r19, r19
    1d02:	44 1f       	adc	r20, r20
    1d04:	b3 95       	inc	r27
    1d06:	da f3       	brmi	.-10     	; 0x1cfe <modf+0x32>
    1d08:	0d d0       	rcall	.+26     	; 0x1d24 <modf+0x58>
    1d0a:	76 c0       	rjmp	.+236    	; 0x1df8 <__subsf3>
    1d0c:	61 30       	cpi	r22, 0x01	; 1
    1d0e:	71 05       	cpc	r23, r1
    1d10:	a0 e8       	ldi	r26, 0x80	; 128
    1d12:	8a 07       	cpc	r24, r26
    1d14:	b9 46       	sbci	r27, 0x69	; 105
    1d16:	30 f4       	brcc	.+12     	; 0x1d24 <modf+0x58>
    1d18:	9b 01       	movw	r18, r22
    1d1a:	ac 01       	movw	r20, r24
    1d1c:	66 27       	eor	r22, r22
    1d1e:	77 27       	eor	r23, r23
    1d20:	88 27       	eor	r24, r24
    1d22:	90 78       	andi	r25, 0x80	; 128
    1d24:	30 96       	adiw	r30, 0x00	; 0
    1d26:	21 f0       	breq	.+8      	; 0x1d30 <modf+0x64>
    1d28:	20 83       	st	Z, r18
    1d2a:	31 83       	std	Z+1, r19	; 0x01
    1d2c:	42 83       	std	Z+2, r20	; 0x02
    1d2e:	53 83       	std	Z+3, r21	; 0x03
    1d30:	08 95       	ret

00001d32 <__mulsf3>:
    1d32:	0b d0       	rcall	.+22     	; 0x1d4a <__mulsf3x>
    1d34:	69 ce       	rjmp	.-814    	; 0x1a08 <__fp_round>
    1d36:	5a de       	rcall	.-844    	; 0x19ec <__fp_pscA>
    1d38:	28 f0       	brcs	.+10     	; 0x1d44 <__mulsf3+0x12>
    1d3a:	5f de       	rcall	.-834    	; 0x19fa <__fp_pscB>
    1d3c:	18 f0       	brcs	.+6      	; 0x1d44 <__mulsf3+0x12>
    1d3e:	95 23       	and	r25, r21
    1d40:	09 f0       	breq	.+2      	; 0x1d44 <__mulsf3+0x12>
    1d42:	4b ce       	rjmp	.-874    	; 0x19da <__fp_inf>
    1d44:	50 ce       	rjmp	.-864    	; 0x19e6 <__fp_nan>
    1d46:	11 24       	eor	r1, r1
    1d48:	93 ce       	rjmp	.-730    	; 0x1a70 <__fp_szero>

00001d4a <__mulsf3x>:
    1d4a:	6f de       	rcall	.-802    	; 0x1a2a <__fp_split3>
    1d4c:	a0 f3       	brcs	.-24     	; 0x1d36 <__mulsf3+0x4>

00001d4e <__mulsf3_pse>:
    1d4e:	95 9f       	mul	r25, r21
    1d50:	d1 f3       	breq	.-12     	; 0x1d46 <__mulsf3+0x14>
    1d52:	95 0f       	add	r25, r21
    1d54:	50 e0       	ldi	r21, 0x00	; 0
    1d56:	55 1f       	adc	r21, r21
    1d58:	62 9f       	mul	r22, r18
    1d5a:	f0 01       	movw	r30, r0
    1d5c:	72 9f       	mul	r23, r18
    1d5e:	bb 27       	eor	r27, r27
    1d60:	f0 0d       	add	r31, r0
    1d62:	b1 1d       	adc	r27, r1
    1d64:	63 9f       	mul	r22, r19
    1d66:	aa 27       	eor	r26, r26
    1d68:	f0 0d       	add	r31, r0
    1d6a:	b1 1d       	adc	r27, r1
    1d6c:	aa 1f       	adc	r26, r26
    1d6e:	64 9f       	mul	r22, r20
    1d70:	66 27       	eor	r22, r22
    1d72:	b0 0d       	add	r27, r0
    1d74:	a1 1d       	adc	r26, r1
    1d76:	66 1f       	adc	r22, r22
    1d78:	82 9f       	mul	r24, r18
    1d7a:	22 27       	eor	r18, r18
    1d7c:	b0 0d       	add	r27, r0
    1d7e:	a1 1d       	adc	r26, r1
    1d80:	62 1f       	adc	r22, r18
    1d82:	73 9f       	mul	r23, r19
    1d84:	b0 0d       	add	r27, r0
    1d86:	a1 1d       	adc	r26, r1
    1d88:	62 1f       	adc	r22, r18
    1d8a:	83 9f       	mul	r24, r19
    1d8c:	a0 0d       	add	r26, r0
    1d8e:	61 1d       	adc	r22, r1
    1d90:	22 1f       	adc	r18, r18
    1d92:	74 9f       	mul	r23, r20
    1d94:	33 27       	eor	r19, r19
    1d96:	a0 0d       	add	r26, r0
    1d98:	61 1d       	adc	r22, r1
    1d9a:	23 1f       	adc	r18, r19
    1d9c:	84 9f       	mul	r24, r20
    1d9e:	60 0d       	add	r22, r0
    1da0:	21 1d       	adc	r18, r1
    1da2:	82 2f       	mov	r24, r18
    1da4:	76 2f       	mov	r23, r22
    1da6:	6a 2f       	mov	r22, r26
    1da8:	11 24       	eor	r1, r1
    1daa:	9f 57       	subi	r25, 0x7F	; 127
    1dac:	50 40       	sbci	r21, 0x00	; 0
    1dae:	8a f0       	brmi	.+34     	; 0x1dd2 <__mulsf3_pse+0x84>
    1db0:	e1 f0       	breq	.+56     	; 0x1dea <__mulsf3_pse+0x9c>
    1db2:	88 23       	and	r24, r24
    1db4:	4a f0       	brmi	.+18     	; 0x1dc8 <__mulsf3_pse+0x7a>
    1db6:	ee 0f       	add	r30, r30
    1db8:	ff 1f       	adc	r31, r31
    1dba:	bb 1f       	adc	r27, r27
    1dbc:	66 1f       	adc	r22, r22
    1dbe:	77 1f       	adc	r23, r23
    1dc0:	88 1f       	adc	r24, r24
    1dc2:	91 50       	subi	r25, 0x01	; 1
    1dc4:	50 40       	sbci	r21, 0x00	; 0
    1dc6:	a9 f7       	brne	.-22     	; 0x1db2 <__mulsf3_pse+0x64>
    1dc8:	9e 3f       	cpi	r25, 0xFE	; 254
    1dca:	51 05       	cpc	r21, r1
    1dcc:	70 f0       	brcs	.+28     	; 0x1dea <__mulsf3_pse+0x9c>
    1dce:	05 ce       	rjmp	.-1014   	; 0x19da <__fp_inf>
    1dd0:	4f ce       	rjmp	.-866    	; 0x1a70 <__fp_szero>
    1dd2:	5f 3f       	cpi	r21, 0xFF	; 255
    1dd4:	ec f3       	brlt	.-6      	; 0x1dd0 <__mulsf3_pse+0x82>
    1dd6:	98 3e       	cpi	r25, 0xE8	; 232
    1dd8:	dc f3       	brlt	.-10     	; 0x1dd0 <__mulsf3_pse+0x82>
    1dda:	86 95       	lsr	r24
    1ddc:	77 95       	ror	r23
    1dde:	67 95       	ror	r22
    1de0:	b7 95       	ror	r27
    1de2:	f7 95       	ror	r31
    1de4:	e7 95       	ror	r30
    1de6:	9f 5f       	subi	r25, 0xFF	; 255
    1de8:	c1 f7       	brne	.-16     	; 0x1dda <__mulsf3_pse+0x8c>
    1dea:	fe 2b       	or	r31, r30
    1dec:	88 0f       	add	r24, r24
    1dee:	91 1d       	adc	r25, r1
    1df0:	96 95       	lsr	r25
    1df2:	87 95       	ror	r24
    1df4:	97 f9       	bld	r25, 7
    1df6:	08 95       	ret

00001df8 <__subsf3>:
    1df8:	50 58       	subi	r21, 0x80	; 128

00001dfa <__addsf3>:
    1dfa:	bb 27       	eor	r27, r27
    1dfc:	aa 27       	eor	r26, r26
    1dfe:	0e d0       	rcall	.+28     	; 0x1e1c <__addsf3x>
    1e00:	03 ce       	rjmp	.-1018   	; 0x1a08 <__fp_round>
    1e02:	f4 dd       	rcall	.-1048   	; 0x19ec <__fp_pscA>
    1e04:	30 f0       	brcs	.+12     	; 0x1e12 <__addsf3+0x18>
    1e06:	f9 dd       	rcall	.-1038   	; 0x19fa <__fp_pscB>
    1e08:	20 f0       	brcs	.+8      	; 0x1e12 <__addsf3+0x18>
    1e0a:	31 f4       	brne	.+12     	; 0x1e18 <__addsf3+0x1e>
    1e0c:	9f 3f       	cpi	r25, 0xFF	; 255
    1e0e:	11 f4       	brne	.+4      	; 0x1e14 <__addsf3+0x1a>
    1e10:	1e f4       	brtc	.+6      	; 0x1e18 <__addsf3+0x1e>
    1e12:	e9 cd       	rjmp	.-1070   	; 0x19e6 <__fp_nan>
    1e14:	0e f4       	brtc	.+2      	; 0x1e18 <__addsf3+0x1e>
    1e16:	e0 95       	com	r30
    1e18:	e7 fb       	bst	r30, 7
    1e1a:	df cd       	rjmp	.-1090   	; 0x19da <__fp_inf>

00001e1c <__addsf3x>:
    1e1c:	e9 2f       	mov	r30, r25
    1e1e:	05 de       	rcall	.-1014   	; 0x1a2a <__fp_split3>
    1e20:	80 f3       	brcs	.-32     	; 0x1e02 <__addsf3+0x8>
    1e22:	ba 17       	cp	r27, r26
    1e24:	62 07       	cpc	r22, r18
    1e26:	73 07       	cpc	r23, r19
    1e28:	84 07       	cpc	r24, r20
    1e2a:	95 07       	cpc	r25, r21
    1e2c:	18 f0       	brcs	.+6      	; 0x1e34 <__addsf3x+0x18>
    1e2e:	71 f4       	brne	.+28     	; 0x1e4c <__addsf3x+0x30>
    1e30:	9e f5       	brtc	.+102    	; 0x1e98 <__addsf3x+0x7c>
    1e32:	1d ce       	rjmp	.-966    	; 0x1a6e <__fp_zero>
    1e34:	0e f4       	brtc	.+2      	; 0x1e38 <__addsf3x+0x1c>
    1e36:	e0 95       	com	r30
    1e38:	0b 2e       	mov	r0, r27
    1e3a:	ba 2f       	mov	r27, r26
    1e3c:	a0 2d       	mov	r26, r0
    1e3e:	0b 01       	movw	r0, r22
    1e40:	b9 01       	movw	r22, r18
    1e42:	90 01       	movw	r18, r0
    1e44:	0c 01       	movw	r0, r24
    1e46:	ca 01       	movw	r24, r20
    1e48:	a0 01       	movw	r20, r0
    1e4a:	11 24       	eor	r1, r1
    1e4c:	ff 27       	eor	r31, r31
    1e4e:	59 1b       	sub	r21, r25
    1e50:	99 f0       	breq	.+38     	; 0x1e78 <__addsf3x+0x5c>
    1e52:	59 3f       	cpi	r21, 0xF9	; 249
    1e54:	50 f4       	brcc	.+20     	; 0x1e6a <__addsf3x+0x4e>
    1e56:	50 3e       	cpi	r21, 0xE0	; 224
    1e58:	68 f1       	brcs	.+90     	; 0x1eb4 <__addsf3x+0x98>
    1e5a:	1a 16       	cp	r1, r26
    1e5c:	f0 40       	sbci	r31, 0x00	; 0
    1e5e:	a2 2f       	mov	r26, r18
    1e60:	23 2f       	mov	r18, r19
    1e62:	34 2f       	mov	r19, r20
    1e64:	44 27       	eor	r20, r20
    1e66:	58 5f       	subi	r21, 0xF8	; 248
    1e68:	f3 cf       	rjmp	.-26     	; 0x1e50 <__addsf3x+0x34>
    1e6a:	46 95       	lsr	r20
    1e6c:	37 95       	ror	r19
    1e6e:	27 95       	ror	r18
    1e70:	a7 95       	ror	r26
    1e72:	f0 40       	sbci	r31, 0x00	; 0
    1e74:	53 95       	inc	r21
    1e76:	c9 f7       	brne	.-14     	; 0x1e6a <__addsf3x+0x4e>
    1e78:	7e f4       	brtc	.+30     	; 0x1e98 <__addsf3x+0x7c>
    1e7a:	1f 16       	cp	r1, r31
    1e7c:	ba 0b       	sbc	r27, r26
    1e7e:	62 0b       	sbc	r22, r18
    1e80:	73 0b       	sbc	r23, r19
    1e82:	84 0b       	sbc	r24, r20
    1e84:	ba f0       	brmi	.+46     	; 0x1eb4 <__addsf3x+0x98>
    1e86:	91 50       	subi	r25, 0x01	; 1
    1e88:	a1 f0       	breq	.+40     	; 0x1eb2 <__addsf3x+0x96>
    1e8a:	ff 0f       	add	r31, r31
    1e8c:	bb 1f       	adc	r27, r27
    1e8e:	66 1f       	adc	r22, r22
    1e90:	77 1f       	adc	r23, r23
    1e92:	88 1f       	adc	r24, r24
    1e94:	c2 f7       	brpl	.-16     	; 0x1e86 <__addsf3x+0x6a>
    1e96:	0e c0       	rjmp	.+28     	; 0x1eb4 <__addsf3x+0x98>
    1e98:	ba 0f       	add	r27, r26
    1e9a:	62 1f       	adc	r22, r18
    1e9c:	73 1f       	adc	r23, r19
    1e9e:	84 1f       	adc	r24, r20
    1ea0:	48 f4       	brcc	.+18     	; 0x1eb4 <__addsf3x+0x98>
    1ea2:	87 95       	ror	r24
    1ea4:	77 95       	ror	r23
    1ea6:	67 95       	ror	r22
    1ea8:	b7 95       	ror	r27
    1eaa:	f7 95       	ror	r31
    1eac:	9e 3f       	cpi	r25, 0xFE	; 254
    1eae:	08 f0       	brcs	.+2      	; 0x1eb2 <__addsf3x+0x96>
    1eb0:	b3 cf       	rjmp	.-154    	; 0x1e18 <__addsf3+0x1e>
    1eb2:	93 95       	inc	r25
    1eb4:	88 0f       	add	r24, r24
    1eb6:	08 f0       	brcs	.+2      	; 0x1eba <__addsf3x+0x9e>
    1eb8:	99 27       	eor	r25, r25
    1eba:	ee 0f       	add	r30, r30
    1ebc:	97 95       	ror	r25
    1ebe:	87 95       	ror	r24
    1ec0:	08 95       	ret

00001ec2 <__fp_mpack>:
    1ec2:	9f 3f       	cpi	r25, 0xFF	; 255
    1ec4:	31 f0       	breq	.+12     	; 0x1ed2 <__fp_mpack_finite+0xc>

00001ec6 <__fp_mpack_finite>:
    1ec6:	91 50       	subi	r25, 0x01	; 1
    1ec8:	20 f4       	brcc	.+8      	; 0x1ed2 <__fp_mpack_finite+0xc>
    1eca:	87 95       	ror	r24
    1ecc:	77 95       	ror	r23
    1ece:	67 95       	ror	r22
    1ed0:	b7 95       	ror	r27
    1ed2:	88 0f       	add	r24, r24
    1ed4:	91 1d       	adc	r25, r1
    1ed6:	96 95       	lsr	r25
    1ed8:	87 95       	ror	r24
    1eda:	97 f9       	bld	r25, 7
    1edc:	08 95       	ret

00001ede <__udivmodsi4>:
    1ede:	a1 e2       	ldi	r26, 0x21	; 33
    1ee0:	1a 2e       	mov	r1, r26
    1ee2:	aa 1b       	sub	r26, r26
    1ee4:	bb 1b       	sub	r27, r27
    1ee6:	fd 01       	movw	r30, r26
    1ee8:	0d c0       	rjmp	.+26     	; 0x1f04 <__udivmodsi4_ep>

00001eea <__udivmodsi4_loop>:
    1eea:	aa 1f       	adc	r26, r26
    1eec:	bb 1f       	adc	r27, r27
    1eee:	ee 1f       	adc	r30, r30
    1ef0:	ff 1f       	adc	r31, r31
    1ef2:	a2 17       	cp	r26, r18
    1ef4:	b3 07       	cpc	r27, r19
    1ef6:	e4 07       	cpc	r30, r20
    1ef8:	f5 07       	cpc	r31, r21
    1efa:	20 f0       	brcs	.+8      	; 0x1f04 <__udivmodsi4_ep>
    1efc:	a2 1b       	sub	r26, r18
    1efe:	b3 0b       	sbc	r27, r19
    1f00:	e4 0b       	sbc	r30, r20
    1f02:	f5 0b       	sbc	r31, r21

00001f04 <__udivmodsi4_ep>:
    1f04:	66 1f       	adc	r22, r22
    1f06:	77 1f       	adc	r23, r23
    1f08:	88 1f       	adc	r24, r24
    1f0a:	99 1f       	adc	r25, r25
    1f0c:	1a 94       	dec	r1
    1f0e:	69 f7       	brne	.-38     	; 0x1eea <__udivmodsi4_loop>
    1f10:	60 95       	com	r22
    1f12:	70 95       	com	r23
    1f14:	80 95       	com	r24
    1f16:	90 95       	com	r25
    1f18:	9b 01       	movw	r18, r22
    1f1a:	ac 01       	movw	r20, r24
    1f1c:	bd 01       	movw	r22, r26
    1f1e:	cf 01       	movw	r24, r30
    1f20:	08 95       	ret

00001f22 <__tablejump2__>:
    1f22:	ee 0f       	add	r30, r30
    1f24:	ff 1f       	adc	r31, r31
    1f26:	05 90       	lpm	r0, Z+
    1f28:	f4 91       	lpm	r31, Z
    1f2a:	e0 2d       	mov	r30, r0
    1f2c:	09 94       	ijmp

00001f2e <__muldi3>:
    1f2e:	df 93       	push	r29
    1f30:	cf 93       	push	r28
    1f32:	1f 93       	push	r17
    1f34:	0f 93       	push	r16
    1f36:	9a 9d       	mul	r25, r10
    1f38:	f0 2d       	mov	r31, r0
    1f3a:	21 9f       	mul	r18, r17
    1f3c:	f0 0d       	add	r31, r0
    1f3e:	8b 9d       	mul	r24, r11
    1f40:	f0 0d       	add	r31, r0
    1f42:	8a 9d       	mul	r24, r10
    1f44:	e0 2d       	mov	r30, r0
    1f46:	f1 0d       	add	r31, r1
    1f48:	03 9f       	mul	r16, r19
    1f4a:	f0 0d       	add	r31, r0
    1f4c:	02 9f       	mul	r16, r18
    1f4e:	e0 0d       	add	r30, r0
    1f50:	f1 1d       	adc	r31, r1
    1f52:	4e 9d       	mul	r20, r14
    1f54:	e0 0d       	add	r30, r0
    1f56:	f1 1d       	adc	r31, r1
    1f58:	5e 9d       	mul	r21, r14
    1f5a:	f0 0d       	add	r31, r0
    1f5c:	4f 9d       	mul	r20, r15
    1f5e:	f0 0d       	add	r31, r0
    1f60:	7f 93       	push	r23
    1f62:	6f 93       	push	r22
    1f64:	bf 92       	push	r11
    1f66:	af 92       	push	r10
    1f68:	5f 93       	push	r21
    1f6a:	4f 93       	push	r20
    1f6c:	d5 01       	movw	r26, r10
    1f6e:	8e d0       	rcall	.+284    	; 0x208c <__umulhisi3>
    1f70:	8b 01       	movw	r16, r22
    1f72:	ac 01       	movw	r20, r24
    1f74:	d7 01       	movw	r26, r14
    1f76:	8a d0       	rcall	.+276    	; 0x208c <__umulhisi3>
    1f78:	eb 01       	movw	r28, r22
    1f7a:	e8 0f       	add	r30, r24
    1f7c:	f9 1f       	adc	r31, r25
    1f7e:	d6 01       	movw	r26, r12
    1f80:	1f d0       	rcall	.+62     	; 0x1fc0 <__muldi3_6>
    1f82:	2f 91       	pop	r18
    1f84:	3f 91       	pop	r19
    1f86:	d6 01       	movw	r26, r12
    1f88:	81 d0       	rcall	.+258    	; 0x208c <__umulhisi3>
    1f8a:	c6 0f       	add	r28, r22
    1f8c:	d7 1f       	adc	r29, r23
    1f8e:	e8 1f       	adc	r30, r24
    1f90:	f9 1f       	adc	r31, r25
    1f92:	af 91       	pop	r26
    1f94:	bf 91       	pop	r27
    1f96:	14 d0       	rcall	.+40     	; 0x1fc0 <__muldi3_6>
    1f98:	2f 91       	pop	r18
    1f9a:	3f 91       	pop	r19
    1f9c:	77 d0       	rcall	.+238    	; 0x208c <__umulhisi3>
    1f9e:	c6 0f       	add	r28, r22
    1fa0:	d7 1f       	adc	r29, r23
    1fa2:	e8 1f       	adc	r30, r24
    1fa4:	f9 1f       	adc	r31, r25
    1fa6:	d6 01       	movw	r26, r12
    1fa8:	71 d0       	rcall	.+226    	; 0x208c <__umulhisi3>
    1faa:	e6 0f       	add	r30, r22
    1fac:	f7 1f       	adc	r31, r23
    1fae:	98 01       	movw	r18, r16
    1fb0:	be 01       	movw	r22, r28
    1fb2:	cf 01       	movw	r24, r30
    1fb4:	11 24       	eor	r1, r1
    1fb6:	0f 91       	pop	r16
    1fb8:	1f 91       	pop	r17
    1fba:	cf 91       	pop	r28
    1fbc:	df 91       	pop	r29
    1fbe:	08 95       	ret

00001fc0 <__muldi3_6>:
    1fc0:	65 d0       	rcall	.+202    	; 0x208c <__umulhisi3>
    1fc2:	46 0f       	add	r20, r22
    1fc4:	57 1f       	adc	r21, r23
    1fc6:	c8 1f       	adc	r28, r24
    1fc8:	d9 1f       	adc	r29, r25
    1fca:	08 f4       	brcc	.+2      	; 0x1fce <__muldi3_6+0xe>
    1fcc:	31 96       	adiw	r30, 0x01	; 1
    1fce:	08 95       	ret

00001fd0 <__umoddi3>:
    1fd0:	68 94       	set
    1fd2:	01 c0       	rjmp	.+2      	; 0x1fd6 <__udivdi3_umoddi3>

00001fd4 <__udivdi3>:
    1fd4:	e8 94       	clt

00001fd6 <__udivdi3_umoddi3>:
    1fd6:	8f 92       	push	r8
    1fd8:	9f 92       	push	r9
    1fda:	cf 93       	push	r28
    1fdc:	df 93       	push	r29
    1fde:	05 d0       	rcall	.+10     	; 0x1fea <__udivmod64>
    1fe0:	df 91       	pop	r29
    1fe2:	cf 91       	pop	r28
    1fe4:	9f 90       	pop	r9
    1fe6:	8f 90       	pop	r8
    1fe8:	08 95       	ret

00001fea <__udivmod64>:
    1fea:	88 24       	eor	r8, r8
    1fec:	99 24       	eor	r9, r9
    1fee:	f4 01       	movw	r30, r8
    1ff0:	e4 01       	movw	r28, r8
    1ff2:	b0 e4       	ldi	r27, 0x40	; 64
    1ff4:	9f 93       	push	r25
    1ff6:	aa 27       	eor	r26, r26
    1ff8:	9a 15       	cp	r25, r10
    1ffa:	8b 04       	cpc	r8, r11
    1ffc:	9c 04       	cpc	r9, r12
    1ffe:	ed 05       	cpc	r30, r13
    2000:	fe 05       	cpc	r31, r14
    2002:	cf 05       	cpc	r28, r15
    2004:	d0 07       	cpc	r29, r16
    2006:	a1 07       	cpc	r26, r17
    2008:	98 f4       	brcc	.+38     	; 0x2030 <__udivmod64+0x46>
    200a:	ad 2f       	mov	r26, r29
    200c:	dc 2f       	mov	r29, r28
    200e:	cf 2f       	mov	r28, r31
    2010:	fe 2f       	mov	r31, r30
    2012:	e9 2d       	mov	r30, r9
    2014:	98 2c       	mov	r9, r8
    2016:	89 2e       	mov	r8, r25
    2018:	98 2f       	mov	r25, r24
    201a:	87 2f       	mov	r24, r23
    201c:	76 2f       	mov	r23, r22
    201e:	65 2f       	mov	r22, r21
    2020:	54 2f       	mov	r21, r20
    2022:	43 2f       	mov	r20, r19
    2024:	32 2f       	mov	r19, r18
    2026:	22 27       	eor	r18, r18
    2028:	b8 50       	subi	r27, 0x08	; 8
    202a:	31 f7       	brne	.-52     	; 0x1ff8 <__udivmod64+0xe>
    202c:	bf 91       	pop	r27
    202e:	27 c0       	rjmp	.+78     	; 0x207e <__udivmod64+0x94>
    2030:	1b 2e       	mov	r1, r27
    2032:	bf 91       	pop	r27
    2034:	bb 27       	eor	r27, r27
    2036:	22 0f       	add	r18, r18
    2038:	33 1f       	adc	r19, r19
    203a:	44 1f       	adc	r20, r20
    203c:	55 1f       	adc	r21, r21
    203e:	66 1f       	adc	r22, r22
    2040:	77 1f       	adc	r23, r23
    2042:	88 1f       	adc	r24, r24
    2044:	99 1f       	adc	r25, r25
    2046:	88 1c       	adc	r8, r8
    2048:	99 1c       	adc	r9, r9
    204a:	ee 1f       	adc	r30, r30
    204c:	ff 1f       	adc	r31, r31
    204e:	cc 1f       	adc	r28, r28
    2050:	dd 1f       	adc	r29, r29
    2052:	aa 1f       	adc	r26, r26
    2054:	bb 1f       	adc	r27, r27
    2056:	8a 14       	cp	r8, r10
    2058:	9b 04       	cpc	r9, r11
    205a:	ec 05       	cpc	r30, r12
    205c:	fd 05       	cpc	r31, r13
    205e:	ce 05       	cpc	r28, r14
    2060:	df 05       	cpc	r29, r15
    2062:	a0 07       	cpc	r26, r16
    2064:	b1 07       	cpc	r27, r17
    2066:	48 f0       	brcs	.+18     	; 0x207a <__udivmod64+0x90>
    2068:	8a 18       	sub	r8, r10
    206a:	9b 08       	sbc	r9, r11
    206c:	ec 09       	sbc	r30, r12
    206e:	fd 09       	sbc	r31, r13
    2070:	ce 09       	sbc	r28, r14
    2072:	df 09       	sbc	r29, r15
    2074:	a0 0b       	sbc	r26, r16
    2076:	b1 0b       	sbc	r27, r17
    2078:	21 60       	ori	r18, 0x01	; 1
    207a:	1a 94       	dec	r1
    207c:	e1 f6       	brne	.-72     	; 0x2036 <__udivmod64+0x4c>
    207e:	2e f4       	brtc	.+10     	; 0x208a <__udivmod64+0xa0>
    2080:	94 01       	movw	r18, r8
    2082:	af 01       	movw	r20, r30
    2084:	be 01       	movw	r22, r28
    2086:	cd 01       	movw	r24, r26
    2088:	00 0c       	add	r0, r0
    208a:	08 95       	ret

0000208c <__umulhisi3>:
    208c:	a2 9f       	mul	r26, r18
    208e:	b0 01       	movw	r22, r0
    2090:	b3 9f       	mul	r27, r19
    2092:	c0 01       	movw	r24, r0
    2094:	a3 9f       	mul	r26, r19
    2096:	70 0d       	add	r23, r0
    2098:	81 1d       	adc	r24, r1
    209a:	11 24       	eor	r1, r1
    209c:	91 1d       	adc	r25, r1
    209e:	b2 9f       	mul	r27, r18
    20a0:	70 0d       	add	r23, r0
    20a2:	81 1d       	adc	r24, r1
    20a4:	11 24       	eor	r1, r1
    20a6:	91 1d       	adc	r25, r1
    20a8:	08 95       	ret

000020aa <atoi>:
    20aa:	fc 01       	movw	r30, r24
    20ac:	88 27       	eor	r24, r24
    20ae:	99 27       	eor	r25, r25
    20b0:	e8 94       	clt
    20b2:	21 91       	ld	r18, Z+
    20b4:	20 32       	cpi	r18, 0x20	; 32
    20b6:	e9 f3       	breq	.-6      	; 0x20b2 <atoi+0x8>
    20b8:	29 30       	cpi	r18, 0x09	; 9
    20ba:	10 f0       	brcs	.+4      	; 0x20c0 <atoi+0x16>
    20bc:	2e 30       	cpi	r18, 0x0E	; 14
    20be:	c8 f3       	brcs	.-14     	; 0x20b2 <atoi+0x8>
    20c0:	2b 32       	cpi	r18, 0x2B	; 43
    20c2:	39 f0       	breq	.+14     	; 0x20d2 <atoi+0x28>
    20c4:	2d 32       	cpi	r18, 0x2D	; 45
    20c6:	31 f4       	brne	.+12     	; 0x20d4 <atoi+0x2a>
    20c8:	68 94       	set
    20ca:	03 c0       	rjmp	.+6      	; 0x20d2 <atoi+0x28>
    20cc:	54 d0       	rcall	.+168    	; 0x2176 <__mulhi_const_10>
    20ce:	82 0f       	add	r24, r18
    20d0:	91 1d       	adc	r25, r1
    20d2:	21 91       	ld	r18, Z+
    20d4:	20 53       	subi	r18, 0x30	; 48
    20d6:	2a 30       	cpi	r18, 0x0A	; 10
    20d8:	c8 f3       	brcs	.-14     	; 0x20cc <atoi+0x22>
    20da:	1e f4       	brtc	.+6      	; 0x20e2 <atoi+0x38>
    20dc:	90 95       	com	r25
    20de:	81 95       	neg	r24
    20e0:	9f 4f       	sbci	r25, 0xFF	; 255
    20e2:	08 95       	ret

000020e4 <memcpy>:
    20e4:	fb 01       	movw	r30, r22
    20e6:	dc 01       	movw	r26, r24
    20e8:	02 c0       	rjmp	.+4      	; 0x20ee <memcpy+0xa>
    20ea:	01 90       	ld	r0, Z+
    20ec:	0d 92       	st	X+, r0
    20ee:	41 50       	subi	r20, 0x01	; 1
    20f0:	50 40       	sbci	r21, 0x00	; 0
    20f2:	d8 f7       	brcc	.-10     	; 0x20ea <memcpy+0x6>
    20f4:	08 95       	ret

000020f6 <strcat>:
    20f6:	fb 01       	movw	r30, r22
    20f8:	dc 01       	movw	r26, r24
    20fa:	0d 90       	ld	r0, X+
    20fc:	00 20       	and	r0, r0
    20fe:	e9 f7       	brne	.-6      	; 0x20fa <strcat+0x4>
    2100:	11 97       	sbiw	r26, 0x01	; 1
    2102:	01 90       	ld	r0, Z+
    2104:	0d 92       	st	X+, r0
    2106:	00 20       	and	r0, r0
    2108:	e1 f7       	brne	.-8      	; 0x2102 <strcat+0xc>
    210a:	08 95       	ret

0000210c <strcpy>:
    210c:	fb 01       	movw	r30, r22
    210e:	dc 01       	movw	r26, r24
    2110:	01 90       	ld	r0, Z+
    2112:	0d 92       	st	X+, r0
    2114:	00 20       	and	r0, r0
    2116:	e1 f7       	brne	.-8      	; 0x2110 <strcpy+0x4>
    2118:	08 95       	ret

0000211a <strstr>:
    211a:	fb 01       	movw	r30, r22
    211c:	51 91       	ld	r21, Z+
    211e:	55 23       	and	r21, r21
    2120:	a9 f0       	breq	.+42     	; 0x214c <strstr+0x32>
    2122:	bf 01       	movw	r22, r30
    2124:	dc 01       	movw	r26, r24
    2126:	4d 91       	ld	r20, X+
    2128:	45 17       	cp	r20, r21
    212a:	41 11       	cpse	r20, r1
    212c:	e1 f7       	brne	.-8      	; 0x2126 <strstr+0xc>
    212e:	59 f4       	brne	.+22     	; 0x2146 <strstr+0x2c>
    2130:	cd 01       	movw	r24, r26
    2132:	01 90       	ld	r0, Z+
    2134:	00 20       	and	r0, r0
    2136:	49 f0       	breq	.+18     	; 0x214a <strstr+0x30>
    2138:	4d 91       	ld	r20, X+
    213a:	40 15       	cp	r20, r0
    213c:	41 11       	cpse	r20, r1
    213e:	c9 f3       	breq	.-14     	; 0x2132 <strstr+0x18>
    2140:	fb 01       	movw	r30, r22
    2142:	41 11       	cpse	r20, r1
    2144:	ef cf       	rjmp	.-34     	; 0x2124 <strstr+0xa>
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	01 97       	sbiw	r24, 0x01	; 1
    214c:	08 95       	ret

0000214e <itoa>:
    214e:	45 32       	cpi	r20, 0x25	; 37
    2150:	51 05       	cpc	r21, r1
    2152:	18 f4       	brcc	.+6      	; 0x215a <itoa+0xc>
    2154:	42 30       	cpi	r20, 0x02	; 2
    2156:	08 f0       	brcs	.+2      	; 0x215a <itoa+0xc>
    2158:	04 c0       	rjmp	.+8      	; 0x2162 <__itoa_ncheck>
    215a:	fb 01       	movw	r30, r22
    215c:	10 82       	st	Z, r1
    215e:	cb 01       	movw	r24, r22
    2160:	08 95       	ret

00002162 <__itoa_ncheck>:
    2162:	bb 27       	eor	r27, r27
    2164:	4a 30       	cpi	r20, 0x0A	; 10
    2166:	31 f4       	brne	.+12     	; 0x2174 <__itoa_ncheck+0x12>
    2168:	99 23       	and	r25, r25
    216a:	22 f4       	brpl	.+8      	; 0x2174 <__itoa_ncheck+0x12>
    216c:	bd e2       	ldi	r27, 0x2D	; 45
    216e:	90 95       	com	r25
    2170:	81 95       	neg	r24
    2172:	9f 4f       	sbci	r25, 0xFF	; 255
    2174:	09 c0       	rjmp	.+18     	; 0x2188 <__utoa_common>

00002176 <__mulhi_const_10>:
    2176:	7a e0       	ldi	r23, 0x0A	; 10
    2178:	97 9f       	mul	r25, r23
    217a:	90 2d       	mov	r25, r0
    217c:	87 9f       	mul	r24, r23
    217e:	80 2d       	mov	r24, r0
    2180:	91 0d       	add	r25, r1
    2182:	11 24       	eor	r1, r1
    2184:	08 95       	ret

00002186 <__utoa_ncheck>:
    2186:	bb 27       	eor	r27, r27

00002188 <__utoa_common>:
    2188:	fb 01       	movw	r30, r22
    218a:	55 27       	eor	r21, r21
    218c:	aa 27       	eor	r26, r26
    218e:	88 0f       	add	r24, r24
    2190:	99 1f       	adc	r25, r25
    2192:	aa 1f       	adc	r26, r26
    2194:	a4 17       	cp	r26, r20
    2196:	10 f0       	brcs	.+4      	; 0x219c <__utoa_common+0x14>
    2198:	a4 1b       	sub	r26, r20
    219a:	83 95       	inc	r24
    219c:	50 51       	subi	r21, 0x10	; 16
    219e:	b9 f7       	brne	.-18     	; 0x218e <__utoa_common+0x6>
    21a0:	a0 5d       	subi	r26, 0xD0	; 208
    21a2:	aa 33       	cpi	r26, 0x3A	; 58
    21a4:	08 f0       	brcs	.+2      	; 0x21a8 <__utoa_common+0x20>
    21a6:	a9 5d       	subi	r26, 0xD9	; 217
    21a8:	a1 93       	st	Z+, r26
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	79 f7       	brne	.-34     	; 0x218c <__utoa_common+0x4>
    21ae:	b1 11       	cpse	r27, r1
    21b0:	b1 93       	st	Z+, r27
    21b2:	11 92       	st	Z+, r1
    21b4:	cb 01       	movw	r24, r22
    21b6:	00 c0       	rjmp	.+0      	; 0x21b8 <strrev>

000021b8 <strrev>:
    21b8:	dc 01       	movw	r26, r24
    21ba:	fc 01       	movw	r30, r24
    21bc:	67 2f       	mov	r22, r23
    21be:	71 91       	ld	r23, Z+
    21c0:	77 23       	and	r23, r23
    21c2:	e1 f7       	brne	.-8      	; 0x21bc <strrev+0x4>
    21c4:	32 97       	sbiw	r30, 0x02	; 2
    21c6:	04 c0       	rjmp	.+8      	; 0x21d0 <strrev+0x18>
    21c8:	7c 91       	ld	r23, X
    21ca:	6d 93       	st	X+, r22
    21cc:	70 83       	st	Z, r23
    21ce:	62 91       	ld	r22, -Z
    21d0:	ae 17       	cp	r26, r30
    21d2:	bf 07       	cpc	r27, r31
    21d4:	c8 f3       	brcs	.-14     	; 0x21c8 <strrev+0x10>
    21d6:	08 95       	ret

000021d8 <_exit>:
    21d8:	f8 94       	cli

000021da <__stop_program>:
    21da:	ff cf       	rjmp	.-2      	; 0x21da <__stop_program>
