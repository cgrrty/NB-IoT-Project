
USART_SIM900.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d0  00802000  000009de  00000a52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000b22  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b54  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00008abc  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000456d  00000000  00000000  00009770  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002aba  00000000  00000000  0000dcdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000364  00000000  00000000  00010798  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000325c7  00000000  00000000  00010afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000016a3  00000000  00000000  000430c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00044766  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000b47f  00000000  00000000  0004486e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	1f c1       	rjmp	.+574    	; 0x244 <__bad_interrupt>
   6:	00 00       	nop
   8:	1d c1       	rjmp	.+570    	; 0x244 <__bad_interrupt>
   a:	00 00       	nop
   c:	1b c1       	rjmp	.+566    	; 0x244 <__bad_interrupt>
   e:	00 00       	nop
  10:	19 c1       	rjmp	.+562    	; 0x244 <__bad_interrupt>
  12:	00 00       	nop
  14:	17 c1       	rjmp	.+558    	; 0x244 <__bad_interrupt>
  16:	00 00       	nop
  18:	15 c1       	rjmp	.+554    	; 0x244 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	13 c1       	rjmp	.+550    	; 0x244 <__bad_interrupt>
  1e:	00 00       	nop
  20:	11 c1       	rjmp	.+546    	; 0x244 <__bad_interrupt>
  22:	00 00       	nop
  24:	0f c1       	rjmp	.+542    	; 0x244 <__bad_interrupt>
  26:	00 00       	nop
  28:	0d c1       	rjmp	.+538    	; 0x244 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	0b c1       	rjmp	.+534    	; 0x244 <__bad_interrupt>
  2e:	00 00       	nop
  30:	09 c1       	rjmp	.+530    	; 0x244 <__bad_interrupt>
  32:	00 00       	nop
  34:	07 c1       	rjmp	.+526    	; 0x244 <__bad_interrupt>
  36:	00 00       	nop
  38:	05 c1       	rjmp	.+522    	; 0x244 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	03 c1       	rjmp	.+518    	; 0x244 <__bad_interrupt>
  3e:	00 00       	nop
  40:	01 c1       	rjmp	.+514    	; 0x244 <__bad_interrupt>
  42:	00 00       	nop
  44:	ff c0       	rjmp	.+510    	; 0x244 <__bad_interrupt>
  46:	00 00       	nop
  48:	fd c0       	rjmp	.+506    	; 0x244 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	fb c0       	rjmp	.+502    	; 0x244 <__bad_interrupt>
  4e:	00 00       	nop
  50:	f9 c0       	rjmp	.+498    	; 0x244 <__bad_interrupt>
  52:	00 00       	nop
  54:	f7 c0       	rjmp	.+494    	; 0x244 <__bad_interrupt>
  56:	00 00       	nop
  58:	f5 c0       	rjmp	.+490    	; 0x244 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	f3 c0       	rjmp	.+486    	; 0x244 <__bad_interrupt>
  5e:	00 00       	nop
  60:	f1 c0       	rjmp	.+482    	; 0x244 <__bad_interrupt>
  62:	00 00       	nop
  64:	ef c0       	rjmp	.+478    	; 0x244 <__bad_interrupt>
  66:	00 00       	nop
  68:	ed c0       	rjmp	.+474    	; 0x244 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	eb c0       	rjmp	.+470    	; 0x244 <__bad_interrupt>
  6e:	00 00       	nop
  70:	e9 c0       	rjmp	.+466    	; 0x244 <__bad_interrupt>
  72:	00 00       	nop
  74:	e7 c0       	rjmp	.+462    	; 0x244 <__bad_interrupt>
  76:	00 00       	nop
  78:	e5 c0       	rjmp	.+458    	; 0x244 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	e3 c0       	rjmp	.+454    	; 0x244 <__bad_interrupt>
  7e:	00 00       	nop
  80:	e1 c0       	rjmp	.+450    	; 0x244 <__bad_interrupt>
  82:	00 00       	nop
  84:	df c0       	rjmp	.+446    	; 0x244 <__bad_interrupt>
  86:	00 00       	nop
  88:	dd c0       	rjmp	.+442    	; 0x244 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	db c0       	rjmp	.+438    	; 0x244 <__bad_interrupt>
  8e:	00 00       	nop
  90:	d9 c0       	rjmp	.+434    	; 0x244 <__bad_interrupt>
  92:	00 00       	nop
  94:	d7 c0       	rjmp	.+430    	; 0x244 <__bad_interrupt>
  96:	00 00       	nop
  98:	d5 c0       	rjmp	.+426    	; 0x244 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	d3 c0       	rjmp	.+422    	; 0x244 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	d1 c0       	rjmp	.+418    	; 0x244 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	cf c0       	rjmp	.+414    	; 0x244 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	cd c0       	rjmp	.+410    	; 0x244 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	cb c0       	rjmp	.+406    	; 0x244 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c9 c0       	rjmp	.+402    	; 0x244 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c7 c0       	rjmp	.+398    	; 0x244 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	c5 c0       	rjmp	.+394    	; 0x244 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	c3 c0       	rjmp	.+390    	; 0x244 <__bad_interrupt>
  be:	00 00       	nop
  c0:	c1 c0       	rjmp	.+386    	; 0x244 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	bf c0       	rjmp	.+382    	; 0x244 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	bd c0       	rjmp	.+378    	; 0x244 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	bb c0       	rjmp	.+374    	; 0x244 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b9 c0       	rjmp	.+370    	; 0x244 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	b7 c0       	rjmp	.+366    	; 0x244 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b5 c0       	rjmp	.+362    	; 0x244 <__bad_interrupt>
  da:	00 00       	nop
  dc:	b3 c0       	rjmp	.+358    	; 0x244 <__bad_interrupt>
  de:	00 00       	nop
  e0:	b1 c0       	rjmp	.+354    	; 0x244 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	af c0       	rjmp	.+350    	; 0x244 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	ad c0       	rjmp	.+346    	; 0x244 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	ab c0       	rjmp	.+342    	; 0x244 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a9 c0       	rjmp	.+338    	; 0x244 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	a7 c0       	rjmp	.+334    	; 0x244 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	a5 c0       	rjmp	.+330    	; 0x244 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	a3 c0       	rjmp	.+326    	; 0x244 <__bad_interrupt>
  fe:	00 00       	nop
 100:	a1 c0       	rjmp	.+322    	; 0x244 <__bad_interrupt>
 102:	00 00       	nop
 104:	9f c0       	rjmp	.+318    	; 0x244 <__bad_interrupt>
 106:	00 00       	nop
 108:	9d c0       	rjmp	.+314    	; 0x244 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	9b c0       	rjmp	.+310    	; 0x244 <__bad_interrupt>
 10e:	00 00       	nop
 110:	99 c0       	rjmp	.+306    	; 0x244 <__bad_interrupt>
 112:	00 00       	nop
 114:	97 c0       	rjmp	.+302    	; 0x244 <__bad_interrupt>
 116:	00 00       	nop
 118:	95 c0       	rjmp	.+298    	; 0x244 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	93 c0       	rjmp	.+294    	; 0x244 <__bad_interrupt>
 11e:	00 00       	nop
 120:	91 c0       	rjmp	.+290    	; 0x244 <__bad_interrupt>
 122:	00 00       	nop
 124:	8f c0       	rjmp	.+286    	; 0x244 <__bad_interrupt>
 126:	00 00       	nop
 128:	8d c0       	rjmp	.+282    	; 0x244 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	8b c0       	rjmp	.+278    	; 0x244 <__bad_interrupt>
 12e:	00 00       	nop
 130:	89 c0       	rjmp	.+274    	; 0x244 <__bad_interrupt>
 132:	00 00       	nop
 134:	87 c0       	rjmp	.+270    	; 0x244 <__bad_interrupt>
 136:	00 00       	nop
 138:	85 c0       	rjmp	.+266    	; 0x244 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	83 c0       	rjmp	.+262    	; 0x244 <__bad_interrupt>
 13e:	00 00       	nop
 140:	81 c0       	rjmp	.+258    	; 0x244 <__bad_interrupt>
 142:	00 00       	nop
 144:	7f c0       	rjmp	.+254    	; 0x244 <__bad_interrupt>
 146:	00 00       	nop
 148:	7d c0       	rjmp	.+250    	; 0x244 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	7b c0       	rjmp	.+246    	; 0x244 <__bad_interrupt>
 14e:	00 00       	nop
 150:	79 c0       	rjmp	.+242    	; 0x244 <__bad_interrupt>
 152:	00 00       	nop
 154:	77 c0       	rjmp	.+238    	; 0x244 <__bad_interrupt>
 156:	00 00       	nop
 158:	75 c0       	rjmp	.+234    	; 0x244 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	73 c0       	rjmp	.+230    	; 0x244 <__bad_interrupt>
 15e:	00 00       	nop
 160:	71 c0       	rjmp	.+226    	; 0x244 <__bad_interrupt>
 162:	00 00       	nop
 164:	6f c0       	rjmp	.+222    	; 0x244 <__bad_interrupt>
 166:	00 00       	nop
 168:	6d c0       	rjmp	.+218    	; 0x244 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	6b c0       	rjmp	.+214    	; 0x244 <__bad_interrupt>
 16e:	00 00       	nop
 170:	69 c0       	rjmp	.+210    	; 0x244 <__bad_interrupt>
 172:	00 00       	nop
 174:	67 c0       	rjmp	.+206    	; 0x244 <__bad_interrupt>
 176:	00 00       	nop
 178:	65 c0       	rjmp	.+202    	; 0x244 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	63 c0       	rjmp	.+198    	; 0x244 <__bad_interrupt>
 17e:	00 00       	nop
 180:	61 c0       	rjmp	.+194    	; 0x244 <__bad_interrupt>
 182:	00 00       	nop
 184:	5f c0       	rjmp	.+190    	; 0x244 <__bad_interrupt>
 186:	00 00       	nop
 188:	5d c0       	rjmp	.+186    	; 0x244 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	5b c0       	rjmp	.+182    	; 0x244 <__bad_interrupt>
 18e:	00 00       	nop
 190:	59 c0       	rjmp	.+178    	; 0x244 <__bad_interrupt>
 192:	00 00       	nop
 194:	57 c0       	rjmp	.+174    	; 0x244 <__bad_interrupt>
 196:	00 00       	nop
 198:	55 c0       	rjmp	.+170    	; 0x244 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	53 c0       	rjmp	.+166    	; 0x244 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	51 c0       	rjmp	.+162    	; 0x244 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	4f c0       	rjmp	.+158    	; 0x244 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	4d c0       	rjmp	.+154    	; 0x244 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	4b c0       	rjmp	.+150    	; 0x244 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	49 c0       	rjmp	.+146    	; 0x244 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	47 c0       	rjmp	.+142    	; 0x244 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	45 c0       	rjmp	.+138    	; 0x244 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	43 c0       	rjmp	.+134    	; 0x244 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	41 c0       	rjmp	.+130    	; 0x244 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	3f c0       	rjmp	.+126    	; 0x244 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	3d c0       	rjmp	.+122    	; 0x244 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	3b c0       	rjmp	.+118    	; 0x244 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	39 c0       	rjmp	.+114    	; 0x244 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	37 c0       	rjmp	.+110    	; 0x244 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	35 c0       	rjmp	.+106    	; 0x244 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	33 c0       	rjmp	.+102    	; 0x244 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	31 c0       	rjmp	.+98     	; 0x244 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	2f c0       	rjmp	.+94     	; 0x244 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	2d c0       	rjmp	.+90     	; 0x244 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	2b c0       	rjmp	.+86     	; 0x244 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	29 c0       	rjmp	.+82     	; 0x244 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	27 c0       	rjmp	.+78     	; 0x244 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	25 c0       	rjmp	.+74     	; 0x244 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	ee ed       	ldi	r30, 0xDE	; 222
 21c:	f9 e0       	ldi	r31, 0x09	; 9
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a0 3d       	cpi	r26, 0xD0	; 208
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	20 e2       	ldi	r18, 0x20	; 32
 232:	a0 ed       	ldi	r26, 0xD0	; 208
 234:	b0 e2       	ldi	r27, 0x20	; 32
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	a0 3d       	cpi	r26, 0xD0	; 208
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	0b d3       	rcall	.+1558   	; 0x858 <main>
 242:	cb c3       	rjmp	.+1942   	; 0x9da <_exit>

00000244 <__bad_interrupt>:
 244:	dd ce       	rjmp	.-582    	; 0x0 <__vectors>

00000246 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
 24c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
 250:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
 254:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
 258:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
 25c:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
 260:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 264:	08 95       	ret

00000266 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	1f 92       	push	r1
 26c:	cd b7       	in	r28, 0x3d	; 61
 26e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 270:	9f b7       	in	r25, 0x3f	; 63
 272:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
 274:	f8 94       	cli
	return flags;
 276:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
 278:	e8 2f       	mov	r30, r24
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	e0 59       	subi	r30, 0x90	; 144
 27e:	ff 4f       	sbci	r31, 0xFF	; 255
 280:	60 95       	com	r22
 282:	80 81       	ld	r24, Z
 284:	68 23       	and	r22, r24
 286:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 288:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
 28a:	0f 90       	pop	r0
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 298:	20 e0       	ldi	r18, 0x00	; 0
 29a:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
 29c:	c6 2f       	mov	r28, r22
 29e:	d0 e0       	ldi	r29, 0x00	; 0
 2a0:	de 01       	movw	r26, r28
 2a2:	02 2e       	mov	r0, r18
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <ioport_configure_port_pin+0x18>
 2a6:	b5 95       	asr	r27
 2a8:	a7 95       	ror	r26
 2aa:	0a 94       	dec	r0
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <ioport_configure_port_pin+0x14>
 2ae:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 2b0:	50 8b       	std	Z+16, r21	; 0x10
 2b2:	2f 5f       	subi	r18, 0xFF	; 255
 2b4:	3f 4f       	sbci	r19, 0xFF	; 255
 2b6:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
 2b8:	28 30       	cpi	r18, 0x08	; 8
 2ba:	31 05       	cpc	r19, r1
 2bc:	89 f7       	brne	.-30     	; 0x2a0 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
 2be:	40 ff       	sbrs	r20, 0
 2c0:	0a c0       	rjmp	.+20     	; 0x2d6 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
 2c2:	41 ff       	sbrs	r20, 1
 2c4:	03 c0       	rjmp	.+6      	; 0x2cc <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
 2c6:	fc 01       	movw	r30, r24
 2c8:	65 83       	std	Z+5, r22	; 0x05
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
 2cc:	fc 01       	movw	r30, r24
 2ce:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
 2d0:	fc 01       	movw	r30, r24
 2d2:	61 83       	std	Z+1, r22	; 0x01
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
 2d6:	fc 01       	movw	r30, r24
 2d8:	62 83       	std	Z+2, r22	; 0x02
	}
}
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	08 95       	ret

000002e0 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
 2e0:	43 e0       	ldi	r20, 0x03	; 3
 2e2:	50 e0       	ldi	r21, 0x00	; 0
 2e4:	68 e0       	ldi	r22, 0x08	; 8
 2e6:	80 ec       	ldi	r24, 0xC0	; 192
 2e8:	97 e0       	ldi	r25, 0x07	; 7
 2ea:	d3 df       	rcall	.-90     	; 0x292 <ioport_configure_port_pin>
 2ec:	40 e0       	ldi	r20, 0x00	; 0
 2ee:	58 e1       	ldi	r21, 0x18	; 24
 2f0:	64 e0       	ldi	r22, 0x04	; 4
 2f2:	80 ec       	ldi	r24, 0xC0	; 192
 2f4:	97 e0       	ldi	r25, 0x07	; 7
 2f6:	cd df       	rcall	.-102    	; 0x292 <ioport_configure_port_pin>
 2f8:	43 e0       	ldi	r20, 0x03	; 3
 2fa:	50 e0       	ldi	r21, 0x00	; 0
 2fc:	68 e0       	ldi	r22, 0x08	; 8
 2fe:	80 e8       	ldi	r24, 0x80	; 128
 300:	96 e0       	ldi	r25, 0x06	; 6
 302:	c7 df       	rcall	.-114    	; 0x292 <ioport_configure_port_pin>
 304:	40 e0       	ldi	r20, 0x00	; 0
 306:	50 e0       	ldi	r21, 0x00	; 0
 308:	64 e0       	ldi	r22, 0x04	; 4
 30a:	80 e8       	ldi	r24, 0x80	; 128
 30c:	96 e0       	ldi	r25, 0x06	; 6
 30e:	c1 df       	rcall	.-126    	; 0x292 <ioport_configure_port_pin>
 310:	43 e0       	ldi	r20, 0x03	; 3
 312:	50 e0       	ldi	r21, 0x00	; 0
 314:	68 e0       	ldi	r22, 0x08	; 8
 316:	80 e4       	ldi	r24, 0x40	; 64
 318:	96 e0       	ldi	r25, 0x06	; 6
 31a:	bb df       	rcall	.-138    	; 0x292 <ioport_configure_port_pin>
 31c:	40 e0       	ldi	r20, 0x00	; 0
 31e:	50 e0       	ldi	r21, 0x00	; 0
 320:	64 e0       	ldi	r22, 0x04	; 4
 322:	80 e4       	ldi	r24, 0x40	; 64
 324:	96 e0       	ldi	r25, 0x06	; 6
 326:	b5 cf       	rjmp	.-150    	; 0x292 <ioport_configure_port_pin>
 328:	08 95       	ret

0000032a <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
 32a:	fc 01       	movw	r30, r24
 32c:	91 81       	ldd	r25, Z+1	; 0x01
 32e:	95 ff       	sbrs	r25, 5
 330:	fd cf       	rjmp	.-6      	; 0x32c <usart_putchar+0x2>
 332:	60 83       	st	Z, r22
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	08 95       	ret

0000033a <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
 33a:	4f 92       	push	r4
 33c:	5f 92       	push	r5
 33e:	6f 92       	push	r6
 340:	7f 92       	push	r7
 342:	8f 92       	push	r8
 344:	9f 92       	push	r9
 346:	af 92       	push	r10
 348:	bf 92       	push	r11
 34a:	ef 92       	push	r14
 34c:	ff 92       	push	r15
 34e:	0f 93       	push	r16
 350:	1f 93       	push	r17
 352:	cf 93       	push	r28
 354:	7c 01       	movw	r14, r24
 356:	4a 01       	movw	r8, r20
 358:	5b 01       	movw	r10, r22
 35a:	28 01       	movw	r4, r16
 35c:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
 35e:	fc 01       	movw	r30, r24
 360:	84 81       	ldd	r24, Z+4	; 0x04
 362:	82 ff       	sbrs	r24, 2
 364:	16 c0       	rjmp	.+44     	; 0x392 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
 366:	d9 01       	movw	r26, r18
 368:	c8 01       	movw	r24, r16
 36a:	68 94       	set
 36c:	12 f8       	bld	r1, 2
 36e:	b6 95       	lsr	r27
 370:	a7 95       	ror	r26
 372:	97 95       	ror	r25
 374:	87 95       	ror	r24
 376:	16 94       	lsr	r1
 378:	d1 f7       	brne	.-12     	; 0x36e <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
 37a:	b9 01       	movw	r22, r18
 37c:	a8 01       	movw	r20, r16
 37e:	03 2e       	mov	r0, r19
 380:	36 e1       	ldi	r19, 0x16	; 22
 382:	76 95       	lsr	r23
 384:	67 95       	ror	r22
 386:	57 95       	ror	r21
 388:	47 95       	ror	r20
 38a:	3a 95       	dec	r19
 38c:	d1 f7       	brne	.-12     	; 0x382 <usart_set_baudrate+0x48>
 38e:	30 2d       	mov	r19, r0
 390:	15 c0       	rjmp	.+42     	; 0x3bc <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
 392:	d9 01       	movw	r26, r18
 394:	c8 01       	movw	r24, r16
 396:	68 94       	set
 398:	13 f8       	bld	r1, 3
 39a:	b6 95       	lsr	r27
 39c:	a7 95       	ror	r26
 39e:	97 95       	ror	r25
 3a0:	87 95       	ror	r24
 3a2:	16 94       	lsr	r1
 3a4:	d1 f7       	brne	.-12     	; 0x39a <usart_set_baudrate+0x60>
		min_rate /= 2;
 3a6:	b9 01       	movw	r22, r18
 3a8:	a8 01       	movw	r20, r16
 3aa:	03 2e       	mov	r0, r19
 3ac:	37 e1       	ldi	r19, 0x17	; 23
 3ae:	76 95       	lsr	r23
 3b0:	67 95       	ror	r22
 3b2:	57 95       	ror	r21
 3b4:	47 95       	ror	r20
 3b6:	3a 95       	dec	r19
 3b8:	d1 f7       	brne	.-12     	; 0x3ae <usart_set_baudrate+0x74>
 3ba:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
 3bc:	88 15       	cp	r24, r8
 3be:	99 05       	cpc	r25, r9
 3c0:	aa 05       	cpc	r26, r10
 3c2:	bb 05       	cpc	r27, r11
 3c4:	08 f4       	brcc	.+2      	; 0x3c8 <usart_set_baudrate+0x8e>
 3c6:	a2 c0       	rjmp	.+324    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 3c8:	84 16       	cp	r8, r20
 3ca:	95 06       	cpc	r9, r21
 3cc:	a6 06       	cpc	r10, r22
 3ce:	b7 06       	cpc	r11, r23
 3d0:	08 f4       	brcc	.+2      	; 0x3d4 <usart_set_baudrate+0x9a>
 3d2:	9e c0       	rjmp	.+316    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
 3d4:	f7 01       	movw	r30, r14
 3d6:	84 81       	ldd	r24, Z+4	; 0x04
 3d8:	82 fd       	sbrc	r24, 2
 3da:	04 c0       	rjmp	.+8      	; 0x3e4 <usart_set_baudrate+0xaa>
		baud *= 2;
 3dc:	88 0c       	add	r8, r8
 3de:	99 1c       	adc	r9, r9
 3e0:	aa 1c       	adc	r10, r10
 3e2:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
 3e4:	c3 01       	movw	r24, r6
 3e6:	b2 01       	movw	r22, r4
 3e8:	a5 01       	movw	r20, r10
 3ea:	94 01       	movw	r18, r8
 3ec:	d4 d2       	rcall	.+1448   	; 0x996 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
 3ee:	2f 3f       	cpi	r18, 0xFF	; 255
 3f0:	31 05       	cpc	r19, r1
 3f2:	41 05       	cpc	r20, r1
 3f4:	51 05       	cpc	r21, r1
 3f6:	08 f4       	brcc	.+2      	; 0x3fa <usart_set_baudrate+0xc0>
 3f8:	8d c0       	rjmp	.+282    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 3fa:	8f ef       	ldi	r24, 0xFF	; 255
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	a0 e0       	ldi	r26, 0x00	; 0
 400:	b0 e0       	ldi	r27, 0x00	; 0
 402:	c9 ef       	ldi	r28, 0xF9	; 249
 404:	05 c0       	rjmp	.+10     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 406:	28 17       	cp	r18, r24
 408:	39 07       	cpc	r19, r25
 40a:	4a 07       	cpc	r20, r26
 40c:	5b 07       	cpc	r21, r27
 40e:	58 f0       	brcs	.+22     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
			break;
		}

		limit <<= 1;
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	aa 1f       	adc	r26, r26
 416:	bb 1f       	adc	r27, r27

		if (exp < -3) {
 418:	cd 3f       	cpi	r28, 0xFD	; 253
 41a:	0c f4       	brge	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
			limit |= 1;
 41c:	81 60       	ori	r24, 0x01	; 1
 41e:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
 420:	c7 30       	cpi	r28, 0x07	; 7
 422:	89 f7       	brne	.-30     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 424:	4d c0       	rjmp	.+154    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
 426:	cc 23       	and	r28, r28
 428:	0c f0       	brlt	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 42a:	4a c0       	rjmp	.+148    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
 42c:	d5 01       	movw	r26, r10
 42e:	c4 01       	movw	r24, r8
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	aa 1f       	adc	r26, r26
 436:	bb 1f       	adc	r27, r27
 438:	88 0f       	add	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	aa 1f       	adc	r26, r26
 43e:	bb 1f       	adc	r27, r27
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	aa 1f       	adc	r26, r26
 446:	bb 1f       	adc	r27, r27
 448:	48 1a       	sub	r4, r24
 44a:	59 0a       	sbc	r5, r25
 44c:	6a 0a       	sbc	r6, r26
 44e:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
 450:	ce 3f       	cpi	r28, 0xFE	; 254
 452:	ec f4       	brge	.+58     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
 454:	8d ef       	ldi	r24, 0xFD	; 253
 456:	9f ef       	ldi	r25, 0xFF	; 255
 458:	8c 1b       	sub	r24, r28
 45a:	91 09       	sbc	r25, r1
 45c:	c7 fd       	sbrc	r28, 7
 45e:	93 95       	inc	r25
 460:	04 c0       	rjmp	.+8      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 462:	44 0c       	add	r4, r4
 464:	55 1c       	adc	r5, r5
 466:	66 1c       	adc	r6, r6
 468:	77 1c       	adc	r7, r7
 46a:	8a 95       	dec	r24
 46c:	d2 f7       	brpl	.-12     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 46e:	d5 01       	movw	r26, r10
 470:	c4 01       	movw	r24, r8
 472:	b6 95       	lsr	r27
 474:	a7 95       	ror	r26
 476:	97 95       	ror	r25
 478:	87 95       	ror	r24
 47a:	bc 01       	movw	r22, r24
 47c:	cd 01       	movw	r24, r26
 47e:	64 0d       	add	r22, r4
 480:	75 1d       	adc	r23, r5
 482:	86 1d       	adc	r24, r6
 484:	97 1d       	adc	r25, r7
 486:	a5 01       	movw	r20, r10
 488:	94 01       	movw	r18, r8
 48a:	85 d2       	rcall	.+1290   	; 0x996 <__udivmodsi4>
 48c:	35 c0       	rjmp	.+106    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
		} else {
			baud <<= exp + 3;
 48e:	83 e0       	ldi	r24, 0x03	; 3
 490:	8c 0f       	add	r24, r28
 492:	a5 01       	movw	r20, r10
 494:	94 01       	movw	r18, r8
 496:	04 c0       	rjmp	.+8      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 498:	22 0f       	add	r18, r18
 49a:	33 1f       	adc	r19, r19
 49c:	44 1f       	adc	r20, r20
 49e:	55 1f       	adc	r21, r21
 4a0:	8a 95       	dec	r24
 4a2:	d2 f7       	brpl	.-12     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
			div = (cpu_hz + baud / 2) / baud;
 4a4:	da 01       	movw	r26, r20
 4a6:	c9 01       	movw	r24, r18
 4a8:	b6 95       	lsr	r27
 4aa:	a7 95       	ror	r26
 4ac:	97 95       	ror	r25
 4ae:	87 95       	ror	r24
 4b0:	bc 01       	movw	r22, r24
 4b2:	cd 01       	movw	r24, r26
 4b4:	64 0d       	add	r22, r4
 4b6:	75 1d       	adc	r23, r5
 4b8:	86 1d       	adc	r24, r6
 4ba:	97 1d       	adc	r25, r7
 4bc:	6c d2       	rcall	.+1240   	; 0x996 <__udivmodsi4>
 4be:	1c c0       	rjmp	.+56     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
 4c0:	83 e0       	ldi	r24, 0x03	; 3
 4c2:	8c 0f       	add	r24, r28
 4c4:	a5 01       	movw	r20, r10
 4c6:	94 01       	movw	r18, r8
 4c8:	04 c0       	rjmp	.+8      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4ca:	22 0f       	add	r18, r18
 4cc:	33 1f       	adc	r19, r19
 4ce:	44 1f       	adc	r20, r20
 4d0:	55 1f       	adc	r21, r21
 4d2:	8a 95       	dec	r24
 4d4:	d2 f7       	brpl	.-12     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
		div = (cpu_hz + baud / 2) / baud - 1;
 4d6:	da 01       	movw	r26, r20
 4d8:	c9 01       	movw	r24, r18
 4da:	b6 95       	lsr	r27
 4dc:	a7 95       	ror	r26
 4de:	97 95       	ror	r25
 4e0:	87 95       	ror	r24
 4e2:	bc 01       	movw	r22, r24
 4e4:	cd 01       	movw	r24, r26
 4e6:	64 0d       	add	r22, r4
 4e8:	75 1d       	adc	r23, r5
 4ea:	86 1d       	adc	r24, r6
 4ec:	97 1d       	adc	r25, r7
 4ee:	53 d2       	rcall	.+1190   	; 0x996 <__udivmodsi4>
 4f0:	21 50       	subi	r18, 0x01	; 1
 4f2:	31 09       	sbc	r19, r1
 4f4:	41 09       	sbc	r20, r1
 4f6:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
 4f8:	83 2f       	mov	r24, r19
 4fa:	8f 70       	andi	r24, 0x0F	; 15
 4fc:	c2 95       	swap	r28
 4fe:	c0 7f       	andi	r28, 0xF0	; 240
 500:	c8 2b       	or	r28, r24
 502:	f7 01       	movw	r30, r14
 504:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
 506:	26 83       	std	Z+6, r18	; 0x06

	return true;
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	18 c0       	rjmp	.+48     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	16 c0       	rjmp	.+44     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	14 c0       	rjmp	.+40     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
 514:	d5 01       	movw	r26, r10
 516:	c4 01       	movw	r24, r8
 518:	88 0f       	add	r24, r24
 51a:	99 1f       	adc	r25, r25
 51c:	aa 1f       	adc	r26, r26
 51e:	bb 1f       	adc	r27, r27
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	aa 1f       	adc	r26, r26
 526:	bb 1f       	adc	r27, r27
 528:	88 0f       	add	r24, r24
 52a:	99 1f       	adc	r25, r25
 52c:	aa 1f       	adc	r26, r26
 52e:	bb 1f       	adc	r27, r27
 530:	48 1a       	sub	r4, r24
 532:	59 0a       	sbc	r5, r25
 534:	6a 0a       	sbc	r6, r26
 536:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
 538:	c9 ef       	ldi	r28, 0xF9	; 249
 53a:	8c cf       	rjmp	.-232    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
 53c:	cf 91       	pop	r28
 53e:	1f 91       	pop	r17
 540:	0f 91       	pop	r16
 542:	ff 90       	pop	r15
 544:	ef 90       	pop	r14
 546:	bf 90       	pop	r11
 548:	af 90       	pop	r10
 54a:	9f 90       	pop	r9
 54c:	8f 90       	pop	r8
 54e:	7f 90       	pop	r7
 550:	6f 90       	pop	r6
 552:	5f 90       	pop	r5
 554:	4f 90       	pop	r4
 556:	08 95       	ret

00000558 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
 558:	0f 93       	push	r16
 55a:	1f 93       	push	r17
 55c:	cf 93       	push	r28
 55e:	df 93       	push	r29
 560:	ec 01       	movw	r28, r24
 562:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
 564:	00 97       	sbiw	r24, 0x00	; 0
 566:	09 f4       	brne	.+2      	; 0x56a <usart_init_rs232+0x12>
 568:	36 c1       	rjmp	.+620    	; 0x7d6 <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
 56a:	80 3c       	cpi	r24, 0xC0	; 192
 56c:	91 05       	cpc	r25, r1
 56e:	21 f4       	brne	.+8      	; 0x578 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
 570:	60 e1       	ldi	r22, 0x10	; 16
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	78 de       	rcall	.-784    	; 0x266 <sysclk_enable_module>
 576:	2f c1       	rjmp	.+606    	; 0x7d6 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
 578:	c0 34       	cpi	r28, 0x40	; 64
 57a:	84 e0       	ldi	r24, 0x04	; 4
 57c:	d8 07       	cpc	r29, r24
 57e:	21 f4       	brne	.+8      	; 0x588 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
 580:	68 e0       	ldi	r22, 0x08	; 8
 582:	80 e0       	ldi	r24, 0x00	; 0
 584:	70 de       	rcall	.-800    	; 0x266 <sysclk_enable_module>
 586:	27 c1       	rjmp	.+590    	; 0x7d6 <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
 588:	c1 15       	cp	r28, r1
 58a:	e4 e0       	ldi	r30, 0x04	; 4
 58c:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
 58e:	21 f4       	brne	.+8      	; 0x598 <usart_init_rs232+0x40>
 590:	64 e0       	ldi	r22, 0x04	; 4
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	68 de       	rcall	.-816    	; 0x266 <sysclk_enable_module>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
 596:	1f c1       	rjmp	.+574    	; 0x7d6 <usart_init_rs232+0x27e>
 598:	c0 38       	cpi	r28, 0x80	; 128
 59a:	f1 e0       	ldi	r31, 0x01	; 1
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
 59c:	df 07       	cpc	r29, r31
 59e:	21 f4       	brne	.+8      	; 0x5a8 <usart_init_rs232+0x50>
 5a0:	62 e0       	ldi	r22, 0x02	; 2
 5a2:	80 e0       	ldi	r24, 0x00	; 0
 5a4:	60 de       	rcall	.-832    	; 0x266 <sysclk_enable_module>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
 5a6:	17 c1       	rjmp	.+558    	; 0x7d6 <usart_init_rs232+0x27e>
 5a8:	c1 15       	cp	r28, r1
 5aa:	81 e0       	ldi	r24, 0x01	; 1
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
 5ac:	d8 07       	cpc	r29, r24
 5ae:	21 f4       	brne	.+8      	; 0x5b8 <usart_init_rs232+0x60>
 5b0:	61 e0       	ldi	r22, 0x01	; 1
 5b2:	80 e0       	ldi	r24, 0x00	; 0
 5b4:	58 de       	rcall	.-848    	; 0x266 <sysclk_enable_module>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
 5b6:	0f c1       	rjmp	.+542    	; 0x7d6 <usart_init_rs232+0x27e>
 5b8:	c0 38       	cpi	r28, 0x80	; 128
 5ba:	e3 e0       	ldi	r30, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
 5bc:	de 07       	cpc	r29, r30
 5be:	21 f4       	brne	.+8      	; 0x5c8 <usart_init_rs232+0x70>
 5c0:	61 e0       	ldi	r22, 0x01	; 1
 5c2:	81 e0       	ldi	r24, 0x01	; 1
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
 5c4:	50 de       	rcall	.-864    	; 0x266 <sysclk_enable_module>
 5c6:	07 c1       	rjmp	.+526    	; 0x7d6 <usart_init_rs232+0x27e>
 5c8:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
 5ca:	f3 e0       	ldi	r31, 0x03	; 3
 5cc:	df 07       	cpc	r29, r31
 5ce:	21 f4       	brne	.+8      	; 0x5d8 <usart_init_rs232+0x80>
 5d0:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
 5d2:	82 e0       	ldi	r24, 0x02	; 2
 5d4:	48 de       	rcall	.-880    	; 0x266 <sysclk_enable_module>
 5d6:	ff c0       	rjmp	.+510    	; 0x7d6 <usart_init_rs232+0x27e>
 5d8:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
 5da:	82 e0       	ldi	r24, 0x02	; 2
 5dc:	d8 07       	cpc	r29, r24
 5de:	21 f4       	brne	.+8      	; 0x5e8 <usart_init_rs232+0x90>
 5e0:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	40 de       	rcall	.-896    	; 0x266 <sysclk_enable_module>
 5e6:	f7 c0       	rjmp	.+494    	; 0x7d6 <usart_init_rs232+0x27e>
 5e8:	c0 34       	cpi	r28, 0x40	; 64
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
 5ea:	e2 e0       	ldi	r30, 0x02	; 2
 5ec:	de 07       	cpc	r29, r30
 5ee:	21 f4       	brne	.+8      	; 0x5f8 <usart_init_rs232+0xa0>
 5f0:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
 5f2:	82 e0       	ldi	r24, 0x02	; 2
 5f4:	38 de       	rcall	.-912    	; 0x266 <sysclk_enable_module>
 5f6:	ef c0       	rjmp	.+478    	; 0x7d6 <usart_init_rs232+0x27e>
 5f8:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
 5fa:	f3 e0       	ldi	r31, 0x03	; 3
 5fc:	df 07       	cpc	r29, r31
 5fe:	21 f4       	brne	.+8      	; 0x608 <usart_init_rs232+0xb0>
 600:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	30 de       	rcall	.-928    	; 0x266 <sysclk_enable_module>
 606:	e7 c0       	rjmp	.+462    	; 0x7d6 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
 608:	c0 32       	cpi	r28, 0x20	; 32
 60a:	83 e0       	ldi	r24, 0x03	; 3
 60c:	d8 07       	cpc	r29, r24
 60e:	21 f4       	brne	.+8      	; 0x618 <usart_init_rs232+0xc0>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
 610:	64 e0       	ldi	r22, 0x04	; 4
 612:	82 e0       	ldi	r24, 0x02	; 2
 614:	28 de       	rcall	.-944    	; 0x266 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
 616:	df c0       	rjmp	.+446    	; 0x7d6 <usart_init_rs232+0x27e>
 618:	c1 15       	cp	r28, r1
 61a:	e8 e0       	ldi	r30, 0x08	; 8
 61c:	de 07       	cpc	r29, r30
 61e:	21 f4       	brne	.+8      	; 0x628 <usart_init_rs232+0xd0>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
 620:	61 e0       	ldi	r22, 0x01	; 1
 622:	83 e0       	ldi	r24, 0x03	; 3
 624:	20 de       	rcall	.-960    	; 0x266 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
 626:	d7 c0       	rjmp	.+430    	; 0x7d6 <usart_init_rs232+0x27e>
 628:	c1 15       	cp	r28, r1
 62a:	f9 e0       	ldi	r31, 0x09	; 9
 62c:	df 07       	cpc	r29, r31
 62e:	21 f4       	brne	.+8      	; 0x638 <usart_init_rs232+0xe0>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
 630:	61 e0       	ldi	r22, 0x01	; 1
 632:	84 e0       	ldi	r24, 0x04	; 4
 634:	18 de       	rcall	.-976    	; 0x266 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
 636:	cf c0       	rjmp	.+414    	; 0x7d6 <usart_init_rs232+0x27e>
 638:	c1 15       	cp	r28, r1
 63a:	8a e0       	ldi	r24, 0x0A	; 10
 63c:	d8 07       	cpc	r29, r24
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
 63e:	21 f4       	brne	.+8      	; 0x648 <usart_init_rs232+0xf0>
 640:	61 e0       	ldi	r22, 0x01	; 1
 642:	85 e0       	ldi	r24, 0x05	; 5
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
 644:	10 de       	rcall	.-992    	; 0x266 <sysclk_enable_module>
 646:	c7 c0       	rjmp	.+398    	; 0x7d6 <usart_init_rs232+0x27e>
 648:	c1 15       	cp	r28, r1
 64a:	eb e0       	ldi	r30, 0x0B	; 11
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
 64c:	de 07       	cpc	r29, r30
 64e:	21 f4       	brne	.+8      	; 0x658 <usart_init_rs232+0x100>
 650:	61 e0       	ldi	r22, 0x01	; 1
 652:	86 e0       	ldi	r24, 0x06	; 6
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
 654:	08 de       	rcall	.-1008   	; 0x266 <sysclk_enable_module>
 656:	bf c0       	rjmp	.+382    	; 0x7d6 <usart_init_rs232+0x27e>
 658:	c0 34       	cpi	r28, 0x40	; 64
 65a:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
 65c:	df 07       	cpc	r29, r31
 65e:	21 f4       	brne	.+8      	; 0x668 <usart_init_rs232+0x110>
 660:	62 e0       	ldi	r22, 0x02	; 2
 662:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
 664:	00 de       	rcall	.-1024   	; 0x266 <sysclk_enable_module>
 666:	b7 c0       	rjmp	.+366    	; 0x7d6 <usart_init_rs232+0x27e>
 668:	c0 34       	cpi	r28, 0x40	; 64
 66a:	89 e0       	ldi	r24, 0x09	; 9
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
 66c:	d8 07       	cpc	r29, r24
 66e:	21 f4       	brne	.+8      	; 0x678 <usart_init_rs232+0x120>
 670:	62 e0       	ldi	r22, 0x02	; 2
 672:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
 674:	f8 dd       	rcall	.-1040   	; 0x266 <sysclk_enable_module>
 676:	af c0       	rjmp	.+350    	; 0x7d6 <usart_init_rs232+0x27e>
 678:	c0 34       	cpi	r28, 0x40	; 64
 67a:	ea e0       	ldi	r30, 0x0A	; 10
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
 67c:	de 07       	cpc	r29, r30
 67e:	21 f4       	brne	.+8      	; 0x688 <usart_init_rs232+0x130>
 680:	62 e0       	ldi	r22, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
 682:	85 e0       	ldi	r24, 0x05	; 5
 684:	f0 dd       	rcall	.-1056   	; 0x266 <sysclk_enable_module>
 686:	a7 c0       	rjmp	.+334    	; 0x7d6 <usart_init_rs232+0x27e>
 688:	c0 34       	cpi	r28, 0x40	; 64
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
 68a:	fb e0       	ldi	r31, 0x0B	; 11
 68c:	df 07       	cpc	r29, r31
 68e:	21 f4       	brne	.+8      	; 0x698 <usart_init_rs232+0x140>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
 690:	62 e0       	ldi	r22, 0x02	; 2
 692:	86 e0       	ldi	r24, 0x06	; 6
 694:	e8 dd       	rcall	.-1072   	; 0x266 <sysclk_enable_module>
 696:	9f c0       	rjmp	.+318    	; 0x7d6 <usart_init_rs232+0x27e>
 698:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
 69a:	88 e0       	ldi	r24, 0x08	; 8
 69c:	d8 07       	cpc	r29, r24
 69e:	21 f4       	brne	.+8      	; 0x6a8 <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
 6a0:	64 e0       	ldi	r22, 0x04	; 4
 6a2:	83 e0       	ldi	r24, 0x03	; 3
 6a4:	e0 dd       	rcall	.-1088   	; 0x266 <sysclk_enable_module>
 6a6:	97 c0       	rjmp	.+302    	; 0x7d6 <usart_init_rs232+0x27e>
 6a8:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
 6aa:	e9 e0       	ldi	r30, 0x09	; 9
 6ac:	de 07       	cpc	r29, r30
 6ae:	21 f4       	brne	.+8      	; 0x6b8 <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
 6b0:	64 e0       	ldi	r22, 0x04	; 4
 6b2:	84 e0       	ldi	r24, 0x04	; 4
 6b4:	d8 dd       	rcall	.-1104   	; 0x266 <sysclk_enable_module>
 6b6:	8f c0       	rjmp	.+286    	; 0x7d6 <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
 6b8:	c0 39       	cpi	r28, 0x90	; 144
 6ba:	fa e0       	ldi	r31, 0x0A	; 10
 6bc:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
 6be:	21 f4       	brne	.+8      	; 0x6c8 <usart_init_rs232+0x170>
 6c0:	64 e0       	ldi	r22, 0x04	; 4
 6c2:	85 e0       	ldi	r24, 0x05	; 5
 6c4:	d0 dd       	rcall	.-1120   	; 0x266 <sysclk_enable_module>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
 6c6:	87 c0       	rjmp	.+270    	; 0x7d6 <usart_init_rs232+0x27e>
 6c8:	c0 39       	cpi	r28, 0x90	; 144
 6ca:	8b e0       	ldi	r24, 0x0B	; 11
 6cc:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
 6ce:	21 f4       	brne	.+8      	; 0x6d8 <usart_init_rs232+0x180>
 6d0:	64 e0       	ldi	r22, 0x04	; 4
 6d2:	86 e0       	ldi	r24, 0x06	; 6
 6d4:	c8 dd       	rcall	.-1136   	; 0x266 <sysclk_enable_module>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
 6d6:	7f c0       	rjmp	.+254    	; 0x7d6 <usart_init_rs232+0x27e>
 6d8:	c0 3c       	cpi	r28, 0xC0	; 192
 6da:	e8 e0       	ldi	r30, 0x08	; 8
 6dc:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
 6de:	21 f4       	brne	.+8      	; 0x6e8 <usart_init_rs232+0x190>
 6e0:	68 e0       	ldi	r22, 0x08	; 8
 6e2:	83 e0       	ldi	r24, 0x03	; 3
 6e4:	c0 dd       	rcall	.-1152   	; 0x266 <sysclk_enable_module>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
 6e6:	77 c0       	rjmp	.+238    	; 0x7d6 <usart_init_rs232+0x27e>
 6e8:	c0 3c       	cpi	r28, 0xC0	; 192
 6ea:	f9 e0       	ldi	r31, 0x09	; 9
 6ec:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
 6ee:	21 f4       	brne	.+8      	; 0x6f8 <usart_init_rs232+0x1a0>
 6f0:	68 e0       	ldi	r22, 0x08	; 8
 6f2:	84 e0       	ldi	r24, 0x04	; 4
 6f4:	b8 dd       	rcall	.-1168   	; 0x266 <sysclk_enable_module>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
 6f6:	6f c0       	rjmp	.+222    	; 0x7d6 <usart_init_rs232+0x27e>
 6f8:	c0 3c       	cpi	r28, 0xC0	; 192
 6fa:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
 6fc:	d8 07       	cpc	r29, r24
 6fe:	21 f4       	brne	.+8      	; 0x708 <usart_init_rs232+0x1b0>
 700:	68 e0       	ldi	r22, 0x08	; 8
 702:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
 704:	b0 dd       	rcall	.-1184   	; 0x266 <sysclk_enable_module>
 706:	67 c0       	rjmp	.+206    	; 0x7d6 <usart_init_rs232+0x27e>
 708:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
 70a:	eb e0       	ldi	r30, 0x0B	; 11
 70c:	de 07       	cpc	r29, r30
 70e:	21 f4       	brne	.+8      	; 0x718 <usart_init_rs232+0x1c0>
 710:	68 e0       	ldi	r22, 0x08	; 8
 712:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
 714:	a8 dd       	rcall	.-1200   	; 0x266 <sysclk_enable_module>
 716:	5f c0       	rjmp	.+190    	; 0x7d6 <usart_init_rs232+0x27e>
 718:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
 71a:	f8 e0       	ldi	r31, 0x08	; 8
 71c:	df 07       	cpc	r29, r31
 71e:	21 f4       	brne	.+8      	; 0x728 <usart_init_rs232+0x1d0>
 720:	60 e1       	ldi	r22, 0x10	; 16
 722:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
 724:	a0 dd       	rcall	.-1216   	; 0x266 <sysclk_enable_module>
 726:	57 c0       	rjmp	.+174    	; 0x7d6 <usart_init_rs232+0x27e>
 728:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
 72a:	89 e0       	ldi	r24, 0x09	; 9
 72c:	d8 07       	cpc	r29, r24
 72e:	21 f4       	brne	.+8      	; 0x738 <usart_init_rs232+0x1e0>
 730:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
 732:	84 e0       	ldi	r24, 0x04	; 4
 734:	98 dd       	rcall	.-1232   	; 0x266 <sysclk_enable_module>
 736:	4f c0       	rjmp	.+158    	; 0x7d6 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
 738:	c0 3a       	cpi	r28, 0xA0	; 160
 73a:	ea e0       	ldi	r30, 0x0A	; 10
 73c:	de 07       	cpc	r29, r30
 73e:	21 f4       	brne	.+8      	; 0x748 <usart_init_rs232+0x1f0>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
 740:	60 e1       	ldi	r22, 0x10	; 16
 742:	85 e0       	ldi	r24, 0x05	; 5
 744:	90 dd       	rcall	.-1248   	; 0x266 <sysclk_enable_module>
 746:	47 c0       	rjmp	.+142    	; 0x7d6 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
 748:	c0 3a       	cpi	r28, 0xA0	; 160
 74a:	fb e0       	ldi	r31, 0x0B	; 11
 74c:	df 07       	cpc	r29, r31
 74e:	21 f4       	brne	.+8      	; 0x758 <usart_init_rs232+0x200>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
 750:	60 e1       	ldi	r22, 0x10	; 16
 752:	86 e0       	ldi	r24, 0x06	; 6
 754:	88 dd       	rcall	.-1264   	; 0x266 <sysclk_enable_module>
 756:	3f c0       	rjmp	.+126    	; 0x7d6 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
 758:	c0 3b       	cpi	r28, 0xB0	; 176
 75a:	88 e0       	ldi	r24, 0x08	; 8
 75c:	d8 07       	cpc	r29, r24
 75e:	21 f4       	brne	.+8      	; 0x768 <usart_init_rs232+0x210>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
 760:	60 e2       	ldi	r22, 0x20	; 32
 762:	83 e0       	ldi	r24, 0x03	; 3
 764:	80 dd       	rcall	.-1280   	; 0x266 <sysclk_enable_module>
 766:	37 c0       	rjmp	.+110    	; 0x7d6 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
 768:	c0 3b       	cpi	r28, 0xB0	; 176
 76a:	e9 e0       	ldi	r30, 0x09	; 9
 76c:	de 07       	cpc	r29, r30
 76e:	21 f4       	brne	.+8      	; 0x778 <usart_init_rs232+0x220>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
 770:	60 e2       	ldi	r22, 0x20	; 32
 772:	84 e0       	ldi	r24, 0x04	; 4
 774:	78 dd       	rcall	.-1296   	; 0x266 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
 776:	2f c0       	rjmp	.+94     	; 0x7d6 <usart_init_rs232+0x27e>
 778:	c0 3b       	cpi	r28, 0xB0	; 176
 77a:	fa e0       	ldi	r31, 0x0A	; 10
 77c:	df 07       	cpc	r29, r31
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
 77e:	21 f4       	brne	.+8      	; 0x788 <usart_init_rs232+0x230>
 780:	60 e2       	ldi	r22, 0x20	; 32
 782:	85 e0       	ldi	r24, 0x05	; 5
 784:	70 dd       	rcall	.-1312   	; 0x266 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
 786:	27 c0       	rjmp	.+78     	; 0x7d6 <usart_init_rs232+0x27e>
 788:	c0 3b       	cpi	r28, 0xB0	; 176
 78a:	8b e0       	ldi	r24, 0x0B	; 11
 78c:	d8 07       	cpc	r29, r24
 78e:	21 f4       	brne	.+8      	; 0x798 <usart_init_rs232+0x240>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
 790:	60 e2       	ldi	r22, 0x20	; 32
 792:	86 e0       	ldi	r24, 0x06	; 6
 794:	68 dd       	rcall	.-1328   	; 0x266 <sysclk_enable_module>
 796:	1f c0       	rjmp	.+62     	; 0x7d6 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
 798:	c0 38       	cpi	r28, 0x80	; 128
 79a:	e4 e0       	ldi	r30, 0x04	; 4
 79c:	de 07       	cpc	r29, r30
 79e:	21 f4       	brne	.+8      	; 0x7a8 <usart_init_rs232+0x250>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
 7a0:	60 e4       	ldi	r22, 0x40	; 64
 7a2:	83 e0       	ldi	r24, 0x03	; 3
 7a4:	60 dd       	rcall	.-1344   	; 0x266 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
 7a6:	17 c0       	rjmp	.+46     	; 0x7d6 <usart_init_rs232+0x27e>
 7a8:	c0 39       	cpi	r28, 0x90	; 144
 7aa:	f4 e0       	ldi	r31, 0x04	; 4
 7ac:	df 07       	cpc	r29, r31
 7ae:	21 f4       	brne	.+8      	; 0x7b8 <usart_init_rs232+0x260>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
 7b0:	60 e4       	ldi	r22, 0x40	; 64
 7b2:	84 e0       	ldi	r24, 0x04	; 4
 7b4:	58 dd       	rcall	.-1360   	; 0x266 <sysclk_enable_module>
 7b6:	0f c0       	rjmp	.+30     	; 0x7d6 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
 7b8:	c0 3a       	cpi	r28, 0xA0	; 160
 7ba:	84 e0       	ldi	r24, 0x04	; 4
 7bc:	d8 07       	cpc	r29, r24
 7be:	21 f4       	brne	.+8      	; 0x7c8 <usart_init_rs232+0x270>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
 7c0:	60 e4       	ldi	r22, 0x40	; 64
 7c2:	85 e0       	ldi	r24, 0x05	; 5
 7c4:	50 dd       	rcall	.-1376   	; 0x266 <sysclk_enable_module>
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
 7c6:	07 c0       	rjmp	.+14     	; 0x7d6 <usart_init_rs232+0x27e>
 7c8:	c0 3b       	cpi	r28, 0xB0	; 176
 7ca:	e4 e0       	ldi	r30, 0x04	; 4
 7cc:	de 07       	cpc	r29, r30
 7ce:	19 f4       	brne	.+6      	; 0x7d6 <usart_init_rs232+0x27e>
 7d0:	60 e4       	ldi	r22, 0x40	; 64
 7d2:	86 e0       	ldi	r24, 0x06	; 6
 7d4:	48 dd       	rcall	.-1392   	; 0x266 <sysclk_enable_module>
 7d6:	8d 81       	ldd	r24, Y+5	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
 7d8:	8f 73       	andi	r24, 0x3F	; 63
 7da:	8d 83       	std	Y+5, r24	; 0x05
 7dc:	f8 01       	movw	r30, r16
 7de:	95 81       	ldd	r25, Z+5	; 0x05
 7e0:	84 81       	ldd	r24, Z+4	; 0x04
 7e2:	89 2b       	or	r24, r25
 7e4:	96 81       	ldd	r25, Z+6	; 0x06
 7e6:	91 11       	cpse	r25, r1
 7e8:	98 e0       	ldi	r25, 0x08	; 8
 7ea:	89 2b       	or	r24, r25
 7ec:	8d 83       	std	Y+5, r24	; 0x05
 7ee:	f8 01       	movw	r30, r16
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
 7f0:	40 81       	ld	r20, Z
 7f2:	51 81       	ldd	r21, Z+1	; 0x01
 7f4:	62 81       	ldd	r22, Z+2	; 0x02
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
 7f6:	73 81       	ldd	r23, Z+3	; 0x03
 7f8:	00 e8       	ldi	r16, 0x80	; 128
 7fa:	14 e8       	ldi	r17, 0x84	; 132
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
 7fc:	2e e1       	ldi	r18, 0x1E	; 30
 7fe:	30 e0       	ldi	r19, 0x00	; 0
 800:	ce 01       	movw	r24, r28
 802:	9b dd       	rcall	.-1226   	; 0x33a <usart_set_baudrate>
 804:	9c 81       	ldd	r25, Y+4	; 0x04
 806:	98 60       	ori	r25, 0x08	; 8
 808:	9c 83       	std	Y+4, r25	; 0x04
 80a:	9c 81       	ldd	r25, Y+4	; 0x04
 80c:	90 61       	ori	r25, 0x10	; 16
 80e:	9c 83       	std	Y+4, r25	; 0x04
 810:	df 91       	pop	r29
 812:	cf 91       	pop	r28
 814:	1f 91       	pop	r17
 816:	0f 91       	pop	r16
 818:	08 95       	ret

0000081a <__portable_avr_delay_cycles>:
	
	PORTQ.OUT &= ~(1<<3);
	delay_s(on_time);
	PORTQ.OUT |= (1<<3);
	delay_s(on_time);
}
 81a:	04 c0       	rjmp	.+8      	; 0x824 <__portable_avr_delay_cycles+0xa>
 81c:	61 50       	subi	r22, 0x01	; 1
 81e:	71 09       	sbc	r23, r1
 820:	81 09       	sbc	r24, r1
 822:	91 09       	sbc	r25, r1
 824:	61 15       	cp	r22, r1
 826:	71 05       	cpc	r23, r1
 828:	81 05       	cpc	r24, r1
 82a:	91 05       	cpc	r25, r1
 82c:	b9 f7       	brne	.-18     	; 0x81c <__portable_avr_delay_cycles+0x2>
 82e:	08 95       	ret

00000830 <usart_tx_at>:
 830:	0f 93       	push	r16
 832:	1f 93       	push	r17
 834:	cf 93       	push	r28
 836:	df 93       	push	r29
 838:	eb 01       	movw	r28, r22
 83a:	68 81       	ld	r22, Y
 83c:	66 23       	and	r22, r22
 83e:	39 f0       	breq	.+14     	; 0x84e <usart_tx_at+0x1e>
 840:	8c 01       	movw	r16, r24
 842:	21 96       	adiw	r28, 0x01	; 1
 844:	c8 01       	movw	r24, r16
 846:	71 dd       	rcall	.-1310   	; 0x32a <usart_putchar>
 848:	69 91       	ld	r22, Y+
 84a:	61 11       	cpse	r22, r1
 84c:	fb cf       	rjmp	.-10     	; 0x844 <usart_tx_at+0x14>
 84e:	df 91       	pop	r29
 850:	cf 91       	pop	r28
 852:	1f 91       	pop	r17
 854:	0f 91       	pop	r16
 856:	08 95       	ret

00000858 <main>:


/*! \brief Main function.
 */
int main(void)
{
 858:	cf 93       	push	r28
 85a:	df 93       	push	r29
 85c:	1f 92       	push	r1
 85e:	cd b7       	in	r28, 0x3d	; 61
 860:	de b7       	in	r29, 0x3e	; 62
	
	volatile uint8_t tx_length = sizeof(AT);
 862:	84 e0       	ldi	r24, 0x04	; 4
	/* Initialize the board.
	 * The board-specific conf_board.h file contains the configuration of
	 * the board initialization.
	 */
	board_init();
	sysclk_init();
 864:	89 83       	std	Y+1, r24	; 0x01
 866:	3c dd       	rcall	.-1416   	; 0x2e0 <board_init>
	
	//LED setup
	PORTQ.DIR |= (1<<3);
 868:	ee dc       	rcall	.-1572   	; 0x246 <sysclk_init>
 86a:	e0 ec       	ldi	r30, 0xC0	; 192
 86c:	f7 e0       	ldi	r31, 0x07	; 7
 86e:	80 81       	ld	r24, Z
 870:	88 60       	ori	r24, 0x08	; 8
	PORTQ.OUT |= (1<<3);
 872:	80 83       	st	Z, r24
 874:	84 81       	ldd	r24, Z+4	; 0x04
 876:	88 60       	ori	r24, 0x08	; 8
		.paritytype = USART_SERIAL_SIM900_PARITY,
		.stopbits = USART_SERIAL_SIM900_STOP_BIT
	};

	// Initialize usart driver in RS232 mode
	usart_init_rs232(USART_SERIAL_EXAMPLE, &USART_SERIAL_OPTIONS);
 878:	84 83       	std	Z+4, r24	; 0x04
 87a:	67 e0       	ldi	r22, 0x07	; 7
 87c:	70 e2       	ldi	r23, 0x20	; 32
 87e:	80 ea       	ldi	r24, 0xA0	; 160
 880:	9a e0       	ldi	r25, 0x0A	; 10
	usart_init_rs232(USART_SERIAL_SIM900, &USART_SERIAL_SIM900_OPTIONS);
 882:	6a de       	rcall	.-812    	; 0x558 <usart_init_rs232>
 884:	60 e0       	ldi	r22, 0x00	; 0
 886:	70 e2       	ldi	r23, 0x20	; 32
 888:	80 ea       	ldi	r24, 0xA0	; 160



	
	usart_tx_at(USART_SERIAL_SIM900, AT_CIPSHUT);
 88a:	98 e0       	ldi	r25, 0x08	; 8
 88c:	65 de       	rcall	.-822    	; 0x558 <usart_init_rs232>
 88e:	62 e3       	ldi	r22, 0x32	; 50
 890:	70 e2       	ldi	r23, 0x20	; 32
	delay_s(1);
 892:	80 ea       	ldi	r24, 0xA0	; 160
 894:	98 e0       	ldi	r25, 0x08	; 8
 896:	cc df       	rcall	.-104    	; 0x830 <usart_tx_at>
 898:	66 e1       	ldi	r22, 0x16	; 22
 89a:	76 e1       	ldi	r23, 0x16	; 22
	usart_tx_at(USART_SERIAL_SIM900, AT_CIPSTATUS);
 89c:	85 e0       	ldi	r24, 0x05	; 5
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	bc df       	rcall	.-136    	; 0x81a <__portable_avr_delay_cycles>
 8a2:	6e e3       	ldi	r22, 0x3E	; 62
 8a4:	70 e2       	ldi	r23, 0x20	; 32
	delay_s(1);
 8a6:	80 ea       	ldi	r24, 0xA0	; 160
 8a8:	98 e0       	ldi	r25, 0x08	; 8
 8aa:	c2 df       	rcall	.-124    	; 0x830 <usart_tx_at>
 8ac:	66 e1       	ldi	r22, 0x16	; 22
 8ae:	76 e1       	ldi	r23, 0x16	; 22
	usart_tx_at(USART_SERIAL_SIM900, AT_CIPMUX);
 8b0:	85 e0       	ldi	r24, 0x05	; 5
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	b2 df       	rcall	.-156    	; 0x81a <__portable_avr_delay_cycles>
 8b6:	6c e4       	ldi	r22, 0x4C	; 76
 8b8:	70 e2       	ldi	r23, 0x20	; 32
	delay_s(1);
 8ba:	80 ea       	ldi	r24, 0xA0	; 160
 8bc:	98 e0       	ldi	r25, 0x08	; 8
 8be:	b8 df       	rcall	.-144    	; 0x830 <usart_tx_at>
 8c0:	66 e1       	ldi	r22, 0x16	; 22
 8c2:	76 e1       	ldi	r23, 0x16	; 22
 8c4:	85 e0       	ldi	r24, 0x05	; 5
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	a8 df       	rcall	.-176    	; 0x81a <__portable_avr_delay_cycles>
 8ca:	00 e2       	ldi	r16, 0x20	; 32
 8cc:	10 e2       	ldi	r17, 0x20	; 32
 8ce:	0f 2e       	mov	r0, r31
 8d0:	f2 e3       	ldi	r31, 0x32	; 50
 8d2:	ef 2e       	mov	r14, r31
	
	i = 0;
	while (i < LEN_CSTT)
	{
		usart_tx_at(USART_SERIAL_SIM900, AT_CSTT[i]);
 8d4:	f0 e2       	ldi	r31, 0x20	; 32
 8d6:	ff 2e       	mov	r15, r31
 8d8:	f0 2d       	mov	r31, r0
 8da:	f8 01       	movw	r30, r16
 8dc:	61 91       	ld	r22, Z+
 8de:	71 91       	ld	r23, Z+
 8e0:	8f 01       	movw	r16, r30
	delay_s(1);
	usart_tx_at(USART_SERIAL_SIM900, AT_CIPMUX);
	delay_s(1);
	
	i = 0;
	while (i < LEN_CSTT)
 8e2:	80 ea       	ldi	r24, 0xA0	; 160
 8e4:	98 e0       	ldi	r25, 0x08	; 8
	{
		usart_tx_at(USART_SERIAL_SIM900, AT_CSTT[i]);
		i++;
	}
	delay_s(1);
 8e6:	a4 df       	rcall	.-184    	; 0x830 <usart_tx_at>
 8e8:	0e 15       	cp	r16, r14
 8ea:	1f 05       	cpc	r17, r15
 8ec:	b1 f7       	brne	.-20     	; 0x8da <main+0x82>
 8ee:	66 e1       	ldi	r22, 0x16	; 22
	
	usart_tx_at(USART_SERIAL_SIM900, AT_CIICR);
 8f0:	76 e1       	ldi	r23, 0x16	; 22
 8f2:	85 e0       	ldi	r24, 0x05	; 5
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	91 df       	rcall	.-222    	; 0x81a <__portable_avr_delay_cycles>
 8f8:	69 e5       	ldi	r22, 0x59	; 89
	delay_s(3);
 8fa:	70 e2       	ldi	r23, 0x20	; 32
 8fc:	80 ea       	ldi	r24, 0xA0	; 160
 8fe:	98 e0       	ldi	r25, 0x08	; 8
 900:	97 df       	rcall	.-210    	; 0x830 <usart_tx_at>
 902:	61 e4       	ldi	r22, 0x41	; 65
	usart_tx_at(USART_SERIAL_SIM900, AT_CIFSR);
 904:	72 e4       	ldi	r23, 0x42	; 66
 906:	8f e0       	ldi	r24, 0x0F	; 15
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	87 df       	rcall	.-242    	; 0x81a <__portable_avr_delay_cycles>
 90c:	63 e6       	ldi	r22, 0x63	; 99
 90e:	70 e2       	ldi	r23, 0x20	; 32
	delay_s(1);
 910:	80 ea       	ldi	r24, 0xA0	; 160
 912:	98 e0       	ldi	r25, 0x08	; 8
 914:	8d df       	rcall	.-230    	; 0x830 <usart_tx_at>
 916:	66 e1       	ldi	r22, 0x16	; 22
 918:	76 e1       	ldi	r23, 0x16	; 22
 91a:	85 e0       	ldi	r24, 0x05	; 5
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	7d df       	rcall	.-262    	; 0x81a <__portable_avr_delay_cycles>
 920:	0e e0       	ldi	r16, 0x0E	; 14
 922:	10 e2       	ldi	r17, 0x20	; 32
 924:	0f 2e       	mov	r0, r31
 926:	f0 e2       	ldi	r31, 0x20	; 32
	
	i = 0;
	while (i < LEN_CIPSTART)
	{
		usart_tx_at(USART_SERIAL_SIM900, AT_CIPSTART[i]);
 928:	ef 2e       	mov	r14, r31
 92a:	f0 e2       	ldi	r31, 0x20	; 32
 92c:	ff 2e       	mov	r15, r31
 92e:	f0 2d       	mov	r31, r0
 930:	f8 01       	movw	r30, r16
 932:	61 91       	ld	r22, Z+
	delay_s(3);
	usart_tx_at(USART_SERIAL_SIM900, AT_CIFSR);
	delay_s(1);
	
	i = 0;
	while (i < LEN_CIPSTART)
 934:	71 91       	ld	r23, Z+
 936:	8f 01       	movw	r16, r30
	{
		usart_tx_at(USART_SERIAL_SIM900, AT_CIPSTART[i]);
		i++;
	}
	delay_s(3);
 938:	80 ea       	ldi	r24, 0xA0	; 160
 93a:	98 e0       	ldi	r25, 0x08	; 8
 93c:	79 df       	rcall	.-270    	; 0x830 <usart_tx_at>
 93e:	0e 15       	cp	r16, r14
 940:	1f 05       	cpc	r17, r15
	
	usart_tx_at(USART_SERIAL_SIM900, AT_CIPSEND);
 942:	b1 f7       	brne	.-20     	; 0x930 <main+0xd8>
 944:	61 e4       	ldi	r22, 0x41	; 65
 946:	72 e4       	ldi	r23, 0x42	; 66
 948:	8f e0       	ldi	r24, 0x0F	; 15
	delay_s(1);
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	66 df       	rcall	.-308    	; 0x81a <__portable_avr_delay_cycles>
 94e:	6d e6       	ldi	r22, 0x6D	; 109
 950:	70 e2       	ldi	r23, 0x20	; 32
	usart_tx_at(USART_SERIAL_SIM900, AT_MESSAGE);
 952:	80 ea       	ldi	r24, 0xA0	; 160
 954:	98 e0       	ldi	r25, 0x08	; 8
 956:	6c df       	rcall	.-296    	; 0x830 <usart_tx_at>
 958:	66 e1       	ldi	r22, 0x16	; 22
 95a:	76 e1       	ldi	r23, 0x16	; 22
	delay_s(1);
 95c:	85 e0       	ldi	r24, 0x05	; 5
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	5c df       	rcall	.-328    	; 0x81a <__portable_avr_delay_cycles>
 962:	69 e7       	ldi	r22, 0x79	; 121
 964:	70 e2       	ldi	r23, 0x20	; 32
 966:	80 ea       	ldi	r24, 0xA0	; 160
	usart_tx_at(USART_SERIAL_SIM900, CTRL_Z);
 968:	98 e0       	ldi	r25, 0x08	; 8
 96a:	62 df       	rcall	.-316    	; 0x830 <usart_tx_at>
 96c:	66 e1       	ldi	r22, 0x16	; 22
 96e:	76 e1       	ldi	r23, 0x16	; 22
 970:	85 e0       	ldi	r24, 0x05	; 5
 972:	90 e0       	ldi	r25, 0x00	; 0
	delay_s(1);
 974:	52 df       	rcall	.-348    	; 0x81a <__portable_avr_delay_cycles>
 976:	6f e8       	ldi	r22, 0x8F	; 143
 978:	70 e2       	ldi	r23, 0x20	; 32
 97a:	80 ea       	ldi	r24, 0xA0	; 160
 97c:	98 e0       	ldi	r25, 0x08	; 8
 97e:	58 df       	rcall	.-336    	; 0x830 <usart_tx_at>
	usart_tx_at(USART_SERIAL_SIM900, AT_CIPSHUT);
 980:	66 e1       	ldi	r22, 0x16	; 22
 982:	76 e1       	ldi	r23, 0x16	; 22
 984:	85 e0       	ldi	r24, 0x05	; 5
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	48 df       	rcall	.-368    	; 0x81a <__portable_avr_delay_cycles>
 98a:	62 e3       	ldi	r22, 0x32	; 50
 98c:	70 e2       	ldi	r23, 0x20	; 32
 98e:	80 ea       	ldi	r24, 0xA0	; 160
 990:	98 e0       	ldi	r25, 0x08	; 8
 992:	4e df       	rcall	.-356    	; 0x830 <usart_tx_at>
 994:	ff cf       	rjmp	.-2      	; 0x994 <main+0x13c>

00000996 <__udivmodsi4>:
 996:	a1 e2       	ldi	r26, 0x21	; 33
 998:	1a 2e       	mov	r1, r26
 99a:	aa 1b       	sub	r26, r26
 99c:	bb 1b       	sub	r27, r27
 99e:	fd 01       	movw	r30, r26
 9a0:	0d c0       	rjmp	.+26     	; 0x9bc <__udivmodsi4_ep>

000009a2 <__udivmodsi4_loop>:
 9a2:	aa 1f       	adc	r26, r26
 9a4:	bb 1f       	adc	r27, r27
 9a6:	ee 1f       	adc	r30, r30
 9a8:	ff 1f       	adc	r31, r31
 9aa:	a2 17       	cp	r26, r18
 9ac:	b3 07       	cpc	r27, r19
 9ae:	e4 07       	cpc	r30, r20
 9b0:	f5 07       	cpc	r31, r21
 9b2:	20 f0       	brcs	.+8      	; 0x9bc <__udivmodsi4_ep>
 9b4:	a2 1b       	sub	r26, r18
 9b6:	b3 0b       	sbc	r27, r19
 9b8:	e4 0b       	sbc	r30, r20
 9ba:	f5 0b       	sbc	r31, r21

000009bc <__udivmodsi4_ep>:
 9bc:	66 1f       	adc	r22, r22
 9be:	77 1f       	adc	r23, r23
 9c0:	88 1f       	adc	r24, r24
 9c2:	99 1f       	adc	r25, r25
 9c4:	1a 94       	dec	r1
 9c6:	69 f7       	brne	.-38     	; 0x9a2 <__udivmodsi4_loop>
 9c8:	60 95       	com	r22
 9ca:	70 95       	com	r23
 9cc:	80 95       	com	r24
 9ce:	90 95       	com	r25
 9d0:	9b 01       	movw	r18, r22
 9d2:	ac 01       	movw	r20, r24
 9d4:	bd 01       	movw	r22, r26
 9d6:	cf 01       	movw	r24, r30
 9d8:	08 95       	ret

000009da <_exit>:
 9da:	f8 94       	cli

000009dc <__stop_program>:
 9dc:	ff cf       	rjmp	.-2      	; 0x9dc <__stop_program>
