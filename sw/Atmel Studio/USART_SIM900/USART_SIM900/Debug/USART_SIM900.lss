
USART_SIM900.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001b6  00802000  00002f2c  00002fc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008f  008021b6  008021b6  00003176  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003176  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000031d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003e0  00000000  00000000  00003218  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000f46e  00000000  00000000  000035f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005618  00000000  00000000  00012a66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000059c9  00000000  00000000  0001807e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000fc0  00000000  00000000  0001da48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00035a5f  00000000  00000000  0001ea08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000057f4  00000000  00000000  00054467  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b8  00000000  00000000  00059c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c484  00000000  00000000  0005a018  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	21 c1       	rjmp	.+578    	; 0x248 <__bad_interrupt>
       6:	00 00       	nop
       8:	1f c1       	rjmp	.+574    	; 0x248 <__bad_interrupt>
       a:	00 00       	nop
       c:	1d c1       	rjmp	.+570    	; 0x248 <__bad_interrupt>
       e:	00 00       	nop
      10:	1b c1       	rjmp	.+566    	; 0x248 <__bad_interrupt>
      12:	00 00       	nop
      14:	19 c1       	rjmp	.+562    	; 0x248 <__bad_interrupt>
      16:	00 00       	nop
      18:	17 c1       	rjmp	.+558    	; 0x248 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	15 c1       	rjmp	.+554    	; 0x248 <__bad_interrupt>
      1e:	00 00       	nop
      20:	13 c1       	rjmp	.+550    	; 0x248 <__bad_interrupt>
      22:	00 00       	nop
      24:	11 c1       	rjmp	.+546    	; 0x248 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 0e 10 	jmp	0x201c	; 0x201c <__vector_10>
      2c:	0d c1       	rjmp	.+538    	; 0x248 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0b c1       	rjmp	.+534    	; 0x248 <__bad_interrupt>
      32:	00 00       	nop
      34:	09 c1       	rjmp	.+530    	; 0x248 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 d9 0f 	jmp	0x1fb2	; 0x1fb2 <__vector_14>
      3c:	05 c1       	rjmp	.+522    	; 0x248 <__bad_interrupt>
      3e:	00 00       	nop
      40:	03 c1       	rjmp	.+518    	; 0x248 <__bad_interrupt>
      42:	00 00       	nop
      44:	01 c1       	rjmp	.+514    	; 0x248 <__bad_interrupt>
      46:	00 00       	nop
      48:	ff c0       	rjmp	.+510    	; 0x248 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fd c0       	rjmp	.+506    	; 0x248 <__bad_interrupt>
      4e:	00 00       	nop
      50:	fb c0       	rjmp	.+502    	; 0x248 <__bad_interrupt>
      52:	00 00       	nop
      54:	f9 c0       	rjmp	.+498    	; 0x248 <__bad_interrupt>
      56:	00 00       	nop
      58:	f7 c0       	rjmp	.+494    	; 0x248 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f5 c0       	rjmp	.+490    	; 0x248 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f3 c0       	rjmp	.+486    	; 0x248 <__bad_interrupt>
      62:	00 00       	nop
      64:	f1 c0       	rjmp	.+482    	; 0x248 <__bad_interrupt>
      66:	00 00       	nop
      68:	ef c0       	rjmp	.+478    	; 0x248 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ed c0       	rjmp	.+474    	; 0x248 <__bad_interrupt>
      6e:	00 00       	nop
      70:	eb c0       	rjmp	.+470    	; 0x248 <__bad_interrupt>
      72:	00 00       	nop
      74:	e9 c0       	rjmp	.+466    	; 0x248 <__bad_interrupt>
      76:	00 00       	nop
      78:	e7 c0       	rjmp	.+462    	; 0x248 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e5 c0       	rjmp	.+458    	; 0x248 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e3 c0       	rjmp	.+454    	; 0x248 <__bad_interrupt>
      82:	00 00       	nop
      84:	e1 c0       	rjmp	.+450    	; 0x248 <__bad_interrupt>
      86:	00 00       	nop
      88:	df c0       	rjmp	.+446    	; 0x248 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dd c0       	rjmp	.+442    	; 0x248 <__bad_interrupt>
      8e:	00 00       	nop
      90:	db c0       	rjmp	.+438    	; 0x248 <__bad_interrupt>
      92:	00 00       	nop
      94:	d9 c0       	rjmp	.+434    	; 0x248 <__bad_interrupt>
      96:	00 00       	nop
      98:	d7 c0       	rjmp	.+430    	; 0x248 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	32 c2       	rjmp	.+1124   	; 0x502 <__vector_39>
      9e:	00 00       	nop
      a0:	6d c2       	rjmp	.+1242   	; 0x57c <__vector_40>
      a2:	00 00       	nop
      a4:	a8 c2       	rjmp	.+1360   	; 0x5f6 <__vector_41>
      a6:	00 00       	nop
      a8:	e3 c2       	rjmp	.+1478   	; 0x670 <__vector_42>
      aa:	00 00       	nop
      ac:	cd c0       	rjmp	.+410    	; 0x248 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cb c0       	rjmp	.+406    	; 0x248 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c9 c0       	rjmp	.+402    	; 0x248 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c7 c0       	rjmp	.+398    	; 0x248 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c5 c0       	rjmp	.+394    	; 0x248 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c3 c0       	rjmp	.+390    	; 0x248 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c1 c0       	rjmp	.+386    	; 0x248 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	bf c0       	rjmp	.+382    	; 0x248 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bd c0       	rjmp	.+378    	; 0x248 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	bb c0       	rjmp	.+374    	; 0x248 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b9 c0       	rjmp	.+370    	; 0x248 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b7 c0       	rjmp	.+366    	; 0x248 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b5 c0       	rjmp	.+362    	; 0x248 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b3 c0       	rjmp	.+358    	; 0x248 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b1 c0       	rjmp	.+354    	; 0x248 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	af c0       	rjmp	.+350    	; 0x248 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ad c0       	rjmp	.+346    	; 0x248 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ab c0       	rjmp	.+342    	; 0x248 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a9 c0       	rjmp	.+338    	; 0x248 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a7 c0       	rjmp	.+334    	; 0x248 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a5 c0       	rjmp	.+330    	; 0x248 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a3 c0       	rjmp	.+326    	; 0x248 <__bad_interrupt>
     102:	00 00       	nop
     104:	a1 c0       	rjmp	.+322    	; 0x248 <__bad_interrupt>
     106:	00 00       	nop
     108:	9f c0       	rjmp	.+318    	; 0x248 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9d c0       	rjmp	.+314    	; 0x248 <__bad_interrupt>
     10e:	00 00       	nop
     110:	9b c0       	rjmp	.+310    	; 0x248 <__bad_interrupt>
     112:	00 00       	nop
     114:	99 c0       	rjmp	.+306    	; 0x248 <__bad_interrupt>
     116:	00 00       	nop
     118:	97 c0       	rjmp	.+302    	; 0x248 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	fe c0       	rjmp	.+508    	; 0x31a <__vector_71>
     11e:	00 00       	nop
     120:	39 c1       	rjmp	.+626    	; 0x394 <__vector_72>
     122:	00 00       	nop
     124:	74 c1       	rjmp	.+744    	; 0x40e <__vector_73>
     126:	00 00       	nop
     128:	af c1       	rjmp	.+862    	; 0x488 <__vector_74>
     12a:	00 00       	nop
     12c:	8d c0       	rjmp	.+282    	; 0x248 <__bad_interrupt>
     12e:	00 00       	nop
     130:	8b c0       	rjmp	.+278    	; 0x248 <__bad_interrupt>
     132:	00 00       	nop
     134:	89 c0       	rjmp	.+274    	; 0x248 <__bad_interrupt>
     136:	00 00       	nop
     138:	87 c0       	rjmp	.+270    	; 0x248 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	85 c0       	rjmp	.+266    	; 0x248 <__bad_interrupt>
     13e:	00 00       	nop
     140:	83 c0       	rjmp	.+262    	; 0x248 <__bad_interrupt>
     142:	00 00       	nop
     144:	81 c0       	rjmp	.+258    	; 0x248 <__bad_interrupt>
     146:	00 00       	nop
     148:	7f c0       	rjmp	.+254    	; 0x248 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7d c0       	rjmp	.+250    	; 0x248 <__bad_interrupt>
     14e:	00 00       	nop
     150:	7b c0       	rjmp	.+246    	; 0x248 <__bad_interrupt>
     152:	00 00       	nop
     154:	79 c0       	rjmp	.+242    	; 0x248 <__bad_interrupt>
     156:	00 00       	nop
     158:	77 c0       	rjmp	.+238    	; 0x248 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	75 c0       	rjmp	.+234    	; 0x248 <__bad_interrupt>
     15e:	00 00       	nop
     160:	73 c0       	rjmp	.+230    	; 0x248 <__bad_interrupt>
     162:	00 00       	nop
     164:	71 c0       	rjmp	.+226    	; 0x248 <__bad_interrupt>
     166:	00 00       	nop
     168:	6f c0       	rjmp	.+222    	; 0x248 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6d c0       	rjmp	.+218    	; 0x248 <__bad_interrupt>
     16e:	00 00       	nop
     170:	6b c0       	rjmp	.+214    	; 0x248 <__bad_interrupt>
     172:	00 00       	nop
     174:	69 c0       	rjmp	.+210    	; 0x248 <__bad_interrupt>
     176:	00 00       	nop
     178:	67 c0       	rjmp	.+206    	; 0x248 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	65 c0       	rjmp	.+202    	; 0x248 <__bad_interrupt>
     17e:	00 00       	nop
     180:	63 c0       	rjmp	.+198    	; 0x248 <__bad_interrupt>
     182:	00 00       	nop
     184:	61 c0       	rjmp	.+194    	; 0x248 <__bad_interrupt>
     186:	00 00       	nop
     188:	5f c0       	rjmp	.+190    	; 0x248 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5d c0       	rjmp	.+186    	; 0x248 <__bad_interrupt>
     18e:	00 00       	nop
     190:	5b c0       	rjmp	.+182    	; 0x248 <__bad_interrupt>
     192:	00 00       	nop
     194:	59 c0       	rjmp	.+178    	; 0x248 <__bad_interrupt>
     196:	00 00       	nop
     198:	57 c0       	rjmp	.+174    	; 0x248 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	55 c0       	rjmp	.+170    	; 0x248 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	53 c0       	rjmp	.+166    	; 0x248 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	51 c0       	rjmp	.+162    	; 0x248 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4f c0       	rjmp	.+158    	; 0x248 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4d c0       	rjmp	.+154    	; 0x248 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	4b c0       	rjmp	.+150    	; 0x248 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	49 c0       	rjmp	.+146    	; 0x248 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	47 c0       	rjmp	.+142    	; 0x248 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	45 c0       	rjmp	.+138    	; 0x248 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	43 c0       	rjmp	.+134    	; 0x248 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	41 c0       	rjmp	.+130    	; 0x248 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3f c0       	rjmp	.+126    	; 0x248 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3d c0       	rjmp	.+122    	; 0x248 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	3b c0       	rjmp	.+118    	; 0x248 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	39 c0       	rjmp	.+114    	; 0x248 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	37 c0       	rjmp	.+110    	; 0x248 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	35 c0       	rjmp	.+106    	; 0x248 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	33 c0       	rjmp	.+102    	; 0x248 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	31 c0       	rjmp	.+98     	; 0x248 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2f c0       	rjmp	.+94     	; 0x248 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2d c0       	rjmp	.+90     	; 0x248 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2b c0       	rjmp	.+86     	; 0x248 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	29 c0       	rjmp	.+82     	; 0x248 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	27 c0       	rjmp	.+78     	; 0x248 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	11 e2       	ldi	r17, 0x21	; 33
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	ec e2       	ldi	r30, 0x2C	; 44
     21c:	ff e2       	ldi	r31, 0x2F	; 47
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a6 3b       	cpi	r26, 0xB6	; 182
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	22 e2       	ldi	r18, 0x22	; 34
     232:	a6 eb       	ldi	r26, 0xB6	; 182
     234:	b1 e2       	ldi	r27, 0x21	; 33
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	a5 34       	cpi	r26, 0x45	; 69
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	0e 94 9e 10 	call	0x213c	; 0x213c <main>
     244:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <_exit>

00000248 <__bad_interrupt>:
     248:	db ce       	rjmp	.-586    	; 0x0 <__vectors>

0000024a <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     24a:	81 15       	cp	r24, r1
     24c:	22 e0       	ldi	r18, 0x02	; 2
     24e:	92 07       	cpc	r25, r18
     250:	61 f4       	brne	.+24     	; 0x26a <adc_enable_clock+0x20>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     252:	80 91 b7 21 	lds	r24, 0x21B7	; 0x8021b7 <adca_enable_count>
     256:	91 e0       	ldi	r25, 0x01	; 1
     258:	98 0f       	add	r25, r24
     25a:	90 93 b7 21 	sts	0x21B7, r25	; 0x8021b7 <adca_enable_count>
     25e:	81 11       	cpse	r24, r1
     260:	12 c0       	rjmp	.+36     	; 0x286 <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     262:	62 e0       	ldi	r22, 0x02	; 2
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	55 c6       	rjmp	.+3242   	; 0xf12 <sysclk_enable_module>
     268:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     26a:	80 34       	cpi	r24, 0x40	; 64
     26c:	92 40       	sbci	r25, 0x02	; 2
     26e:	59 f4       	brne	.+22     	; 0x286 <adc_enable_clock+0x3c>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     270:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <__data_end>
     274:	91 e0       	ldi	r25, 0x01	; 1
     276:	98 0f       	add	r25, r24
     278:	90 93 b6 21 	sts	0x21B6, r25	; 0x8021b6 <__data_end>
     27c:	81 11       	cpse	r24, r1
     27e:	03 c0       	rjmp	.+6      	; 0x286 <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     280:	62 e0       	ldi	r22, 0x02	; 2
     282:	82 e0       	ldi	r24, 0x02	; 2
     284:	46 c6       	rjmp	.+3212   	; 0xf12 <sysclk_enable_module>
     286:	08 95       	ret

00000288 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     288:	81 15       	cp	r24, r1
     28a:	22 e0       	ldi	r18, 0x02	; 2
     28c:	92 07       	cpc	r25, r18
     28e:	59 f4       	brne	.+22     	; 0x2a6 <adc_disable_clock+0x1e>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     290:	80 91 b7 21 	lds	r24, 0x21B7	; 0x8021b7 <adca_enable_count>
     294:	81 50       	subi	r24, 0x01	; 1
     296:	80 93 b7 21 	sts	0x21B7, r24	; 0x8021b7 <adca_enable_count>
     29a:	81 11       	cpse	r24, r1
     29c:	11 c0       	rjmp	.+34     	; 0x2c0 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     29e:	62 e0       	ldi	r22, 0x02	; 2
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	4d c6       	rjmp	.+3226   	; 0xf3e <sysclk_disable_module>
     2a4:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     2a6:	80 34       	cpi	r24, 0x40	; 64
     2a8:	92 40       	sbci	r25, 0x02	; 2
     2aa:	51 f4       	brne	.+20     	; 0x2c0 <adc_disable_clock+0x38>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     2ac:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <__data_end>
     2b0:	81 50       	subi	r24, 0x01	; 1
     2b2:	80 93 b6 21 	sts	0x21B6, r24	; 0x8021b6 <__data_end>
     2b6:	81 11       	cpse	r24, r1
     2b8:	03 c0       	rjmp	.+6      	; 0x2c0 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     2ba:	62 e0       	ldi	r22, 0x02	; 2
     2bc:	82 e0       	ldi	r24, 0x02	; 2
     2be:	3f c6       	rjmp	.+3198   	; 0xf3e <sysclk_disable_module>
     2c0:	08 95       	ret

000002c2 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     2c2:	ef 92       	push	r14
     2c4:	ff 92       	push	r15
     2c6:	1f 93       	push	r17
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	1f 92       	push	r1
     2ce:	1f 92       	push	r1
     2d0:	cd b7       	in	r28, 0x3d	; 61
     2d2:	de b7       	in	r29, 0x3e	; 62
     2d4:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     2d6:	8f b7       	in	r24, 0x3f	; 63
     2d8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     2da:	f8 94       	cli
	return flags;
     2dc:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     2de:	c7 01       	movw	r24, r14
     2e0:	b4 df       	rcall	.-152    	; 0x24a <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     2e2:	f7 01       	movw	r30, r14
     2e4:	80 81       	ld	r24, Z
     2e6:	81 60       	ori	r24, 0x01	; 1
     2e8:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     2ea:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     2ec:	80 91 2a 22 	lds	r24, 0x222A	; 0x80222a <sleepmgr_locks+0x1>
     2f0:	8f 3f       	cpi	r24, 0xFF	; 255
     2f2:	09 f4       	brne	.+2      	; 0x2f6 <adc_enable+0x34>
     2f4:	ff cf       	rjmp	.-2      	; 0x2f4 <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     2f6:	8f b7       	in	r24, 0x3f	; 63
     2f8:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     2fa:	f8 94       	cli
	return flags;
     2fc:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     2fe:	e9 e2       	ldi	r30, 0x29	; 41
     300:	f2 e2       	ldi	r31, 0x22	; 34
     302:	81 81       	ldd	r24, Z+1	; 0x01
     304:	8f 5f       	subi	r24, 0xFF	; 255
     306:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     308:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     30a:	0f 90       	pop	r0
     30c:	0f 90       	pop	r0
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	1f 91       	pop	r17
     314:	ff 90       	pop	r15
     316:	ef 90       	pop	r14
     318:	08 95       	ret

0000031a <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     31a:	1f 92       	push	r1
     31c:	0f 92       	push	r0
     31e:	0f b6       	in	r0, 0x3f	; 63
     320:	0f 92       	push	r0
     322:	11 24       	eor	r1, r1
     324:	08 b6       	in	r0, 0x38	; 56
     326:	0f 92       	push	r0
     328:	18 be       	out	0x38, r1	; 56
     32a:	09 b6       	in	r0, 0x39	; 57
     32c:	0f 92       	push	r0
     32e:	19 be       	out	0x39, r1	; 57
     330:	0b b6       	in	r0, 0x3b	; 59
     332:	0f 92       	push	r0
     334:	1b be       	out	0x3b, r1	; 59
     336:	2f 93       	push	r18
     338:	3f 93       	push	r19
     33a:	4f 93       	push	r20
     33c:	5f 93       	push	r21
     33e:	6f 93       	push	r22
     340:	7f 93       	push	r23
     342:	8f 93       	push	r24
     344:	9f 93       	push	r25
     346:	af 93       	push	r26
     348:	bf 93       	push	r27
     34a:	ef 93       	push	r30
     34c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     34e:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     352:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     356:	e0 91 31 22 	lds	r30, 0x2231	; 0x802231 <adca_callback>
     35a:	f0 91 32 22 	lds	r31, 0x2232	; 0x802232 <adca_callback+0x1>
     35e:	61 e0       	ldi	r22, 0x01	; 1
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	92 e0       	ldi	r25, 0x02	; 2
     364:	19 95       	eicall
}
     366:	ff 91       	pop	r31
     368:	ef 91       	pop	r30
     36a:	bf 91       	pop	r27
     36c:	af 91       	pop	r26
     36e:	9f 91       	pop	r25
     370:	8f 91       	pop	r24
     372:	7f 91       	pop	r23
     374:	6f 91       	pop	r22
     376:	5f 91       	pop	r21
     378:	4f 91       	pop	r20
     37a:	3f 91       	pop	r19
     37c:	2f 91       	pop	r18
     37e:	0f 90       	pop	r0
     380:	0b be       	out	0x3b, r0	; 59
     382:	0f 90       	pop	r0
     384:	09 be       	out	0x39, r0	; 57
     386:	0f 90       	pop	r0
     388:	08 be       	out	0x38, r0	; 56
     38a:	0f 90       	pop	r0
     38c:	0f be       	out	0x3f, r0	; 63
     38e:	0f 90       	pop	r0
     390:	1f 90       	pop	r1
     392:	18 95       	reti

00000394 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     394:	1f 92       	push	r1
     396:	0f 92       	push	r0
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	0f 92       	push	r0
     39c:	11 24       	eor	r1, r1
     39e:	08 b6       	in	r0, 0x38	; 56
     3a0:	0f 92       	push	r0
     3a2:	18 be       	out	0x38, r1	; 56
     3a4:	09 b6       	in	r0, 0x39	; 57
     3a6:	0f 92       	push	r0
     3a8:	19 be       	out	0x39, r1	; 57
     3aa:	0b b6       	in	r0, 0x3b	; 59
     3ac:	0f 92       	push	r0
     3ae:	1b be       	out	0x3b, r1	; 59
     3b0:	2f 93       	push	r18
     3b2:	3f 93       	push	r19
     3b4:	4f 93       	push	r20
     3b6:	5f 93       	push	r21
     3b8:	6f 93       	push	r22
     3ba:	7f 93       	push	r23
     3bc:	8f 93       	push	r24
     3be:	9f 93       	push	r25
     3c0:	af 93       	push	r26
     3c2:	bf 93       	push	r27
     3c4:	ef 93       	push	r30
     3c6:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     3c8:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     3cc:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     3d0:	e0 91 31 22 	lds	r30, 0x2231	; 0x802231 <adca_callback>
     3d4:	f0 91 32 22 	lds	r31, 0x2232	; 0x802232 <adca_callback+0x1>
     3d8:	62 e0       	ldi	r22, 0x02	; 2
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	92 e0       	ldi	r25, 0x02	; 2
     3de:	19 95       	eicall
}
     3e0:	ff 91       	pop	r31
     3e2:	ef 91       	pop	r30
     3e4:	bf 91       	pop	r27
     3e6:	af 91       	pop	r26
     3e8:	9f 91       	pop	r25
     3ea:	8f 91       	pop	r24
     3ec:	7f 91       	pop	r23
     3ee:	6f 91       	pop	r22
     3f0:	5f 91       	pop	r21
     3f2:	4f 91       	pop	r20
     3f4:	3f 91       	pop	r19
     3f6:	2f 91       	pop	r18
     3f8:	0f 90       	pop	r0
     3fa:	0b be       	out	0x3b, r0	; 59
     3fc:	0f 90       	pop	r0
     3fe:	09 be       	out	0x39, r0	; 57
     400:	0f 90       	pop	r0
     402:	08 be       	out	0x38, r0	; 56
     404:	0f 90       	pop	r0
     406:	0f be       	out	0x3f, r0	; 63
     408:	0f 90       	pop	r0
     40a:	1f 90       	pop	r1
     40c:	18 95       	reti

0000040e <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     40e:	1f 92       	push	r1
     410:	0f 92       	push	r0
     412:	0f b6       	in	r0, 0x3f	; 63
     414:	0f 92       	push	r0
     416:	11 24       	eor	r1, r1
     418:	08 b6       	in	r0, 0x38	; 56
     41a:	0f 92       	push	r0
     41c:	18 be       	out	0x38, r1	; 56
     41e:	09 b6       	in	r0, 0x39	; 57
     420:	0f 92       	push	r0
     422:	19 be       	out	0x39, r1	; 57
     424:	0b b6       	in	r0, 0x3b	; 59
     426:	0f 92       	push	r0
     428:	1b be       	out	0x3b, r1	; 59
     42a:	2f 93       	push	r18
     42c:	3f 93       	push	r19
     42e:	4f 93       	push	r20
     430:	5f 93       	push	r21
     432:	6f 93       	push	r22
     434:	7f 93       	push	r23
     436:	8f 93       	push	r24
     438:	9f 93       	push	r25
     43a:	af 93       	push	r26
     43c:	bf 93       	push	r27
     43e:	ef 93       	push	r30
     440:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     442:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     446:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     44a:	e0 91 31 22 	lds	r30, 0x2231	; 0x802231 <adca_callback>
     44e:	f0 91 32 22 	lds	r31, 0x2232	; 0x802232 <adca_callback+0x1>
     452:	64 e0       	ldi	r22, 0x04	; 4
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	92 e0       	ldi	r25, 0x02	; 2
     458:	19 95       	eicall
}
     45a:	ff 91       	pop	r31
     45c:	ef 91       	pop	r30
     45e:	bf 91       	pop	r27
     460:	af 91       	pop	r26
     462:	9f 91       	pop	r25
     464:	8f 91       	pop	r24
     466:	7f 91       	pop	r23
     468:	6f 91       	pop	r22
     46a:	5f 91       	pop	r21
     46c:	4f 91       	pop	r20
     46e:	3f 91       	pop	r19
     470:	2f 91       	pop	r18
     472:	0f 90       	pop	r0
     474:	0b be       	out	0x3b, r0	; 59
     476:	0f 90       	pop	r0
     478:	09 be       	out	0x39, r0	; 57
     47a:	0f 90       	pop	r0
     47c:	08 be       	out	0x38, r0	; 56
     47e:	0f 90       	pop	r0
     480:	0f be       	out	0x3f, r0	; 63
     482:	0f 90       	pop	r0
     484:	1f 90       	pop	r1
     486:	18 95       	reti

00000488 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     488:	1f 92       	push	r1
     48a:	0f 92       	push	r0
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	0f 92       	push	r0
     490:	11 24       	eor	r1, r1
     492:	08 b6       	in	r0, 0x38	; 56
     494:	0f 92       	push	r0
     496:	18 be       	out	0x38, r1	; 56
     498:	09 b6       	in	r0, 0x39	; 57
     49a:	0f 92       	push	r0
     49c:	19 be       	out	0x39, r1	; 57
     49e:	0b b6       	in	r0, 0x3b	; 59
     4a0:	0f 92       	push	r0
     4a2:	1b be       	out	0x3b, r1	; 59
     4a4:	2f 93       	push	r18
     4a6:	3f 93       	push	r19
     4a8:	4f 93       	push	r20
     4aa:	5f 93       	push	r21
     4ac:	6f 93       	push	r22
     4ae:	7f 93       	push	r23
     4b0:	8f 93       	push	r24
     4b2:	9f 93       	push	r25
     4b4:	af 93       	push	r26
     4b6:	bf 93       	push	r27
     4b8:	ef 93       	push	r30
     4ba:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     4bc:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     4c0:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     4c4:	e0 91 31 22 	lds	r30, 0x2231	; 0x802231 <adca_callback>
     4c8:	f0 91 32 22 	lds	r31, 0x2232	; 0x802232 <adca_callback+0x1>
     4cc:	68 e0       	ldi	r22, 0x08	; 8
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	92 e0       	ldi	r25, 0x02	; 2
     4d2:	19 95       	eicall
}
     4d4:	ff 91       	pop	r31
     4d6:	ef 91       	pop	r30
     4d8:	bf 91       	pop	r27
     4da:	af 91       	pop	r26
     4dc:	9f 91       	pop	r25
     4de:	8f 91       	pop	r24
     4e0:	7f 91       	pop	r23
     4e2:	6f 91       	pop	r22
     4e4:	5f 91       	pop	r21
     4e6:	4f 91       	pop	r20
     4e8:	3f 91       	pop	r19
     4ea:	2f 91       	pop	r18
     4ec:	0f 90       	pop	r0
     4ee:	0b be       	out	0x3b, r0	; 59
     4f0:	0f 90       	pop	r0
     4f2:	09 be       	out	0x39, r0	; 57
     4f4:	0f 90       	pop	r0
     4f6:	08 be       	out	0x38, r0	; 56
     4f8:	0f 90       	pop	r0
     4fa:	0f be       	out	0x3f, r0	; 63
     4fc:	0f 90       	pop	r0
     4fe:	1f 90       	pop	r1
     500:	18 95       	reti

00000502 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     502:	1f 92       	push	r1
     504:	0f 92       	push	r0
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	0f 92       	push	r0
     50a:	11 24       	eor	r1, r1
     50c:	08 b6       	in	r0, 0x38	; 56
     50e:	0f 92       	push	r0
     510:	18 be       	out	0x38, r1	; 56
     512:	09 b6       	in	r0, 0x39	; 57
     514:	0f 92       	push	r0
     516:	19 be       	out	0x39, r1	; 57
     518:	0b b6       	in	r0, 0x3b	; 59
     51a:	0f 92       	push	r0
     51c:	1b be       	out	0x3b, r1	; 59
     51e:	2f 93       	push	r18
     520:	3f 93       	push	r19
     522:	4f 93       	push	r20
     524:	5f 93       	push	r21
     526:	6f 93       	push	r22
     528:	7f 93       	push	r23
     52a:	8f 93       	push	r24
     52c:	9f 93       	push	r25
     52e:	af 93       	push	r26
     530:	bf 93       	push	r27
     532:	ef 93       	push	r30
     534:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     536:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     53a:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     53e:	e0 91 2f 22 	lds	r30, 0x222F	; 0x80222f <adcb_callback>
     542:	f0 91 30 22 	lds	r31, 0x2230	; 0x802230 <adcb_callback+0x1>
     546:	61 e0       	ldi	r22, 0x01	; 1
     548:	80 e4       	ldi	r24, 0x40	; 64
     54a:	92 e0       	ldi	r25, 0x02	; 2
     54c:	19 95       	eicall
}
     54e:	ff 91       	pop	r31
     550:	ef 91       	pop	r30
     552:	bf 91       	pop	r27
     554:	af 91       	pop	r26
     556:	9f 91       	pop	r25
     558:	8f 91       	pop	r24
     55a:	7f 91       	pop	r23
     55c:	6f 91       	pop	r22
     55e:	5f 91       	pop	r21
     560:	4f 91       	pop	r20
     562:	3f 91       	pop	r19
     564:	2f 91       	pop	r18
     566:	0f 90       	pop	r0
     568:	0b be       	out	0x3b, r0	; 59
     56a:	0f 90       	pop	r0
     56c:	09 be       	out	0x39, r0	; 57
     56e:	0f 90       	pop	r0
     570:	08 be       	out	0x38, r0	; 56
     572:	0f 90       	pop	r0
     574:	0f be       	out	0x3f, r0	; 63
     576:	0f 90       	pop	r0
     578:	1f 90       	pop	r1
     57a:	18 95       	reti

0000057c <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     57c:	1f 92       	push	r1
     57e:	0f 92       	push	r0
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	0f 92       	push	r0
     584:	11 24       	eor	r1, r1
     586:	08 b6       	in	r0, 0x38	; 56
     588:	0f 92       	push	r0
     58a:	18 be       	out	0x38, r1	; 56
     58c:	09 b6       	in	r0, 0x39	; 57
     58e:	0f 92       	push	r0
     590:	19 be       	out	0x39, r1	; 57
     592:	0b b6       	in	r0, 0x3b	; 59
     594:	0f 92       	push	r0
     596:	1b be       	out	0x3b, r1	; 59
     598:	2f 93       	push	r18
     59a:	3f 93       	push	r19
     59c:	4f 93       	push	r20
     59e:	5f 93       	push	r21
     5a0:	6f 93       	push	r22
     5a2:	7f 93       	push	r23
     5a4:	8f 93       	push	r24
     5a6:	9f 93       	push	r25
     5a8:	af 93       	push	r26
     5aa:	bf 93       	push	r27
     5ac:	ef 93       	push	r30
     5ae:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     5b0:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     5b4:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     5b8:	e0 91 2f 22 	lds	r30, 0x222F	; 0x80222f <adcb_callback>
     5bc:	f0 91 30 22 	lds	r31, 0x2230	; 0x802230 <adcb_callback+0x1>
     5c0:	62 e0       	ldi	r22, 0x02	; 2
     5c2:	80 e4       	ldi	r24, 0x40	; 64
     5c4:	92 e0       	ldi	r25, 0x02	; 2
     5c6:	19 95       	eicall
}
     5c8:	ff 91       	pop	r31
     5ca:	ef 91       	pop	r30
     5cc:	bf 91       	pop	r27
     5ce:	af 91       	pop	r26
     5d0:	9f 91       	pop	r25
     5d2:	8f 91       	pop	r24
     5d4:	7f 91       	pop	r23
     5d6:	6f 91       	pop	r22
     5d8:	5f 91       	pop	r21
     5da:	4f 91       	pop	r20
     5dc:	3f 91       	pop	r19
     5de:	2f 91       	pop	r18
     5e0:	0f 90       	pop	r0
     5e2:	0b be       	out	0x3b, r0	; 59
     5e4:	0f 90       	pop	r0
     5e6:	09 be       	out	0x39, r0	; 57
     5e8:	0f 90       	pop	r0
     5ea:	08 be       	out	0x38, r0	; 56
     5ec:	0f 90       	pop	r0
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	0f 90       	pop	r0
     5f2:	1f 90       	pop	r1
     5f4:	18 95       	reti

000005f6 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     5f6:	1f 92       	push	r1
     5f8:	0f 92       	push	r0
     5fa:	0f b6       	in	r0, 0x3f	; 63
     5fc:	0f 92       	push	r0
     5fe:	11 24       	eor	r1, r1
     600:	08 b6       	in	r0, 0x38	; 56
     602:	0f 92       	push	r0
     604:	18 be       	out	0x38, r1	; 56
     606:	09 b6       	in	r0, 0x39	; 57
     608:	0f 92       	push	r0
     60a:	19 be       	out	0x39, r1	; 57
     60c:	0b b6       	in	r0, 0x3b	; 59
     60e:	0f 92       	push	r0
     610:	1b be       	out	0x3b, r1	; 59
     612:	2f 93       	push	r18
     614:	3f 93       	push	r19
     616:	4f 93       	push	r20
     618:	5f 93       	push	r21
     61a:	6f 93       	push	r22
     61c:	7f 93       	push	r23
     61e:	8f 93       	push	r24
     620:	9f 93       	push	r25
     622:	af 93       	push	r26
     624:	bf 93       	push	r27
     626:	ef 93       	push	r30
     628:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     62a:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     62e:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     632:	e0 91 2f 22 	lds	r30, 0x222F	; 0x80222f <adcb_callback>
     636:	f0 91 30 22 	lds	r31, 0x2230	; 0x802230 <adcb_callback+0x1>
     63a:	64 e0       	ldi	r22, 0x04	; 4
     63c:	80 e4       	ldi	r24, 0x40	; 64
     63e:	92 e0       	ldi	r25, 0x02	; 2
     640:	19 95       	eicall
}
     642:	ff 91       	pop	r31
     644:	ef 91       	pop	r30
     646:	bf 91       	pop	r27
     648:	af 91       	pop	r26
     64a:	9f 91       	pop	r25
     64c:	8f 91       	pop	r24
     64e:	7f 91       	pop	r23
     650:	6f 91       	pop	r22
     652:	5f 91       	pop	r21
     654:	4f 91       	pop	r20
     656:	3f 91       	pop	r19
     658:	2f 91       	pop	r18
     65a:	0f 90       	pop	r0
     65c:	0b be       	out	0x3b, r0	; 59
     65e:	0f 90       	pop	r0
     660:	09 be       	out	0x39, r0	; 57
     662:	0f 90       	pop	r0
     664:	08 be       	out	0x38, r0	; 56
     666:	0f 90       	pop	r0
     668:	0f be       	out	0x3f, r0	; 63
     66a:	0f 90       	pop	r0
     66c:	1f 90       	pop	r1
     66e:	18 95       	reti

00000670 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     670:	1f 92       	push	r1
     672:	0f 92       	push	r0
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	0f 92       	push	r0
     678:	11 24       	eor	r1, r1
     67a:	08 b6       	in	r0, 0x38	; 56
     67c:	0f 92       	push	r0
     67e:	18 be       	out	0x38, r1	; 56
     680:	09 b6       	in	r0, 0x39	; 57
     682:	0f 92       	push	r0
     684:	19 be       	out	0x39, r1	; 57
     686:	0b b6       	in	r0, 0x3b	; 59
     688:	0f 92       	push	r0
     68a:	1b be       	out	0x3b, r1	; 59
     68c:	2f 93       	push	r18
     68e:	3f 93       	push	r19
     690:	4f 93       	push	r20
     692:	5f 93       	push	r21
     694:	6f 93       	push	r22
     696:	7f 93       	push	r23
     698:	8f 93       	push	r24
     69a:	9f 93       	push	r25
     69c:	af 93       	push	r26
     69e:	bf 93       	push	r27
     6a0:	ef 93       	push	r30
     6a2:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     6a4:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     6a8:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     6ac:	e0 91 2f 22 	lds	r30, 0x222F	; 0x80222f <adcb_callback>
     6b0:	f0 91 30 22 	lds	r31, 0x2230	; 0x802230 <adcb_callback+0x1>
     6b4:	68 e0       	ldi	r22, 0x08	; 8
     6b6:	80 e4       	ldi	r24, 0x40	; 64
     6b8:	92 e0       	ldi	r25, 0x02	; 2
     6ba:	19 95       	eicall
}
     6bc:	ff 91       	pop	r31
     6be:	ef 91       	pop	r30
     6c0:	bf 91       	pop	r27
     6c2:	af 91       	pop	r26
     6c4:	9f 91       	pop	r25
     6c6:	8f 91       	pop	r24
     6c8:	7f 91       	pop	r23
     6ca:	6f 91       	pop	r22
     6cc:	5f 91       	pop	r21
     6ce:	4f 91       	pop	r20
     6d0:	3f 91       	pop	r19
     6d2:	2f 91       	pop	r18
     6d4:	0f 90       	pop	r0
     6d6:	0b be       	out	0x3b, r0	; 59
     6d8:	0f 90       	pop	r0
     6da:	09 be       	out	0x39, r0	; 57
     6dc:	0f 90       	pop	r0
     6de:	08 be       	out	0x38, r0	; 56
     6e0:	0f 90       	pop	r0
     6e2:	0f be       	out	0x3f, r0	; 63
     6e4:	0f 90       	pop	r0
     6e6:	1f 90       	pop	r1
     6e8:	18 95       	reti

000006ea <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
     6ea:	bf 92       	push	r11
     6ec:	cf 92       	push	r12
     6ee:	df 92       	push	r13
     6f0:	ef 92       	push	r14
     6f2:	ff 92       	push	r15
     6f4:	0f 93       	push	r16
     6f6:	1f 93       	push	r17
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	1f 92       	push	r1
     6fe:	cd b7       	in	r28, 0x3d	; 61
     700:	de b7       	in	r29, 0x3e	; 62
     702:	8c 01       	movw	r16, r24
     704:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     706:	81 15       	cp	r24, r1
     708:	22 e0       	ldi	r18, 0x02	; 2
     70a:	92 07       	cpc	r25, r18
     70c:	71 f4       	brne	.+28     	; 0x72a <adc_write_configuration+0x40>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     70e:	61 e2       	ldi	r22, 0x21	; 33
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	82 e0       	ldi	r24, 0x02	; 2
     714:	75 d4       	rcall	.+2282   	; 0x1000 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     716:	c8 2e       	mov	r12, r24
     718:	d1 2c       	mov	r13, r1
     71a:	60 e2       	ldi	r22, 0x20	; 32
     71c:	70 e0       	ldi	r23, 0x00	; 0
     71e:	82 e0       	ldi	r24, 0x02	; 2
     720:	6f d4       	rcall	.+2270   	; 0x1000 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
     722:	dc 2c       	mov	r13, r12
     724:	cc 24       	eor	r12, r12
     726:	c8 2a       	or	r12, r24
     728:	10 c0       	rjmp	.+32     	; 0x74a <adc_write_configuration+0x60>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     72a:	80 34       	cpi	r24, 0x40	; 64
     72c:	92 40       	sbci	r25, 0x02	; 2
     72e:	c1 f5       	brne	.+112    	; 0x7a0 <adc_write_configuration+0xb6>
     730:	65 e2       	ldi	r22, 0x25	; 37
     732:	70 e0       	ldi	r23, 0x00	; 0
     734:	82 e0       	ldi	r24, 0x02	; 2
     736:	64 d4       	rcall	.+2248   	; 0x1000 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
     738:	c8 2e       	mov	r12, r24
     73a:	d1 2c       	mov	r13, r1
     73c:	64 e2       	ldi	r22, 0x24	; 36
     73e:	70 e0       	ldi	r23, 0x00	; 0
     740:	82 e0       	ldi	r24, 0x02	; 2
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
     742:	5e d4       	rcall	.+2236   	; 0x1000 <nvm_read_byte>
     744:	dc 2c       	mov	r13, r12
     746:	cc 24       	eor	r12, r12

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     748:	c8 2a       	or	r12, r24
	cpu_irq_disable();
     74a:	8f b7       	in	r24, 0x3f	; 63
	return flags;
     74c:	89 83       	std	Y+1, r24	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
     74e:	f8 94       	cli
     750:	b9 80       	ldd	r11, Y+1	; 0x01
     752:	c8 01       	movw	r24, r16
	enable = adc->CTRLA & ADC_ENABLE_bm;
     754:	7a dd       	rcall	.-1292   	; 0x24a <adc_enable_clock>
     756:	f8 01       	movw	r30, r16

	adc->CTRLA = ADC_FLUSH_bm;
     758:	80 81       	ld	r24, Z
     75a:	92 e0       	ldi	r25, 0x02	; 2
	adc->CAL = cal;
     75c:	90 83       	st	Z, r25
     75e:	c4 86       	std	Z+12, r12	; 0x0c
	adc->CMP = conf->cmp;
     760:	d5 86       	std	Z+13, r13	; 0x0d
     762:	f7 01       	movw	r30, r14
     764:	25 81       	ldd	r18, Z+5	; 0x05
     766:	36 81       	ldd	r19, Z+6	; 0x06
     768:	f8 01       	movw	r30, r16
     76a:	20 8f       	std	Z+24, r18	; 0x18
	adc->REFCTRL = conf->refctrl;
     76c:	31 8f       	std	Z+25, r19	; 0x19
     76e:	f7 01       	movw	r30, r14
     770:	92 81       	ldd	r25, Z+2	; 0x02
     772:	f8 01       	movw	r30, r16
	adc->PRESCALER = conf->prescaler;
     774:	92 83       	std	Z+2, r25	; 0x02
     776:	f7 01       	movw	r30, r14
     778:	94 81       	ldd	r25, Z+4	; 0x04
     77a:	f8 01       	movw	r30, r16
	adc->EVCTRL = conf->evctrl;
     77c:	94 83       	std	Z+4, r25	; 0x04
     77e:	f7 01       	movw	r30, r14
     780:	93 81       	ldd	r25, Z+3	; 0x03
     782:	f8 01       	movw	r30, r16
	adc->CTRLB = conf->ctrlb;
     784:	93 83       	std	Z+3, r25	; 0x03
     786:	f7 01       	movw	r30, r14
     788:	91 81       	ldd	r25, Z+1	; 0x01
     78a:	f8 01       	movw	r30, r16

	adc->CTRLA = enable | conf->ctrla;
     78c:	91 83       	std	Z+1, r25	; 0x01
     78e:	81 70       	andi	r24, 0x01	; 1
     790:	f7 01       	movw	r30, r14
     792:	90 81       	ld	r25, Z
     794:	89 2b       	or	r24, r25

	adc_disable_clock(adc);
     796:	f8 01       	movw	r30, r16
     798:	80 83       	st	Z, r24
     79a:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     79c:	75 dd       	rcall	.-1302   	; 0x288 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     79e:	bf be       	out	0x3f, r11	; 63
     7a0:	0f 90       	pop	r0
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
     7aa:	ff 90       	pop	r15
     7ac:	ef 90       	pop	r14
     7ae:	df 90       	pop	r13
     7b0:	cf 90       	pop	r12
     7b2:	bf 90       	pop	r11
     7b4:	08 95       	ret

000007b6 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
     7b6:	df 92       	push	r13
     7b8:	ef 92       	push	r14
     7ba:	ff 92       	push	r15
     7bc:	0f 93       	push	r16
     7be:	1f 93       	push	r17
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	1f 92       	push	r1
     7c6:	cd b7       	in	r28, 0x3d	; 61
     7c8:	de b7       	in	r29, 0x3e	; 62
     7ca:	8c 01       	movw	r16, r24
     7cc:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     7ce:	8f b7       	in	r24, 0x3f	; 63
     7d0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     7d2:	f8 94       	cli
	return flags;
     7d4:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
     7d6:	c8 01       	movw	r24, r16
     7d8:	38 dd       	rcall	.-1424   	; 0x24a <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
     7da:	f8 01       	movw	r30, r16
     7dc:	80 81       	ld	r24, Z
     7de:	80 7c       	andi	r24, 0xC0	; 192
     7e0:	f7 01       	movw	r30, r14
     7e2:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
     7e4:	f8 01       	movw	r30, r16
     7e6:	80 8d       	ldd	r24, Z+24	; 0x18
     7e8:	91 8d       	ldd	r25, Z+25	; 0x19
     7ea:	f7 01       	movw	r30, r14
     7ec:	85 83       	std	Z+5, r24	; 0x05
     7ee:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
     7f0:	f8 01       	movw	r30, r16
     7f2:	82 81       	ldd	r24, Z+2	; 0x02
     7f4:	f7 01       	movw	r30, r14
     7f6:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
     7f8:	f8 01       	movw	r30, r16
     7fa:	84 81       	ldd	r24, Z+4	; 0x04
     7fc:	f7 01       	movw	r30, r14
     7fe:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
     800:	f8 01       	movw	r30, r16
     802:	83 81       	ldd	r24, Z+3	; 0x03
     804:	f7 01       	movw	r30, r14
     806:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
     808:	f8 01       	movw	r30, r16
     80a:	81 81       	ldd	r24, Z+1	; 0x01
     80c:	f7 01       	movw	r30, r14

	adc_disable_clock(adc);
     80e:	81 83       	std	Z+1, r24	; 0x01
     810:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     812:	3a dd       	rcall	.-1420   	; 0x288 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     814:	df be       	out	0x3f, r13	; 63
     816:	0f 90       	pop	r0
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	1f 91       	pop	r17
     81e:	0f 91       	pop	r16
     820:	ff 90       	pop	r15
     822:	ef 90       	pop	r14
     824:	df 90       	pop	r13
     826:	08 95       	ret

00000828 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
     828:	af 92       	push	r10
     82a:	bf 92       	push	r11
     82c:	cf 92       	push	r12
     82e:	df 92       	push	r13
     830:	ef 92       	push	r14
     832:	ff 92       	push	r15
     834:	0f 93       	push	r16
     836:	1f 93       	push	r17
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
     83c:	1f 92       	push	r1
     83e:	cd b7       	in	r28, 0x3d	; 61
     840:	de b7       	in	r29, 0x3e	; 62
     842:	6c 01       	movw	r12, r24
     844:	b6 2e       	mov	r11, r22
     846:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     848:	86 2f       	mov	r24, r22
     84a:	83 70       	andi	r24, 0x03	; 3
     84c:	29 f4       	brne	.+10     	; 0x858 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     84e:	96 2f       	mov	r25, r22
     850:	96 95       	lsr	r25
     852:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     854:	82 e0       	ldi	r24, 0x02	; 2
     856:	02 c0       	rjmp	.+4      	; 0x85c <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     858:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     85a:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     85c:	90 ff       	sbrs	r25, 0
		index++;
     85e:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     860:	86 01       	movw	r16, r12
     862:	00 5e       	subi	r16, 0xE0	; 224
     864:	1f 4f       	sbci	r17, 0xFF	; 255
     866:	98 e0       	ldi	r25, 0x08	; 8
     868:	89 9f       	mul	r24, r25
     86a:	00 0d       	add	r16, r0
     86c:	11 1d       	adc	r17, r1
     86e:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     870:	8f b7       	in	r24, 0x3f	; 63
     872:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     874:	f8 94       	cli
	return flags;
     876:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
     878:	c6 01       	movw	r24, r12
     87a:	e7 dc       	rcall	.-1586   	; 0x24a <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
     87c:	f7 01       	movw	r30, r14
     87e:	80 81       	ld	r24, Z
     880:	f8 01       	movw	r30, r16
     882:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
     884:	f7 01       	movw	r30, r14
     886:	82 81       	ldd	r24, Z+2	; 0x02
     888:	f8 01       	movw	r30, r16
     88a:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
     88c:	f7 01       	movw	r30, r14
     88e:	81 81       	ldd	r24, Z+1	; 0x01
     890:	f8 01       	movw	r30, r16
     892:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     894:	b0 fe       	sbrs	r11, 0
     896:	04 c0       	rjmp	.+8      	; 0x8a0 <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
     898:	f7 01       	movw	r30, r14
     89a:	83 81       	ldd	r24, Z+3	; 0x03
     89c:	f8 01       	movw	r30, r16
	}
	adc_disable_clock(adc);
     89e:	86 83       	std	Z+6, r24	; 0x06
     8a0:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     8a2:	f2 dc       	rcall	.-1564   	; 0x288 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     8a4:	af be       	out	0x3f, r10	; 63
     8a6:	0f 90       	pop	r0
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	1f 91       	pop	r17
     8ae:	0f 91       	pop	r16
     8b0:	ff 90       	pop	r15
     8b2:	ef 90       	pop	r14
     8b4:	df 90       	pop	r13
     8b6:	cf 90       	pop	r12
     8b8:	bf 90       	pop	r11
     8ba:	af 90       	pop	r10
     8bc:	08 95       	ret

000008be <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
     8be:	af 92       	push	r10
     8c0:	bf 92       	push	r11
     8c2:	cf 92       	push	r12
     8c4:	df 92       	push	r13
     8c6:	ef 92       	push	r14
     8c8:	ff 92       	push	r15
     8ca:	0f 93       	push	r16
     8cc:	1f 93       	push	r17
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	1f 92       	push	r1
     8d4:	cd b7       	in	r28, 0x3d	; 61
     8d6:	de b7       	in	r29, 0x3e	; 62
     8d8:	6c 01       	movw	r12, r24
     8da:	b6 2e       	mov	r11, r22
     8dc:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     8de:	86 2f       	mov	r24, r22
     8e0:	83 70       	andi	r24, 0x03	; 3
     8e2:	29 f4       	brne	.+10     	; 0x8ee <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     8e4:	96 2f       	mov	r25, r22
     8e6:	96 95       	lsr	r25
     8e8:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     8ea:	82 e0       	ldi	r24, 0x02	; 2
     8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     8ee:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     8f0:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     8f2:	90 ff       	sbrs	r25, 0
		index++;
     8f4:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     8f6:	86 01       	movw	r16, r12
     8f8:	00 5e       	subi	r16, 0xE0	; 224
     8fa:	1f 4f       	sbci	r17, 0xFF	; 255
     8fc:	98 e0       	ldi	r25, 0x08	; 8
     8fe:	89 9f       	mul	r24, r25
     900:	00 0d       	add	r16, r0
     902:	11 1d       	adc	r17, r1
     904:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     906:	8f b7       	in	r24, 0x3f	; 63
     908:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     90a:	f8 94       	cli
	return flags;
     90c:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
     90e:	c6 01       	movw	r24, r12
     910:	9c dc       	rcall	.-1736   	; 0x24a <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
     912:	f8 01       	movw	r30, r16
     914:	80 81       	ld	r24, Z
     916:	f7 01       	movw	r30, r14
     918:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
     91a:	f8 01       	movw	r30, r16
     91c:	82 81       	ldd	r24, Z+2	; 0x02
     91e:	f7 01       	movw	r30, r14
     920:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
     922:	f8 01       	movw	r30, r16
     924:	81 81       	ldd	r24, Z+1	; 0x01
     926:	f7 01       	movw	r30, r14
     928:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     92a:	b0 fe       	sbrs	r11, 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
     92e:	f8 01       	movw	r30, r16
     930:	86 81       	ldd	r24, Z+6	; 0x06
     932:	f7 01       	movw	r30, r14
	}
	adc_disable_clock(adc);
     934:	83 83       	std	Z+3, r24	; 0x03
     936:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     938:	a7 dc       	rcall	.-1714   	; 0x288 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     93a:	af be       	out	0x3f, r10	; 63
     93c:	0f 90       	pop	r0
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	1f 91       	pop	r17
     944:	0f 91       	pop	r16
     946:	ff 90       	pop	r15
     948:	ef 90       	pop	r14
     94a:	df 90       	pop	r13
     94c:	cf 90       	pop	r12
     94e:	bf 90       	pop	r11
     950:	af 90       	pop	r10
     952:	08 95       	ret

00000954 <MQTTSerialize_connectLength>:

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	ec 01       	movw	r28, r24
     962:	8e 81       	ldd	r24, Y+6	; 0x06
     964:	83 30       	cpi	r24, 0x03	; 3
     966:	29 f0       	breq	.+10     	; 0x972 <MQTTSerialize_connectLength+0x1e>
     968:	84 30       	cpi	r24, 0x04	; 4
     96a:	31 f4       	brne	.+12     	; 0x978 <MQTTSerialize_connectLength+0x24>
     96c:	0a e0       	ldi	r16, 0x0A	; 10
     96e:	10 e0       	ldi	r17, 0x00	; 0
     970:	05 c0       	rjmp	.+10     	; 0x97c <MQTTSerialize_connectLength+0x28>
     972:	0c e0       	ldi	r16, 0x0C	; 12
     974:	10 e0       	ldi	r17, 0x00	; 0
     976:	02 c0       	rjmp	.+4      	; 0x97c <MQTTSerialize_connectLength+0x28>
     978:	00 e0       	ldi	r16, 0x00	; 0
     97a:	10 e0       	ldi	r17, 0x00	; 0
     97c:	4f 81       	ldd	r20, Y+7	; 0x07
     97e:	58 85       	ldd	r21, Y+8	; 0x08
     980:	69 85       	ldd	r22, Y+9	; 0x09
     982:	7a 85       	ldd	r23, Y+10	; 0x0a
     984:	8b 85       	ldd	r24, Y+11	; 0x0b
     986:	9c 85       	ldd	r25, Y+12	; 0x0c
     988:	fb d1       	rcall	.+1014   	; 0xd80 <MQTTstrlen>
     98a:	02 96       	adiw	r24, 0x02	; 2
     98c:	08 0f       	add	r16, r24
     98e:	19 1f       	adc	r17, r25
     990:	88 89       	ldd	r24, Y+16	; 0x10
     992:	88 23       	and	r24, r24
     994:	a1 f0       	breq	.+40     	; 0x9be <MQTTSerialize_connectLength+0x6a>
     996:	4f 89       	ldd	r20, Y+23	; 0x17
     998:	58 8d       	ldd	r21, Y+24	; 0x18
     99a:	69 8d       	ldd	r22, Y+25	; 0x19
     99c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     99e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9a2:	ee d1       	rcall	.+988    	; 0xd80 <MQTTstrlen>
     9a4:	7c 01       	movw	r14, r24
     9a6:	4d 8d       	ldd	r20, Y+29	; 0x1d
     9a8:	5e 8d       	ldd	r21, Y+30	; 0x1e
     9aa:	6f 8d       	ldd	r22, Y+31	; 0x1f
     9ac:	78 a1       	ldd	r23, Y+32	; 0x20
     9ae:	89 a1       	ldd	r24, Y+33	; 0x21
     9b0:	9a a1       	ldd	r25, Y+34	; 0x22
     9b2:	e6 d1       	rcall	.+972    	; 0xd80 <MQTTstrlen>
     9b4:	8e 0d       	add	r24, r14
     9b6:	9f 1d       	adc	r25, r15
     9b8:	04 96       	adiw	r24, 0x04	; 4
     9ba:	08 0f       	add	r16, r24
     9bc:	19 1f       	adc	r17, r25
     9be:	8d a1       	ldd	r24, Y+37	; 0x25
     9c0:	9e a1       	ldd	r25, Y+38	; 0x26
     9c2:	89 2b       	or	r24, r25
     9c4:	21 f4       	brne	.+8      	; 0x9ce <MQTTSerialize_connectLength+0x7a>
     9c6:	89 a5       	ldd	r24, Y+41	; 0x29
     9c8:	9a a5       	ldd	r25, Y+42	; 0x2a
     9ca:	89 2b       	or	r24, r25
     9cc:	51 f0       	breq	.+20     	; 0x9e2 <MQTTSerialize_connectLength+0x8e>
     9ce:	4d a1       	ldd	r20, Y+37	; 0x25
     9d0:	5e a1       	ldd	r21, Y+38	; 0x26
     9d2:	6f a1       	ldd	r22, Y+39	; 0x27
     9d4:	78 a5       	ldd	r23, Y+40	; 0x28
     9d6:	89 a5       	ldd	r24, Y+41	; 0x29
     9d8:	9a a5       	ldd	r25, Y+42	; 0x2a
     9da:	d2 d1       	rcall	.+932    	; 0xd80 <MQTTstrlen>
     9dc:	02 96       	adiw	r24, 0x02	; 2
     9de:	08 0f       	add	r16, r24
     9e0:	19 1f       	adc	r17, r25
     9e2:	8b a5       	ldd	r24, Y+43	; 0x2b
     9e4:	9c a5       	ldd	r25, Y+44	; 0x2c
     9e6:	89 2b       	or	r24, r25
     9e8:	21 f4       	brne	.+8      	; 0x9f2 <MQTTSerialize_connectLength+0x9e>
     9ea:	8f a5       	ldd	r24, Y+47	; 0x2f
     9ec:	98 a9       	ldd	r25, Y+48	; 0x30
     9ee:	89 2b       	or	r24, r25
     9f0:	51 f0       	breq	.+20     	; 0xa06 <MQTTSerialize_connectLength+0xb2>
     9f2:	4b a5       	ldd	r20, Y+43	; 0x2b
     9f4:	5c a5       	ldd	r21, Y+44	; 0x2c
     9f6:	6d a5       	ldd	r22, Y+45	; 0x2d
     9f8:	7e a5       	ldd	r23, Y+46	; 0x2e
     9fa:	8f a5       	ldd	r24, Y+47	; 0x2f
     9fc:	98 a9       	ldd	r25, Y+48	; 0x30
     9fe:	c0 d1       	rcall	.+896    	; 0xd80 <MQTTstrlen>
     a00:	02 96       	adiw	r24, 0x02	; 2
     a02:	08 0f       	add	r16, r24
     a04:	19 1f       	adc	r17, r25
     a06:	c8 01       	movw	r24, r16
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	1f 91       	pop	r17
     a0e:	0f 91       	pop	r16
     a10:	ff 90       	pop	r15
     a12:	ef 90       	pop	r14
     a14:	08 95       	ret

00000a16 <MQTTSerialize_connect>:
     a16:	af 92       	push	r10
     a18:	bf 92       	push	r11
     a1a:	cf 92       	push	r12
     a1c:	df 92       	push	r13
     a1e:	ef 92       	push	r14
     a20:	ff 92       	push	r15
     a22:	0f 93       	push	r16
     a24:	1f 93       	push	r17
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	1f 92       	push	r1
     a2c:	1f 92       	push	r1
     a2e:	cd b7       	in	r28, 0x3d	; 61
     a30:	de b7       	in	r29, 0x3e	; 62
     a32:	6c 01       	movw	r12, r24
     a34:	5b 01       	movw	r10, r22
     a36:	8a 01       	movw	r16, r20
     a38:	89 83       	std	Y+1, r24	; 0x01
     a3a:	9a 83       	std	Y+2, r25	; 0x02
     a3c:	ca 01       	movw	r24, r20
     a3e:	8a df       	rcall	.-236    	; 0x954 <MQTTSerialize_connectLength>
     a40:	7c 01       	movw	r14, r24
     a42:	04 d1       	rcall	.+520    	; 0xc4c <MQTTPacket_len>
     a44:	a8 16       	cp	r10, r24
     a46:	b9 06       	cpc	r11, r25
     a48:	0c f4       	brge	.+2      	; 0xa4c <MQTTSerialize_connect+0x36>
     a4a:	9f c0       	rjmp	.+318    	; 0xb8a <MQTTSerialize_connect+0x174>
     a4c:	60 e1       	ldi	r22, 0x10	; 16
     a4e:	ce 01       	movw	r24, r28
     a50:	01 96       	adiw	r24, 0x01	; 1
     a52:	0b d1       	rcall	.+534    	; 0xc6a <writeChar>
     a54:	b7 01       	movw	r22, r14
     a56:	89 81       	ldd	r24, Y+1	; 0x01
     a58:	9a 81       	ldd	r25, Y+2	; 0x02
     a5a:	d2 d0       	rcall	.+420    	; 0xc00 <MQTTPacket_encode>
     a5c:	29 81       	ldd	r18, Y+1	; 0x01
     a5e:	3a 81       	ldd	r19, Y+2	; 0x02
     a60:	82 0f       	add	r24, r18
     a62:	93 1f       	adc	r25, r19
     a64:	89 83       	std	Y+1, r24	; 0x01
     a66:	9a 83       	std	Y+2, r25	; 0x02
     a68:	f8 01       	movw	r30, r16
     a6a:	86 81       	ldd	r24, Z+6	; 0x06
     a6c:	84 30       	cpi	r24, 0x04	; 4
     a6e:	51 f4       	brne	.+20     	; 0xa84 <MQTTSerialize_connect+0x6e>
     a70:	69 e3       	ldi	r22, 0x39	; 57
     a72:	70 e2       	ldi	r23, 0x20	; 32
     a74:	ce 01       	movw	r24, r28
     a76:	01 96       	adiw	r24, 0x01	; 1
     a78:	21 d1       	rcall	.+578    	; 0xcbc <writeCString>
     a7a:	64 e0       	ldi	r22, 0x04	; 4
     a7c:	ce 01       	movw	r24, r28
     a7e:	01 96       	adiw	r24, 0x01	; 1
     a80:	f4 d0       	rcall	.+488    	; 0xc6a <writeChar>
     a82:	09 c0       	rjmp	.+18     	; 0xa96 <MQTTSerialize_connect+0x80>
     a84:	6e e3       	ldi	r22, 0x3E	; 62
     a86:	70 e2       	ldi	r23, 0x20	; 32
     a88:	ce 01       	movw	r24, r28
     a8a:	01 96       	adiw	r24, 0x01	; 1
     a8c:	17 d1       	rcall	.+558    	; 0xcbc <writeCString>
     a8e:	63 e0       	ldi	r22, 0x03	; 3
     a90:	ce 01       	movw	r24, r28
     a92:	01 96       	adiw	r24, 0x01	; 1
     a94:	ea d0       	rcall	.+468    	; 0xc6a <writeChar>
     a96:	f1 2c       	mov	r15, r1
     a98:	f8 01       	movw	r30, r16
     a9a:	87 85       	ldd	r24, Z+15	; 0x0f
     a9c:	80 fb       	bst	r24, 0
     a9e:	f1 f8       	bld	r15, 1
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	90 89       	ldd	r25, Z+16	; 0x10
     aa4:	91 11       	cpse	r25, r1
     aa6:	01 c0       	rjmp	.+2      	; 0xaaa <MQTTSerialize_connect+0x94>
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	80 fb       	bst	r24, 0
     aac:	f2 f8       	bld	r15, 2
     aae:	f2 fe       	sbrs	r15, 2
     ab0:	0d c0       	rjmp	.+26     	; 0xacc <MQTTSerialize_connect+0xb6>
     ab2:	f8 01       	movw	r30, r16
     ab4:	84 a1       	ldd	r24, Z+36	; 0x24
     ab6:	83 70       	andi	r24, 0x03	; 3
     ab8:	88 0f       	add	r24, r24
     aba:	88 0f       	add	r24, r24
     abc:	88 0f       	add	r24, r24
     abe:	9f 2d       	mov	r25, r15
     ac0:	97 7e       	andi	r25, 0xE7	; 231
     ac2:	f9 2e       	mov	r15, r25
     ac4:	f8 2a       	or	r15, r24
     ac6:	83 a1       	ldd	r24, Z+35	; 0x23
     ac8:	80 fb       	bst	r24, 0
     aca:	f5 f8       	bld	r15, 5
     acc:	f8 01       	movw	r30, r16
     ace:	85 a1       	ldd	r24, Z+37	; 0x25
     ad0:	96 a1       	ldd	r25, Z+38	; 0x26
     ad2:	89 2b       	or	r24, r25
     ad4:	21 f4       	brne	.+8      	; 0xade <MQTTSerialize_connect+0xc8>
     ad6:	81 a5       	ldd	r24, Z+41	; 0x29
     ad8:	92 a5       	ldd	r25, Z+42	; 0x2a
     ada:	89 2b       	or	r24, r25
     adc:	11 f0       	breq	.+4      	; 0xae2 <MQTTSerialize_connect+0xcc>
     ade:	68 94       	set
     ae0:	f7 f8       	bld	r15, 7
     ae2:	f8 01       	movw	r30, r16
     ae4:	83 a5       	ldd	r24, Z+43	; 0x2b
     ae6:	94 a5       	ldd	r25, Z+44	; 0x2c
     ae8:	89 2b       	or	r24, r25
     aea:	21 f4       	brne	.+8      	; 0xaf4 <MQTTSerialize_connect+0xde>
     aec:	87 a5       	ldd	r24, Z+47	; 0x2f
     aee:	90 a9       	ldd	r25, Z+48	; 0x30
     af0:	89 2b       	or	r24, r25
     af2:	11 f0       	breq	.+4      	; 0xaf8 <MQTTSerialize_connect+0xe2>
     af4:	68 94       	set
     af6:	f6 f8       	bld	r15, 6
     af8:	6f 2d       	mov	r22, r15
     afa:	ce 01       	movw	r24, r28
     afc:	01 96       	adiw	r24, 0x01	; 1
     afe:	b5 d0       	rcall	.+362    	; 0xc6a <writeChar>
     b00:	f8 01       	movw	r30, r16
     b02:	65 85       	ldd	r22, Z+13	; 0x0d
     b04:	76 85       	ldd	r23, Z+14	; 0x0e
     b06:	ce 01       	movw	r24, r28
     b08:	01 96       	adiw	r24, 0x01	; 1
     b0a:	b9 d0       	rcall	.+370    	; 0xc7e <writeInt>
     b0c:	f8 01       	movw	r30, r16
     b0e:	27 81       	ldd	r18, Z+7	; 0x07
     b10:	30 85       	ldd	r19, Z+8	; 0x08
     b12:	41 85       	ldd	r20, Z+9	; 0x09
     b14:	52 85       	ldd	r21, Z+10	; 0x0a
     b16:	63 85       	ldd	r22, Z+11	; 0x0b
     b18:	74 85       	ldd	r23, Z+12	; 0x0c
     b1a:	ce 01       	movw	r24, r28
     b1c:	01 96       	adiw	r24, 0x01	; 1
     b1e:	f4 d0       	rcall	.+488    	; 0xd08 <writeMQTTString>
     b20:	f8 01       	movw	r30, r16
     b22:	80 89       	ldd	r24, Z+16	; 0x10
     b24:	88 23       	and	r24, r24
     b26:	99 f0       	breq	.+38     	; 0xb4e <MQTTSerialize_connect+0x138>
     b28:	27 89       	ldd	r18, Z+23	; 0x17
     b2a:	30 8d       	ldd	r19, Z+24	; 0x18
     b2c:	41 8d       	ldd	r20, Z+25	; 0x19
     b2e:	52 8d       	ldd	r21, Z+26	; 0x1a
     b30:	63 8d       	ldd	r22, Z+27	; 0x1b
     b32:	74 8d       	ldd	r23, Z+28	; 0x1c
     b34:	ce 01       	movw	r24, r28
     b36:	01 96       	adiw	r24, 0x01	; 1
     b38:	e7 d0       	rcall	.+462    	; 0xd08 <writeMQTTString>
     b3a:	f8 01       	movw	r30, r16
     b3c:	25 8d       	ldd	r18, Z+29	; 0x1d
     b3e:	36 8d       	ldd	r19, Z+30	; 0x1e
     b40:	47 8d       	ldd	r20, Z+31	; 0x1f
     b42:	50 a1       	ldd	r21, Z+32	; 0x20
     b44:	61 a1       	ldd	r22, Z+33	; 0x21
     b46:	72 a1       	ldd	r23, Z+34	; 0x22
     b48:	ce 01       	movw	r24, r28
     b4a:	01 96       	adiw	r24, 0x01	; 1
     b4c:	dd d0       	rcall	.+442    	; 0xd08 <writeMQTTString>
     b4e:	ef 2c       	mov	r14, r15
     b50:	ff 20       	and	r15, r15
     b52:	54 f4       	brge	.+20     	; 0xb68 <MQTTSerialize_connect+0x152>
     b54:	f8 01       	movw	r30, r16
     b56:	25 a1       	ldd	r18, Z+37	; 0x25
     b58:	36 a1       	ldd	r19, Z+38	; 0x26
     b5a:	47 a1       	ldd	r20, Z+39	; 0x27
     b5c:	50 a5       	ldd	r21, Z+40	; 0x28
     b5e:	61 a5       	ldd	r22, Z+41	; 0x29
     b60:	72 a5       	ldd	r23, Z+42	; 0x2a
     b62:	ce 01       	movw	r24, r28
     b64:	01 96       	adiw	r24, 0x01	; 1
     b66:	d0 d0       	rcall	.+416    	; 0xd08 <writeMQTTString>
     b68:	e6 fe       	sbrs	r14, 6
     b6a:	0a c0       	rjmp	.+20     	; 0xb80 <MQTTSerialize_connect+0x16a>
     b6c:	f8 01       	movw	r30, r16
     b6e:	23 a5       	ldd	r18, Z+43	; 0x2b
     b70:	34 a5       	ldd	r19, Z+44	; 0x2c
     b72:	45 a5       	ldd	r20, Z+45	; 0x2d
     b74:	56 a5       	ldd	r21, Z+46	; 0x2e
     b76:	67 a5       	ldd	r22, Z+47	; 0x2f
     b78:	70 a9       	ldd	r23, Z+48	; 0x30
     b7a:	ce 01       	movw	r24, r28
     b7c:	01 96       	adiw	r24, 0x01	; 1
     b7e:	c4 d0       	rcall	.+392    	; 0xd08 <writeMQTTString>
     b80:	89 81       	ldd	r24, Y+1	; 0x01
     b82:	9a 81       	ldd	r25, Y+2	; 0x02
     b84:	8c 19       	sub	r24, r12
     b86:	9d 09       	sbc	r25, r13
     b88:	02 c0       	rjmp	.+4      	; 0xb8e <MQTTSerialize_connect+0x178>
     b8a:	8e ef       	ldi	r24, 0xFE	; 254
     b8c:	9f ef       	ldi	r25, 0xFF	; 255
     b8e:	0f 90       	pop	r0
     b90:	0f 90       	pop	r0
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	1f 91       	pop	r17
     b98:	0f 91       	pop	r16
     b9a:	ff 90       	pop	r15
     b9c:	ef 90       	pop	r14
     b9e:	df 90       	pop	r13
     ba0:	cf 90       	pop	r12
     ba2:	bf 90       	pop	r11
     ba4:	af 90       	pop	r10
     ba6:	08 95       	ret

00000ba8 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
     ba8:	0f 93       	push	r16
     baa:	1f 93       	push	r17
     bac:	cf 93       	push	r28
     bae:	df 93       	push	r29
     bb0:	1f 92       	push	r1
     bb2:	1f 92       	push	r1
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
     bb8:	89 83       	std	Y+1, r24	; 0x01
     bba:	9a 83       	std	Y+2, r25	; 0x02

	FUNC_ENTRY;
	if (buflen < 2)
     bbc:	62 30       	cpi	r22, 0x02	; 2
     bbe:	71 05       	cpc	r23, r1
     bc0:	9c f0       	brlt	.+38     	; 0xbe8 <MQTTSerialize_zero+0x40>
     bc2:	8c 01       	movw	r16, r24
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
     bc4:	64 2f       	mov	r22, r20
     bc6:	62 95       	swap	r22
     bc8:	60 7f       	andi	r22, 0xF0	; 240
	writeChar(&ptr, header.byte); /* write header */
     bca:	ce 01       	movw	r24, r28
     bcc:	01 96       	adiw	r24, 0x01	; 1
     bce:	4d d0       	rcall	.+154    	; 0xc6a <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	9a 81       	ldd	r25, Y+2	; 0x02
     bd8:	13 d0       	rcall	.+38     	; 0xc00 <MQTTPacket_encode>
	rc = ptr - buf;
     bda:	29 81       	ldd	r18, Y+1	; 0x01
     bdc:	3a 81       	ldd	r19, Y+2	; 0x02
     bde:	82 0f       	add	r24, r18
     be0:	93 1f       	adc	r25, r19
     be2:	80 1b       	sub	r24, r16
     be4:	91 0b       	sbc	r25, r17
     be6:	02 c0       	rjmp	.+4      	; 0xbec <MQTTSerialize_zero+0x44>
	unsigned char *ptr = buf;

	FUNC_ENTRY;
	if (buflen < 2)
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
     be8:	8e ef       	ldi	r24, 0xFE	; 254
     bea:	9f ef       	ldi	r25, 0xFF	; 255
	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
	rc = ptr - buf;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
     bec:	0f 90       	pop	r0
     bee:	0f 90       	pop	r0
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	08 95       	ret

00000bfa <MQTTSerialize_disconnect>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
     bfa:	4e e0       	ldi	r20, 0x0E	; 14
     bfc:	d5 cf       	rjmp	.-86     	; 0xba8 <MQTTSerialize_zero>
}
     bfe:	08 95       	ret

00000c00 <MQTTPacket_encode>:
		}
	}
	mqttstring->cstring = NULL;
	FUNC_EXIT_RC(rc);
	return rc;
}
     c00:	dc 01       	movw	r26, r24
     c02:	e0 e0       	ldi	r30, 0x00	; 0
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	9b 01       	movw	r18, r22
     c08:	2f 77       	andi	r18, 0x7F	; 127
     c0a:	30 78       	andi	r19, 0x80	; 128
     c0c:	33 23       	and	r19, r19
     c0e:	34 f4       	brge	.+12     	; 0xc1c <MQTTPacket_encode+0x1c>
     c10:	21 50       	subi	r18, 0x01	; 1
     c12:	31 09       	sbc	r19, r1
     c14:	20 68       	ori	r18, 0x80	; 128
     c16:	3f 6f       	ori	r19, 0xFF	; 255
     c18:	2f 5f       	subi	r18, 0xFF	; 255
     c1a:	3f 4f       	sbci	r19, 0xFF	; 255
     c1c:	ab 01       	movw	r20, r22
     c1e:	77 23       	and	r23, r23
     c20:	14 f4       	brge	.+4      	; 0xc26 <MQTTPacket_encode+0x26>
     c22:	41 58       	subi	r20, 0x81	; 129
     c24:	5f 4f       	sbci	r21, 0xFF	; 255
     c26:	ba 01       	movw	r22, r20
     c28:	66 0f       	add	r22, r22
     c2a:	67 2f       	mov	r22, r23
     c2c:	66 1f       	adc	r22, r22
     c2e:	77 0b       	sbc	r23, r23
     c30:	16 16       	cp	r1, r22
     c32:	17 06       	cpc	r1, r23
     c34:	24 f4       	brge	.+8      	; 0xc3e <MQTTPacket_encode+0x3e>
     c36:	31 96       	adiw	r30, 0x01	; 1
     c38:	20 68       	ori	r18, 0x80	; 128
     c3a:	2d 93       	st	X+, r18
     c3c:	e4 cf       	rjmp	.-56     	; 0xc06 <MQTTPacket_encode+0x6>
     c3e:	dc 01       	movw	r26, r24
     c40:	ae 0f       	add	r26, r30
     c42:	bf 1f       	adc	r27, r31
     c44:	2c 93       	st	X, r18
     c46:	cf 01       	movw	r24, r30
     c48:	01 96       	adiw	r24, 0x01	; 1
     c4a:	08 95       	ret

00000c4c <MQTTPacket_len>:
     c4c:	9c 01       	movw	r18, r24
     c4e:	2f 5f       	subi	r18, 0xFF	; 255
     c50:	3f 4f       	sbci	r19, 0xFF	; 255
     c52:	20 38       	cpi	r18, 0x80	; 128
     c54:	31 05       	cpc	r19, r1
     c56:	14 f4       	brge	.+4      	; 0xc5c <MQTTPacket_len+0x10>
     c58:	02 96       	adiw	r24, 0x02	; 2
     c5a:	08 95       	ret
     c5c:	21 15       	cp	r18, r1
     c5e:	30 44       	sbci	r19, 0x40	; 64
     c60:	14 f4       	brge	.+4      	; 0xc66 <MQTTPacket_len+0x1a>
     c62:	03 96       	adiw	r24, 0x03	; 3
     c64:	08 95       	ret
     c66:	04 96       	adiw	r24, 0x04	; 4
     c68:	08 95       	ret

00000c6a <writeChar>:
     c6a:	fc 01       	movw	r30, r24
     c6c:	a0 81       	ld	r26, Z
     c6e:	b1 81       	ldd	r27, Z+1	; 0x01
     c70:	6c 93       	st	X, r22
     c72:	80 81       	ld	r24, Z
     c74:	91 81       	ldd	r25, Z+1	; 0x01
     c76:	01 96       	adiw	r24, 0x01	; 1
     c78:	80 83       	st	Z, r24
     c7a:	91 83       	std	Z+1, r25	; 0x01
     c7c:	08 95       	ret

00000c7e <writeInt>:
     c7e:	fc 01       	movw	r30, r24
     c80:	a0 81       	ld	r26, Z
     c82:	b1 81       	ldd	r27, Z+1	; 0x01
     c84:	cb 01       	movw	r24, r22
     c86:	77 23       	and	r23, r23
     c88:	14 f4       	brge	.+4      	; 0xc8e <writeInt+0x10>
     c8a:	81 50       	subi	r24, 0x01	; 1
     c8c:	9f 4f       	sbci	r25, 0xFF	; 255
     c8e:	9c 93       	st	X, r25
     c90:	a0 81       	ld	r26, Z
     c92:	b1 81       	ldd	r27, Z+1	; 0x01
     c94:	cd 01       	movw	r24, r26
     c96:	01 96       	adiw	r24, 0x01	; 1
     c98:	80 83       	st	Z, r24
     c9a:	91 83       	std	Z+1, r25	; 0x01
     c9c:	70 78       	andi	r23, 0x80	; 128
     c9e:	77 23       	and	r23, r23
     ca0:	2c f4       	brge	.+10     	; 0xcac <writeInt+0x2e>
     ca2:	61 50       	subi	r22, 0x01	; 1
     ca4:	71 09       	sbc	r23, r1
     ca6:	7f 6f       	ori	r23, 0xFF	; 255
     ca8:	6f 5f       	subi	r22, 0xFF	; 255
     caa:	7f 4f       	sbci	r23, 0xFF	; 255
     cac:	11 96       	adiw	r26, 0x01	; 1
     cae:	6c 93       	st	X, r22
     cb0:	80 81       	ld	r24, Z
     cb2:	91 81       	ldd	r25, Z+1	; 0x01
     cb4:	01 96       	adiw	r24, 0x01	; 1
     cb6:	80 83       	st	Z, r24
     cb8:	91 83       	std	Z+1, r25	; 0x01
     cba:	08 95       	ret

00000cbc <writeCString>:
     cbc:	ef 92       	push	r14
     cbe:	ff 92       	push	r15
     cc0:	0f 93       	push	r16
     cc2:	1f 93       	push	r17
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	8c 01       	movw	r16, r24
     cca:	7b 01       	movw	r14, r22
     ccc:	eb 01       	movw	r28, r22
     cce:	09 90       	ld	r0, Y+
     cd0:	00 20       	and	r0, r0
     cd2:	e9 f7       	brne	.-6      	; 0xcce <writeCString+0x12>
     cd4:	21 97       	sbiw	r28, 0x01	; 1
     cd6:	c6 1b       	sub	r28, r22
     cd8:	d7 0b       	sbc	r29, r23
     cda:	be 01       	movw	r22, r28
     cdc:	d0 df       	rcall	.-96     	; 0xc7e <writeInt>
     cde:	ae 01       	movw	r20, r28
     ce0:	b7 01       	movw	r22, r14
     ce2:	f8 01       	movw	r30, r16
     ce4:	80 81       	ld	r24, Z
     ce6:	91 81       	ldd	r25, Z+1	; 0x01
     ce8:	0e 94 77 14 	call	0x28ee	; 0x28ee <memcpy>
     cec:	f8 01       	movw	r30, r16
     cee:	80 81       	ld	r24, Z
     cf0:	91 81       	ldd	r25, Z+1	; 0x01
     cf2:	c8 0f       	add	r28, r24
     cf4:	d9 1f       	adc	r29, r25
     cf6:	c0 83       	st	Z, r28
     cf8:	d1 83       	std	Z+1, r29	; 0x01
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	1f 91       	pop	r17
     d00:	0f 91       	pop	r16
     d02:	ff 90       	pop	r15
     d04:	ef 90       	pop	r14
     d06:	08 95       	ret

00000d08 <writeMQTTString>:
     d08:	ef 92       	push	r14
     d0a:	ff 92       	push	r15
     d0c:	0f 93       	push	r16
     d0e:	1f 93       	push	r17
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29
     d14:	00 d0       	rcall	.+0      	; 0xd16 <writeMQTTString+0xe>
     d16:	00 d0       	rcall	.+0      	; 0xd18 <writeMQTTString+0x10>
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	7c 01       	movw	r14, r24
     d1e:	29 83       	std	Y+1, r18	; 0x01
     d20:	3a 83       	std	Y+2, r19	; 0x02
     d22:	4b 83       	std	Y+3, r20	; 0x03
     d24:	5c 83       	std	Y+4, r21	; 0x04
     d26:	6d 83       	std	Y+5, r22	; 0x05
     d28:	7e 83       	std	Y+6, r23	; 0x06
     d2a:	0b 81       	ldd	r16, Y+3	; 0x03
     d2c:	1c 81       	ldd	r17, Y+4	; 0x04
     d2e:	10 16       	cp	r1, r16
     d30:	11 06       	cpc	r1, r17
     d32:	94 f4       	brge	.+36     	; 0xd58 <writeMQTTString+0x50>
     d34:	b8 01       	movw	r22, r16
     d36:	a3 df       	rcall	.-186    	; 0xc7e <writeInt>
     d38:	6d 81       	ldd	r22, Y+5	; 0x05
     d3a:	7e 81       	ldd	r23, Y+6	; 0x06
     d3c:	a8 01       	movw	r20, r16
     d3e:	f7 01       	movw	r30, r14
     d40:	80 81       	ld	r24, Z
     d42:	91 81       	ldd	r25, Z+1	; 0x01
     d44:	0e 94 77 14 	call	0x28ee	; 0x28ee <memcpy>
     d48:	f7 01       	movw	r30, r14
     d4a:	80 81       	ld	r24, Z
     d4c:	91 81       	ldd	r25, Z+1	; 0x01
     d4e:	08 0f       	add	r16, r24
     d50:	19 1f       	adc	r17, r25
     d52:	00 83       	st	Z, r16
     d54:	11 83       	std	Z+1, r17	; 0x01
     d56:	0a c0       	rjmp	.+20     	; 0xd6c <writeMQTTString+0x64>
     d58:	69 81       	ldd	r22, Y+1	; 0x01
     d5a:	7a 81       	ldd	r23, Y+2	; 0x02
     d5c:	61 15       	cp	r22, r1
     d5e:	71 05       	cpc	r23, r1
     d60:	11 f0       	breq	.+4      	; 0xd66 <writeMQTTString+0x5e>
     d62:	ac df       	rcall	.-168    	; 0xcbc <writeCString>
     d64:	03 c0       	rjmp	.+6      	; 0xd6c <writeMQTTString+0x64>
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	70 e0       	ldi	r23, 0x00	; 0
     d6a:	89 df       	rcall	.-238    	; 0xc7e <writeInt>
     d6c:	26 96       	adiw	r28, 0x06	; 6
     d6e:	cd bf       	out	0x3d, r28	; 61
     d70:	de bf       	out	0x3e, r29	; 62
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	1f 91       	pop	r17
     d78:	0f 91       	pop	r16
     d7a:	ff 90       	pop	r15
     d7c:	ef 90       	pop	r14
     d7e:	08 95       	ret

00000d80 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
     d80:	cf 93       	push	r28
     d82:	df 93       	push	r29
     d84:	00 d0       	rcall	.+0      	; 0xd86 <MQTTstrlen+0x6>
     d86:	00 d0       	rcall	.+0      	; 0xd88 <MQTTstrlen+0x8>
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	49 83       	std	Y+1, r20	; 0x01
     d8e:	5a 83       	std	Y+2, r21	; 0x02
     d90:	6b 83       	std	Y+3, r22	; 0x03
     d92:	7c 83       	std	Y+4, r23	; 0x04
     d94:	8d 83       	std	Y+5, r24	; 0x05
     d96:	9e 83       	std	Y+6, r25	; 0x06
     d98:	a9 81       	ldd	r26, Y+1	; 0x01
     d9a:	ba 81       	ldd	r27, Y+2	; 0x02
	int rc = 0;

	if (mqttstring.cstring)
     d9c:	10 97       	sbiw	r26, 0x00	; 0
     d9e:	49 f0       	breq	.+18     	; 0xdb2 <MQTTstrlen+0x32>
		rc = strlen(mqttstring.cstring);
     da0:	fd 01       	movw	r30, r26
     da2:	01 90       	ld	r0, Z+
     da4:	00 20       	and	r0, r0
     da6:	e9 f7       	brne	.-6      	; 0xda2 <MQTTstrlen+0x22>
     da8:	31 97       	sbiw	r30, 0x01	; 1
     daa:	cf 01       	movw	r24, r30
     dac:	8a 1b       	sub	r24, r26
     dae:	9b 0b       	sbc	r25, r27
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <MQTTstrlen+0x36>
	else
		rc = mqttstring.lenstring.len;
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	9c 81       	ldd	r25, Y+4	; 0x04
	return rc;
}
     db6:	26 96       	adiw	r28, 0x06	; 6
     db8:	cd bf       	out	0x3d, r28	; 61
     dba:	de bf       	out	0x3e, r29	; 62
     dbc:	df 91       	pop	r29
     dbe:	cf 91       	pop	r28
     dc0:	08 95       	ret

00000dc2 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
     dc2:	ef 92       	push	r14
     dc4:	ff 92       	push	r15
     dc6:	0f 93       	push	r16
     dc8:	1f 93       	push	r17
     dca:	cf 93       	push	r28
     dcc:	df 93       	push	r29
     dce:	00 d0       	rcall	.+0      	; 0xdd0 <MQTTSerialize_publishLength+0xe>
     dd0:	00 d0       	rcall	.+0      	; 0xdd2 <MQTTSerialize_publishLength+0x10>
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	7c 01       	movw	r14, r24
     dd8:	f4 2f       	mov	r31, r20
     dda:	e5 2f       	mov	r30, r21
     ddc:	86 2f       	mov	r24, r22
     dde:	97 2f       	mov	r25, r23
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
     de0:	42 2f       	mov	r20, r18
     de2:	53 2f       	mov	r21, r19
     de4:	6f 2f       	mov	r22, r31
     de6:	7e 2f       	mov	r23, r30
     de8:	cb df       	rcall	.-106    	; 0xd80 <MQTTstrlen>
     dea:	02 96       	adiw	r24, 0x02	; 2
     dec:	80 0f       	add	r24, r16
     dee:	91 1f       	adc	r25, r17
	if (qos > 0)
     df0:	1e 14       	cp	r1, r14
     df2:	1f 04       	cpc	r1, r15
     df4:	0c f4       	brge	.+2      	; 0xdf8 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
     df6:	02 96       	adiw	r24, 0x02	; 2
	return len;
}
     df8:	26 96       	adiw	r28, 0x06	; 6
     dfa:	cd bf       	out	0x3d, r28	; 61
     dfc:	de bf       	out	0x3e, r29	; 62
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	1f 91       	pop	r17
     e04:	0f 91       	pop	r16
     e06:	ff 90       	pop	r15
     e08:	ef 90       	pop	r14
     e0a:	08 95       	ret

00000e0c <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
     e0c:	2f 92       	push	r2
     e0e:	3f 92       	push	r3
     e10:	4f 92       	push	r4
     e12:	5f 92       	push	r5
     e14:	6f 92       	push	r6
     e16:	7f 92       	push	r7
     e18:	8f 92       	push	r8
     e1a:	9f 92       	push	r9
     e1c:	af 92       	push	r10
     e1e:	bf 92       	push	r11
     e20:	cf 92       	push	r12
     e22:	df 92       	push	r13
     e24:	ef 92       	push	r14
     e26:	ff 92       	push	r15
     e28:	0f 93       	push	r16
     e2a:	1f 93       	push	r17
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
     e34:	2a 97       	sbiw	r28, 0x0a	; 10
     e36:	cd bf       	out	0x3d, r28	; 61
     e38:	de bf       	out	0x3e, r29	; 62
     e3a:	2c 01       	movw	r4, r24
     e3c:	1b 01       	movw	r2, r22
     e3e:	49 87       	std	Y+9, r20	; 0x09
     e40:	39 01       	movw	r6, r18
     e42:	0a 87       	std	Y+10, r16	; 0x0a
     e44:	28 2d       	mov	r18, r8
     e46:	8b 82       	std	Y+3, r8	; 0x03
     e48:	39 2d       	mov	r19, r9
     e4a:	9c 82       	std	Y+4, r9	; 0x04
     e4c:	4a 2d       	mov	r20, r10
     e4e:	ad 82       	std	Y+5, r10	; 0x05
     e50:	5b 2d       	mov	r21, r11
     e52:	be 82       	std	Y+6, r11	; 0x06
     e54:	6c 2d       	mov	r22, r12
     e56:	cf 82       	std	Y+7, r12	; 0x07
     e58:	7d 2d       	mov	r23, r13
     e5a:	d8 86       	std	Y+8, r13	; 0x08
     e5c:	ca a0       	ldd	r12, Y+34	; 0x22
     e5e:	db a0       	ldd	r13, Y+35	; 0x23
	unsigned char *ptr = buf;
     e60:	89 83       	std	Y+1, r24	; 0x01
     e62:	9a 83       	std	Y+2, r25	; 0x02
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
     e64:	86 01       	movw	r16, r12
     e66:	c3 01       	movw	r24, r6
     e68:	ac df       	rcall	.-168    	; 0xdc2 <MQTTSerialize_publishLength>
     e6a:	8c 01       	movw	r16, r24
     e6c:	ef de       	rcall	.-546    	; 0xc4c <MQTTPacket_len>
     e6e:	28 16       	cp	r2, r24
     e70:	39 06       	cpc	r3, r25
     e72:	bc f1       	brlt	.+110    	; 0xee2 <MQTTSerialize_publish+0xd6>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
     e74:	60 e3       	ldi	r22, 0x30	; 48
	header.bits.dup = dup;
     e76:	89 85       	ldd	r24, Y+9	; 0x09
     e78:	80 fb       	bst	r24, 0
     e7a:	63 f9       	bld	r22, 3
	header.bits.qos = qos;
     e7c:	86 2d       	mov	r24, r6
     e7e:	83 70       	andi	r24, 0x03	; 3
     e80:	88 0f       	add	r24, r24
     e82:	69 7f       	andi	r22, 0xF9	; 249
     e84:	68 2b       	or	r22, r24
	header.bits.retain = retained;
     e86:	8a 85       	ldd	r24, Y+10	; 0x0a
     e88:	80 fb       	bst	r24, 0
	writeChar(&ptr, header.byte); /* write header */
     e8a:	60 f9       	bld	r22, 0
     e8c:	ce 01       	movw	r24, r28

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
     e8e:	01 96       	adiw	r24, 0x01	; 1
     e90:	ec de       	rcall	.-552    	; 0xc6a <writeChar>
     e92:	b8 01       	movw	r22, r16
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	9a 81       	ldd	r25, Y+2	; 0x02
     e98:	b3 de       	rcall	.-666    	; 0xc00 <MQTTPacket_encode>
     e9a:	29 81       	ldd	r18, Y+1	; 0x01
     e9c:	3a 81       	ldd	r19, Y+2	; 0x02
     e9e:	82 0f       	add	r24, r18
     ea0:	93 1f       	adc	r25, r19

	writeMQTTString(&ptr, topicName);
     ea2:	89 83       	std	Y+1, r24	; 0x01
     ea4:	9a 83       	std	Y+2, r25	; 0x02
     ea6:	2b 81       	ldd	r18, Y+3	; 0x03
     ea8:	3c 81       	ldd	r19, Y+4	; 0x04
     eaa:	4d 81       	ldd	r20, Y+5	; 0x05
     eac:	5e 81       	ldd	r21, Y+6	; 0x06
     eae:	6f 81       	ldd	r22, Y+7	; 0x07
     eb0:	78 85       	ldd	r23, Y+8	; 0x08
     eb2:	ce 01       	movw	r24, r28

	if (qos > 0)
     eb4:	01 96       	adiw	r24, 0x01	; 1
     eb6:	28 df       	rcall	.-432    	; 0xd08 <writeMQTTString>
		writeInt(&ptr, packetid);
     eb8:	16 14       	cp	r1, r6
     eba:	17 04       	cpc	r1, r7
     ebc:	24 f4       	brge	.+8      	; 0xec6 <MQTTSerialize_publish+0xba>
     ebe:	b7 01       	movw	r22, r14
     ec0:	ce 01       	movw	r24, r28

	memcpy(ptr, payload, payloadlen);
     ec2:	01 96       	adiw	r24, 0x01	; 1
     ec4:	dc de       	rcall	.-584    	; 0xc7e <writeInt>
     ec6:	a6 01       	movw	r20, r12
     ec8:	68 a1       	ldd	r22, Y+32	; 0x20
     eca:	79 a1       	ldd	r23, Y+33	; 0x21
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	9a 81       	ldd	r25, Y+2	; 0x02
	ptr += payloadlen;

	rc = ptr - buf;
     ed0:	0e 94 77 14 	call	0x28ee	; 0x28ee <memcpy>
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	9a 81       	ldd	r25, Y+2	; 0x02
     ed8:	8c 0d       	add	r24, r12
     eda:	9d 1d       	adc	r25, r13
     edc:	84 19       	sub	r24, r4
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
     ede:	95 09       	sbc	r25, r5
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <MQTTSerialize_publish+0xda>
	rc = ptr - buf;

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
     ee2:	8e ef       	ldi	r24, 0xFE	; 254
     ee4:	9f ef       	ldi	r25, 0xFF	; 255
     ee6:	2a 96       	adiw	r28, 0x0a	; 10
     ee8:	cd bf       	out	0x3d, r28	; 61
     eea:	de bf       	out	0x3e, r29	; 62
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	1f 91       	pop	r17
     ef2:	0f 91       	pop	r16
     ef4:	ff 90       	pop	r15
     ef6:	ef 90       	pop	r14
     ef8:	df 90       	pop	r13
     efa:	cf 90       	pop	r12
     efc:	bf 90       	pop	r11
     efe:	af 90       	pop	r10
     f00:	9f 90       	pop	r9
     f02:	8f 90       	pop	r8
     f04:	7f 90       	pop	r7
     f06:	6f 90       	pop	r6
     f08:	5f 90       	pop	r5
     f0a:	4f 90       	pop	r4
     f0c:	3f 90       	pop	r3
     f0e:	2f 90       	pop	r2
     f10:	08 95       	ret

00000f12 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	1f 92       	push	r1
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f1c:	9f b7       	in	r25, 0x3f	; 63
     f1e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     f20:	f8 94       	cli
	return flags;
     f22:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     f24:	e8 2f       	mov	r30, r24
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	e0 59       	subi	r30, 0x90	; 144
     f2a:	ff 4f       	sbci	r31, 0xFF	; 255
     f2c:	60 95       	com	r22
     f2e:	80 81       	ld	r24, Z
     f30:	68 23       	and	r22, r24
     f32:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f34:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     f36:	0f 90       	pop	r0
     f38:	df 91       	pop	r29
     f3a:	cf 91       	pop	r28
     f3c:	08 95       	ret

00000f3e <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
     f3e:	cf 93       	push	r28
     f40:	df 93       	push	r29
     f42:	1f 92       	push	r1
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f48:	9f b7       	in	r25, 0x3f	; 63
     f4a:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     f4c:	f8 94       	cli
	return flags;
     f4e:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
     f50:	e8 2f       	mov	r30, r24
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	e0 59       	subi	r30, 0x90	; 144
     f56:	ff 4f       	sbci	r31, 0xFF	; 255
     f58:	80 81       	ld	r24, Z
     f5a:	68 2b       	or	r22, r24
     f5c:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f5e:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     f60:	0f 90       	pop	r0
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	08 95       	ret

00000f68 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
     f6c:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     f72:	c6 2f       	mov	r28, r22
     f74:	d0 e0       	ldi	r29, 0x00	; 0
     f76:	de 01       	movw	r26, r28
     f78:	02 2e       	mov	r0, r18
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <ioport_configure_port_pin+0x18>
     f7c:	b5 95       	asr	r27
     f7e:	a7 95       	ror	r26
     f80:	0a 94       	dec	r0
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <ioport_configure_port_pin+0x14>
     f84:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     f86:	50 8b       	std	Z+16, r21	; 0x10
     f88:	2f 5f       	subi	r18, 0xFF	; 255
     f8a:	3f 4f       	sbci	r19, 0xFF	; 255
     f8c:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     f8e:	28 30       	cpi	r18, 0x08	; 8
     f90:	31 05       	cpc	r19, r1
     f92:	89 f7       	brne	.-30     	; 0xf76 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     f94:	40 ff       	sbrs	r20, 0
     f96:	0a c0       	rjmp	.+20     	; 0xfac <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
     f98:	41 ff       	sbrs	r20, 1
     f9a:	03 c0       	rjmp	.+6      	; 0xfa2 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     f9c:	fc 01       	movw	r30, r24
     f9e:	65 83       	std	Z+5, r22	; 0x05
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     fa2:	fc 01       	movw	r30, r24
     fa4:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     fa6:	fc 01       	movw	r30, r24
     fa8:	61 83       	std	Z+1, r22	; 0x01
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     fac:	fc 01       	movw	r30, r24
     fae:	62 83       	std	Z+2, r22	; 0x02
	}
}
     fb0:	df 91       	pop	r29
     fb2:	cf 91       	pop	r28
     fb4:	08 95       	ret

00000fb6 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     fb6:	43 e0       	ldi	r20, 0x03	; 3
     fb8:	50 e0       	ldi	r21, 0x00	; 0
     fba:	68 e0       	ldi	r22, 0x08	; 8
     fbc:	80 ec       	ldi	r24, 0xC0	; 192
     fbe:	97 e0       	ldi	r25, 0x07	; 7
     fc0:	d3 df       	rcall	.-90     	; 0xf68 <ioport_configure_port_pin>
     fc2:	40 e0       	ldi	r20, 0x00	; 0
     fc4:	58 e1       	ldi	r21, 0x18	; 24
     fc6:	64 e0       	ldi	r22, 0x04	; 4
     fc8:	80 ec       	ldi	r24, 0xC0	; 192
     fca:	97 e0       	ldi	r25, 0x07	; 7
     fcc:	cd df       	rcall	.-102    	; 0xf68 <ioport_configure_port_pin>
     fce:	43 e0       	ldi	r20, 0x03	; 3
     fd0:	50 e0       	ldi	r21, 0x00	; 0
     fd2:	68 e0       	ldi	r22, 0x08	; 8
     fd4:	80 e8       	ldi	r24, 0x80	; 128
     fd6:	96 e0       	ldi	r25, 0x06	; 6
     fd8:	c7 df       	rcall	.-114    	; 0xf68 <ioport_configure_port_pin>
     fda:	40 e0       	ldi	r20, 0x00	; 0
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	64 e0       	ldi	r22, 0x04	; 4
     fe0:	80 e8       	ldi	r24, 0x80	; 128
     fe2:	96 e0       	ldi	r25, 0x06	; 6
     fe4:	c1 df       	rcall	.-126    	; 0xf68 <ioport_configure_port_pin>
     fe6:	43 e0       	ldi	r20, 0x03	; 3
     fe8:	50 e0       	ldi	r21, 0x00	; 0
     fea:	68 e0       	ldi	r22, 0x08	; 8
     fec:	80 e4       	ldi	r24, 0x40	; 64
     fee:	96 e0       	ldi	r25, 0x06	; 6
     ff0:	bb df       	rcall	.-138    	; 0xf68 <ioport_configure_port_pin>
     ff2:	40 e0       	ldi	r20, 0x00	; 0
     ff4:	50 e0       	ldi	r21, 0x00	; 0
     ff6:	64 e0       	ldi	r22, 0x04	; 4
     ff8:	80 e4       	ldi	r24, 0x40	; 64
     ffa:	96 e0       	ldi	r25, 0x06	; 6
     ffc:	b5 cf       	rjmp	.-150    	; 0xf68 <ioport_configure_port_pin>
     ffe:	08 95       	ret

00001000 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1000:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1004:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1006:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1008:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    100c:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    100e:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1012:	08 95       	ret

00001014 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    1014:	fc 01       	movw	r30, r24
    1016:	91 81       	ldd	r25, Z+1	; 0x01
    1018:	95 ff       	sbrs	r25, 5
    101a:	fd cf       	rjmp	.-6      	; 0x1016 <usart_putchar+0x2>
    101c:	60 83       	st	Z, r22
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	08 95       	ret

00001024 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1024:	4f 92       	push	r4
    1026:	5f 92       	push	r5
    1028:	6f 92       	push	r6
    102a:	7f 92       	push	r7
    102c:	8f 92       	push	r8
    102e:	9f 92       	push	r9
    1030:	af 92       	push	r10
    1032:	bf 92       	push	r11
    1034:	ef 92       	push	r14
    1036:	ff 92       	push	r15
    1038:	0f 93       	push	r16
    103a:	1f 93       	push	r17
    103c:	cf 93       	push	r28
    103e:	7c 01       	movw	r14, r24
    1040:	4a 01       	movw	r8, r20
    1042:	5b 01       	movw	r10, r22
    1044:	28 01       	movw	r4, r16
    1046:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1048:	fc 01       	movw	r30, r24
    104a:	84 81       	ldd	r24, Z+4	; 0x04
    104c:	82 ff       	sbrs	r24, 2
    104e:	16 c0       	rjmp	.+44     	; 0x107c <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    1050:	d9 01       	movw	r26, r18
    1052:	c8 01       	movw	r24, r16
    1054:	68 94       	set
    1056:	12 f8       	bld	r1, 2
    1058:	b6 95       	lsr	r27
    105a:	a7 95       	ror	r26
    105c:	97 95       	ror	r25
    105e:	87 95       	ror	r24
    1060:	16 94       	lsr	r1
    1062:	d1 f7       	brne	.-12     	; 0x1058 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    1064:	b9 01       	movw	r22, r18
    1066:	a8 01       	movw	r20, r16
    1068:	03 2e       	mov	r0, r19
    106a:	36 e1       	ldi	r19, 0x16	; 22
    106c:	76 95       	lsr	r23
    106e:	67 95       	ror	r22
    1070:	57 95       	ror	r21
    1072:	47 95       	ror	r20
    1074:	3a 95       	dec	r19
    1076:	d1 f7       	brne	.-12     	; 0x106c <usart_set_baudrate+0x48>
    1078:	30 2d       	mov	r19, r0
    107a:	15 c0       	rjmp	.+42     	; 0x10a6 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    107c:	d9 01       	movw	r26, r18
    107e:	c8 01       	movw	r24, r16
    1080:	68 94       	set
    1082:	13 f8       	bld	r1, 3
    1084:	b6 95       	lsr	r27
    1086:	a7 95       	ror	r26
    1088:	97 95       	ror	r25
    108a:	87 95       	ror	r24
    108c:	16 94       	lsr	r1
    108e:	d1 f7       	brne	.-12     	; 0x1084 <usart_set_baudrate+0x60>
		min_rate /= 2;
    1090:	b9 01       	movw	r22, r18
    1092:	a8 01       	movw	r20, r16
    1094:	03 2e       	mov	r0, r19
    1096:	37 e1       	ldi	r19, 0x17	; 23
    1098:	76 95       	lsr	r23
    109a:	67 95       	ror	r22
    109c:	57 95       	ror	r21
    109e:	47 95       	ror	r20
    10a0:	3a 95       	dec	r19
    10a2:	d1 f7       	brne	.-12     	; 0x1098 <usart_set_baudrate+0x74>
    10a4:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    10a6:	88 15       	cp	r24, r8
    10a8:	99 05       	cpc	r25, r9
    10aa:	aa 05       	cpc	r26, r10
    10ac:	bb 05       	cpc	r27, r11
    10ae:	08 f4       	brcc	.+2      	; 0x10b2 <usart_set_baudrate+0x8e>
    10b0:	a6 c0       	rjmp	.+332    	; 0x11fe <usart_set_baudrate+0x1da>
    10b2:	84 16       	cp	r8, r20
    10b4:	95 06       	cpc	r9, r21
    10b6:	a6 06       	cpc	r10, r22
    10b8:	b7 06       	cpc	r11, r23
    10ba:	08 f4       	brcc	.+2      	; 0x10be <usart_set_baudrate+0x9a>
    10bc:	a2 c0       	rjmp	.+324    	; 0x1202 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    10be:	f7 01       	movw	r30, r14
    10c0:	84 81       	ldd	r24, Z+4	; 0x04
    10c2:	82 fd       	sbrc	r24, 2
    10c4:	04 c0       	rjmp	.+8      	; 0x10ce <usart_set_baudrate+0xaa>
		baud *= 2;
    10c6:	88 0c       	add	r8, r8
    10c8:	99 1c       	adc	r9, r9
    10ca:	aa 1c       	adc	r10, r10
    10cc:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    10ce:	c3 01       	movw	r24, r6
    10d0:	b2 01       	movw	r22, r4
    10d2:	a5 01       	movw	r20, r10
    10d4:	94 01       	movw	r18, r8
    10d6:	0e 94 97 13 	call	0x272e	; 0x272e <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    10da:	2f 3f       	cpi	r18, 0xFF	; 255
    10dc:	31 05       	cpc	r19, r1
    10de:	41 05       	cpc	r20, r1
    10e0:	51 05       	cpc	r21, r1
    10e2:	08 f4       	brcc	.+2      	; 0x10e6 <usart_set_baudrate+0xc2>
    10e4:	90 c0       	rjmp	.+288    	; 0x1206 <usart_set_baudrate+0x1e2>
    10e6:	8f ef       	ldi	r24, 0xFF	; 255
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	a0 e0       	ldi	r26, 0x00	; 0
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	c9 ef       	ldi	r28, 0xF9	; 249
    10f0:	05 c0       	rjmp	.+10     	; 0x10fc <usart_set_baudrate+0xd8>
    10f2:	28 17       	cp	r18, r24
    10f4:	39 07       	cpc	r19, r25
    10f6:	4a 07       	cpc	r20, r26
    10f8:	5b 07       	cpc	r21, r27
    10fa:	58 f0       	brcs	.+22     	; 0x1112 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	aa 1f       	adc	r26, r26
    1102:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    1104:	cd 3f       	cpi	r28, 0xFD	; 253
    1106:	0c f4       	brge	.+2      	; 0x110a <usart_set_baudrate+0xe6>
			limit |= 1;
    1108:	81 60       	ori	r24, 0x01	; 1
    110a:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    110c:	c7 30       	cpi	r28, 0x07	; 7
    110e:	89 f7       	brne	.-30     	; 0x10f2 <usart_set_baudrate+0xce>
    1110:	4f c0       	rjmp	.+158    	; 0x11b0 <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    1112:	cc 23       	and	r28, r28
    1114:	0c f0       	brlt	.+2      	; 0x1118 <usart_set_baudrate+0xf4>
    1116:	4c c0       	rjmp	.+152    	; 0x11b0 <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1118:	d5 01       	movw	r26, r10
    111a:	c4 01       	movw	r24, r8
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	aa 1f       	adc	r26, r26
    1122:	bb 1f       	adc	r27, r27
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	aa 1f       	adc	r26, r26
    112a:	bb 1f       	adc	r27, r27
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	aa 1f       	adc	r26, r26
    1132:	bb 1f       	adc	r27, r27
    1134:	48 1a       	sub	r4, r24
    1136:	59 0a       	sbc	r5, r25
    1138:	6a 0a       	sbc	r6, r26
    113a:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    113c:	ce 3f       	cpi	r28, 0xFE	; 254
    113e:	f4 f4       	brge	.+60     	; 0x117c <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    1140:	8d ef       	ldi	r24, 0xFD	; 253
    1142:	9f ef       	ldi	r25, 0xFF	; 255
    1144:	8c 1b       	sub	r24, r28
    1146:	91 09       	sbc	r25, r1
    1148:	c7 fd       	sbrc	r28, 7
    114a:	93 95       	inc	r25
    114c:	04 c0       	rjmp	.+8      	; 0x1156 <usart_set_baudrate+0x132>
    114e:	44 0c       	add	r4, r4
    1150:	55 1c       	adc	r5, r5
    1152:	66 1c       	adc	r6, r6
    1154:	77 1c       	adc	r7, r7
    1156:	8a 95       	dec	r24
    1158:	d2 f7       	brpl	.-12     	; 0x114e <usart_set_baudrate+0x12a>
    115a:	d5 01       	movw	r26, r10
    115c:	c4 01       	movw	r24, r8
    115e:	b6 95       	lsr	r27
    1160:	a7 95       	ror	r26
    1162:	97 95       	ror	r25
    1164:	87 95       	ror	r24
    1166:	bc 01       	movw	r22, r24
    1168:	cd 01       	movw	r24, r26
    116a:	64 0d       	add	r22, r4
    116c:	75 1d       	adc	r23, r5
    116e:	86 1d       	adc	r24, r6
    1170:	97 1d       	adc	r25, r7
    1172:	a5 01       	movw	r20, r10
    1174:	94 01       	movw	r18, r8
    1176:	0e 94 97 13 	call	0x272e	; 0x272e <__udivmodsi4>
    117a:	37 c0       	rjmp	.+110    	; 0x11ea <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
    117c:	83 e0       	ldi	r24, 0x03	; 3
    117e:	8c 0f       	add	r24, r28
    1180:	a5 01       	movw	r20, r10
    1182:	94 01       	movw	r18, r8
    1184:	04 c0       	rjmp	.+8      	; 0x118e <usart_set_baudrate+0x16a>
    1186:	22 0f       	add	r18, r18
    1188:	33 1f       	adc	r19, r19
    118a:	44 1f       	adc	r20, r20
    118c:	55 1f       	adc	r21, r21
    118e:	8a 95       	dec	r24
    1190:	d2 f7       	brpl	.-12     	; 0x1186 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
    1192:	da 01       	movw	r26, r20
    1194:	c9 01       	movw	r24, r18
    1196:	b6 95       	lsr	r27
    1198:	a7 95       	ror	r26
    119a:	97 95       	ror	r25
    119c:	87 95       	ror	r24
    119e:	bc 01       	movw	r22, r24
    11a0:	cd 01       	movw	r24, r26
    11a2:	64 0d       	add	r22, r4
    11a4:	75 1d       	adc	r23, r5
    11a6:	86 1d       	adc	r24, r6
    11a8:	97 1d       	adc	r25, r7
    11aa:	0e 94 97 13 	call	0x272e	; 0x272e <__udivmodsi4>
    11ae:	1d c0       	rjmp	.+58     	; 0x11ea <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    11b0:	83 e0       	ldi	r24, 0x03	; 3
    11b2:	8c 0f       	add	r24, r28
    11b4:	a5 01       	movw	r20, r10
    11b6:	94 01       	movw	r18, r8
    11b8:	04 c0       	rjmp	.+8      	; 0x11c2 <usart_set_baudrate+0x19e>
    11ba:	22 0f       	add	r18, r18
    11bc:	33 1f       	adc	r19, r19
    11be:	44 1f       	adc	r20, r20
    11c0:	55 1f       	adc	r21, r21
    11c2:	8a 95       	dec	r24
    11c4:	d2 f7       	brpl	.-12     	; 0x11ba <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
    11c6:	da 01       	movw	r26, r20
    11c8:	c9 01       	movw	r24, r18
    11ca:	b6 95       	lsr	r27
    11cc:	a7 95       	ror	r26
    11ce:	97 95       	ror	r25
    11d0:	87 95       	ror	r24
    11d2:	bc 01       	movw	r22, r24
    11d4:	cd 01       	movw	r24, r26
    11d6:	64 0d       	add	r22, r4
    11d8:	75 1d       	adc	r23, r5
    11da:	86 1d       	adc	r24, r6
    11dc:	97 1d       	adc	r25, r7
    11de:	0e 94 97 13 	call	0x272e	; 0x272e <__udivmodsi4>
    11e2:	21 50       	subi	r18, 0x01	; 1
    11e4:	31 09       	sbc	r19, r1
    11e6:	41 09       	sbc	r20, r1
    11e8:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    11ea:	83 2f       	mov	r24, r19
    11ec:	8f 70       	andi	r24, 0x0F	; 15
    11ee:	c2 95       	swap	r28
    11f0:	c0 7f       	andi	r28, 0xF0	; 240
    11f2:	c8 2b       	or	r28, r24
    11f4:	f7 01       	movw	r30, r14
    11f6:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    11f8:	26 83       	std	Z+6, r18	; 0x06

	return true;
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	18 c0       	rjmp	.+48     	; 0x122e <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	16 c0       	rjmp	.+44     	; 0x122e <usart_set_baudrate+0x20a>
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	14 c0       	rjmp	.+40     	; 0x122e <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1206:	d5 01       	movw	r26, r10
    1208:	c4 01       	movw	r24, r8
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	aa 1f       	adc	r26, r26
    1210:	bb 1f       	adc	r27, r27
    1212:	88 0f       	add	r24, r24
    1214:	99 1f       	adc	r25, r25
    1216:	aa 1f       	adc	r26, r26
    1218:	bb 1f       	adc	r27, r27
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	aa 1f       	adc	r26, r26
    1220:	bb 1f       	adc	r27, r27
    1222:	48 1a       	sub	r4, r24
    1224:	59 0a       	sbc	r5, r25
    1226:	6a 0a       	sbc	r6, r26
    1228:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    122a:	c9 ef       	ldi	r28, 0xF9	; 249
    122c:	89 cf       	rjmp	.-238    	; 0x1140 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    122e:	cf 91       	pop	r28
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	ff 90       	pop	r15
    1236:	ef 90       	pop	r14
    1238:	bf 90       	pop	r11
    123a:	af 90       	pop	r10
    123c:	9f 90       	pop	r9
    123e:	8f 90       	pop	r8
    1240:	7f 90       	pop	r7
    1242:	6f 90       	pop	r6
    1244:	5f 90       	pop	r5
    1246:	4f 90       	pop	r4
    1248:	08 95       	ret

0000124a <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    124a:	0f 93       	push	r16
    124c:	1f 93       	push	r17
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	ec 01       	movw	r28, r24
    1254:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1256:	00 97       	sbiw	r24, 0x00	; 0
    1258:	09 f4       	brne	.+2      	; 0x125c <usart_init_rs232+0x12>
    125a:	36 c1       	rjmp	.+620    	; 0x14c8 <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    125c:	80 3c       	cpi	r24, 0xC0	; 192
    125e:	91 05       	cpc	r25, r1
    1260:	21 f4       	brne	.+8      	; 0x126a <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1262:	60 e1       	ldi	r22, 0x10	; 16
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	55 de       	rcall	.-854    	; 0xf12 <sysclk_enable_module>
    1268:	2f c1       	rjmp	.+606    	; 0x14c8 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    126a:	c0 34       	cpi	r28, 0x40	; 64
    126c:	84 e0       	ldi	r24, 0x04	; 4
    126e:	d8 07       	cpc	r29, r24
    1270:	21 f4       	brne	.+8      	; 0x127a <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    1272:	68 e0       	ldi	r22, 0x08	; 8
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	4d de       	rcall	.-870    	; 0xf12 <sysclk_enable_module>
    1278:	27 c1       	rjmp	.+590    	; 0x14c8 <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    127a:	c1 15       	cp	r28, r1
    127c:	e4 e0       	ldi	r30, 0x04	; 4
    127e:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    1280:	21 f4       	brne	.+8      	; 0x128a <usart_init_rs232+0x40>
    1282:	64 e0       	ldi	r22, 0x04	; 4
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	45 de       	rcall	.-886    	; 0xf12 <sysclk_enable_module>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1288:	1f c1       	rjmp	.+574    	; 0x14c8 <usart_init_rs232+0x27e>
    128a:	c0 38       	cpi	r28, 0x80	; 128
    128c:	f1 e0       	ldi	r31, 0x01	; 1
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    128e:	df 07       	cpc	r29, r31
    1290:	21 f4       	brne	.+8      	; 0x129a <usart_init_rs232+0x50>
    1292:	62 e0       	ldi	r22, 0x02	; 2
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	3d de       	rcall	.-902    	; 0xf12 <sysclk_enable_module>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1298:	17 c1       	rjmp	.+558    	; 0x14c8 <usart_init_rs232+0x27e>
    129a:	c1 15       	cp	r28, r1
    129c:	81 e0       	ldi	r24, 0x01	; 1
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    129e:	d8 07       	cpc	r29, r24
    12a0:	21 f4       	brne	.+8      	; 0x12aa <usart_init_rs232+0x60>
    12a2:	61 e0       	ldi	r22, 0x01	; 1
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	35 de       	rcall	.-918    	; 0xf12 <sysclk_enable_module>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    12a8:	0f c1       	rjmp	.+542    	; 0x14c8 <usart_init_rs232+0x27e>
    12aa:	c0 38       	cpi	r28, 0x80	; 128
    12ac:	e3 e0       	ldi	r30, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    12ae:	de 07       	cpc	r29, r30
    12b0:	21 f4       	brne	.+8      	; 0x12ba <usart_init_rs232+0x70>
    12b2:	61 e0       	ldi	r22, 0x01	; 1
    12b4:	81 e0       	ldi	r24, 0x01	; 1
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    12b6:	2d de       	rcall	.-934    	; 0xf12 <sysclk_enable_module>
    12b8:	07 c1       	rjmp	.+526    	; 0x14c8 <usart_init_rs232+0x27e>
    12ba:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    12bc:	f3 e0       	ldi	r31, 0x03	; 3
    12be:	df 07       	cpc	r29, r31
    12c0:	21 f4       	brne	.+8      	; 0x12ca <usart_init_rs232+0x80>
    12c2:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    12c4:	82 e0       	ldi	r24, 0x02	; 2
    12c6:	25 de       	rcall	.-950    	; 0xf12 <sysclk_enable_module>
    12c8:	ff c0       	rjmp	.+510    	; 0x14c8 <usart_init_rs232+0x27e>
    12ca:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    12cc:	82 e0       	ldi	r24, 0x02	; 2
    12ce:	d8 07       	cpc	r29, r24
    12d0:	21 f4       	brne	.+8      	; 0x12da <usart_init_rs232+0x90>
    12d2:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	1d de       	rcall	.-966    	; 0xf12 <sysclk_enable_module>
    12d8:	f7 c0       	rjmp	.+494    	; 0x14c8 <usart_init_rs232+0x27e>
    12da:	c0 34       	cpi	r28, 0x40	; 64
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    12dc:	e2 e0       	ldi	r30, 0x02	; 2
    12de:	de 07       	cpc	r29, r30
    12e0:	21 f4       	brne	.+8      	; 0x12ea <usart_init_rs232+0xa0>
    12e2:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    12e4:	82 e0       	ldi	r24, 0x02	; 2
    12e6:	15 de       	rcall	.-982    	; 0xf12 <sysclk_enable_module>
    12e8:	ef c0       	rjmp	.+478    	; 0x14c8 <usart_init_rs232+0x27e>
    12ea:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    12ec:	f3 e0       	ldi	r31, 0x03	; 3
    12ee:	df 07       	cpc	r29, r31
    12f0:	21 f4       	brne	.+8      	; 0x12fa <usart_init_rs232+0xb0>
    12f2:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	0d de       	rcall	.-998    	; 0xf12 <sysclk_enable_module>
    12f8:	e7 c0       	rjmp	.+462    	; 0x14c8 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    12fa:	c0 32       	cpi	r28, 0x20	; 32
    12fc:	83 e0       	ldi	r24, 0x03	; 3
    12fe:	d8 07       	cpc	r29, r24
    1300:	21 f4       	brne	.+8      	; 0x130a <usart_init_rs232+0xc0>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1302:	64 e0       	ldi	r22, 0x04	; 4
    1304:	82 e0       	ldi	r24, 0x02	; 2
    1306:	05 de       	rcall	.-1014   	; 0xf12 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1308:	df c0       	rjmp	.+446    	; 0x14c8 <usart_init_rs232+0x27e>
    130a:	c1 15       	cp	r28, r1
    130c:	e8 e0       	ldi	r30, 0x08	; 8
    130e:	de 07       	cpc	r29, r30
    1310:	21 f4       	brne	.+8      	; 0x131a <usart_init_rs232+0xd0>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1312:	61 e0       	ldi	r22, 0x01	; 1
    1314:	83 e0       	ldi	r24, 0x03	; 3
    1316:	fd dd       	rcall	.-1030   	; 0xf12 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1318:	d7 c0       	rjmp	.+430    	; 0x14c8 <usart_init_rs232+0x27e>
    131a:	c1 15       	cp	r28, r1
    131c:	f9 e0       	ldi	r31, 0x09	; 9
    131e:	df 07       	cpc	r29, r31
    1320:	21 f4       	brne	.+8      	; 0x132a <usart_init_rs232+0xe0>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1322:	61 e0       	ldi	r22, 0x01	; 1
    1324:	84 e0       	ldi	r24, 0x04	; 4
    1326:	f5 dd       	rcall	.-1046   	; 0xf12 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1328:	cf c0       	rjmp	.+414    	; 0x14c8 <usart_init_rs232+0x27e>
    132a:	c1 15       	cp	r28, r1
    132c:	8a e0       	ldi	r24, 0x0A	; 10
    132e:	d8 07       	cpc	r29, r24
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1330:	21 f4       	brne	.+8      	; 0x133a <usart_init_rs232+0xf0>
    1332:	61 e0       	ldi	r22, 0x01	; 1
    1334:	85 e0       	ldi	r24, 0x05	; 5
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1336:	ed dd       	rcall	.-1062   	; 0xf12 <sysclk_enable_module>
    1338:	c7 c0       	rjmp	.+398    	; 0x14c8 <usart_init_rs232+0x27e>
    133a:	c1 15       	cp	r28, r1
    133c:	eb e0       	ldi	r30, 0x0B	; 11
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    133e:	de 07       	cpc	r29, r30
    1340:	21 f4       	brne	.+8      	; 0x134a <usart_init_rs232+0x100>
    1342:	61 e0       	ldi	r22, 0x01	; 1
    1344:	86 e0       	ldi	r24, 0x06	; 6
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1346:	e5 dd       	rcall	.-1078   	; 0xf12 <sysclk_enable_module>
    1348:	bf c0       	rjmp	.+382    	; 0x14c8 <usart_init_rs232+0x27e>
    134a:	c0 34       	cpi	r28, 0x40	; 64
    134c:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    134e:	df 07       	cpc	r29, r31
    1350:	21 f4       	brne	.+8      	; 0x135a <usart_init_rs232+0x110>
    1352:	62 e0       	ldi	r22, 0x02	; 2
    1354:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1356:	dd dd       	rcall	.-1094   	; 0xf12 <sysclk_enable_module>
    1358:	b7 c0       	rjmp	.+366    	; 0x14c8 <usart_init_rs232+0x27e>
    135a:	c0 34       	cpi	r28, 0x40	; 64
    135c:	89 e0       	ldi	r24, 0x09	; 9
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    135e:	d8 07       	cpc	r29, r24
    1360:	21 f4       	brne	.+8      	; 0x136a <usart_init_rs232+0x120>
    1362:	62 e0       	ldi	r22, 0x02	; 2
    1364:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1366:	d5 dd       	rcall	.-1110   	; 0xf12 <sysclk_enable_module>
    1368:	af c0       	rjmp	.+350    	; 0x14c8 <usart_init_rs232+0x27e>
    136a:	c0 34       	cpi	r28, 0x40	; 64
    136c:	ea e0       	ldi	r30, 0x0A	; 10
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    136e:	de 07       	cpc	r29, r30
    1370:	21 f4       	brne	.+8      	; 0x137a <usart_init_rs232+0x130>
    1372:	62 e0       	ldi	r22, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    1374:	85 e0       	ldi	r24, 0x05	; 5
    1376:	cd dd       	rcall	.-1126   	; 0xf12 <sysclk_enable_module>
    1378:	a7 c0       	rjmp	.+334    	; 0x14c8 <usart_init_rs232+0x27e>
    137a:	c0 34       	cpi	r28, 0x40	; 64
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    137c:	fb e0       	ldi	r31, 0x0B	; 11
    137e:	df 07       	cpc	r29, r31
    1380:	21 f4       	brne	.+8      	; 0x138a <usart_init_rs232+0x140>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1382:	62 e0       	ldi	r22, 0x02	; 2
    1384:	86 e0       	ldi	r24, 0x06	; 6
    1386:	c5 dd       	rcall	.-1142   	; 0xf12 <sysclk_enable_module>
    1388:	9f c0       	rjmp	.+318    	; 0x14c8 <usart_init_rs232+0x27e>
    138a:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    138c:	88 e0       	ldi	r24, 0x08	; 8
    138e:	d8 07       	cpc	r29, r24
    1390:	21 f4       	brne	.+8      	; 0x139a <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1392:	64 e0       	ldi	r22, 0x04	; 4
    1394:	83 e0       	ldi	r24, 0x03	; 3
    1396:	bd dd       	rcall	.-1158   	; 0xf12 <sysclk_enable_module>
    1398:	97 c0       	rjmp	.+302    	; 0x14c8 <usart_init_rs232+0x27e>
    139a:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    139c:	e9 e0       	ldi	r30, 0x09	; 9
    139e:	de 07       	cpc	r29, r30
    13a0:	21 f4       	brne	.+8      	; 0x13aa <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    13a2:	64 e0       	ldi	r22, 0x04	; 4
    13a4:	84 e0       	ldi	r24, 0x04	; 4
    13a6:	b5 dd       	rcall	.-1174   	; 0xf12 <sysclk_enable_module>
    13a8:	8f c0       	rjmp	.+286    	; 0x14c8 <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    13aa:	c0 39       	cpi	r28, 0x90	; 144
    13ac:	fa e0       	ldi	r31, 0x0A	; 10
    13ae:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    13b0:	21 f4       	brne	.+8      	; 0x13ba <usart_init_rs232+0x170>
    13b2:	64 e0       	ldi	r22, 0x04	; 4
    13b4:	85 e0       	ldi	r24, 0x05	; 5
    13b6:	ad dd       	rcall	.-1190   	; 0xf12 <sysclk_enable_module>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    13b8:	87 c0       	rjmp	.+270    	; 0x14c8 <usart_init_rs232+0x27e>
    13ba:	c0 39       	cpi	r28, 0x90	; 144
    13bc:	8b e0       	ldi	r24, 0x0B	; 11
    13be:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    13c0:	21 f4       	brne	.+8      	; 0x13ca <usart_init_rs232+0x180>
    13c2:	64 e0       	ldi	r22, 0x04	; 4
    13c4:	86 e0       	ldi	r24, 0x06	; 6
    13c6:	a5 dd       	rcall	.-1206   	; 0xf12 <sysclk_enable_module>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    13c8:	7f c0       	rjmp	.+254    	; 0x14c8 <usart_init_rs232+0x27e>
    13ca:	c0 3c       	cpi	r28, 0xC0	; 192
    13cc:	e8 e0       	ldi	r30, 0x08	; 8
    13ce:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    13d0:	21 f4       	brne	.+8      	; 0x13da <usart_init_rs232+0x190>
    13d2:	68 e0       	ldi	r22, 0x08	; 8
    13d4:	83 e0       	ldi	r24, 0x03	; 3
    13d6:	9d dd       	rcall	.-1222   	; 0xf12 <sysclk_enable_module>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    13d8:	77 c0       	rjmp	.+238    	; 0x14c8 <usart_init_rs232+0x27e>
    13da:	c0 3c       	cpi	r28, 0xC0	; 192
    13dc:	f9 e0       	ldi	r31, 0x09	; 9
    13de:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    13e0:	21 f4       	brne	.+8      	; 0x13ea <usart_init_rs232+0x1a0>
    13e2:	68 e0       	ldi	r22, 0x08	; 8
    13e4:	84 e0       	ldi	r24, 0x04	; 4
    13e6:	95 dd       	rcall	.-1238   	; 0xf12 <sysclk_enable_module>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    13e8:	6f c0       	rjmp	.+222    	; 0x14c8 <usart_init_rs232+0x27e>
    13ea:	c0 3c       	cpi	r28, 0xC0	; 192
    13ec:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    13ee:	d8 07       	cpc	r29, r24
    13f0:	21 f4       	brne	.+8      	; 0x13fa <usart_init_rs232+0x1b0>
    13f2:	68 e0       	ldi	r22, 0x08	; 8
    13f4:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    13f6:	8d dd       	rcall	.-1254   	; 0xf12 <sysclk_enable_module>
    13f8:	67 c0       	rjmp	.+206    	; 0x14c8 <usart_init_rs232+0x27e>
    13fa:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    13fc:	eb e0       	ldi	r30, 0x0B	; 11
    13fe:	de 07       	cpc	r29, r30
    1400:	21 f4       	brne	.+8      	; 0x140a <usart_init_rs232+0x1c0>
    1402:	68 e0       	ldi	r22, 0x08	; 8
    1404:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1406:	85 dd       	rcall	.-1270   	; 0xf12 <sysclk_enable_module>
    1408:	5f c0       	rjmp	.+190    	; 0x14c8 <usart_init_rs232+0x27e>
    140a:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    140c:	f8 e0       	ldi	r31, 0x08	; 8
    140e:	df 07       	cpc	r29, r31
    1410:	21 f4       	brne	.+8      	; 0x141a <usart_init_rs232+0x1d0>
    1412:	60 e1       	ldi	r22, 0x10	; 16
    1414:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1416:	7d dd       	rcall	.-1286   	; 0xf12 <sysclk_enable_module>
    1418:	57 c0       	rjmp	.+174    	; 0x14c8 <usart_init_rs232+0x27e>
    141a:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    141c:	89 e0       	ldi	r24, 0x09	; 9
    141e:	d8 07       	cpc	r29, r24
    1420:	21 f4       	brne	.+8      	; 0x142a <usart_init_rs232+0x1e0>
    1422:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1424:	84 e0       	ldi	r24, 0x04	; 4
    1426:	75 dd       	rcall	.-1302   	; 0xf12 <sysclk_enable_module>
    1428:	4f c0       	rjmp	.+158    	; 0x14c8 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    142a:	c0 3a       	cpi	r28, 0xA0	; 160
    142c:	ea e0       	ldi	r30, 0x0A	; 10
    142e:	de 07       	cpc	r29, r30
    1430:	21 f4       	brne	.+8      	; 0x143a <usart_init_rs232+0x1f0>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1432:	60 e1       	ldi	r22, 0x10	; 16
    1434:	85 e0       	ldi	r24, 0x05	; 5
    1436:	6d dd       	rcall	.-1318   	; 0xf12 <sysclk_enable_module>
    1438:	47 c0       	rjmp	.+142    	; 0x14c8 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    143a:	c0 3a       	cpi	r28, 0xA0	; 160
    143c:	fb e0       	ldi	r31, 0x0B	; 11
    143e:	df 07       	cpc	r29, r31
    1440:	21 f4       	brne	.+8      	; 0x144a <usart_init_rs232+0x200>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1442:	60 e1       	ldi	r22, 0x10	; 16
    1444:	86 e0       	ldi	r24, 0x06	; 6
    1446:	65 dd       	rcall	.-1334   	; 0xf12 <sysclk_enable_module>
    1448:	3f c0       	rjmp	.+126    	; 0x14c8 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    144a:	c0 3b       	cpi	r28, 0xB0	; 176
    144c:	88 e0       	ldi	r24, 0x08	; 8
    144e:	d8 07       	cpc	r29, r24
    1450:	21 f4       	brne	.+8      	; 0x145a <usart_init_rs232+0x210>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    1452:	60 e2       	ldi	r22, 0x20	; 32
    1454:	83 e0       	ldi	r24, 0x03	; 3
    1456:	5d dd       	rcall	.-1350   	; 0xf12 <sysclk_enable_module>
    1458:	37 c0       	rjmp	.+110    	; 0x14c8 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    145a:	c0 3b       	cpi	r28, 0xB0	; 176
    145c:	e9 e0       	ldi	r30, 0x09	; 9
    145e:	de 07       	cpc	r29, r30
    1460:	21 f4       	brne	.+8      	; 0x146a <usart_init_rs232+0x220>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    1462:	60 e2       	ldi	r22, 0x20	; 32
    1464:	84 e0       	ldi	r24, 0x04	; 4
    1466:	55 dd       	rcall	.-1366   	; 0xf12 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    1468:	2f c0       	rjmp	.+94     	; 0x14c8 <usart_init_rs232+0x27e>
    146a:	c0 3b       	cpi	r28, 0xB0	; 176
    146c:	fa e0       	ldi	r31, 0x0A	; 10
    146e:	df 07       	cpc	r29, r31
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1470:	21 f4       	brne	.+8      	; 0x147a <usart_init_rs232+0x230>
    1472:	60 e2       	ldi	r22, 0x20	; 32
    1474:	85 e0       	ldi	r24, 0x05	; 5
    1476:	4d dd       	rcall	.-1382   	; 0xf12 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1478:	27 c0       	rjmp	.+78     	; 0x14c8 <usart_init_rs232+0x27e>
    147a:	c0 3b       	cpi	r28, 0xB0	; 176
    147c:	8b e0       	ldi	r24, 0x0B	; 11
    147e:	d8 07       	cpc	r29, r24
    1480:	21 f4       	brne	.+8      	; 0x148a <usart_init_rs232+0x240>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    1482:	60 e2       	ldi	r22, 0x20	; 32
    1484:	86 e0       	ldi	r24, 0x06	; 6
    1486:	45 dd       	rcall	.-1398   	; 0xf12 <sysclk_enable_module>
    1488:	1f c0       	rjmp	.+62     	; 0x14c8 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    148a:	c0 38       	cpi	r28, 0x80	; 128
    148c:	e4 e0       	ldi	r30, 0x04	; 4
    148e:	de 07       	cpc	r29, r30
    1490:	21 f4       	brne	.+8      	; 0x149a <usart_init_rs232+0x250>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1492:	60 e4       	ldi	r22, 0x40	; 64
    1494:	83 e0       	ldi	r24, 0x03	; 3
    1496:	3d dd       	rcall	.-1414   	; 0xf12 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1498:	17 c0       	rjmp	.+46     	; 0x14c8 <usart_init_rs232+0x27e>
    149a:	c0 39       	cpi	r28, 0x90	; 144
    149c:	f4 e0       	ldi	r31, 0x04	; 4
    149e:	df 07       	cpc	r29, r31
    14a0:	21 f4       	brne	.+8      	; 0x14aa <usart_init_rs232+0x260>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    14a2:	60 e4       	ldi	r22, 0x40	; 64
    14a4:	84 e0       	ldi	r24, 0x04	; 4
    14a6:	35 dd       	rcall	.-1430   	; 0xf12 <sysclk_enable_module>
    14a8:	0f c0       	rjmp	.+30     	; 0x14c8 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    14aa:	c0 3a       	cpi	r28, 0xA0	; 160
    14ac:	84 e0       	ldi	r24, 0x04	; 4
    14ae:	d8 07       	cpc	r29, r24
    14b0:	21 f4       	brne	.+8      	; 0x14ba <usart_init_rs232+0x270>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    14b2:	60 e4       	ldi	r22, 0x40	; 64
    14b4:	85 e0       	ldi	r24, 0x05	; 5
    14b6:	2d dd       	rcall	.-1446   	; 0xf12 <sysclk_enable_module>
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    14b8:	07 c0       	rjmp	.+14     	; 0x14c8 <usart_init_rs232+0x27e>
    14ba:	c0 3b       	cpi	r28, 0xB0	; 176
    14bc:	e4 e0       	ldi	r30, 0x04	; 4
    14be:	de 07       	cpc	r29, r30
    14c0:	19 f4       	brne	.+6      	; 0x14c8 <usart_init_rs232+0x27e>
    14c2:	60 e4       	ldi	r22, 0x40	; 64
    14c4:	86 e0       	ldi	r24, 0x06	; 6
    14c6:	25 dd       	rcall	.-1462   	; 0xf12 <sysclk_enable_module>
    14c8:	8d 81       	ldd	r24, Y+5	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    14ca:	8f 73       	andi	r24, 0x3F	; 63
    14cc:	8d 83       	std	Y+5, r24	; 0x05
    14ce:	f8 01       	movw	r30, r16
    14d0:	95 81       	ldd	r25, Z+5	; 0x05
    14d2:	84 81       	ldd	r24, Z+4	; 0x04
    14d4:	89 2b       	or	r24, r25
    14d6:	96 81       	ldd	r25, Z+6	; 0x06
    14d8:	91 11       	cpse	r25, r1
    14da:	98 e0       	ldi	r25, 0x08	; 8
    14dc:	89 2b       	or	r24, r25
    14de:	8d 83       	std	Y+5, r24	; 0x05
    14e0:	f8 01       	movw	r30, r16
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    14e2:	40 81       	ld	r20, Z
    14e4:	51 81       	ldd	r21, Z+1	; 0x01
    14e6:	62 81       	ldd	r22, Z+2	; 0x02
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    14e8:	73 81       	ldd	r23, Z+3	; 0x03
    14ea:	00 e8       	ldi	r16, 0x80	; 128
    14ec:	14 e8       	ldi	r17, 0x84	; 132
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    14ee:	2e e1       	ldi	r18, 0x1E	; 30
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	ce 01       	movw	r24, r28
    14f4:	97 dd       	rcall	.-1234   	; 0x1024 <usart_set_baudrate>
    14f6:	9c 81       	ldd	r25, Y+4	; 0x04
    14f8:	98 60       	ori	r25, 0x08	; 8
    14fa:	9c 83       	std	Y+4, r25	; 0x04
    14fc:	9c 81       	ldd	r25, Y+4	; 0x04
    14fe:	90 61       	ori	r25, 0x10	; 16
    1500:	9c 83       	std	Y+4, r25	; 0x04
    1502:	df 91       	pop	r29
    1504:	cf 91       	pop	r28
    1506:	1f 91       	pop	r17
    1508:	0f 91       	pop	r16
    150a:	08 95       	ret

0000150c <__portable_avr_delay_cycles>:
		case 5: port.PIN5CTRL |= PORT_OPC_PULLDOWN_gc;
		case 6: port.PIN6CTRL |= PORT_OPC_PULLDOWN_gc;
		case 7: port.PIN7CTRL |= PORT_OPC_PULLDOWN_gc;
		
	}
}
    150c:	04 c0       	rjmp	.+8      	; 0x1516 <__portable_avr_delay_cycles+0xa>
    150e:	61 50       	subi	r22, 0x01	; 1
    1510:	71 09       	sbc	r23, r1
    1512:	81 09       	sbc	r24, r1
    1514:	91 09       	sbc	r25, r1
    1516:	61 15       	cp	r22, r1
    1518:	71 05       	cpc	r23, r1
    151a:	81 05       	cpc	r24, r1
    151c:	91 05       	cpc	r25, r1
    151e:	b9 f7       	brne	.-18     	; 0x150e <__portable_avr_delay_cycles+0x2>
    1520:	08 95       	ret

00001522 <usart_tx_at>:
    1522:	0f 93       	push	r16
    1524:	1f 93       	push	r17
    1526:	cf 93       	push	r28
    1528:	df 93       	push	r29
    152a:	eb 01       	movw	r28, r22
    152c:	68 81       	ld	r22, Y
    152e:	66 23       	and	r22, r22
    1530:	39 f0       	breq	.+14     	; 0x1540 <usart_tx_at+0x1e>
    1532:	8c 01       	movw	r16, r24
    1534:	21 96       	adiw	r28, 0x01	; 1
    1536:	c8 01       	movw	r24, r16
    1538:	6d dd       	rcall	.-1318   	; 0x1014 <usart_putchar>
    153a:	69 91       	ld	r22, Y+
    153c:	61 11       	cpse	r22, r1
    153e:	fb cf       	rjmp	.-10     	; 0x1536 <usart_tx_at+0x14>
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	1f 91       	pop	r17
    1546:	0f 91       	pop	r16
    1548:	08 95       	ret

0000154a <led_blink>:
    154a:	af 92       	push	r10
    154c:	bf 92       	push	r11
    154e:	cf 92       	push	r12
    1550:	df 92       	push	r13
    1552:	ef 92       	push	r14
    1554:	ff 92       	push	r15
    1556:	0f 93       	push	r16
    1558:	1f 93       	push	r17
    155a:	cf 93       	push	r28
    155c:	df 93       	push	r29
    155e:	e0 ec       	ldi	r30, 0xC0	; 192
    1560:	f7 e0       	ldi	r31, 0x07	; 7
    1562:	94 81       	ldd	r25, Z+4	; 0x04
    1564:	97 7f       	andi	r25, 0xF7	; 247
    1566:	94 83       	std	Z+4, r25	; 0x04
    1568:	88 23       	and	r24, r24
    156a:	09 f4       	brne	.+2      	; 0x156e <led_blink+0x24>
    156c:	4f c0       	rjmp	.+158    	; 0x160c <led_blink+0xc2>
    156e:	28 ee       	ldi	r18, 0xE8	; 232
    1570:	33 e0       	ldi	r19, 0x03	; 3
    1572:	82 9f       	mul	r24, r18
    1574:	a0 01       	movw	r20, r0
    1576:	83 9f       	mul	r24, r19
    1578:	50 0d       	add	r21, r0
    157a:	11 24       	eor	r1, r1
    157c:	95 2f       	mov	r25, r21
    157e:	99 0f       	add	r25, r25
    1580:	99 0b       	sbc	r25, r25
    1582:	68 94       	set
    1584:	aa 24       	eor	r10, r10
    1586:	a7 f8       	bld	r10, 7
    1588:	0f 2e       	mov	r0, r31
    158a:	f4 e8       	ldi	r31, 0x84	; 132
    158c:	bf 2e       	mov	r11, r31
    158e:	f0 2d       	mov	r31, r0
    1590:	0f 2e       	mov	r0, r31
    1592:	fe e1       	ldi	r31, 0x1E	; 30
    1594:	cf 2e       	mov	r12, r31
    1596:	f0 2d       	mov	r31, r0
    1598:	d1 2c       	mov	r13, r1
    159a:	e1 2c       	mov	r14, r1
    159c:	f1 2c       	mov	r15, r1
    159e:	00 e0       	ldi	r16, 0x00	; 0
    15a0:	10 e0       	ldi	r17, 0x00	; 0
    15a2:	24 2f       	mov	r18, r20
    15a4:	35 2f       	mov	r19, r21
    15a6:	49 2f       	mov	r20, r25
    15a8:	59 2f       	mov	r21, r25
    15aa:	69 2f       	mov	r22, r25
    15ac:	79 2f       	mov	r23, r25
    15ae:	89 2f       	mov	r24, r25
    15b0:	0e 94 b9 13 	call	0x2772	; 0x2772 <__muldi3>
    15b4:	0f 2e       	mov	r0, r31
    15b6:	f6 e0       	ldi	r31, 0x06	; 6
    15b8:	af 2e       	mov	r10, r31
    15ba:	f0 2d       	mov	r31, r0
    15bc:	b1 2c       	mov	r11, r1
    15be:	c1 2c       	mov	r12, r1
    15c0:	0e 94 0c 14 	call	0x2818	; 0x2818 <__udivdi3>
    15c4:	29 51       	subi	r18, 0x19	; 25
    15c6:	3c 4f       	sbci	r19, 0xFC	; 252
    15c8:	4f 4f       	sbci	r20, 0xFF	; 255
    15ca:	5f 4f       	sbci	r21, 0xFF	; 255
    15cc:	6f 4f       	sbci	r22, 0xFF	; 255
    15ce:	7f 4f       	sbci	r23, 0xFF	; 255
    15d0:	8f 4f       	sbci	r24, 0xFF	; 255
    15d2:	9f 4f       	sbci	r25, 0xFF	; 255
    15d4:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <__floatundisf>
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	4a e7       	ldi	r20, 0x7A	; 122
    15de:	54 e4       	ldi	r21, 0x44	; 68
    15e0:	65 d7       	rcall	.+3786   	; 0x24ac <__divsf3>
    15e2:	d1 d7       	rcall	.+4002   	; 0x2586 <__fixunssfdi>
    15e4:	02 2f       	mov	r16, r18
    15e6:	13 2f       	mov	r17, r19
    15e8:	d4 2f       	mov	r29, r20
    15ea:	c5 2f       	mov	r28, r21
    15ec:	62 2f       	mov	r22, r18
    15ee:	71 2f       	mov	r23, r17
    15f0:	8d 2f       	mov	r24, r29
    15f2:	9c 2f       	mov	r25, r28
    15f4:	8b df       	rcall	.-234    	; 0x150c <__portable_avr_delay_cycles>
    15f6:	e0 ec       	ldi	r30, 0xC0	; 192
    15f8:	f7 e0       	ldi	r31, 0x07	; 7
    15fa:	84 81       	ldd	r24, Z+4	; 0x04
    15fc:	88 60       	ori	r24, 0x08	; 8
    15fe:	84 83       	std	Z+4, r24	; 0x04
    1600:	60 2f       	mov	r22, r16
    1602:	71 2f       	mov	r23, r17
    1604:	8d 2f       	mov	r24, r29
    1606:	9c 2f       	mov	r25, r28
    1608:	81 df       	rcall	.-254    	; 0x150c <__portable_avr_delay_cycles>
    160a:	0f c0       	rjmp	.+30     	; 0x162a <led_blink+0xe0>
    160c:	61 e0       	ldi	r22, 0x01	; 1
    160e:	70 e0       	ldi	r23, 0x00	; 0
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	7b df       	rcall	.-266    	; 0x150c <__portable_avr_delay_cycles>
    1616:	e0 ec       	ldi	r30, 0xC0	; 192
    1618:	f7 e0       	ldi	r31, 0x07	; 7
    161a:	84 81       	ldd	r24, Z+4	; 0x04
    161c:	88 60       	ori	r24, 0x08	; 8
    161e:	84 83       	std	Z+4, r24	; 0x04
    1620:	61 e0       	ldi	r22, 0x01	; 1
    1622:	70 e0       	ldi	r23, 0x00	; 0
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	71 df       	rcall	.-286    	; 0x150c <__portable_avr_delay_cycles>
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	1f 91       	pop	r17
    1630:	0f 91       	pop	r16
    1632:	ff 90       	pop	r15
    1634:	ef 90       	pop	r14
    1636:	df 90       	pop	r13
    1638:	cf 90       	pop	r12
    163a:	bf 90       	pop	r11
    163c:	af 90       	pop	r10
    163e:	08 95       	ret

00001640 <at_timeout_start>:
    1640:	e0 e0       	ldi	r30, 0x00	; 0
    1642:	f8 e0       	ldi	r31, 0x08	; 8
    1644:	86 a3       	std	Z+38, r24	; 0x26
    1646:	97 a3       	std	Z+39, r25	; 0x27
    1648:	84 85       	ldd	r24, Z+12	; 0x0c
    164a:	81 60       	ori	r24, 0x01	; 1
    164c:	84 87       	std	Z+12, r24	; 0x0c
    164e:	10 a2       	std	Z+32, r1	; 0x20
    1650:	11 a2       	std	Z+33, r1	; 0x21
    1652:	78 94       	sei
    1654:	08 95       	ret

00001656 <at_timeout_stop>:
    1656:	f8 94       	cli
    1658:	e0 e0       	ldi	r30, 0x00	; 0
    165a:	f8 e0       	ldi	r31, 0x08	; 8
    165c:	84 85       	ldd	r24, Z+12	; 0x0c
    165e:	81 60       	ori	r24, 0x01	; 1
    1660:	84 87       	std	Z+12, r24	; 0x0c
    1662:	08 95       	ret

00001664 <usart_rx_at>:
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	ec 01       	movw	r28, r24
    166a:	cb 01       	movw	r24, r22
    166c:	e9 df       	rcall	.-46     	; 0x1640 <at_timeout_start>
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	90 91 24 22 	lds	r25, 0x2224	; 0x802224 <status_at_timeout>
    1674:	88 23       	and	r24, r24
    1676:	2c f0       	brlt	.+10     	; 0x1682 <usart_rx_at+0x1e>
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	91 11       	cpse	r25, r1
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	81 11       	cpse	r24, r1
    1680:	f6 cf       	rjmp	.-20     	; 0x166e <usart_rx_at+0xa>
    1682:	e9 df       	rcall	.-46     	; 0x1656 <at_timeout_stop>
    1684:	88 81       	ld	r24, Y
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	08 95       	ret

0000168c <at_response>:
    168c:	bf 92       	push	r11
    168e:	cf 92       	push	r12
    1690:	df 92       	push	r13
    1692:	ef 92       	push	r14
    1694:	ff 92       	push	r15
    1696:	0f 93       	push	r16
    1698:	1f 93       	push	r17
    169a:	cf 93       	push	r28
    169c:	df 93       	push	r29
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	e2 97       	sbiw	r28, 0x32	; 50
    16a4:	cd bf       	out	0x3d, r28	; 61
    16a6:	de bf       	out	0x3e, r29	; 62
    16a8:	7c 01       	movw	r14, r24
    16aa:	6b 01       	movw	r12, r22
    16ac:	10 92 24 22 	sts	0x2224, r1	; 0x802224 <status_at_timeout>
    16b0:	80 91 24 22 	lds	r24, 0x2224	; 0x802224 <status_at_timeout>
    16b4:	81 11       	cpse	r24, r1
    16b6:	99 c0       	rjmp	.+306    	; 0x17ea <at_response+0x15e>
    16b8:	b1 2c       	mov	r11, r1
    16ba:	0b 2d       	mov	r16, r11
    16bc:	10 e0       	ldi	r17, 0x00	; 0
    16be:	b6 01       	movw	r22, r12
    16c0:	c7 01       	movw	r24, r14
    16c2:	d0 df       	rcall	.-96     	; 0x1664 <usart_rx_at>
    16c4:	e1 e0       	ldi	r30, 0x01	; 1
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	ec 0f       	add	r30, r28
    16ca:	fd 1f       	adc	r31, r29
    16cc:	e0 0f       	add	r30, r16
    16ce:	f1 1f       	adc	r31, r17
    16d0:	80 83       	st	Z, r24
    16d2:	fe 01       	movw	r30, r28
    16d4:	e0 0f       	add	r30, r16
    16d6:	f1 1f       	adc	r31, r17
    16d8:	40 81       	ld	r20, Z
    16da:	91 e0       	ldi	r25, 0x01	; 1
    16dc:	4f 34       	cpi	r20, 0x4F	; 79
    16de:	09 f0       	breq	.+2      	; 0x16e2 <at_response+0x56>
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	21 e0       	ldi	r18, 0x01	; 1
    16e4:	8b 34       	cpi	r24, 0x4B	; 75
    16e6:	09 f0       	breq	.+2      	; 0x16ea <at_response+0x5e>
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	22 23       	and	r18, r18
    16ec:	21 f0       	breq	.+8      	; 0x16f6 <at_response+0x6a>
    16ee:	99 23       	and	r25, r25
    16f0:	11 f0       	breq	.+4      	; 0x16f6 <at_response+0x6a>
    16f2:	b3 94       	inc	r11
    16f4:	4e c0       	rjmp	.+156    	; 0x1792 <at_response+0x106>
    16f6:	ee ef       	ldi	r30, 0xFE	; 254
    16f8:	ff ef       	ldi	r31, 0xFF	; 255
    16fa:	ec 0f       	add	r30, r28
    16fc:	fd 1f       	adc	r31, r29
    16fe:	e0 0f       	add	r30, r16
    1700:	f1 1f       	adc	r31, r17
    1702:	30 81       	ld	r19, Z
    1704:	ef ef       	ldi	r30, 0xFF	; 255
    1706:	ff ef       	ldi	r31, 0xFF	; 255
    1708:	ec 0f       	add	r30, r28
    170a:	fd 1f       	adc	r31, r29
    170c:	e0 0f       	add	r30, r16
    170e:	f1 1f       	adc	r31, r17
    1710:	50 81       	ld	r21, Z
    1712:	ed ef       	ldi	r30, 0xFD	; 253
    1714:	ff ef       	ldi	r31, 0xFF	; 255
    1716:	ec 0f       	add	r30, r28
    1718:	fd 1f       	adc	r31, r29
    171a:	e0 0f       	add	r30, r16
    171c:	f1 1f       	adc	r31, r17
    171e:	21 e0       	ldi	r18, 0x01	; 1
    1720:	60 81       	ld	r22, Z
    1722:	65 34       	cpi	r22, 0x45	; 69
    1724:	09 f0       	breq	.+2      	; 0x1728 <at_response+0x9c>
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	92 23       	and	r25, r18
    172a:	21 e0       	ldi	r18, 0x01	; 1
    172c:	82 35       	cpi	r24, 0x52	; 82
    172e:	09 f0       	breq	.+2      	; 0x1732 <at_response+0xa6>
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	92 23       	and	r25, r18
    1734:	21 e0       	ldi	r18, 0x01	; 1
    1736:	32 35       	cpi	r19, 0x52	; 82
    1738:	09 f0       	breq	.+2      	; 0x173c <at_response+0xb0>
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	29 23       	and	r18, r25
    173e:	41 f0       	breq	.+16     	; 0x1750 <at_response+0xc4>
    1740:	91 e0       	ldi	r25, 0x01	; 1
    1742:	52 35       	cpi	r21, 0x52	; 82
    1744:	09 f0       	breq	.+2      	; 0x1748 <at_response+0xbc>
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	99 23       	and	r25, r25
    174a:	11 f0       	breq	.+4      	; 0x1750 <at_response+0xc4>
    174c:	b3 94       	inc	r11
    174e:	21 c0       	rjmp	.+66     	; 0x1792 <at_response+0x106>
    1750:	8e 33       	cpi	r24, 0x3E	; 62
    1752:	11 f4       	brne	.+4      	; 0x1758 <at_response+0xcc>
    1754:	b3 94       	inc	r11
    1756:	1d c0       	rjmp	.+58     	; 0x1792 <at_response+0x106>
    1758:	21 e0       	ldi	r18, 0x01	; 1
    175a:	33 35       	cpi	r19, 0x53	; 83
    175c:	09 f0       	breq	.+2      	; 0x1760 <at_response+0xd4>
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	91 e0       	ldi	r25, 0x01	; 1
    1762:	5a 33       	cpi	r21, 0x3A	; 58
    1764:	09 f0       	breq	.+2      	; 0x1768 <at_response+0xdc>
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	29 23       	and	r18, r25
    176a:	91 e0       	ldi	r25, 0x01	; 1
    176c:	80 33       	cpi	r24, 0x30	; 48
    176e:	09 f0       	breq	.+2      	; 0x1772 <at_response+0xe6>
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	92 23       	and	r25, r18
    1774:	41 f0       	breq	.+16     	; 0x1786 <at_response+0xfa>
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	40 32       	cpi	r20, 0x20	; 32
    177a:	09 f0       	breq	.+2      	; 0x177e <at_response+0xf2>
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	88 23       	and	r24, r24
    1780:	11 f0       	breq	.+4      	; 0x1786 <at_response+0xfa>
    1782:	b3 94       	inc	r11
    1784:	06 c0       	rjmp	.+12     	; 0x1792 <at_response+0x106>
    1786:	b3 94       	inc	r11
    1788:	80 91 24 22 	lds	r24, 0x2224	; 0x802224 <status_at_timeout>
    178c:	88 23       	and	r24, r24
    178e:	09 f4       	brne	.+2      	; 0x1792 <at_response+0x106>
    1790:	94 cf       	rjmp	.-216    	; 0x16ba <at_response+0x2e>
    1792:	65 ec       	ldi	r22, 0xC5	; 197
    1794:	70 e2       	ldi	r23, 0x20	; 32
    1796:	80 ea       	ldi	r24, 0xA0	; 160
    1798:	9a e0       	ldi	r25, 0x0A	; 10
    179a:	c3 de       	rcall	.-634    	; 0x1522 <usart_tx_at>
    179c:	6f e8       	ldi	r22, 0x8F	; 143
    179e:	70 e2       	ldi	r23, 0x20	; 32
    17a0:	80 ea       	ldi	r24, 0xA0	; 160
    17a2:	9a e0       	ldi	r25, 0x0A	; 10
    17a4:	be de       	rcall	.-644    	; 0x1522 <usart_tx_at>
    17a6:	bb 20       	and	r11, r11
    17a8:	99 f0       	breq	.+38     	; 0x17d0 <at_response+0x144>
    17aa:	ce 01       	movw	r24, r28
    17ac:	01 96       	adiw	r24, 0x01	; 1
    17ae:	7c 01       	movw	r14, r24
    17b0:	ba 94       	dec	r11
    17b2:	0b 2d       	mov	r16, r11
    17b4:	10 e0       	ldi	r17, 0x00	; 0
    17b6:	0f 5f       	subi	r16, 0xFF	; 255
    17b8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ba:	08 0f       	add	r16, r24
    17bc:	19 1f       	adc	r17, r25
    17be:	f7 01       	movw	r30, r14
    17c0:	61 91       	ld	r22, Z+
    17c2:	7f 01       	movw	r14, r30
    17c4:	80 ea       	ldi	r24, 0xA0	; 160
    17c6:	9a e0       	ldi	r25, 0x0A	; 10
    17c8:	25 dc       	rcall	.-1974   	; 0x1014 <usart_putchar>
    17ca:	e0 16       	cp	r14, r16
    17cc:	f1 06       	cpc	r15, r17
    17ce:	b9 f7       	brne	.-18     	; 0x17be <at_response+0x132>
    17d0:	65 ec       	ldi	r22, 0xC5	; 197
    17d2:	70 e2       	ldi	r23, 0x20	; 32
    17d4:	80 ea       	ldi	r24, 0xA0	; 160
    17d6:	9a e0       	ldi	r25, 0x0A	; 10
    17d8:	a4 de       	rcall	.-696    	; 0x1522 <usart_tx_at>
    17da:	6f e8       	ldi	r22, 0x8F	; 143
    17dc:	70 e2       	ldi	r23, 0x20	; 32
    17de:	80 ea       	ldi	r24, 0xA0	; 160
    17e0:	9a e0       	ldi	r25, 0x0A	; 10
    17e2:	9f de       	rcall	.-706    	; 0x1522 <usart_tx_at>
    17e4:	80 91 24 22 	lds	r24, 0x2224	; 0x802224 <status_at_timeout>
    17e8:	0b c0       	rjmp	.+22     	; 0x1800 <at_response+0x174>
    17ea:	65 ec       	ldi	r22, 0xC5	; 197
    17ec:	70 e2       	ldi	r23, 0x20	; 32
    17ee:	80 ea       	ldi	r24, 0xA0	; 160
    17f0:	9a e0       	ldi	r25, 0x0A	; 10
    17f2:	97 de       	rcall	.-722    	; 0x1522 <usart_tx_at>
    17f4:	6f e8       	ldi	r22, 0x8F	; 143
    17f6:	70 e2       	ldi	r23, 0x20	; 32
    17f8:	80 ea       	ldi	r24, 0xA0	; 160
    17fa:	9a e0       	ldi	r25, 0x0A	; 10
    17fc:	92 de       	rcall	.-732    	; 0x1522 <usart_tx_at>
    17fe:	e8 cf       	rjmp	.-48     	; 0x17d0 <at_response+0x144>
    1800:	e2 96       	adiw	r28, 0x32	; 50
    1802:	cd bf       	out	0x3d, r28	; 61
    1804:	de bf       	out	0x3e, r29	; 62
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	1f 91       	pop	r17
    180c:	0f 91       	pop	r16
    180e:	ff 90       	pop	r15
    1810:	ef 90       	pop	r14
    1812:	df 90       	pop	r13
    1814:	cf 90       	pop	r12
    1816:	bf 90       	pop	r11
    1818:	08 95       	ret

0000181a <at_response_qnstatus>:
    181a:	af 92       	push	r10
    181c:	bf 92       	push	r11
    181e:	cf 92       	push	r12
    1820:	df 92       	push	r13
    1822:	ff 92       	push	r15
    1824:	0f 93       	push	r16
    1826:	1f 93       	push	r17
    1828:	cf 93       	push	r28
    182a:	df 93       	push	r29
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
    1830:	e2 97       	sbiw	r28, 0x32	; 50
    1832:	cd bf       	out	0x3d, r28	; 61
    1834:	de bf       	out	0x3e, r29	; 62
    1836:	6c 01       	movw	r12, r24
    1838:	5b 01       	movw	r10, r22
    183a:	10 92 24 22 	sts	0x2224, r1	; 0x802224 <status_at_timeout>
    183e:	80 91 24 22 	lds	r24, 0x2224	; 0x802224 <status_at_timeout>
    1842:	81 11       	cpse	r24, r1
    1844:	5e c0       	rjmp	.+188    	; 0x1902 <at_response_qnstatus+0xe8>
    1846:	f1 2c       	mov	r15, r1
    1848:	0f 2d       	mov	r16, r15
    184a:	10 e0       	ldi	r17, 0x00	; 0
    184c:	b5 01       	movw	r22, r10
    184e:	c6 01       	movw	r24, r12
    1850:	09 df       	rcall	.-494    	; 0x1664 <usart_rx_at>
    1852:	e1 e0       	ldi	r30, 0x01	; 1
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	ec 0f       	add	r30, r28
    1858:	fd 1f       	adc	r31, r29
    185a:	e0 0f       	add	r30, r16
    185c:	f1 1f       	adc	r31, r17
    185e:	80 83       	st	Z, r24
    1860:	ee ef       	ldi	r30, 0xFE	; 254
    1862:	ff ef       	ldi	r31, 0xFF	; 255
    1864:	ec 0f       	add	r30, r28
    1866:	fd 1f       	adc	r31, r29
    1868:	e0 0f       	add	r30, r16
    186a:	f1 1f       	adc	r31, r17
    186c:	21 e0       	ldi	r18, 0x01	; 1
    186e:	90 81       	ld	r25, Z
    1870:	93 35       	cpi	r25, 0x53	; 83
    1872:	09 f0       	breq	.+2      	; 0x1876 <at_response_qnstatus+0x5c>
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	91 e0       	ldi	r25, 0x01	; 1
    1878:	ef ef       	ldi	r30, 0xFF	; 255
    187a:	ff ef       	ldi	r31, 0xFF	; 255
    187c:	ec 0f       	add	r30, r28
    187e:	fd 1f       	adc	r31, r29
    1880:	e0 0f       	add	r30, r16
    1882:	f1 1f       	adc	r31, r17
    1884:	30 81       	ld	r19, Z
    1886:	3a 33       	cpi	r19, 0x3A	; 58
    1888:	09 f0       	breq	.+2      	; 0x188c <at_response_qnstatus+0x72>
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	29 23       	and	r18, r25
    188e:	91 e0       	ldi	r25, 0x01	; 1
    1890:	80 33       	cpi	r24, 0x30	; 48
    1892:	09 f0       	breq	.+2      	; 0x1896 <at_response_qnstatus+0x7c>
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	92 23       	and	r25, r18
    1898:	71 f0       	breq	.+28     	; 0x18b6 <at_response_qnstatus+0x9c>
    189a:	fe 01       	movw	r30, r28
    189c:	e0 0f       	add	r30, r16
    189e:	f1 1f       	adc	r31, r17
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	90 81       	ld	r25, Z
    18a4:	90 32       	cpi	r25, 0x20	; 32
    18a6:	09 f0       	breq	.+2      	; 0x18aa <at_response_qnstatus+0x90>
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	88 23       	and	r24, r24
    18ac:	21 f0       	breq	.+8      	; 0x18b6 <at_response_qnstatus+0x9c>
    18ae:	f3 94       	inc	r15
    18b0:	bb 24       	eor	r11, r11
    18b2:	b3 94       	inc	r11
    18b4:	06 c0       	rjmp	.+12     	; 0x18c2 <at_response_qnstatus+0xa8>
    18b6:	f3 94       	inc	r15
    18b8:	80 91 24 22 	lds	r24, 0x2224	; 0x802224 <status_at_timeout>
    18bc:	88 23       	and	r24, r24
    18be:	21 f2       	breq	.-120    	; 0x1848 <at_response_qnstatus+0x2e>
    18c0:	b1 2c       	mov	r11, r1
    18c2:	65 ec       	ldi	r22, 0xC5	; 197
    18c4:	70 e2       	ldi	r23, 0x20	; 32
    18c6:	80 ea       	ldi	r24, 0xA0	; 160
    18c8:	9a e0       	ldi	r25, 0x0A	; 10
    18ca:	2b de       	rcall	.-938    	; 0x1522 <usart_tx_at>
    18cc:	6f e8       	ldi	r22, 0x8F	; 143
    18ce:	70 e2       	ldi	r23, 0x20	; 32
    18d0:	80 ea       	ldi	r24, 0xA0	; 160
    18d2:	9a e0       	ldi	r25, 0x0A	; 10
    18d4:	26 de       	rcall	.-948    	; 0x1522 <usart_tx_at>
    18d6:	ff 20       	and	r15, r15
    18d8:	f9 f0       	breq	.+62     	; 0x1918 <at_response_qnstatus+0xfe>
    18da:	ce 01       	movw	r24, r28
    18dc:	01 96       	adiw	r24, 0x01	; 1
    18de:	6c 01       	movw	r12, r24
    18e0:	fa 94       	dec	r15
    18e2:	0f 2d       	mov	r16, r15
    18e4:	10 e0       	ldi	r17, 0x00	; 0
    18e6:	0f 5f       	subi	r16, 0xFF	; 255
    18e8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ea:	08 0f       	add	r16, r24
    18ec:	19 1f       	adc	r17, r25
    18ee:	f6 01       	movw	r30, r12
    18f0:	61 91       	ld	r22, Z+
    18f2:	6f 01       	movw	r12, r30
    18f4:	80 ea       	ldi	r24, 0xA0	; 160
    18f6:	9a e0       	ldi	r25, 0x0A	; 10
    18f8:	8d db       	rcall	.-2278   	; 0x1014 <usart_putchar>
    18fa:	c0 16       	cp	r12, r16
    18fc:	d1 06       	cpc	r13, r17
    18fe:	b9 f7       	brne	.-18     	; 0x18ee <at_response_qnstatus+0xd4>
    1900:	0b c0       	rjmp	.+22     	; 0x1918 <at_response_qnstatus+0xfe>
    1902:	65 ec       	ldi	r22, 0xC5	; 197
    1904:	70 e2       	ldi	r23, 0x20	; 32
    1906:	80 ea       	ldi	r24, 0xA0	; 160
    1908:	9a e0       	ldi	r25, 0x0A	; 10
    190a:	0b de       	rcall	.-1002   	; 0x1522 <usart_tx_at>
    190c:	6f e8       	ldi	r22, 0x8F	; 143
    190e:	70 e2       	ldi	r23, 0x20	; 32
    1910:	80 ea       	ldi	r24, 0xA0	; 160
    1912:	9a e0       	ldi	r25, 0x0A	; 10
    1914:	06 de       	rcall	.-1012   	; 0x1522 <usart_tx_at>
    1916:	b1 2c       	mov	r11, r1
    1918:	65 ec       	ldi	r22, 0xC5	; 197
    191a:	70 e2       	ldi	r23, 0x20	; 32
    191c:	80 ea       	ldi	r24, 0xA0	; 160
    191e:	9a e0       	ldi	r25, 0x0A	; 10
    1920:	00 de       	rcall	.-1024   	; 0x1522 <usart_tx_at>
    1922:	6f e8       	ldi	r22, 0x8F	; 143
    1924:	70 e2       	ldi	r23, 0x20	; 32
    1926:	80 ea       	ldi	r24, 0xA0	; 160
    1928:	9a e0       	ldi	r25, 0x0A	; 10
    192a:	fb dd       	rcall	.-1034   	; 0x1522 <usart_tx_at>
    192c:	8b 2d       	mov	r24, r11
    192e:	e2 96       	adiw	r28, 0x32	; 50
    1930:	cd bf       	out	0x3d, r28	; 61
    1932:	de bf       	out	0x3e, r29	; 62
    1934:	df 91       	pop	r29
    1936:	cf 91       	pop	r28
    1938:	1f 91       	pop	r17
    193a:	0f 91       	pop	r16
    193c:	ff 90       	pop	r15
    193e:	df 90       	pop	r13
    1940:	cf 90       	pop	r12
    1942:	bf 90       	pop	r11
    1944:	af 90       	pop	r10
    1946:	08 95       	ret

00001948 <at_response_qistat>:
    1948:	bf 92       	push	r11
    194a:	cf 92       	push	r12
    194c:	df 92       	push	r13
    194e:	ef 92       	push	r14
    1950:	ff 92       	push	r15
    1952:	0f 93       	push	r16
    1954:	1f 93       	push	r17
    1956:	cf 93       	push	r28
    1958:	df 93       	push	r29
    195a:	cd b7       	in	r28, 0x3d	; 61
    195c:	de b7       	in	r29, 0x3e	; 62
    195e:	e2 97       	sbiw	r28, 0x32	; 50
    1960:	cd bf       	out	0x3d, r28	; 61
    1962:	de bf       	out	0x3e, r29	; 62
    1964:	8c 01       	movw	r16, r24
    1966:	7b 01       	movw	r14, r22
    1968:	10 92 24 22 	sts	0x2224, r1	; 0x802224 <status_at_timeout>
    196c:	80 91 24 22 	lds	r24, 0x2224	; 0x802224 <status_at_timeout>
    1970:	81 11       	cpse	r24, r1
    1972:	6a c0       	rjmp	.+212    	; 0x1a48 <at_response_qistat+0x100>
    1974:	b1 2c       	mov	r11, r1
    1976:	cb 2c       	mov	r12, r11
    1978:	d1 2c       	mov	r13, r1
    197a:	b7 01       	movw	r22, r14
    197c:	c8 01       	movw	r24, r16
    197e:	72 de       	rcall	.-796    	; 0x1664 <usart_rx_at>
    1980:	e1 e0       	ldi	r30, 0x01	; 1
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	ec 0f       	add	r30, r28
    1986:	fd 1f       	adc	r31, r29
    1988:	ec 0d       	add	r30, r12
    198a:	fd 1d       	adc	r31, r13
    198c:	80 83       	st	Z, r24
    198e:	ee ef       	ldi	r30, 0xFE	; 254
    1990:	ff ef       	ldi	r31, 0xFF	; 255
    1992:	ec 0f       	add	r30, r28
    1994:	fd 1f       	adc	r31, r29
    1996:	ec 0d       	add	r30, r12
    1998:	fd 1d       	adc	r31, r13
    199a:	21 e0       	ldi	r18, 0x01	; 1
    199c:	90 81       	ld	r25, Z
    199e:	9a 33       	cpi	r25, 0x3A	; 58
    19a0:	09 f0       	breq	.+2      	; 0x19a4 <at_response_qistat+0x5c>
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	91 e0       	ldi	r25, 0x01	; 1
    19a6:	ef ef       	ldi	r30, 0xFF	; 255
    19a8:	ff ef       	ldi	r31, 0xFF	; 255
    19aa:	ec 0f       	add	r30, r28
    19ac:	fd 1f       	adc	r31, r29
    19ae:	ec 0d       	add	r30, r12
    19b0:	fd 1d       	adc	r31, r13
    19b2:	30 81       	ld	r19, Z
    19b4:	30 32       	cpi	r19, 0x20	; 32
    19b6:	09 f0       	breq	.+2      	; 0x19ba <at_response_qistat+0x72>
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	29 23       	and	r18, r25
    19bc:	fe 01       	movw	r30, r28
    19be:	ec 0d       	add	r30, r12
    19c0:	fd 1d       	adc	r31, r13
    19c2:	91 e0       	ldi	r25, 0x01	; 1
    19c4:	30 81       	ld	r19, Z
    19c6:	30 33       	cpi	r19, 0x30	; 48
    19c8:	09 f0       	breq	.+2      	; 0x19cc <at_response_qistat+0x84>
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	92 23       	and	r25, r18
    19ce:	29 2f       	mov	r18, r25
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	8c 32       	cpi	r24, 0x2C	; 44
    19d4:	41 f0       	breq	.+16     	; 0x19e6 <at_response_qistat+0x9e>
    19d6:	51 e0       	ldi	r21, 0x01	; 1
    19d8:	40 e0       	ldi	r20, 0x00	; 0
    19da:	85 33       	cpi	r24, 0x35	; 53
    19dc:	09 f0       	breq	.+2      	; 0x19e0 <at_response_qistat+0x98>
    19de:	50 e0       	ldi	r21, 0x00	; 0
    19e0:	85 2f       	mov	r24, r21
    19e2:	94 2f       	mov	r25, r20
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <at_response_qistat+0xa2>
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	82 23       	and	r24, r18
    19ec:	93 23       	and	r25, r19
    19ee:	89 2b       	or	r24, r25
    19f0:	21 f0       	breq	.+8      	; 0x19fa <at_response_qistat+0xb2>
    19f2:	b3 94       	inc	r11
    19f4:	dd 24       	eor	r13, r13
    19f6:	d3 94       	inc	r13
    19f8:	07 c0       	rjmp	.+14     	; 0x1a08 <at_response_qistat+0xc0>
    19fa:	b3 94       	inc	r11
    19fc:	80 91 24 22 	lds	r24, 0x2224	; 0x802224 <status_at_timeout>
    1a00:	88 23       	and	r24, r24
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <at_response_qistat+0xbe>
    1a04:	b8 cf       	rjmp	.-144    	; 0x1976 <at_response_qistat+0x2e>
    1a06:	d1 2c       	mov	r13, r1
    1a08:	65 ec       	ldi	r22, 0xC5	; 197
    1a0a:	70 e2       	ldi	r23, 0x20	; 32
    1a0c:	80 ea       	ldi	r24, 0xA0	; 160
    1a0e:	9a e0       	ldi	r25, 0x0A	; 10
    1a10:	88 dd       	rcall	.-1264   	; 0x1522 <usart_tx_at>
    1a12:	6f e8       	ldi	r22, 0x8F	; 143
    1a14:	70 e2       	ldi	r23, 0x20	; 32
    1a16:	80 ea       	ldi	r24, 0xA0	; 160
    1a18:	9a e0       	ldi	r25, 0x0A	; 10
    1a1a:	83 dd       	rcall	.-1274   	; 0x1522 <usart_tx_at>
    1a1c:	bb 20       	and	r11, r11
    1a1e:	f9 f0       	breq	.+62     	; 0x1a5e <at_response_qistat+0x116>
    1a20:	ce 01       	movw	r24, r28
    1a22:	01 96       	adiw	r24, 0x01	; 1
    1a24:	7c 01       	movw	r14, r24
    1a26:	ba 94       	dec	r11
    1a28:	0b 2d       	mov	r16, r11
    1a2a:	10 e0       	ldi	r17, 0x00	; 0
    1a2c:	0f 5f       	subi	r16, 0xFF	; 255
    1a2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a30:	08 0f       	add	r16, r24
    1a32:	19 1f       	adc	r17, r25
    1a34:	f7 01       	movw	r30, r14
    1a36:	61 91       	ld	r22, Z+
    1a38:	7f 01       	movw	r14, r30
    1a3a:	80 ea       	ldi	r24, 0xA0	; 160
    1a3c:	9a e0       	ldi	r25, 0x0A	; 10
    1a3e:	ea da       	rcall	.-2604   	; 0x1014 <usart_putchar>
    1a40:	e0 16       	cp	r14, r16
    1a42:	f1 06       	cpc	r15, r17
    1a44:	b9 f7       	brne	.-18     	; 0x1a34 <at_response_qistat+0xec>
    1a46:	0b c0       	rjmp	.+22     	; 0x1a5e <at_response_qistat+0x116>
    1a48:	65 ec       	ldi	r22, 0xC5	; 197
    1a4a:	70 e2       	ldi	r23, 0x20	; 32
    1a4c:	80 ea       	ldi	r24, 0xA0	; 160
    1a4e:	9a e0       	ldi	r25, 0x0A	; 10
    1a50:	68 dd       	rcall	.-1328   	; 0x1522 <usart_tx_at>
    1a52:	6f e8       	ldi	r22, 0x8F	; 143
    1a54:	70 e2       	ldi	r23, 0x20	; 32
    1a56:	80 ea       	ldi	r24, 0xA0	; 160
    1a58:	9a e0       	ldi	r25, 0x0A	; 10
    1a5a:	63 dd       	rcall	.-1338   	; 0x1522 <usart_tx_at>
    1a5c:	d1 2c       	mov	r13, r1
    1a5e:	65 ec       	ldi	r22, 0xC5	; 197
    1a60:	70 e2       	ldi	r23, 0x20	; 32
    1a62:	80 ea       	ldi	r24, 0xA0	; 160
    1a64:	9a e0       	ldi	r25, 0x0A	; 10
    1a66:	5d dd       	rcall	.-1350   	; 0x1522 <usart_tx_at>
    1a68:	6f e8       	ldi	r22, 0x8F	; 143
    1a6a:	70 e2       	ldi	r23, 0x20	; 32
    1a6c:	80 ea       	ldi	r24, 0xA0	; 160
    1a6e:	9a e0       	ldi	r25, 0x0A	; 10
    1a70:	58 dd       	rcall	.-1360   	; 0x1522 <usart_tx_at>
    1a72:	8d 2d       	mov	r24, r13
    1a74:	e2 96       	adiw	r28, 0x32	; 50
    1a76:	cd bf       	out	0x3d, r28	; 61
    1a78:	de bf       	out	0x3e, r29	; 62
    1a7a:	df 91       	pop	r29
    1a7c:	cf 91       	pop	r28
    1a7e:	1f 91       	pop	r17
    1a80:	0f 91       	pop	r16
    1a82:	ff 90       	pop	r15
    1a84:	ef 90       	pop	r14
    1a86:	df 90       	pop	r13
    1a88:	cf 90       	pop	r12
    1a8a:	bf 90       	pop	r11
    1a8c:	08 95       	ret

00001a8e <mqtt_packet>:
    1a8e:	4f 92       	push	r4
    1a90:	5f 92       	push	r5
    1a92:	6f 92       	push	r6
    1a94:	7f 92       	push	r7
    1a96:	8f 92       	push	r8
    1a98:	9f 92       	push	r9
    1a9a:	af 92       	push	r10
    1a9c:	bf 92       	push	r11
    1a9e:	cf 92       	push	r12
    1aa0:	df 92       	push	r13
    1aa2:	ef 92       	push	r14
    1aa4:	ff 92       	push	r15
    1aa6:	0f 93       	push	r16
    1aa8:	1f 93       	push	r17
    1aaa:	cf 93       	push	r28
    1aac:	df 93       	push	r29
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
    1ab2:	cf 5f       	subi	r28, 0xFF	; 255
    1ab4:	d1 09       	sbc	r29, r1
    1ab6:	cd bf       	out	0x3d, r28	; 61
    1ab8:	de bf       	out	0x3e, r29	; 62
    1aba:	f8 2e       	mov	r15, r24
    1abc:	e9 2e       	mov	r14, r25
    1abe:	81 e3       	ldi	r24, 0x31	; 49
    1ac0:	e8 e0       	ldi	r30, 0x08	; 8
    1ac2:	f0 e2       	ldi	r31, 0x20	; 32
    1ac4:	de 01       	movw	r26, r28
    1ac6:	11 96       	adiw	r26, 0x01	; 1
    1ac8:	01 90       	ld	r0, Z+
    1aca:	0d 92       	st	X+, r0
    1acc:	8a 95       	dec	r24
    1ace:	e1 f7       	brne	.-8      	; 0x1ac8 <mqtt_packet+0x3a>
    1ad0:	c4 50       	subi	r28, 0x04	; 4
    1ad2:	df 4f       	sbci	r29, 0xFF	; 255
    1ad4:	18 82       	st	Y, r1
    1ad6:	19 82       	std	Y+1, r1	; 0x01
    1ad8:	cc 5f       	subi	r28, 0xFC	; 252
    1ada:	d0 40       	sbci	r29, 0x00	; 0
    1adc:	c2 50       	subi	r28, 0x02	; 2
    1ade:	df 4f       	sbci	r29, 0xFF	; 255
    1ae0:	18 82       	st	Y, r1
    1ae2:	19 82       	std	Y+1, r1	; 0x01
    1ae4:	ce 5f       	subi	r28, 0xFE	; 254
    1ae6:	d0 40       	sbci	r29, 0x00	; 0
    1ae8:	ef 2d       	mov	r30, r15
    1aea:	f9 2f       	mov	r31, r25
    1aec:	df 01       	movw	r26, r30
    1aee:	0d 90       	ld	r0, X+
    1af0:	00 20       	and	r0, r0
    1af2:	e9 f7       	brne	.-6      	; 0x1aee <mqtt_packet+0x60>
    1af4:	11 97       	sbiw	r26, 0x01	; 1
    1af6:	8d 01       	movw	r16, r26
    1af8:	0e 1b       	sub	r16, r30
    1afa:	1f 0b       	sbc	r17, r31
    1afc:	85 e4       	ldi	r24, 0x45	; 69
    1afe:	90 e2       	ldi	r25, 0x20	; 32
    1b00:	88 87       	std	Y+8, r24	; 0x08
    1b02:	99 87       	std	Y+9, r25	; 0x09
    1b04:	84 e1       	ldi	r24, 0x14	; 20
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	8e 87       	std	Y+14, r24	; 0x0e
    1b0a:	9f 87       	std	Y+15, r25	; 0x0f
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	88 8b       	std	Y+16, r24	; 0x10
    1b10:	80 e9       	ldi	r24, 0x90	; 144
    1b12:	90 e2       	ldi	r25, 0x20	; 32
    1b14:	8e a3       	std	Y+38, r24	; 0x26
    1b16:	9f a3       	std	Y+39, r25	; 0x27
    1b18:	8c a7       	std	Y+44, r24	; 0x2c
    1b1a:	9d a7       	std	Y+45, r25	; 0x2d
    1b1c:	84 e0       	ldi	r24, 0x04	; 4
    1b1e:	8f 83       	std	Y+7, r24	; 0x07
    1b20:	ae 01       	movw	r20, r28
    1b22:	4f 5f       	subi	r20, 0xFF	; 255
    1b24:	5f 4f       	sbci	r21, 0xFF	; 255
    1b26:	68 ec       	ldi	r22, 0xC8	; 200
    1b28:	70 e0       	ldi	r23, 0x00	; 0
    1b2a:	ce 01       	movw	r24, r28
    1b2c:	c2 96       	adiw	r24, 0x32	; 50
    1b2e:	0e 94 0b 05 	call	0xa16	; 0xa16 <MQTTSerialize_connect>
    1b32:	3c 01       	movw	r6, r24
    1b34:	8c e4       	ldi	r24, 0x4C	; 76
    1b36:	90 e2       	ldi	r25, 0x20	; 32
    1b38:	c6 50       	subi	r28, 0x06	; 6
    1b3a:	df 4f       	sbci	r29, 0xFF	; 255
    1b3c:	88 83       	st	Y, r24
    1b3e:	99 83       	std	Y+1, r25	; 0x01
    1b40:	ca 5f       	subi	r28, 0xFA	; 250
    1b42:	d0 40       	sbci	r29, 0x00	; 0
    1b44:	0f 2e       	mov	r0, r31
    1b46:	f8 ec       	ldi	r31, 0xC8	; 200
    1b48:	4f 2e       	mov	r4, r31
    1b4a:	51 2c       	mov	r5, r1
    1b4c:	f0 2d       	mov	r31, r0
    1b4e:	b2 01       	movw	r22, r4
    1b50:	66 19       	sub	r22, r6
    1b52:	77 09       	sbc	r23, r7
    1b54:	1f 93       	push	r17
    1b56:	0f 93       	push	r16
    1b58:	ef 92       	push	r14
    1b5a:	ff 92       	push	r15
    1b5c:	c6 50       	subi	r28, 0x06	; 6
    1b5e:	df 4f       	sbci	r29, 0xFF	; 255
    1b60:	88 80       	ld	r8, Y
    1b62:	ca 5f       	subi	r28, 0xFA	; 250
    1b64:	d0 40       	sbci	r29, 0x00	; 0
    1b66:	c5 50       	subi	r28, 0x05	; 5
    1b68:	df 4f       	sbci	r29, 0xFF	; 255
    1b6a:	98 80       	ld	r9, Y
    1b6c:	cb 5f       	subi	r28, 0xFB	; 251
    1b6e:	d0 40       	sbci	r29, 0x00	; 0
    1b70:	c4 50       	subi	r28, 0x04	; 4
    1b72:	df 4f       	sbci	r29, 0xFF	; 255
    1b74:	a8 80       	ld	r10, Y
    1b76:	cc 5f       	subi	r28, 0xFC	; 252
    1b78:	d0 40       	sbci	r29, 0x00	; 0
    1b7a:	c3 50       	subi	r28, 0x03	; 3
    1b7c:	df 4f       	sbci	r29, 0xFF	; 255
    1b7e:	b8 80       	ld	r11, Y
    1b80:	cd 5f       	subi	r28, 0xFD	; 253
    1b82:	d0 40       	sbci	r29, 0x00	; 0
    1b84:	c2 50       	subi	r28, 0x02	; 2
    1b86:	df 4f       	sbci	r29, 0xFF	; 255
    1b88:	c8 80       	ld	r12, Y
    1b8a:	ce 5f       	subi	r28, 0xFE	; 254
    1b8c:	d0 40       	sbci	r29, 0x00	; 0
    1b8e:	c1 50       	subi	r28, 0x01	; 1
    1b90:	df 4f       	sbci	r29, 0xFF	; 255
    1b92:	d8 80       	ld	r13, Y
    1b94:	cf 5f       	subi	r28, 0xFF	; 255
    1b96:	d0 40       	sbci	r29, 0x00	; 0
    1b98:	e1 2c       	mov	r14, r1
    1b9a:	f1 2c       	mov	r15, r1
    1b9c:	00 e0       	ldi	r16, 0x00	; 0
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	40 e0       	ldi	r20, 0x00	; 0
    1ba4:	82 e3       	ldi	r24, 0x32	; 50
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	8c 0f       	add	r24, r28
    1baa:	9d 1f       	adc	r25, r29
    1bac:	86 0d       	add	r24, r6
    1bae:	97 1d       	adc	r25, r7
    1bb0:	2d d9       	rcall	.-3494   	; 0xe0c <MQTTSerialize_publish>
    1bb2:	68 0e       	add	r6, r24
    1bb4:	79 1e       	adc	r7, r25
    1bb6:	b2 01       	movw	r22, r4
    1bb8:	66 19       	sub	r22, r6
    1bba:	77 09       	sbc	r23, r7
    1bbc:	82 e3       	ldi	r24, 0x32	; 50
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	8c 0f       	add	r24, r28
    1bc2:	9d 1f       	adc	r25, r29
    1bc4:	86 0d       	add	r24, r6
    1bc6:	97 1d       	adc	r25, r7
    1bc8:	18 d8       	rcall	.-4048   	; 0xbfa <MQTTSerialize_disconnect>
    1bca:	86 0d       	add	r24, r6
    1bcc:	97 1d       	adc	r25, r7
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	18 16       	cp	r1, r24
    1bd8:	19 06       	cpc	r1, r25
    1bda:	7c f4       	brge	.+30     	; 0x1bfa <mqtt_packet+0x16c>
    1bdc:	8e 01       	movw	r16, r28
    1bde:	0e 5c       	subi	r16, 0xCE	; 206
    1be0:	1f 4f       	sbci	r17, 0xFF	; 255
    1be2:	78 01       	movw	r14, r16
    1be4:	e8 0e       	add	r14, r24
    1be6:	f9 1e       	adc	r15, r25
    1be8:	f8 01       	movw	r30, r16
    1bea:	61 91       	ld	r22, Z+
    1bec:	8f 01       	movw	r16, r30
    1bee:	80 ea       	ldi	r24, 0xA0	; 160
    1bf0:	98 e0       	ldi	r25, 0x08	; 8
    1bf2:	10 da       	rcall	.-3040   	; 0x1014 <usart_putchar>
    1bf4:	0e 15       	cp	r16, r14
    1bf6:	1f 05       	cpc	r17, r15
    1bf8:	b9 f7       	brne	.-18     	; 0x1be8 <mqtt_packet+0x15a>
    1bfa:	65 ec       	ldi	r22, 0xC5	; 197
    1bfc:	70 e2       	ldi	r23, 0x20	; 32
    1bfe:	80 ea       	ldi	r24, 0xA0	; 160
    1c00:	98 e0       	ldi	r25, 0x08	; 8
    1c02:	08 da       	rcall	.-3056   	; 0x1014 <usart_putchar>
    1c04:	80 e0       	ldi	r24, 0x00	; 0
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	c1 50       	subi	r28, 0x01	; 1
    1c0a:	df 4f       	sbci	r29, 0xFF	; 255
    1c0c:	cd bf       	out	0x3d, r28	; 61
    1c0e:	de bf       	out	0x3e, r29	; 62
    1c10:	df 91       	pop	r29
    1c12:	cf 91       	pop	r28
    1c14:	1f 91       	pop	r17
    1c16:	0f 91       	pop	r16
    1c18:	ff 90       	pop	r15
    1c1a:	ef 90       	pop	r14
    1c1c:	df 90       	pop	r13
    1c1e:	cf 90       	pop	r12
    1c20:	bf 90       	pop	r11
    1c22:	af 90       	pop	r10
    1c24:	9f 90       	pop	r9
    1c26:	8f 90       	pop	r8
    1c28:	7f 90       	pop	r7
    1c2a:	6f 90       	pop	r6
    1c2c:	5f 90       	pop	r5
    1c2e:	4f 90       	pop	r4
    1c30:	08 95       	ret

00001c32 <at_command_timeout_setup>:
    1c32:	e0 e0       	ldi	r30, 0x00	; 0
    1c34:	f8 e0       	ldi	r31, 0x08	; 8
    1c36:	86 81       	ldd	r24, Z+6	; 0x06
    1c38:	81 60       	ori	r24, 0x01	; 1
    1c3a:	86 83       	std	Z+6, r24	; 0x06
    1c3c:	87 e0       	ldi	r24, 0x07	; 7
    1c3e:	80 83       	st	Z, r24
    1c40:	81 81       	ldd	r24, Z+1	; 0x01
    1c42:	81 83       	std	Z+1, r24	; 0x01
    1c44:	8c eb       	ldi	r24, 0xBC	; 188
    1c46:	92 e0       	ldi	r25, 0x02	; 2
    1c48:	86 a3       	std	Z+38, r24	; 0x26
    1c4a:	97 a3       	std	Z+39, r25	; 0x27
    1c4c:	08 95       	ret

00001c4e <adc_result_average>:
    1c4e:	cf 92       	push	r12
    1c50:	df 92       	push	r13
    1c52:	ef 92       	push	r14
    1c54:	ff 92       	push	r15
    1c56:	0f 93       	push	r16
    1c58:	1f 93       	push	r17
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
    1c5e:	1f 92       	push	r1
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
    1c64:	28 2f       	mov	r18, r24
    1c66:	0d b7       	in	r16, 0x3d	; 61
    1c68:	1e b7       	in	r17, 0x3e	; 62
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	88 0f       	add	r24, r24
    1c6e:	99 1f       	adc	r25, r25
    1c70:	4d b7       	in	r20, 0x3d	; 61
    1c72:	5e b7       	in	r21, 0x3e	; 62
    1c74:	48 1b       	sub	r20, r24
    1c76:	59 0b       	sbc	r21, r25
    1c78:	4d bf       	out	0x3d, r20	; 61
    1c7a:	5e bf       	out	0x3e, r21	; 62
    1c7c:	ad b7       	in	r26, 0x3d	; 61
    1c7e:	be b7       	in	r27, 0x3e	; 62
    1c80:	11 96       	adiw	r26, 0x01	; 1
    1c82:	22 23       	and	r18, r18
    1c84:	f9 f0       	breq	.+62     	; 0x1cc4 <adc_result_average+0x76>
    1c86:	c1 2c       	mov	r12, r1
    1c88:	d1 2c       	mov	r13, r1
    1c8a:	76 01       	movw	r14, r12
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	e0 e0       	ldi	r30, 0x00	; 0
    1c90:	f2 e0       	ldi	r31, 0x02	; 2
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	9f b7       	in	r25, 0x3f	; 63
    1c96:	99 83       	std	Y+1, r25	; 0x01
    1c98:	f8 94       	cli
    1c9a:	49 81       	ldd	r20, Y+1	; 0x01
    1c9c:	90 81       	ld	r25, Z
    1c9e:	94 60       	ori	r25, 0x04	; 4
    1ca0:	90 83       	st	Z, r25
    1ca2:	4f bf       	out	0x3f, r20	; 63
    1ca4:	96 81       	ldd	r25, Z+6	; 0x06
    1ca6:	90 ff       	sbrs	r25, 0
    1ca8:	fd cf       	rjmp	.-6      	; 0x1ca4 <adc_result_average+0x56>
    1caa:	86 83       	std	Z+6, r24	; 0x06
    1cac:	44 a1       	ldd	r20, Z+36	; 0x24
    1cae:	55 a1       	ldd	r21, Z+37	; 0x25
    1cb0:	4d 93       	st	X+, r20
    1cb2:	5d 93       	st	X+, r21
    1cb4:	c4 0e       	add	r12, r20
    1cb6:	d5 1e       	adc	r13, r21
    1cb8:	e1 1c       	adc	r14, r1
    1cba:	f1 1c       	adc	r15, r1
    1cbc:	3f 5f       	subi	r19, 0xFF	; 255
    1cbe:	23 13       	cpse	r18, r19
    1cc0:	e9 cf       	rjmp	.-46     	; 0x1c94 <adc_result_average+0x46>
    1cc2:	03 c0       	rjmp	.+6      	; 0x1cca <adc_result_average+0x7c>
    1cc4:	c1 2c       	mov	r12, r1
    1cc6:	d1 2c       	mov	r13, r1
    1cc8:	76 01       	movw	r14, r12
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	40 e0       	ldi	r20, 0x00	; 0
    1cce:	50 e0       	ldi	r21, 0x00	; 0
    1cd0:	c7 01       	movw	r24, r14
    1cd2:	b6 01       	movw	r22, r12
    1cd4:	2c d5       	rcall	.+2648   	; 0x272e <__udivmodsi4>
    1cd6:	c9 01       	movw	r24, r18
    1cd8:	0d bf       	out	0x3d, r16	; 61
    1cda:	1e bf       	out	0x3e, r17	; 62
    1cdc:	0f 90       	pop	r0
    1cde:	df 91       	pop	r29
    1ce0:	cf 91       	pop	r28
    1ce2:	1f 91       	pop	r17
    1ce4:	0f 91       	pop	r16
    1ce6:	ff 90       	pop	r15
    1ce8:	ef 90       	pop	r14
    1cea:	df 90       	pop	r13
    1cec:	cf 90       	pop	r12
    1cee:	08 95       	ret

00001cf0 <controller_measure>:
    1cf0:	0f 93       	push	r16
    1cf2:	1f 93       	push	r17
    1cf4:	cf 93       	push	r28
    1cf6:	df 93       	push	r29
    1cf8:	8b 01       	movw	r16, r22
    1cfa:	a9 df       	rcall	.-174    	; 0x1c4e <adc_result_average>
    1cfc:	ec 01       	movw	r28, r24
    1cfe:	df 93       	push	r29
    1d00:	8f 93       	push	r24
    1d02:	81 e6       	ldi	r24, 0x61	; 97
    1d04:	90 e2       	ldi	r25, 0x20	; 32
    1d06:	9f 93       	push	r25
    1d08:	8f 93       	push	r24
    1d0a:	88 eb       	ldi	r24, 0xB8	; 184
    1d0c:	91 e2       	ldi	r25, 0x21	; 33
    1d0e:	9f 93       	push	r25
    1d10:	8f 93       	push	r24
    1d12:	2b d6       	rcall	.+3158   	; 0x296a <sprintf>
    1d14:	68 eb       	ldi	r22, 0xB8	; 184
    1d16:	71 e2       	ldi	r23, 0x21	; 33
    1d18:	80 ea       	ldi	r24, 0xA0	; 160
    1d1a:	9a e0       	ldi	r25, 0x0A	; 10
    1d1c:	02 dc       	rcall	.-2044   	; 0x1522 <usart_tx_at>
    1d1e:	f8 01       	movw	r30, r16
    1d20:	80 81       	ld	r24, Z
    1d22:	91 81       	ldd	r25, Z+1	; 0x01
    1d24:	9e 01       	movw	r18, r28
    1d26:	28 1b       	sub	r18, r24
    1d28:	39 0b       	sbc	r19, r25
    1d2a:	c9 01       	movw	r24, r18
    1d2c:	b9 01       	movw	r22, r18
    1d2e:	99 23       	and	r25, r25
    1d30:	24 f4       	brge	.+8      	; 0x1d3a <controller_measure+0x4a>
    1d32:	66 27       	eor	r22, r22
    1d34:	77 27       	eor	r23, r23
    1d36:	62 1b       	sub	r22, r18
    1d38:	73 0b       	sbc	r23, r19
    1d3a:	f8 01       	movw	r30, r16
    1d3c:	24 81       	ldd	r18, Z+4	; 0x04
    1d3e:	35 81       	ldd	r19, Z+5	; 0x05
    1d40:	33 23       	and	r19, r19
    1d42:	1c f4       	brge	.+6      	; 0x1d4a <controller_measure+0x5a>
    1d44:	31 95       	neg	r19
    1d46:	21 95       	neg	r18
    1d48:	31 09       	sbc	r19, r1
    1d4a:	41 e0       	ldi	r20, 0x01	; 1
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
    1d50:	0f 90       	pop	r0
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	26 17       	cp	r18, r22
    1d5a:	37 07       	cpc	r19, r23
    1d5c:	0c f0       	brlt	.+2      	; 0x1d60 <controller_measure+0x70>
    1d5e:	40 e0       	ldi	r20, 0x00	; 0
    1d60:	44 23       	and	r20, r20
    1d62:	61 f0       	breq	.+24     	; 0x1d7c <controller_measure+0x8c>
    1d64:	21 e0       	ldi	r18, 0x01	; 1
    1d66:	f8 01       	movw	r30, r16
    1d68:	46 85       	ldd	r20, Z+14	; 0x0e
    1d6a:	57 85       	ldd	r21, Z+15	; 0x0f
    1d6c:	45 2b       	or	r20, r21
    1d6e:	09 f4       	brne	.+2      	; 0x1d72 <controller_measure+0x82>
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	22 23       	and	r18, r18
    1d74:	19 f0       	breq	.+6      	; 0x1d7c <controller_measure+0x8c>
    1d76:	f8 01       	movw	r30, r16
    1d78:	84 83       	std	Z+4, r24	; 0x04
    1d7a:	95 83       	std	Z+5, r25	; 0x05
    1d7c:	f8 01       	movw	r30, r16
    1d7e:	c0 83       	st	Z, r28
    1d80:	d1 83       	std	Z+1, r29	; 0x01
    1d82:	80 85       	ldd	r24, Z+8	; 0x08
    1d84:	91 85       	ldd	r25, Z+9	; 0x09
    1d86:	c8 17       	cp	r28, r24
    1d88:	d9 07       	cpc	r29, r25
    1d8a:	10 f4       	brcc	.+4      	; 0x1d90 <controller_measure+0xa0>
    1d8c:	c0 87       	std	Z+8, r28	; 0x08
    1d8e:	d1 87       	std	Z+9, r29	; 0x09
    1d90:	f8 01       	movw	r30, r16
    1d92:	82 85       	ldd	r24, Z+10	; 0x0a
    1d94:	93 85       	ldd	r25, Z+11	; 0x0b
    1d96:	8c 17       	cp	r24, r28
    1d98:	9d 07       	cpc	r25, r29
    1d9a:	10 f4       	brcc	.+4      	; 0x1da0 <controller_measure+0xb0>
    1d9c:	c2 87       	std	Z+10, r28	; 0x0a
    1d9e:	d3 87       	std	Z+11, r29	; 0x0b
    1da0:	ce 01       	movw	r24, r28
    1da2:	df 91       	pop	r29
    1da4:	cf 91       	pop	r28
    1da6:	1f 91       	pop	r17
    1da8:	0f 91       	pop	r16
    1daa:	08 95       	ret

00001dac <controller_tx>:
    1dac:	0f 93       	push	r16
    1dae:	1f 93       	push	r17
    1db0:	cf 93       	push	r28
    1db2:	df 93       	push	r29
    1db4:	ec 01       	movw	r28, r24
    1db6:	4a e0       	ldi	r20, 0x0A	; 10
    1db8:	6f e1       	ldi	r22, 0x1F	; 31
    1dba:	72 e2       	ldi	r23, 0x22	; 34
    1dbc:	8e 81       	ldd	r24, Y+6	; 0x06
    1dbe:	9f 81       	ldd	r25, Y+7	; 0x07
    1dc0:	b1 d5       	rcall	.+2914   	; 0x2924 <__itoa_ncheck>
    1dc2:	4a e0       	ldi	r20, 0x0A	; 10
    1dc4:	6a e1       	ldi	r22, 0x1A	; 26
    1dc6:	72 e2       	ldi	r23, 0x22	; 34
    1dc8:	88 85       	ldd	r24, Y+8	; 0x08
    1dca:	99 85       	ldd	r25, Y+9	; 0x09
    1dcc:	ab d5       	rcall	.+2902   	; 0x2924 <__itoa_ncheck>
    1dce:	4a e0       	ldi	r20, 0x0A	; 10
    1dd0:	65 e1       	ldi	r22, 0x15	; 21
    1dd2:	72 e2       	ldi	r23, 0x22	; 34
    1dd4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dd6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dd8:	a5 d5       	rcall	.+2890   	; 0x2924 <__itoa_ncheck>
    1dda:	4a e0       	ldi	r20, 0x0A	; 10
    1ddc:	60 e1       	ldi	r22, 0x10	; 16
    1dde:	72 e2       	ldi	r23, 0x22	; 34
    1de0:	8c 81       	ldd	r24, Y+4	; 0x04
    1de2:	9d 81       	ldd	r25, Y+5	; 0x05
    1de4:	9f d5       	rcall	.+2878   	; 0x2924 <__itoa_ncheck>
    1de6:	18 82       	st	Y, r1
    1de8:	19 82       	std	Y+1, r1	; 0x01
    1dea:	1a 82       	std	Y+2, r1	; 0x02
    1dec:	1b 82       	std	Y+3, r1	; 0x03
    1dee:	1c 82       	std	Y+4, r1	; 0x04
    1df0:	1d 82       	std	Y+5, r1	; 0x05
    1df2:	1e 82       	std	Y+6, r1	; 0x06
    1df4:	1f 82       	std	Y+7, r1	; 0x07
    1df6:	18 86       	std	Y+8, r1	; 0x08
    1df8:	19 86       	std	Y+9, r1	; 0x09
    1dfa:	1a 86       	std	Y+10, r1	; 0x0a
    1dfc:	1b 86       	std	Y+11, r1	; 0x0b
    1dfe:	81 e1       	ldi	r24, 0x11	; 17
    1e00:	80 93 0f 22 	sts	0x220F, r24	; 0x80220f <year>
    1e04:	40 e1       	ldi	r20, 0x10	; 16
    1e06:	67 e0       	ldi	r22, 0x07	; 7
    1e08:	72 e2       	ldi	r23, 0x22	; 34
    1e0a:	81 e1       	ldi	r24, 0x11	; 17
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	8a d5       	rcall	.+2836   	; 0x2924 <__itoa_ncheck>
    1e10:	86 e0       	ldi	r24, 0x06	; 6
    1e12:	80 93 0e 22 	sts	0x220E, r24	; 0x80220e <month>
    1e16:	40 e1       	ldi	r20, 0x10	; 16
    1e18:	64 e0       	ldi	r22, 0x04	; 4
    1e1a:	72 e2       	ldi	r23, 0x22	; 34
    1e1c:	86 e0       	ldi	r24, 0x06	; 6
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	81 d5       	rcall	.+2818   	; 0x2924 <__itoa_ncheck>
    1e22:	87 e0       	ldi	r24, 0x07	; 7
    1e24:	80 93 0d 22 	sts	0x220D, r24	; 0x80220d <day>
    1e28:	40 e1       	ldi	r20, 0x10	; 16
    1e2a:	61 e0       	ldi	r22, 0x01	; 1
    1e2c:	72 e2       	ldi	r23, 0x22	; 34
    1e2e:	87 e0       	ldi	r24, 0x07	; 7
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	78 d5       	rcall	.+2800   	; 0x2924 <__itoa_ncheck>
    1e34:	8d e0       	ldi	r24, 0x0D	; 13
    1e36:	80 93 0c 22 	sts	0x220C, r24	; 0x80220c <hour>
    1e3a:	40 e1       	ldi	r20, 0x10	; 16
    1e3c:	6e ef       	ldi	r22, 0xFE	; 254
    1e3e:	71 e2       	ldi	r23, 0x21	; 33
    1e40:	8d e0       	ldi	r24, 0x0D	; 13
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	6f d5       	rcall	.+2782   	; 0x2924 <__itoa_ncheck>
    1e46:	80 91 0b 22 	lds	r24, 0x220B	; 0x80220b <minute>
    1e4a:	8f 5f       	subi	r24, 0xFF	; 255
    1e4c:	80 93 0b 22 	sts	0x220B, r24	; 0x80220b <minute>
    1e50:	40 e1       	ldi	r20, 0x10	; 16
    1e52:	6b ef       	ldi	r22, 0xFB	; 251
    1e54:	71 e2       	ldi	r23, 0x21	; 33
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	65 d5       	rcall	.+2762   	; 0x2924 <__itoa_ncheck>
    1e5a:	10 92 0a 22 	sts	0x220A, r1	; 0x80220a <second>
    1e5e:	40 e1       	ldi	r20, 0x10	; 16
    1e60:	68 ef       	ldi	r22, 0xF8	; 248
    1e62:	71 e2       	ldi	r23, 0x21	; 33
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	5d d5       	rcall	.+2746   	; 0x2924 <__itoa_ncheck>
    1e6a:	6f e1       	ldi	r22, 0x1F	; 31
    1e6c:	72 e2       	ldi	r23, 0x22	; 34
    1e6e:	88 eb       	ldi	r24, 0xB8	; 184
    1e70:	91 e2       	ldi	r25, 0x21	; 33
    1e72:	51 d5       	rcall	.+2722   	; 0x2916 <strcpy>
    1e74:	c8 eb       	ldi	r28, 0xB8	; 184
    1e76:	d1 e2       	ldi	r29, 0x21	; 33
    1e78:	fe 01       	movw	r30, r28
    1e7a:	01 90       	ld	r0, Z+
    1e7c:	00 20       	and	r0, r0
    1e7e:	e9 f7       	brne	.-6      	; 0x1e7a <controller_tx+0xce>
    1e80:	31 97       	sbiw	r30, 0x01	; 1
    1e82:	0c e2       	ldi	r16, 0x2C	; 44
    1e84:	10 e0       	ldi	r17, 0x00	; 0
    1e86:	00 83       	st	Z, r16
    1e88:	11 83       	std	Z+1, r17	; 0x01
    1e8a:	6a e1       	ldi	r22, 0x1A	; 26
    1e8c:	72 e2       	ldi	r23, 0x22	; 34
    1e8e:	ce 01       	movw	r24, r28
    1e90:	37 d5       	rcall	.+2670   	; 0x2900 <strcat>
    1e92:	fe 01       	movw	r30, r28
    1e94:	01 90       	ld	r0, Z+
    1e96:	00 20       	and	r0, r0
    1e98:	e9 f7       	brne	.-6      	; 0x1e94 <controller_tx+0xe8>
    1e9a:	31 97       	sbiw	r30, 0x01	; 1
    1e9c:	00 83       	st	Z, r16
    1e9e:	11 83       	std	Z+1, r17	; 0x01
    1ea0:	65 e1       	ldi	r22, 0x15	; 21
    1ea2:	72 e2       	ldi	r23, 0x22	; 34
    1ea4:	ce 01       	movw	r24, r28
    1ea6:	2c d5       	rcall	.+2648   	; 0x2900 <strcat>
    1ea8:	fe 01       	movw	r30, r28
    1eaa:	01 90       	ld	r0, Z+
    1eac:	00 20       	and	r0, r0
    1eae:	e9 f7       	brne	.-6      	; 0x1eaa <controller_tx+0xfe>
    1eb0:	31 97       	sbiw	r30, 0x01	; 1
    1eb2:	00 83       	st	Z, r16
    1eb4:	11 83       	std	Z+1, r17	; 0x01
    1eb6:	60 e1       	ldi	r22, 0x10	; 16
    1eb8:	72 e2       	ldi	r23, 0x22	; 34
    1eba:	ce 01       	movw	r24, r28
    1ebc:	21 d5       	rcall	.+2626   	; 0x2900 <strcat>
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	01 90       	ld	r0, Z+
    1ec2:	00 20       	and	r0, r0
    1ec4:	e9 f7       	brne	.-6      	; 0x1ec0 <controller_tx+0x114>
    1ec6:	31 97       	sbiw	r30, 0x01	; 1
    1ec8:	00 83       	st	Z, r16
    1eca:	11 83       	std	Z+1, r17	; 0x01
    1ecc:	6e e8       	ldi	r22, 0x8E	; 142
    1ece:	70 e2       	ldi	r23, 0x20	; 32
    1ed0:	80 ea       	ldi	r24, 0xA0	; 160
    1ed2:	9a e0       	ldi	r25, 0x0A	; 10
    1ed4:	26 db       	rcall	.-2484   	; 0x1522 <usart_tx_at>
    1ed6:	68 81       	ld	r22, Y
    1ed8:	66 23       	and	r22, r22
    1eda:	41 f0       	breq	.+16     	; 0x1eec <controller_tx+0x140>
    1edc:	c9 eb       	ldi	r28, 0xB9	; 185
    1ede:	d1 e2       	ldi	r29, 0x21	; 33
    1ee0:	80 ea       	ldi	r24, 0xA0	; 160
    1ee2:	9a e0       	ldi	r25, 0x0A	; 10
    1ee4:	97 d8       	rcall	.-3794   	; 0x1014 <usart_putchar>
    1ee6:	69 91       	ld	r22, Y+
    1ee8:	61 11       	cpse	r22, r1
    1eea:	fa cf       	rjmp	.-12     	; 0x1ee0 <controller_tx+0x134>
    1eec:	6e e8       	ldi	r22, 0x8E	; 142
    1eee:	70 e2       	ldi	r23, 0x20	; 32
    1ef0:	80 ea       	ldi	r24, 0xA0	; 160
    1ef2:	9a e0       	ldi	r25, 0x0A	; 10
    1ef4:	16 db       	rcall	.-2516   	; 0x1522 <usart_tx_at>
    1ef6:	df 91       	pop	r29
    1ef8:	cf 91       	pop	r28
    1efa:	1f 91       	pop	r17
    1efc:	0f 91       	pop	r16
    1efe:	08 95       	ret

00001f00 <reset_tx_data>:
    1f00:	fc 01       	movw	r30, r24
    1f02:	10 82       	st	Z, r1
    1f04:	11 82       	std	Z+1, r1	; 0x01
    1f06:	12 82       	std	Z+2, r1	; 0x02
    1f08:	13 82       	std	Z+3, r1	; 0x03
    1f0a:	14 82       	std	Z+4, r1	; 0x04
    1f0c:	15 82       	std	Z+5, r1	; 0x05
    1f0e:	16 82       	std	Z+6, r1	; 0x06
    1f10:	17 82       	std	Z+7, r1	; 0x07
    1f12:	8f ef       	ldi	r24, 0xFF	; 255
    1f14:	9f ef       	ldi	r25, 0xFF	; 255
    1f16:	80 87       	std	Z+8, r24	; 0x08
    1f18:	91 87       	std	Z+9, r25	; 0x09
    1f1a:	12 86       	std	Z+10, r1	; 0x0a
    1f1c:	13 86       	std	Z+11, r1	; 0x0b
    1f1e:	16 86       	std	Z+14, r1	; 0x0e
    1f20:	17 86       	std	Z+15, r1	; 0x0f
    1f22:	08 95       	ret

00001f24 <radio_pins_init>:

void radio_pins_init(void) {
    1f24:	cf 93       	push	r28
    1f26:	df 93       	push	r29
	
	//PWRKEY and startup sequence.
	PWRKEY_PORT.DIR |= (1<<PWRKEY_PIN); //reset pin
    1f28:	c0 e8       	ldi	r28, 0x80	; 128
    1f2a:	d6 e0       	ldi	r29, 0x06	; 6
    1f2c:	88 81       	ld	r24, Y
    1f2e:	80 64       	ori	r24, 0x40	; 64
    1f30:	88 83       	st	Y, r24
	PWRKEY_PORT.OUT &= ~(1<<PWRKEY_PIN); //reset
    1f32:	8c 81       	ldd	r24, Y+4	; 0x04
    1f34:	8f 7b       	andi	r24, 0xBF	; 191
    1f36:	8c 83       	std	Y+4, r24	; 0x04
	delay_ms(1); //wait for battery voltage to settle.
    1f38:	6e e4       	ldi	r22, 0x4E	; 78
    1f3a:	71 e0       	ldi	r23, 0x01	; 1
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	e5 da       	rcall	.-2614   	; 0x150c <__portable_avr_delay_cycles>
	PWRKEY_PORT.OUT |= (1<<PWRKEY_PIN); //reset of radio
    1f42:	8c 81       	ldd	r24, Y+4	; 0x04
    1f44:	80 64       	ori	r24, 0x40	; 64
    1f46:	8c 83       	std	Y+4, r24	; 0x04
	delay_ms(100); //boot time, 100ms recommended for m95
    1f48:	66 e3       	ldi	r22, 0x36	; 54
    1f4a:	72 e8       	ldi	r23, 0x82	; 130
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	dd da       	rcall	.-2630   	; 0x150c <__portable_avr_delay_cycles>
	PWRKEY_PORT.OUT &= ~(1<<PWRKEY_PIN);
    1f52:	8c 81       	ldd	r24, Y+4	; 0x04
    1f54:	8f 7b       	andi	r24, 0xBF	; 191
    1f56:	8c 83       	std	Y+4, r24	; 0x04
	delay_ms(800); //time before m95 is running. There exist a status bit that might be useful to monitor.
    1f58:	6b ea       	ldi	r22, 0xAB	; 171
    1f5a:	71 e1       	ldi	r23, 0x11	; 17
    1f5c:	84 e0       	ldi	r24, 0x04	; 4
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	d5 da       	rcall	.-2646   	; 0x150c <__portable_avr_delay_cycles>
	delay_ms(400);
    1f62:	66 ed       	ldi	r22, 0xD6	; 214
    1f64:	78 e0       	ldi	r23, 0x08	; 8
    1f66:	82 e0       	ldi	r24, 0x02	; 2
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	d0 da       	rcall	.-2656   	; 0x150c <__portable_avr_delay_cycles>
	PWRKEY_PORT.OUT |= (1<<PWRKEY_PIN); //normal level for this pin
    1f6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f6e:	80 64       	ori	r24, 0x40	; 64
    1f70:	8c 83       	std	Y+4, r24	; 0x04
	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	//STATUS, NOT NEEDED AS NETLIGHT IS REQUIRED BEFORE SENDING COMMANDS.
	STATUS_PORT.DIR &= ~(1<<STATUS_PIN); //input
    1f72:	88 81       	ld	r24, Y
    1f74:	8f 77       	andi	r24, 0x7F	; 127
    1f76:	88 83       	st	Y, r24
	//portctrl_setup(STATUS_PORT, STATUS_PIN); //should not be needed.
	
	//NETLIGHT. NOT AVAILABLE ON DEVELOPMENT BOARD, HAVE TO USE SW CALL TO CHECK FOR CONNECTION STATUS.
	//NETLIGHT_PORT.DIR &= ~(1<<NETLIGHT_PIN); //input
	
}
    1f78:	df 91       	pop	r29
    1f7a:	cf 91       	pop	r28
    1f7c:	08 95       	ret

00001f7e <radio_power_down>:

void radio_power_down(void) {
    1f7e:	cf 93       	push	r28
    1f80:	df 93       	push	r29
	//power down
	PWRKEY_PORT.OUT &= ~(1<<PWRKEY_PIN);
    1f82:	c0 e8       	ldi	r28, 0x80	; 128
    1f84:	d6 e0       	ldi	r29, 0x06	; 6
    1f86:	8c 81       	ldd	r24, Y+4	; 0x04
    1f88:	8f 7b       	andi	r24, 0xBF	; 191
    1f8a:	8c 83       	std	Y+4, r24	; 0x04
	delay_s(1);
    1f8c:	66 e1       	ldi	r22, 0x16	; 22
    1f8e:	76 e1       	ldi	r23, 0x16	; 22
    1f90:	85 e0       	ldi	r24, 0x05	; 5
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	bb da       	rcall	.-2698   	; 0x150c <__portable_avr_delay_cycles>
	PWRKEY_PORT.OUT |= (1<<PWRKEY_PIN); 
    1f96:	8c 81       	ldd	r24, Y+4	; 0x04
    1f98:	80 64       	ori	r24, 0x40	; 64
    1f9a:	8c 83       	std	Y+4, r24	; 0x04
	delay_s(1);
    1f9c:	66 e1       	ldi	r22, 0x16	; 22
    1f9e:	76 e1       	ldi	r23, 0x16	; 22
    1fa0:	85 e0       	ldi	r24, 0x05	; 5
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	b3 da       	rcall	.-2714   	; 0x150c <__portable_avr_delay_cycles>
	PWRKEY_PORT.OUT &= ~(1<<PWRKEY_PIN);
    1fa6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa8:	8f 7b       	andi	r24, 0xBF	; 191
    1faa:	8c 83       	std	Y+4, r24	; 0x04
}
    1fac:	df 91       	pop	r29
    1fae:	cf 91       	pop	r28
    1fb0:	08 95       	ret

00001fb2 <__vector_14>:

ISR(TCC0_OVF_vect) {
    1fb2:	1f 92       	push	r1
    1fb4:	0f 92       	push	r0
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	0f 92       	push	r0
    1fba:	11 24       	eor	r1, r1
    1fbc:	08 b6       	in	r0, 0x38	; 56
    1fbe:	0f 92       	push	r0
    1fc0:	18 be       	out	0x38, r1	; 56
    1fc2:	09 b6       	in	r0, 0x39	; 57
    1fc4:	0f 92       	push	r0
    1fc6:	19 be       	out	0x39, r1	; 57
    1fc8:	0b b6       	in	r0, 0x3b	; 59
    1fca:	0f 92       	push	r0
    1fcc:	1b be       	out	0x3b, r1	; 59
    1fce:	2f 93       	push	r18
    1fd0:	3f 93       	push	r19
    1fd2:	4f 93       	push	r20
    1fd4:	5f 93       	push	r21
    1fd6:	6f 93       	push	r22
    1fd8:	7f 93       	push	r23
    1fda:	8f 93       	push	r24
    1fdc:	9f 93       	push	r25
    1fde:	af 93       	push	r26
    1fe0:	bf 93       	push	r27
    1fe2:	ef 93       	push	r30
	at_timeout_stop();
    1fe4:	ff 93       	push	r31
	status_at_timeout = 1;
    1fe6:	37 db       	rcall	.-2450   	; 0x1656 <at_timeout_stop>
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	80 93 24 22 	sts	0x2224, r24	; 0x802224 <status_at_timeout>
}
    1fee:	ff 91       	pop	r31
    1ff0:	ef 91       	pop	r30
    1ff2:	bf 91       	pop	r27
    1ff4:	af 91       	pop	r26
    1ff6:	9f 91       	pop	r25
    1ff8:	8f 91       	pop	r24
    1ffa:	7f 91       	pop	r23
    1ffc:	6f 91       	pop	r22
    1ffe:	5f 91       	pop	r21
    2000:	4f 91       	pop	r20
    2002:	3f 91       	pop	r19
    2004:	2f 91       	pop	r18
    2006:	0f 90       	pop	r0
    2008:	0b be       	out	0x3b, r0	; 59
    200a:	0f 90       	pop	r0
    200c:	09 be       	out	0x39, r0	; 57
    200e:	0f 90       	pop	r0
    2010:	08 be       	out	0x38, r0	; 56
    2012:	0f 90       	pop	r0
    2014:	0f be       	out	0x3f, r0	; 63
    2016:	0f 90       	pop	r0
    2018:	1f 90       	pop	r1
    201a:	18 95       	reti

0000201c <__vector_10>:


ISR(RTC_OVF_vect)
{
    201c:	1f 92       	push	r1
    201e:	0f 92       	push	r0
    2020:	0f b6       	in	r0, 0x3f	; 63
    2022:	0f 92       	push	r0
    2024:	11 24       	eor	r1, r1
    2026:	08 b6       	in	r0, 0x38	; 56
    2028:	0f 92       	push	r0
    202a:	18 be       	out	0x38, r1	; 56
    202c:	09 b6       	in	r0, 0x39	; 57
    202e:	0f 92       	push	r0
    2030:	19 be       	out	0x39, r1	; 57
    2032:	0a b6       	in	r0, 0x3a	; 58
    2034:	0f 92       	push	r0
    2036:	1a be       	out	0x3a, r1	; 58
    2038:	0b b6       	in	r0, 0x3b	; 59
    203a:	0f 92       	push	r0
    203c:	1b be       	out	0x3b, r1	; 59
    203e:	2f 93       	push	r18
    2040:	3f 93       	push	r19
    2042:	4f 93       	push	r20
    2044:	5f 93       	push	r21
    2046:	6f 93       	push	r22
    2048:	7f 93       	push	r23
    204a:	8f 93       	push	r24
    204c:	9f 93       	push	r25
    204e:	af 93       	push	r26
    2050:	bf 93       	push	r27
    2052:	cf 93       	push	r28
    2054:	df 93       	push	r29
    2056:	ef 93       	push	r30
    2058:	ff 93       	push	r31
	cli(); //disable interrupts. Other way of disabling and resetting?
    205a:	f8 94       	cli
	//rtc_data.counter_high++;
	
	//led_blink(1);
	
	
	if (controller_state == MEASURE)
    205c:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <controller_state>
    2060:	81 30       	cpi	r24, 0x01	; 1
    2062:	c1 f4       	brne	.+48     	; 0x2094 <__vector_10+0x78>
	{
		accu_data += controller_measure(9, &tx_data); //measure with averaging, and accumulate.
    2064:	63 e3       	ldi	r22, 0x33	; 51
    2066:	72 e2       	ldi	r23, 0x22	; 34
    2068:	89 e0       	ldi	r24, 0x09	; 9
    206a:	42 de       	rcall	.-892    	; 0x1cf0 <controller_measure>
    206c:	40 91 25 22 	lds	r20, 0x2225	; 0x802225 <accu_data>
    2070:	50 91 26 22 	lds	r21, 0x2226	; 0x802226 <accu_data+0x1>
    2074:	60 91 27 22 	lds	r22, 0x2227	; 0x802227 <accu_data+0x2>
    2078:	70 91 28 22 	lds	r23, 0x2228	; 0x802228 <accu_data+0x3>
    207c:	48 0f       	add	r20, r24
    207e:	59 1f       	adc	r21, r25
    2080:	61 1d       	adc	r22, r1
    2082:	71 1d       	adc	r23, r1
    2084:	40 93 25 22 	sts	0x2225, r20	; 0x802225 <accu_data>
    2088:	50 93 26 22 	sts	0x2226, r21	; 0x802226 <accu_data+0x1>
    208c:	60 93 27 22 	sts	0x2227, r22	; 0x802227 <accu_data+0x2>
    2090:	70 93 28 22 	sts	0x2228, r23	; 0x802228 <accu_data+0x3>
	}
	
	tx_data[POSITION_ACCU_CNT]++; //increase accumulation counter.
    2094:	e3 e3       	ldi	r30, 0x33	; 51
    2096:	f2 e2       	ldi	r31, 0x22	; 34
    2098:	26 85       	ldd	r18, Z+14	; 0x0e
    209a:	37 85       	ldd	r19, Z+15	; 0x0f
    209c:	2f 5f       	subi	r18, 0xFF	; 255
    209e:	3f 4f       	sbci	r19, 0xFF	; 255
    20a0:	26 87       	std	Z+14, r18	; 0x0e
    20a2:	37 87       	std	Z+15, r19	; 0x0f
				
	if (tx_data[POSITION_ACCU_CNT] > (TAVG/TS)) //if accumulation limit is reached.
    20a4:	25 30       	cpi	r18, 0x05	; 5
    20a6:	31 05       	cpc	r19, r1
    20a8:	e0 f0       	brcs	.+56     	; 0x20e2 <__vector_10+0xc6>
	{
		tx_data[POSITION_AVG] = controller_calc_avg(accu_data, tx_data[POSITION_ACCU_CNT]); //calc and store average.
    20aa:	ef 01       	movw	r28, r30
    20ac:	40 e0       	ldi	r20, 0x00	; 0
    20ae:	50 e0       	ldi	r21, 0x00	; 0
    20b0:	60 91 25 22 	lds	r22, 0x2225	; 0x802225 <accu_data>
    20b4:	70 91 26 22 	lds	r23, 0x2226	; 0x802226 <accu_data+0x1>
    20b8:	80 91 27 22 	lds	r24, 0x2227	; 0x802227 <accu_data+0x2>
    20bc:	90 91 28 22 	lds	r25, 0x2228	; 0x802228 <accu_data+0x3>
    20c0:	36 d3       	rcall	.+1644   	; 0x272e <__udivmodsi4>
    20c2:	2e 83       	std	Y+6, r18	; 0x06
    20c4:	3f 83       	std	Y+7, r19	; 0x07
				
		//reset parameters
		accu_data = 0;
    20c6:	10 92 25 22 	sts	0x2225, r1	; 0x802225 <accu_data>
    20ca:	10 92 26 22 	sts	0x2226, r1	; 0x802226 <accu_data+0x1>
    20ce:	10 92 27 22 	sts	0x2227, r1	; 0x802227 <accu_data+0x2>
    20d2:	10 92 28 22 	sts	0x2228, r1	; 0x802228 <accu_data+0x3>
		tx_data[POSITION_ACCU_CNT] = 0;
    20d6:	1e 86       	std	Y+14, r1	; 0x0e
    20d8:	1f 86       	std	Y+15, r1	; 0x0f
		
		controller_state = TX_DATA;
    20da:	84 e0       	ldi	r24, 0x04	; 4
    20dc:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <controller_state>
    20e0:	04 c0       	rjmp	.+8      	; 0x20ea <__vector_10+0xce>
		usart_tx_at(USART_SERIAL_EXAMPLE, transfer_data);
		usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_HEADER);
		*/
	}
	
	if (controller_state == TX_DATA)
    20e2:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <controller_state>
    20e6:	84 30       	cpi	r24, 0x04	; 4
	{
		controller_tx(&tx_data);
    20e8:	49 f4       	brne	.+18     	; 0x20fc <__vector_10+0xe0>
    20ea:	83 e3       	ldi	r24, 0x33	; 51
		reset_tx_data(&tx_data);
    20ec:	92 e2       	ldi	r25, 0x22	; 34
    20ee:	5e de       	rcall	.-836    	; 0x1dac <controller_tx>
    20f0:	83 e3       	ldi	r24, 0x33	; 51
    20f2:	92 e2       	ldi	r25, 0x22	; 34
		
		controller_state = MEASURE;
    20f4:	05 df       	rcall	.-502    	; 0x1f00 <reset_tx_data>
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <controller_state>
		
	}
	
	//usart_putchar(USART_SERIAL_EXAMPLE, 0x30+accu_data_cnt);
	//WRITE RTC value = 0!
	RTC.CNT = 0;
    20fc:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    2100:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
	sei(); //enable interrupt, go to sleep
}
    2104:	78 94       	sei
    2106:	ff 91       	pop	r31
    2108:	ef 91       	pop	r30
    210a:	df 91       	pop	r29
    210c:	cf 91       	pop	r28
    210e:	bf 91       	pop	r27
    2110:	af 91       	pop	r26
    2112:	9f 91       	pop	r25
    2114:	8f 91       	pop	r24
    2116:	7f 91       	pop	r23
    2118:	6f 91       	pop	r22
    211a:	5f 91       	pop	r21
    211c:	4f 91       	pop	r20
    211e:	3f 91       	pop	r19
    2120:	2f 91       	pop	r18
    2122:	0f 90       	pop	r0
    2124:	0b be       	out	0x3b, r0	; 59
    2126:	0f 90       	pop	r0
    2128:	0a be       	out	0x3a, r0	; 58
    212a:	0f 90       	pop	r0
    212c:	09 be       	out	0x39, r0	; 57
    212e:	0f 90       	pop	r0
    2130:	08 be       	out	0x38, r0	; 56
    2132:	0f 90       	pop	r0
    2134:	0f be       	out	0x3f, r0	; 63
    2136:	0f 90       	pop	r0
    2138:	1f 90       	pop	r1
    213a:	18 95       	reti

0000213c <main>:


/*! \brief Main function.
 */
int main(void)
{
    213c:	cf 93       	push	r28
    213e:	df 93       	push	r29
    2140:	cd b7       	in	r28, 0x3d	; 61
    2142:	de b7       	in	r29, 0x3e	; 62
    2144:	2b 97       	sbiw	r28, 0x0b	; 11
    2146:	cd bf       	out	0x3d, r28	; 61
    2148:	de bf       	out	0x3e, r29	; 62
	cli();
    214a:	f8 94       	cli
		
	/* Initialize the board.
	 * The board-specific conf_board.h file contains the configuration of
	 * the board initialization.
	 */
	board_init();
    214c:	0e 94 db 07 	call	0xfb6	; 0xfb6 <board_init>
	//pmic_init(); //needed for TC ASF code. Check if needed in real implementation.
	PMIC.CTRL = 0x01; //low level interrupt
    2150:	ff 24       	eor	r15, r15
    2152:	f3 94       	inc	r15
    2154:	f0 92 a2 00 	sts	0x00A2, r15	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	//CLK.CTRL = 0x01; //2M
		
	
	
	//LED setup
	PORTQ.DIR |= (1<<3);
    2158:	00 ec       	ldi	r16, 0xC0	; 192
    215a:	17 e0       	ldi	r17, 0x07	; 7
    215c:	f8 01       	movw	r30, r16
    215e:	80 81       	ld	r24, Z
    2160:	88 60       	ori	r24, 0x08	; 8
    2162:	80 83       	st	Z, r24
	PORTQ.OUT |= (1<<3);
    2164:	84 81       	ldd	r24, Z+4	; 0x04
    2166:	88 60       	ori	r24, 0x08	; 8
    2168:	84 83       	std	Z+4, r24	; 0x04

static void adc_init(void)
{
	struct adc_config adc_conf;
	struct adc_channel_config adcch_conf;
	adc_read_configuration(&ADC_LC, &adc_conf);
    216a:	be 01       	movw	r22, r28
    216c:	6f 5f       	subi	r22, 0xFF	; 255
    216e:	7f 4f       	sbci	r23, 0xFF	; 255
    2170:	80 e0       	ldi	r24, 0x00	; 0
    2172:	92 e0       	ldi	r25, 0x02	; 2
    2174:	0e 94 db 03 	call	0x7b6	; 0x7b6 <adc_read_configuration>
	adcch_read_configuration(&ADC_LC, ADC_LC_CH, &adcch_conf);
    2178:	ae 01       	movw	r20, r28
    217a:	48 5f       	subi	r20, 0xF8	; 248
    217c:	5f 4f       	sbci	r21, 0xFF	; 255
    217e:	61 e0       	ldi	r22, 0x01	; 1
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	92 e0       	ldi	r25, 0x02	; 2
    2184:	0e 94 5f 04 	call	0x8be	; 0x8be <adcch_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    2188:	9a 81       	ldd	r25, Y+2	; 0x02
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
	conf->refctrl |= ref;
    218a:	8b 81       	ldd	r24, Y+3	; 0x03
    218c:	8f 78       	andi	r24, 0x8F	; 143
    218e:	80 61       	ori	r24, 0x10	; 16
    2190:	8b 83       	std	Y+3, r24	; 0x03
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    2192:	89 2f       	mov	r24, r25
    2194:	81 7e       	andi	r24, 0xE1	; 225
    2196:	8a 83       	std	Y+2, r24	; 0x02
		conf->evctrl = ADC_EVACT_NONE_gc;
    2198:	1c 82       	std	Y+4, r1	; 0x04
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    219a:	82 e0       	ldi	r24, 0x02	; 2
    219c:	8d 83       	std	Y+5, r24	; 0x05
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    219e:	f8 86       	std	Y+8, r15	; 0x08
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    21a0:	19 86       	std	Y+9, r1	; 0x09
	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_OFF, ADC_RES_12, ADC_REF_VCC); //vdd/1,6 ~ 2V @ 3,3V.
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
	adc_set_clock_rate(&adc_conf, 200000UL);
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN0, ADCCH_NEG_NONE, 1);
	//adcch_set_input(&adcch_conf, ADCCH_POS_SCALED_VCC, ADCCH_NEG_NONE, 1);
	adc_write_configuration(&ADC_LC, &adc_conf);
    21a2:	be 01       	movw	r22, r28
    21a4:	6f 5f       	subi	r22, 0xFF	; 255
    21a6:	7f 4f       	sbci	r23, 0xFF	; 255
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	92 e0       	ldi	r25, 0x02	; 2
    21ac:	0e 94 75 03 	call	0x6ea	; 0x6ea <adc_write_configuration>
	adcch_write_configuration(&ADC_LC, ADC_LC_CH, &adcch_conf);
    21b0:	ae 01       	movw	r20, r28
    21b2:	48 5f       	subi	r20, 0xF8	; 248
    21b4:	5f 4f       	sbci	r21, 0xFF	; 255
    21b6:	61 e0       	ldi	r22, 0x01	; 1
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	92 e0       	ldi	r25, 0x02	; 2
    21bc:	0e 94 14 04 	call	0x828	; 0x828 <adcch_write_configuration>
	PORTQ.DIR |= (1<<3);
	PORTQ.OUT |= (1<<3);
	
	//ADC setup
	adc_init();
	adc_enable(&ADC_LC); //Later??? By interrupt?
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	92 e0       	ldi	r25, 0x02	; 2
    21c4:	0e 94 61 01 	call	0x2c2	; 0x2c2 <adc_enable>
	};
	
	///////////////////////////////
	

	usart_init_rs232(USART_SERIAL_EXAMPLE, &USART_SERIAL_OPTIONS);
    21c8:	60 e0       	ldi	r22, 0x00	; 0
    21ca:	70 e2       	ldi	r23, 0x20	; 32
    21cc:	80 ea       	ldi	r24, 0xA0	; 160
    21ce:	9a e0       	ldi	r25, 0x0A	; 10
    21d0:	3c d8       	rcall	.-3976   	; 0x124a <usart_init_rs232>
	
	usart_init_rs232(USART_SERIAL_SIM900, &USART_SERIAL_OPTIONS);
    21d2:	60 e0       	ldi	r22, 0x00	; 0
    21d4:	70 e2       	ldi	r23, 0x20	; 32
    21d6:	80 ea       	ldi	r24, 0xA0	; 160
    21d8:	98 e0       	ldi	r25, 0x08	; 8
	
	at_command_timeout_setup();
    21da:	37 d8       	rcall	.-3986   	; 0x124a <usart_init_rs232>
	
	//WDT setup
	
	
	//reset data
	reset_tx_data(&tx_data);
    21dc:	2a dd       	rcall	.-1452   	; 0x1c32 <at_command_timeout_setup>
    21de:	83 e3       	ldi	r24, 0x33	; 51
    21e0:	92 e2       	ldi	r25, 0x22	; 34
	}
	*/
	
	
	//DEBUG M95
	sei();
    21e2:	8e de       	rcall	.-740    	; 0x1f00 <reset_tx_data>
	#define AT_QISEND "AT+QISEND\r"  //init send mode. THis command will returnm ">", and hence the data to be sent could be transmitted to the module.
	//It must be terminated with ctrl+z.
	//There will be a response from the server.
	*/
	
	PORTQ.OUT &= ~(1<<3); //led on while waiting for status
    21e4:	78 94       	sei
    21e6:	f8 01       	movw	r30, r16
    21e8:	84 81       	ldd	r24, Z+4	; 0x04
	radio_pins_init(); //initialize pins towards radio module. Wake up radio.
    21ea:	87 7f       	andi	r24, 0xF7	; 247
    21ec:	84 83       	std	Z+4, r24	; 0x04
		
	//wait for status
	while (!(STATUS_PORT.IN & (1<<STATUS_PIN)));
    21ee:	9a de       	rcall	.-716    	; 0x1f24 <radio_pins_init>
    21f0:	e0 e8       	ldi	r30, 0x80	; 128
    21f2:	f6 e0       	ldi	r31, 0x06	; 6
    21f4:	80 85       	ldd	r24, Z+8	; 0x08
    21f6:	88 23       	and	r24, r24
	PORTQ.OUT |= (1<<3); //led off
    21f8:	ec f7       	brge	.-6      	; 0x21f4 <main+0xb8>
    21fa:	e0 ec       	ldi	r30, 0xC0	; 192
    21fc:	f7 e0       	ldi	r31, 0x07	; 7
    21fe:	84 81       	ldd	r24, Z+4	; 0x04
    2200:	88 60       	ori	r24, 0x08	; 8
	//Wait for GSM network status
	
	uint8_t mystatus = 0;
	while (mystatus == 0)
	{
		usart_tx_at(USART_SERIAL_SIM900, AT_QNSTATUS); //return +QNSTATUS: n, where 0 is ok.
    2202:	84 83       	std	Z+4, r24	; 0x04
    2204:	64 e6       	ldi	r22, 0x64	; 100
    2206:	70 e2       	ldi	r23, 0x20	; 32
    2208:	80 ea       	ldi	r24, 0xA0	; 160
		if (at_response_qnstatus(USART_SERIAL_SIM900, RESPONSE_TIME_300M)) {usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_OK); mystatus = 1;}
    220a:	98 e0       	ldi	r25, 0x08	; 8
    220c:	8a d9       	rcall	.-3308   	; 0x1522 <usart_tx_at>
    220e:	6c eb       	ldi	r22, 0xBC	; 188
    2210:	72 e0       	ldi	r23, 0x02	; 2
    2212:	80 ea       	ldi	r24, 0xA0	; 160
    2214:	98 e0       	ldi	r25, 0x08	; 8
    2216:	01 db       	rcall	.-2558   	; 0x181a <at_response_qnstatus>
    2218:	88 23       	and	r24, r24
    221a:	e1 f0       	breq	.+56     	; 0x2254 <main+0x118>
    221c:	61 e7       	ldi	r22, 0x71	; 113
    221e:	70 e2       	ldi	r23, 0x20	; 32
		
		delay_s(2);
    2220:	80 ea       	ldi	r24, 0xA0	; 160
    2222:	9a e0       	ldi	r25, 0x0A	; 10
    2224:	7e d9       	rcall	.-3332   	; 0x1522 <usart_tx_at>
    2226:	6b e2       	ldi	r22, 0x2B	; 43
    2228:	7c e2       	ldi	r23, 0x2C	; 44
	}
	
	delay_s(2);
    222a:	8a e0       	ldi	r24, 0x0A	; 10
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	6e d9       	rcall	.-3364   	; 0x150c <__portable_avr_delay_cycles>
    2230:	6b e2       	ldi	r22, 0x2B	; 43
    2232:	7c e2       	ldi	r23, 0x2C	; 44
	
	//usart_tx_at(USART_SERIAL_SIM900, AT_QICLOSE); //return OK. Perhaps not needed if waking up from power down.
	//if (at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M)) {usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);}
	//delay_s(1);
	usart_tx_at(USART_SERIAL_SIM900, AT_QISTAT); //return OK
    2234:	8a e0       	ldi	r24, 0x0A	; 10
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	69 d9       	rcall	.-3374   	; 0x150c <__portable_avr_delay_cycles>
    223a:	64 e7       	ldi	r22, 0x74	; 116
    223c:	70 e2       	ldi	r23, 0x20	; 32
	if (at_response_qistat(USART_SERIAL_SIM900, RESPONSE_TIME_300M)) {usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);}
    223e:	80 ea       	ldi	r24, 0xA0	; 160
    2240:	98 e0       	ldi	r25, 0x08	; 8
    2242:	6f d9       	rcall	.-3362   	; 0x1522 <usart_tx_at>
    2244:	6c eb       	ldi	r22, 0xBC	; 188
    2246:	72 e0       	ldi	r23, 0x02	; 2
    2248:	80 ea       	ldi	r24, 0xA0	; 160
    224a:	98 e0       	ldi	r25, 0x08	; 8
	while (mystatus == 0)
	{
		usart_tx_at(USART_SERIAL_SIM900, AT_QNSTATUS); //return +QNSTATUS: n, where 0 is ok.
		if (at_response_qnstatus(USART_SERIAL_SIM900, RESPONSE_TIME_300M)) {usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_OK); mystatus = 1;}
		
		delay_s(2);
    224c:	7d db       	rcall	.-2310   	; 0x1948 <at_response_qistat>
    224e:	88 23       	and	r24, r24
    2250:	61 f0       	breq	.+24     	; 0x226a <main+0x12e>
    2252:	06 c0       	rjmp	.+12     	; 0x2260 <main+0x124>
    2254:	6b e2       	ldi	r22, 0x2B	; 43
	
	//usart_tx_at(USART_SERIAL_SIM900, AT_QICLOSE); //return OK. Perhaps not needed if waking up from power down.
	//if (at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M)) {usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);}
	//delay_s(1);
	usart_tx_at(USART_SERIAL_SIM900, AT_QISTAT); //return OK
	if (at_response_qistat(USART_SERIAL_SIM900, RESPONSE_TIME_300M)) {usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);}
    2256:	7c e2       	ldi	r23, 0x2C	; 44
    2258:	8a e0       	ldi	r24, 0x0A	; 10
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	57 d9       	rcall	.-3410   	; 0x150c <__portable_avr_delay_cycles>
    225e:	d2 cf       	rjmp	.-92     	; 0x2204 <main+0xc8>
	
	//delay_s(1);
	usart_tx_at(USART_SERIAL_SIM900, AT_QIFGCNT); //return OK
    2260:	6f e7       	ldi	r22, 0x7F	; 127
    2262:	70 e2       	ldi	r23, 0x20	; 32
    2264:	80 ea       	ldi	r24, 0xA0	; 160
    2266:	9a e0       	ldi	r25, 0x0A	; 10
    2268:	5c d9       	rcall	.-3400   	; 0x1522 <usart_tx_at>
	if (at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M)) {usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);}
    226a:	61 e9       	ldi	r22, 0x91	; 145
    226c:	70 e2       	ldi	r23, 0x20	; 32
    226e:	80 ea       	ldi	r24, 0xA0	; 160
    2270:	98 e0       	ldi	r25, 0x08	; 8
    2272:	57 d9       	rcall	.-3410   	; 0x1522 <usart_tx_at>
    2274:	6c eb       	ldi	r22, 0xBC	; 188
    2276:	72 e0       	ldi	r23, 0x02	; 2
    2278:	80 ea       	ldi	r24, 0xA0	; 160
    227a:	98 e0       	ldi	r25, 0x08	; 8
    227c:	07 da       	rcall	.-3058   	; 0x168c <at_response>
    227e:	88 23       	and	r24, r24
	//delay_s(1);
	usart_tx_at(USART_SERIAL_SIM900, AT_QICSGP); //return OK
    2280:	29 f0       	breq	.+10     	; 0x228c <main+0x150>
    2282:	6f e7       	ldi	r22, 0x7F	; 127
    2284:	70 e2       	ldi	r23, 0x20	; 32
    2286:	80 ea       	ldi	r24, 0xA0	; 160
	if (at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M)) {usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);}
    2288:	9a e0       	ldi	r25, 0x0A	; 10
    228a:	4b d9       	rcall	.-3434   	; 0x1522 <usart_tx_at>
    228c:	6f e9       	ldi	r22, 0x9F	; 159
    228e:	70 e2       	ldi	r23, 0x20	; 32
    2290:	80 ea       	ldi	r24, 0xA0	; 160
    2292:	98 e0       	ldi	r25, 0x08	; 8
    2294:	46 d9       	rcall	.-3444   	; 0x1522 <usart_tx_at>
    2296:	6c eb       	ldi	r22, 0xBC	; 188
    2298:	72 e0       	ldi	r23, 0x02	; 2
    229a:	80 ea       	ldi	r24, 0xA0	; 160
    229c:	98 e0       	ldi	r25, 0x08	; 8
	//delay_ms(300); //max response time 300ms.
	usart_tx_at(USART_SERIAL_SIM900, AT_QIMUX); //return OK
    229e:	f6 d9       	rcall	.-3092   	; 0x168c <at_response>
    22a0:	88 23       	and	r24, r24
    22a2:	29 f0       	breq	.+10     	; 0x22ae <main+0x172>
    22a4:	6f e7       	ldi	r22, 0x7F	; 127
    22a6:	70 e2       	ldi	r23, 0x20	; 32
	if (at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M)) {usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);}
    22a8:	80 ea       	ldi	r24, 0xA0	; 160
    22aa:	9a e0       	ldi	r25, 0x0A	; 10
    22ac:	3a d9       	rcall	.-3468   	; 0x1522 <usart_tx_at>
    22ae:	67 ec       	ldi	r22, 0xC7	; 199
    22b0:	70 e2       	ldi	r23, 0x20	; 32
    22b2:	80 ea       	ldi	r24, 0xA0	; 160
    22b4:	98 e0       	ldi	r25, 0x08	; 8
    22b6:	35 d9       	rcall	.-3478   	; 0x1522 <usart_tx_at>
    22b8:	6c eb       	ldi	r22, 0xBC	; 188
    22ba:	72 e0       	ldi	r23, 0x02	; 2
    22bc:	80 ea       	ldi	r24, 0xA0	; 160
	//delay_s(1);
	usart_tx_at(USART_SERIAL_SIM900, AT_QIMODE); //return OK
    22be:	98 e0       	ldi	r25, 0x08	; 8
    22c0:	e5 d9       	rcall	.-3126   	; 0x168c <at_response>
    22c2:	88 23       	and	r24, r24
    22c4:	29 f0       	breq	.+10     	; 0x22d0 <main+0x194>
	if (at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M)) {usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);}
    22c6:	6f e7       	ldi	r22, 0x7F	; 127
    22c8:	70 e2       	ldi	r23, 0x20	; 32
    22ca:	80 ea       	ldi	r24, 0xA0	; 160
    22cc:	9a e0       	ldi	r25, 0x0A	; 10
    22ce:	29 d9       	rcall	.-3502   	; 0x1522 <usart_tx_at>
    22d0:	63 ed       	ldi	r22, 0xD3	; 211
    22d2:	70 e2       	ldi	r23, 0x20	; 32
    22d4:	80 ea       	ldi	r24, 0xA0	; 160
    22d6:	98 e0       	ldi	r25, 0x08	; 8
    22d8:	24 d9       	rcall	.-3512   	; 0x1522 <usart_tx_at>
    22da:	6c eb       	ldi	r22, 0xBC	; 188
    22dc:	72 e0       	ldi	r23, 0x02	; 2
	
	//delay_s(1);
	usart_tx_at(USART_SERIAL_SIM900, AT_QIDNSIP); //return OK
    22de:	80 ea       	ldi	r24, 0xA0	; 160
    22e0:	98 e0       	ldi	r25, 0x08	; 8
    22e2:	d4 d9       	rcall	.-3160   	; 0x168c <at_response>
    22e4:	88 23       	and	r24, r24
    22e6:	29 f0       	breq	.+10     	; 0x22f2 <main+0x1b6>
	if (at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M)) {usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);}
    22e8:	6f e7       	ldi	r22, 0x7F	; 127
    22ea:	70 e2       	ldi	r23, 0x20	; 32
    22ec:	80 ea       	ldi	r24, 0xA0	; 160
    22ee:	9a e0       	ldi	r25, 0x0A	; 10
    22f0:	18 d9       	rcall	.-3536   	; 0x1522 <usart_tx_at>
    22f2:	60 ee       	ldi	r22, 0xE0	; 224
    22f4:	70 e2       	ldi	r23, 0x20	; 32
    22f6:	80 ea       	ldi	r24, 0xA0	; 160
    22f8:	98 e0       	ldi	r25, 0x08	; 8
    22fa:	13 d9       	rcall	.-3546   	; 0x1522 <usart_tx_at>
	//delay_s(1);
	usart_tx_at(USART_SERIAL_SIM900, AT_QIREGAPP); //return OK
    22fc:	6c eb       	ldi	r22, 0xBC	; 188
    22fe:	72 e0       	ldi	r23, 0x02	; 2
    2300:	80 ea       	ldi	r24, 0xA0	; 160
    2302:	98 e0       	ldi	r25, 0x08	; 8
    2304:	c3 d9       	rcall	.-3194   	; 0x168c <at_response>
	if (at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M)) {usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);}
    2306:	88 23       	and	r24, r24
    2308:	29 f0       	breq	.+10     	; 0x2314 <main+0x1d8>
    230a:	6f e7       	ldi	r22, 0x7F	; 127
    230c:	70 e2       	ldi	r23, 0x20	; 32
    230e:	80 ea       	ldi	r24, 0xA0	; 160
    2310:	9a e0       	ldi	r25, 0x0A	; 10
    2312:	07 d9       	rcall	.-3570   	; 0x1522 <usart_tx_at>
    2314:	6e ee       	ldi	r22, 0xEE	; 238
    2316:	70 e2       	ldi	r23, 0x20	; 32
    2318:	80 ea       	ldi	r24, 0xA0	; 160
    231a:	98 e0       	ldi	r25, 0x08	; 8
	//delay_s(1);
	usart_tx_at(USART_SERIAL_SIM900, AT_QIACT); //return OK
    231c:	02 d9       	rcall	.-3580   	; 0x1522 <usart_tx_at>
    231e:	6c eb       	ldi	r22, 0xBC	; 188
    2320:	72 e0       	ldi	r23, 0x02	; 2
    2322:	80 ea       	ldi	r24, 0xA0	; 160
    2324:	98 e0       	ldi	r25, 0x08	; 8
	if (at_response(USART_SERIAL_SIM900, RESPONSE_TIME_20S)) {usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);}
    2326:	b2 d9       	rcall	.-3228   	; 0x168c <at_response>
    2328:	88 23       	and	r24, r24
    232a:	29 f0       	breq	.+10     	; 0x2336 <main+0x1fa>
    232c:	6f e7       	ldi	r22, 0x7F	; 127
    232e:	70 e2       	ldi	r23, 0x20	; 32
    2330:	80 ea       	ldi	r24, 0xA0	; 160
    2332:	9a e0       	ldi	r25, 0x0A	; 10
    2334:	f6 d8       	rcall	.-3604   	; 0x1522 <usart_tx_at>
    2336:	6b ef       	ldi	r22, 0xFB	; 251
    2338:	70 e2       	ldi	r23, 0x20	; 32
    233a:	80 ea       	ldi	r24, 0xA0	; 160
	//delay_s(1);
	usart_tx_at(USART_SERIAL_SIM900, AT_QILOCIP); //return OK //fix response
    233c:	98 e0       	ldi	r25, 0x08	; 8
    233e:	f1 d8       	rcall	.-3614   	; 0x1522 <usart_tx_at>
    2340:	60 e4       	ldi	r22, 0x40	; 64
    2342:	7c e9       	ldi	r23, 0x9C	; 156
	if (at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M)) {usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);} //fix response
    2344:	80 ea       	ldi	r24, 0xA0	; 160
    2346:	98 e0       	ldi	r25, 0x08	; 8
    2348:	a1 d9       	rcall	.-3262   	; 0x168c <at_response>
    234a:	88 23       	and	r24, r24
    234c:	29 f0       	breq	.+10     	; 0x2358 <main+0x21c>
    234e:	6f e7       	ldi	r22, 0x7F	; 127
    2350:	70 e2       	ldi	r23, 0x20	; 32
    2352:	80 ea       	ldi	r24, 0xA0	; 160
    2354:	9a e0       	ldi	r25, 0x0A	; 10
    2356:	e5 d8       	rcall	.-3638   	; 0x1522 <usart_tx_at>
    2358:	65 e0       	ldi	r22, 0x05	; 5
    235a:	71 e2       	ldi	r23, 0x21	; 33
	//delay_s(1);
	usart_tx_at(USART_SERIAL_SIM900, AT_QIOPEN); //return OK
    235c:	80 ea       	ldi	r24, 0xA0	; 160
    235e:	98 e0       	ldi	r25, 0x08	; 8
    2360:	e0 d8       	rcall	.-3648   	; 0x1522 <usart_tx_at>
    2362:	6c eb       	ldi	r22, 0xBC	; 188
    2364:	72 e0       	ldi	r23, 0x02	; 2
	if (at_response(USART_SERIAL_SIM900, RESPONSE_TIME_20S)) {usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);}
    2366:	80 ea       	ldi	r24, 0xA0	; 160
    2368:	98 e0       	ldi	r25, 0x08	; 8
    236a:	90 d9       	rcall	.-3296   	; 0x168c <at_response>
    236c:	88 23       	and	r24, r24
    236e:	29 f0       	breq	.+10     	; 0x237a <main+0x23e>
    2370:	6f e7       	ldi	r22, 0x7F	; 127
    2372:	70 e2       	ldi	r23, 0x20	; 32
    2374:	80 ea       	ldi	r24, 0xA0	; 160
    2376:	9a e0       	ldi	r25, 0x0A	; 10
    2378:	d4 d8       	rcall	.-3672   	; 0x1522 <usart_tx_at>
    237a:	61 e1       	ldi	r22, 0x11	; 17
	//delay_s(1);
	usart_tx_at(USART_SERIAL_SIM900, AT_QISRVC); //return OK
    237c:	71 e2       	ldi	r23, 0x21	; 33
    237e:	80 ea       	ldi	r24, 0xA0	; 160
    2380:	98 e0       	ldi	r25, 0x08	; 8
    2382:	cf d8       	rcall	.-3682   	; 0x1522 <usart_tx_at>
    2384:	60 e4       	ldi	r22, 0x40	; 64
	if (at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M)) {usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);}
    2386:	7c e9       	ldi	r23, 0x9C	; 156
    2388:	80 ea       	ldi	r24, 0xA0	; 160
    238a:	98 e0       	ldi	r25, 0x08	; 8
    238c:	7f d9       	rcall	.-3330   	; 0x168c <at_response>
    238e:	88 23       	and	r24, r24
    2390:	29 f0       	breq	.+10     	; 0x239c <main+0x260>
    2392:	6f e7       	ldi	r22, 0x7F	; 127
    2394:	70 e2       	ldi	r23, 0x20	; 32
    2396:	80 ea       	ldi	r24, 0xA0	; 160
    2398:	9a e0       	ldi	r25, 0x0A	; 10
	//delay_s(1);
	
	usart_tx_at(USART_SERIAL_SIM900, AT_QISTAT); //return OK
    239a:	c3 d8       	rcall	.-3706   	; 0x1522 <usart_tx_at>
    239c:	64 e3       	ldi	r22, 0x34	; 52
    239e:	71 e2       	ldi	r23, 0x21	; 33
    23a0:	80 ea       	ldi	r24, 0xA0	; 160
    23a2:	98 e0       	ldi	r25, 0x08	; 8
    23a4:	be d8       	rcall	.-3716   	; 0x1522 <usart_tx_at>
	if (at_response_qistat(USART_SERIAL_SIM900, RESPONSE_TIME_300M)) {usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);}
    23a6:	6c eb       	ldi	r22, 0xBC	; 188
    23a8:	72 e0       	ldi	r23, 0x02	; 2
    23aa:	80 ea       	ldi	r24, 0xA0	; 160
    23ac:	98 e0       	ldi	r25, 0x08	; 8
    23ae:	6e d9       	rcall	.-3364   	; 0x168c <at_response>
    23b0:	88 23       	and	r24, r24
    23b2:	29 f0       	breq	.+10     	; 0x23be <main+0x282>
    23b4:	6f e7       	ldi	r22, 0x7F	; 127
    23b6:	70 e2       	ldi	r23, 0x20	; 32
    23b8:	80 ea       	ldi	r24, 0xA0	; 160
    23ba:	9a e0       	ldi	r25, 0x0A	; 10
	delay_s(1);
    23bc:	b2 d8       	rcall	.-3740   	; 0x1522 <usart_tx_at>
    23be:	64 e7       	ldi	r22, 0x74	; 116
    23c0:	70 e2       	ldi	r23, 0x20	; 32
    23c2:	80 ea       	ldi	r24, 0xA0	; 160
	usart_tx_at(USART_SERIAL_SIM900, AT_QISTAT); //return OK
    23c4:	98 e0       	ldi	r25, 0x08	; 8
    23c6:	ad d8       	rcall	.-3750   	; 0x1522 <usart_tx_at>
    23c8:	6c eb       	ldi	r22, 0xBC	; 188
    23ca:	72 e0       	ldi	r23, 0x02	; 2
    23cc:	80 ea       	ldi	r24, 0xA0	; 160
    23ce:	98 e0       	ldi	r25, 0x08	; 8
	if (at_response_qistat(USART_SERIAL_SIM900, RESPONSE_TIME_300M)) {usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);}
    23d0:	bb da       	rcall	.-2698   	; 0x1948 <at_response_qistat>
    23d2:	88 23       	and	r24, r24
    23d4:	29 f0       	breq	.+10     	; 0x23e0 <main+0x2a4>
    23d6:	6f e7       	ldi	r22, 0x7F	; 127
    23d8:	70 e2       	ldi	r23, 0x20	; 32
    23da:	80 ea       	ldi	r24, 0xA0	; 160
    23dc:	9a e0       	ldi	r25, 0x0A	; 10
    23de:	a1 d8       	rcall	.-3774   	; 0x1522 <usart_tx_at>
    23e0:	66 e1       	ldi	r22, 0x16	; 22
    23e2:	76 e1       	ldi	r23, 0x16	; 22
    23e4:	85 e0       	ldi	r24, 0x05	; 5
	
	usart_tx_at(USART_SERIAL_SIM900, AT_QISEND); //return OK
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	91 d8       	rcall	.-3806   	; 0x150c <__portable_avr_delay_cycles>
    23ea:	64 e7       	ldi	r22, 0x74	; 116
    23ec:	70 e2       	ldi	r23, 0x20	; 32
    23ee:	80 ea       	ldi	r24, 0xA0	; 160
    23f0:	98 e0       	ldi	r25, 0x08	; 8
	if (at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M)) {usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);}
    23f2:	97 d8       	rcall	.-3794   	; 0x1522 <usart_tx_at>
    23f4:	6c eb       	ldi	r22, 0xBC	; 188
    23f6:	72 e0       	ldi	r23, 0x02	; 2
    23f8:	80 ea       	ldi	r24, 0xA0	; 160
    23fa:	98 e0       	ldi	r25, 0x08	; 8
    23fc:	a5 da       	rcall	.-2742   	; 0x1948 <at_response_qistat>
    23fe:	88 23       	and	r24, r24
    2400:	29 f0       	breq	.+10     	; 0x240c <main+0x2d0>
    2402:	6f e7       	ldi	r22, 0x7F	; 127
    2404:	70 e2       	ldi	r23, 0x20	; 32
    2406:	80 ea       	ldi	r24, 0xA0	; 160
	//delay_s(1);
		
	char* AT_MESSAGE2 = "2213 10:33:22";
		
	mqtt_packet(AT_MESSAGE2);
    2408:	9a e0       	ldi	r25, 0x0A	; 10
    240a:	8b d8       	rcall	.-3818   	; 0x1522 <usart_tx_at>
    240c:	61 e4       	ldi	r22, 0x41	; 65
	delay_ms(300);
    240e:	71 e2       	ldi	r23, 0x21	; 33
    2410:	80 ea       	ldi	r24, 0xA0	; 160
    2412:	98 e0       	ldi	r25, 0x08	; 8
    2414:	86 d8       	rcall	.-3828   	; 0x1522 <usart_tx_at>
		
	//delay_s(1);
	usart_tx_at(USART_SERIAL_SIM900, CTRL_Z); //return OK
    2416:	6c eb       	ldi	r22, 0xBC	; 188
    2418:	72 e0       	ldi	r23, 0x02	; 2
    241a:	80 ea       	ldi	r24, 0xA0	; 160
    241c:	98 e0       	ldi	r25, 0x08	; 8
    241e:	36 d9       	rcall	.-3476   	; 0x168c <at_response>
	if (at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M)) {usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);}
    2420:	88 23       	and	r24, r24
    2422:	29 f0       	breq	.+10     	; 0x242e <main+0x2f2>
    2424:	6f e7       	ldi	r22, 0x7F	; 127
    2426:	70 e2       	ldi	r23, 0x20	; 32
    2428:	80 ea       	ldi	r24, 0xA0	; 160
    242a:	9a e0       	ldi	r25, 0x0A	; 10
    242c:	7a d8       	rcall	.-3852   	; 0x1522 <usart_tx_at>
    242e:	8c e4       	ldi	r24, 0x4C	; 76
    2430:	91 e2       	ldi	r25, 0x21	; 33
    2432:	2d db       	rcall	.-2470   	; 0x1a8e <mqtt_packet>
    2434:	61 ea       	ldi	r22, 0xA1	; 161
    2436:	76 e8       	ldi	r23, 0x86	; 134
    2438:	81 e0       	ldi	r24, 0x01	; 1
	//delay_s(1);
	//usart_tx_at(USART_SERIAL_SIM900, AT_QISRVC); //return OK REMOVE?????????????
	//if (at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M)) {usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);}
	//delay_s(1);
	usart_tx_at(USART_SERIAL_SIM900, AT_QICLOSE); //return OK
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	67 d8       	rcall	.-3890   	; 0x150c <__portable_avr_delay_cycles>
    243e:	6a e5       	ldi	r22, 0x5A	; 90
    2440:	71 e2       	ldi	r23, 0x21	; 33
    2442:	80 ea       	ldi	r24, 0xA0	; 160
    2444:	98 e0       	ldi	r25, 0x08	; 8
	if (at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M)) {usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);}
    2446:	6d d8       	rcall	.-3878   	; 0x1522 <usart_tx_at>
    2448:	6c eb       	ldi	r22, 0xBC	; 188
    244a:	72 e0       	ldi	r23, 0x02	; 2
    244c:	80 ea       	ldi	r24, 0xA0	; 160
    244e:	98 e0       	ldi	r25, 0x08	; 8
    2450:	1d d9       	rcall	.-3526   	; 0x168c <at_response>
    2452:	88 23       	and	r24, r24
    2454:	29 f0       	breq	.+10     	; 0x2460 <main+0x324>
    2456:	6f e7       	ldi	r22, 0x7F	; 127
    2458:	70 e2       	ldi	r23, 0x20	; 32
    245a:	80 ea       	ldi	r24, 0xA0	; 160
    245c:	9a e0       	ldi	r25, 0x0A	; 10
    245e:	61 d8       	rcall	.-3902   	; 0x1522 <usart_tx_at>
    2460:	6c e5       	ldi	r22, 0x5C	; 92
	//delay_s(1);
	usart_tx_at(USART_SERIAL_SIM900, AT_QIDEACT); //return OK
    2462:	71 e2       	ldi	r23, 0x21	; 33
    2464:	80 ea       	ldi	r24, 0xA0	; 160
    2466:	98 e0       	ldi	r25, 0x08	; 8
    2468:	5c d8       	rcall	.-3912   	; 0x1522 <usart_tx_at>
    246a:	6c eb       	ldi	r22, 0xBC	; 188
    246c:	72 e0       	ldi	r23, 0x02	; 2
	if (at_response(USART_SERIAL_SIM900, RESPONSE_TIME_20S)) {usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);} //REMOVE THIS ONE IF IT TAKES TOO LONG TIME.
    246e:	80 ea       	ldi	r24, 0xA0	; 160
    2470:	98 e0       	ldi	r25, 0x08	; 8
    2472:	0c d9       	rcall	.-3560   	; 0x168c <at_response>
    2474:	88 23       	and	r24, r24
    2476:	29 f0       	breq	.+10     	; 0x2482 <main+0x346>
    2478:	6f e7       	ldi	r22, 0x7F	; 127
    247a:	70 e2       	ldi	r23, 0x20	; 32
    247c:	80 ea       	ldi	r24, 0xA0	; 160
    247e:	9a e0       	ldi	r25, 0x0A	; 10
    2480:	50 d8       	rcall	.-3936   	; 0x1522 <usart_tx_at>
    2482:	68 e6       	ldi	r22, 0x68	; 104
    2484:	71 e2       	ldi	r23, 0x21	; 33
    2486:	80 ea       	ldi	r24, 0xA0	; 160
    2488:	98 e0       	ldi	r25, 0x08	; 8
	//delay_s(1);
	
	
	//radio power down
	radio_power_down();
    248a:	4b d8       	rcall	.-3946   	; 0x1522 <usart_tx_at>
    248c:	60 e4       	ldi	r22, 0x40	; 64
	
	while (1)
	{
		
		led_blink(1);
    248e:	7c e9       	ldi	r23, 0x9C	; 156
    2490:	80 ea       	ldi	r24, 0xA0	; 160
    2492:	98 e0       	ldi	r25, 0x08	; 8
    2494:	fb d8       	rcall	.-3594   	; 0x168c <at_response>
    2496:	88 23       	and	r24, r24
    2498:	29 f0       	breq	.+10     	; 0x24a4 <main+0x368>
    249a:	6f e7       	ldi	r22, 0x7F	; 127
    249c:	70 e2       	ldi	r23, 0x20	; 32
    249e:	80 ea       	ldi	r24, 0xA0	; 160
    24a0:	9a e0       	ldi	r25, 0x0A	; 10
    24a2:	3f d8       	rcall	.-3970   	; 0x1522 <usart_tx_at>
    24a4:	6c dd       	rcall	.-1320   	; 0x1f7e <radio_power_down>
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	50 d8       	rcall	.-3936   	; 0x154a <led_blink>
    24aa:	fd cf       	rjmp	.-6      	; 0x24a6 <main+0x36a>

000024ac <__divsf3>:
    24ac:	0c d0       	rcall	.+24     	; 0x24c6 <__divsf3x>
    24ae:	05 c1       	rjmp	.+522    	; 0x26ba <__fp_round>
    24b0:	fd d0       	rcall	.+506    	; 0x26ac <__fp_pscB>
    24b2:	40 f0       	brcs	.+16     	; 0x24c4 <__divsf3+0x18>
    24b4:	f4 d0       	rcall	.+488    	; 0x269e <__fp_pscA>
    24b6:	30 f0       	brcs	.+12     	; 0x24c4 <__divsf3+0x18>
    24b8:	21 f4       	brne	.+8      	; 0x24c2 <__divsf3+0x16>
    24ba:	5f 3f       	cpi	r21, 0xFF	; 255
    24bc:	19 f0       	breq	.+6      	; 0x24c4 <__divsf3+0x18>
    24be:	d6 c0       	rjmp	.+428    	; 0x266c <__fp_inf>
    24c0:	51 11       	cpse	r21, r1
    24c2:	2f c1       	rjmp	.+606    	; 0x2722 <__fp_szero>
    24c4:	d9 c0       	rjmp	.+434    	; 0x2678 <__fp_nan>

000024c6 <__divsf3x>:
    24c6:	0a d1       	rcall	.+532    	; 0x26dc <__fp_split3>
    24c8:	98 f3       	brcs	.-26     	; 0x24b0 <__divsf3+0x4>

000024ca <__divsf3_pse>:
    24ca:	99 23       	and	r25, r25
    24cc:	c9 f3       	breq	.-14     	; 0x24c0 <__divsf3+0x14>
    24ce:	55 23       	and	r21, r21
    24d0:	b1 f3       	breq	.-20     	; 0x24be <__divsf3+0x12>
    24d2:	95 1b       	sub	r25, r21
    24d4:	55 0b       	sbc	r21, r21
    24d6:	bb 27       	eor	r27, r27
    24d8:	aa 27       	eor	r26, r26
    24da:	62 17       	cp	r22, r18
    24dc:	73 07       	cpc	r23, r19
    24de:	84 07       	cpc	r24, r20
    24e0:	38 f0       	brcs	.+14     	; 0x24f0 <__divsf3_pse+0x26>
    24e2:	9f 5f       	subi	r25, 0xFF	; 255
    24e4:	5f 4f       	sbci	r21, 0xFF	; 255
    24e6:	22 0f       	add	r18, r18
    24e8:	33 1f       	adc	r19, r19
    24ea:	44 1f       	adc	r20, r20
    24ec:	aa 1f       	adc	r26, r26
    24ee:	a9 f3       	breq	.-22     	; 0x24da <__divsf3_pse+0x10>
    24f0:	33 d0       	rcall	.+102    	; 0x2558 <__divsf3_pse+0x8e>
    24f2:	0e 2e       	mov	r0, r30
    24f4:	3a f0       	brmi	.+14     	; 0x2504 <__divsf3_pse+0x3a>
    24f6:	e0 e8       	ldi	r30, 0x80	; 128
    24f8:	30 d0       	rcall	.+96     	; 0x255a <__divsf3_pse+0x90>
    24fa:	91 50       	subi	r25, 0x01	; 1
    24fc:	50 40       	sbci	r21, 0x00	; 0
    24fe:	e6 95       	lsr	r30
    2500:	00 1c       	adc	r0, r0
    2502:	ca f7       	brpl	.-14     	; 0x24f6 <__divsf3_pse+0x2c>
    2504:	29 d0       	rcall	.+82     	; 0x2558 <__divsf3_pse+0x8e>
    2506:	fe 2f       	mov	r31, r30
    2508:	27 d0       	rcall	.+78     	; 0x2558 <__divsf3_pse+0x8e>
    250a:	66 0f       	add	r22, r22
    250c:	77 1f       	adc	r23, r23
    250e:	88 1f       	adc	r24, r24
    2510:	bb 1f       	adc	r27, r27
    2512:	26 17       	cp	r18, r22
    2514:	37 07       	cpc	r19, r23
    2516:	48 07       	cpc	r20, r24
    2518:	ab 07       	cpc	r26, r27
    251a:	b0 e8       	ldi	r27, 0x80	; 128
    251c:	09 f0       	breq	.+2      	; 0x2520 <__divsf3_pse+0x56>
    251e:	bb 0b       	sbc	r27, r27
    2520:	80 2d       	mov	r24, r0
    2522:	bf 01       	movw	r22, r30
    2524:	ff 27       	eor	r31, r31
    2526:	93 58       	subi	r25, 0x83	; 131
    2528:	5f 4f       	sbci	r21, 0xFF	; 255
    252a:	2a f0       	brmi	.+10     	; 0x2536 <__divsf3_pse+0x6c>
    252c:	9e 3f       	cpi	r25, 0xFE	; 254
    252e:	51 05       	cpc	r21, r1
    2530:	68 f0       	brcs	.+26     	; 0x254c <__divsf3_pse+0x82>
    2532:	9c c0       	rjmp	.+312    	; 0x266c <__fp_inf>
    2534:	f6 c0       	rjmp	.+492    	; 0x2722 <__fp_szero>
    2536:	5f 3f       	cpi	r21, 0xFF	; 255
    2538:	ec f3       	brlt	.-6      	; 0x2534 <__divsf3_pse+0x6a>
    253a:	98 3e       	cpi	r25, 0xE8	; 232
    253c:	dc f3       	brlt	.-10     	; 0x2534 <__divsf3_pse+0x6a>
    253e:	86 95       	lsr	r24
    2540:	77 95       	ror	r23
    2542:	67 95       	ror	r22
    2544:	b7 95       	ror	r27
    2546:	f7 95       	ror	r31
    2548:	9f 5f       	subi	r25, 0xFF	; 255
    254a:	c9 f7       	brne	.-14     	; 0x253e <__divsf3_pse+0x74>
    254c:	88 0f       	add	r24, r24
    254e:	91 1d       	adc	r25, r1
    2550:	96 95       	lsr	r25
    2552:	87 95       	ror	r24
    2554:	97 f9       	bld	r25, 7
    2556:	08 95       	ret
    2558:	e1 e0       	ldi	r30, 0x01	; 1
    255a:	66 0f       	add	r22, r22
    255c:	77 1f       	adc	r23, r23
    255e:	88 1f       	adc	r24, r24
    2560:	bb 1f       	adc	r27, r27
    2562:	62 17       	cp	r22, r18
    2564:	73 07       	cpc	r23, r19
    2566:	84 07       	cpc	r24, r20
    2568:	ba 07       	cpc	r27, r26
    256a:	20 f0       	brcs	.+8      	; 0x2574 <__divsf3_pse+0xaa>
    256c:	62 1b       	sub	r22, r18
    256e:	73 0b       	sbc	r23, r19
    2570:	84 0b       	sbc	r24, r20
    2572:	ba 0b       	sbc	r27, r26
    2574:	ee 1f       	adc	r30, r30
    2576:	88 f7       	brcc	.-30     	; 0x255a <__divsf3_pse+0x90>
    2578:	e0 95       	com	r30
    257a:	08 95       	ret

0000257c <__fixsfdi>:
    257c:	be e3       	ldi	r27, 0x3E	; 62
    257e:	04 d0       	rcall	.+8      	; 0x2588 <__fixunssfdi+0x2>
    2580:	08 f4       	brcc	.+2      	; 0x2584 <__fixsfdi+0x8>
    2582:	90 e8       	ldi	r25, 0x80	; 128
    2584:	08 95       	ret

00002586 <__fixunssfdi>:
    2586:	bf e3       	ldi	r27, 0x3F	; 63
    2588:	22 27       	eor	r18, r18
    258a:	33 27       	eor	r19, r19
    258c:	a9 01       	movw	r20, r18
    258e:	ae d0       	rcall	.+348    	; 0x26ec <__fp_splitA>
    2590:	58 f1       	brcs	.+86     	; 0x25e8 <__fixunssfdi+0x62>
    2592:	9f 57       	subi	r25, 0x7F	; 127
    2594:	40 f1       	brcs	.+80     	; 0x25e6 <__fixunssfdi+0x60>
    2596:	b9 17       	cp	r27, r25
    2598:	38 f1       	brcs	.+78     	; 0x25e8 <__fixunssfdi+0x62>
    259a:	bf e3       	ldi	r27, 0x3F	; 63
    259c:	b9 1b       	sub	r27, r25
    259e:	99 27       	eor	r25, r25
    25a0:	b8 50       	subi	r27, 0x08	; 8
    25a2:	3a f4       	brpl	.+14     	; 0x25b2 <__fixunssfdi+0x2c>
    25a4:	66 0f       	add	r22, r22
    25a6:	77 1f       	adc	r23, r23
    25a8:	88 1f       	adc	r24, r24
    25aa:	99 1f       	adc	r25, r25
    25ac:	b3 95       	inc	r27
    25ae:	d2 f3       	brmi	.-12     	; 0x25a4 <__fixunssfdi+0x1e>
    25b0:	16 c0       	rjmp	.+44     	; 0x25de <__fixunssfdi+0x58>
    25b2:	b8 50       	subi	r27, 0x08	; 8
    25b4:	4a f0       	brmi	.+18     	; 0x25c8 <__fixunssfdi+0x42>
    25b6:	23 2f       	mov	r18, r19
    25b8:	34 2f       	mov	r19, r20
    25ba:	45 2f       	mov	r20, r21
    25bc:	56 2f       	mov	r21, r22
    25be:	67 2f       	mov	r22, r23
    25c0:	78 2f       	mov	r23, r24
    25c2:	88 27       	eor	r24, r24
    25c4:	b8 50       	subi	r27, 0x08	; 8
    25c6:	ba f7       	brpl	.-18     	; 0x25b6 <__fixunssfdi+0x30>
    25c8:	b8 5f       	subi	r27, 0xF8	; 248
    25ca:	49 f0       	breq	.+18     	; 0x25de <__fixunssfdi+0x58>
    25cc:	86 95       	lsr	r24
    25ce:	77 95       	ror	r23
    25d0:	67 95       	ror	r22
    25d2:	57 95       	ror	r21
    25d4:	47 95       	ror	r20
    25d6:	37 95       	ror	r19
    25d8:	27 95       	ror	r18
    25da:	ba 95       	dec	r27
    25dc:	b9 f7       	brne	.-18     	; 0x25cc <__fixunssfdi+0x46>
    25de:	0e f4       	brtc	.+2      	; 0x25e2 <__fixunssfdi+0x5c>
    25e0:	4e d0       	rcall	.+156    	; 0x267e <__fp_negdi>
    25e2:	88 94       	clc
    25e4:	08 95       	ret
    25e6:	88 94       	clc
    25e8:	60 e0       	ldi	r22, 0x00	; 0
    25ea:	70 e0       	ldi	r23, 0x00	; 0
    25ec:	cb 01       	movw	r24, r22
    25ee:	08 95       	ret

000025f0 <__floatundisf>:
    25f0:	e8 94       	clt

000025f2 <__fp_di2sf>:
    25f2:	f9 2f       	mov	r31, r25
    25f4:	96 eb       	ldi	r25, 0xB6	; 182
    25f6:	ff 23       	and	r31, r31
    25f8:	81 f0       	breq	.+32     	; 0x261a <__fp_di2sf+0x28>
    25fa:	12 16       	cp	r1, r18
    25fc:	13 06       	cpc	r1, r19
    25fe:	14 06       	cpc	r1, r20
    2600:	44 0b       	sbc	r20, r20
    2602:	93 95       	inc	r25
    2604:	f6 95       	lsr	r31
    2606:	87 95       	ror	r24
    2608:	77 95       	ror	r23
    260a:	67 95       	ror	r22
    260c:	57 95       	ror	r21
    260e:	40 40       	sbci	r20, 0x00	; 0
    2610:	ff 23       	and	r31, r31
    2612:	b9 f7       	brne	.-18     	; 0x2602 <__fp_di2sf+0x10>
    2614:	1b c0       	rjmp	.+54     	; 0x264c <__fp_di2sf+0x5a>
    2616:	99 27       	eor	r25, r25
    2618:	08 95       	ret
    261a:	88 23       	and	r24, r24
    261c:	51 f4       	brne	.+20     	; 0x2632 <__fp_di2sf+0x40>
    261e:	98 50       	subi	r25, 0x08	; 8
    2620:	d2 f7       	brpl	.-12     	; 0x2616 <__fp_di2sf+0x24>
    2622:	87 2b       	or	r24, r23
    2624:	76 2f       	mov	r23, r22
    2626:	65 2f       	mov	r22, r21
    2628:	54 2f       	mov	r21, r20
    262a:	43 2f       	mov	r20, r19
    262c:	32 2f       	mov	r19, r18
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	b1 f3       	breq	.-20     	; 0x261e <__fp_di2sf+0x2c>
    2632:	12 16       	cp	r1, r18
    2634:	13 06       	cpc	r1, r19
    2636:	14 06       	cpc	r1, r20
    2638:	44 0b       	sbc	r20, r20
    263a:	88 23       	and	r24, r24
    263c:	3a f0       	brmi	.+14     	; 0x264c <__fp_di2sf+0x5a>
    263e:	9a 95       	dec	r25
    2640:	44 0f       	add	r20, r20
    2642:	55 1f       	adc	r21, r21
    2644:	66 1f       	adc	r22, r22
    2646:	77 1f       	adc	r23, r23
    2648:	88 1f       	adc	r24, r24
    264a:	ca f7       	brpl	.-14     	; 0x263e <__fp_di2sf+0x4c>
    264c:	55 23       	and	r21, r21
    264e:	4a f4       	brpl	.+18     	; 0x2662 <__fp_di2sf+0x70>
    2650:	44 0f       	add	r20, r20
    2652:	55 1f       	adc	r21, r21
    2654:	11 f4       	brne	.+4      	; 0x265a <__fp_di2sf+0x68>
    2656:	60 ff       	sbrs	r22, 0
    2658:	04 c0       	rjmp	.+8      	; 0x2662 <__fp_di2sf+0x70>
    265a:	6f 5f       	subi	r22, 0xFF	; 255
    265c:	7f 4f       	sbci	r23, 0xFF	; 255
    265e:	8f 4f       	sbci	r24, 0xFF	; 255
    2660:	9f 4f       	sbci	r25, 0xFF	; 255
    2662:	88 0f       	add	r24, r24
    2664:	96 95       	lsr	r25
    2666:	87 95       	ror	r24
    2668:	97 f9       	bld	r25, 7
    266a:	08 95       	ret

0000266c <__fp_inf>:
    266c:	97 f9       	bld	r25, 7
    266e:	9f 67       	ori	r25, 0x7F	; 127
    2670:	80 e8       	ldi	r24, 0x80	; 128
    2672:	70 e0       	ldi	r23, 0x00	; 0
    2674:	60 e0       	ldi	r22, 0x00	; 0
    2676:	08 95       	ret

00002678 <__fp_nan>:
    2678:	9f ef       	ldi	r25, 0xFF	; 255
    267a:	80 ec       	ldi	r24, 0xC0	; 192
    267c:	08 95       	ret

0000267e <__fp_negdi>:
    267e:	90 95       	com	r25
    2680:	80 95       	com	r24
    2682:	70 95       	com	r23
    2684:	60 95       	com	r22
    2686:	50 95       	com	r21
    2688:	40 95       	com	r20
    268a:	30 95       	com	r19
    268c:	21 95       	neg	r18
    268e:	3f 4f       	sbci	r19, 0xFF	; 255
    2690:	4f 4f       	sbci	r20, 0xFF	; 255
    2692:	5f 4f       	sbci	r21, 0xFF	; 255
    2694:	6f 4f       	sbci	r22, 0xFF	; 255
    2696:	7f 4f       	sbci	r23, 0xFF	; 255
    2698:	8f 4f       	sbci	r24, 0xFF	; 255
    269a:	9f 4f       	sbci	r25, 0xFF	; 255
    269c:	08 95       	ret

0000269e <__fp_pscA>:
    269e:	00 24       	eor	r0, r0
    26a0:	0a 94       	dec	r0
    26a2:	16 16       	cp	r1, r22
    26a4:	17 06       	cpc	r1, r23
    26a6:	18 06       	cpc	r1, r24
    26a8:	09 06       	cpc	r0, r25
    26aa:	08 95       	ret

000026ac <__fp_pscB>:
    26ac:	00 24       	eor	r0, r0
    26ae:	0a 94       	dec	r0
    26b0:	12 16       	cp	r1, r18
    26b2:	13 06       	cpc	r1, r19
    26b4:	14 06       	cpc	r1, r20
    26b6:	05 06       	cpc	r0, r21
    26b8:	08 95       	ret

000026ba <__fp_round>:
    26ba:	09 2e       	mov	r0, r25
    26bc:	03 94       	inc	r0
    26be:	00 0c       	add	r0, r0
    26c0:	11 f4       	brne	.+4      	; 0x26c6 <__fp_round+0xc>
    26c2:	88 23       	and	r24, r24
    26c4:	52 f0       	brmi	.+20     	; 0x26da <__fp_round+0x20>
    26c6:	bb 0f       	add	r27, r27
    26c8:	40 f4       	brcc	.+16     	; 0x26da <__fp_round+0x20>
    26ca:	bf 2b       	or	r27, r31
    26cc:	11 f4       	brne	.+4      	; 0x26d2 <__fp_round+0x18>
    26ce:	60 ff       	sbrs	r22, 0
    26d0:	04 c0       	rjmp	.+8      	; 0x26da <__fp_round+0x20>
    26d2:	6f 5f       	subi	r22, 0xFF	; 255
    26d4:	7f 4f       	sbci	r23, 0xFF	; 255
    26d6:	8f 4f       	sbci	r24, 0xFF	; 255
    26d8:	9f 4f       	sbci	r25, 0xFF	; 255
    26da:	08 95       	ret

000026dc <__fp_split3>:
    26dc:	57 fd       	sbrc	r21, 7
    26de:	90 58       	subi	r25, 0x80	; 128
    26e0:	44 0f       	add	r20, r20
    26e2:	55 1f       	adc	r21, r21
    26e4:	59 f0       	breq	.+22     	; 0x26fc <__fp_splitA+0x10>
    26e6:	5f 3f       	cpi	r21, 0xFF	; 255
    26e8:	71 f0       	breq	.+28     	; 0x2706 <__fp_splitA+0x1a>
    26ea:	47 95       	ror	r20

000026ec <__fp_splitA>:
    26ec:	88 0f       	add	r24, r24
    26ee:	97 fb       	bst	r25, 7
    26f0:	99 1f       	adc	r25, r25
    26f2:	61 f0       	breq	.+24     	; 0x270c <__fp_splitA+0x20>
    26f4:	9f 3f       	cpi	r25, 0xFF	; 255
    26f6:	79 f0       	breq	.+30     	; 0x2716 <__fp_splitA+0x2a>
    26f8:	87 95       	ror	r24
    26fa:	08 95       	ret
    26fc:	12 16       	cp	r1, r18
    26fe:	13 06       	cpc	r1, r19
    2700:	14 06       	cpc	r1, r20
    2702:	55 1f       	adc	r21, r21
    2704:	f2 cf       	rjmp	.-28     	; 0x26ea <__fp_split3+0xe>
    2706:	46 95       	lsr	r20
    2708:	f1 df       	rcall	.-30     	; 0x26ec <__fp_splitA>
    270a:	08 c0       	rjmp	.+16     	; 0x271c <__fp_splitA+0x30>
    270c:	16 16       	cp	r1, r22
    270e:	17 06       	cpc	r1, r23
    2710:	18 06       	cpc	r1, r24
    2712:	99 1f       	adc	r25, r25
    2714:	f1 cf       	rjmp	.-30     	; 0x26f8 <__fp_splitA+0xc>
    2716:	86 95       	lsr	r24
    2718:	71 05       	cpc	r23, r1
    271a:	61 05       	cpc	r22, r1
    271c:	08 94       	sec
    271e:	08 95       	ret

00002720 <__fp_zero>:
    2720:	e8 94       	clt

00002722 <__fp_szero>:
    2722:	bb 27       	eor	r27, r27
    2724:	66 27       	eor	r22, r22
    2726:	77 27       	eor	r23, r23
    2728:	cb 01       	movw	r24, r22
    272a:	97 f9       	bld	r25, 7
    272c:	08 95       	ret

0000272e <__udivmodsi4>:
    272e:	a1 e2       	ldi	r26, 0x21	; 33
    2730:	1a 2e       	mov	r1, r26
    2732:	aa 1b       	sub	r26, r26
    2734:	bb 1b       	sub	r27, r27
    2736:	fd 01       	movw	r30, r26
    2738:	0d c0       	rjmp	.+26     	; 0x2754 <__udivmodsi4_ep>

0000273a <__udivmodsi4_loop>:
    273a:	aa 1f       	adc	r26, r26
    273c:	bb 1f       	adc	r27, r27
    273e:	ee 1f       	adc	r30, r30
    2740:	ff 1f       	adc	r31, r31
    2742:	a2 17       	cp	r26, r18
    2744:	b3 07       	cpc	r27, r19
    2746:	e4 07       	cpc	r30, r20
    2748:	f5 07       	cpc	r31, r21
    274a:	20 f0       	brcs	.+8      	; 0x2754 <__udivmodsi4_ep>
    274c:	a2 1b       	sub	r26, r18
    274e:	b3 0b       	sbc	r27, r19
    2750:	e4 0b       	sbc	r30, r20
    2752:	f5 0b       	sbc	r31, r21

00002754 <__udivmodsi4_ep>:
    2754:	66 1f       	adc	r22, r22
    2756:	77 1f       	adc	r23, r23
    2758:	88 1f       	adc	r24, r24
    275a:	99 1f       	adc	r25, r25
    275c:	1a 94       	dec	r1
    275e:	69 f7       	brne	.-38     	; 0x273a <__udivmodsi4_loop>
    2760:	60 95       	com	r22
    2762:	70 95       	com	r23
    2764:	80 95       	com	r24
    2766:	90 95       	com	r25
    2768:	9b 01       	movw	r18, r22
    276a:	ac 01       	movw	r20, r24
    276c:	bd 01       	movw	r22, r26
    276e:	cf 01       	movw	r24, r30
    2770:	08 95       	ret

00002772 <__muldi3>:
    2772:	df 93       	push	r29
    2774:	cf 93       	push	r28
    2776:	1f 93       	push	r17
    2778:	0f 93       	push	r16
    277a:	9a 9d       	mul	r25, r10
    277c:	f0 2d       	mov	r31, r0
    277e:	21 9f       	mul	r18, r17
    2780:	f0 0d       	add	r31, r0
    2782:	8b 9d       	mul	r24, r11
    2784:	f0 0d       	add	r31, r0
    2786:	8a 9d       	mul	r24, r10
    2788:	e0 2d       	mov	r30, r0
    278a:	f1 0d       	add	r31, r1
    278c:	03 9f       	mul	r16, r19
    278e:	f0 0d       	add	r31, r0
    2790:	02 9f       	mul	r16, r18
    2792:	e0 0d       	add	r30, r0
    2794:	f1 1d       	adc	r31, r1
    2796:	4e 9d       	mul	r20, r14
    2798:	e0 0d       	add	r30, r0
    279a:	f1 1d       	adc	r31, r1
    279c:	5e 9d       	mul	r21, r14
    279e:	f0 0d       	add	r31, r0
    27a0:	4f 9d       	mul	r20, r15
    27a2:	f0 0d       	add	r31, r0
    27a4:	7f 93       	push	r23
    27a6:	6f 93       	push	r22
    27a8:	bf 92       	push	r11
    27aa:	af 92       	push	r10
    27ac:	5f 93       	push	r21
    27ae:	4f 93       	push	r20
    27b0:	d5 01       	movw	r26, r10
    27b2:	8e d0       	rcall	.+284    	; 0x28d0 <__umulhisi3>
    27b4:	8b 01       	movw	r16, r22
    27b6:	ac 01       	movw	r20, r24
    27b8:	d7 01       	movw	r26, r14
    27ba:	8a d0       	rcall	.+276    	; 0x28d0 <__umulhisi3>
    27bc:	eb 01       	movw	r28, r22
    27be:	e8 0f       	add	r30, r24
    27c0:	f9 1f       	adc	r31, r25
    27c2:	d6 01       	movw	r26, r12
    27c4:	1f d0       	rcall	.+62     	; 0x2804 <__muldi3_6>
    27c6:	2f 91       	pop	r18
    27c8:	3f 91       	pop	r19
    27ca:	d6 01       	movw	r26, r12
    27cc:	81 d0       	rcall	.+258    	; 0x28d0 <__umulhisi3>
    27ce:	c6 0f       	add	r28, r22
    27d0:	d7 1f       	adc	r29, r23
    27d2:	e8 1f       	adc	r30, r24
    27d4:	f9 1f       	adc	r31, r25
    27d6:	af 91       	pop	r26
    27d8:	bf 91       	pop	r27
    27da:	14 d0       	rcall	.+40     	; 0x2804 <__muldi3_6>
    27dc:	2f 91       	pop	r18
    27de:	3f 91       	pop	r19
    27e0:	77 d0       	rcall	.+238    	; 0x28d0 <__umulhisi3>
    27e2:	c6 0f       	add	r28, r22
    27e4:	d7 1f       	adc	r29, r23
    27e6:	e8 1f       	adc	r30, r24
    27e8:	f9 1f       	adc	r31, r25
    27ea:	d6 01       	movw	r26, r12
    27ec:	71 d0       	rcall	.+226    	; 0x28d0 <__umulhisi3>
    27ee:	e6 0f       	add	r30, r22
    27f0:	f7 1f       	adc	r31, r23
    27f2:	98 01       	movw	r18, r16
    27f4:	be 01       	movw	r22, r28
    27f6:	cf 01       	movw	r24, r30
    27f8:	11 24       	eor	r1, r1
    27fa:	0f 91       	pop	r16
    27fc:	1f 91       	pop	r17
    27fe:	cf 91       	pop	r28
    2800:	df 91       	pop	r29
    2802:	08 95       	ret

00002804 <__muldi3_6>:
    2804:	65 d0       	rcall	.+202    	; 0x28d0 <__umulhisi3>
    2806:	46 0f       	add	r20, r22
    2808:	57 1f       	adc	r21, r23
    280a:	c8 1f       	adc	r28, r24
    280c:	d9 1f       	adc	r29, r25
    280e:	08 f4       	brcc	.+2      	; 0x2812 <__muldi3_6+0xe>
    2810:	31 96       	adiw	r30, 0x01	; 1
    2812:	08 95       	ret

00002814 <__umoddi3>:
    2814:	68 94       	set
    2816:	01 c0       	rjmp	.+2      	; 0x281a <__udivdi3_umoddi3>

00002818 <__udivdi3>:
    2818:	e8 94       	clt

0000281a <__udivdi3_umoddi3>:
    281a:	8f 92       	push	r8
    281c:	9f 92       	push	r9
    281e:	cf 93       	push	r28
    2820:	df 93       	push	r29
    2822:	05 d0       	rcall	.+10     	; 0x282e <__udivmod64>
    2824:	df 91       	pop	r29
    2826:	cf 91       	pop	r28
    2828:	9f 90       	pop	r9
    282a:	8f 90       	pop	r8
    282c:	08 95       	ret

0000282e <__udivmod64>:
    282e:	88 24       	eor	r8, r8
    2830:	99 24       	eor	r9, r9
    2832:	f4 01       	movw	r30, r8
    2834:	e4 01       	movw	r28, r8
    2836:	b0 e4       	ldi	r27, 0x40	; 64
    2838:	9f 93       	push	r25
    283a:	aa 27       	eor	r26, r26
    283c:	9a 15       	cp	r25, r10
    283e:	8b 04       	cpc	r8, r11
    2840:	9c 04       	cpc	r9, r12
    2842:	ed 05       	cpc	r30, r13
    2844:	fe 05       	cpc	r31, r14
    2846:	cf 05       	cpc	r28, r15
    2848:	d0 07       	cpc	r29, r16
    284a:	a1 07       	cpc	r26, r17
    284c:	98 f4       	brcc	.+38     	; 0x2874 <__udivmod64+0x46>
    284e:	ad 2f       	mov	r26, r29
    2850:	dc 2f       	mov	r29, r28
    2852:	cf 2f       	mov	r28, r31
    2854:	fe 2f       	mov	r31, r30
    2856:	e9 2d       	mov	r30, r9
    2858:	98 2c       	mov	r9, r8
    285a:	89 2e       	mov	r8, r25
    285c:	98 2f       	mov	r25, r24
    285e:	87 2f       	mov	r24, r23
    2860:	76 2f       	mov	r23, r22
    2862:	65 2f       	mov	r22, r21
    2864:	54 2f       	mov	r21, r20
    2866:	43 2f       	mov	r20, r19
    2868:	32 2f       	mov	r19, r18
    286a:	22 27       	eor	r18, r18
    286c:	b8 50       	subi	r27, 0x08	; 8
    286e:	31 f7       	brne	.-52     	; 0x283c <__udivmod64+0xe>
    2870:	bf 91       	pop	r27
    2872:	27 c0       	rjmp	.+78     	; 0x28c2 <__udivmod64+0x94>
    2874:	1b 2e       	mov	r1, r27
    2876:	bf 91       	pop	r27
    2878:	bb 27       	eor	r27, r27
    287a:	22 0f       	add	r18, r18
    287c:	33 1f       	adc	r19, r19
    287e:	44 1f       	adc	r20, r20
    2880:	55 1f       	adc	r21, r21
    2882:	66 1f       	adc	r22, r22
    2884:	77 1f       	adc	r23, r23
    2886:	88 1f       	adc	r24, r24
    2888:	99 1f       	adc	r25, r25
    288a:	88 1c       	adc	r8, r8
    288c:	99 1c       	adc	r9, r9
    288e:	ee 1f       	adc	r30, r30
    2890:	ff 1f       	adc	r31, r31
    2892:	cc 1f       	adc	r28, r28
    2894:	dd 1f       	adc	r29, r29
    2896:	aa 1f       	adc	r26, r26
    2898:	bb 1f       	adc	r27, r27
    289a:	8a 14       	cp	r8, r10
    289c:	9b 04       	cpc	r9, r11
    289e:	ec 05       	cpc	r30, r12
    28a0:	fd 05       	cpc	r31, r13
    28a2:	ce 05       	cpc	r28, r14
    28a4:	df 05       	cpc	r29, r15
    28a6:	a0 07       	cpc	r26, r16
    28a8:	b1 07       	cpc	r27, r17
    28aa:	48 f0       	brcs	.+18     	; 0x28be <__udivmod64+0x90>
    28ac:	8a 18       	sub	r8, r10
    28ae:	9b 08       	sbc	r9, r11
    28b0:	ec 09       	sbc	r30, r12
    28b2:	fd 09       	sbc	r31, r13
    28b4:	ce 09       	sbc	r28, r14
    28b6:	df 09       	sbc	r29, r15
    28b8:	a0 0b       	sbc	r26, r16
    28ba:	b1 0b       	sbc	r27, r17
    28bc:	21 60       	ori	r18, 0x01	; 1
    28be:	1a 94       	dec	r1
    28c0:	e1 f6       	brne	.-72     	; 0x287a <__udivmod64+0x4c>
    28c2:	2e f4       	brtc	.+10     	; 0x28ce <__udivmod64+0xa0>
    28c4:	94 01       	movw	r18, r8
    28c6:	af 01       	movw	r20, r30
    28c8:	be 01       	movw	r22, r28
    28ca:	cd 01       	movw	r24, r26
    28cc:	00 0c       	add	r0, r0
    28ce:	08 95       	ret

000028d0 <__umulhisi3>:
    28d0:	a2 9f       	mul	r26, r18
    28d2:	b0 01       	movw	r22, r0
    28d4:	b3 9f       	mul	r27, r19
    28d6:	c0 01       	movw	r24, r0
    28d8:	a3 9f       	mul	r26, r19
    28da:	70 0d       	add	r23, r0
    28dc:	81 1d       	adc	r24, r1
    28de:	11 24       	eor	r1, r1
    28e0:	91 1d       	adc	r25, r1
    28e2:	b2 9f       	mul	r27, r18
    28e4:	70 0d       	add	r23, r0
    28e6:	81 1d       	adc	r24, r1
    28e8:	11 24       	eor	r1, r1
    28ea:	91 1d       	adc	r25, r1
    28ec:	08 95       	ret

000028ee <memcpy>:
    28ee:	fb 01       	movw	r30, r22
    28f0:	dc 01       	movw	r26, r24
    28f2:	02 c0       	rjmp	.+4      	; 0x28f8 <memcpy+0xa>
    28f4:	01 90       	ld	r0, Z+
    28f6:	0d 92       	st	X+, r0
    28f8:	41 50       	subi	r20, 0x01	; 1
    28fa:	50 40       	sbci	r21, 0x00	; 0
    28fc:	d8 f7       	brcc	.-10     	; 0x28f4 <memcpy+0x6>
    28fe:	08 95       	ret

00002900 <strcat>:
    2900:	fb 01       	movw	r30, r22
    2902:	dc 01       	movw	r26, r24
    2904:	0d 90       	ld	r0, X+
    2906:	00 20       	and	r0, r0
    2908:	e9 f7       	brne	.-6      	; 0x2904 <strcat+0x4>
    290a:	11 97       	sbiw	r26, 0x01	; 1
    290c:	01 90       	ld	r0, Z+
    290e:	0d 92       	st	X+, r0
    2910:	00 20       	and	r0, r0
    2912:	e1 f7       	brne	.-8      	; 0x290c <strcat+0xc>
    2914:	08 95       	ret

00002916 <strcpy>:
    2916:	fb 01       	movw	r30, r22
    2918:	dc 01       	movw	r26, r24
    291a:	01 90       	ld	r0, Z+
    291c:	0d 92       	st	X+, r0
    291e:	00 20       	and	r0, r0
    2920:	e1 f7       	brne	.-8      	; 0x291a <strcpy+0x4>
    2922:	08 95       	ret

00002924 <__itoa_ncheck>:
    2924:	bb 27       	eor	r27, r27
    2926:	4a 30       	cpi	r20, 0x0A	; 10
    2928:	31 f4       	brne	.+12     	; 0x2936 <__itoa_ncheck+0x12>
    292a:	99 23       	and	r25, r25
    292c:	22 f4       	brpl	.+8      	; 0x2936 <__itoa_ncheck+0x12>
    292e:	bd e2       	ldi	r27, 0x2D	; 45
    2930:	90 95       	com	r25
    2932:	81 95       	neg	r24
    2934:	9f 4f       	sbci	r25, 0xFF	; 255
    2936:	01 c0       	rjmp	.+2      	; 0x293a <__utoa_common>

00002938 <__utoa_ncheck>:
    2938:	bb 27       	eor	r27, r27

0000293a <__utoa_common>:
    293a:	fb 01       	movw	r30, r22
    293c:	55 27       	eor	r21, r21
    293e:	aa 27       	eor	r26, r26
    2940:	88 0f       	add	r24, r24
    2942:	99 1f       	adc	r25, r25
    2944:	aa 1f       	adc	r26, r26
    2946:	a4 17       	cp	r26, r20
    2948:	10 f0       	brcs	.+4      	; 0x294e <__utoa_common+0x14>
    294a:	a4 1b       	sub	r26, r20
    294c:	83 95       	inc	r24
    294e:	50 51       	subi	r21, 0x10	; 16
    2950:	b9 f7       	brne	.-18     	; 0x2940 <__utoa_common+0x6>
    2952:	a0 5d       	subi	r26, 0xD0	; 208
    2954:	aa 33       	cpi	r26, 0x3A	; 58
    2956:	08 f0       	brcs	.+2      	; 0x295a <__utoa_common+0x20>
    2958:	a9 5d       	subi	r26, 0xD9	; 217
    295a:	a1 93       	st	Z+, r26
    295c:	00 97       	sbiw	r24, 0x00	; 0
    295e:	79 f7       	brne	.-34     	; 0x293e <__utoa_common+0x4>
    2960:	b1 11       	cpse	r27, r1
    2962:	b1 93       	st	Z+, r27
    2964:	11 92       	st	Z+, r1
    2966:	cb 01       	movw	r24, r22
    2968:	35 c2       	rjmp	.+1130   	; 0x2dd4 <strrev>

0000296a <sprintf>:
    296a:	0f 93       	push	r16
    296c:	1f 93       	push	r17
    296e:	cf 93       	push	r28
    2970:	df 93       	push	r29
    2972:	cd b7       	in	r28, 0x3d	; 61
    2974:	de b7       	in	r29, 0x3e	; 62
    2976:	2e 97       	sbiw	r28, 0x0e	; 14
    2978:	cd bf       	out	0x3d, r28	; 61
    297a:	de bf       	out	0x3e, r29	; 62
    297c:	0e 89       	ldd	r16, Y+22	; 0x16
    297e:	1f 89       	ldd	r17, Y+23	; 0x17
    2980:	86 e0       	ldi	r24, 0x06	; 6
    2982:	8c 83       	std	Y+4, r24	; 0x04
    2984:	09 83       	std	Y+1, r16	; 0x01
    2986:	1a 83       	std	Y+2, r17	; 0x02
    2988:	8f ef       	ldi	r24, 0xFF	; 255
    298a:	9f e7       	ldi	r25, 0x7F	; 127
    298c:	8d 83       	std	Y+5, r24	; 0x05
    298e:	9e 83       	std	Y+6, r25	; 0x06
    2990:	ae 01       	movw	r20, r28
    2992:	46 5e       	subi	r20, 0xE6	; 230
    2994:	5f 4f       	sbci	r21, 0xFF	; 255
    2996:	68 8d       	ldd	r22, Y+24	; 0x18
    2998:	79 8d       	ldd	r23, Y+25	; 0x19
    299a:	ce 01       	movw	r24, r28
    299c:	01 96       	adiw	r24, 0x01	; 1
    299e:	0d d0       	rcall	.+26     	; 0x29ba <vfprintf>
    29a0:	ef 81       	ldd	r30, Y+7	; 0x07
    29a2:	f8 85       	ldd	r31, Y+8	; 0x08
    29a4:	e0 0f       	add	r30, r16
    29a6:	f1 1f       	adc	r31, r17
    29a8:	10 82       	st	Z, r1
    29aa:	2e 96       	adiw	r28, 0x0e	; 14
    29ac:	cd bf       	out	0x3d, r28	; 61
    29ae:	de bf       	out	0x3e, r29	; 62
    29b0:	df 91       	pop	r29
    29b2:	cf 91       	pop	r28
    29b4:	1f 91       	pop	r17
    29b6:	0f 91       	pop	r16
    29b8:	08 95       	ret

000029ba <vfprintf>:
    29ba:	2f 92       	push	r2
    29bc:	3f 92       	push	r3
    29be:	4f 92       	push	r4
    29c0:	5f 92       	push	r5
    29c2:	6f 92       	push	r6
    29c4:	7f 92       	push	r7
    29c6:	8f 92       	push	r8
    29c8:	9f 92       	push	r9
    29ca:	af 92       	push	r10
    29cc:	bf 92       	push	r11
    29ce:	cf 92       	push	r12
    29d0:	df 92       	push	r13
    29d2:	ef 92       	push	r14
    29d4:	ff 92       	push	r15
    29d6:	0f 93       	push	r16
    29d8:	1f 93       	push	r17
    29da:	cf 93       	push	r28
    29dc:	df 93       	push	r29
    29de:	cd b7       	in	r28, 0x3d	; 61
    29e0:	de b7       	in	r29, 0x3e	; 62
    29e2:	2b 97       	sbiw	r28, 0x0b	; 11
    29e4:	cd bf       	out	0x3d, r28	; 61
    29e6:	de bf       	out	0x3e, r29	; 62
    29e8:	6c 01       	movw	r12, r24
    29ea:	7b 01       	movw	r14, r22
    29ec:	8a 01       	movw	r16, r20
    29ee:	fc 01       	movw	r30, r24
    29f0:	16 82       	std	Z+6, r1	; 0x06
    29f2:	17 82       	std	Z+7, r1	; 0x07
    29f4:	83 81       	ldd	r24, Z+3	; 0x03
    29f6:	81 ff       	sbrs	r24, 1
    29f8:	bf c1       	rjmp	.+894    	; 0x2d78 <vfprintf+0x3be>
    29fa:	ce 01       	movw	r24, r28
    29fc:	01 96       	adiw	r24, 0x01	; 1
    29fe:	3c 01       	movw	r6, r24
    2a00:	f6 01       	movw	r30, r12
    2a02:	93 81       	ldd	r25, Z+3	; 0x03
    2a04:	f7 01       	movw	r30, r14
    2a06:	93 fd       	sbrc	r25, 3
    2a08:	85 91       	lpm	r24, Z+
    2a0a:	93 ff       	sbrs	r25, 3
    2a0c:	81 91       	ld	r24, Z+
    2a0e:	7f 01       	movw	r14, r30
    2a10:	88 23       	and	r24, r24
    2a12:	09 f4       	brne	.+2      	; 0x2a16 <vfprintf+0x5c>
    2a14:	ad c1       	rjmp	.+858    	; 0x2d70 <vfprintf+0x3b6>
    2a16:	85 32       	cpi	r24, 0x25	; 37
    2a18:	39 f4       	brne	.+14     	; 0x2a28 <vfprintf+0x6e>
    2a1a:	93 fd       	sbrc	r25, 3
    2a1c:	85 91       	lpm	r24, Z+
    2a1e:	93 ff       	sbrs	r25, 3
    2a20:	81 91       	ld	r24, Z+
    2a22:	7f 01       	movw	r14, r30
    2a24:	85 32       	cpi	r24, 0x25	; 37
    2a26:	21 f4       	brne	.+8      	; 0x2a30 <vfprintf+0x76>
    2a28:	b6 01       	movw	r22, r12
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	e3 d1       	rcall	.+966    	; 0x2df4 <fputc>
    2a2e:	e8 cf       	rjmp	.-48     	; 0x2a00 <vfprintf+0x46>
    2a30:	91 2c       	mov	r9, r1
    2a32:	21 2c       	mov	r2, r1
    2a34:	31 2c       	mov	r3, r1
    2a36:	ff e1       	ldi	r31, 0x1F	; 31
    2a38:	f3 15       	cp	r31, r3
    2a3a:	d8 f0       	brcs	.+54     	; 0x2a72 <vfprintf+0xb8>
    2a3c:	8b 32       	cpi	r24, 0x2B	; 43
    2a3e:	79 f0       	breq	.+30     	; 0x2a5e <vfprintf+0xa4>
    2a40:	38 f4       	brcc	.+14     	; 0x2a50 <vfprintf+0x96>
    2a42:	80 32       	cpi	r24, 0x20	; 32
    2a44:	79 f0       	breq	.+30     	; 0x2a64 <vfprintf+0xaa>
    2a46:	83 32       	cpi	r24, 0x23	; 35
    2a48:	a1 f4       	brne	.+40     	; 0x2a72 <vfprintf+0xb8>
    2a4a:	23 2d       	mov	r18, r3
    2a4c:	20 61       	ori	r18, 0x10	; 16
    2a4e:	1d c0       	rjmp	.+58     	; 0x2a8a <vfprintf+0xd0>
    2a50:	8d 32       	cpi	r24, 0x2D	; 45
    2a52:	61 f0       	breq	.+24     	; 0x2a6c <vfprintf+0xb2>
    2a54:	80 33       	cpi	r24, 0x30	; 48
    2a56:	69 f4       	brne	.+26     	; 0x2a72 <vfprintf+0xb8>
    2a58:	23 2d       	mov	r18, r3
    2a5a:	21 60       	ori	r18, 0x01	; 1
    2a5c:	16 c0       	rjmp	.+44     	; 0x2a8a <vfprintf+0xd0>
    2a5e:	83 2d       	mov	r24, r3
    2a60:	82 60       	ori	r24, 0x02	; 2
    2a62:	38 2e       	mov	r3, r24
    2a64:	e3 2d       	mov	r30, r3
    2a66:	e4 60       	ori	r30, 0x04	; 4
    2a68:	3e 2e       	mov	r3, r30
    2a6a:	2a c0       	rjmp	.+84     	; 0x2ac0 <vfprintf+0x106>
    2a6c:	f3 2d       	mov	r31, r3
    2a6e:	f8 60       	ori	r31, 0x08	; 8
    2a70:	1d c0       	rjmp	.+58     	; 0x2aac <vfprintf+0xf2>
    2a72:	37 fc       	sbrc	r3, 7
    2a74:	2d c0       	rjmp	.+90     	; 0x2ad0 <vfprintf+0x116>
    2a76:	20 ed       	ldi	r18, 0xD0	; 208
    2a78:	28 0f       	add	r18, r24
    2a7a:	2a 30       	cpi	r18, 0x0A	; 10
    2a7c:	40 f0       	brcs	.+16     	; 0x2a8e <vfprintf+0xd4>
    2a7e:	8e 32       	cpi	r24, 0x2E	; 46
    2a80:	b9 f4       	brne	.+46     	; 0x2ab0 <vfprintf+0xf6>
    2a82:	36 fc       	sbrc	r3, 6
    2a84:	75 c1       	rjmp	.+746    	; 0x2d70 <vfprintf+0x3b6>
    2a86:	23 2d       	mov	r18, r3
    2a88:	20 64       	ori	r18, 0x40	; 64
    2a8a:	32 2e       	mov	r3, r18
    2a8c:	19 c0       	rjmp	.+50     	; 0x2ac0 <vfprintf+0x106>
    2a8e:	36 fe       	sbrs	r3, 6
    2a90:	06 c0       	rjmp	.+12     	; 0x2a9e <vfprintf+0xe4>
    2a92:	8a e0       	ldi	r24, 0x0A	; 10
    2a94:	98 9e       	mul	r9, r24
    2a96:	20 0d       	add	r18, r0
    2a98:	11 24       	eor	r1, r1
    2a9a:	92 2e       	mov	r9, r18
    2a9c:	11 c0       	rjmp	.+34     	; 0x2ac0 <vfprintf+0x106>
    2a9e:	ea e0       	ldi	r30, 0x0A	; 10
    2aa0:	2e 9e       	mul	r2, r30
    2aa2:	20 0d       	add	r18, r0
    2aa4:	11 24       	eor	r1, r1
    2aa6:	22 2e       	mov	r2, r18
    2aa8:	f3 2d       	mov	r31, r3
    2aaa:	f0 62       	ori	r31, 0x20	; 32
    2aac:	3f 2e       	mov	r3, r31
    2aae:	08 c0       	rjmp	.+16     	; 0x2ac0 <vfprintf+0x106>
    2ab0:	8c 36       	cpi	r24, 0x6C	; 108
    2ab2:	21 f4       	brne	.+8      	; 0x2abc <vfprintf+0x102>
    2ab4:	83 2d       	mov	r24, r3
    2ab6:	80 68       	ori	r24, 0x80	; 128
    2ab8:	38 2e       	mov	r3, r24
    2aba:	02 c0       	rjmp	.+4      	; 0x2ac0 <vfprintf+0x106>
    2abc:	88 36       	cpi	r24, 0x68	; 104
    2abe:	41 f4       	brne	.+16     	; 0x2ad0 <vfprintf+0x116>
    2ac0:	f7 01       	movw	r30, r14
    2ac2:	93 fd       	sbrc	r25, 3
    2ac4:	85 91       	lpm	r24, Z+
    2ac6:	93 ff       	sbrs	r25, 3
    2ac8:	81 91       	ld	r24, Z+
    2aca:	7f 01       	movw	r14, r30
    2acc:	81 11       	cpse	r24, r1
    2ace:	b3 cf       	rjmp	.-154    	; 0x2a36 <vfprintf+0x7c>
    2ad0:	98 2f       	mov	r25, r24
    2ad2:	9f 7d       	andi	r25, 0xDF	; 223
    2ad4:	95 54       	subi	r25, 0x45	; 69
    2ad6:	93 30       	cpi	r25, 0x03	; 3
    2ad8:	28 f4       	brcc	.+10     	; 0x2ae4 <vfprintf+0x12a>
    2ada:	0c 5f       	subi	r16, 0xFC	; 252
    2adc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ade:	9f e3       	ldi	r25, 0x3F	; 63
    2ae0:	99 83       	std	Y+1, r25	; 0x01
    2ae2:	0d c0       	rjmp	.+26     	; 0x2afe <vfprintf+0x144>
    2ae4:	83 36       	cpi	r24, 0x63	; 99
    2ae6:	31 f0       	breq	.+12     	; 0x2af4 <vfprintf+0x13a>
    2ae8:	83 37       	cpi	r24, 0x73	; 115
    2aea:	71 f0       	breq	.+28     	; 0x2b08 <vfprintf+0x14e>
    2aec:	83 35       	cpi	r24, 0x53	; 83
    2aee:	09 f0       	breq	.+2      	; 0x2af2 <vfprintf+0x138>
    2af0:	55 c0       	rjmp	.+170    	; 0x2b9c <vfprintf+0x1e2>
    2af2:	20 c0       	rjmp	.+64     	; 0x2b34 <vfprintf+0x17a>
    2af4:	f8 01       	movw	r30, r16
    2af6:	80 81       	ld	r24, Z
    2af8:	89 83       	std	Y+1, r24	; 0x01
    2afa:	0e 5f       	subi	r16, 0xFE	; 254
    2afc:	1f 4f       	sbci	r17, 0xFF	; 255
    2afe:	88 24       	eor	r8, r8
    2b00:	83 94       	inc	r8
    2b02:	91 2c       	mov	r9, r1
    2b04:	53 01       	movw	r10, r6
    2b06:	12 c0       	rjmp	.+36     	; 0x2b2c <vfprintf+0x172>
    2b08:	28 01       	movw	r4, r16
    2b0a:	f2 e0       	ldi	r31, 0x02	; 2
    2b0c:	4f 0e       	add	r4, r31
    2b0e:	51 1c       	adc	r5, r1
    2b10:	f8 01       	movw	r30, r16
    2b12:	a0 80       	ld	r10, Z
    2b14:	b1 80       	ldd	r11, Z+1	; 0x01
    2b16:	36 fe       	sbrs	r3, 6
    2b18:	03 c0       	rjmp	.+6      	; 0x2b20 <vfprintf+0x166>
    2b1a:	69 2d       	mov	r22, r9
    2b1c:	70 e0       	ldi	r23, 0x00	; 0
    2b1e:	02 c0       	rjmp	.+4      	; 0x2b24 <vfprintf+0x16a>
    2b20:	6f ef       	ldi	r22, 0xFF	; 255
    2b22:	7f ef       	ldi	r23, 0xFF	; 255
    2b24:	c5 01       	movw	r24, r10
    2b26:	4b d1       	rcall	.+662    	; 0x2dbe <strnlen>
    2b28:	4c 01       	movw	r8, r24
    2b2a:	82 01       	movw	r16, r4
    2b2c:	f3 2d       	mov	r31, r3
    2b2e:	ff 77       	andi	r31, 0x7F	; 127
    2b30:	3f 2e       	mov	r3, r31
    2b32:	15 c0       	rjmp	.+42     	; 0x2b5e <vfprintf+0x1a4>
    2b34:	28 01       	movw	r4, r16
    2b36:	22 e0       	ldi	r18, 0x02	; 2
    2b38:	42 0e       	add	r4, r18
    2b3a:	51 1c       	adc	r5, r1
    2b3c:	f8 01       	movw	r30, r16
    2b3e:	a0 80       	ld	r10, Z
    2b40:	b1 80       	ldd	r11, Z+1	; 0x01
    2b42:	36 fe       	sbrs	r3, 6
    2b44:	03 c0       	rjmp	.+6      	; 0x2b4c <vfprintf+0x192>
    2b46:	69 2d       	mov	r22, r9
    2b48:	70 e0       	ldi	r23, 0x00	; 0
    2b4a:	02 c0       	rjmp	.+4      	; 0x2b50 <vfprintf+0x196>
    2b4c:	6f ef       	ldi	r22, 0xFF	; 255
    2b4e:	7f ef       	ldi	r23, 0xFF	; 255
    2b50:	c5 01       	movw	r24, r10
    2b52:	2a d1       	rcall	.+596    	; 0x2da8 <strnlen_P>
    2b54:	4c 01       	movw	r8, r24
    2b56:	f3 2d       	mov	r31, r3
    2b58:	f0 68       	ori	r31, 0x80	; 128
    2b5a:	3f 2e       	mov	r3, r31
    2b5c:	82 01       	movw	r16, r4
    2b5e:	33 fc       	sbrc	r3, 3
    2b60:	19 c0       	rjmp	.+50     	; 0x2b94 <vfprintf+0x1da>
    2b62:	82 2d       	mov	r24, r2
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	88 16       	cp	r8, r24
    2b68:	99 06       	cpc	r9, r25
    2b6a:	a0 f4       	brcc	.+40     	; 0x2b94 <vfprintf+0x1da>
    2b6c:	b6 01       	movw	r22, r12
    2b6e:	80 e2       	ldi	r24, 0x20	; 32
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	40 d1       	rcall	.+640    	; 0x2df4 <fputc>
    2b74:	2a 94       	dec	r2
    2b76:	f5 cf       	rjmp	.-22     	; 0x2b62 <vfprintf+0x1a8>
    2b78:	f5 01       	movw	r30, r10
    2b7a:	37 fc       	sbrc	r3, 7
    2b7c:	85 91       	lpm	r24, Z+
    2b7e:	37 fe       	sbrs	r3, 7
    2b80:	81 91       	ld	r24, Z+
    2b82:	5f 01       	movw	r10, r30
    2b84:	b6 01       	movw	r22, r12
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	35 d1       	rcall	.+618    	; 0x2df4 <fputc>
    2b8a:	21 10       	cpse	r2, r1
    2b8c:	2a 94       	dec	r2
    2b8e:	21 e0       	ldi	r18, 0x01	; 1
    2b90:	82 1a       	sub	r8, r18
    2b92:	91 08       	sbc	r9, r1
    2b94:	81 14       	cp	r8, r1
    2b96:	91 04       	cpc	r9, r1
    2b98:	79 f7       	brne	.-34     	; 0x2b78 <vfprintf+0x1be>
    2b9a:	e1 c0       	rjmp	.+450    	; 0x2d5e <vfprintf+0x3a4>
    2b9c:	84 36       	cpi	r24, 0x64	; 100
    2b9e:	11 f0       	breq	.+4      	; 0x2ba4 <vfprintf+0x1ea>
    2ba0:	89 36       	cpi	r24, 0x69	; 105
    2ba2:	39 f5       	brne	.+78     	; 0x2bf2 <vfprintf+0x238>
    2ba4:	f8 01       	movw	r30, r16
    2ba6:	37 fe       	sbrs	r3, 7
    2ba8:	07 c0       	rjmp	.+14     	; 0x2bb8 <vfprintf+0x1fe>
    2baa:	60 81       	ld	r22, Z
    2bac:	71 81       	ldd	r23, Z+1	; 0x01
    2bae:	82 81       	ldd	r24, Z+2	; 0x02
    2bb0:	93 81       	ldd	r25, Z+3	; 0x03
    2bb2:	0c 5f       	subi	r16, 0xFC	; 252
    2bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb6:	08 c0       	rjmp	.+16     	; 0x2bc8 <vfprintf+0x20e>
    2bb8:	60 81       	ld	r22, Z
    2bba:	71 81       	ldd	r23, Z+1	; 0x01
    2bbc:	07 2e       	mov	r0, r23
    2bbe:	00 0c       	add	r0, r0
    2bc0:	88 0b       	sbc	r24, r24
    2bc2:	99 0b       	sbc	r25, r25
    2bc4:	0e 5f       	subi	r16, 0xFE	; 254
    2bc6:	1f 4f       	sbci	r17, 0xFF	; 255
    2bc8:	f3 2d       	mov	r31, r3
    2bca:	ff 76       	andi	r31, 0x6F	; 111
    2bcc:	3f 2e       	mov	r3, r31
    2bce:	97 ff       	sbrs	r25, 7
    2bd0:	09 c0       	rjmp	.+18     	; 0x2be4 <vfprintf+0x22a>
    2bd2:	90 95       	com	r25
    2bd4:	80 95       	com	r24
    2bd6:	70 95       	com	r23
    2bd8:	61 95       	neg	r22
    2bda:	7f 4f       	sbci	r23, 0xFF	; 255
    2bdc:	8f 4f       	sbci	r24, 0xFF	; 255
    2bde:	9f 4f       	sbci	r25, 0xFF	; 255
    2be0:	f0 68       	ori	r31, 0x80	; 128
    2be2:	3f 2e       	mov	r3, r31
    2be4:	2a e0       	ldi	r18, 0x0A	; 10
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	a3 01       	movw	r20, r6
    2bea:	40 d1       	rcall	.+640    	; 0x2e6c <__ultoa_invert>
    2bec:	88 2e       	mov	r8, r24
    2bee:	86 18       	sub	r8, r6
    2bf0:	44 c0       	rjmp	.+136    	; 0x2c7a <vfprintf+0x2c0>
    2bf2:	85 37       	cpi	r24, 0x75	; 117
    2bf4:	31 f4       	brne	.+12     	; 0x2c02 <vfprintf+0x248>
    2bf6:	23 2d       	mov	r18, r3
    2bf8:	2f 7e       	andi	r18, 0xEF	; 239
    2bfa:	b2 2e       	mov	r11, r18
    2bfc:	2a e0       	ldi	r18, 0x0A	; 10
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	25 c0       	rjmp	.+74     	; 0x2c4c <vfprintf+0x292>
    2c02:	93 2d       	mov	r25, r3
    2c04:	99 7f       	andi	r25, 0xF9	; 249
    2c06:	b9 2e       	mov	r11, r25
    2c08:	8f 36       	cpi	r24, 0x6F	; 111
    2c0a:	c1 f0       	breq	.+48     	; 0x2c3c <vfprintf+0x282>
    2c0c:	18 f4       	brcc	.+6      	; 0x2c14 <vfprintf+0x25a>
    2c0e:	88 35       	cpi	r24, 0x58	; 88
    2c10:	79 f0       	breq	.+30     	; 0x2c30 <vfprintf+0x276>
    2c12:	ae c0       	rjmp	.+348    	; 0x2d70 <vfprintf+0x3b6>
    2c14:	80 37       	cpi	r24, 0x70	; 112
    2c16:	19 f0       	breq	.+6      	; 0x2c1e <vfprintf+0x264>
    2c18:	88 37       	cpi	r24, 0x78	; 120
    2c1a:	21 f0       	breq	.+8      	; 0x2c24 <vfprintf+0x26a>
    2c1c:	a9 c0       	rjmp	.+338    	; 0x2d70 <vfprintf+0x3b6>
    2c1e:	e9 2f       	mov	r30, r25
    2c20:	e0 61       	ori	r30, 0x10	; 16
    2c22:	be 2e       	mov	r11, r30
    2c24:	b4 fe       	sbrs	r11, 4
    2c26:	0d c0       	rjmp	.+26     	; 0x2c42 <vfprintf+0x288>
    2c28:	fb 2d       	mov	r31, r11
    2c2a:	f4 60       	ori	r31, 0x04	; 4
    2c2c:	bf 2e       	mov	r11, r31
    2c2e:	09 c0       	rjmp	.+18     	; 0x2c42 <vfprintf+0x288>
    2c30:	34 fe       	sbrs	r3, 4
    2c32:	0a c0       	rjmp	.+20     	; 0x2c48 <vfprintf+0x28e>
    2c34:	29 2f       	mov	r18, r25
    2c36:	26 60       	ori	r18, 0x06	; 6
    2c38:	b2 2e       	mov	r11, r18
    2c3a:	06 c0       	rjmp	.+12     	; 0x2c48 <vfprintf+0x28e>
    2c3c:	28 e0       	ldi	r18, 0x08	; 8
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	05 c0       	rjmp	.+10     	; 0x2c4c <vfprintf+0x292>
    2c42:	20 e1       	ldi	r18, 0x10	; 16
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	02 c0       	rjmp	.+4      	; 0x2c4c <vfprintf+0x292>
    2c48:	20 e1       	ldi	r18, 0x10	; 16
    2c4a:	32 e0       	ldi	r19, 0x02	; 2
    2c4c:	f8 01       	movw	r30, r16
    2c4e:	b7 fe       	sbrs	r11, 7
    2c50:	07 c0       	rjmp	.+14     	; 0x2c60 <vfprintf+0x2a6>
    2c52:	60 81       	ld	r22, Z
    2c54:	71 81       	ldd	r23, Z+1	; 0x01
    2c56:	82 81       	ldd	r24, Z+2	; 0x02
    2c58:	93 81       	ldd	r25, Z+3	; 0x03
    2c5a:	0c 5f       	subi	r16, 0xFC	; 252
    2c5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c5e:	06 c0       	rjmp	.+12     	; 0x2c6c <vfprintf+0x2b2>
    2c60:	60 81       	ld	r22, Z
    2c62:	71 81       	ldd	r23, Z+1	; 0x01
    2c64:	80 e0       	ldi	r24, 0x00	; 0
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	0e 5f       	subi	r16, 0xFE	; 254
    2c6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c6c:	a3 01       	movw	r20, r6
    2c6e:	fe d0       	rcall	.+508    	; 0x2e6c <__ultoa_invert>
    2c70:	88 2e       	mov	r8, r24
    2c72:	86 18       	sub	r8, r6
    2c74:	fb 2d       	mov	r31, r11
    2c76:	ff 77       	andi	r31, 0x7F	; 127
    2c78:	3f 2e       	mov	r3, r31
    2c7a:	36 fe       	sbrs	r3, 6
    2c7c:	0d c0       	rjmp	.+26     	; 0x2c98 <vfprintf+0x2de>
    2c7e:	23 2d       	mov	r18, r3
    2c80:	2e 7f       	andi	r18, 0xFE	; 254
    2c82:	a2 2e       	mov	r10, r18
    2c84:	89 14       	cp	r8, r9
    2c86:	58 f4       	brcc	.+22     	; 0x2c9e <vfprintf+0x2e4>
    2c88:	34 fe       	sbrs	r3, 4
    2c8a:	0b c0       	rjmp	.+22     	; 0x2ca2 <vfprintf+0x2e8>
    2c8c:	32 fc       	sbrc	r3, 2
    2c8e:	09 c0       	rjmp	.+18     	; 0x2ca2 <vfprintf+0x2e8>
    2c90:	83 2d       	mov	r24, r3
    2c92:	8e 7e       	andi	r24, 0xEE	; 238
    2c94:	a8 2e       	mov	r10, r24
    2c96:	05 c0       	rjmp	.+10     	; 0x2ca2 <vfprintf+0x2e8>
    2c98:	b8 2c       	mov	r11, r8
    2c9a:	a3 2c       	mov	r10, r3
    2c9c:	03 c0       	rjmp	.+6      	; 0x2ca4 <vfprintf+0x2ea>
    2c9e:	b8 2c       	mov	r11, r8
    2ca0:	01 c0       	rjmp	.+2      	; 0x2ca4 <vfprintf+0x2ea>
    2ca2:	b9 2c       	mov	r11, r9
    2ca4:	a4 fe       	sbrs	r10, 4
    2ca6:	0f c0       	rjmp	.+30     	; 0x2cc6 <vfprintf+0x30c>
    2ca8:	fe 01       	movw	r30, r28
    2caa:	e8 0d       	add	r30, r8
    2cac:	f1 1d       	adc	r31, r1
    2cae:	80 81       	ld	r24, Z
    2cb0:	80 33       	cpi	r24, 0x30	; 48
    2cb2:	21 f4       	brne	.+8      	; 0x2cbc <vfprintf+0x302>
    2cb4:	9a 2d       	mov	r25, r10
    2cb6:	99 7e       	andi	r25, 0xE9	; 233
    2cb8:	a9 2e       	mov	r10, r25
    2cba:	09 c0       	rjmp	.+18     	; 0x2cce <vfprintf+0x314>
    2cbc:	a2 fe       	sbrs	r10, 2
    2cbe:	06 c0       	rjmp	.+12     	; 0x2ccc <vfprintf+0x312>
    2cc0:	b3 94       	inc	r11
    2cc2:	b3 94       	inc	r11
    2cc4:	04 c0       	rjmp	.+8      	; 0x2cce <vfprintf+0x314>
    2cc6:	8a 2d       	mov	r24, r10
    2cc8:	86 78       	andi	r24, 0x86	; 134
    2cca:	09 f0       	breq	.+2      	; 0x2cce <vfprintf+0x314>
    2ccc:	b3 94       	inc	r11
    2cce:	a3 fc       	sbrc	r10, 3
    2cd0:	10 c0       	rjmp	.+32     	; 0x2cf2 <vfprintf+0x338>
    2cd2:	a0 fe       	sbrs	r10, 0
    2cd4:	06 c0       	rjmp	.+12     	; 0x2ce2 <vfprintf+0x328>
    2cd6:	b2 14       	cp	r11, r2
    2cd8:	80 f4       	brcc	.+32     	; 0x2cfa <vfprintf+0x340>
    2cda:	28 0c       	add	r2, r8
    2cdc:	92 2c       	mov	r9, r2
    2cde:	9b 18       	sub	r9, r11
    2ce0:	0d c0       	rjmp	.+26     	; 0x2cfc <vfprintf+0x342>
    2ce2:	b2 14       	cp	r11, r2
    2ce4:	58 f4       	brcc	.+22     	; 0x2cfc <vfprintf+0x342>
    2ce6:	b6 01       	movw	r22, r12
    2ce8:	80 e2       	ldi	r24, 0x20	; 32
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	83 d0       	rcall	.+262    	; 0x2df4 <fputc>
    2cee:	b3 94       	inc	r11
    2cf0:	f8 cf       	rjmp	.-16     	; 0x2ce2 <vfprintf+0x328>
    2cf2:	b2 14       	cp	r11, r2
    2cf4:	18 f4       	brcc	.+6      	; 0x2cfc <vfprintf+0x342>
    2cf6:	2b 18       	sub	r2, r11
    2cf8:	02 c0       	rjmp	.+4      	; 0x2cfe <vfprintf+0x344>
    2cfa:	98 2c       	mov	r9, r8
    2cfc:	21 2c       	mov	r2, r1
    2cfe:	a4 fe       	sbrs	r10, 4
    2d00:	0f c0       	rjmp	.+30     	; 0x2d20 <vfprintf+0x366>
    2d02:	b6 01       	movw	r22, r12
    2d04:	80 e3       	ldi	r24, 0x30	; 48
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	75 d0       	rcall	.+234    	; 0x2df4 <fputc>
    2d0a:	a2 fe       	sbrs	r10, 2
    2d0c:	16 c0       	rjmp	.+44     	; 0x2d3a <vfprintf+0x380>
    2d0e:	a1 fc       	sbrc	r10, 1
    2d10:	03 c0       	rjmp	.+6      	; 0x2d18 <vfprintf+0x35e>
    2d12:	88 e7       	ldi	r24, 0x78	; 120
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	02 c0       	rjmp	.+4      	; 0x2d1c <vfprintf+0x362>
    2d18:	88 e5       	ldi	r24, 0x58	; 88
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	b6 01       	movw	r22, r12
    2d1e:	0c c0       	rjmp	.+24     	; 0x2d38 <vfprintf+0x37e>
    2d20:	8a 2d       	mov	r24, r10
    2d22:	86 78       	andi	r24, 0x86	; 134
    2d24:	51 f0       	breq	.+20     	; 0x2d3a <vfprintf+0x380>
    2d26:	a1 fe       	sbrs	r10, 1
    2d28:	02 c0       	rjmp	.+4      	; 0x2d2e <vfprintf+0x374>
    2d2a:	8b e2       	ldi	r24, 0x2B	; 43
    2d2c:	01 c0       	rjmp	.+2      	; 0x2d30 <vfprintf+0x376>
    2d2e:	80 e2       	ldi	r24, 0x20	; 32
    2d30:	a7 fc       	sbrc	r10, 7
    2d32:	8d e2       	ldi	r24, 0x2D	; 45
    2d34:	b6 01       	movw	r22, r12
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	5d d0       	rcall	.+186    	; 0x2df4 <fputc>
    2d3a:	89 14       	cp	r8, r9
    2d3c:	30 f4       	brcc	.+12     	; 0x2d4a <vfprintf+0x390>
    2d3e:	b6 01       	movw	r22, r12
    2d40:	80 e3       	ldi	r24, 0x30	; 48
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	57 d0       	rcall	.+174    	; 0x2df4 <fputc>
    2d46:	9a 94       	dec	r9
    2d48:	f8 cf       	rjmp	.-16     	; 0x2d3a <vfprintf+0x380>
    2d4a:	8a 94       	dec	r8
    2d4c:	f3 01       	movw	r30, r6
    2d4e:	e8 0d       	add	r30, r8
    2d50:	f1 1d       	adc	r31, r1
    2d52:	80 81       	ld	r24, Z
    2d54:	b6 01       	movw	r22, r12
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	4d d0       	rcall	.+154    	; 0x2df4 <fputc>
    2d5a:	81 10       	cpse	r8, r1
    2d5c:	f6 cf       	rjmp	.-20     	; 0x2d4a <vfprintf+0x390>
    2d5e:	22 20       	and	r2, r2
    2d60:	09 f4       	brne	.+2      	; 0x2d64 <vfprintf+0x3aa>
    2d62:	4e ce       	rjmp	.-868    	; 0x2a00 <vfprintf+0x46>
    2d64:	b6 01       	movw	r22, r12
    2d66:	80 e2       	ldi	r24, 0x20	; 32
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	44 d0       	rcall	.+136    	; 0x2df4 <fputc>
    2d6c:	2a 94       	dec	r2
    2d6e:	f7 cf       	rjmp	.-18     	; 0x2d5e <vfprintf+0x3a4>
    2d70:	f6 01       	movw	r30, r12
    2d72:	86 81       	ldd	r24, Z+6	; 0x06
    2d74:	97 81       	ldd	r25, Z+7	; 0x07
    2d76:	02 c0       	rjmp	.+4      	; 0x2d7c <vfprintf+0x3c2>
    2d78:	8f ef       	ldi	r24, 0xFF	; 255
    2d7a:	9f ef       	ldi	r25, 0xFF	; 255
    2d7c:	2b 96       	adiw	r28, 0x0b	; 11
    2d7e:	cd bf       	out	0x3d, r28	; 61
    2d80:	de bf       	out	0x3e, r29	; 62
    2d82:	df 91       	pop	r29
    2d84:	cf 91       	pop	r28
    2d86:	1f 91       	pop	r17
    2d88:	0f 91       	pop	r16
    2d8a:	ff 90       	pop	r15
    2d8c:	ef 90       	pop	r14
    2d8e:	df 90       	pop	r13
    2d90:	cf 90       	pop	r12
    2d92:	bf 90       	pop	r11
    2d94:	af 90       	pop	r10
    2d96:	9f 90       	pop	r9
    2d98:	8f 90       	pop	r8
    2d9a:	7f 90       	pop	r7
    2d9c:	6f 90       	pop	r6
    2d9e:	5f 90       	pop	r5
    2da0:	4f 90       	pop	r4
    2da2:	3f 90       	pop	r3
    2da4:	2f 90       	pop	r2
    2da6:	08 95       	ret

00002da8 <strnlen_P>:
    2da8:	fc 01       	movw	r30, r24
    2daa:	05 90       	lpm	r0, Z+
    2dac:	61 50       	subi	r22, 0x01	; 1
    2dae:	70 40       	sbci	r23, 0x00	; 0
    2db0:	01 10       	cpse	r0, r1
    2db2:	d8 f7       	brcc	.-10     	; 0x2daa <strnlen_P+0x2>
    2db4:	80 95       	com	r24
    2db6:	90 95       	com	r25
    2db8:	8e 0f       	add	r24, r30
    2dba:	9f 1f       	adc	r25, r31
    2dbc:	08 95       	ret

00002dbe <strnlen>:
    2dbe:	fc 01       	movw	r30, r24
    2dc0:	61 50       	subi	r22, 0x01	; 1
    2dc2:	70 40       	sbci	r23, 0x00	; 0
    2dc4:	01 90       	ld	r0, Z+
    2dc6:	01 10       	cpse	r0, r1
    2dc8:	d8 f7       	brcc	.-10     	; 0x2dc0 <strnlen+0x2>
    2dca:	80 95       	com	r24
    2dcc:	90 95       	com	r25
    2dce:	8e 0f       	add	r24, r30
    2dd0:	9f 1f       	adc	r25, r31
    2dd2:	08 95       	ret

00002dd4 <strrev>:
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	fc 01       	movw	r30, r24
    2dd8:	67 2f       	mov	r22, r23
    2dda:	71 91       	ld	r23, Z+
    2ddc:	77 23       	and	r23, r23
    2dde:	e1 f7       	brne	.-8      	; 0x2dd8 <strrev+0x4>
    2de0:	32 97       	sbiw	r30, 0x02	; 2
    2de2:	04 c0       	rjmp	.+8      	; 0x2dec <strrev+0x18>
    2de4:	7c 91       	ld	r23, X
    2de6:	6d 93       	st	X+, r22
    2de8:	70 83       	st	Z, r23
    2dea:	62 91       	ld	r22, -Z
    2dec:	ae 17       	cp	r26, r30
    2dee:	bf 07       	cpc	r27, r31
    2df0:	c8 f3       	brcs	.-14     	; 0x2de4 <strrev+0x10>
    2df2:	08 95       	ret

00002df4 <fputc>:
    2df4:	0f 93       	push	r16
    2df6:	1f 93       	push	r17
    2df8:	cf 93       	push	r28
    2dfa:	df 93       	push	r29
    2dfc:	fb 01       	movw	r30, r22
    2dfe:	23 81       	ldd	r18, Z+3	; 0x03
    2e00:	21 fd       	sbrc	r18, 1
    2e02:	03 c0       	rjmp	.+6      	; 0x2e0a <fputc+0x16>
    2e04:	8f ef       	ldi	r24, 0xFF	; 255
    2e06:	9f ef       	ldi	r25, 0xFF	; 255
    2e08:	2c c0       	rjmp	.+88     	; 0x2e62 <fputc+0x6e>
    2e0a:	22 ff       	sbrs	r18, 2
    2e0c:	16 c0       	rjmp	.+44     	; 0x2e3a <fputc+0x46>
    2e0e:	46 81       	ldd	r20, Z+6	; 0x06
    2e10:	57 81       	ldd	r21, Z+7	; 0x07
    2e12:	24 81       	ldd	r18, Z+4	; 0x04
    2e14:	35 81       	ldd	r19, Z+5	; 0x05
    2e16:	42 17       	cp	r20, r18
    2e18:	53 07       	cpc	r21, r19
    2e1a:	44 f4       	brge	.+16     	; 0x2e2c <fputc+0x38>
    2e1c:	a0 81       	ld	r26, Z
    2e1e:	b1 81       	ldd	r27, Z+1	; 0x01
    2e20:	9d 01       	movw	r18, r26
    2e22:	2f 5f       	subi	r18, 0xFF	; 255
    2e24:	3f 4f       	sbci	r19, 0xFF	; 255
    2e26:	20 83       	st	Z, r18
    2e28:	31 83       	std	Z+1, r19	; 0x01
    2e2a:	8c 93       	st	X, r24
    2e2c:	26 81       	ldd	r18, Z+6	; 0x06
    2e2e:	37 81       	ldd	r19, Z+7	; 0x07
    2e30:	2f 5f       	subi	r18, 0xFF	; 255
    2e32:	3f 4f       	sbci	r19, 0xFF	; 255
    2e34:	26 83       	std	Z+6, r18	; 0x06
    2e36:	37 83       	std	Z+7, r19	; 0x07
    2e38:	14 c0       	rjmp	.+40     	; 0x2e62 <fputc+0x6e>
    2e3a:	8b 01       	movw	r16, r22
    2e3c:	ec 01       	movw	r28, r24
    2e3e:	fb 01       	movw	r30, r22
    2e40:	00 84       	ldd	r0, Z+8	; 0x08
    2e42:	f1 85       	ldd	r31, Z+9	; 0x09
    2e44:	e0 2d       	mov	r30, r0
    2e46:	19 95       	eicall
    2e48:	89 2b       	or	r24, r25
    2e4a:	e1 f6       	brne	.-72     	; 0x2e04 <fputc+0x10>
    2e4c:	d8 01       	movw	r26, r16
    2e4e:	16 96       	adiw	r26, 0x06	; 6
    2e50:	8d 91       	ld	r24, X+
    2e52:	9c 91       	ld	r25, X
    2e54:	17 97       	sbiw	r26, 0x07	; 7
    2e56:	01 96       	adiw	r24, 0x01	; 1
    2e58:	16 96       	adiw	r26, 0x06	; 6
    2e5a:	8d 93       	st	X+, r24
    2e5c:	9c 93       	st	X, r25
    2e5e:	17 97       	sbiw	r26, 0x07	; 7
    2e60:	ce 01       	movw	r24, r28
    2e62:	df 91       	pop	r29
    2e64:	cf 91       	pop	r28
    2e66:	1f 91       	pop	r17
    2e68:	0f 91       	pop	r16
    2e6a:	08 95       	ret

00002e6c <__ultoa_invert>:
    2e6c:	fa 01       	movw	r30, r20
    2e6e:	aa 27       	eor	r26, r26
    2e70:	28 30       	cpi	r18, 0x08	; 8
    2e72:	51 f1       	breq	.+84     	; 0x2ec8 <__ultoa_invert+0x5c>
    2e74:	20 31       	cpi	r18, 0x10	; 16
    2e76:	81 f1       	breq	.+96     	; 0x2ed8 <__ultoa_invert+0x6c>
    2e78:	e8 94       	clt
    2e7a:	6f 93       	push	r22
    2e7c:	6e 7f       	andi	r22, 0xFE	; 254
    2e7e:	6e 5f       	subi	r22, 0xFE	; 254
    2e80:	7f 4f       	sbci	r23, 0xFF	; 255
    2e82:	8f 4f       	sbci	r24, 0xFF	; 255
    2e84:	9f 4f       	sbci	r25, 0xFF	; 255
    2e86:	af 4f       	sbci	r26, 0xFF	; 255
    2e88:	b1 e0       	ldi	r27, 0x01	; 1
    2e8a:	3e d0       	rcall	.+124    	; 0x2f08 <__ultoa_invert+0x9c>
    2e8c:	b4 e0       	ldi	r27, 0x04	; 4
    2e8e:	3c d0       	rcall	.+120    	; 0x2f08 <__ultoa_invert+0x9c>
    2e90:	67 0f       	add	r22, r23
    2e92:	78 1f       	adc	r23, r24
    2e94:	89 1f       	adc	r24, r25
    2e96:	9a 1f       	adc	r25, r26
    2e98:	a1 1d       	adc	r26, r1
    2e9a:	68 0f       	add	r22, r24
    2e9c:	79 1f       	adc	r23, r25
    2e9e:	8a 1f       	adc	r24, r26
    2ea0:	91 1d       	adc	r25, r1
    2ea2:	a1 1d       	adc	r26, r1
    2ea4:	6a 0f       	add	r22, r26
    2ea6:	71 1d       	adc	r23, r1
    2ea8:	81 1d       	adc	r24, r1
    2eaa:	91 1d       	adc	r25, r1
    2eac:	a1 1d       	adc	r26, r1
    2eae:	20 d0       	rcall	.+64     	; 0x2ef0 <__ultoa_invert+0x84>
    2eb0:	09 f4       	brne	.+2      	; 0x2eb4 <__ultoa_invert+0x48>
    2eb2:	68 94       	set
    2eb4:	3f 91       	pop	r19
    2eb6:	2a e0       	ldi	r18, 0x0A	; 10
    2eb8:	26 9f       	mul	r18, r22
    2eba:	11 24       	eor	r1, r1
    2ebc:	30 19       	sub	r19, r0
    2ebe:	30 5d       	subi	r19, 0xD0	; 208
    2ec0:	31 93       	st	Z+, r19
    2ec2:	de f6       	brtc	.-74     	; 0x2e7a <__ultoa_invert+0xe>
    2ec4:	cf 01       	movw	r24, r30
    2ec6:	08 95       	ret
    2ec8:	46 2f       	mov	r20, r22
    2eca:	47 70       	andi	r20, 0x07	; 7
    2ecc:	40 5d       	subi	r20, 0xD0	; 208
    2ece:	41 93       	st	Z+, r20
    2ed0:	b3 e0       	ldi	r27, 0x03	; 3
    2ed2:	0f d0       	rcall	.+30     	; 0x2ef2 <__ultoa_invert+0x86>
    2ed4:	c9 f7       	brne	.-14     	; 0x2ec8 <__ultoa_invert+0x5c>
    2ed6:	f6 cf       	rjmp	.-20     	; 0x2ec4 <__ultoa_invert+0x58>
    2ed8:	46 2f       	mov	r20, r22
    2eda:	4f 70       	andi	r20, 0x0F	; 15
    2edc:	40 5d       	subi	r20, 0xD0	; 208
    2ede:	4a 33       	cpi	r20, 0x3A	; 58
    2ee0:	18 f0       	brcs	.+6      	; 0x2ee8 <__ultoa_invert+0x7c>
    2ee2:	49 5d       	subi	r20, 0xD9	; 217
    2ee4:	31 fd       	sbrc	r19, 1
    2ee6:	40 52       	subi	r20, 0x20	; 32
    2ee8:	41 93       	st	Z+, r20
    2eea:	02 d0       	rcall	.+4      	; 0x2ef0 <__ultoa_invert+0x84>
    2eec:	a9 f7       	brne	.-22     	; 0x2ed8 <__ultoa_invert+0x6c>
    2eee:	ea cf       	rjmp	.-44     	; 0x2ec4 <__ultoa_invert+0x58>
    2ef0:	b4 e0       	ldi	r27, 0x04	; 4
    2ef2:	a6 95       	lsr	r26
    2ef4:	97 95       	ror	r25
    2ef6:	87 95       	ror	r24
    2ef8:	77 95       	ror	r23
    2efa:	67 95       	ror	r22
    2efc:	ba 95       	dec	r27
    2efe:	c9 f7       	brne	.-14     	; 0x2ef2 <__ultoa_invert+0x86>
    2f00:	00 97       	sbiw	r24, 0x00	; 0
    2f02:	61 05       	cpc	r22, r1
    2f04:	71 05       	cpc	r23, r1
    2f06:	08 95       	ret
    2f08:	9b 01       	movw	r18, r22
    2f0a:	ac 01       	movw	r20, r24
    2f0c:	0a 2e       	mov	r0, r26
    2f0e:	06 94       	lsr	r0
    2f10:	57 95       	ror	r21
    2f12:	47 95       	ror	r20
    2f14:	37 95       	ror	r19
    2f16:	27 95       	ror	r18
    2f18:	ba 95       	dec	r27
    2f1a:	c9 f7       	brne	.-14     	; 0x2f0e <__ultoa_invert+0xa2>
    2f1c:	62 0f       	add	r22, r18
    2f1e:	73 1f       	adc	r23, r19
    2f20:	84 1f       	adc	r24, r20
    2f22:	95 1f       	adc	r25, r21
    2f24:	a0 1d       	adc	r26, r0
    2f26:	08 95       	ret

00002f28 <_exit>:
    2f28:	f8 94       	cli

00002f2a <__stop_program>:
    2f2a:	ff cf       	rjmp	.-2      	; 0x2f2a <__stop_program>
