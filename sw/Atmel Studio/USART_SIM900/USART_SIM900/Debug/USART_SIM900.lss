
USART_SIM900.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000189e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013e  00802000  0000189e  00001932  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080213e  0080213e  00001a70  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a70  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001aa0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000280  00000000  00000000  00001ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b1b9  00000000  00000000  00001d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004dd4  00000000  00000000  0000cf19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003abe  00000000  00000000  00011ced  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008b0  00000000  00000000  000157ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00033707  00000000  00000000  0001605c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003802  00000000  00000000  00049763  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  0004cf65  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000ba6d  00000000  00000000  0004d1b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	07 c1       	rjmp	.+526    	; 0x210 <__ctors_end>
       2:	00 00       	nop
       4:	2b c1       	rjmp	.+598    	; 0x25c <__bad_interrupt>
       6:	00 00       	nop
       8:	29 c1       	rjmp	.+594    	; 0x25c <__bad_interrupt>
       a:	00 00       	nop
       c:	27 c1       	rjmp	.+590    	; 0x25c <__bad_interrupt>
       e:	00 00       	nop
      10:	25 c1       	rjmp	.+586    	; 0x25c <__bad_interrupt>
      12:	00 00       	nop
      14:	23 c1       	rjmp	.+582    	; 0x25c <__bad_interrupt>
      16:	00 00       	nop
      18:	21 c1       	rjmp	.+578    	; 0x25c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1f c1       	rjmp	.+574    	; 0x25c <__bad_interrupt>
      1e:	00 00       	nop
      20:	1d c1       	rjmp	.+570    	; 0x25c <__bad_interrupt>
      22:	00 00       	nop
      24:	1b c1       	rjmp	.+566    	; 0x25c <__bad_interrupt>
      26:	00 00       	nop
      28:	19 c1       	rjmp	.+562    	; 0x25c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	17 c1       	rjmp	.+558    	; 0x25c <__bad_interrupt>
      2e:	00 00       	nop
      30:	15 c1       	rjmp	.+554    	; 0x25c <__bad_interrupt>
      32:	00 00       	nop
      34:	13 c1       	rjmp	.+550    	; 0x25c <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 fa 08 	jmp	0x11f4	; 0x11f4 <__vector_14>
      3c:	0f c1       	rjmp	.+542    	; 0x25c <__bad_interrupt>
      3e:	00 00       	nop
      40:	0d c1       	rjmp	.+538    	; 0x25c <__bad_interrupt>
      42:	00 00       	nop
      44:	0b c1       	rjmp	.+534    	; 0x25c <__bad_interrupt>
      46:	00 00       	nop
      48:	09 c1       	rjmp	.+530    	; 0x25c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	07 c1       	rjmp	.+526    	; 0x25c <__bad_interrupt>
      4e:	00 00       	nop
      50:	05 c1       	rjmp	.+522    	; 0x25c <__bad_interrupt>
      52:	00 00       	nop
      54:	03 c1       	rjmp	.+518    	; 0x25c <__bad_interrupt>
      56:	00 00       	nop
      58:	01 c1       	rjmp	.+514    	; 0x25c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ff c0       	rjmp	.+510    	; 0x25c <__bad_interrupt>
      5e:	00 00       	nop
      60:	fd c0       	rjmp	.+506    	; 0x25c <__bad_interrupt>
      62:	00 00       	nop
      64:	fb c0       	rjmp	.+502    	; 0x25c <__bad_interrupt>
      66:	00 00       	nop
      68:	f9 c0       	rjmp	.+498    	; 0x25c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f7 c0       	rjmp	.+494    	; 0x25c <__bad_interrupt>
      6e:	00 00       	nop
      70:	f5 c0       	rjmp	.+490    	; 0x25c <__bad_interrupt>
      72:	00 00       	nop
      74:	f3 c0       	rjmp	.+486    	; 0x25c <__bad_interrupt>
      76:	00 00       	nop
      78:	f1 c0       	rjmp	.+482    	; 0x25c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ef c0       	rjmp	.+478    	; 0x25c <__bad_interrupt>
      7e:	00 00       	nop
      80:	ed c0       	rjmp	.+474    	; 0x25c <__bad_interrupt>
      82:	00 00       	nop
      84:	eb c0       	rjmp	.+470    	; 0x25c <__bad_interrupt>
      86:	00 00       	nop
      88:	e9 c0       	rjmp	.+466    	; 0x25c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e7 c0       	rjmp	.+462    	; 0x25c <__bad_interrupt>
      8e:	00 00       	nop
      90:	e5 c0       	rjmp	.+458    	; 0x25c <__bad_interrupt>
      92:	00 00       	nop
      94:	e3 c0       	rjmp	.+454    	; 0x25c <__bad_interrupt>
      96:	00 00       	nop
      98:	e1 c0       	rjmp	.+450    	; 0x25c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	df c0       	rjmp	.+446    	; 0x25c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	dd c0       	rjmp	.+442    	; 0x25c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	db c0       	rjmp	.+438    	; 0x25c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d9 c0       	rjmp	.+434    	; 0x25c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d7 c0       	rjmp	.+430    	; 0x25c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d5 c0       	rjmp	.+426    	; 0x25c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d3 c0       	rjmp	.+422    	; 0x25c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	d1 c0       	rjmp	.+418    	; 0x25c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	cf c0       	rjmp	.+414    	; 0x25c <__bad_interrupt>
      be:	00 00       	nop
      c0:	cd c0       	rjmp	.+410    	; 0x25c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	cb c0       	rjmp	.+406    	; 0x25c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c9 c0       	rjmp	.+402    	; 0x25c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c7 c0       	rjmp	.+398    	; 0x25c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c5 c0       	rjmp	.+394    	; 0x25c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	c3 c0       	rjmp	.+390    	; 0x25c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	c1 c0       	rjmp	.+386    	; 0x25c <__bad_interrupt>
      da:	00 00       	nop
      dc:	bf c0       	rjmp	.+382    	; 0x25c <__bad_interrupt>
      de:	00 00       	nop
      e0:	bd c0       	rjmp	.+378    	; 0x25c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	bb c0       	rjmp	.+374    	; 0x25c <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b9 c0       	rjmp	.+370    	; 0x25c <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b7 c0       	rjmp	.+366    	; 0x25c <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b5 c0       	rjmp	.+362    	; 0x25c <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b3 c0       	rjmp	.+358    	; 0x25c <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b1 c0       	rjmp	.+354    	; 0x25c <__bad_interrupt>
      fa:	00 00       	nop
      fc:	af c0       	rjmp	.+350    	; 0x25c <__bad_interrupt>
      fe:	00 00       	nop
     100:	ad c0       	rjmp	.+346    	; 0x25c <__bad_interrupt>
     102:	00 00       	nop
     104:	ab c0       	rjmp	.+342    	; 0x25c <__bad_interrupt>
     106:	00 00       	nop
     108:	a9 c0       	rjmp	.+338    	; 0x25c <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a7 c0       	rjmp	.+334    	; 0x25c <__bad_interrupt>
     10e:	00 00       	nop
     110:	a5 c0       	rjmp	.+330    	; 0x25c <__bad_interrupt>
     112:	00 00       	nop
     114:	a3 c0       	rjmp	.+326    	; 0x25c <__bad_interrupt>
     116:	00 00       	nop
     118:	a1 c0       	rjmp	.+322    	; 0x25c <__bad_interrupt>
     11a:	00 00       	nop
     11c:	9f c0       	rjmp	.+318    	; 0x25c <__bad_interrupt>
     11e:	00 00       	nop
     120:	9d c0       	rjmp	.+314    	; 0x25c <__bad_interrupt>
     122:	00 00       	nop
     124:	9b c0       	rjmp	.+310    	; 0x25c <__bad_interrupt>
     126:	00 00       	nop
     128:	99 c0       	rjmp	.+306    	; 0x25c <__bad_interrupt>
     12a:	00 00       	nop
     12c:	97 c0       	rjmp	.+302    	; 0x25c <__bad_interrupt>
     12e:	00 00       	nop
     130:	95 c0       	rjmp	.+298    	; 0x25c <__bad_interrupt>
     132:	00 00       	nop
     134:	93 c0       	rjmp	.+294    	; 0x25c <__bad_interrupt>
     136:	00 00       	nop
     138:	91 c0       	rjmp	.+290    	; 0x25c <__bad_interrupt>
     13a:	00 00       	nop
     13c:	8f c0       	rjmp	.+286    	; 0x25c <__bad_interrupt>
     13e:	00 00       	nop
     140:	8d c0       	rjmp	.+282    	; 0x25c <__bad_interrupt>
     142:	00 00       	nop
     144:	8b c0       	rjmp	.+278    	; 0x25c <__bad_interrupt>
     146:	00 00       	nop
     148:	89 c0       	rjmp	.+274    	; 0x25c <__bad_interrupt>
     14a:	00 00       	nop
     14c:	87 c0       	rjmp	.+270    	; 0x25c <__bad_interrupt>
     14e:	00 00       	nop
     150:	85 c0       	rjmp	.+266    	; 0x25c <__bad_interrupt>
     152:	00 00       	nop
     154:	83 c0       	rjmp	.+262    	; 0x25c <__bad_interrupt>
     156:	00 00       	nop
     158:	81 c0       	rjmp	.+258    	; 0x25c <__bad_interrupt>
     15a:	00 00       	nop
     15c:	7f c0       	rjmp	.+254    	; 0x25c <__bad_interrupt>
     15e:	00 00       	nop
     160:	7d c0       	rjmp	.+250    	; 0x25c <__bad_interrupt>
     162:	00 00       	nop
     164:	7b c0       	rjmp	.+246    	; 0x25c <__bad_interrupt>
     166:	00 00       	nop
     168:	79 c0       	rjmp	.+242    	; 0x25c <__bad_interrupt>
     16a:	00 00       	nop
     16c:	77 c0       	rjmp	.+238    	; 0x25c <__bad_interrupt>
     16e:	00 00       	nop
     170:	75 c0       	rjmp	.+234    	; 0x25c <__bad_interrupt>
     172:	00 00       	nop
     174:	73 c0       	rjmp	.+230    	; 0x25c <__bad_interrupt>
     176:	00 00       	nop
     178:	71 c0       	rjmp	.+226    	; 0x25c <__bad_interrupt>
     17a:	00 00       	nop
     17c:	6f c0       	rjmp	.+222    	; 0x25c <__bad_interrupt>
     17e:	00 00       	nop
     180:	6d c0       	rjmp	.+218    	; 0x25c <__bad_interrupt>
     182:	00 00       	nop
     184:	6b c0       	rjmp	.+214    	; 0x25c <__bad_interrupt>
     186:	00 00       	nop
     188:	69 c0       	rjmp	.+210    	; 0x25c <__bad_interrupt>
     18a:	00 00       	nop
     18c:	67 c0       	rjmp	.+206    	; 0x25c <__bad_interrupt>
     18e:	00 00       	nop
     190:	65 c0       	rjmp	.+202    	; 0x25c <__bad_interrupt>
     192:	00 00       	nop
     194:	63 c0       	rjmp	.+198    	; 0x25c <__bad_interrupt>
     196:	00 00       	nop
     198:	61 c0       	rjmp	.+194    	; 0x25c <__bad_interrupt>
     19a:	00 00       	nop
     19c:	5f c0       	rjmp	.+190    	; 0x25c <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5d c0       	rjmp	.+186    	; 0x25c <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	5b c0       	rjmp	.+182    	; 0x25c <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	59 c0       	rjmp	.+178    	; 0x25c <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	57 c0       	rjmp	.+174    	; 0x25c <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	55 c0       	rjmp	.+170    	; 0x25c <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	53 c0       	rjmp	.+166    	; 0x25c <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	51 c0       	rjmp	.+162    	; 0x25c <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	4f c0       	rjmp	.+158    	; 0x25c <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	4d c0       	rjmp	.+154    	; 0x25c <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	4b c0       	rjmp	.+150    	; 0x25c <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	49 c0       	rjmp	.+146    	; 0x25c <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	47 c0       	rjmp	.+142    	; 0x25c <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	45 c0       	rjmp	.+138    	; 0x25c <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	43 c0       	rjmp	.+134    	; 0x25c <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	41 c0       	rjmp	.+130    	; 0x25c <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	3f c0       	rjmp	.+126    	; 0x25c <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3d c0       	rjmp	.+122    	; 0x25c <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	3b c0       	rjmp	.+118    	; 0x25c <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	39 c0       	rjmp	.+114    	; 0x25c <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	37 c0       	rjmp	.+110    	; 0x25c <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	35 c0       	rjmp	.+106    	; 0x25c <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	33 c0       	rjmp	.+102    	; 0x25c <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	31 c0       	rjmp	.+98     	; 0x25c <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	63 09       	sbc	r22, r3
     1fe:	6f 09       	sbc	r22, r15
     200:	7b 09       	sbc	r23, r11
     202:	87 09       	sbc	r24, r7
     204:	5e 09       	sbc	r21, r14
     206:	aa 09       	sbc	r26, r10
     208:	b6 09       	sbc	r27, r6
     20a:	58 09       	sbc	r21, r8
     20c:	e4 09       	sbc	r30, r4
     20e:	02 0a       	sbc	r0, r18

00000210 <__ctors_end>:
     210:	11 24       	eor	r1, r1
     212:	1f be       	out	0x3f, r1	; 63
     214:	cf ef       	ldi	r28, 0xFF	; 255
     216:	cd bf       	out	0x3d, r28	; 61
     218:	df e3       	ldi	r29, 0x3F	; 63
     21a:	de bf       	out	0x3e, r29	; 62
     21c:	00 e0       	ldi	r16, 0x00	; 0
     21e:	0c bf       	out	0x3c, r16	; 60
     220:	18 be       	out	0x38, r1	; 56
     222:	19 be       	out	0x39, r1	; 57
     224:	1a be       	out	0x3a, r1	; 58
     226:	1b be       	out	0x3b, r1	; 59

00000228 <__do_copy_data>:
     228:	11 e2       	ldi	r17, 0x21	; 33
     22a:	a0 e0       	ldi	r26, 0x00	; 0
     22c:	b0 e2       	ldi	r27, 0x20	; 32
     22e:	ee e9       	ldi	r30, 0x9E	; 158
     230:	f8 e1       	ldi	r31, 0x18	; 24
     232:	00 e0       	ldi	r16, 0x00	; 0
     234:	0b bf       	out	0x3b, r16	; 59
     236:	02 c0       	rjmp	.+4      	; 0x23c <__do_copy_data+0x14>
     238:	07 90       	elpm	r0, Z+
     23a:	0d 92       	st	X+, r0
     23c:	ae 33       	cpi	r26, 0x3E	; 62
     23e:	b1 07       	cpc	r27, r17
     240:	d9 f7       	brne	.-10     	; 0x238 <__do_copy_data+0x10>
     242:	1b be       	out	0x3b, r1	; 59

00000244 <__do_clear_bss>:
     244:	21 e2       	ldi	r18, 0x21	; 33
     246:	ae e3       	ldi	r26, 0x3E	; 62
     248:	b1 e2       	ldi	r27, 0x21	; 33
     24a:	01 c0       	rjmp	.+2      	; 0x24e <.do_clear_bss_start>

0000024c <.do_clear_bss_loop>:
     24c:	1d 92       	st	X+, r1

0000024e <.do_clear_bss_start>:
     24e:	a1 34       	cpi	r26, 0x41	; 65
     250:	b2 07       	cpc	r27, r18
     252:	e1 f7       	brne	.-8      	; 0x24c <.do_clear_bss_loop>
     254:	0e 94 2f 09 	call	0x125e	; 0x125e <main>
     258:	0c 94 4d 0c 	jmp	0x189a	; 0x189a <_exit>

0000025c <__bad_interrupt>:
     25c:	d1 ce       	rjmp	.-606    	; 0x0 <__vectors>

0000025e <MQTTSerialize_connectLength>:

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
     25e:	ef 92       	push	r14
     260:	ff 92       	push	r15
     262:	0f 93       	push	r16
     264:	1f 93       	push	r17
     266:	cf 93       	push	r28
     268:	df 93       	push	r29
     26a:	ec 01       	movw	r28, r24
     26c:	8e 81       	ldd	r24, Y+6	; 0x06
     26e:	83 30       	cpi	r24, 0x03	; 3
     270:	29 f0       	breq	.+10     	; 0x27c <MQTTSerialize_connectLength+0x1e>
     272:	84 30       	cpi	r24, 0x04	; 4
     274:	31 f4       	brne	.+12     	; 0x282 <MQTTSerialize_connectLength+0x24>
     276:	0a e0       	ldi	r16, 0x0A	; 10
     278:	10 e0       	ldi	r17, 0x00	; 0
     27a:	05 c0       	rjmp	.+10     	; 0x286 <MQTTSerialize_connectLength+0x28>
     27c:	0c e0       	ldi	r16, 0x0C	; 12
     27e:	10 e0       	ldi	r17, 0x00	; 0
     280:	02 c0       	rjmp	.+4      	; 0x286 <MQTTSerialize_connectLength+0x28>
     282:	00 e0       	ldi	r16, 0x00	; 0
     284:	10 e0       	ldi	r17, 0x00	; 0
     286:	4f 81       	ldd	r20, Y+7	; 0x07
     288:	58 85       	ldd	r21, Y+8	; 0x08
     28a:	69 85       	ldd	r22, Y+9	; 0x09
     28c:	7a 85       	ldd	r23, Y+10	; 0x0a
     28e:	8b 85       	ldd	r24, Y+11	; 0x0b
     290:	9c 85       	ldd	r25, Y+12	; 0x0c
     292:	fb d1       	rcall	.+1014   	; 0x68a <MQTTstrlen>
     294:	02 96       	adiw	r24, 0x02	; 2
     296:	08 0f       	add	r16, r24
     298:	19 1f       	adc	r17, r25
     29a:	88 89       	ldd	r24, Y+16	; 0x10
     29c:	88 23       	and	r24, r24
     29e:	a1 f0       	breq	.+40     	; 0x2c8 <MQTTSerialize_connectLength+0x6a>
     2a0:	4f 89       	ldd	r20, Y+23	; 0x17
     2a2:	58 8d       	ldd	r21, Y+24	; 0x18
     2a4:	69 8d       	ldd	r22, Y+25	; 0x19
     2a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     2a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     2ac:	ee d1       	rcall	.+988    	; 0x68a <MQTTstrlen>
     2ae:	7c 01       	movw	r14, r24
     2b0:	4d 8d       	ldd	r20, Y+29	; 0x1d
     2b2:	5e 8d       	ldd	r21, Y+30	; 0x1e
     2b4:	6f 8d       	ldd	r22, Y+31	; 0x1f
     2b6:	78 a1       	ldd	r23, Y+32	; 0x20
     2b8:	89 a1       	ldd	r24, Y+33	; 0x21
     2ba:	9a a1       	ldd	r25, Y+34	; 0x22
     2bc:	e6 d1       	rcall	.+972    	; 0x68a <MQTTstrlen>
     2be:	8e 0d       	add	r24, r14
     2c0:	9f 1d       	adc	r25, r15
     2c2:	04 96       	adiw	r24, 0x04	; 4
     2c4:	08 0f       	add	r16, r24
     2c6:	19 1f       	adc	r17, r25
     2c8:	8d a1       	ldd	r24, Y+37	; 0x25
     2ca:	9e a1       	ldd	r25, Y+38	; 0x26
     2cc:	89 2b       	or	r24, r25
     2ce:	21 f4       	brne	.+8      	; 0x2d8 <MQTTSerialize_connectLength+0x7a>
     2d0:	89 a5       	ldd	r24, Y+41	; 0x29
     2d2:	9a a5       	ldd	r25, Y+42	; 0x2a
     2d4:	89 2b       	or	r24, r25
     2d6:	51 f0       	breq	.+20     	; 0x2ec <MQTTSerialize_connectLength+0x8e>
     2d8:	4d a1       	ldd	r20, Y+37	; 0x25
     2da:	5e a1       	ldd	r21, Y+38	; 0x26
     2dc:	6f a1       	ldd	r22, Y+39	; 0x27
     2de:	78 a5       	ldd	r23, Y+40	; 0x28
     2e0:	89 a5       	ldd	r24, Y+41	; 0x29
     2e2:	9a a5       	ldd	r25, Y+42	; 0x2a
     2e4:	d2 d1       	rcall	.+932    	; 0x68a <MQTTstrlen>
     2e6:	02 96       	adiw	r24, 0x02	; 2
     2e8:	08 0f       	add	r16, r24
     2ea:	19 1f       	adc	r17, r25
     2ec:	8b a5       	ldd	r24, Y+43	; 0x2b
     2ee:	9c a5       	ldd	r25, Y+44	; 0x2c
     2f0:	89 2b       	or	r24, r25
     2f2:	21 f4       	brne	.+8      	; 0x2fc <MQTTSerialize_connectLength+0x9e>
     2f4:	8f a5       	ldd	r24, Y+47	; 0x2f
     2f6:	98 a9       	ldd	r25, Y+48	; 0x30
     2f8:	89 2b       	or	r24, r25
     2fa:	51 f0       	breq	.+20     	; 0x310 <MQTTSerialize_connectLength+0xb2>
     2fc:	4b a5       	ldd	r20, Y+43	; 0x2b
     2fe:	5c a5       	ldd	r21, Y+44	; 0x2c
     300:	6d a5       	ldd	r22, Y+45	; 0x2d
     302:	7e a5       	ldd	r23, Y+46	; 0x2e
     304:	8f a5       	ldd	r24, Y+47	; 0x2f
     306:	98 a9       	ldd	r25, Y+48	; 0x30
     308:	c0 d1       	rcall	.+896    	; 0x68a <MQTTstrlen>
     30a:	02 96       	adiw	r24, 0x02	; 2
     30c:	08 0f       	add	r16, r24
     30e:	19 1f       	adc	r17, r25
     310:	c8 01       	movw	r24, r16
     312:	df 91       	pop	r29
     314:	cf 91       	pop	r28
     316:	1f 91       	pop	r17
     318:	0f 91       	pop	r16
     31a:	ff 90       	pop	r15
     31c:	ef 90       	pop	r14
     31e:	08 95       	ret

00000320 <MQTTSerialize_connect>:
     320:	af 92       	push	r10
     322:	bf 92       	push	r11
     324:	cf 92       	push	r12
     326:	df 92       	push	r13
     328:	ef 92       	push	r14
     32a:	ff 92       	push	r15
     32c:	0f 93       	push	r16
     32e:	1f 93       	push	r17
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	1f 92       	push	r1
     336:	1f 92       	push	r1
     338:	cd b7       	in	r28, 0x3d	; 61
     33a:	de b7       	in	r29, 0x3e	; 62
     33c:	6c 01       	movw	r12, r24
     33e:	5b 01       	movw	r10, r22
     340:	8a 01       	movw	r16, r20
     342:	89 83       	std	Y+1, r24	; 0x01
     344:	9a 83       	std	Y+2, r25	; 0x02
     346:	ca 01       	movw	r24, r20
     348:	8a df       	rcall	.-236    	; 0x25e <MQTTSerialize_connectLength>
     34a:	7c 01       	movw	r14, r24
     34c:	04 d1       	rcall	.+520    	; 0x556 <MQTTPacket_len>
     34e:	a8 16       	cp	r10, r24
     350:	b9 06       	cpc	r11, r25
     352:	0c f4       	brge	.+2      	; 0x356 <MQTTSerialize_connect+0x36>
     354:	9f c0       	rjmp	.+318    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     356:	60 e1       	ldi	r22, 0x10	; 16
     358:	ce 01       	movw	r24, r28
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	0b d1       	rcall	.+534    	; 0x574 <writeChar>
     35e:	b7 01       	movw	r22, r14
     360:	89 81       	ldd	r24, Y+1	; 0x01
     362:	9a 81       	ldd	r25, Y+2	; 0x02
     364:	d2 d0       	rcall	.+420    	; 0x50a <MQTTPacket_encode>
     366:	29 81       	ldd	r18, Y+1	; 0x01
     368:	3a 81       	ldd	r19, Y+2	; 0x02
     36a:	82 0f       	add	r24, r18
     36c:	93 1f       	adc	r25, r19
     36e:	89 83       	std	Y+1, r24	; 0x01
     370:	9a 83       	std	Y+2, r25	; 0x02
     372:	f8 01       	movw	r30, r16
     374:	86 81       	ldd	r24, Z+6	; 0x06
     376:	84 30       	cpi	r24, 0x04	; 4
     378:	51 f4       	brne	.+20     	; 0x38e <MQTTSerialize_connect+0x6e>
     37a:	65 e6       	ldi	r22, 0x65	; 101
     37c:	70 e2       	ldi	r23, 0x20	; 32
     37e:	ce 01       	movw	r24, r28
     380:	01 96       	adiw	r24, 0x01	; 1
     382:	21 d1       	rcall	.+578    	; 0x5c6 <writeCString>
     384:	64 e0       	ldi	r22, 0x04	; 4
     386:	ce 01       	movw	r24, r28
     388:	01 96       	adiw	r24, 0x01	; 1
     38a:	f4 d0       	rcall	.+488    	; 0x574 <writeChar>
     38c:	09 c0       	rjmp	.+18     	; 0x3a0 <MQTTSerialize_connect+0x80>
     38e:	6a e6       	ldi	r22, 0x6A	; 106
     390:	70 e2       	ldi	r23, 0x20	; 32
     392:	ce 01       	movw	r24, r28
     394:	01 96       	adiw	r24, 0x01	; 1
     396:	17 d1       	rcall	.+558    	; 0x5c6 <writeCString>
     398:	63 e0       	ldi	r22, 0x03	; 3
     39a:	ce 01       	movw	r24, r28
     39c:	01 96       	adiw	r24, 0x01	; 1
     39e:	ea d0       	rcall	.+468    	; 0x574 <writeChar>
     3a0:	f1 2c       	mov	r15, r1
     3a2:	f8 01       	movw	r30, r16
     3a4:	87 85       	ldd	r24, Z+15	; 0x0f
     3a6:	80 fb       	bst	r24, 0
     3a8:	f1 f8       	bld	r15, 1
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	90 89       	ldd	r25, Z+16	; 0x10
     3ae:	91 11       	cpse	r25, r1
     3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <MQTTSerialize_connect+0x94>
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	80 fb       	bst	r24, 0
     3b6:	f2 f8       	bld	r15, 2
     3b8:	f2 fe       	sbrs	r15, 2
     3ba:	0d c0       	rjmp	.+26     	; 0x3d6 <MQTTSerialize_connect+0xb6>
     3bc:	f8 01       	movw	r30, r16
     3be:	84 a1       	ldd	r24, Z+36	; 0x24
     3c0:	83 70       	andi	r24, 0x03	; 3
     3c2:	88 0f       	add	r24, r24
     3c4:	88 0f       	add	r24, r24
     3c6:	88 0f       	add	r24, r24
     3c8:	9f 2d       	mov	r25, r15
     3ca:	97 7e       	andi	r25, 0xE7	; 231
     3cc:	f9 2e       	mov	r15, r25
     3ce:	f8 2a       	or	r15, r24
     3d0:	83 a1       	ldd	r24, Z+35	; 0x23
     3d2:	80 fb       	bst	r24, 0
     3d4:	f5 f8       	bld	r15, 5
     3d6:	f8 01       	movw	r30, r16
     3d8:	85 a1       	ldd	r24, Z+37	; 0x25
     3da:	96 a1       	ldd	r25, Z+38	; 0x26
     3dc:	89 2b       	or	r24, r25
     3de:	21 f4       	brne	.+8      	; 0x3e8 <MQTTSerialize_connect+0xc8>
     3e0:	81 a5       	ldd	r24, Z+41	; 0x29
     3e2:	92 a5       	ldd	r25, Z+42	; 0x2a
     3e4:	89 2b       	or	r24, r25
     3e6:	11 f0       	breq	.+4      	; 0x3ec <MQTTSerialize_connect+0xcc>
     3e8:	68 94       	set
     3ea:	f7 f8       	bld	r15, 7
     3ec:	f8 01       	movw	r30, r16
     3ee:	83 a5       	ldd	r24, Z+43	; 0x2b
     3f0:	94 a5       	ldd	r25, Z+44	; 0x2c
     3f2:	89 2b       	or	r24, r25
     3f4:	21 f4       	brne	.+8      	; 0x3fe <MQTTSerialize_connect+0xde>
     3f6:	87 a5       	ldd	r24, Z+47	; 0x2f
     3f8:	90 a9       	ldd	r25, Z+48	; 0x30
     3fa:	89 2b       	or	r24, r25
     3fc:	11 f0       	breq	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3fe:	68 94       	set
     400:	f6 f8       	bld	r15, 6
     402:	6f 2d       	mov	r22, r15
     404:	ce 01       	movw	r24, r28
     406:	01 96       	adiw	r24, 0x01	; 1
     408:	b5 d0       	rcall	.+362    	; 0x574 <writeChar>
     40a:	f8 01       	movw	r30, r16
     40c:	65 85       	ldd	r22, Z+13	; 0x0d
     40e:	76 85       	ldd	r23, Z+14	; 0x0e
     410:	ce 01       	movw	r24, r28
     412:	01 96       	adiw	r24, 0x01	; 1
     414:	b9 d0       	rcall	.+370    	; 0x588 <writeInt>
     416:	f8 01       	movw	r30, r16
     418:	27 81       	ldd	r18, Z+7	; 0x07
     41a:	30 85       	ldd	r19, Z+8	; 0x08
     41c:	41 85       	ldd	r20, Z+9	; 0x09
     41e:	52 85       	ldd	r21, Z+10	; 0x0a
     420:	63 85       	ldd	r22, Z+11	; 0x0b
     422:	74 85       	ldd	r23, Z+12	; 0x0c
     424:	ce 01       	movw	r24, r28
     426:	01 96       	adiw	r24, 0x01	; 1
     428:	f4 d0       	rcall	.+488    	; 0x612 <writeMQTTString>
     42a:	f8 01       	movw	r30, r16
     42c:	80 89       	ldd	r24, Z+16	; 0x10
     42e:	88 23       	and	r24, r24
     430:	99 f0       	breq	.+38     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     432:	27 89       	ldd	r18, Z+23	; 0x17
     434:	30 8d       	ldd	r19, Z+24	; 0x18
     436:	41 8d       	ldd	r20, Z+25	; 0x19
     438:	52 8d       	ldd	r21, Z+26	; 0x1a
     43a:	63 8d       	ldd	r22, Z+27	; 0x1b
     43c:	74 8d       	ldd	r23, Z+28	; 0x1c
     43e:	ce 01       	movw	r24, r28
     440:	01 96       	adiw	r24, 0x01	; 1
     442:	e7 d0       	rcall	.+462    	; 0x612 <writeMQTTString>
     444:	f8 01       	movw	r30, r16
     446:	25 8d       	ldd	r18, Z+29	; 0x1d
     448:	36 8d       	ldd	r19, Z+30	; 0x1e
     44a:	47 8d       	ldd	r20, Z+31	; 0x1f
     44c:	50 a1       	ldd	r21, Z+32	; 0x20
     44e:	61 a1       	ldd	r22, Z+33	; 0x21
     450:	72 a1       	ldd	r23, Z+34	; 0x22
     452:	ce 01       	movw	r24, r28
     454:	01 96       	adiw	r24, 0x01	; 1
     456:	dd d0       	rcall	.+442    	; 0x612 <writeMQTTString>
     458:	ef 2c       	mov	r14, r15
     45a:	ff 20       	and	r15, r15
     45c:	54 f4       	brge	.+20     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     45e:	f8 01       	movw	r30, r16
     460:	25 a1       	ldd	r18, Z+37	; 0x25
     462:	36 a1       	ldd	r19, Z+38	; 0x26
     464:	47 a1       	ldd	r20, Z+39	; 0x27
     466:	50 a5       	ldd	r21, Z+40	; 0x28
     468:	61 a5       	ldd	r22, Z+41	; 0x29
     46a:	72 a5       	ldd	r23, Z+42	; 0x2a
     46c:	ce 01       	movw	r24, r28
     46e:	01 96       	adiw	r24, 0x01	; 1
     470:	d0 d0       	rcall	.+416    	; 0x612 <writeMQTTString>
     472:	e6 fe       	sbrs	r14, 6
     474:	0a c0       	rjmp	.+20     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     476:	f8 01       	movw	r30, r16
     478:	23 a5       	ldd	r18, Z+43	; 0x2b
     47a:	34 a5       	ldd	r19, Z+44	; 0x2c
     47c:	45 a5       	ldd	r20, Z+45	; 0x2d
     47e:	56 a5       	ldd	r21, Z+46	; 0x2e
     480:	67 a5       	ldd	r22, Z+47	; 0x2f
     482:	70 a9       	ldd	r23, Z+48	; 0x30
     484:	ce 01       	movw	r24, r28
     486:	01 96       	adiw	r24, 0x01	; 1
     488:	c4 d0       	rcall	.+392    	; 0x612 <writeMQTTString>
     48a:	89 81       	ldd	r24, Y+1	; 0x01
     48c:	9a 81       	ldd	r25, Y+2	; 0x02
     48e:	8c 19       	sub	r24, r12
     490:	9d 09       	sbc	r25, r13
     492:	02 c0       	rjmp	.+4      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     494:	8e ef       	ldi	r24, 0xFE	; 254
     496:	9f ef       	ldi	r25, 0xFF	; 255
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	1f 91       	pop	r17
     4a2:	0f 91       	pop	r16
     4a4:	ff 90       	pop	r15
     4a6:	ef 90       	pop	r14
     4a8:	df 90       	pop	r13
     4aa:	cf 90       	pop	r12
     4ac:	bf 90       	pop	r11
     4ae:	af 90       	pop	r10
     4b0:	08 95       	ret

000004b2 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
     4b2:	0f 93       	push	r16
     4b4:	1f 93       	push	r17
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
     4ba:	1f 92       	push	r1
     4bc:	1f 92       	push	r1
     4be:	cd b7       	in	r28, 0x3d	; 61
     4c0:	de b7       	in	r29, 0x3e	; 62
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
     4c2:	89 83       	std	Y+1, r24	; 0x01
     4c4:	9a 83       	std	Y+2, r25	; 0x02

	FUNC_ENTRY;
	if (buflen < 2)
     4c6:	62 30       	cpi	r22, 0x02	; 2
     4c8:	71 05       	cpc	r23, r1
     4ca:	9c f0       	brlt	.+38     	; 0x4f2 <MQTTSerialize_zero+0x40>
     4cc:	8c 01       	movw	r16, r24
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
     4ce:	64 2f       	mov	r22, r20
     4d0:	62 95       	swap	r22
     4d2:	60 7f       	andi	r22, 0xF0	; 240
	writeChar(&ptr, header.byte); /* write header */
     4d4:	ce 01       	movw	r24, r28
     4d6:	01 96       	adiw	r24, 0x01	; 1
     4d8:	4d d0       	rcall	.+154    	; 0x574 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
     4da:	60 e0       	ldi	r22, 0x00	; 0
     4dc:	70 e0       	ldi	r23, 0x00	; 0
     4de:	89 81       	ldd	r24, Y+1	; 0x01
     4e0:	9a 81       	ldd	r25, Y+2	; 0x02
     4e2:	13 d0       	rcall	.+38     	; 0x50a <MQTTPacket_encode>
	rc = ptr - buf;
     4e4:	29 81       	ldd	r18, Y+1	; 0x01
     4e6:	3a 81       	ldd	r19, Y+2	; 0x02
     4e8:	82 0f       	add	r24, r18
     4ea:	93 1f       	adc	r25, r19
     4ec:	80 1b       	sub	r24, r16
     4ee:	91 0b       	sbc	r25, r17
     4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <MQTTSerialize_zero+0x44>
	unsigned char *ptr = buf;

	FUNC_ENTRY;
	if (buflen < 2)
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
     4f2:	8e ef       	ldi	r24, 0xFE	; 254
     4f4:	9f ef       	ldi	r25, 0xFF	; 255
	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
	rc = ptr - buf;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
     4f6:	0f 90       	pop	r0
     4f8:	0f 90       	pop	r0
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	1f 91       	pop	r17
     500:	0f 91       	pop	r16
     502:	08 95       	ret

00000504 <MQTTSerialize_disconnect>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
     504:	4e e0       	ldi	r20, 0x0E	; 14
     506:	d5 cf       	rjmp	.-86     	; 0x4b2 <MQTTSerialize_zero>
}
     508:	08 95       	ret

0000050a <MQTTPacket_encode>:
		}
	}
	mqttstring->cstring = NULL;
	FUNC_EXIT_RC(rc);
	return rc;
}
     50a:	dc 01       	movw	r26, r24
     50c:	e0 e0       	ldi	r30, 0x00	; 0
     50e:	f0 e0       	ldi	r31, 0x00	; 0
     510:	9b 01       	movw	r18, r22
     512:	2f 77       	andi	r18, 0x7F	; 127
     514:	30 78       	andi	r19, 0x80	; 128
     516:	33 23       	and	r19, r19
     518:	34 f4       	brge	.+12     	; 0x526 <MQTTPacket_encode+0x1c>
     51a:	21 50       	subi	r18, 0x01	; 1
     51c:	31 09       	sbc	r19, r1
     51e:	20 68       	ori	r18, 0x80	; 128
     520:	3f 6f       	ori	r19, 0xFF	; 255
     522:	2f 5f       	subi	r18, 0xFF	; 255
     524:	3f 4f       	sbci	r19, 0xFF	; 255
     526:	ab 01       	movw	r20, r22
     528:	77 23       	and	r23, r23
     52a:	14 f4       	brge	.+4      	; 0x530 <MQTTPacket_encode+0x26>
     52c:	41 58       	subi	r20, 0x81	; 129
     52e:	5f 4f       	sbci	r21, 0xFF	; 255
     530:	ba 01       	movw	r22, r20
     532:	66 0f       	add	r22, r22
     534:	67 2f       	mov	r22, r23
     536:	66 1f       	adc	r22, r22
     538:	77 0b       	sbc	r23, r23
     53a:	16 16       	cp	r1, r22
     53c:	17 06       	cpc	r1, r23
     53e:	24 f4       	brge	.+8      	; 0x548 <MQTTPacket_encode+0x3e>
     540:	31 96       	adiw	r30, 0x01	; 1
     542:	20 68       	ori	r18, 0x80	; 128
     544:	2d 93       	st	X+, r18
     546:	e4 cf       	rjmp	.-56     	; 0x510 <MQTTPacket_encode+0x6>
     548:	dc 01       	movw	r26, r24
     54a:	ae 0f       	add	r26, r30
     54c:	bf 1f       	adc	r27, r31
     54e:	2c 93       	st	X, r18
     550:	cf 01       	movw	r24, r30
     552:	01 96       	adiw	r24, 0x01	; 1
     554:	08 95       	ret

00000556 <MQTTPacket_len>:
     556:	9c 01       	movw	r18, r24
     558:	2f 5f       	subi	r18, 0xFF	; 255
     55a:	3f 4f       	sbci	r19, 0xFF	; 255
     55c:	20 38       	cpi	r18, 0x80	; 128
     55e:	31 05       	cpc	r19, r1
     560:	14 f4       	brge	.+4      	; 0x566 <MQTTPacket_len+0x10>
     562:	02 96       	adiw	r24, 0x02	; 2
     564:	08 95       	ret
     566:	21 15       	cp	r18, r1
     568:	30 44       	sbci	r19, 0x40	; 64
     56a:	14 f4       	brge	.+4      	; 0x570 <MQTTPacket_len+0x1a>
     56c:	03 96       	adiw	r24, 0x03	; 3
     56e:	08 95       	ret
     570:	04 96       	adiw	r24, 0x04	; 4
     572:	08 95       	ret

00000574 <writeChar>:
     574:	fc 01       	movw	r30, r24
     576:	a0 81       	ld	r26, Z
     578:	b1 81       	ldd	r27, Z+1	; 0x01
     57a:	6c 93       	st	X, r22
     57c:	80 81       	ld	r24, Z
     57e:	91 81       	ldd	r25, Z+1	; 0x01
     580:	01 96       	adiw	r24, 0x01	; 1
     582:	80 83       	st	Z, r24
     584:	91 83       	std	Z+1, r25	; 0x01
     586:	08 95       	ret

00000588 <writeInt>:
     588:	fc 01       	movw	r30, r24
     58a:	a0 81       	ld	r26, Z
     58c:	b1 81       	ldd	r27, Z+1	; 0x01
     58e:	cb 01       	movw	r24, r22
     590:	77 23       	and	r23, r23
     592:	14 f4       	brge	.+4      	; 0x598 <writeInt+0x10>
     594:	81 50       	subi	r24, 0x01	; 1
     596:	9f 4f       	sbci	r25, 0xFF	; 255
     598:	9c 93       	st	X, r25
     59a:	a0 81       	ld	r26, Z
     59c:	b1 81       	ldd	r27, Z+1	; 0x01
     59e:	cd 01       	movw	r24, r26
     5a0:	01 96       	adiw	r24, 0x01	; 1
     5a2:	80 83       	st	Z, r24
     5a4:	91 83       	std	Z+1, r25	; 0x01
     5a6:	70 78       	andi	r23, 0x80	; 128
     5a8:	77 23       	and	r23, r23
     5aa:	2c f4       	brge	.+10     	; 0x5b6 <writeInt+0x2e>
     5ac:	61 50       	subi	r22, 0x01	; 1
     5ae:	71 09       	sbc	r23, r1
     5b0:	7f 6f       	ori	r23, 0xFF	; 255
     5b2:	6f 5f       	subi	r22, 0xFF	; 255
     5b4:	7f 4f       	sbci	r23, 0xFF	; 255
     5b6:	11 96       	adiw	r26, 0x01	; 1
     5b8:	6c 93       	st	X, r22
     5ba:	80 81       	ld	r24, Z
     5bc:	91 81       	ldd	r25, Z+1	; 0x01
     5be:	01 96       	adiw	r24, 0x01	; 1
     5c0:	80 83       	st	Z, r24
     5c2:	91 83       	std	Z+1, r25	; 0x01
     5c4:	08 95       	ret

000005c6 <writeCString>:
     5c6:	ef 92       	push	r14
     5c8:	ff 92       	push	r15
     5ca:	0f 93       	push	r16
     5cc:	1f 93       	push	r17
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	8c 01       	movw	r16, r24
     5d4:	7b 01       	movw	r14, r22
     5d6:	eb 01       	movw	r28, r22
     5d8:	09 90       	ld	r0, Y+
     5da:	00 20       	and	r0, r0
     5dc:	e9 f7       	brne	.-6      	; 0x5d8 <writeCString+0x12>
     5de:	21 97       	sbiw	r28, 0x01	; 1
     5e0:	c6 1b       	sub	r28, r22
     5e2:	d7 0b       	sbc	r29, r23
     5e4:	be 01       	movw	r22, r28
     5e6:	d0 df       	rcall	.-96     	; 0x588 <writeInt>
     5e8:	ae 01       	movw	r20, r28
     5ea:	b7 01       	movw	r22, r14
     5ec:	f8 01       	movw	r30, r16
     5ee:	80 81       	ld	r24, Z
     5f0:	91 81       	ldd	r25, Z+1	; 0x01
     5f2:	0e 94 44 0c 	call	0x1888	; 0x1888 <memcpy>
     5f6:	f8 01       	movw	r30, r16
     5f8:	80 81       	ld	r24, Z
     5fa:	91 81       	ldd	r25, Z+1	; 0x01
     5fc:	c8 0f       	add	r28, r24
     5fe:	d9 1f       	adc	r29, r25
     600:	c0 83       	st	Z, r28
     602:	d1 83       	std	Z+1, r29	; 0x01
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	1f 91       	pop	r17
     60a:	0f 91       	pop	r16
     60c:	ff 90       	pop	r15
     60e:	ef 90       	pop	r14
     610:	08 95       	ret

00000612 <writeMQTTString>:
     612:	ef 92       	push	r14
     614:	ff 92       	push	r15
     616:	0f 93       	push	r16
     618:	1f 93       	push	r17
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
     61e:	00 d0       	rcall	.+0      	; 0x620 <writeMQTTString+0xe>
     620:	00 d0       	rcall	.+0      	; 0x622 <writeMQTTString+0x10>
     622:	cd b7       	in	r28, 0x3d	; 61
     624:	de b7       	in	r29, 0x3e	; 62
     626:	7c 01       	movw	r14, r24
     628:	29 83       	std	Y+1, r18	; 0x01
     62a:	3a 83       	std	Y+2, r19	; 0x02
     62c:	4b 83       	std	Y+3, r20	; 0x03
     62e:	5c 83       	std	Y+4, r21	; 0x04
     630:	6d 83       	std	Y+5, r22	; 0x05
     632:	7e 83       	std	Y+6, r23	; 0x06
     634:	0b 81       	ldd	r16, Y+3	; 0x03
     636:	1c 81       	ldd	r17, Y+4	; 0x04
     638:	10 16       	cp	r1, r16
     63a:	11 06       	cpc	r1, r17
     63c:	94 f4       	brge	.+36     	; 0x662 <writeMQTTString+0x50>
     63e:	b8 01       	movw	r22, r16
     640:	a3 df       	rcall	.-186    	; 0x588 <writeInt>
     642:	6d 81       	ldd	r22, Y+5	; 0x05
     644:	7e 81       	ldd	r23, Y+6	; 0x06
     646:	a8 01       	movw	r20, r16
     648:	f7 01       	movw	r30, r14
     64a:	80 81       	ld	r24, Z
     64c:	91 81       	ldd	r25, Z+1	; 0x01
     64e:	0e 94 44 0c 	call	0x1888	; 0x1888 <memcpy>
     652:	f7 01       	movw	r30, r14
     654:	80 81       	ld	r24, Z
     656:	91 81       	ldd	r25, Z+1	; 0x01
     658:	08 0f       	add	r16, r24
     65a:	19 1f       	adc	r17, r25
     65c:	00 83       	st	Z, r16
     65e:	11 83       	std	Z+1, r17	; 0x01
     660:	0a c0       	rjmp	.+20     	; 0x676 <writeMQTTString+0x64>
     662:	69 81       	ldd	r22, Y+1	; 0x01
     664:	7a 81       	ldd	r23, Y+2	; 0x02
     666:	61 15       	cp	r22, r1
     668:	71 05       	cpc	r23, r1
     66a:	11 f0       	breq	.+4      	; 0x670 <writeMQTTString+0x5e>
     66c:	ac df       	rcall	.-168    	; 0x5c6 <writeCString>
     66e:	03 c0       	rjmp	.+6      	; 0x676 <writeMQTTString+0x64>
     670:	60 e0       	ldi	r22, 0x00	; 0
     672:	70 e0       	ldi	r23, 0x00	; 0
     674:	89 df       	rcall	.-238    	; 0x588 <writeInt>
     676:	26 96       	adiw	r28, 0x06	; 6
     678:	cd bf       	out	0x3d, r28	; 61
     67a:	de bf       	out	0x3e, r29	; 62
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	ff 90       	pop	r15
     686:	ef 90       	pop	r14
     688:	08 95       	ret

0000068a <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
     68e:	00 d0       	rcall	.+0      	; 0x690 <MQTTstrlen+0x6>
     690:	00 d0       	rcall	.+0      	; 0x692 <MQTTstrlen+0x8>
     692:	cd b7       	in	r28, 0x3d	; 61
     694:	de b7       	in	r29, 0x3e	; 62
     696:	49 83       	std	Y+1, r20	; 0x01
     698:	5a 83       	std	Y+2, r21	; 0x02
     69a:	6b 83       	std	Y+3, r22	; 0x03
     69c:	7c 83       	std	Y+4, r23	; 0x04
     69e:	8d 83       	std	Y+5, r24	; 0x05
     6a0:	9e 83       	std	Y+6, r25	; 0x06
     6a2:	a9 81       	ldd	r26, Y+1	; 0x01
     6a4:	ba 81       	ldd	r27, Y+2	; 0x02
	int rc = 0;

	if (mqttstring.cstring)
     6a6:	10 97       	sbiw	r26, 0x00	; 0
     6a8:	49 f0       	breq	.+18     	; 0x6bc <MQTTstrlen+0x32>
		rc = strlen(mqttstring.cstring);
     6aa:	fd 01       	movw	r30, r26
     6ac:	01 90       	ld	r0, Z+
     6ae:	00 20       	and	r0, r0
     6b0:	e9 f7       	brne	.-6      	; 0x6ac <MQTTstrlen+0x22>
     6b2:	31 97       	sbiw	r30, 0x01	; 1
     6b4:	cf 01       	movw	r24, r30
     6b6:	8a 1b       	sub	r24, r26
     6b8:	9b 0b       	sbc	r25, r27
     6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <MQTTstrlen+0x36>
	else
		rc = mqttstring.lenstring.len;
     6bc:	8b 81       	ldd	r24, Y+3	; 0x03
     6be:	9c 81       	ldd	r25, Y+4	; 0x04
	return rc;
}
     6c0:	26 96       	adiw	r28, 0x06	; 6
     6c2:	cd bf       	out	0x3d, r28	; 61
     6c4:	de bf       	out	0x3e, r29	; 62
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	08 95       	ret

000006cc <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
     6cc:	ef 92       	push	r14
     6ce:	ff 92       	push	r15
     6d0:	0f 93       	push	r16
     6d2:	1f 93       	push	r17
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	00 d0       	rcall	.+0      	; 0x6da <MQTTSerialize_publishLength+0xe>
     6da:	00 d0       	rcall	.+0      	; 0x6dc <MQTTSerialize_publishLength+0x10>
     6dc:	cd b7       	in	r28, 0x3d	; 61
     6de:	de b7       	in	r29, 0x3e	; 62
     6e0:	7c 01       	movw	r14, r24
     6e2:	f4 2f       	mov	r31, r20
     6e4:	e5 2f       	mov	r30, r21
     6e6:	86 2f       	mov	r24, r22
     6e8:	97 2f       	mov	r25, r23
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
     6ea:	42 2f       	mov	r20, r18
     6ec:	53 2f       	mov	r21, r19
     6ee:	6f 2f       	mov	r22, r31
     6f0:	7e 2f       	mov	r23, r30
     6f2:	cb df       	rcall	.-106    	; 0x68a <MQTTstrlen>
     6f4:	02 96       	adiw	r24, 0x02	; 2
     6f6:	80 0f       	add	r24, r16
     6f8:	91 1f       	adc	r25, r17
	if (qos > 0)
     6fa:	1e 14       	cp	r1, r14
     6fc:	1f 04       	cpc	r1, r15
     6fe:	0c f4       	brge	.+2      	; 0x702 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
     700:	02 96       	adiw	r24, 0x02	; 2
	return len;
}
     702:	26 96       	adiw	r28, 0x06	; 6
     704:	cd bf       	out	0x3d, r28	; 61
     706:	de bf       	out	0x3e, r29	; 62
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	1f 91       	pop	r17
     70e:	0f 91       	pop	r16
     710:	ff 90       	pop	r15
     712:	ef 90       	pop	r14
     714:	08 95       	ret

00000716 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
     716:	2f 92       	push	r2
     718:	3f 92       	push	r3
     71a:	4f 92       	push	r4
     71c:	5f 92       	push	r5
     71e:	6f 92       	push	r6
     720:	7f 92       	push	r7
     722:	8f 92       	push	r8
     724:	9f 92       	push	r9
     726:	af 92       	push	r10
     728:	bf 92       	push	r11
     72a:	cf 92       	push	r12
     72c:	df 92       	push	r13
     72e:	ef 92       	push	r14
     730:	ff 92       	push	r15
     732:	0f 93       	push	r16
     734:	1f 93       	push	r17
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
     73e:	2a 97       	sbiw	r28, 0x0a	; 10
     740:	cd bf       	out	0x3d, r28	; 61
     742:	de bf       	out	0x3e, r29	; 62
     744:	2c 01       	movw	r4, r24
     746:	1b 01       	movw	r2, r22
     748:	49 87       	std	Y+9, r20	; 0x09
     74a:	39 01       	movw	r6, r18
     74c:	0a 87       	std	Y+10, r16	; 0x0a
     74e:	28 2d       	mov	r18, r8
     750:	8b 82       	std	Y+3, r8	; 0x03
     752:	39 2d       	mov	r19, r9
     754:	9c 82       	std	Y+4, r9	; 0x04
     756:	4a 2d       	mov	r20, r10
     758:	ad 82       	std	Y+5, r10	; 0x05
     75a:	5b 2d       	mov	r21, r11
     75c:	be 82       	std	Y+6, r11	; 0x06
     75e:	6c 2d       	mov	r22, r12
     760:	cf 82       	std	Y+7, r12	; 0x07
     762:	7d 2d       	mov	r23, r13
     764:	d8 86       	std	Y+8, r13	; 0x08
     766:	ca a0       	ldd	r12, Y+34	; 0x22
     768:	db a0       	ldd	r13, Y+35	; 0x23
	unsigned char *ptr = buf;
     76a:	89 83       	std	Y+1, r24	; 0x01
     76c:	9a 83       	std	Y+2, r25	; 0x02
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
     76e:	86 01       	movw	r16, r12
     770:	c3 01       	movw	r24, r6
     772:	ac df       	rcall	.-168    	; 0x6cc <MQTTSerialize_publishLength>
     774:	8c 01       	movw	r16, r24
     776:	ef de       	rcall	.-546    	; 0x556 <MQTTPacket_len>
     778:	28 16       	cp	r2, r24
     77a:	39 06       	cpc	r3, r25
     77c:	bc f1       	brlt	.+110    	; 0x7ec <MQTTSerialize_publish+0xd6>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
     77e:	60 e3       	ldi	r22, 0x30	; 48
	header.bits.dup = dup;
     780:	89 85       	ldd	r24, Y+9	; 0x09
     782:	80 fb       	bst	r24, 0
     784:	63 f9       	bld	r22, 3
	header.bits.qos = qos;
     786:	86 2d       	mov	r24, r6
     788:	83 70       	andi	r24, 0x03	; 3
     78a:	88 0f       	add	r24, r24
     78c:	69 7f       	andi	r22, 0xF9	; 249
     78e:	68 2b       	or	r22, r24
	header.bits.retain = retained;
     790:	8a 85       	ldd	r24, Y+10	; 0x0a
     792:	80 fb       	bst	r24, 0
	writeChar(&ptr, header.byte); /* write header */
     794:	60 f9       	bld	r22, 0
     796:	ce 01       	movw	r24, r28

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
     798:	01 96       	adiw	r24, 0x01	; 1
     79a:	ec de       	rcall	.-552    	; 0x574 <writeChar>
     79c:	b8 01       	movw	r22, r16
     79e:	89 81       	ldd	r24, Y+1	; 0x01
     7a0:	9a 81       	ldd	r25, Y+2	; 0x02
     7a2:	b3 de       	rcall	.-666    	; 0x50a <MQTTPacket_encode>
     7a4:	29 81       	ldd	r18, Y+1	; 0x01
     7a6:	3a 81       	ldd	r19, Y+2	; 0x02
     7a8:	82 0f       	add	r24, r18
     7aa:	93 1f       	adc	r25, r19

	writeMQTTString(&ptr, topicName);
     7ac:	89 83       	std	Y+1, r24	; 0x01
     7ae:	9a 83       	std	Y+2, r25	; 0x02
     7b0:	2b 81       	ldd	r18, Y+3	; 0x03
     7b2:	3c 81       	ldd	r19, Y+4	; 0x04
     7b4:	4d 81       	ldd	r20, Y+5	; 0x05
     7b6:	5e 81       	ldd	r21, Y+6	; 0x06
     7b8:	6f 81       	ldd	r22, Y+7	; 0x07
     7ba:	78 85       	ldd	r23, Y+8	; 0x08
     7bc:	ce 01       	movw	r24, r28

	if (qos > 0)
     7be:	01 96       	adiw	r24, 0x01	; 1
     7c0:	28 df       	rcall	.-432    	; 0x612 <writeMQTTString>
		writeInt(&ptr, packetid);
     7c2:	16 14       	cp	r1, r6
     7c4:	17 04       	cpc	r1, r7
     7c6:	24 f4       	brge	.+8      	; 0x7d0 <MQTTSerialize_publish+0xba>
     7c8:	b7 01       	movw	r22, r14
     7ca:	ce 01       	movw	r24, r28

	memcpy(ptr, payload, payloadlen);
     7cc:	01 96       	adiw	r24, 0x01	; 1
     7ce:	dc de       	rcall	.-584    	; 0x588 <writeInt>
     7d0:	a6 01       	movw	r20, r12
     7d2:	68 a1       	ldd	r22, Y+32	; 0x20
     7d4:	79 a1       	ldd	r23, Y+33	; 0x21
     7d6:	89 81       	ldd	r24, Y+1	; 0x01
     7d8:	9a 81       	ldd	r25, Y+2	; 0x02
	ptr += payloadlen;

	rc = ptr - buf;
     7da:	0e 94 44 0c 	call	0x1888	; 0x1888 <memcpy>
     7de:	89 81       	ldd	r24, Y+1	; 0x01
     7e0:	9a 81       	ldd	r25, Y+2	; 0x02
     7e2:	8c 0d       	add	r24, r12
     7e4:	9d 1d       	adc	r25, r13
     7e6:	84 19       	sub	r24, r4
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
     7e8:	95 09       	sbc	r25, r5
     7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <MQTTSerialize_publish+0xda>
	rc = ptr - buf;

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
     7ec:	8e ef       	ldi	r24, 0xFE	; 254
     7ee:	9f ef       	ldi	r25, 0xFF	; 255
     7f0:	2a 96       	adiw	r28, 0x0a	; 10
     7f2:	cd bf       	out	0x3d, r28	; 61
     7f4:	de bf       	out	0x3e, r29	; 62
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	1f 91       	pop	r17
     7fc:	0f 91       	pop	r16
     7fe:	ff 90       	pop	r15
     800:	ef 90       	pop	r14
     802:	df 90       	pop	r13
     804:	cf 90       	pop	r12
     806:	bf 90       	pop	r11
     808:	af 90       	pop	r10
     80a:	9f 90       	pop	r9
     80c:	8f 90       	pop	r8
     80e:	7f 90       	pop	r7
     810:	6f 90       	pop	r6
     812:	5f 90       	pop	r5
     814:	4f 90       	pop	r4
     816:	3f 90       	pop	r3
     818:	2f 90       	pop	r2
     81a:	08 95       	ret

0000081c <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     81c:	cf 93       	push	r28
     81e:	df 93       	push	r29
     820:	1f 92       	push	r1
     822:	cd b7       	in	r28, 0x3d	; 61
     824:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     826:	9f b7       	in	r25, 0x3f	; 63
     828:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     82a:	f8 94       	cli
	return flags;
     82c:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     82e:	e8 2f       	mov	r30, r24
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	e0 59       	subi	r30, 0x90	; 144
     834:	ff 4f       	sbci	r31, 0xFF	; 255
     836:	60 95       	com	r22
     838:	80 81       	ld	r24, Z
     83a:	68 23       	and	r22, r24
     83c:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     83e:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     840:	0f 90       	pop	r0
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	08 95       	ret

00000848 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     852:	c6 2f       	mov	r28, r22
     854:	d0 e0       	ldi	r29, 0x00	; 0
     856:	de 01       	movw	r26, r28
     858:	02 2e       	mov	r0, r18
     85a:	02 c0       	rjmp	.+4      	; 0x860 <ioport_configure_port_pin+0x18>
     85c:	b5 95       	asr	r27
     85e:	a7 95       	ror	r26
     860:	0a 94       	dec	r0
     862:	e2 f7       	brpl	.-8      	; 0x85c <ioport_configure_port_pin+0x14>
     864:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     866:	50 8b       	std	Z+16, r21	; 0x10
     868:	2f 5f       	subi	r18, 0xFF	; 255
     86a:	3f 4f       	sbci	r19, 0xFF	; 255
     86c:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     86e:	28 30       	cpi	r18, 0x08	; 8
     870:	31 05       	cpc	r19, r1
     872:	89 f7       	brne	.-30     	; 0x856 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     874:	40 ff       	sbrs	r20, 0
     876:	0a c0       	rjmp	.+20     	; 0x88c <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
     878:	41 ff       	sbrs	r20, 1
     87a:	03 c0       	rjmp	.+6      	; 0x882 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     87c:	fc 01       	movw	r30, r24
     87e:	65 83       	std	Z+5, r22	; 0x05
     880:	02 c0       	rjmp	.+4      	; 0x886 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     882:	fc 01       	movw	r30, r24
     884:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     886:	fc 01       	movw	r30, r24
     888:	61 83       	std	Z+1, r22	; 0x01
     88a:	02 c0       	rjmp	.+4      	; 0x890 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     88c:	fc 01       	movw	r30, r24
     88e:	62 83       	std	Z+2, r22	; 0x02
	}
}
     890:	df 91       	pop	r29
     892:	cf 91       	pop	r28
     894:	08 95       	ret

00000896 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     896:	43 e0       	ldi	r20, 0x03	; 3
     898:	50 e0       	ldi	r21, 0x00	; 0
     89a:	68 e0       	ldi	r22, 0x08	; 8
     89c:	80 ec       	ldi	r24, 0xC0	; 192
     89e:	97 e0       	ldi	r25, 0x07	; 7
     8a0:	d3 df       	rcall	.-90     	; 0x848 <ioport_configure_port_pin>
     8a2:	40 e0       	ldi	r20, 0x00	; 0
     8a4:	58 e1       	ldi	r21, 0x18	; 24
     8a6:	64 e0       	ldi	r22, 0x04	; 4
     8a8:	80 ec       	ldi	r24, 0xC0	; 192
     8aa:	97 e0       	ldi	r25, 0x07	; 7
     8ac:	cd df       	rcall	.-102    	; 0x848 <ioport_configure_port_pin>
     8ae:	43 e0       	ldi	r20, 0x03	; 3
     8b0:	50 e0       	ldi	r21, 0x00	; 0
     8b2:	68 e0       	ldi	r22, 0x08	; 8
     8b4:	80 e8       	ldi	r24, 0x80	; 128
     8b6:	96 e0       	ldi	r25, 0x06	; 6
     8b8:	c7 df       	rcall	.-114    	; 0x848 <ioport_configure_port_pin>
     8ba:	40 e0       	ldi	r20, 0x00	; 0
     8bc:	50 e0       	ldi	r21, 0x00	; 0
     8be:	64 e0       	ldi	r22, 0x04	; 4
     8c0:	80 e8       	ldi	r24, 0x80	; 128
     8c2:	96 e0       	ldi	r25, 0x06	; 6
     8c4:	c1 df       	rcall	.-126    	; 0x848 <ioport_configure_port_pin>
     8c6:	43 e0       	ldi	r20, 0x03	; 3
     8c8:	50 e0       	ldi	r21, 0x00	; 0
     8ca:	68 e0       	ldi	r22, 0x08	; 8
     8cc:	80 e4       	ldi	r24, 0x40	; 64
     8ce:	96 e0       	ldi	r25, 0x06	; 6
     8d0:	bb df       	rcall	.-138    	; 0x848 <ioport_configure_port_pin>
     8d2:	40 e0       	ldi	r20, 0x00	; 0
     8d4:	50 e0       	ldi	r21, 0x00	; 0
     8d6:	64 e0       	ldi	r22, 0x04	; 4
     8d8:	80 e4       	ldi	r24, 0x40	; 64
     8da:	96 e0       	ldi	r25, 0x06	; 6
     8dc:	b5 cf       	rjmp	.-150    	; 0x848 <ioport_configure_port_pin>
     8de:	08 95       	ret

000008e0 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     8e0:	fc 01       	movw	r30, r24
     8e2:	91 81       	ldd	r25, Z+1	; 0x01
     8e4:	95 ff       	sbrs	r25, 5
     8e6:	fd cf       	rjmp	.-6      	; 0x8e2 <usart_putchar+0x2>
     8e8:	60 83       	st	Z, r22
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	08 95       	ret

000008f0 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     8f0:	4f 92       	push	r4
     8f2:	5f 92       	push	r5
     8f4:	6f 92       	push	r6
     8f6:	7f 92       	push	r7
     8f8:	8f 92       	push	r8
     8fa:	9f 92       	push	r9
     8fc:	af 92       	push	r10
     8fe:	bf 92       	push	r11
     900:	ef 92       	push	r14
     902:	ff 92       	push	r15
     904:	0f 93       	push	r16
     906:	1f 93       	push	r17
     908:	cf 93       	push	r28
     90a:	7c 01       	movw	r14, r24
     90c:	4a 01       	movw	r8, r20
     90e:	5b 01       	movw	r10, r22
     910:	28 01       	movw	r4, r16
     912:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     914:	fc 01       	movw	r30, r24
     916:	84 81       	ldd	r24, Z+4	; 0x04
     918:	82 ff       	sbrs	r24, 2
     91a:	16 c0       	rjmp	.+44     	; 0x948 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     91c:	d9 01       	movw	r26, r18
     91e:	c8 01       	movw	r24, r16
     920:	68 94       	set
     922:	12 f8       	bld	r1, 2
     924:	b6 95       	lsr	r27
     926:	a7 95       	ror	r26
     928:	97 95       	ror	r25
     92a:	87 95       	ror	r24
     92c:	16 94       	lsr	r1
     92e:	d1 f7       	brne	.-12     	; 0x924 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     930:	b9 01       	movw	r22, r18
     932:	a8 01       	movw	r20, r16
     934:	03 2e       	mov	r0, r19
     936:	36 e1       	ldi	r19, 0x16	; 22
     938:	76 95       	lsr	r23
     93a:	67 95       	ror	r22
     93c:	57 95       	ror	r21
     93e:	47 95       	ror	r20
     940:	3a 95       	dec	r19
     942:	d1 f7       	brne	.-12     	; 0x938 <usart_set_baudrate+0x48>
     944:	30 2d       	mov	r19, r0
     946:	15 c0       	rjmp	.+42     	; 0x972 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     948:	d9 01       	movw	r26, r18
     94a:	c8 01       	movw	r24, r16
     94c:	68 94       	set
     94e:	13 f8       	bld	r1, 3
     950:	b6 95       	lsr	r27
     952:	a7 95       	ror	r26
     954:	97 95       	ror	r25
     956:	87 95       	ror	r24
     958:	16 94       	lsr	r1
     95a:	d1 f7       	brne	.-12     	; 0x950 <usart_set_baudrate+0x60>
		min_rate /= 2;
     95c:	b9 01       	movw	r22, r18
     95e:	a8 01       	movw	r20, r16
     960:	03 2e       	mov	r0, r19
     962:	37 e1       	ldi	r19, 0x17	; 23
     964:	76 95       	lsr	r23
     966:	67 95       	ror	r22
     968:	57 95       	ror	r21
     96a:	47 95       	ror	r20
     96c:	3a 95       	dec	r19
     96e:	d1 f7       	brne	.-12     	; 0x964 <usart_set_baudrate+0x74>
     970:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     972:	88 15       	cp	r24, r8
     974:	99 05       	cpc	r25, r9
     976:	aa 05       	cpc	r26, r10
     978:	bb 05       	cpc	r27, r11
     97a:	08 f4       	brcc	.+2      	; 0x97e <usart_set_baudrate+0x8e>
     97c:	a2 c0       	rjmp	.+324    	; 0xac2 <usart_set_baudrate+0x1d2>
     97e:	84 16       	cp	r8, r20
     980:	95 06       	cpc	r9, r21
     982:	a6 06       	cpc	r10, r22
     984:	b7 06       	cpc	r11, r23
     986:	08 f4       	brcc	.+2      	; 0x98a <usart_set_baudrate+0x9a>
     988:	9e c0       	rjmp	.+316    	; 0xac6 <usart_set_baudrate+0x1d6>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     98a:	f7 01       	movw	r30, r14
     98c:	84 81       	ldd	r24, Z+4	; 0x04
     98e:	82 fd       	sbrc	r24, 2
     990:	04 c0       	rjmp	.+8      	; 0x99a <usart_set_baudrate+0xaa>
		baud *= 2;
     992:	88 0c       	add	r8, r8
     994:	99 1c       	adc	r9, r9
     996:	aa 1c       	adc	r10, r10
     998:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     99a:	c3 01       	movw	r24, r6
     99c:	b2 01       	movw	r22, r4
     99e:	a5 01       	movw	r20, r10
     9a0:	94 01       	movw	r18, r8
     9a2:	89 d6       	rcall	.+3346   	; 0x16b6 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     9a4:	2f 3f       	cpi	r18, 0xFF	; 255
     9a6:	31 05       	cpc	r19, r1
     9a8:	41 05       	cpc	r20, r1
     9aa:	51 05       	cpc	r21, r1
     9ac:	08 f4       	brcc	.+2      	; 0x9b0 <usart_set_baudrate+0xc0>
     9ae:	8d c0       	rjmp	.+282    	; 0xaca <usart_set_baudrate+0x1da>
     9b0:	8f ef       	ldi	r24, 0xFF	; 255
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	c9 ef       	ldi	r28, 0xF9	; 249
     9ba:	05 c0       	rjmp	.+10     	; 0x9c6 <usart_set_baudrate+0xd6>
     9bc:	28 17       	cp	r18, r24
     9be:	39 07       	cpc	r19, r25
     9c0:	4a 07       	cpc	r20, r26
     9c2:	5b 07       	cpc	r21, r27
     9c4:	58 f0       	brcs	.+22     	; 0x9dc <usart_set_baudrate+0xec>
			break;
		}

		limit <<= 1;
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     9ce:	cd 3f       	cpi	r28, 0xFD	; 253
     9d0:	0c f4       	brge	.+2      	; 0x9d4 <usart_set_baudrate+0xe4>
			limit |= 1;
     9d2:	81 60       	ori	r24, 0x01	; 1
     9d4:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     9d6:	c7 30       	cpi	r28, 0x07	; 7
     9d8:	89 f7       	brne	.-30     	; 0x9bc <usart_set_baudrate+0xcc>
     9da:	4d c0       	rjmp	.+154    	; 0xa76 <usart_set_baudrate+0x186>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     9dc:	cc 23       	and	r28, r28
     9de:	0c f0       	brlt	.+2      	; 0x9e2 <usart_set_baudrate+0xf2>
     9e0:	4a c0       	rjmp	.+148    	; 0xa76 <usart_set_baudrate+0x186>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     9e2:	d5 01       	movw	r26, r10
     9e4:	c4 01       	movw	r24, r8
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	88 0f       	add	r24, r24
     9f0:	99 1f       	adc	r25, r25
     9f2:	aa 1f       	adc	r26, r26
     9f4:	bb 1f       	adc	r27, r27
     9f6:	88 0f       	add	r24, r24
     9f8:	99 1f       	adc	r25, r25
     9fa:	aa 1f       	adc	r26, r26
     9fc:	bb 1f       	adc	r27, r27
     9fe:	48 1a       	sub	r4, r24
     a00:	59 0a       	sbc	r5, r25
     a02:	6a 0a       	sbc	r6, r26
     a04:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     a06:	ce 3f       	cpi	r28, 0xFE	; 254
     a08:	ec f4       	brge	.+58     	; 0xa44 <usart_set_baudrate+0x154>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     a0a:	8d ef       	ldi	r24, 0xFD	; 253
     a0c:	9f ef       	ldi	r25, 0xFF	; 255
     a0e:	8c 1b       	sub	r24, r28
     a10:	91 09       	sbc	r25, r1
     a12:	c7 fd       	sbrc	r28, 7
     a14:	93 95       	inc	r25
     a16:	04 c0       	rjmp	.+8      	; 0xa20 <usart_set_baudrate+0x130>
     a18:	44 0c       	add	r4, r4
     a1a:	55 1c       	adc	r5, r5
     a1c:	66 1c       	adc	r6, r6
     a1e:	77 1c       	adc	r7, r7
     a20:	8a 95       	dec	r24
     a22:	d2 f7       	brpl	.-12     	; 0xa18 <usart_set_baudrate+0x128>
     a24:	d5 01       	movw	r26, r10
     a26:	c4 01       	movw	r24, r8
     a28:	b6 95       	lsr	r27
     a2a:	a7 95       	ror	r26
     a2c:	97 95       	ror	r25
     a2e:	87 95       	ror	r24
     a30:	bc 01       	movw	r22, r24
     a32:	cd 01       	movw	r24, r26
     a34:	64 0d       	add	r22, r4
     a36:	75 1d       	adc	r23, r5
     a38:	86 1d       	adc	r24, r6
     a3a:	97 1d       	adc	r25, r7
     a3c:	a5 01       	movw	r20, r10
     a3e:	94 01       	movw	r18, r8
     a40:	3a d6       	rcall	.+3188   	; 0x16b6 <__udivmodsi4>
     a42:	35 c0       	rjmp	.+106    	; 0xaae <usart_set_baudrate+0x1be>
		} else {
			baud <<= exp + 3;
     a44:	83 e0       	ldi	r24, 0x03	; 3
     a46:	8c 0f       	add	r24, r28
     a48:	a5 01       	movw	r20, r10
     a4a:	94 01       	movw	r18, r8
     a4c:	04 c0       	rjmp	.+8      	; 0xa56 <usart_set_baudrate+0x166>
     a4e:	22 0f       	add	r18, r18
     a50:	33 1f       	adc	r19, r19
     a52:	44 1f       	adc	r20, r20
     a54:	55 1f       	adc	r21, r21
     a56:	8a 95       	dec	r24
     a58:	d2 f7       	brpl	.-12     	; 0xa4e <usart_set_baudrate+0x15e>
			div = (cpu_hz + baud / 2) / baud;
     a5a:	da 01       	movw	r26, r20
     a5c:	c9 01       	movw	r24, r18
     a5e:	b6 95       	lsr	r27
     a60:	a7 95       	ror	r26
     a62:	97 95       	ror	r25
     a64:	87 95       	ror	r24
     a66:	bc 01       	movw	r22, r24
     a68:	cd 01       	movw	r24, r26
     a6a:	64 0d       	add	r22, r4
     a6c:	75 1d       	adc	r23, r5
     a6e:	86 1d       	adc	r24, r6
     a70:	97 1d       	adc	r25, r7
     a72:	21 d6       	rcall	.+3138   	; 0x16b6 <__udivmodsi4>
     a74:	1c c0       	rjmp	.+56     	; 0xaae <usart_set_baudrate+0x1be>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     a76:	83 e0       	ldi	r24, 0x03	; 3
     a78:	8c 0f       	add	r24, r28
     a7a:	a5 01       	movw	r20, r10
     a7c:	94 01       	movw	r18, r8
     a7e:	04 c0       	rjmp	.+8      	; 0xa88 <usart_set_baudrate+0x198>
     a80:	22 0f       	add	r18, r18
     a82:	33 1f       	adc	r19, r19
     a84:	44 1f       	adc	r20, r20
     a86:	55 1f       	adc	r21, r21
     a88:	8a 95       	dec	r24
     a8a:	d2 f7       	brpl	.-12     	; 0xa80 <usart_set_baudrate+0x190>
		div = (cpu_hz + baud / 2) / baud - 1;
     a8c:	da 01       	movw	r26, r20
     a8e:	c9 01       	movw	r24, r18
     a90:	b6 95       	lsr	r27
     a92:	a7 95       	ror	r26
     a94:	97 95       	ror	r25
     a96:	87 95       	ror	r24
     a98:	bc 01       	movw	r22, r24
     a9a:	cd 01       	movw	r24, r26
     a9c:	64 0d       	add	r22, r4
     a9e:	75 1d       	adc	r23, r5
     aa0:	86 1d       	adc	r24, r6
     aa2:	97 1d       	adc	r25, r7
     aa4:	08 d6       	rcall	.+3088   	; 0x16b6 <__udivmodsi4>
     aa6:	21 50       	subi	r18, 0x01	; 1
     aa8:	31 09       	sbc	r19, r1
     aaa:	41 09       	sbc	r20, r1
     aac:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     aae:	83 2f       	mov	r24, r19
     ab0:	8f 70       	andi	r24, 0x0F	; 15
     ab2:	c2 95       	swap	r28
     ab4:	c0 7f       	andi	r28, 0xF0	; 240
     ab6:	c8 2b       	or	r28, r24
     ab8:	f7 01       	movw	r30, r14
     aba:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     abc:	26 83       	std	Z+6, r18	; 0x06

	return true;
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	18 c0       	rjmp	.+48     	; 0xaf2 <usart_set_baudrate+0x202>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	16 c0       	rjmp	.+44     	; 0xaf2 <usart_set_baudrate+0x202>
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	14 c0       	rjmp	.+40     	; 0xaf2 <usart_set_baudrate+0x202>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     aca:	d5 01       	movw	r26, r10
     acc:	c4 01       	movw	r24, r8
     ace:	88 0f       	add	r24, r24
     ad0:	99 1f       	adc	r25, r25
     ad2:	aa 1f       	adc	r26, r26
     ad4:	bb 1f       	adc	r27, r27
     ad6:	88 0f       	add	r24, r24
     ad8:	99 1f       	adc	r25, r25
     ada:	aa 1f       	adc	r26, r26
     adc:	bb 1f       	adc	r27, r27
     ade:	88 0f       	add	r24, r24
     ae0:	99 1f       	adc	r25, r25
     ae2:	aa 1f       	adc	r26, r26
     ae4:	bb 1f       	adc	r27, r27
     ae6:	48 1a       	sub	r4, r24
     ae8:	59 0a       	sbc	r5, r25
     aea:	6a 0a       	sbc	r6, r26
     aec:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     aee:	c9 ef       	ldi	r28, 0xF9	; 249
     af0:	8c cf       	rjmp	.-232    	; 0xa0a <usart_set_baudrate+0x11a>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     af2:	cf 91       	pop	r28
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	ff 90       	pop	r15
     afa:	ef 90       	pop	r14
     afc:	bf 90       	pop	r11
     afe:	af 90       	pop	r10
     b00:	9f 90       	pop	r9
     b02:	8f 90       	pop	r8
     b04:	7f 90       	pop	r7
     b06:	6f 90       	pop	r6
     b08:	5f 90       	pop	r5
     b0a:	4f 90       	pop	r4
     b0c:	08 95       	ret

00000b0e <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     b0e:	0f 93       	push	r16
     b10:	1f 93       	push	r17
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	ec 01       	movw	r28, r24
     b18:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     b1a:	00 97       	sbiw	r24, 0x00	; 0
     b1c:	09 f4       	brne	.+2      	; 0xb20 <usart_init_rs232+0x12>
     b1e:	36 c1       	rjmp	.+620    	; 0xd8c <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     b20:	80 3c       	cpi	r24, 0xC0	; 192
     b22:	91 05       	cpc	r25, r1
     b24:	21 f4       	brne	.+8      	; 0xb2e <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     b26:	60 e1       	ldi	r22, 0x10	; 16
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	78 de       	rcall	.-784    	; 0x81c <sysclk_enable_module>
     b2c:	2f c1       	rjmp	.+606    	; 0xd8c <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
     b2e:	c0 34       	cpi	r28, 0x40	; 64
     b30:	84 e0       	ldi	r24, 0x04	; 4
     b32:	d8 07       	cpc	r29, r24
     b34:	21 f4       	brne	.+8      	; 0xb3e <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
     b36:	68 e0       	ldi	r22, 0x08	; 8
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	70 de       	rcall	.-800    	; 0x81c <sysclk_enable_module>
     b3c:	27 c1       	rjmp	.+590    	; 0xd8c <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     b3e:	c1 15       	cp	r28, r1
     b40:	e4 e0       	ldi	r30, 0x04	; 4
     b42:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     b44:	21 f4       	brne	.+8      	; 0xb4e <usart_init_rs232+0x40>
     b46:	64 e0       	ldi	r22, 0x04	; 4
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	68 de       	rcall	.-816    	; 0x81c <sysclk_enable_module>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     b4c:	1f c1       	rjmp	.+574    	; 0xd8c <usart_init_rs232+0x27e>
     b4e:	c0 38       	cpi	r28, 0x80	; 128
     b50:	f1 e0       	ldi	r31, 0x01	; 1
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     b52:	df 07       	cpc	r29, r31
     b54:	21 f4       	brne	.+8      	; 0xb5e <usart_init_rs232+0x50>
     b56:	62 e0       	ldi	r22, 0x02	; 2
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	60 de       	rcall	.-832    	; 0x81c <sysclk_enable_module>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     b5c:	17 c1       	rjmp	.+558    	; 0xd8c <usart_init_rs232+0x27e>
     b5e:	c1 15       	cp	r28, r1
     b60:	81 e0       	ldi	r24, 0x01	; 1
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     b62:	d8 07       	cpc	r29, r24
     b64:	21 f4       	brne	.+8      	; 0xb6e <usart_init_rs232+0x60>
     b66:	61 e0       	ldi	r22, 0x01	; 1
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	58 de       	rcall	.-848    	; 0x81c <sysclk_enable_module>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     b6c:	0f c1       	rjmp	.+542    	; 0xd8c <usart_init_rs232+0x27e>
     b6e:	c0 38       	cpi	r28, 0x80	; 128
     b70:	e3 e0       	ldi	r30, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     b72:	de 07       	cpc	r29, r30
     b74:	21 f4       	brne	.+8      	; 0xb7e <usart_init_rs232+0x70>
     b76:	61 e0       	ldi	r22, 0x01	; 1
     b78:	81 e0       	ldi	r24, 0x01	; 1
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     b7a:	50 de       	rcall	.-864    	; 0x81c <sysclk_enable_module>
     b7c:	07 c1       	rjmp	.+526    	; 0xd8c <usart_init_rs232+0x27e>
     b7e:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     b80:	f3 e0       	ldi	r31, 0x03	; 3
     b82:	df 07       	cpc	r29, r31
     b84:	21 f4       	brne	.+8      	; 0xb8e <usart_init_rs232+0x80>
     b86:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	48 de       	rcall	.-880    	; 0x81c <sysclk_enable_module>
     b8c:	ff c0       	rjmp	.+510    	; 0xd8c <usart_init_rs232+0x27e>
     b8e:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     b90:	82 e0       	ldi	r24, 0x02	; 2
     b92:	d8 07       	cpc	r29, r24
     b94:	21 f4       	brne	.+8      	; 0xb9e <usart_init_rs232+0x90>
     b96:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	40 de       	rcall	.-896    	; 0x81c <sysclk_enable_module>
     b9c:	f7 c0       	rjmp	.+494    	; 0xd8c <usart_init_rs232+0x27e>
     b9e:	c0 34       	cpi	r28, 0x40	; 64
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     ba0:	e2 e0       	ldi	r30, 0x02	; 2
     ba2:	de 07       	cpc	r29, r30
     ba4:	21 f4       	brne	.+8      	; 0xbae <usart_init_rs232+0xa0>
     ba6:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
     ba8:	82 e0       	ldi	r24, 0x02	; 2
     baa:	38 de       	rcall	.-912    	; 0x81c <sysclk_enable_module>
     bac:	ef c0       	rjmp	.+478    	; 0xd8c <usart_init_rs232+0x27e>
     bae:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
     bb0:	f3 e0       	ldi	r31, 0x03	; 3
     bb2:	df 07       	cpc	r29, r31
     bb4:	21 f4       	brne	.+8      	; 0xbbe <usart_init_rs232+0xb0>
     bb6:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	30 de       	rcall	.-928    	; 0x81c <sysclk_enable_module>
     bbc:	e7 c0       	rjmp	.+462    	; 0xd8c <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     bbe:	c0 32       	cpi	r28, 0x20	; 32
     bc0:	83 e0       	ldi	r24, 0x03	; 3
     bc2:	d8 07       	cpc	r29, r24
     bc4:	21 f4       	brne	.+8      	; 0xbce <usart_init_rs232+0xc0>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     bc6:	64 e0       	ldi	r22, 0x04	; 4
     bc8:	82 e0       	ldi	r24, 0x02	; 2
     bca:	28 de       	rcall	.-944    	; 0x81c <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     bcc:	df c0       	rjmp	.+446    	; 0xd8c <usart_init_rs232+0x27e>
     bce:	c1 15       	cp	r28, r1
     bd0:	e8 e0       	ldi	r30, 0x08	; 8
     bd2:	de 07       	cpc	r29, r30
     bd4:	21 f4       	brne	.+8      	; 0xbde <usart_init_rs232+0xd0>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     bd6:	61 e0       	ldi	r22, 0x01	; 1
     bd8:	83 e0       	ldi	r24, 0x03	; 3
     bda:	20 de       	rcall	.-960    	; 0x81c <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     bdc:	d7 c0       	rjmp	.+430    	; 0xd8c <usart_init_rs232+0x27e>
     bde:	c1 15       	cp	r28, r1
     be0:	f9 e0       	ldi	r31, 0x09	; 9
     be2:	df 07       	cpc	r29, r31
     be4:	21 f4       	brne	.+8      	; 0xbee <usart_init_rs232+0xe0>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     be6:	61 e0       	ldi	r22, 0x01	; 1
     be8:	84 e0       	ldi	r24, 0x04	; 4
     bea:	18 de       	rcall	.-976    	; 0x81c <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     bec:	cf c0       	rjmp	.+414    	; 0xd8c <usart_init_rs232+0x27e>
     bee:	c1 15       	cp	r28, r1
     bf0:	8a e0       	ldi	r24, 0x0A	; 10
     bf2:	d8 07       	cpc	r29, r24
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     bf4:	21 f4       	brne	.+8      	; 0xbfe <usart_init_rs232+0xf0>
     bf6:	61 e0       	ldi	r22, 0x01	; 1
     bf8:	85 e0       	ldi	r24, 0x05	; 5
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     bfa:	10 de       	rcall	.-992    	; 0x81c <sysclk_enable_module>
     bfc:	c7 c0       	rjmp	.+398    	; 0xd8c <usart_init_rs232+0x27e>
     bfe:	c1 15       	cp	r28, r1
     c00:	eb e0       	ldi	r30, 0x0B	; 11
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     c02:	de 07       	cpc	r29, r30
     c04:	21 f4       	brne	.+8      	; 0xc0e <usart_init_rs232+0x100>
     c06:	61 e0       	ldi	r22, 0x01	; 1
     c08:	86 e0       	ldi	r24, 0x06	; 6
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     c0a:	08 de       	rcall	.-1008   	; 0x81c <sysclk_enable_module>
     c0c:	bf c0       	rjmp	.+382    	; 0xd8c <usart_init_rs232+0x27e>
     c0e:	c0 34       	cpi	r28, 0x40	; 64
     c10:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     c12:	df 07       	cpc	r29, r31
     c14:	21 f4       	brne	.+8      	; 0xc1e <usart_init_rs232+0x110>
     c16:	62 e0       	ldi	r22, 0x02	; 2
     c18:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     c1a:	00 de       	rcall	.-1024   	; 0x81c <sysclk_enable_module>
     c1c:	b7 c0       	rjmp	.+366    	; 0xd8c <usart_init_rs232+0x27e>
     c1e:	c0 34       	cpi	r28, 0x40	; 64
     c20:	89 e0       	ldi	r24, 0x09	; 9
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     c22:	d8 07       	cpc	r29, r24
     c24:	21 f4       	brne	.+8      	; 0xc2e <usart_init_rs232+0x120>
     c26:	62 e0       	ldi	r22, 0x02	; 2
     c28:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     c2a:	f8 dd       	rcall	.-1040   	; 0x81c <sysclk_enable_module>
     c2c:	af c0       	rjmp	.+350    	; 0xd8c <usart_init_rs232+0x27e>
     c2e:	c0 34       	cpi	r28, 0x40	; 64
     c30:	ea e0       	ldi	r30, 0x0A	; 10
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
     c32:	de 07       	cpc	r29, r30
     c34:	21 f4       	brne	.+8      	; 0xc3e <usart_init_rs232+0x130>
     c36:	62 e0       	ldi	r22, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
     c38:	85 e0       	ldi	r24, 0x05	; 5
     c3a:	f0 dd       	rcall	.-1056   	; 0x81c <sysclk_enable_module>
     c3c:	a7 c0       	rjmp	.+334    	; 0xd8c <usart_init_rs232+0x27e>
     c3e:	c0 34       	cpi	r28, 0x40	; 64
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     c40:	fb e0       	ldi	r31, 0x0B	; 11
     c42:	df 07       	cpc	r29, r31
     c44:	21 f4       	brne	.+8      	; 0xc4e <usart_init_rs232+0x140>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     c46:	62 e0       	ldi	r22, 0x02	; 2
     c48:	86 e0       	ldi	r24, 0x06	; 6
     c4a:	e8 dd       	rcall	.-1072   	; 0x81c <sysclk_enable_module>
     c4c:	9f c0       	rjmp	.+318    	; 0xd8c <usart_init_rs232+0x27e>
     c4e:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     c50:	88 e0       	ldi	r24, 0x08	; 8
     c52:	d8 07       	cpc	r29, r24
     c54:	21 f4       	brne	.+8      	; 0xc5e <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     c56:	64 e0       	ldi	r22, 0x04	; 4
     c58:	83 e0       	ldi	r24, 0x03	; 3
     c5a:	e0 dd       	rcall	.-1088   	; 0x81c <sysclk_enable_module>
     c5c:	97 c0       	rjmp	.+302    	; 0xd8c <usart_init_rs232+0x27e>
     c5e:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     c60:	e9 e0       	ldi	r30, 0x09	; 9
     c62:	de 07       	cpc	r29, r30
     c64:	21 f4       	brne	.+8      	; 0xc6e <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     c66:	64 e0       	ldi	r22, 0x04	; 4
     c68:	84 e0       	ldi	r24, 0x04	; 4
     c6a:	d8 dd       	rcall	.-1104   	; 0x81c <sysclk_enable_module>
     c6c:	8f c0       	rjmp	.+286    	; 0xd8c <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     c6e:	c0 39       	cpi	r28, 0x90	; 144
     c70:	fa e0       	ldi	r31, 0x0A	; 10
     c72:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     c74:	21 f4       	brne	.+8      	; 0xc7e <usart_init_rs232+0x170>
     c76:	64 e0       	ldi	r22, 0x04	; 4
     c78:	85 e0       	ldi	r24, 0x05	; 5
     c7a:	d0 dd       	rcall	.-1120   	; 0x81c <sysclk_enable_module>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     c7c:	87 c0       	rjmp	.+270    	; 0xd8c <usart_init_rs232+0x27e>
     c7e:	c0 39       	cpi	r28, 0x90	; 144
     c80:	8b e0       	ldi	r24, 0x0B	; 11
     c82:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     c84:	21 f4       	brne	.+8      	; 0xc8e <usart_init_rs232+0x180>
     c86:	64 e0       	ldi	r22, 0x04	; 4
     c88:	86 e0       	ldi	r24, 0x06	; 6
     c8a:	c8 dd       	rcall	.-1136   	; 0x81c <sysclk_enable_module>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     c8c:	7f c0       	rjmp	.+254    	; 0xd8c <usart_init_rs232+0x27e>
     c8e:	c0 3c       	cpi	r28, 0xC0	; 192
     c90:	e8 e0       	ldi	r30, 0x08	; 8
     c92:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     c94:	21 f4       	brne	.+8      	; 0xc9e <usart_init_rs232+0x190>
     c96:	68 e0       	ldi	r22, 0x08	; 8
     c98:	83 e0       	ldi	r24, 0x03	; 3
     c9a:	c0 dd       	rcall	.-1152   	; 0x81c <sysclk_enable_module>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
     c9c:	77 c0       	rjmp	.+238    	; 0xd8c <usart_init_rs232+0x27e>
     c9e:	c0 3c       	cpi	r28, 0xC0	; 192
     ca0:	f9 e0       	ldi	r31, 0x09	; 9
     ca2:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
     ca4:	21 f4       	brne	.+8      	; 0xcae <usart_init_rs232+0x1a0>
     ca6:	68 e0       	ldi	r22, 0x08	; 8
     ca8:	84 e0       	ldi	r24, 0x04	; 4
     caa:	b8 dd       	rcall	.-1168   	; 0x81c <sysclk_enable_module>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
     cac:	6f c0       	rjmp	.+222    	; 0xd8c <usart_init_rs232+0x27e>
     cae:	c0 3c       	cpi	r28, 0xC0	; 192
     cb0:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
     cb2:	d8 07       	cpc	r29, r24
     cb4:	21 f4       	brne	.+8      	; 0xcbe <usart_init_rs232+0x1b0>
     cb6:	68 e0       	ldi	r22, 0x08	; 8
     cb8:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     cba:	b0 dd       	rcall	.-1184   	; 0x81c <sysclk_enable_module>
     cbc:	67 c0       	rjmp	.+206    	; 0xd8c <usart_init_rs232+0x27e>
     cbe:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     cc0:	eb e0       	ldi	r30, 0x0B	; 11
     cc2:	de 07       	cpc	r29, r30
     cc4:	21 f4       	brne	.+8      	; 0xcce <usart_init_rs232+0x1c0>
     cc6:	68 e0       	ldi	r22, 0x08	; 8
     cc8:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     cca:	a8 dd       	rcall	.-1200   	; 0x81c <sysclk_enable_module>
     ccc:	5f c0       	rjmp	.+190    	; 0xd8c <usart_init_rs232+0x27e>
     cce:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     cd0:	f8 e0       	ldi	r31, 0x08	; 8
     cd2:	df 07       	cpc	r29, r31
     cd4:	21 f4       	brne	.+8      	; 0xcde <usart_init_rs232+0x1d0>
     cd6:	60 e1       	ldi	r22, 0x10	; 16
     cd8:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     cda:	a0 dd       	rcall	.-1216   	; 0x81c <sysclk_enable_module>
     cdc:	57 c0       	rjmp	.+174    	; 0xd8c <usart_init_rs232+0x27e>
     cde:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     ce0:	89 e0       	ldi	r24, 0x09	; 9
     ce2:	d8 07       	cpc	r29, r24
     ce4:	21 f4       	brne	.+8      	; 0xcee <usart_init_rs232+0x1e0>
     ce6:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     ce8:	84 e0       	ldi	r24, 0x04	; 4
     cea:	98 dd       	rcall	.-1232   	; 0x81c <sysclk_enable_module>
     cec:	4f c0       	rjmp	.+158    	; 0xd8c <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     cee:	c0 3a       	cpi	r28, 0xA0	; 160
     cf0:	ea e0       	ldi	r30, 0x0A	; 10
     cf2:	de 07       	cpc	r29, r30
     cf4:	21 f4       	brne	.+8      	; 0xcfe <usart_init_rs232+0x1f0>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     cf6:	60 e1       	ldi	r22, 0x10	; 16
     cf8:	85 e0       	ldi	r24, 0x05	; 5
     cfa:	90 dd       	rcall	.-1248   	; 0x81c <sysclk_enable_module>
     cfc:	47 c0       	rjmp	.+142    	; 0xd8c <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     cfe:	c0 3a       	cpi	r28, 0xA0	; 160
     d00:	fb e0       	ldi	r31, 0x0B	; 11
     d02:	df 07       	cpc	r29, r31
     d04:	21 f4       	brne	.+8      	; 0xd0e <usart_init_rs232+0x200>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     d06:	60 e1       	ldi	r22, 0x10	; 16
     d08:	86 e0       	ldi	r24, 0x06	; 6
     d0a:	88 dd       	rcall	.-1264   	; 0x81c <sysclk_enable_module>
     d0c:	3f c0       	rjmp	.+126    	; 0xd8c <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     d0e:	c0 3b       	cpi	r28, 0xB0	; 176
     d10:	88 e0       	ldi	r24, 0x08	; 8
     d12:	d8 07       	cpc	r29, r24
     d14:	21 f4       	brne	.+8      	; 0xd1e <usart_init_rs232+0x210>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
     d16:	60 e2       	ldi	r22, 0x20	; 32
     d18:	83 e0       	ldi	r24, 0x03	; 3
     d1a:	80 dd       	rcall	.-1280   	; 0x81c <sysclk_enable_module>
     d1c:	37 c0       	rjmp	.+110    	; 0xd8c <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
     d1e:	c0 3b       	cpi	r28, 0xB0	; 176
     d20:	e9 e0       	ldi	r30, 0x09	; 9
     d22:	de 07       	cpc	r29, r30
     d24:	21 f4       	brne	.+8      	; 0xd2e <usart_init_rs232+0x220>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
     d26:	60 e2       	ldi	r22, 0x20	; 32
     d28:	84 e0       	ldi	r24, 0x04	; 4
     d2a:	78 dd       	rcall	.-1296   	; 0x81c <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
     d2c:	2f c0       	rjmp	.+94     	; 0xd8c <usart_init_rs232+0x27e>
     d2e:	c0 3b       	cpi	r28, 0xB0	; 176
     d30:	fa e0       	ldi	r31, 0x0A	; 10
     d32:	df 07       	cpc	r29, r31
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     d34:	21 f4       	brne	.+8      	; 0xd3e <usart_init_rs232+0x230>
     d36:	60 e2       	ldi	r22, 0x20	; 32
     d38:	85 e0       	ldi	r24, 0x05	; 5
     d3a:	70 dd       	rcall	.-1312   	; 0x81c <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     d3c:	27 c0       	rjmp	.+78     	; 0xd8c <usart_init_rs232+0x27e>
     d3e:	c0 3b       	cpi	r28, 0xB0	; 176
     d40:	8b e0       	ldi	r24, 0x0B	; 11
     d42:	d8 07       	cpc	r29, r24
     d44:	21 f4       	brne	.+8      	; 0xd4e <usart_init_rs232+0x240>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
     d46:	60 e2       	ldi	r22, 0x20	; 32
     d48:	86 e0       	ldi	r24, 0x06	; 6
     d4a:	68 dd       	rcall	.-1328   	; 0x81c <sysclk_enable_module>
     d4c:	1f c0       	rjmp	.+62     	; 0xd8c <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
     d4e:	c0 38       	cpi	r28, 0x80	; 128
     d50:	e4 e0       	ldi	r30, 0x04	; 4
     d52:	de 07       	cpc	r29, r30
     d54:	21 f4       	brne	.+8      	; 0xd5e <usart_init_rs232+0x250>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     d56:	60 e4       	ldi	r22, 0x40	; 64
     d58:	83 e0       	ldi	r24, 0x03	; 3
     d5a:	60 dd       	rcall	.-1344   	; 0x81c <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     d5c:	17 c0       	rjmp	.+46     	; 0xd8c <usart_init_rs232+0x27e>
     d5e:	c0 39       	cpi	r28, 0x90	; 144
     d60:	f4 e0       	ldi	r31, 0x04	; 4
     d62:	df 07       	cpc	r29, r31
     d64:	21 f4       	brne	.+8      	; 0xd6e <usart_init_rs232+0x260>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
     d66:	60 e4       	ldi	r22, 0x40	; 64
     d68:	84 e0       	ldi	r24, 0x04	; 4
     d6a:	58 dd       	rcall	.-1360   	; 0x81c <sysclk_enable_module>
     d6c:	0f c0       	rjmp	.+30     	; 0xd8c <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
     d6e:	c0 3a       	cpi	r28, 0xA0	; 160
     d70:	84 e0       	ldi	r24, 0x04	; 4
     d72:	d8 07       	cpc	r29, r24
     d74:	21 f4       	brne	.+8      	; 0xd7e <usart_init_rs232+0x270>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     d76:	60 e4       	ldi	r22, 0x40	; 64
     d78:	85 e0       	ldi	r24, 0x05	; 5
     d7a:	50 dd       	rcall	.-1376   	; 0x81c <sysclk_enable_module>
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     d7c:	07 c0       	rjmp	.+14     	; 0xd8c <usart_init_rs232+0x27e>
     d7e:	c0 3b       	cpi	r28, 0xB0	; 176
     d80:	e4 e0       	ldi	r30, 0x04	; 4
     d82:	de 07       	cpc	r29, r30
     d84:	19 f4       	brne	.+6      	; 0xd8c <usart_init_rs232+0x27e>
     d86:	60 e4       	ldi	r22, 0x40	; 64
     d88:	86 e0       	ldi	r24, 0x06	; 6
     d8a:	48 dd       	rcall	.-1392   	; 0x81c <sysclk_enable_module>
     d8c:	8d 81       	ldd	r24, Y+5	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     d8e:	8f 73       	andi	r24, 0x3F	; 63
     d90:	8d 83       	std	Y+5, r24	; 0x05
     d92:	f8 01       	movw	r30, r16
     d94:	95 81       	ldd	r25, Z+5	; 0x05
     d96:	84 81       	ldd	r24, Z+4	; 0x04
     d98:	89 2b       	or	r24, r25
     d9a:	96 81       	ldd	r25, Z+6	; 0x06
     d9c:	91 11       	cpse	r25, r1
     d9e:	98 e0       	ldi	r25, 0x08	; 8
     da0:	89 2b       	or	r24, r25
     da2:	8d 83       	std	Y+5, r24	; 0x05
     da4:	f8 01       	movw	r30, r16
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     da6:	40 81       	ld	r20, Z
     da8:	51 81       	ldd	r21, Z+1	; 0x01
     daa:	62 81       	ldd	r22, Z+2	; 0x02
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     dac:	73 81       	ldd	r23, Z+3	; 0x03
     dae:	00 e8       	ldi	r16, 0x80	; 128
     db0:	14 e8       	ldi	r17, 0x84	; 132
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     db2:	2e e1       	ldi	r18, 0x1E	; 30
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	ce 01       	movw	r24, r28
     db8:	9b dd       	rcall	.-1226   	; 0x8f0 <usart_set_baudrate>
     dba:	9c 81       	ldd	r25, Y+4	; 0x04
     dbc:	98 60       	ori	r25, 0x08	; 8
     dbe:	9c 83       	std	Y+4, r25	; 0x04
     dc0:	9c 81       	ldd	r25, Y+4	; 0x04
     dc2:	90 61       	ori	r25, 0x10	; 16
     dc4:	9c 83       	std	Y+4, r25	; 0x04
     dc6:	df 91       	pop	r29
     dc8:	cf 91       	pop	r28
     dca:	1f 91       	pop	r17
     dcc:	0f 91       	pop	r16
     dce:	08 95       	ret

00000dd0 <__portable_avr_delay_cycles>:
///////////////////////////////////////////////////

void response_debug(uint8_t code) {
	usart_tx_at(USART_SERIAL_EXAMPLE, STATUS_AT_DEBUG);
	usart_putchar(USART_SERIAL_EXAMPLE, 0x30+code);
}  
     dd0:	04 c0       	rjmp	.+8      	; 0xdda <__portable_avr_delay_cycles+0xa>
     dd2:	61 50       	subi	r22, 0x01	; 1
     dd4:	71 09       	sbc	r23, r1
     dd6:	81 09       	sbc	r24, r1
     dd8:	91 09       	sbc	r25, r1
     dda:	61 15       	cp	r22, r1
     ddc:	71 05       	cpc	r23, r1
     dde:	81 05       	cpc	r24, r1
     de0:	91 05       	cpc	r25, r1
     de2:	b9 f7       	brne	.-18     	; 0xdd2 <__portable_avr_delay_cycles+0x2>
     de4:	08 95       	ret

00000de6 <usart_tx_at>:
     de6:	0f 93       	push	r16
     de8:	1f 93       	push	r17
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	eb 01       	movw	r28, r22
     df0:	68 81       	ld	r22, Y
     df2:	66 23       	and	r22, r22
     df4:	39 f0       	breq	.+14     	; 0xe04 <usart_tx_at+0x1e>
     df6:	8c 01       	movw	r16, r24
     df8:	21 96       	adiw	r28, 0x01	; 1
     dfa:	c8 01       	movw	r24, r16
     dfc:	71 dd       	rcall	.-1310   	; 0x8e0 <usart_putchar>
     dfe:	69 91       	ld	r22, Y+
     e00:	61 11       	cpse	r22, r1
     e02:	fb cf       	rjmp	.-10     	; 0xdfa <usart_tx_at+0x14>
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	1f 91       	pop	r17
     e0a:	0f 91       	pop	r16
     e0c:	08 95       	ret

00000e0e <led_blink>:
     e0e:	af 92       	push	r10
     e10:	bf 92       	push	r11
     e12:	cf 92       	push	r12
     e14:	df 92       	push	r13
     e16:	ef 92       	push	r14
     e18:	ff 92       	push	r15
     e1a:	0f 93       	push	r16
     e1c:	1f 93       	push	r17
     e1e:	cf 93       	push	r28
     e20:	df 93       	push	r29
     e22:	e0 ec       	ldi	r30, 0xC0	; 192
     e24:	f7 e0       	ldi	r31, 0x07	; 7
     e26:	94 81       	ldd	r25, Z+4	; 0x04
     e28:	97 7f       	andi	r25, 0xF7	; 247
     e2a:	94 83       	std	Z+4, r25	; 0x04
     e2c:	88 23       	and	r24, r24
     e2e:	09 f4       	brne	.+2      	; 0xe32 <led_blink+0x24>
     e30:	4c c0       	rjmp	.+152    	; 0xeca <led_blink+0xbc>
     e32:	28 ee       	ldi	r18, 0xE8	; 232
     e34:	33 e0       	ldi	r19, 0x03	; 3
     e36:	82 9f       	mul	r24, r18
     e38:	a0 01       	movw	r20, r0
     e3a:	83 9f       	mul	r24, r19
     e3c:	50 0d       	add	r21, r0
     e3e:	11 24       	eor	r1, r1
     e40:	95 2f       	mov	r25, r21
     e42:	99 0f       	add	r25, r25
     e44:	99 0b       	sbc	r25, r25
     e46:	68 94       	set
     e48:	aa 24       	eor	r10, r10
     e4a:	a7 f8       	bld	r10, 7
     e4c:	0f 2e       	mov	r0, r31
     e4e:	f4 e8       	ldi	r31, 0x84	; 132
     e50:	bf 2e       	mov	r11, r31
     e52:	f0 2d       	mov	r31, r0
     e54:	0f 2e       	mov	r0, r31
     e56:	fe e1       	ldi	r31, 0x1E	; 30
     e58:	cf 2e       	mov	r12, r31
     e5a:	f0 2d       	mov	r31, r0
     e5c:	d1 2c       	mov	r13, r1
     e5e:	e1 2c       	mov	r14, r1
     e60:	f1 2c       	mov	r15, r1
     e62:	00 e0       	ldi	r16, 0x00	; 0
     e64:	10 e0       	ldi	r17, 0x00	; 0
     e66:	24 2f       	mov	r18, r20
     e68:	35 2f       	mov	r19, r21
     e6a:	49 2f       	mov	r20, r25
     e6c:	59 2f       	mov	r21, r25
     e6e:	69 2f       	mov	r22, r25
     e70:	79 2f       	mov	r23, r25
     e72:	89 2f       	mov	r24, r25
     e74:	4b d4       	rcall	.+2198   	; 0x170c <__muldi3>
     e76:	0f 2e       	mov	r0, r31
     e78:	f6 e0       	ldi	r31, 0x06	; 6
     e7a:	af 2e       	mov	r10, r31
     e7c:	f0 2d       	mov	r31, r0
     e7e:	b1 2c       	mov	r11, r1
     e80:	c1 2c       	mov	r12, r1
     e82:	97 d4       	rcall	.+2350   	; 0x17b2 <__udivdi3>
     e84:	29 51       	subi	r18, 0x19	; 25
     e86:	3c 4f       	sbci	r19, 0xFC	; 252
     e88:	4f 4f       	sbci	r20, 0xFF	; 255
     e8a:	5f 4f       	sbci	r21, 0xFF	; 255
     e8c:	6f 4f       	sbci	r22, 0xFF	; 255
     e8e:	7f 4f       	sbci	r23, 0xFF	; 255
     e90:	8f 4f       	sbci	r24, 0xFF	; 255
     e92:	9f 4f       	sbci	r25, 0xFF	; 255
     e94:	71 d3       	rcall	.+1762   	; 0x1578 <__floatundisf>
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	4a e7       	ldi	r20, 0x7A	; 122
     e9c:	54 e4       	ldi	r21, 0x44	; 68
     e9e:	ca d2       	rcall	.+1428   	; 0x1434 <__divsf3>
     ea0:	36 d3       	rcall	.+1644   	; 0x150e <__fixunssfdi>
     ea2:	02 2f       	mov	r16, r18
     ea4:	13 2f       	mov	r17, r19
     ea6:	d4 2f       	mov	r29, r20
     ea8:	c5 2f       	mov	r28, r21
     eaa:	62 2f       	mov	r22, r18
     eac:	71 2f       	mov	r23, r17
     eae:	8d 2f       	mov	r24, r29
     eb0:	9c 2f       	mov	r25, r28
     eb2:	8e df       	rcall	.-228    	; 0xdd0 <__portable_avr_delay_cycles>
     eb4:	e0 ec       	ldi	r30, 0xC0	; 192
     eb6:	f7 e0       	ldi	r31, 0x07	; 7
     eb8:	84 81       	ldd	r24, Z+4	; 0x04
     eba:	88 60       	ori	r24, 0x08	; 8
     ebc:	84 83       	std	Z+4, r24	; 0x04
     ebe:	60 2f       	mov	r22, r16
     ec0:	71 2f       	mov	r23, r17
     ec2:	8d 2f       	mov	r24, r29
     ec4:	9c 2f       	mov	r25, r28
     ec6:	84 df       	rcall	.-248    	; 0xdd0 <__portable_avr_delay_cycles>
     ec8:	0f c0       	rjmp	.+30     	; 0xee8 <led_blink+0xda>
     eca:	61 e0       	ldi	r22, 0x01	; 1
     ecc:	70 e0       	ldi	r23, 0x00	; 0
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	7e df       	rcall	.-260    	; 0xdd0 <__portable_avr_delay_cycles>
     ed4:	e0 ec       	ldi	r30, 0xC0	; 192
     ed6:	f7 e0       	ldi	r31, 0x07	; 7
     ed8:	84 81       	ldd	r24, Z+4	; 0x04
     eda:	88 60       	ori	r24, 0x08	; 8
     edc:	84 83       	std	Z+4, r24	; 0x04
     ede:	61 e0       	ldi	r22, 0x01	; 1
     ee0:	70 e0       	ldi	r23, 0x00	; 0
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	74 df       	rcall	.-280    	; 0xdd0 <__portable_avr_delay_cycles>
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
     eec:	1f 91       	pop	r17
     eee:	0f 91       	pop	r16
     ef0:	ff 90       	pop	r15
     ef2:	ef 90       	pop	r14
     ef4:	df 90       	pop	r13
     ef6:	cf 90       	pop	r12
     ef8:	bf 90       	pop	r11
     efa:	af 90       	pop	r10
     efc:	08 95       	ret

00000efe <at_timeout_start>:
     efe:	e0 e0       	ldi	r30, 0x00	; 0
     f00:	f8 e0       	ldi	r31, 0x08	; 8
     f02:	84 85       	ldd	r24, Z+12	; 0x0c
     f04:	81 60       	ori	r24, 0x01	; 1
     f06:	84 87       	std	Z+12, r24	; 0x0c
     f08:	10 a2       	std	Z+32, r1	; 0x20
     f0a:	11 a2       	std	Z+33, r1	; 0x21
     f0c:	78 94       	sei
     f0e:	08 95       	ret

00000f10 <at_timeout_stop>:
     f10:	f8 94       	cli
     f12:	e0 e0       	ldi	r30, 0x00	; 0
     f14:	f8 e0       	ldi	r31, 0x08	; 8
     f16:	84 85       	ldd	r24, Z+12	; 0x0c
     f18:	81 60       	ori	r24, 0x01	; 1
     f1a:	84 87       	std	Z+12, r24	; 0x0c
     f1c:	08 95       	ret

00000f1e <usart_rx_at>:
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	ec 01       	movw	r28, r24
     f24:	ec df       	rcall	.-40     	; 0xefe <at_timeout_start>
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	90 91 3f 21 	lds	r25, 0x213F	; 0x80213f <status_at_timeout>
     f2c:	88 23       	and	r24, r24
     f2e:	2c f0       	brlt	.+10     	; 0xf3a <usart_rx_at+0x1c>
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	91 11       	cpse	r25, r1
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	81 11       	cpse	r24, r1
     f38:	f6 cf       	rjmp	.-20     	; 0xf26 <usart_rx_at+0x8>
     f3a:	ea df       	rcall	.-44     	; 0xf10 <at_timeout_stop>
     f3c:	88 81       	ld	r24, Y
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	08 95       	ret

00000f44 <at_response>:
     f44:	cf 92       	push	r12
     f46:	df 92       	push	r13
     f48:	ff 92       	push	r15
     f4a:	0f 93       	push	r16
     f4c:	1f 93       	push	r17
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	e2 97       	sbiw	r28, 0x32	; 50
     f58:	cd bf       	out	0x3d, r28	; 61
     f5a:	de bf       	out	0x3e, r29	; 62
     f5c:	6c 01       	movw	r12, r24
     f5e:	10 92 3f 21 	sts	0x213F, r1	; 0x80213f <status_at_timeout>
     f62:	80 91 3f 21 	lds	r24, 0x213F	; 0x80213f <status_at_timeout>
     f66:	81 11       	cpse	r24, r1
     f68:	50 c0       	rjmp	.+160    	; 0x100a <at_response+0xc6>
     f6a:	f1 2c       	mov	r15, r1
     f6c:	0f 2d       	mov	r16, r15
     f6e:	10 e0       	ldi	r17, 0x00	; 0
     f70:	c6 01       	movw	r24, r12
     f72:	d5 df       	rcall	.-86     	; 0xf1e <usart_rx_at>
     f74:	98 01       	movw	r18, r16
     f76:	e1 e0       	ldi	r30, 0x01	; 1
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	ec 0f       	add	r30, r28
     f7c:	fd 1f       	adc	r31, r29
     f7e:	e2 0f       	add	r30, r18
     f80:	f3 1f       	adc	r31, r19
     f82:	80 83       	st	Z, r24
     f84:	fe 01       	movw	r30, r28
     f86:	e2 0f       	add	r30, r18
     f88:	f3 1f       	adc	r31, r19
     f8a:	91 e0       	ldi	r25, 0x01	; 1
     f8c:	20 81       	ld	r18, Z
     f8e:	2f 34       	cpi	r18, 0x4F	; 79
     f90:	09 f0       	breq	.+2      	; 0xf94 <at_response+0x50>
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	99 23       	and	r25, r25
     f96:	41 f0       	breq	.+16     	; 0xfa8 <at_response+0x64>
     f98:	91 e0       	ldi	r25, 0x01	; 1
     f9a:	8b 34       	cpi	r24, 0x4B	; 75
     f9c:	09 f0       	breq	.+2      	; 0xfa0 <at_response+0x5c>
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	99 23       	and	r25, r25
     fa2:	11 f0       	breq	.+4      	; 0xfa8 <at_response+0x64>
     fa4:	f3 94       	inc	r15
     fa6:	05 c0       	rjmp	.+10     	; 0xfb2 <at_response+0x6e>
     fa8:	f3 94       	inc	r15
     faa:	80 91 3f 21 	lds	r24, 0x213F	; 0x80213f <status_at_timeout>
     fae:	88 23       	and	r24, r24
     fb0:	e9 f2       	breq	.-70     	; 0xf6c <at_response+0x28>
     fb2:	66 ec       	ldi	r22, 0xC6	; 198
     fb4:	70 e2       	ldi	r23, 0x20	; 32
     fb6:	80 ea       	ldi	r24, 0xA0	; 160
     fb8:	9a e0       	ldi	r25, 0x0A	; 10
     fba:	15 df       	rcall	.-470    	; 0xde6 <usart_tx_at>
     fbc:	61 e7       	ldi	r22, 0x71	; 113
     fbe:	70 e2       	ldi	r23, 0x20	; 32
     fc0:	80 ea       	ldi	r24, 0xA0	; 160
     fc2:	9a e0       	ldi	r25, 0x0A	; 10
     fc4:	10 df       	rcall	.-480    	; 0xde6 <usart_tx_at>
     fc6:	ff 20       	and	r15, r15
     fc8:	99 f0       	breq	.+38     	; 0xff0 <at_response+0xac>
     fca:	ce 01       	movw	r24, r28
     fcc:	01 96       	adiw	r24, 0x01	; 1
     fce:	6c 01       	movw	r12, r24
     fd0:	fa 94       	dec	r15
     fd2:	0f 2d       	mov	r16, r15
     fd4:	10 e0       	ldi	r17, 0x00	; 0
     fd6:	0f 5f       	subi	r16, 0xFF	; 255
     fd8:	1f 4f       	sbci	r17, 0xFF	; 255
     fda:	08 0f       	add	r16, r24
     fdc:	19 1f       	adc	r17, r25
     fde:	f6 01       	movw	r30, r12
     fe0:	61 91       	ld	r22, Z+
     fe2:	6f 01       	movw	r12, r30
     fe4:	80 ea       	ldi	r24, 0xA0	; 160
     fe6:	9a e0       	ldi	r25, 0x0A	; 10
     fe8:	7b dc       	rcall	.-1802   	; 0x8e0 <usart_putchar>
     fea:	c0 16       	cp	r12, r16
     fec:	d1 06       	cpc	r13, r17
     fee:	b9 f7       	brne	.-18     	; 0xfde <at_response+0x9a>
     ff0:	66 ec       	ldi	r22, 0xC6	; 198
     ff2:	70 e2       	ldi	r23, 0x20	; 32
     ff4:	80 ea       	ldi	r24, 0xA0	; 160
     ff6:	9a e0       	ldi	r25, 0x0A	; 10
     ff8:	f6 de       	rcall	.-532    	; 0xde6 <usart_tx_at>
     ffa:	61 e7       	ldi	r22, 0x71	; 113
     ffc:	70 e2       	ldi	r23, 0x20	; 32
     ffe:	80 ea       	ldi	r24, 0xA0	; 160
    1000:	9a e0       	ldi	r25, 0x0A	; 10
    1002:	f1 de       	rcall	.-542    	; 0xde6 <usart_tx_at>
    1004:	80 91 3f 21 	lds	r24, 0x213F	; 0x80213f <status_at_timeout>
    1008:	0b c0       	rjmp	.+22     	; 0x1020 <at_response+0xdc>
    100a:	66 ec       	ldi	r22, 0xC6	; 198
    100c:	70 e2       	ldi	r23, 0x20	; 32
    100e:	80 ea       	ldi	r24, 0xA0	; 160
    1010:	9a e0       	ldi	r25, 0x0A	; 10
    1012:	e9 de       	rcall	.-558    	; 0xde6 <usart_tx_at>
    1014:	61 e7       	ldi	r22, 0x71	; 113
    1016:	70 e2       	ldi	r23, 0x20	; 32
    1018:	80 ea       	ldi	r24, 0xA0	; 160
    101a:	9a e0       	ldi	r25, 0x0A	; 10
    101c:	e4 de       	rcall	.-568    	; 0xde6 <usart_tx_at>
    101e:	e8 cf       	rjmp	.-48     	; 0xff0 <at_response+0xac>
    1020:	e2 96       	adiw	r28, 0x32	; 50
    1022:	cd bf       	out	0x3d, r28	; 61
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	0f 91       	pop	r16
    102e:	ff 90       	pop	r15
    1030:	df 90       	pop	r13
    1032:	cf 90       	pop	r12
    1034:	08 95       	ret

00001036 <mqtt_packet>:
    1036:	4f 92       	push	r4
    1038:	5f 92       	push	r5
    103a:	6f 92       	push	r6
    103c:	7f 92       	push	r7
    103e:	8f 92       	push	r8
    1040:	9f 92       	push	r9
    1042:	af 92       	push	r10
    1044:	bf 92       	push	r11
    1046:	cf 92       	push	r12
    1048:	df 92       	push	r13
    104a:	ef 92       	push	r14
    104c:	ff 92       	push	r15
    104e:	0f 93       	push	r16
    1050:	1f 93       	push	r17
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	cf 5f       	subi	r28, 0xFF	; 255
    105c:	d1 09       	sbc	r29, r1
    105e:	cd bf       	out	0x3d, r28	; 61
    1060:	de bf       	out	0x3e, r29	; 62
    1062:	f8 2e       	mov	r15, r24
    1064:	e9 2e       	mov	r14, r25
    1066:	81 e3       	ldi	r24, 0x31	; 49
    1068:	e4 e3       	ldi	r30, 0x34	; 52
    106a:	f0 e2       	ldi	r31, 0x20	; 32
    106c:	de 01       	movw	r26, r28
    106e:	11 96       	adiw	r26, 0x01	; 1
    1070:	01 90       	ld	r0, Z+
    1072:	0d 92       	st	X+, r0
    1074:	8a 95       	dec	r24
    1076:	e1 f7       	brne	.-8      	; 0x1070 <mqtt_packet+0x3a>
    1078:	c4 50       	subi	r28, 0x04	; 4
    107a:	df 4f       	sbci	r29, 0xFF	; 255
    107c:	18 82       	st	Y, r1
    107e:	19 82       	std	Y+1, r1	; 0x01
    1080:	cc 5f       	subi	r28, 0xFC	; 252
    1082:	d0 40       	sbci	r29, 0x00	; 0
    1084:	c2 50       	subi	r28, 0x02	; 2
    1086:	df 4f       	sbci	r29, 0xFF	; 255
    1088:	18 82       	st	Y, r1
    108a:	19 82       	std	Y+1, r1	; 0x01
    108c:	ce 5f       	subi	r28, 0xFE	; 254
    108e:	d0 40       	sbci	r29, 0x00	; 0
    1090:	ef 2d       	mov	r30, r15
    1092:	f9 2f       	mov	r31, r25
    1094:	df 01       	movw	r26, r30
    1096:	0d 90       	ld	r0, X+
    1098:	00 20       	and	r0, r0
    109a:	e9 f7       	brne	.-6      	; 0x1096 <mqtt_packet+0x60>
    109c:	11 97       	sbiw	r26, 0x01	; 1
    109e:	8d 01       	movw	r16, r26
    10a0:	0e 1b       	sub	r16, r30
    10a2:	1f 0b       	sbc	r17, r31
    10a4:	83 e7       	ldi	r24, 0x73	; 115
    10a6:	90 e2       	ldi	r25, 0x20	; 32
    10a8:	88 87       	std	Y+8, r24	; 0x08
    10aa:	99 87       	std	Y+9, r25	; 0x09
    10ac:	84 e1       	ldi	r24, 0x14	; 20
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	8e 87       	std	Y+14, r24	; 0x0e
    10b2:	9f 87       	std	Y+15, r25	; 0x0f
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	88 8b       	std	Y+16, r24	; 0x10
    10b8:	82 e7       	ldi	r24, 0x72	; 114
    10ba:	90 e2       	ldi	r25, 0x20	; 32
    10bc:	8e a3       	std	Y+38, r24	; 0x26
    10be:	9f a3       	std	Y+39, r25	; 0x27
    10c0:	8c a7       	std	Y+44, r24	; 0x2c
    10c2:	9d a7       	std	Y+45, r25	; 0x2d
    10c4:	84 e0       	ldi	r24, 0x04	; 4
    10c6:	8f 83       	std	Y+7, r24	; 0x07
    10c8:	ae 01       	movw	r20, r28
    10ca:	4f 5f       	subi	r20, 0xFF	; 255
    10cc:	5f 4f       	sbci	r21, 0xFF	; 255
    10ce:	68 ec       	ldi	r22, 0xC8	; 200
    10d0:	70 e0       	ldi	r23, 0x00	; 0
    10d2:	ce 01       	movw	r24, r28
    10d4:	c2 96       	adiw	r24, 0x32	; 50
    10d6:	24 d9       	rcall	.-3512   	; 0x320 <MQTTSerialize_connect>
    10d8:	3c 01       	movw	r6, r24
    10da:	8a e7       	ldi	r24, 0x7A	; 122
    10dc:	90 e2       	ldi	r25, 0x20	; 32
    10de:	c6 50       	subi	r28, 0x06	; 6
    10e0:	df 4f       	sbci	r29, 0xFF	; 255
    10e2:	88 83       	st	Y, r24
    10e4:	99 83       	std	Y+1, r25	; 0x01
    10e6:	ca 5f       	subi	r28, 0xFA	; 250
    10e8:	d0 40       	sbci	r29, 0x00	; 0
    10ea:	0f 2e       	mov	r0, r31
    10ec:	f8 ec       	ldi	r31, 0xC8	; 200
    10ee:	4f 2e       	mov	r4, r31
    10f0:	51 2c       	mov	r5, r1
    10f2:	f0 2d       	mov	r31, r0
    10f4:	b2 01       	movw	r22, r4
    10f6:	66 19       	sub	r22, r6
    10f8:	77 09       	sbc	r23, r7
    10fa:	1f 93       	push	r17
    10fc:	0f 93       	push	r16
    10fe:	ef 92       	push	r14
    1100:	ff 92       	push	r15
    1102:	c6 50       	subi	r28, 0x06	; 6
    1104:	df 4f       	sbci	r29, 0xFF	; 255
    1106:	88 80       	ld	r8, Y
    1108:	ca 5f       	subi	r28, 0xFA	; 250
    110a:	d0 40       	sbci	r29, 0x00	; 0
    110c:	c5 50       	subi	r28, 0x05	; 5
    110e:	df 4f       	sbci	r29, 0xFF	; 255
    1110:	98 80       	ld	r9, Y
    1112:	cb 5f       	subi	r28, 0xFB	; 251
    1114:	d0 40       	sbci	r29, 0x00	; 0
    1116:	c4 50       	subi	r28, 0x04	; 4
    1118:	df 4f       	sbci	r29, 0xFF	; 255
    111a:	a8 80       	ld	r10, Y
    111c:	cc 5f       	subi	r28, 0xFC	; 252
    111e:	d0 40       	sbci	r29, 0x00	; 0
    1120:	c3 50       	subi	r28, 0x03	; 3
    1122:	df 4f       	sbci	r29, 0xFF	; 255
    1124:	b8 80       	ld	r11, Y
    1126:	cd 5f       	subi	r28, 0xFD	; 253
    1128:	d0 40       	sbci	r29, 0x00	; 0
    112a:	c2 50       	subi	r28, 0x02	; 2
    112c:	df 4f       	sbci	r29, 0xFF	; 255
    112e:	c8 80       	ld	r12, Y
    1130:	ce 5f       	subi	r28, 0xFE	; 254
    1132:	d0 40       	sbci	r29, 0x00	; 0
    1134:	c1 50       	subi	r28, 0x01	; 1
    1136:	df 4f       	sbci	r29, 0xFF	; 255
    1138:	d8 80       	ld	r13, Y
    113a:	cf 5f       	subi	r28, 0xFF	; 255
    113c:	d0 40       	sbci	r29, 0x00	; 0
    113e:	e1 2c       	mov	r14, r1
    1140:	f1 2c       	mov	r15, r1
    1142:	00 e0       	ldi	r16, 0x00	; 0
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	40 e0       	ldi	r20, 0x00	; 0
    114a:	82 e3       	ldi	r24, 0x32	; 50
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	8c 0f       	add	r24, r28
    1150:	9d 1f       	adc	r25, r29
    1152:	86 0d       	add	r24, r6
    1154:	97 1d       	adc	r25, r7
    1156:	df da       	rcall	.-2626   	; 0x716 <MQTTSerialize_publish>
    1158:	68 0e       	add	r6, r24
    115a:	79 1e       	adc	r7, r25
    115c:	b2 01       	movw	r22, r4
    115e:	66 19       	sub	r22, r6
    1160:	77 09       	sbc	r23, r7
    1162:	82 e3       	ldi	r24, 0x32	; 50
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	8c 0f       	add	r24, r28
    1168:	9d 1f       	adc	r25, r29
    116a:	86 0d       	add	r24, r6
    116c:	97 1d       	adc	r25, r7
    116e:	ca d9       	rcall	.-3180   	; 0x504 <MQTTSerialize_disconnect>
    1170:	86 0d       	add	r24, r6
    1172:	97 1d       	adc	r25, r7
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	18 16       	cp	r1, r24
    117e:	19 06       	cpc	r1, r25
    1180:	7c f4       	brge	.+30     	; 0x11a0 <mqtt_packet+0x16a>
    1182:	8e 01       	movw	r16, r28
    1184:	0e 5c       	subi	r16, 0xCE	; 206
    1186:	1f 4f       	sbci	r17, 0xFF	; 255
    1188:	78 01       	movw	r14, r16
    118a:	e8 0e       	add	r14, r24
    118c:	f9 1e       	adc	r15, r25
    118e:	f8 01       	movw	r30, r16
    1190:	61 91       	ld	r22, Z+
    1192:	8f 01       	movw	r16, r30
    1194:	80 ea       	ldi	r24, 0xA0	; 160
    1196:	98 e0       	ldi	r25, 0x08	; 8
    1198:	a3 db       	rcall	.-2234   	; 0x8e0 <usart_putchar>
    119a:	0e 15       	cp	r16, r14
    119c:	1f 05       	cpc	r17, r15
    119e:	b9 f7       	brne	.-18     	; 0x118e <mqtt_packet+0x158>
    11a0:	66 ec       	ldi	r22, 0xC6	; 198
    11a2:	70 e2       	ldi	r23, 0x20	; 32
    11a4:	80 ea       	ldi	r24, 0xA0	; 160
    11a6:	98 e0       	ldi	r25, 0x08	; 8
    11a8:	9b db       	rcall	.-2250   	; 0x8e0 <usart_putchar>
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	c1 50       	subi	r28, 0x01	; 1
    11b0:	df 4f       	sbci	r29, 0xFF	; 255
    11b2:	cd bf       	out	0x3d, r28	; 61
    11b4:	de bf       	out	0x3e, r29	; 62
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	1f 91       	pop	r17
    11bc:	0f 91       	pop	r16
    11be:	ff 90       	pop	r15
    11c0:	ef 90       	pop	r14
    11c2:	df 90       	pop	r13
    11c4:	cf 90       	pop	r12
    11c6:	bf 90       	pop	r11
    11c8:	af 90       	pop	r10
    11ca:	9f 90       	pop	r9
    11cc:	8f 90       	pop	r8
    11ce:	7f 90       	pop	r7
    11d0:	6f 90       	pop	r6
    11d2:	5f 90       	pop	r5
    11d4:	4f 90       	pop	r4
    11d6:	08 95       	ret

000011d8 <at_command_timeout_setup>:

void at_command_timeout_setup() {
	//AT_TIMEOUT_TC.INTCTRLA |= (0<<0); //disable counter
	AT_TIMEOUT_TC.INTCTRLA |= (1<<0);
    11d8:	e0 e0       	ldi	r30, 0x00	; 0
    11da:	f8 e0       	ldi	r31, 0x08	; 8
    11dc:	86 81       	ldd	r24, Z+6	; 0x06
    11de:	81 60       	ori	r24, 0x01	; 1
    11e0:	86 83       	std	Z+6, r24	; 0x06
	AT_TIMEOUT_TC.CTRLA = TC_CLKSEL_DIV1024_gc;
    11e2:	87 e0       	ldi	r24, 0x07	; 7
    11e4:	80 83       	st	Z, r24
	AT_TIMEOUT_TC.CTRLB |= 0b000;
    11e6:	81 81       	ldd	r24, Z+1	; 0x01
    11e8:	81 83       	std	Z+1, r24	; 0x01
	AT_TIMEOUT_TC.PER = 6000;
    11ea:	80 e7       	ldi	r24, 0x70	; 112
    11ec:	97 e1       	ldi	r25, 0x17	; 23
    11ee:	86 a3       	std	Z+38, r24	; 0x26
    11f0:	97 a3       	std	Z+39, r25	; 0x27
    11f2:	08 95       	ret

000011f4 <__vector_14>:
}


ISR(TCC0_OVF_vect) {
    11f4:	1f 92       	push	r1
    11f6:	0f 92       	push	r0
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	0f 92       	push	r0
    11fc:	11 24       	eor	r1, r1
    11fe:	08 b6       	in	r0, 0x38	; 56
    1200:	0f 92       	push	r0
    1202:	18 be       	out	0x38, r1	; 56
    1204:	09 b6       	in	r0, 0x39	; 57
    1206:	0f 92       	push	r0
    1208:	19 be       	out	0x39, r1	; 57
    120a:	0b b6       	in	r0, 0x3b	; 59
    120c:	0f 92       	push	r0
    120e:	1b be       	out	0x3b, r1	; 59
    1210:	2f 93       	push	r18
    1212:	3f 93       	push	r19
    1214:	4f 93       	push	r20
    1216:	5f 93       	push	r21
    1218:	6f 93       	push	r22
    121a:	7f 93       	push	r23
    121c:	8f 93       	push	r24
    121e:	9f 93       	push	r25
    1220:	af 93       	push	r26
    1222:	bf 93       	push	r27
    1224:	ef 93       	push	r30
	at_timeout_stop();
    1226:	ff 93       	push	r31
	status_at_timeout = 1;
    1228:	73 de       	rcall	.-794    	; 0xf10 <at_timeout_stop>
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	80 93 3f 21 	sts	0x213F, r24	; 0x80213f <status_at_timeout>
}
    1230:	ff 91       	pop	r31
    1232:	ef 91       	pop	r30
    1234:	bf 91       	pop	r27
    1236:	af 91       	pop	r26
    1238:	9f 91       	pop	r25
    123a:	8f 91       	pop	r24
    123c:	7f 91       	pop	r23
    123e:	6f 91       	pop	r22
    1240:	5f 91       	pop	r21
    1242:	4f 91       	pop	r20
    1244:	3f 91       	pop	r19
    1246:	2f 91       	pop	r18
    1248:	0f 90       	pop	r0
    124a:	0b be       	out	0x3b, r0	; 59
    124c:	0f 90       	pop	r0
    124e:	09 be       	out	0x39, r0	; 57
    1250:	0f 90       	pop	r0
    1252:	08 be       	out	0x38, r0	; 56
    1254:	0f 90       	pop	r0
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	0f 90       	pop	r0
    125a:	1f 90       	pop	r1
    125c:	18 95       	reti

0000125e <main>:
		
	/* Initialize the board.
	 * The board-specific conf_board.h file contains the configuration of
	 * the board initialization.
	 */
	board_init();
    125e:	f8 94       	cli
	//pmic_init(); //needed for TC ASF code. Check if needed in real implementation.
	PMIC.CTRL = 0x01; //low level interrupt
    1260:	1a db       	rcall	.-2508   	; 0x896 <board_init>
    1262:	c1 e0       	ldi	r28, 0x01	; 1
    1264:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	//sysclk_init();
	
	//LED setup
	PORTQ.DIR |= (1<<3);
    1268:	e0 ec       	ldi	r30, 0xC0	; 192
    126a:	f7 e0       	ldi	r31, 0x07	; 7
    126c:	80 81       	ld	r24, Z
    126e:	88 60       	ori	r24, 0x08	; 8
	PORTQ.OUT |= (1<<3);
    1270:	80 83       	st	Z, r24
    1272:	84 81       	ldd	r24, Z+4	; 0x04
    1274:	88 60       	ori	r24, 0x08	; 8
		.paritytype = USART_SERIAL_SIM900_PARITY,
		.stopbits = USART_SERIAL_SIM900_STOP_BIT
	};

	// Initialize usart driver in RS232 mode
	usart_init_rs232(USART_SERIAL_EXAMPLE, &USART_SERIAL_OPTIONS);
    1276:	84 83       	std	Z+4, r24	; 0x04
    1278:	67 e0       	ldi	r22, 0x07	; 7
    127a:	70 e2       	ldi	r23, 0x20	; 32
    127c:	80 ea       	ldi	r24, 0xA0	; 160
    127e:	9a e0       	ldi	r25, 0x0A	; 10
	usart_init_rs232(USART_SERIAL_SIM900, &USART_SERIAL_SIM900_OPTIONS);
    1280:	46 dc       	rcall	.-1908   	; 0xb0e <usart_init_rs232>
    1282:	60 e0       	ldi	r22, 0x00	; 0
    1284:	70 e2       	ldi	r23, 0x20	; 32
    1286:	80 ea       	ldi	r24, 0xA0	; 160
	
	
	at_command_timeout_setup();
    1288:	98 e0       	ldi	r25, 0x08	; 8
    128a:	41 dc       	rcall	.-1918   	; 0xb0e <usart_init_rs232>
		//delay_s(1);
	}
	
	
	//usart_putchar(USART_SERIAL_EXAMPLE, 0x41);
	tx_active = 1;
    128c:	a5 df       	rcall	.-182    	; 0x11d8 <at_command_timeout_setup>
    128e:	c0 93 3e 21 	sts	0x213E, r28	; 0x80213e <__data_end>
int main(void)
{
	cli();
	
	//general counter variable used by many functions.
	uint8_t i = 0;
    1292:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	
	//usart_putchar(USART_SERIAL_EXAMPLE, 0x41);
	tx_active = 1;
	while (tx_active == 1) {
    1294:	c0 e0       	ldi	r28, 0x00	; 0
		
		//Configuring the GPRS state machine. Follow specification from flow chart.
		switch(gprs_state) //compare against controller state????
    1296:	c6 c0       	rjmp	.+396    	; 0x1424 <main+0x1c6>
    1298:	8d 2f       	mov	r24, r29
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	8a 30       	cpi	r24, 0x0A	; 10
    129e:	91 05       	cpc	r25, r1
    12a0:	08 f0       	brcs	.+2      	; 0x12a4 <main+0x46>
    12a2:	bd c0       	rjmp	.+378    	; 0x141e <main+0x1c0>
    12a4:	fc 01       	movw	r30, r24
    12a6:	88 27       	eor	r24, r24
    12a8:	e2 50       	subi	r30, 0x02	; 2
    12aa:	ff 4f       	sbci	r31, 0xFF	; 255
    12ac:	8f 4f       	sbci	r24, 0xFF	; 255
			case CIPSTART: 
				gprs_next_state = CIPSEND;
				//tx_active = 0; //debug
				
				i = 0;
				while (i < LEN_CIPSTART)
    12ae:	25 c2       	rjmp	.+1098   	; 0x16fa <__tablejump2__>
    12b0:	80 91 20 20 	lds	r24, 0x2020	; 0x802020 <LEN_CIPSTART>
    12b4:	81 11       	cpse	r24, r1
    12b6:	6b c0       	rjmp	.+214    	; 0x138e <main+0x130>
    12b8:	c0 e0       	ldi	r28, 0x00	; 0
			
			
			case CSTT: 
				gprs_next_state = CIICR;
				//tx_active = 0; //debug
				while (i < LEN_CSTT)
    12ba:	7a c0       	rjmp	.+244    	; 0x13b0 <main+0x152>
    12bc:	80 91 33 20 	lds	r24, 0x2033	; 0x802033 <LEN_CSTT>
    12c0:	c8 17       	cp	r28, r24
		{
			case AT:
				gprs_next_state = CIPSHUT_INIT;
				//tx_active = 0; //debug
				
				usart_tx_at(USART_SERIAL_SIM900, AT_AT); //return OK
    12c2:	88 f1       	brcs	.+98     	; 0x1326 <main+0xc8>
    12c4:	40 c0       	rjmp	.+128    	; 0x1346 <main+0xe8>
    12c6:	6d e9       	ldi	r22, 0x9D	; 157
    12c8:	70 e2       	ldi	r23, 0x20	; 32
    12ca:	80 ea       	ldi	r24, 0xA0	; 160
				status_at = at_response(USART_SERIAL_SIM900);
    12cc:	98 e0       	ldi	r25, 0x08	; 8
    12ce:	8b dd       	rcall	.-1258   	; 0xde6 <usart_tx_at>
    12d0:	80 ea       	ldi	r24, 0xA0	; 160
    12d2:	98 e0       	ldi	r25, 0x08	; 8
    12d4:	37 de       	rcall	.-914    	; 0xf44 <at_response>
		
		//Configuring the GPRS state machine. Follow specification from flow chart.
		switch(gprs_state) //compare against controller state????
		{
			case AT:
				gprs_next_state = CIPSHUT_INIT;
    12d6:	80 93 40 21 	sts	0x2140, r24	; 0x802140 <status_at>
			
			case CIPSHUT_INIT: 
				gprs_next_state = CIPSTATUS;
				//tx_active = 0; //debug
				
				usart_tx_at(USART_SERIAL_SIM900, AT_CIPSHUT); //return OK
    12da:	d1 e0       	ldi	r29, 0x01	; 1
    12dc:	a3 c0       	rjmp	.+326    	; 0x1424 <main+0x1c6>
    12de:	61 ea       	ldi	r22, 0xA1	; 161
    12e0:	70 e2       	ldi	r23, 0x20	; 32
				status_at = at_response(USART_SERIAL_SIM900);
    12e2:	80 ea       	ldi	r24, 0xA0	; 160
    12e4:	98 e0       	ldi	r25, 0x08	; 8
    12e6:	7f dd       	rcall	.-1282   	; 0xde6 <usart_tx_at>
    12e8:	80 ea       	ldi	r24, 0xA0	; 160
				
				//delay_s(1);
				
				break;
    12ea:	98 e0       	ldi	r25, 0x08	; 8
						
			case CIPSTATUS: 
				gprs_next_state = CIPMUX;
				//tx_active = 0; //debug
				
				usart_tx_at(USART_SERIAL_SIM900, AT_CIPSTATUS); //return OK
    12ec:	2b de       	rcall	.-938    	; 0xf44 <at_response>
    12ee:	80 93 40 21 	sts	0x2140, r24	; 0x802140 <status_at>
    12f2:	d2 e0       	ldi	r29, 0x02	; 2
    12f4:	97 c0       	rjmp	.+302    	; 0x1424 <main+0x1c6>
    12f6:	6d ea       	ldi	r22, 0xAD	; 173
				status_at = at_response(USART_SERIAL_SIM900);
    12f8:	70 e2       	ldi	r23, 0x20	; 32
    12fa:	80 ea       	ldi	r24, 0xA0	; 160
    12fc:	98 e0       	ldi	r25, 0x08	; 8
    12fe:	73 dd       	rcall	.-1306   	; 0xde6 <usart_tx_at>
				
				break;
			
						
			case CIPSTATUS: 
				gprs_next_state = CIPMUX;
    1300:	80 ea       	ldi	r24, 0xA0	; 160
				usart_tx_at(USART_SERIAL_SIM900, AT_CIPSTATUS); //return OK
				status_at = at_response(USART_SERIAL_SIM900);
				
				//delay_s(1);
				
				break;
    1302:	98 e0       	ldi	r25, 0x08	; 8
										
			case CIPMUX: 
				gprs_next_state = CSTT;
				//tx_active = 0; //debug
								
				usart_tx_at(USART_SERIAL_SIM900, AT_CIPMUX); //return OK
    1304:	1f de       	rcall	.-962    	; 0xf44 <at_response>
    1306:	80 93 40 21 	sts	0x2140, r24	; 0x802140 <status_at>
    130a:	d3 e0       	ldi	r29, 0x03	; 3
    130c:	8b c0       	rjmp	.+278    	; 0x1424 <main+0x1c6>
    130e:	6b eb       	ldi	r22, 0xBB	; 187
				status_at = at_response(USART_SERIAL_SIM900);
    1310:	70 e2       	ldi	r23, 0x20	; 32
    1312:	80 ea       	ldi	r24, 0xA0	; 160
    1314:	98 e0       	ldi	r25, 0x08	; 8
    1316:	67 dd       	rcall	.-1330   	; 0xde6 <usart_tx_at>
    1318:	80 ea       	ldi	r24, 0xA0	; 160
				
				break;
			
										
			case CIPMUX: 
				gprs_next_state = CSTT;
    131a:	98 e0       	ldi	r25, 0x08	; 8
				usart_tx_at(USART_SERIAL_SIM900, AT_CIPMUX); //return OK
				status_at = at_response(USART_SERIAL_SIM900);
				
				//delay_s(1);
				
				break;
    131c:	13 de       	rcall	.-986    	; 0xf44 <at_response>
			case CSTT: 
				gprs_next_state = CIICR;
				//tx_active = 0; //debug
				while (i < LEN_CSTT)
				{
					usart_tx_at(USART_SERIAL_SIM900, AT_CSTT[i]); //return OK
    131e:	80 93 40 21 	sts	0x2140, r24	; 0x802140 <status_at>
    1322:	d4 e0       	ldi	r29, 0x04	; 4
    1324:	7f c0       	rjmp	.+254    	; 0x1424 <main+0x1c6>
    1326:	ec 2f       	mov	r30, r28
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	ee 0f       	add	r30, r30
    132c:	ff 1f       	adc	r31, r31
    132e:	ef 5d       	subi	r30, 0xDF	; 223
    1330:	ff 4d       	sbci	r31, 0xDF	; 223
    1332:	60 81       	ld	r22, Z
					//usart_tx_at(USART_SERIAL_EXAMPLE, AT_CSTT[i]);
					i++;
    1334:	71 81       	ldd	r23, Z+1	; 0x01
			
			
			case CSTT: 
				gprs_next_state = CIICR;
				//tx_active = 0; //debug
				while (i < LEN_CSTT)
    1336:	80 ea       	ldi	r24, 0xA0	; 160
    1338:	98 e0       	ldi	r25, 0x08	; 8
				{
					usart_tx_at(USART_SERIAL_SIM900, AT_CSTT[i]); //return OK
					//usart_tx_at(USART_SERIAL_EXAMPLE, AT_CSTT[i]);
					i++;
				}
				status_at = at_response(USART_SERIAL_SIM900);
    133a:	55 dd       	rcall	.-1366   	; 0xde6 <usart_tx_at>
    133c:	cf 5f       	subi	r28, 0xFF	; 255
    133e:	80 91 33 20 	lds	r24, 0x2033	; 0x802033 <LEN_CSTT>
    1342:	c8 17       	cp	r28, r24
				
				break;
			
			
			case CSTT: 
				gprs_next_state = CIICR;
    1344:	80 f3       	brcs	.-32     	; 0x1326 <main+0xc8>
				}
				status_at = at_response(USART_SERIAL_SIM900);
				
				//delay_s(1);
				
				break;
    1346:	80 ea       	ldi	r24, 0xA0	; 160
			
						
			case CIICR: 
				gprs_next_state = CIFSR;
				
				usart_tx_at(USART_SERIAL_SIM900, AT_CIICR); //return OK
    1348:	98 e0       	ldi	r25, 0x08	; 8
    134a:	fc dd       	rcall	.-1032   	; 0xf44 <at_response>
    134c:	80 93 40 21 	sts	0x2140, r24	; 0x802140 <status_at>
				status_at = at_response(USART_SERIAL_SIM900);
    1350:	d5 e0       	ldi	r29, 0x05	; 5
    1352:	68 c0       	rjmp	.+208    	; 0x1424 <main+0x1c6>
    1354:	68 ec       	ldi	r22, 0xC8	; 200
    1356:	70 e2       	ldi	r23, 0x20	; 32
    1358:	80 ea       	ldi	r24, 0xA0	; 160
				
				break;
			
						
			case CIICR: 
				gprs_next_state = CIFSR;
    135a:	98 e0       	ldi	r25, 0x08	; 8
				usart_tx_at(USART_SERIAL_SIM900, AT_CIICR); //return OK
				status_at = at_response(USART_SERIAL_SIM900);
				
				//delay_s(3);
				
				break;
    135c:	44 dd       	rcall	.-1400   	; 0xde6 <usart_tx_at>
			
						
			case CIFSR: 
				gprs_next_state = CIPSTART;
				
				usart_tx_at(USART_SERIAL_SIM900, AT_CIFSR); //return IP
    135e:	80 ea       	ldi	r24, 0xA0	; 160
    1360:	98 e0       	ldi	r25, 0x08	; 8
    1362:	f0 dd       	rcall	.-1056   	; 0xf44 <at_response>
    1364:	80 93 40 21 	sts	0x2140, r24	; 0x802140 <status_at>
    1368:	d6 e0       	ldi	r29, 0x06	; 6
				status_at = at_response(USART_SERIAL_SIM900);
    136a:	5c c0       	rjmp	.+184    	; 0x1424 <main+0x1c6>
    136c:	62 ed       	ldi	r22, 0xD2	; 210
    136e:	70 e2       	ldi	r23, 0x20	; 32
    1370:	80 ea       	ldi	r24, 0xA0	; 160
    1372:	98 e0       	ldi	r25, 0x08	; 8
				
				delay_s(1); //for safety, could add this response table as well.
    1374:	38 dd       	rcall	.-1424   	; 0xde6 <usart_tx_at>
    1376:	80 ea       	ldi	r24, 0xA0	; 160
    1378:	98 e0       	ldi	r25, 0x08	; 8
    137a:	e4 dd       	rcall	.-1080   	; 0xf44 <at_response>
    137c:	80 93 40 21 	sts	0x2140, r24	; 0x802140 <status_at>
			case CIPSTART: 
				gprs_next_state = CIPSEND;
				//tx_active = 0; //debug
				
				i = 0;
				while (i < LEN_CIPSTART)
    1380:	66 e1       	ldi	r22, 0x16	; 22
				{
					usart_tx_at(USART_SERIAL_SIM900, AT_CIPSTART[i]); //return several OK
    1382:	76 e1       	ldi	r23, 0x16	; 22
    1384:	85 e0       	ldi	r24, 0x05	; 5
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	23 dd       	rcall	.-1466   	; 0xdd0 <__portable_avr_delay_cycles>
    138a:	d7 e0       	ldi	r29, 0x07	; 7
    138c:	4b c0       	rjmp	.+150    	; 0x1424 <main+0x1c6>
    138e:	c0 e0       	ldi	r28, 0x00	; 0
    1390:	ec 2f       	mov	r30, r28
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	ee 0f       	add	r30, r30
			case CIPSTART: 
				gprs_next_state = CIPSEND;
				//tx_active = 0; //debug
				
				i = 0;
				while (i < LEN_CIPSTART)
    1396:	ff 1f       	adc	r31, r31
    1398:	e2 5f       	subi	r30, 0xF2	; 242
    139a:	ff 4d       	sbci	r31, 0xDF	; 223
				{
					usart_tx_at(USART_SERIAL_SIM900, AT_CIPSTART[i]); //return several OK
					//usart_tx_at(USART_SERIAL_EXAMPLE, AT_CIPSTART[i]);
					i++;
				}
				status_at = at_response(USART_SERIAL_SIM900); //WHY DOES THIS ONE FAIL???????
    139c:	60 81       	ld	r22, Z
    139e:	71 81       	ldd	r23, Z+1	; 0x01
    13a0:	80 ea       	ldi	r24, 0xA0	; 160
    13a2:	98 e0       	ldi	r25, 0x08	; 8
								
				delay_s(3); //add check for CONNECT before removing this one.
    13a4:	20 dd       	rcall	.-1472   	; 0xde6 <usart_tx_at>
    13a6:	cf 5f       	subi	r28, 0xFF	; 255
    13a8:	80 91 20 20 	lds	r24, 0x2020	; 0x802020 <LEN_CIPSTART>
    13ac:	c8 17       	cp	r28, r24
			
						
			case CIPSEND: 
				gprs_next_state = CIPSHUT;
				
				usart_tx_at(USART_SERIAL_SIM900, AT_CIPSEND); //return >
    13ae:	80 f3       	brcs	.-32     	; 0x1390 <main+0x132>
    13b0:	80 ea       	ldi	r24, 0xA0	; 160
    13b2:	98 e0       	ldi	r25, 0x08	; 8
    13b4:	c7 dd       	rcall	.-1138   	; 0xf44 <at_response>
    13b6:	80 93 40 21 	sts	0x2140, r24	; 0x802140 <status_at>
				delay_s(1);
    13ba:	61 e4       	ldi	r22, 0x41	; 65
    13bc:	72 e4       	ldi	r23, 0x42	; 66
    13be:	8f e0       	ldi	r24, 0x0F	; 15
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	06 dd       	rcall	.-1524   	; 0xdd0 <__portable_avr_delay_cycles>
				char* AT_MESSAGE2 = "0 0 0 512 1023 125";
				//usart_tx_at(USART_SERIAL_SIM900, AT_MESSAGE2);
				//void mqtt_connect();
				mqtt_packet(AT_MESSAGE2);
    13c4:	d8 e0       	ldi	r29, 0x08	; 8
    13c6:	2e c0       	rjmp	.+92     	; 0x1424 <main+0x1c6>
				delay_s(1);
    13c8:	6c ed       	ldi	r22, 0xDC	; 220
    13ca:	70 e2       	ldi	r23, 0x20	; 32
    13cc:	80 ea       	ldi	r24, 0xA0	; 160
    13ce:	98 e0       	ldi	r25, 0x08	; 8
    13d0:	0a dd       	rcall	.-1516   	; 0xde6 <usart_tx_at>
				usart_tx_at(USART_SERIAL_SIM900, CTRL_Z); //return OK
    13d2:	66 e1       	ldi	r22, 0x16	; 22
    13d4:	76 e1       	ldi	r23, 0x16	; 22
    13d6:	85 e0       	ldi	r24, 0x05	; 5
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	fa dc       	rcall	.-1548   	; 0xdd0 <__portable_avr_delay_cycles>
    13dc:	88 ee       	ldi	r24, 0xE8	; 232
				status_at = at_response(USART_SERIAL_SIM900);
    13de:	90 e2       	ldi	r25, 0x20	; 32
    13e0:	2a de       	rcall	.-940    	; 0x1036 <mqtt_packet>
    13e2:	66 e1       	ldi	r22, 0x16	; 22
    13e4:	76 e1       	ldi	r23, 0x16	; 22
    13e6:	85 e0       	ldi	r24, 0x05	; 5
				
				break;
			
						
			case CIPSEND: 
				gprs_next_state = CIPSHUT;
    13e8:	90 e0       	ldi	r25, 0x00	; 0
				usart_tx_at(USART_SERIAL_SIM900, CTRL_Z); //return OK
				status_at = at_response(USART_SERIAL_SIM900);
				
				//delay_s(1);
				
				break;
    13ea:	f2 dc       	rcall	.-1564   	; 0xdd0 <__portable_avr_delay_cycles>
			
			
			case CIPSHUT: 
				//gprs_next_state = CIPSHUT_INIT;
				tx_active = 0; //done for now...
    13ec:	6b ef       	ldi	r22, 0xFB	; 251
    13ee:	70 e2       	ldi	r23, 0x20	; 32
							
				usart_tx_at(USART_SERIAL_SIM900, AT_CIPSHUT); //return OK
    13f0:	80 ea       	ldi	r24, 0xA0	; 160
    13f2:	98 e0       	ldi	r25, 0x08	; 8
    13f4:	f8 dc       	rcall	.-1552   	; 0xde6 <usart_tx_at>
    13f6:	80 ea       	ldi	r24, 0xA0	; 160
    13f8:	98 e0       	ldi	r25, 0x08	; 8
    13fa:	a4 dd       	rcall	.-1208   	; 0xf44 <at_response>
				status_at = at_response(USART_SERIAL_SIM900);
    13fc:	80 93 40 21 	sts	0x2140, r24	; 0x802140 <status_at>
    1400:	d9 e0       	ldi	r29, 0x09	; 9
    1402:	10 c0       	rjmp	.+32     	; 0x1424 <main+0x1c6>
    1404:	10 92 3e 21 	sts	0x213E, r1	; 0x80213e <__data_end>
				
				break;
    1408:	61 ea       	ldi	r22, 0xA1	; 161
// 			Measure again?
// 			Transmit again?
// 			Other?
			
			gprs_next_state = CIPSHUT_INIT;
			tx_active = 0;
    140a:	70 e2       	ldi	r23, 0x20	; 32
    140c:	80 ea       	ldi	r24, 0xA0	; 160
// 			Go to sleep?
// 			Measure again?
// 			Transmit again?
// 			Other?
			
			gprs_next_state = CIPSHUT_INIT;
    140e:	98 e0       	ldi	r25, 0x08	; 8
	}
	
	
	//usart_putchar(USART_SERIAL_EXAMPLE, 0x41);
	tx_active = 1;
	while (tx_active == 1) {
    1410:	ea dc       	rcall	.-1580   	; 0xde6 <usart_tx_at>
    1412:	80 ea       	ldi	r24, 0xA0	; 160
    1414:	98 e0       	ldi	r25, 0x08	; 8
    1416:	96 dd       	rcall	.-1236   	; 0xf44 <at_response>
    1418:	80 93 40 21 	sts	0x2140, r24	; 0x802140 <status_at>
		
		gprs_state = gprs_next_state;
		
	}
	
	led_blink(1);
    141c:	03 c0       	rjmp	.+6      	; 0x1424 <main+0x1c6>
    141e:	10 92 3e 21 	sts	0x213E, r1	; 0x80213e <__data_end>
    1422:	d1 e0       	ldi	r29, 0x01	; 1
    1424:	80 91 3e 21 	lds	r24, 0x213E	; 0x80213e <__data_end>
    1428:	81 30       	cpi	r24, 0x01	; 1
    142a:	09 f4       	brne	.+2      	; 0x142e <main+0x1d0>
    142c:	35 cf       	rjmp	.-406    	; 0x1298 <main+0x3a>
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	ee dc       	rcall	.-1572   	; 0xe0e <led_blink>
    1432:	ff cf       	rjmp	.-2      	; 0x1432 <main+0x1d4>

00001434 <__divsf3>:
    1434:	0c d0       	rcall	.+24     	; 0x144e <__divsf3x>
    1436:	05 c1       	rjmp	.+522    	; 0x1642 <__fp_round>
    1438:	fd d0       	rcall	.+506    	; 0x1634 <__fp_pscB>
    143a:	40 f0       	brcs	.+16     	; 0x144c <__divsf3+0x18>
    143c:	f4 d0       	rcall	.+488    	; 0x1626 <__fp_pscA>
    143e:	30 f0       	brcs	.+12     	; 0x144c <__divsf3+0x18>
    1440:	21 f4       	brne	.+8      	; 0x144a <__divsf3+0x16>
    1442:	5f 3f       	cpi	r21, 0xFF	; 255
    1444:	19 f0       	breq	.+6      	; 0x144c <__divsf3+0x18>
    1446:	d6 c0       	rjmp	.+428    	; 0x15f4 <__fp_inf>
    1448:	51 11       	cpse	r21, r1
    144a:	2f c1       	rjmp	.+606    	; 0x16aa <__fp_szero>
    144c:	d9 c0       	rjmp	.+434    	; 0x1600 <__fp_nan>

0000144e <__divsf3x>:
    144e:	0a d1       	rcall	.+532    	; 0x1664 <__fp_split3>
    1450:	98 f3       	brcs	.-26     	; 0x1438 <__divsf3+0x4>

00001452 <__divsf3_pse>:
    1452:	99 23       	and	r25, r25
    1454:	c9 f3       	breq	.-14     	; 0x1448 <__divsf3+0x14>
    1456:	55 23       	and	r21, r21
    1458:	b1 f3       	breq	.-20     	; 0x1446 <__divsf3+0x12>
    145a:	95 1b       	sub	r25, r21
    145c:	55 0b       	sbc	r21, r21
    145e:	bb 27       	eor	r27, r27
    1460:	aa 27       	eor	r26, r26
    1462:	62 17       	cp	r22, r18
    1464:	73 07       	cpc	r23, r19
    1466:	84 07       	cpc	r24, r20
    1468:	38 f0       	brcs	.+14     	; 0x1478 <__divsf3_pse+0x26>
    146a:	9f 5f       	subi	r25, 0xFF	; 255
    146c:	5f 4f       	sbci	r21, 0xFF	; 255
    146e:	22 0f       	add	r18, r18
    1470:	33 1f       	adc	r19, r19
    1472:	44 1f       	adc	r20, r20
    1474:	aa 1f       	adc	r26, r26
    1476:	a9 f3       	breq	.-22     	; 0x1462 <__divsf3_pse+0x10>
    1478:	33 d0       	rcall	.+102    	; 0x14e0 <__divsf3_pse+0x8e>
    147a:	0e 2e       	mov	r0, r30
    147c:	3a f0       	brmi	.+14     	; 0x148c <__divsf3_pse+0x3a>
    147e:	e0 e8       	ldi	r30, 0x80	; 128
    1480:	30 d0       	rcall	.+96     	; 0x14e2 <__divsf3_pse+0x90>
    1482:	91 50       	subi	r25, 0x01	; 1
    1484:	50 40       	sbci	r21, 0x00	; 0
    1486:	e6 95       	lsr	r30
    1488:	00 1c       	adc	r0, r0
    148a:	ca f7       	brpl	.-14     	; 0x147e <__divsf3_pse+0x2c>
    148c:	29 d0       	rcall	.+82     	; 0x14e0 <__divsf3_pse+0x8e>
    148e:	fe 2f       	mov	r31, r30
    1490:	27 d0       	rcall	.+78     	; 0x14e0 <__divsf3_pse+0x8e>
    1492:	66 0f       	add	r22, r22
    1494:	77 1f       	adc	r23, r23
    1496:	88 1f       	adc	r24, r24
    1498:	bb 1f       	adc	r27, r27
    149a:	26 17       	cp	r18, r22
    149c:	37 07       	cpc	r19, r23
    149e:	48 07       	cpc	r20, r24
    14a0:	ab 07       	cpc	r26, r27
    14a2:	b0 e8       	ldi	r27, 0x80	; 128
    14a4:	09 f0       	breq	.+2      	; 0x14a8 <__divsf3_pse+0x56>
    14a6:	bb 0b       	sbc	r27, r27
    14a8:	80 2d       	mov	r24, r0
    14aa:	bf 01       	movw	r22, r30
    14ac:	ff 27       	eor	r31, r31
    14ae:	93 58       	subi	r25, 0x83	; 131
    14b0:	5f 4f       	sbci	r21, 0xFF	; 255
    14b2:	2a f0       	brmi	.+10     	; 0x14be <__divsf3_pse+0x6c>
    14b4:	9e 3f       	cpi	r25, 0xFE	; 254
    14b6:	51 05       	cpc	r21, r1
    14b8:	68 f0       	brcs	.+26     	; 0x14d4 <__divsf3_pse+0x82>
    14ba:	9c c0       	rjmp	.+312    	; 0x15f4 <__fp_inf>
    14bc:	f6 c0       	rjmp	.+492    	; 0x16aa <__fp_szero>
    14be:	5f 3f       	cpi	r21, 0xFF	; 255
    14c0:	ec f3       	brlt	.-6      	; 0x14bc <__divsf3_pse+0x6a>
    14c2:	98 3e       	cpi	r25, 0xE8	; 232
    14c4:	dc f3       	brlt	.-10     	; 0x14bc <__divsf3_pse+0x6a>
    14c6:	86 95       	lsr	r24
    14c8:	77 95       	ror	r23
    14ca:	67 95       	ror	r22
    14cc:	b7 95       	ror	r27
    14ce:	f7 95       	ror	r31
    14d0:	9f 5f       	subi	r25, 0xFF	; 255
    14d2:	c9 f7       	brne	.-14     	; 0x14c6 <__divsf3_pse+0x74>
    14d4:	88 0f       	add	r24, r24
    14d6:	91 1d       	adc	r25, r1
    14d8:	96 95       	lsr	r25
    14da:	87 95       	ror	r24
    14dc:	97 f9       	bld	r25, 7
    14de:	08 95       	ret
    14e0:	e1 e0       	ldi	r30, 0x01	; 1
    14e2:	66 0f       	add	r22, r22
    14e4:	77 1f       	adc	r23, r23
    14e6:	88 1f       	adc	r24, r24
    14e8:	bb 1f       	adc	r27, r27
    14ea:	62 17       	cp	r22, r18
    14ec:	73 07       	cpc	r23, r19
    14ee:	84 07       	cpc	r24, r20
    14f0:	ba 07       	cpc	r27, r26
    14f2:	20 f0       	brcs	.+8      	; 0x14fc <__divsf3_pse+0xaa>
    14f4:	62 1b       	sub	r22, r18
    14f6:	73 0b       	sbc	r23, r19
    14f8:	84 0b       	sbc	r24, r20
    14fa:	ba 0b       	sbc	r27, r26
    14fc:	ee 1f       	adc	r30, r30
    14fe:	88 f7       	brcc	.-30     	; 0x14e2 <__divsf3_pse+0x90>
    1500:	e0 95       	com	r30
    1502:	08 95       	ret

00001504 <__fixsfdi>:
    1504:	be e3       	ldi	r27, 0x3E	; 62
    1506:	04 d0       	rcall	.+8      	; 0x1510 <__fixunssfdi+0x2>
    1508:	08 f4       	brcc	.+2      	; 0x150c <__fixsfdi+0x8>
    150a:	90 e8       	ldi	r25, 0x80	; 128
    150c:	08 95       	ret

0000150e <__fixunssfdi>:
    150e:	bf e3       	ldi	r27, 0x3F	; 63
    1510:	22 27       	eor	r18, r18
    1512:	33 27       	eor	r19, r19
    1514:	a9 01       	movw	r20, r18
    1516:	ae d0       	rcall	.+348    	; 0x1674 <__fp_splitA>
    1518:	58 f1       	brcs	.+86     	; 0x1570 <__fixunssfdi+0x62>
    151a:	9f 57       	subi	r25, 0x7F	; 127
    151c:	40 f1       	brcs	.+80     	; 0x156e <__fixunssfdi+0x60>
    151e:	b9 17       	cp	r27, r25
    1520:	38 f1       	brcs	.+78     	; 0x1570 <__fixunssfdi+0x62>
    1522:	bf e3       	ldi	r27, 0x3F	; 63
    1524:	b9 1b       	sub	r27, r25
    1526:	99 27       	eor	r25, r25
    1528:	b8 50       	subi	r27, 0x08	; 8
    152a:	3a f4       	brpl	.+14     	; 0x153a <__fixunssfdi+0x2c>
    152c:	66 0f       	add	r22, r22
    152e:	77 1f       	adc	r23, r23
    1530:	88 1f       	adc	r24, r24
    1532:	99 1f       	adc	r25, r25
    1534:	b3 95       	inc	r27
    1536:	d2 f3       	brmi	.-12     	; 0x152c <__fixunssfdi+0x1e>
    1538:	16 c0       	rjmp	.+44     	; 0x1566 <__fixunssfdi+0x58>
    153a:	b8 50       	subi	r27, 0x08	; 8
    153c:	4a f0       	brmi	.+18     	; 0x1550 <__fixunssfdi+0x42>
    153e:	23 2f       	mov	r18, r19
    1540:	34 2f       	mov	r19, r20
    1542:	45 2f       	mov	r20, r21
    1544:	56 2f       	mov	r21, r22
    1546:	67 2f       	mov	r22, r23
    1548:	78 2f       	mov	r23, r24
    154a:	88 27       	eor	r24, r24
    154c:	b8 50       	subi	r27, 0x08	; 8
    154e:	ba f7       	brpl	.-18     	; 0x153e <__fixunssfdi+0x30>
    1550:	b8 5f       	subi	r27, 0xF8	; 248
    1552:	49 f0       	breq	.+18     	; 0x1566 <__fixunssfdi+0x58>
    1554:	86 95       	lsr	r24
    1556:	77 95       	ror	r23
    1558:	67 95       	ror	r22
    155a:	57 95       	ror	r21
    155c:	47 95       	ror	r20
    155e:	37 95       	ror	r19
    1560:	27 95       	ror	r18
    1562:	ba 95       	dec	r27
    1564:	b9 f7       	brne	.-18     	; 0x1554 <__fixunssfdi+0x46>
    1566:	0e f4       	brtc	.+2      	; 0x156a <__fixunssfdi+0x5c>
    1568:	4e d0       	rcall	.+156    	; 0x1606 <__fp_negdi>
    156a:	88 94       	clc
    156c:	08 95       	ret
    156e:	88 94       	clc
    1570:	60 e0       	ldi	r22, 0x00	; 0
    1572:	70 e0       	ldi	r23, 0x00	; 0
    1574:	cb 01       	movw	r24, r22
    1576:	08 95       	ret

00001578 <__floatundisf>:
    1578:	e8 94       	clt

0000157a <__fp_di2sf>:
    157a:	f9 2f       	mov	r31, r25
    157c:	96 eb       	ldi	r25, 0xB6	; 182
    157e:	ff 23       	and	r31, r31
    1580:	81 f0       	breq	.+32     	; 0x15a2 <__fp_di2sf+0x28>
    1582:	12 16       	cp	r1, r18
    1584:	13 06       	cpc	r1, r19
    1586:	14 06       	cpc	r1, r20
    1588:	44 0b       	sbc	r20, r20
    158a:	93 95       	inc	r25
    158c:	f6 95       	lsr	r31
    158e:	87 95       	ror	r24
    1590:	77 95       	ror	r23
    1592:	67 95       	ror	r22
    1594:	57 95       	ror	r21
    1596:	40 40       	sbci	r20, 0x00	; 0
    1598:	ff 23       	and	r31, r31
    159a:	b9 f7       	brne	.-18     	; 0x158a <__fp_di2sf+0x10>
    159c:	1b c0       	rjmp	.+54     	; 0x15d4 <__fp_di2sf+0x5a>
    159e:	99 27       	eor	r25, r25
    15a0:	08 95       	ret
    15a2:	88 23       	and	r24, r24
    15a4:	51 f4       	brne	.+20     	; 0x15ba <__fp_di2sf+0x40>
    15a6:	98 50       	subi	r25, 0x08	; 8
    15a8:	d2 f7       	brpl	.-12     	; 0x159e <__fp_di2sf+0x24>
    15aa:	87 2b       	or	r24, r23
    15ac:	76 2f       	mov	r23, r22
    15ae:	65 2f       	mov	r22, r21
    15b0:	54 2f       	mov	r21, r20
    15b2:	43 2f       	mov	r20, r19
    15b4:	32 2f       	mov	r19, r18
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	b1 f3       	breq	.-20     	; 0x15a6 <__fp_di2sf+0x2c>
    15ba:	12 16       	cp	r1, r18
    15bc:	13 06       	cpc	r1, r19
    15be:	14 06       	cpc	r1, r20
    15c0:	44 0b       	sbc	r20, r20
    15c2:	88 23       	and	r24, r24
    15c4:	3a f0       	brmi	.+14     	; 0x15d4 <__fp_di2sf+0x5a>
    15c6:	9a 95       	dec	r25
    15c8:	44 0f       	add	r20, r20
    15ca:	55 1f       	adc	r21, r21
    15cc:	66 1f       	adc	r22, r22
    15ce:	77 1f       	adc	r23, r23
    15d0:	88 1f       	adc	r24, r24
    15d2:	ca f7       	brpl	.-14     	; 0x15c6 <__fp_di2sf+0x4c>
    15d4:	55 23       	and	r21, r21
    15d6:	4a f4       	brpl	.+18     	; 0x15ea <__fp_di2sf+0x70>
    15d8:	44 0f       	add	r20, r20
    15da:	55 1f       	adc	r21, r21
    15dc:	11 f4       	brne	.+4      	; 0x15e2 <__fp_di2sf+0x68>
    15de:	60 ff       	sbrs	r22, 0
    15e0:	04 c0       	rjmp	.+8      	; 0x15ea <__fp_di2sf+0x70>
    15e2:	6f 5f       	subi	r22, 0xFF	; 255
    15e4:	7f 4f       	sbci	r23, 0xFF	; 255
    15e6:	8f 4f       	sbci	r24, 0xFF	; 255
    15e8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ea:	88 0f       	add	r24, r24
    15ec:	96 95       	lsr	r25
    15ee:	87 95       	ror	r24
    15f0:	97 f9       	bld	r25, 7
    15f2:	08 95       	ret

000015f4 <__fp_inf>:
    15f4:	97 f9       	bld	r25, 7
    15f6:	9f 67       	ori	r25, 0x7F	; 127
    15f8:	80 e8       	ldi	r24, 0x80	; 128
    15fa:	70 e0       	ldi	r23, 0x00	; 0
    15fc:	60 e0       	ldi	r22, 0x00	; 0
    15fe:	08 95       	ret

00001600 <__fp_nan>:
    1600:	9f ef       	ldi	r25, 0xFF	; 255
    1602:	80 ec       	ldi	r24, 0xC0	; 192
    1604:	08 95       	ret

00001606 <__fp_negdi>:
    1606:	90 95       	com	r25
    1608:	80 95       	com	r24
    160a:	70 95       	com	r23
    160c:	60 95       	com	r22
    160e:	50 95       	com	r21
    1610:	40 95       	com	r20
    1612:	30 95       	com	r19
    1614:	21 95       	neg	r18
    1616:	3f 4f       	sbci	r19, 0xFF	; 255
    1618:	4f 4f       	sbci	r20, 0xFF	; 255
    161a:	5f 4f       	sbci	r21, 0xFF	; 255
    161c:	6f 4f       	sbci	r22, 0xFF	; 255
    161e:	7f 4f       	sbci	r23, 0xFF	; 255
    1620:	8f 4f       	sbci	r24, 0xFF	; 255
    1622:	9f 4f       	sbci	r25, 0xFF	; 255
    1624:	08 95       	ret

00001626 <__fp_pscA>:
    1626:	00 24       	eor	r0, r0
    1628:	0a 94       	dec	r0
    162a:	16 16       	cp	r1, r22
    162c:	17 06       	cpc	r1, r23
    162e:	18 06       	cpc	r1, r24
    1630:	09 06       	cpc	r0, r25
    1632:	08 95       	ret

00001634 <__fp_pscB>:
    1634:	00 24       	eor	r0, r0
    1636:	0a 94       	dec	r0
    1638:	12 16       	cp	r1, r18
    163a:	13 06       	cpc	r1, r19
    163c:	14 06       	cpc	r1, r20
    163e:	05 06       	cpc	r0, r21
    1640:	08 95       	ret

00001642 <__fp_round>:
    1642:	09 2e       	mov	r0, r25
    1644:	03 94       	inc	r0
    1646:	00 0c       	add	r0, r0
    1648:	11 f4       	brne	.+4      	; 0x164e <__fp_round+0xc>
    164a:	88 23       	and	r24, r24
    164c:	52 f0       	brmi	.+20     	; 0x1662 <__fp_round+0x20>
    164e:	bb 0f       	add	r27, r27
    1650:	40 f4       	brcc	.+16     	; 0x1662 <__fp_round+0x20>
    1652:	bf 2b       	or	r27, r31
    1654:	11 f4       	brne	.+4      	; 0x165a <__fp_round+0x18>
    1656:	60 ff       	sbrs	r22, 0
    1658:	04 c0       	rjmp	.+8      	; 0x1662 <__fp_round+0x20>
    165a:	6f 5f       	subi	r22, 0xFF	; 255
    165c:	7f 4f       	sbci	r23, 0xFF	; 255
    165e:	8f 4f       	sbci	r24, 0xFF	; 255
    1660:	9f 4f       	sbci	r25, 0xFF	; 255
    1662:	08 95       	ret

00001664 <__fp_split3>:
    1664:	57 fd       	sbrc	r21, 7
    1666:	90 58       	subi	r25, 0x80	; 128
    1668:	44 0f       	add	r20, r20
    166a:	55 1f       	adc	r21, r21
    166c:	59 f0       	breq	.+22     	; 0x1684 <__fp_splitA+0x10>
    166e:	5f 3f       	cpi	r21, 0xFF	; 255
    1670:	71 f0       	breq	.+28     	; 0x168e <__fp_splitA+0x1a>
    1672:	47 95       	ror	r20

00001674 <__fp_splitA>:
    1674:	88 0f       	add	r24, r24
    1676:	97 fb       	bst	r25, 7
    1678:	99 1f       	adc	r25, r25
    167a:	61 f0       	breq	.+24     	; 0x1694 <__fp_splitA+0x20>
    167c:	9f 3f       	cpi	r25, 0xFF	; 255
    167e:	79 f0       	breq	.+30     	; 0x169e <__fp_splitA+0x2a>
    1680:	87 95       	ror	r24
    1682:	08 95       	ret
    1684:	12 16       	cp	r1, r18
    1686:	13 06       	cpc	r1, r19
    1688:	14 06       	cpc	r1, r20
    168a:	55 1f       	adc	r21, r21
    168c:	f2 cf       	rjmp	.-28     	; 0x1672 <__fp_split3+0xe>
    168e:	46 95       	lsr	r20
    1690:	f1 df       	rcall	.-30     	; 0x1674 <__fp_splitA>
    1692:	08 c0       	rjmp	.+16     	; 0x16a4 <__fp_splitA+0x30>
    1694:	16 16       	cp	r1, r22
    1696:	17 06       	cpc	r1, r23
    1698:	18 06       	cpc	r1, r24
    169a:	99 1f       	adc	r25, r25
    169c:	f1 cf       	rjmp	.-30     	; 0x1680 <__fp_splitA+0xc>
    169e:	86 95       	lsr	r24
    16a0:	71 05       	cpc	r23, r1
    16a2:	61 05       	cpc	r22, r1
    16a4:	08 94       	sec
    16a6:	08 95       	ret

000016a8 <__fp_zero>:
    16a8:	e8 94       	clt

000016aa <__fp_szero>:
    16aa:	bb 27       	eor	r27, r27
    16ac:	66 27       	eor	r22, r22
    16ae:	77 27       	eor	r23, r23
    16b0:	cb 01       	movw	r24, r22
    16b2:	97 f9       	bld	r25, 7
    16b4:	08 95       	ret

000016b6 <__udivmodsi4>:
    16b6:	a1 e2       	ldi	r26, 0x21	; 33
    16b8:	1a 2e       	mov	r1, r26
    16ba:	aa 1b       	sub	r26, r26
    16bc:	bb 1b       	sub	r27, r27
    16be:	fd 01       	movw	r30, r26
    16c0:	0d c0       	rjmp	.+26     	; 0x16dc <__udivmodsi4_ep>

000016c2 <__udivmodsi4_loop>:
    16c2:	aa 1f       	adc	r26, r26
    16c4:	bb 1f       	adc	r27, r27
    16c6:	ee 1f       	adc	r30, r30
    16c8:	ff 1f       	adc	r31, r31
    16ca:	a2 17       	cp	r26, r18
    16cc:	b3 07       	cpc	r27, r19
    16ce:	e4 07       	cpc	r30, r20
    16d0:	f5 07       	cpc	r31, r21
    16d2:	20 f0       	brcs	.+8      	; 0x16dc <__udivmodsi4_ep>
    16d4:	a2 1b       	sub	r26, r18
    16d6:	b3 0b       	sbc	r27, r19
    16d8:	e4 0b       	sbc	r30, r20
    16da:	f5 0b       	sbc	r31, r21

000016dc <__udivmodsi4_ep>:
    16dc:	66 1f       	adc	r22, r22
    16de:	77 1f       	adc	r23, r23
    16e0:	88 1f       	adc	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	1a 94       	dec	r1
    16e6:	69 f7       	brne	.-38     	; 0x16c2 <__udivmodsi4_loop>
    16e8:	60 95       	com	r22
    16ea:	70 95       	com	r23
    16ec:	80 95       	com	r24
    16ee:	90 95       	com	r25
    16f0:	9b 01       	movw	r18, r22
    16f2:	ac 01       	movw	r20, r24
    16f4:	bd 01       	movw	r22, r26
    16f6:	cf 01       	movw	r24, r30
    16f8:	08 95       	ret

000016fa <__tablejump2__>:
    16fa:	ee 0f       	add	r30, r30
    16fc:	ff 1f       	adc	r31, r31
    16fe:	88 1f       	adc	r24, r24
    1700:	8b bf       	out	0x3b, r24	; 59
    1702:	07 90       	elpm	r0, Z+
    1704:	f6 91       	elpm	r31, Z
    1706:	e0 2d       	mov	r30, r0
    1708:	1b be       	out	0x3b, r1	; 59
    170a:	19 94       	eijmp

0000170c <__muldi3>:
    170c:	df 93       	push	r29
    170e:	cf 93       	push	r28
    1710:	1f 93       	push	r17
    1712:	0f 93       	push	r16
    1714:	9a 9d       	mul	r25, r10
    1716:	f0 2d       	mov	r31, r0
    1718:	21 9f       	mul	r18, r17
    171a:	f0 0d       	add	r31, r0
    171c:	8b 9d       	mul	r24, r11
    171e:	f0 0d       	add	r31, r0
    1720:	8a 9d       	mul	r24, r10
    1722:	e0 2d       	mov	r30, r0
    1724:	f1 0d       	add	r31, r1
    1726:	03 9f       	mul	r16, r19
    1728:	f0 0d       	add	r31, r0
    172a:	02 9f       	mul	r16, r18
    172c:	e0 0d       	add	r30, r0
    172e:	f1 1d       	adc	r31, r1
    1730:	4e 9d       	mul	r20, r14
    1732:	e0 0d       	add	r30, r0
    1734:	f1 1d       	adc	r31, r1
    1736:	5e 9d       	mul	r21, r14
    1738:	f0 0d       	add	r31, r0
    173a:	4f 9d       	mul	r20, r15
    173c:	f0 0d       	add	r31, r0
    173e:	7f 93       	push	r23
    1740:	6f 93       	push	r22
    1742:	bf 92       	push	r11
    1744:	af 92       	push	r10
    1746:	5f 93       	push	r21
    1748:	4f 93       	push	r20
    174a:	d5 01       	movw	r26, r10
    174c:	8e d0       	rcall	.+284    	; 0x186a <__umulhisi3>
    174e:	8b 01       	movw	r16, r22
    1750:	ac 01       	movw	r20, r24
    1752:	d7 01       	movw	r26, r14
    1754:	8a d0       	rcall	.+276    	; 0x186a <__umulhisi3>
    1756:	eb 01       	movw	r28, r22
    1758:	e8 0f       	add	r30, r24
    175a:	f9 1f       	adc	r31, r25
    175c:	d6 01       	movw	r26, r12
    175e:	1f d0       	rcall	.+62     	; 0x179e <__muldi3_6>
    1760:	2f 91       	pop	r18
    1762:	3f 91       	pop	r19
    1764:	d6 01       	movw	r26, r12
    1766:	81 d0       	rcall	.+258    	; 0x186a <__umulhisi3>
    1768:	c6 0f       	add	r28, r22
    176a:	d7 1f       	adc	r29, r23
    176c:	e8 1f       	adc	r30, r24
    176e:	f9 1f       	adc	r31, r25
    1770:	af 91       	pop	r26
    1772:	bf 91       	pop	r27
    1774:	14 d0       	rcall	.+40     	; 0x179e <__muldi3_6>
    1776:	2f 91       	pop	r18
    1778:	3f 91       	pop	r19
    177a:	77 d0       	rcall	.+238    	; 0x186a <__umulhisi3>
    177c:	c6 0f       	add	r28, r22
    177e:	d7 1f       	adc	r29, r23
    1780:	e8 1f       	adc	r30, r24
    1782:	f9 1f       	adc	r31, r25
    1784:	d6 01       	movw	r26, r12
    1786:	71 d0       	rcall	.+226    	; 0x186a <__umulhisi3>
    1788:	e6 0f       	add	r30, r22
    178a:	f7 1f       	adc	r31, r23
    178c:	98 01       	movw	r18, r16
    178e:	be 01       	movw	r22, r28
    1790:	cf 01       	movw	r24, r30
    1792:	11 24       	eor	r1, r1
    1794:	0f 91       	pop	r16
    1796:	1f 91       	pop	r17
    1798:	cf 91       	pop	r28
    179a:	df 91       	pop	r29
    179c:	08 95       	ret

0000179e <__muldi3_6>:
    179e:	65 d0       	rcall	.+202    	; 0x186a <__umulhisi3>
    17a0:	46 0f       	add	r20, r22
    17a2:	57 1f       	adc	r21, r23
    17a4:	c8 1f       	adc	r28, r24
    17a6:	d9 1f       	adc	r29, r25
    17a8:	08 f4       	brcc	.+2      	; 0x17ac <__muldi3_6+0xe>
    17aa:	31 96       	adiw	r30, 0x01	; 1
    17ac:	08 95       	ret

000017ae <__umoddi3>:
    17ae:	68 94       	set
    17b0:	01 c0       	rjmp	.+2      	; 0x17b4 <__udivdi3_umoddi3>

000017b2 <__udivdi3>:
    17b2:	e8 94       	clt

000017b4 <__udivdi3_umoddi3>:
    17b4:	8f 92       	push	r8
    17b6:	9f 92       	push	r9
    17b8:	cf 93       	push	r28
    17ba:	df 93       	push	r29
    17bc:	05 d0       	rcall	.+10     	; 0x17c8 <__udivmod64>
    17be:	df 91       	pop	r29
    17c0:	cf 91       	pop	r28
    17c2:	9f 90       	pop	r9
    17c4:	8f 90       	pop	r8
    17c6:	08 95       	ret

000017c8 <__udivmod64>:
    17c8:	88 24       	eor	r8, r8
    17ca:	99 24       	eor	r9, r9
    17cc:	f4 01       	movw	r30, r8
    17ce:	e4 01       	movw	r28, r8
    17d0:	b0 e4       	ldi	r27, 0x40	; 64
    17d2:	9f 93       	push	r25
    17d4:	aa 27       	eor	r26, r26
    17d6:	9a 15       	cp	r25, r10
    17d8:	8b 04       	cpc	r8, r11
    17da:	9c 04       	cpc	r9, r12
    17dc:	ed 05       	cpc	r30, r13
    17de:	fe 05       	cpc	r31, r14
    17e0:	cf 05       	cpc	r28, r15
    17e2:	d0 07       	cpc	r29, r16
    17e4:	a1 07       	cpc	r26, r17
    17e6:	98 f4       	brcc	.+38     	; 0x180e <__udivmod64+0x46>
    17e8:	ad 2f       	mov	r26, r29
    17ea:	dc 2f       	mov	r29, r28
    17ec:	cf 2f       	mov	r28, r31
    17ee:	fe 2f       	mov	r31, r30
    17f0:	e9 2d       	mov	r30, r9
    17f2:	98 2c       	mov	r9, r8
    17f4:	89 2e       	mov	r8, r25
    17f6:	98 2f       	mov	r25, r24
    17f8:	87 2f       	mov	r24, r23
    17fa:	76 2f       	mov	r23, r22
    17fc:	65 2f       	mov	r22, r21
    17fe:	54 2f       	mov	r21, r20
    1800:	43 2f       	mov	r20, r19
    1802:	32 2f       	mov	r19, r18
    1804:	22 27       	eor	r18, r18
    1806:	b8 50       	subi	r27, 0x08	; 8
    1808:	31 f7       	brne	.-52     	; 0x17d6 <__udivmod64+0xe>
    180a:	bf 91       	pop	r27
    180c:	27 c0       	rjmp	.+78     	; 0x185c <__udivmod64+0x94>
    180e:	1b 2e       	mov	r1, r27
    1810:	bf 91       	pop	r27
    1812:	bb 27       	eor	r27, r27
    1814:	22 0f       	add	r18, r18
    1816:	33 1f       	adc	r19, r19
    1818:	44 1f       	adc	r20, r20
    181a:	55 1f       	adc	r21, r21
    181c:	66 1f       	adc	r22, r22
    181e:	77 1f       	adc	r23, r23
    1820:	88 1f       	adc	r24, r24
    1822:	99 1f       	adc	r25, r25
    1824:	88 1c       	adc	r8, r8
    1826:	99 1c       	adc	r9, r9
    1828:	ee 1f       	adc	r30, r30
    182a:	ff 1f       	adc	r31, r31
    182c:	cc 1f       	adc	r28, r28
    182e:	dd 1f       	adc	r29, r29
    1830:	aa 1f       	adc	r26, r26
    1832:	bb 1f       	adc	r27, r27
    1834:	8a 14       	cp	r8, r10
    1836:	9b 04       	cpc	r9, r11
    1838:	ec 05       	cpc	r30, r12
    183a:	fd 05       	cpc	r31, r13
    183c:	ce 05       	cpc	r28, r14
    183e:	df 05       	cpc	r29, r15
    1840:	a0 07       	cpc	r26, r16
    1842:	b1 07       	cpc	r27, r17
    1844:	48 f0       	brcs	.+18     	; 0x1858 <__udivmod64+0x90>
    1846:	8a 18       	sub	r8, r10
    1848:	9b 08       	sbc	r9, r11
    184a:	ec 09       	sbc	r30, r12
    184c:	fd 09       	sbc	r31, r13
    184e:	ce 09       	sbc	r28, r14
    1850:	df 09       	sbc	r29, r15
    1852:	a0 0b       	sbc	r26, r16
    1854:	b1 0b       	sbc	r27, r17
    1856:	21 60       	ori	r18, 0x01	; 1
    1858:	1a 94       	dec	r1
    185a:	e1 f6       	brne	.-72     	; 0x1814 <__udivmod64+0x4c>
    185c:	2e f4       	brtc	.+10     	; 0x1868 <__udivmod64+0xa0>
    185e:	94 01       	movw	r18, r8
    1860:	af 01       	movw	r20, r30
    1862:	be 01       	movw	r22, r28
    1864:	cd 01       	movw	r24, r26
    1866:	00 0c       	add	r0, r0
    1868:	08 95       	ret

0000186a <__umulhisi3>:
    186a:	a2 9f       	mul	r26, r18
    186c:	b0 01       	movw	r22, r0
    186e:	b3 9f       	mul	r27, r19
    1870:	c0 01       	movw	r24, r0
    1872:	a3 9f       	mul	r26, r19
    1874:	70 0d       	add	r23, r0
    1876:	81 1d       	adc	r24, r1
    1878:	11 24       	eor	r1, r1
    187a:	91 1d       	adc	r25, r1
    187c:	b2 9f       	mul	r27, r18
    187e:	70 0d       	add	r23, r0
    1880:	81 1d       	adc	r24, r1
    1882:	11 24       	eor	r1, r1
    1884:	91 1d       	adc	r25, r1
    1886:	08 95       	ret

00001888 <memcpy>:
    1888:	fb 01       	movw	r30, r22
    188a:	dc 01       	movw	r26, r24
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <memcpy+0xa>
    188e:	01 90       	ld	r0, Z+
    1890:	0d 92       	st	X+, r0
    1892:	41 50       	subi	r20, 0x01	; 1
    1894:	50 40       	sbci	r21, 0x00	; 0
    1896:	d8 f7       	brcc	.-10     	; 0x188e <memcpy+0x6>
    1898:	08 95       	ret

0000189a <_exit>:
    189a:	f8 94       	cli

0000189c <__stop_program>:
    189c:	ff cf       	rjmp	.-2      	; 0x189c <__stop_program>
