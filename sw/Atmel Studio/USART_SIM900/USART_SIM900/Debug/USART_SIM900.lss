
USART_SIM900.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002568  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013e  00802000  00002568  000025fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  0080213e  0080213e  0000273a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000273a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000276c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000390  00000000  00000000  000027b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e506  00000000  00000000  00002b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005616  00000000  00000000  00011046  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000555b  00000000  00000000  0001665c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000db0  00000000  00000000  0001bbb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003550e  00000000  00000000  0001c968  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000050cf  00000000  00000000  00051e76  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003a0  00000000  00000000  00056f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c374  00000000  00000000  000572e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	07 c1       	rjmp	.+526    	; 0x210 <__ctors_end>
       2:	00 00       	nop
       4:	2b c1       	rjmp	.+598    	; 0x25c <__bad_interrupt>
       6:	00 00       	nop
       8:	29 c1       	rjmp	.+594    	; 0x25c <__bad_interrupt>
       a:	00 00       	nop
       c:	27 c1       	rjmp	.+590    	; 0x25c <__bad_interrupt>
       e:	00 00       	nop
      10:	25 c1       	rjmp	.+586    	; 0x25c <__bad_interrupt>
      12:	00 00       	nop
      14:	23 c1       	rjmp	.+582    	; 0x25c <__bad_interrupt>
      16:	00 00       	nop
      18:	21 c1       	rjmp	.+578    	; 0x25c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1f c1       	rjmp	.+574    	; 0x25c <__bad_interrupt>
      1e:	00 00       	nop
      20:	1d c1       	rjmp	.+570    	; 0x25c <__bad_interrupt>
      22:	00 00       	nop
      24:	1b c1       	rjmp	.+566    	; 0x25c <__bad_interrupt>
      26:	00 00       	nop
      28:	19 c1       	rjmp	.+562    	; 0x25c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	17 c1       	rjmp	.+558    	; 0x25c <__bad_interrupt>
      2e:	00 00       	nop
      30:	15 c1       	rjmp	.+554    	; 0x25c <__bad_interrupt>
      32:	00 00       	nop
      34:	13 c1       	rjmp	.+550    	; 0x25c <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 f3 0c 	jmp	0x19e6	; 0x19e6 <__vector_14>
      3c:	0f c1       	rjmp	.+542    	; 0x25c <__bad_interrupt>
      3e:	00 00       	nop
      40:	0d c1       	rjmp	.+538    	; 0x25c <__bad_interrupt>
      42:	00 00       	nop
      44:	0b c1       	rjmp	.+534    	; 0x25c <__bad_interrupt>
      46:	00 00       	nop
      48:	09 c1       	rjmp	.+530    	; 0x25c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	07 c1       	rjmp	.+526    	; 0x25c <__bad_interrupt>
      4e:	00 00       	nop
      50:	05 c1       	rjmp	.+522    	; 0x25c <__bad_interrupt>
      52:	00 00       	nop
      54:	03 c1       	rjmp	.+518    	; 0x25c <__bad_interrupt>
      56:	00 00       	nop
      58:	01 c1       	rjmp	.+514    	; 0x25c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ff c0       	rjmp	.+510    	; 0x25c <__bad_interrupt>
      5e:	00 00       	nop
      60:	fd c0       	rjmp	.+506    	; 0x25c <__bad_interrupt>
      62:	00 00       	nop
      64:	fb c0       	rjmp	.+502    	; 0x25c <__bad_interrupt>
      66:	00 00       	nop
      68:	f9 c0       	rjmp	.+498    	; 0x25c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f7 c0       	rjmp	.+494    	; 0x25c <__bad_interrupt>
      6e:	00 00       	nop
      70:	f5 c0       	rjmp	.+490    	; 0x25c <__bad_interrupt>
      72:	00 00       	nop
      74:	f3 c0       	rjmp	.+486    	; 0x25c <__bad_interrupt>
      76:	00 00       	nop
      78:	f1 c0       	rjmp	.+482    	; 0x25c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ef c0       	rjmp	.+478    	; 0x25c <__bad_interrupt>
      7e:	00 00       	nop
      80:	ed c0       	rjmp	.+474    	; 0x25c <__bad_interrupt>
      82:	00 00       	nop
      84:	eb c0       	rjmp	.+470    	; 0x25c <__bad_interrupt>
      86:	00 00       	nop
      88:	e9 c0       	rjmp	.+466    	; 0x25c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e7 c0       	rjmp	.+462    	; 0x25c <__bad_interrupt>
      8e:	00 00       	nop
      90:	e5 c0       	rjmp	.+458    	; 0x25c <__bad_interrupt>
      92:	00 00       	nop
      94:	e3 c0       	rjmp	.+454    	; 0x25c <__bad_interrupt>
      96:	00 00       	nop
      98:	e1 c0       	rjmp	.+450    	; 0x25c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	3c c2       	rjmp	.+1144   	; 0x516 <__vector_39>
      9e:	00 00       	nop
      a0:	77 c2       	rjmp	.+1262   	; 0x590 <__vector_40>
      a2:	00 00       	nop
      a4:	b2 c2       	rjmp	.+1380   	; 0x60a <__vector_41>
      a6:	00 00       	nop
      a8:	ed c2       	rjmp	.+1498   	; 0x684 <__vector_42>
      aa:	00 00       	nop
      ac:	d7 c0       	rjmp	.+430    	; 0x25c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d5 c0       	rjmp	.+426    	; 0x25c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d3 c0       	rjmp	.+422    	; 0x25c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	d1 c0       	rjmp	.+418    	; 0x25c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	cf c0       	rjmp	.+414    	; 0x25c <__bad_interrupt>
      be:	00 00       	nop
      c0:	cd c0       	rjmp	.+410    	; 0x25c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	cb c0       	rjmp	.+406    	; 0x25c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c9 c0       	rjmp	.+402    	; 0x25c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c7 c0       	rjmp	.+398    	; 0x25c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c5 c0       	rjmp	.+394    	; 0x25c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	c3 c0       	rjmp	.+390    	; 0x25c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	c1 c0       	rjmp	.+386    	; 0x25c <__bad_interrupt>
      da:	00 00       	nop
      dc:	bf c0       	rjmp	.+382    	; 0x25c <__bad_interrupt>
      de:	00 00       	nop
      e0:	bd c0       	rjmp	.+378    	; 0x25c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	bb c0       	rjmp	.+374    	; 0x25c <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b9 c0       	rjmp	.+370    	; 0x25c <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b7 c0       	rjmp	.+366    	; 0x25c <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b5 c0       	rjmp	.+362    	; 0x25c <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b3 c0       	rjmp	.+358    	; 0x25c <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b1 c0       	rjmp	.+354    	; 0x25c <__bad_interrupt>
      fa:	00 00       	nop
      fc:	af c0       	rjmp	.+350    	; 0x25c <__bad_interrupt>
      fe:	00 00       	nop
     100:	ad c0       	rjmp	.+346    	; 0x25c <__bad_interrupt>
     102:	00 00       	nop
     104:	ab c0       	rjmp	.+342    	; 0x25c <__bad_interrupt>
     106:	00 00       	nop
     108:	a9 c0       	rjmp	.+338    	; 0x25c <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a7 c0       	rjmp	.+334    	; 0x25c <__bad_interrupt>
     10e:	00 00       	nop
     110:	a5 c0       	rjmp	.+330    	; 0x25c <__bad_interrupt>
     112:	00 00       	nop
     114:	a3 c0       	rjmp	.+326    	; 0x25c <__bad_interrupt>
     116:	00 00       	nop
     118:	a1 c0       	rjmp	.+322    	; 0x25c <__bad_interrupt>
     11a:	00 00       	nop
     11c:	08 c1       	rjmp	.+528    	; 0x32e <__vector_71>
     11e:	00 00       	nop
     120:	43 c1       	rjmp	.+646    	; 0x3a8 <__vector_72>
     122:	00 00       	nop
     124:	7e c1       	rjmp	.+764    	; 0x422 <__vector_73>
     126:	00 00       	nop
     128:	b9 c1       	rjmp	.+882    	; 0x49c <__vector_74>
     12a:	00 00       	nop
     12c:	97 c0       	rjmp	.+302    	; 0x25c <__bad_interrupt>
     12e:	00 00       	nop
     130:	95 c0       	rjmp	.+298    	; 0x25c <__bad_interrupt>
     132:	00 00       	nop
     134:	93 c0       	rjmp	.+294    	; 0x25c <__bad_interrupt>
     136:	00 00       	nop
     138:	91 c0       	rjmp	.+290    	; 0x25c <__bad_interrupt>
     13a:	00 00       	nop
     13c:	8f c0       	rjmp	.+286    	; 0x25c <__bad_interrupt>
     13e:	00 00       	nop
     140:	8d c0       	rjmp	.+282    	; 0x25c <__bad_interrupt>
     142:	00 00       	nop
     144:	8b c0       	rjmp	.+278    	; 0x25c <__bad_interrupt>
     146:	00 00       	nop
     148:	89 c0       	rjmp	.+274    	; 0x25c <__bad_interrupt>
     14a:	00 00       	nop
     14c:	87 c0       	rjmp	.+270    	; 0x25c <__bad_interrupt>
     14e:	00 00       	nop
     150:	85 c0       	rjmp	.+266    	; 0x25c <__bad_interrupt>
     152:	00 00       	nop
     154:	83 c0       	rjmp	.+262    	; 0x25c <__bad_interrupt>
     156:	00 00       	nop
     158:	81 c0       	rjmp	.+258    	; 0x25c <__bad_interrupt>
     15a:	00 00       	nop
     15c:	7f c0       	rjmp	.+254    	; 0x25c <__bad_interrupt>
     15e:	00 00       	nop
     160:	7d c0       	rjmp	.+250    	; 0x25c <__bad_interrupt>
     162:	00 00       	nop
     164:	7b c0       	rjmp	.+246    	; 0x25c <__bad_interrupt>
     166:	00 00       	nop
     168:	79 c0       	rjmp	.+242    	; 0x25c <__bad_interrupt>
     16a:	00 00       	nop
     16c:	77 c0       	rjmp	.+238    	; 0x25c <__bad_interrupt>
     16e:	00 00       	nop
     170:	75 c0       	rjmp	.+234    	; 0x25c <__bad_interrupt>
     172:	00 00       	nop
     174:	73 c0       	rjmp	.+230    	; 0x25c <__bad_interrupt>
     176:	00 00       	nop
     178:	71 c0       	rjmp	.+226    	; 0x25c <__bad_interrupt>
     17a:	00 00       	nop
     17c:	6f c0       	rjmp	.+222    	; 0x25c <__bad_interrupt>
     17e:	00 00       	nop
     180:	6d c0       	rjmp	.+218    	; 0x25c <__bad_interrupt>
     182:	00 00       	nop
     184:	6b c0       	rjmp	.+214    	; 0x25c <__bad_interrupt>
     186:	00 00       	nop
     188:	69 c0       	rjmp	.+210    	; 0x25c <__bad_interrupt>
     18a:	00 00       	nop
     18c:	67 c0       	rjmp	.+206    	; 0x25c <__bad_interrupt>
     18e:	00 00       	nop
     190:	65 c0       	rjmp	.+202    	; 0x25c <__bad_interrupt>
     192:	00 00       	nop
     194:	63 c0       	rjmp	.+198    	; 0x25c <__bad_interrupt>
     196:	00 00       	nop
     198:	61 c0       	rjmp	.+194    	; 0x25c <__bad_interrupt>
     19a:	00 00       	nop
     19c:	5f c0       	rjmp	.+190    	; 0x25c <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5d c0       	rjmp	.+186    	; 0x25c <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	5b c0       	rjmp	.+182    	; 0x25c <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	59 c0       	rjmp	.+178    	; 0x25c <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	57 c0       	rjmp	.+174    	; 0x25c <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	55 c0       	rjmp	.+170    	; 0x25c <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	53 c0       	rjmp	.+166    	; 0x25c <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	51 c0       	rjmp	.+162    	; 0x25c <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	4f c0       	rjmp	.+158    	; 0x25c <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	4d c0       	rjmp	.+154    	; 0x25c <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	4b c0       	rjmp	.+150    	; 0x25c <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	49 c0       	rjmp	.+146    	; 0x25c <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	47 c0       	rjmp	.+142    	; 0x25c <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	45 c0       	rjmp	.+138    	; 0x25c <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	43 c0       	rjmp	.+134    	; 0x25c <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	41 c0       	rjmp	.+130    	; 0x25c <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	3f c0       	rjmp	.+126    	; 0x25c <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3d c0       	rjmp	.+122    	; 0x25c <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	3b c0       	rjmp	.+118    	; 0x25c <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	39 c0       	rjmp	.+114    	; 0x25c <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	37 c0       	rjmp	.+110    	; 0x25c <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	35 c0       	rjmp	.+106    	; 0x25c <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	33 c0       	rjmp	.+102    	; 0x25c <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	31 c0       	rjmp	.+98     	; 0x25c <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	17 0f       	add	r17, r23
     1fe:	2b 0f       	add	r18, r27
     200:	3f 0f       	add	r19, r31
     202:	53 0f       	add	r21, r19
     204:	11 0f       	add	r17, r17
     206:	86 0f       	add	r24, r22
     208:	9a 0f       	add	r25, r26
     20a:	0b 0f       	add	r16, r27
     20c:	d2 0f       	add	r29, r18
     20e:	f7 0f       	add	r31, r23

00000210 <__ctors_end>:
     210:	11 24       	eor	r1, r1
     212:	1f be       	out	0x3f, r1	; 63
     214:	cf ef       	ldi	r28, 0xFF	; 255
     216:	cd bf       	out	0x3d, r28	; 61
     218:	df e3       	ldi	r29, 0x3F	; 63
     21a:	de bf       	out	0x3e, r29	; 62
     21c:	00 e0       	ldi	r16, 0x00	; 0
     21e:	0c bf       	out	0x3c, r16	; 60
     220:	18 be       	out	0x38, r1	; 56
     222:	19 be       	out	0x39, r1	; 57
     224:	1a be       	out	0x3a, r1	; 58
     226:	1b be       	out	0x3b, r1	; 59

00000228 <__do_copy_data>:
     228:	11 e2       	ldi	r17, 0x21	; 33
     22a:	a0 e0       	ldi	r26, 0x00	; 0
     22c:	b0 e2       	ldi	r27, 0x20	; 32
     22e:	e8 e6       	ldi	r30, 0x68	; 104
     230:	f5 e2       	ldi	r31, 0x25	; 37
     232:	00 e0       	ldi	r16, 0x00	; 0
     234:	0b bf       	out	0x3b, r16	; 59
     236:	02 c0       	rjmp	.+4      	; 0x23c <__do_copy_data+0x14>
     238:	07 90       	elpm	r0, Z+
     23a:	0d 92       	st	X+, r0
     23c:	ae 33       	cpi	r26, 0x3E	; 62
     23e:	b1 07       	cpc	r27, r17
     240:	d9 f7       	brne	.-10     	; 0x238 <__do_copy_data+0x10>
     242:	1b be       	out	0x3b, r1	; 59

00000244 <__do_clear_bss>:
     244:	21 e2       	ldi	r18, 0x21	; 33
     246:	ae e3       	ldi	r26, 0x3E	; 62
     248:	b1 e2       	ldi	r27, 0x21	; 33
     24a:	01 c0       	rjmp	.+2      	; 0x24e <.do_clear_bss_start>

0000024c <.do_clear_bss_loop>:
     24c:	1d 92       	st	X+, r1

0000024e <.do_clear_bss_start>:
     24e:	a6 35       	cpi	r26, 0x56	; 86
     250:	b2 07       	cpc	r27, r18
     252:	e1 f7       	brne	.-8      	; 0x24c <.do_clear_bss_loop>
     254:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <main>
     258:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <_exit>

0000025c <__bad_interrupt>:
     25c:	d1 ce       	rjmp	.-606    	; 0x0 <__vectors>

0000025e <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     25e:	81 15       	cp	r24, r1
     260:	22 e0       	ldi	r18, 0x02	; 2
     262:	92 07       	cpc	r25, r18
     264:	61 f4       	brne	.+24     	; 0x27e <adc_enable_clock+0x20>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     266:	80 91 3f 21 	lds	r24, 0x213F	; 0x80213f <adca_enable_count>
     26a:	91 e0       	ldi	r25, 0x01	; 1
     26c:	98 0f       	add	r25, r24
     26e:	90 93 3f 21 	sts	0x213F, r25	; 0x80213f <adca_enable_count>
     272:	81 11       	cpse	r24, r1
     274:	12 c0       	rjmp	.+36     	; 0x29a <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     276:	62 e0       	ldi	r22, 0x02	; 2
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	55 c6       	rjmp	.+3242   	; 0xf26 <sysclk_enable_module>
     27c:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     27e:	80 34       	cpi	r24, 0x40	; 64
     280:	92 40       	sbci	r25, 0x02	; 2
     282:	59 f4       	brne	.+22     	; 0x29a <adc_enable_clock+0x3c>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     284:	80 91 3e 21 	lds	r24, 0x213E	; 0x80213e <__data_end>
     288:	91 e0       	ldi	r25, 0x01	; 1
     28a:	98 0f       	add	r25, r24
     28c:	90 93 3e 21 	sts	0x213E, r25	; 0x80213e <__data_end>
     290:	81 11       	cpse	r24, r1
     292:	03 c0       	rjmp	.+6      	; 0x29a <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     294:	62 e0       	ldi	r22, 0x02	; 2
     296:	82 e0       	ldi	r24, 0x02	; 2
     298:	46 c6       	rjmp	.+3212   	; 0xf26 <sysclk_enable_module>
     29a:	08 95       	ret

0000029c <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     29c:	81 15       	cp	r24, r1
     29e:	22 e0       	ldi	r18, 0x02	; 2
     2a0:	92 07       	cpc	r25, r18
     2a2:	59 f4       	brne	.+22     	; 0x2ba <adc_disable_clock+0x1e>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     2a4:	80 91 3f 21 	lds	r24, 0x213F	; 0x80213f <adca_enable_count>
     2a8:	81 50       	subi	r24, 0x01	; 1
     2aa:	80 93 3f 21 	sts	0x213F, r24	; 0x80213f <adca_enable_count>
     2ae:	81 11       	cpse	r24, r1
     2b0:	11 c0       	rjmp	.+34     	; 0x2d4 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     2b2:	62 e0       	ldi	r22, 0x02	; 2
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	4d c6       	rjmp	.+3226   	; 0xf52 <sysclk_disable_module>
     2b8:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     2ba:	80 34       	cpi	r24, 0x40	; 64
     2bc:	92 40       	sbci	r25, 0x02	; 2
     2be:	51 f4       	brne	.+20     	; 0x2d4 <adc_disable_clock+0x38>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     2c0:	80 91 3e 21 	lds	r24, 0x213E	; 0x80213e <__data_end>
     2c4:	81 50       	subi	r24, 0x01	; 1
     2c6:	80 93 3e 21 	sts	0x213E, r24	; 0x80213e <__data_end>
     2ca:	81 11       	cpse	r24, r1
     2cc:	03 c0       	rjmp	.+6      	; 0x2d4 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     2ce:	62 e0       	ldi	r22, 0x02	; 2
     2d0:	82 e0       	ldi	r24, 0x02	; 2
     2d2:	3f c6       	rjmp	.+3198   	; 0xf52 <sysclk_disable_module>
     2d4:	08 95       	ret

000002d6 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     2d6:	ef 92       	push	r14
     2d8:	ff 92       	push	r15
     2da:	1f 93       	push	r17
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	1f 92       	push	r1
     2e2:	1f 92       	push	r1
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62
     2e8:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     2ea:	8f b7       	in	r24, 0x3f	; 63
     2ec:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     2ee:	f8 94       	cli
	return flags;
     2f0:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     2f2:	c7 01       	movw	r24, r14
     2f4:	b4 df       	rcall	.-152    	; 0x25e <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     2f6:	f7 01       	movw	r30, r14
     2f8:	80 81       	ld	r24, Z
     2fa:	81 60       	ori	r24, 0x01	; 1
     2fc:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     2fe:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     300:	80 91 4d 21 	lds	r24, 0x214D	; 0x80214d <sleepmgr_locks+0x1>
     304:	8f 3f       	cpi	r24, 0xFF	; 255
     306:	09 f4       	brne	.+2      	; 0x30a <adc_enable+0x34>
     308:	ff cf       	rjmp	.-2      	; 0x308 <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     30a:	8f b7       	in	r24, 0x3f	; 63
     30c:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     30e:	f8 94       	cli
	return flags;
     310:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     312:	ec e4       	ldi	r30, 0x4C	; 76
     314:	f1 e2       	ldi	r31, 0x21	; 33
     316:	81 81       	ldd	r24, Z+1	; 0x01
     318:	8f 5f       	subi	r24, 0xFF	; 255
     31a:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     31c:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     31e:	0f 90       	pop	r0
     320:	0f 90       	pop	r0
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	1f 91       	pop	r17
     328:	ff 90       	pop	r15
     32a:	ef 90       	pop	r14
     32c:	08 95       	ret

0000032e <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     32e:	1f 92       	push	r1
     330:	0f 92       	push	r0
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	0f 92       	push	r0
     336:	11 24       	eor	r1, r1
     338:	08 b6       	in	r0, 0x38	; 56
     33a:	0f 92       	push	r0
     33c:	18 be       	out	0x38, r1	; 56
     33e:	09 b6       	in	r0, 0x39	; 57
     340:	0f 92       	push	r0
     342:	19 be       	out	0x39, r1	; 57
     344:	0b b6       	in	r0, 0x3b	; 59
     346:	0f 92       	push	r0
     348:	1b be       	out	0x3b, r1	; 59
     34a:	2f 93       	push	r18
     34c:	3f 93       	push	r19
     34e:	4f 93       	push	r20
     350:	5f 93       	push	r21
     352:	6f 93       	push	r22
     354:	7f 93       	push	r23
     356:	8f 93       	push	r24
     358:	9f 93       	push	r25
     35a:	af 93       	push	r26
     35c:	bf 93       	push	r27
     35e:	ef 93       	push	r30
     360:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     362:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     366:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     36a:	e0 91 54 21 	lds	r30, 0x2154	; 0x802154 <adca_callback>
     36e:	f0 91 55 21 	lds	r31, 0x2155	; 0x802155 <adca_callback+0x1>
     372:	61 e0       	ldi	r22, 0x01	; 1
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	92 e0       	ldi	r25, 0x02	; 2
     378:	19 95       	eicall
}
     37a:	ff 91       	pop	r31
     37c:	ef 91       	pop	r30
     37e:	bf 91       	pop	r27
     380:	af 91       	pop	r26
     382:	9f 91       	pop	r25
     384:	8f 91       	pop	r24
     386:	7f 91       	pop	r23
     388:	6f 91       	pop	r22
     38a:	5f 91       	pop	r21
     38c:	4f 91       	pop	r20
     38e:	3f 91       	pop	r19
     390:	2f 91       	pop	r18
     392:	0f 90       	pop	r0
     394:	0b be       	out	0x3b, r0	; 59
     396:	0f 90       	pop	r0
     398:	09 be       	out	0x39, r0	; 57
     39a:	0f 90       	pop	r0
     39c:	08 be       	out	0x38, r0	; 56
     39e:	0f 90       	pop	r0
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	0f 90       	pop	r0
     3a4:	1f 90       	pop	r1
     3a6:	18 95       	reti

000003a8 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     3a8:	1f 92       	push	r1
     3aa:	0f 92       	push	r0
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	0f 92       	push	r0
     3b0:	11 24       	eor	r1, r1
     3b2:	08 b6       	in	r0, 0x38	; 56
     3b4:	0f 92       	push	r0
     3b6:	18 be       	out	0x38, r1	; 56
     3b8:	09 b6       	in	r0, 0x39	; 57
     3ba:	0f 92       	push	r0
     3bc:	19 be       	out	0x39, r1	; 57
     3be:	0b b6       	in	r0, 0x3b	; 59
     3c0:	0f 92       	push	r0
     3c2:	1b be       	out	0x3b, r1	; 59
     3c4:	2f 93       	push	r18
     3c6:	3f 93       	push	r19
     3c8:	4f 93       	push	r20
     3ca:	5f 93       	push	r21
     3cc:	6f 93       	push	r22
     3ce:	7f 93       	push	r23
     3d0:	8f 93       	push	r24
     3d2:	9f 93       	push	r25
     3d4:	af 93       	push	r26
     3d6:	bf 93       	push	r27
     3d8:	ef 93       	push	r30
     3da:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     3dc:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     3e0:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     3e4:	e0 91 54 21 	lds	r30, 0x2154	; 0x802154 <adca_callback>
     3e8:	f0 91 55 21 	lds	r31, 0x2155	; 0x802155 <adca_callback+0x1>
     3ec:	62 e0       	ldi	r22, 0x02	; 2
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	92 e0       	ldi	r25, 0x02	; 2
     3f2:	19 95       	eicall
}
     3f4:	ff 91       	pop	r31
     3f6:	ef 91       	pop	r30
     3f8:	bf 91       	pop	r27
     3fa:	af 91       	pop	r26
     3fc:	9f 91       	pop	r25
     3fe:	8f 91       	pop	r24
     400:	7f 91       	pop	r23
     402:	6f 91       	pop	r22
     404:	5f 91       	pop	r21
     406:	4f 91       	pop	r20
     408:	3f 91       	pop	r19
     40a:	2f 91       	pop	r18
     40c:	0f 90       	pop	r0
     40e:	0b be       	out	0x3b, r0	; 59
     410:	0f 90       	pop	r0
     412:	09 be       	out	0x39, r0	; 57
     414:	0f 90       	pop	r0
     416:	08 be       	out	0x38, r0	; 56
     418:	0f 90       	pop	r0
     41a:	0f be       	out	0x3f, r0	; 63
     41c:	0f 90       	pop	r0
     41e:	1f 90       	pop	r1
     420:	18 95       	reti

00000422 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     422:	1f 92       	push	r1
     424:	0f 92       	push	r0
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	0f 92       	push	r0
     42a:	11 24       	eor	r1, r1
     42c:	08 b6       	in	r0, 0x38	; 56
     42e:	0f 92       	push	r0
     430:	18 be       	out	0x38, r1	; 56
     432:	09 b6       	in	r0, 0x39	; 57
     434:	0f 92       	push	r0
     436:	19 be       	out	0x39, r1	; 57
     438:	0b b6       	in	r0, 0x3b	; 59
     43a:	0f 92       	push	r0
     43c:	1b be       	out	0x3b, r1	; 59
     43e:	2f 93       	push	r18
     440:	3f 93       	push	r19
     442:	4f 93       	push	r20
     444:	5f 93       	push	r21
     446:	6f 93       	push	r22
     448:	7f 93       	push	r23
     44a:	8f 93       	push	r24
     44c:	9f 93       	push	r25
     44e:	af 93       	push	r26
     450:	bf 93       	push	r27
     452:	ef 93       	push	r30
     454:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     456:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     45a:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     45e:	e0 91 54 21 	lds	r30, 0x2154	; 0x802154 <adca_callback>
     462:	f0 91 55 21 	lds	r31, 0x2155	; 0x802155 <adca_callback+0x1>
     466:	64 e0       	ldi	r22, 0x04	; 4
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	92 e0       	ldi	r25, 0x02	; 2
     46c:	19 95       	eicall
}
     46e:	ff 91       	pop	r31
     470:	ef 91       	pop	r30
     472:	bf 91       	pop	r27
     474:	af 91       	pop	r26
     476:	9f 91       	pop	r25
     478:	8f 91       	pop	r24
     47a:	7f 91       	pop	r23
     47c:	6f 91       	pop	r22
     47e:	5f 91       	pop	r21
     480:	4f 91       	pop	r20
     482:	3f 91       	pop	r19
     484:	2f 91       	pop	r18
     486:	0f 90       	pop	r0
     488:	0b be       	out	0x3b, r0	; 59
     48a:	0f 90       	pop	r0
     48c:	09 be       	out	0x39, r0	; 57
     48e:	0f 90       	pop	r0
     490:	08 be       	out	0x38, r0	; 56
     492:	0f 90       	pop	r0
     494:	0f be       	out	0x3f, r0	; 63
     496:	0f 90       	pop	r0
     498:	1f 90       	pop	r1
     49a:	18 95       	reti

0000049c <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     49c:	1f 92       	push	r1
     49e:	0f 92       	push	r0
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	0f 92       	push	r0
     4a4:	11 24       	eor	r1, r1
     4a6:	08 b6       	in	r0, 0x38	; 56
     4a8:	0f 92       	push	r0
     4aa:	18 be       	out	0x38, r1	; 56
     4ac:	09 b6       	in	r0, 0x39	; 57
     4ae:	0f 92       	push	r0
     4b0:	19 be       	out	0x39, r1	; 57
     4b2:	0b b6       	in	r0, 0x3b	; 59
     4b4:	0f 92       	push	r0
     4b6:	1b be       	out	0x3b, r1	; 59
     4b8:	2f 93       	push	r18
     4ba:	3f 93       	push	r19
     4bc:	4f 93       	push	r20
     4be:	5f 93       	push	r21
     4c0:	6f 93       	push	r22
     4c2:	7f 93       	push	r23
     4c4:	8f 93       	push	r24
     4c6:	9f 93       	push	r25
     4c8:	af 93       	push	r26
     4ca:	bf 93       	push	r27
     4cc:	ef 93       	push	r30
     4ce:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     4d0:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     4d4:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     4d8:	e0 91 54 21 	lds	r30, 0x2154	; 0x802154 <adca_callback>
     4dc:	f0 91 55 21 	lds	r31, 0x2155	; 0x802155 <adca_callback+0x1>
     4e0:	68 e0       	ldi	r22, 0x08	; 8
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	92 e0       	ldi	r25, 0x02	; 2
     4e6:	19 95       	eicall
}
     4e8:	ff 91       	pop	r31
     4ea:	ef 91       	pop	r30
     4ec:	bf 91       	pop	r27
     4ee:	af 91       	pop	r26
     4f0:	9f 91       	pop	r25
     4f2:	8f 91       	pop	r24
     4f4:	7f 91       	pop	r23
     4f6:	6f 91       	pop	r22
     4f8:	5f 91       	pop	r21
     4fa:	4f 91       	pop	r20
     4fc:	3f 91       	pop	r19
     4fe:	2f 91       	pop	r18
     500:	0f 90       	pop	r0
     502:	0b be       	out	0x3b, r0	; 59
     504:	0f 90       	pop	r0
     506:	09 be       	out	0x39, r0	; 57
     508:	0f 90       	pop	r0
     50a:	08 be       	out	0x38, r0	; 56
     50c:	0f 90       	pop	r0
     50e:	0f be       	out	0x3f, r0	; 63
     510:	0f 90       	pop	r0
     512:	1f 90       	pop	r1
     514:	18 95       	reti

00000516 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     516:	1f 92       	push	r1
     518:	0f 92       	push	r0
     51a:	0f b6       	in	r0, 0x3f	; 63
     51c:	0f 92       	push	r0
     51e:	11 24       	eor	r1, r1
     520:	08 b6       	in	r0, 0x38	; 56
     522:	0f 92       	push	r0
     524:	18 be       	out	0x38, r1	; 56
     526:	09 b6       	in	r0, 0x39	; 57
     528:	0f 92       	push	r0
     52a:	19 be       	out	0x39, r1	; 57
     52c:	0b b6       	in	r0, 0x3b	; 59
     52e:	0f 92       	push	r0
     530:	1b be       	out	0x3b, r1	; 59
     532:	2f 93       	push	r18
     534:	3f 93       	push	r19
     536:	4f 93       	push	r20
     538:	5f 93       	push	r21
     53a:	6f 93       	push	r22
     53c:	7f 93       	push	r23
     53e:	8f 93       	push	r24
     540:	9f 93       	push	r25
     542:	af 93       	push	r26
     544:	bf 93       	push	r27
     546:	ef 93       	push	r30
     548:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     54a:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     54e:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     552:	e0 91 52 21 	lds	r30, 0x2152	; 0x802152 <adcb_callback>
     556:	f0 91 53 21 	lds	r31, 0x2153	; 0x802153 <adcb_callback+0x1>
     55a:	61 e0       	ldi	r22, 0x01	; 1
     55c:	80 e4       	ldi	r24, 0x40	; 64
     55e:	92 e0       	ldi	r25, 0x02	; 2
     560:	19 95       	eicall
}
     562:	ff 91       	pop	r31
     564:	ef 91       	pop	r30
     566:	bf 91       	pop	r27
     568:	af 91       	pop	r26
     56a:	9f 91       	pop	r25
     56c:	8f 91       	pop	r24
     56e:	7f 91       	pop	r23
     570:	6f 91       	pop	r22
     572:	5f 91       	pop	r21
     574:	4f 91       	pop	r20
     576:	3f 91       	pop	r19
     578:	2f 91       	pop	r18
     57a:	0f 90       	pop	r0
     57c:	0b be       	out	0x3b, r0	; 59
     57e:	0f 90       	pop	r0
     580:	09 be       	out	0x39, r0	; 57
     582:	0f 90       	pop	r0
     584:	08 be       	out	0x38, r0	; 56
     586:	0f 90       	pop	r0
     588:	0f be       	out	0x3f, r0	; 63
     58a:	0f 90       	pop	r0
     58c:	1f 90       	pop	r1
     58e:	18 95       	reti

00000590 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     590:	1f 92       	push	r1
     592:	0f 92       	push	r0
     594:	0f b6       	in	r0, 0x3f	; 63
     596:	0f 92       	push	r0
     598:	11 24       	eor	r1, r1
     59a:	08 b6       	in	r0, 0x38	; 56
     59c:	0f 92       	push	r0
     59e:	18 be       	out	0x38, r1	; 56
     5a0:	09 b6       	in	r0, 0x39	; 57
     5a2:	0f 92       	push	r0
     5a4:	19 be       	out	0x39, r1	; 57
     5a6:	0b b6       	in	r0, 0x3b	; 59
     5a8:	0f 92       	push	r0
     5aa:	1b be       	out	0x3b, r1	; 59
     5ac:	2f 93       	push	r18
     5ae:	3f 93       	push	r19
     5b0:	4f 93       	push	r20
     5b2:	5f 93       	push	r21
     5b4:	6f 93       	push	r22
     5b6:	7f 93       	push	r23
     5b8:	8f 93       	push	r24
     5ba:	9f 93       	push	r25
     5bc:	af 93       	push	r26
     5be:	bf 93       	push	r27
     5c0:	ef 93       	push	r30
     5c2:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     5c4:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     5c8:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     5cc:	e0 91 52 21 	lds	r30, 0x2152	; 0x802152 <adcb_callback>
     5d0:	f0 91 53 21 	lds	r31, 0x2153	; 0x802153 <adcb_callback+0x1>
     5d4:	62 e0       	ldi	r22, 0x02	; 2
     5d6:	80 e4       	ldi	r24, 0x40	; 64
     5d8:	92 e0       	ldi	r25, 0x02	; 2
     5da:	19 95       	eicall
}
     5dc:	ff 91       	pop	r31
     5de:	ef 91       	pop	r30
     5e0:	bf 91       	pop	r27
     5e2:	af 91       	pop	r26
     5e4:	9f 91       	pop	r25
     5e6:	8f 91       	pop	r24
     5e8:	7f 91       	pop	r23
     5ea:	6f 91       	pop	r22
     5ec:	5f 91       	pop	r21
     5ee:	4f 91       	pop	r20
     5f0:	3f 91       	pop	r19
     5f2:	2f 91       	pop	r18
     5f4:	0f 90       	pop	r0
     5f6:	0b be       	out	0x3b, r0	; 59
     5f8:	0f 90       	pop	r0
     5fa:	09 be       	out	0x39, r0	; 57
     5fc:	0f 90       	pop	r0
     5fe:	08 be       	out	0x38, r0	; 56
     600:	0f 90       	pop	r0
     602:	0f be       	out	0x3f, r0	; 63
     604:	0f 90       	pop	r0
     606:	1f 90       	pop	r1
     608:	18 95       	reti

0000060a <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     60a:	1f 92       	push	r1
     60c:	0f 92       	push	r0
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	0f 92       	push	r0
     612:	11 24       	eor	r1, r1
     614:	08 b6       	in	r0, 0x38	; 56
     616:	0f 92       	push	r0
     618:	18 be       	out	0x38, r1	; 56
     61a:	09 b6       	in	r0, 0x39	; 57
     61c:	0f 92       	push	r0
     61e:	19 be       	out	0x39, r1	; 57
     620:	0b b6       	in	r0, 0x3b	; 59
     622:	0f 92       	push	r0
     624:	1b be       	out	0x3b, r1	; 59
     626:	2f 93       	push	r18
     628:	3f 93       	push	r19
     62a:	4f 93       	push	r20
     62c:	5f 93       	push	r21
     62e:	6f 93       	push	r22
     630:	7f 93       	push	r23
     632:	8f 93       	push	r24
     634:	9f 93       	push	r25
     636:	af 93       	push	r26
     638:	bf 93       	push	r27
     63a:	ef 93       	push	r30
     63c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     63e:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     642:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     646:	e0 91 52 21 	lds	r30, 0x2152	; 0x802152 <adcb_callback>
     64a:	f0 91 53 21 	lds	r31, 0x2153	; 0x802153 <adcb_callback+0x1>
     64e:	64 e0       	ldi	r22, 0x04	; 4
     650:	80 e4       	ldi	r24, 0x40	; 64
     652:	92 e0       	ldi	r25, 0x02	; 2
     654:	19 95       	eicall
}
     656:	ff 91       	pop	r31
     658:	ef 91       	pop	r30
     65a:	bf 91       	pop	r27
     65c:	af 91       	pop	r26
     65e:	9f 91       	pop	r25
     660:	8f 91       	pop	r24
     662:	7f 91       	pop	r23
     664:	6f 91       	pop	r22
     666:	5f 91       	pop	r21
     668:	4f 91       	pop	r20
     66a:	3f 91       	pop	r19
     66c:	2f 91       	pop	r18
     66e:	0f 90       	pop	r0
     670:	0b be       	out	0x3b, r0	; 59
     672:	0f 90       	pop	r0
     674:	09 be       	out	0x39, r0	; 57
     676:	0f 90       	pop	r0
     678:	08 be       	out	0x38, r0	; 56
     67a:	0f 90       	pop	r0
     67c:	0f be       	out	0x3f, r0	; 63
     67e:	0f 90       	pop	r0
     680:	1f 90       	pop	r1
     682:	18 95       	reti

00000684 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     684:	1f 92       	push	r1
     686:	0f 92       	push	r0
     688:	0f b6       	in	r0, 0x3f	; 63
     68a:	0f 92       	push	r0
     68c:	11 24       	eor	r1, r1
     68e:	08 b6       	in	r0, 0x38	; 56
     690:	0f 92       	push	r0
     692:	18 be       	out	0x38, r1	; 56
     694:	09 b6       	in	r0, 0x39	; 57
     696:	0f 92       	push	r0
     698:	19 be       	out	0x39, r1	; 57
     69a:	0b b6       	in	r0, 0x3b	; 59
     69c:	0f 92       	push	r0
     69e:	1b be       	out	0x3b, r1	; 59
     6a0:	2f 93       	push	r18
     6a2:	3f 93       	push	r19
     6a4:	4f 93       	push	r20
     6a6:	5f 93       	push	r21
     6a8:	6f 93       	push	r22
     6aa:	7f 93       	push	r23
     6ac:	8f 93       	push	r24
     6ae:	9f 93       	push	r25
     6b0:	af 93       	push	r26
     6b2:	bf 93       	push	r27
     6b4:	ef 93       	push	r30
     6b6:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     6b8:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     6bc:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     6c0:	e0 91 52 21 	lds	r30, 0x2152	; 0x802152 <adcb_callback>
     6c4:	f0 91 53 21 	lds	r31, 0x2153	; 0x802153 <adcb_callback+0x1>
     6c8:	68 e0       	ldi	r22, 0x08	; 8
     6ca:	80 e4       	ldi	r24, 0x40	; 64
     6cc:	92 e0       	ldi	r25, 0x02	; 2
     6ce:	19 95       	eicall
}
     6d0:	ff 91       	pop	r31
     6d2:	ef 91       	pop	r30
     6d4:	bf 91       	pop	r27
     6d6:	af 91       	pop	r26
     6d8:	9f 91       	pop	r25
     6da:	8f 91       	pop	r24
     6dc:	7f 91       	pop	r23
     6de:	6f 91       	pop	r22
     6e0:	5f 91       	pop	r21
     6e2:	4f 91       	pop	r20
     6e4:	3f 91       	pop	r19
     6e6:	2f 91       	pop	r18
     6e8:	0f 90       	pop	r0
     6ea:	0b be       	out	0x3b, r0	; 59
     6ec:	0f 90       	pop	r0
     6ee:	09 be       	out	0x39, r0	; 57
     6f0:	0f 90       	pop	r0
     6f2:	08 be       	out	0x38, r0	; 56
     6f4:	0f 90       	pop	r0
     6f6:	0f be       	out	0x3f, r0	; 63
     6f8:	0f 90       	pop	r0
     6fa:	1f 90       	pop	r1
     6fc:	18 95       	reti

000006fe <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
     6fe:	bf 92       	push	r11
     700:	cf 92       	push	r12
     702:	df 92       	push	r13
     704:	ef 92       	push	r14
     706:	ff 92       	push	r15
     708:	0f 93       	push	r16
     70a:	1f 93       	push	r17
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	1f 92       	push	r1
     712:	cd b7       	in	r28, 0x3d	; 61
     714:	de b7       	in	r29, 0x3e	; 62
     716:	8c 01       	movw	r16, r24
     718:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     71a:	81 15       	cp	r24, r1
     71c:	22 e0       	ldi	r18, 0x02	; 2
     71e:	92 07       	cpc	r25, r18
     720:	71 f4       	brne	.+28     	; 0x73e <adc_write_configuration+0x40>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     722:	61 e2       	ldi	r22, 0x21	; 33
     724:	70 e0       	ldi	r23, 0x00	; 0
     726:	82 e0       	ldi	r24, 0x02	; 2
     728:	75 d4       	rcall	.+2282   	; 0x1014 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     72a:	c8 2e       	mov	r12, r24
     72c:	d1 2c       	mov	r13, r1
     72e:	60 e2       	ldi	r22, 0x20	; 32
     730:	70 e0       	ldi	r23, 0x00	; 0
     732:	82 e0       	ldi	r24, 0x02	; 2
     734:	6f d4       	rcall	.+2270   	; 0x1014 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
     736:	dc 2c       	mov	r13, r12
     738:	cc 24       	eor	r12, r12
     73a:	c8 2a       	or	r12, r24
     73c:	10 c0       	rjmp	.+32     	; 0x75e <adc_write_configuration+0x60>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     73e:	80 34       	cpi	r24, 0x40	; 64
     740:	92 40       	sbci	r25, 0x02	; 2
     742:	c1 f5       	brne	.+112    	; 0x7b4 <adc_write_configuration+0xb6>
     744:	65 e2       	ldi	r22, 0x25	; 37
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	82 e0       	ldi	r24, 0x02	; 2
     74a:	64 d4       	rcall	.+2248   	; 0x1014 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
     74c:	c8 2e       	mov	r12, r24
     74e:	d1 2c       	mov	r13, r1
     750:	64 e2       	ldi	r22, 0x24	; 36
     752:	70 e0       	ldi	r23, 0x00	; 0
     754:	82 e0       	ldi	r24, 0x02	; 2
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
     756:	5e d4       	rcall	.+2236   	; 0x1014 <nvm_read_byte>
     758:	dc 2c       	mov	r13, r12
     75a:	cc 24       	eor	r12, r12

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     75c:	c8 2a       	or	r12, r24
	cpu_irq_disable();
     75e:	8f b7       	in	r24, 0x3f	; 63
	return flags;
     760:	89 83       	std	Y+1, r24	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
     762:	f8 94       	cli
     764:	b9 80       	ldd	r11, Y+1	; 0x01
     766:	c8 01       	movw	r24, r16
	enable = adc->CTRLA & ADC_ENABLE_bm;
     768:	7a dd       	rcall	.-1292   	; 0x25e <adc_enable_clock>
     76a:	f8 01       	movw	r30, r16

	adc->CTRLA = ADC_FLUSH_bm;
     76c:	80 81       	ld	r24, Z
     76e:	92 e0       	ldi	r25, 0x02	; 2
	adc->CAL = cal;
     770:	90 83       	st	Z, r25
     772:	c4 86       	std	Z+12, r12	; 0x0c
	adc->CMP = conf->cmp;
     774:	d5 86       	std	Z+13, r13	; 0x0d
     776:	f7 01       	movw	r30, r14
     778:	25 81       	ldd	r18, Z+5	; 0x05
     77a:	36 81       	ldd	r19, Z+6	; 0x06
     77c:	f8 01       	movw	r30, r16
     77e:	20 8f       	std	Z+24, r18	; 0x18
	adc->REFCTRL = conf->refctrl;
     780:	31 8f       	std	Z+25, r19	; 0x19
     782:	f7 01       	movw	r30, r14
     784:	92 81       	ldd	r25, Z+2	; 0x02
     786:	f8 01       	movw	r30, r16
	adc->PRESCALER = conf->prescaler;
     788:	92 83       	std	Z+2, r25	; 0x02
     78a:	f7 01       	movw	r30, r14
     78c:	94 81       	ldd	r25, Z+4	; 0x04
     78e:	f8 01       	movw	r30, r16
	adc->EVCTRL = conf->evctrl;
     790:	94 83       	std	Z+4, r25	; 0x04
     792:	f7 01       	movw	r30, r14
     794:	93 81       	ldd	r25, Z+3	; 0x03
     796:	f8 01       	movw	r30, r16
	adc->CTRLB = conf->ctrlb;
     798:	93 83       	std	Z+3, r25	; 0x03
     79a:	f7 01       	movw	r30, r14
     79c:	91 81       	ldd	r25, Z+1	; 0x01
     79e:	f8 01       	movw	r30, r16

	adc->CTRLA = enable | conf->ctrla;
     7a0:	91 83       	std	Z+1, r25	; 0x01
     7a2:	81 70       	andi	r24, 0x01	; 1
     7a4:	f7 01       	movw	r30, r14
     7a6:	90 81       	ld	r25, Z
     7a8:	89 2b       	or	r24, r25

	adc_disable_clock(adc);
     7aa:	f8 01       	movw	r30, r16
     7ac:	80 83       	st	Z, r24
     7ae:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7b0:	75 dd       	rcall	.-1302   	; 0x29c <adc_disable_clock>

	cpu_irq_restore(flags);
}
     7b2:	bf be       	out	0x3f, r11	; 63
     7b4:	0f 90       	pop	r0
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	1f 91       	pop	r17
     7bc:	0f 91       	pop	r16
     7be:	ff 90       	pop	r15
     7c0:	ef 90       	pop	r14
     7c2:	df 90       	pop	r13
     7c4:	cf 90       	pop	r12
     7c6:	bf 90       	pop	r11
     7c8:	08 95       	ret

000007ca <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
     7ca:	df 92       	push	r13
     7cc:	ef 92       	push	r14
     7ce:	ff 92       	push	r15
     7d0:	0f 93       	push	r16
     7d2:	1f 93       	push	r17
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	1f 92       	push	r1
     7da:	cd b7       	in	r28, 0x3d	; 61
     7dc:	de b7       	in	r29, 0x3e	; 62
     7de:	8c 01       	movw	r16, r24
     7e0:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     7e2:	8f b7       	in	r24, 0x3f	; 63
     7e4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     7e6:	f8 94       	cli
	return flags;
     7e8:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
     7ea:	c8 01       	movw	r24, r16
     7ec:	38 dd       	rcall	.-1424   	; 0x25e <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
     7ee:	f8 01       	movw	r30, r16
     7f0:	80 81       	ld	r24, Z
     7f2:	80 7c       	andi	r24, 0xC0	; 192
     7f4:	f7 01       	movw	r30, r14
     7f6:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
     7f8:	f8 01       	movw	r30, r16
     7fa:	80 8d       	ldd	r24, Z+24	; 0x18
     7fc:	91 8d       	ldd	r25, Z+25	; 0x19
     7fe:	f7 01       	movw	r30, r14
     800:	85 83       	std	Z+5, r24	; 0x05
     802:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
     804:	f8 01       	movw	r30, r16
     806:	82 81       	ldd	r24, Z+2	; 0x02
     808:	f7 01       	movw	r30, r14
     80a:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
     80c:	f8 01       	movw	r30, r16
     80e:	84 81       	ldd	r24, Z+4	; 0x04
     810:	f7 01       	movw	r30, r14
     812:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
     814:	f8 01       	movw	r30, r16
     816:	83 81       	ldd	r24, Z+3	; 0x03
     818:	f7 01       	movw	r30, r14
     81a:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
     81c:	f8 01       	movw	r30, r16
     81e:	81 81       	ldd	r24, Z+1	; 0x01
     820:	f7 01       	movw	r30, r14

	adc_disable_clock(adc);
     822:	81 83       	std	Z+1, r24	; 0x01
     824:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     826:	3a dd       	rcall	.-1420   	; 0x29c <adc_disable_clock>

	cpu_irq_restore(flags);
}
     828:	df be       	out	0x3f, r13	; 63
     82a:	0f 90       	pop	r0
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	1f 91       	pop	r17
     832:	0f 91       	pop	r16
     834:	ff 90       	pop	r15
     836:	ef 90       	pop	r14
     838:	df 90       	pop	r13
     83a:	08 95       	ret

0000083c <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
     83c:	af 92       	push	r10
     83e:	bf 92       	push	r11
     840:	cf 92       	push	r12
     842:	df 92       	push	r13
     844:	ef 92       	push	r14
     846:	ff 92       	push	r15
     848:	0f 93       	push	r16
     84a:	1f 93       	push	r17
     84c:	cf 93       	push	r28
     84e:	df 93       	push	r29
     850:	1f 92       	push	r1
     852:	cd b7       	in	r28, 0x3d	; 61
     854:	de b7       	in	r29, 0x3e	; 62
     856:	6c 01       	movw	r12, r24
     858:	b6 2e       	mov	r11, r22
     85a:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     85c:	86 2f       	mov	r24, r22
     85e:	83 70       	andi	r24, 0x03	; 3
     860:	29 f4       	brne	.+10     	; 0x86c <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     862:	96 2f       	mov	r25, r22
     864:	96 95       	lsr	r25
     866:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     868:	82 e0       	ldi	r24, 0x02	; 2
     86a:	02 c0       	rjmp	.+4      	; 0x870 <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     86c:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     86e:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     870:	90 ff       	sbrs	r25, 0
		index++;
     872:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     874:	86 01       	movw	r16, r12
     876:	00 5e       	subi	r16, 0xE0	; 224
     878:	1f 4f       	sbci	r17, 0xFF	; 255
     87a:	98 e0       	ldi	r25, 0x08	; 8
     87c:	89 9f       	mul	r24, r25
     87e:	00 0d       	add	r16, r0
     880:	11 1d       	adc	r17, r1
     882:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     884:	8f b7       	in	r24, 0x3f	; 63
     886:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     888:	f8 94       	cli
	return flags;
     88a:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
     88c:	c6 01       	movw	r24, r12
     88e:	e7 dc       	rcall	.-1586   	; 0x25e <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
     890:	f7 01       	movw	r30, r14
     892:	80 81       	ld	r24, Z
     894:	f8 01       	movw	r30, r16
     896:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
     898:	f7 01       	movw	r30, r14
     89a:	82 81       	ldd	r24, Z+2	; 0x02
     89c:	f8 01       	movw	r30, r16
     89e:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
     8a0:	f7 01       	movw	r30, r14
     8a2:	81 81       	ldd	r24, Z+1	; 0x01
     8a4:	f8 01       	movw	r30, r16
     8a6:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     8a8:	b0 fe       	sbrs	r11, 0
     8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
     8ac:	f7 01       	movw	r30, r14
     8ae:	83 81       	ldd	r24, Z+3	; 0x03
     8b0:	f8 01       	movw	r30, r16
	}
	adc_disable_clock(adc);
     8b2:	86 83       	std	Z+6, r24	; 0x06
     8b4:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     8b6:	f2 dc       	rcall	.-1564   	; 0x29c <adc_disable_clock>

	cpu_irq_restore(flags);
}
     8b8:	af be       	out	0x3f, r10	; 63
     8ba:	0f 90       	pop	r0
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	1f 91       	pop	r17
     8c2:	0f 91       	pop	r16
     8c4:	ff 90       	pop	r15
     8c6:	ef 90       	pop	r14
     8c8:	df 90       	pop	r13
     8ca:	cf 90       	pop	r12
     8cc:	bf 90       	pop	r11
     8ce:	af 90       	pop	r10
     8d0:	08 95       	ret

000008d2 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
     8d2:	af 92       	push	r10
     8d4:	bf 92       	push	r11
     8d6:	cf 92       	push	r12
     8d8:	df 92       	push	r13
     8da:	ef 92       	push	r14
     8dc:	ff 92       	push	r15
     8de:	0f 93       	push	r16
     8e0:	1f 93       	push	r17
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	1f 92       	push	r1
     8e8:	cd b7       	in	r28, 0x3d	; 61
     8ea:	de b7       	in	r29, 0x3e	; 62
     8ec:	6c 01       	movw	r12, r24
     8ee:	b6 2e       	mov	r11, r22
     8f0:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     8f2:	86 2f       	mov	r24, r22
     8f4:	83 70       	andi	r24, 0x03	; 3
     8f6:	29 f4       	brne	.+10     	; 0x902 <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     8f8:	96 2f       	mov	r25, r22
     8fa:	96 95       	lsr	r25
     8fc:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     8fe:	82 e0       	ldi	r24, 0x02	; 2
     900:	02 c0       	rjmp	.+4      	; 0x906 <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     902:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     904:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     906:	90 ff       	sbrs	r25, 0
		index++;
     908:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     90a:	86 01       	movw	r16, r12
     90c:	00 5e       	subi	r16, 0xE0	; 224
     90e:	1f 4f       	sbci	r17, 0xFF	; 255
     910:	98 e0       	ldi	r25, 0x08	; 8
     912:	89 9f       	mul	r24, r25
     914:	00 0d       	add	r16, r0
     916:	11 1d       	adc	r17, r1
     918:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     91a:	8f b7       	in	r24, 0x3f	; 63
     91c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     91e:	f8 94       	cli
	return flags;
     920:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
     922:	c6 01       	movw	r24, r12
     924:	9c dc       	rcall	.-1736   	; 0x25e <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
     926:	f8 01       	movw	r30, r16
     928:	80 81       	ld	r24, Z
     92a:	f7 01       	movw	r30, r14
     92c:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
     92e:	f8 01       	movw	r30, r16
     930:	82 81       	ldd	r24, Z+2	; 0x02
     932:	f7 01       	movw	r30, r14
     934:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
     936:	f8 01       	movw	r30, r16
     938:	81 81       	ldd	r24, Z+1	; 0x01
     93a:	f7 01       	movw	r30, r14
     93c:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     93e:	b0 fe       	sbrs	r11, 0
     940:	04 c0       	rjmp	.+8      	; 0x94a <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
     942:	f8 01       	movw	r30, r16
     944:	86 81       	ldd	r24, Z+6	; 0x06
     946:	f7 01       	movw	r30, r14
	}
	adc_disable_clock(adc);
     948:	83 83       	std	Z+3, r24	; 0x03
     94a:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     94c:	a7 dc       	rcall	.-1714   	; 0x29c <adc_disable_clock>

	cpu_irq_restore(flags);
}
     94e:	af be       	out	0x3f, r10	; 63
     950:	0f 90       	pop	r0
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	1f 91       	pop	r17
     958:	0f 91       	pop	r16
     95a:	ff 90       	pop	r15
     95c:	ef 90       	pop	r14
     95e:	df 90       	pop	r13
     960:	cf 90       	pop	r12
     962:	bf 90       	pop	r11
     964:	af 90       	pop	r10
     966:	08 95       	ret

00000968 <MQTTSerialize_connectLength>:

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
     968:	ef 92       	push	r14
     96a:	ff 92       	push	r15
     96c:	0f 93       	push	r16
     96e:	1f 93       	push	r17
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	ec 01       	movw	r28, r24
     976:	8e 81       	ldd	r24, Y+6	; 0x06
     978:	83 30       	cpi	r24, 0x03	; 3
     97a:	29 f0       	breq	.+10     	; 0x986 <MQTTSerialize_connectLength+0x1e>
     97c:	84 30       	cpi	r24, 0x04	; 4
     97e:	31 f4       	brne	.+12     	; 0x98c <MQTTSerialize_connectLength+0x24>
     980:	0a e0       	ldi	r16, 0x0A	; 10
     982:	10 e0       	ldi	r17, 0x00	; 0
     984:	05 c0       	rjmp	.+10     	; 0x990 <MQTTSerialize_connectLength+0x28>
     986:	0c e0       	ldi	r16, 0x0C	; 12
     988:	10 e0       	ldi	r17, 0x00	; 0
     98a:	02 c0       	rjmp	.+4      	; 0x990 <MQTTSerialize_connectLength+0x28>
     98c:	00 e0       	ldi	r16, 0x00	; 0
     98e:	10 e0       	ldi	r17, 0x00	; 0
     990:	4f 81       	ldd	r20, Y+7	; 0x07
     992:	58 85       	ldd	r21, Y+8	; 0x08
     994:	69 85       	ldd	r22, Y+9	; 0x09
     996:	7a 85       	ldd	r23, Y+10	; 0x0a
     998:	8b 85       	ldd	r24, Y+11	; 0x0b
     99a:	9c 85       	ldd	r25, Y+12	; 0x0c
     99c:	fb d1       	rcall	.+1014   	; 0xd94 <MQTTstrlen>
     99e:	02 96       	adiw	r24, 0x02	; 2
     9a0:	08 0f       	add	r16, r24
     9a2:	19 1f       	adc	r17, r25
     9a4:	88 89       	ldd	r24, Y+16	; 0x10
     9a6:	88 23       	and	r24, r24
     9a8:	a1 f0       	breq	.+40     	; 0x9d2 <MQTTSerialize_connectLength+0x6a>
     9aa:	4f 89       	ldd	r20, Y+23	; 0x17
     9ac:	58 8d       	ldd	r21, Y+24	; 0x18
     9ae:	69 8d       	ldd	r22, Y+25	; 0x19
     9b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     9b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9b6:	ee d1       	rcall	.+988    	; 0xd94 <MQTTstrlen>
     9b8:	7c 01       	movw	r14, r24
     9ba:	4d 8d       	ldd	r20, Y+29	; 0x1d
     9bc:	5e 8d       	ldd	r21, Y+30	; 0x1e
     9be:	6f 8d       	ldd	r22, Y+31	; 0x1f
     9c0:	78 a1       	ldd	r23, Y+32	; 0x20
     9c2:	89 a1       	ldd	r24, Y+33	; 0x21
     9c4:	9a a1       	ldd	r25, Y+34	; 0x22
     9c6:	e6 d1       	rcall	.+972    	; 0xd94 <MQTTstrlen>
     9c8:	8e 0d       	add	r24, r14
     9ca:	9f 1d       	adc	r25, r15
     9cc:	04 96       	adiw	r24, 0x04	; 4
     9ce:	08 0f       	add	r16, r24
     9d0:	19 1f       	adc	r17, r25
     9d2:	8d a1       	ldd	r24, Y+37	; 0x25
     9d4:	9e a1       	ldd	r25, Y+38	; 0x26
     9d6:	89 2b       	or	r24, r25
     9d8:	21 f4       	brne	.+8      	; 0x9e2 <MQTTSerialize_connectLength+0x7a>
     9da:	89 a5       	ldd	r24, Y+41	; 0x29
     9dc:	9a a5       	ldd	r25, Y+42	; 0x2a
     9de:	89 2b       	or	r24, r25
     9e0:	51 f0       	breq	.+20     	; 0x9f6 <MQTTSerialize_connectLength+0x8e>
     9e2:	4d a1       	ldd	r20, Y+37	; 0x25
     9e4:	5e a1       	ldd	r21, Y+38	; 0x26
     9e6:	6f a1       	ldd	r22, Y+39	; 0x27
     9e8:	78 a5       	ldd	r23, Y+40	; 0x28
     9ea:	89 a5       	ldd	r24, Y+41	; 0x29
     9ec:	9a a5       	ldd	r25, Y+42	; 0x2a
     9ee:	d2 d1       	rcall	.+932    	; 0xd94 <MQTTstrlen>
     9f0:	02 96       	adiw	r24, 0x02	; 2
     9f2:	08 0f       	add	r16, r24
     9f4:	19 1f       	adc	r17, r25
     9f6:	8b a5       	ldd	r24, Y+43	; 0x2b
     9f8:	9c a5       	ldd	r25, Y+44	; 0x2c
     9fa:	89 2b       	or	r24, r25
     9fc:	21 f4       	brne	.+8      	; 0xa06 <MQTTSerialize_connectLength+0x9e>
     9fe:	8f a5       	ldd	r24, Y+47	; 0x2f
     a00:	98 a9       	ldd	r25, Y+48	; 0x30
     a02:	89 2b       	or	r24, r25
     a04:	51 f0       	breq	.+20     	; 0xa1a <MQTTSerialize_connectLength+0xb2>
     a06:	4b a5       	ldd	r20, Y+43	; 0x2b
     a08:	5c a5       	ldd	r21, Y+44	; 0x2c
     a0a:	6d a5       	ldd	r22, Y+45	; 0x2d
     a0c:	7e a5       	ldd	r23, Y+46	; 0x2e
     a0e:	8f a5       	ldd	r24, Y+47	; 0x2f
     a10:	98 a9       	ldd	r25, Y+48	; 0x30
     a12:	c0 d1       	rcall	.+896    	; 0xd94 <MQTTstrlen>
     a14:	02 96       	adiw	r24, 0x02	; 2
     a16:	08 0f       	add	r16, r24
     a18:	19 1f       	adc	r17, r25
     a1a:	c8 01       	movw	r24, r16
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	ff 90       	pop	r15
     a26:	ef 90       	pop	r14
     a28:	08 95       	ret

00000a2a <MQTTSerialize_connect>:
     a2a:	af 92       	push	r10
     a2c:	bf 92       	push	r11
     a2e:	cf 92       	push	r12
     a30:	df 92       	push	r13
     a32:	ef 92       	push	r14
     a34:	ff 92       	push	r15
     a36:	0f 93       	push	r16
     a38:	1f 93       	push	r17
     a3a:	cf 93       	push	r28
     a3c:	df 93       	push	r29
     a3e:	1f 92       	push	r1
     a40:	1f 92       	push	r1
     a42:	cd b7       	in	r28, 0x3d	; 61
     a44:	de b7       	in	r29, 0x3e	; 62
     a46:	6c 01       	movw	r12, r24
     a48:	5b 01       	movw	r10, r22
     a4a:	8a 01       	movw	r16, r20
     a4c:	89 83       	std	Y+1, r24	; 0x01
     a4e:	9a 83       	std	Y+2, r25	; 0x02
     a50:	ca 01       	movw	r24, r20
     a52:	8a df       	rcall	.-236    	; 0x968 <MQTTSerialize_connectLength>
     a54:	7c 01       	movw	r14, r24
     a56:	04 d1       	rcall	.+520    	; 0xc60 <MQTTPacket_len>
     a58:	a8 16       	cp	r10, r24
     a5a:	b9 06       	cpc	r11, r25
     a5c:	0c f4       	brge	.+2      	; 0xa60 <MQTTSerialize_connect+0x36>
     a5e:	9f c0       	rjmp	.+318    	; 0xb9e <MQTTSerialize_connect+0x174>
     a60:	60 e1       	ldi	r22, 0x10	; 16
     a62:	ce 01       	movw	r24, r28
     a64:	01 96       	adiw	r24, 0x01	; 1
     a66:	0b d1       	rcall	.+534    	; 0xc7e <writeChar>
     a68:	b7 01       	movw	r22, r14
     a6a:	89 81       	ldd	r24, Y+1	; 0x01
     a6c:	9a 81       	ldd	r25, Y+2	; 0x02
     a6e:	d2 d0       	rcall	.+420    	; 0xc14 <MQTTPacket_encode>
     a70:	29 81       	ldd	r18, Y+1	; 0x01
     a72:	3a 81       	ldd	r19, Y+2	; 0x02
     a74:	82 0f       	add	r24, r18
     a76:	93 1f       	adc	r25, r19
     a78:	89 83       	std	Y+1, r24	; 0x01
     a7a:	9a 83       	std	Y+2, r25	; 0x02
     a7c:	f8 01       	movw	r30, r16
     a7e:	86 81       	ldd	r24, Z+6	; 0x06
     a80:	84 30       	cpi	r24, 0x04	; 4
     a82:	51 f4       	brne	.+20     	; 0xa98 <MQTTSerialize_connect+0x6e>
     a84:	67 e6       	ldi	r22, 0x67	; 103
     a86:	70 e2       	ldi	r23, 0x20	; 32
     a88:	ce 01       	movw	r24, r28
     a8a:	01 96       	adiw	r24, 0x01	; 1
     a8c:	21 d1       	rcall	.+578    	; 0xcd0 <writeCString>
     a8e:	64 e0       	ldi	r22, 0x04	; 4
     a90:	ce 01       	movw	r24, r28
     a92:	01 96       	adiw	r24, 0x01	; 1
     a94:	f4 d0       	rcall	.+488    	; 0xc7e <writeChar>
     a96:	09 c0       	rjmp	.+18     	; 0xaaa <MQTTSerialize_connect+0x80>
     a98:	6c e6       	ldi	r22, 0x6C	; 108
     a9a:	70 e2       	ldi	r23, 0x20	; 32
     a9c:	ce 01       	movw	r24, r28
     a9e:	01 96       	adiw	r24, 0x01	; 1
     aa0:	17 d1       	rcall	.+558    	; 0xcd0 <writeCString>
     aa2:	63 e0       	ldi	r22, 0x03	; 3
     aa4:	ce 01       	movw	r24, r28
     aa6:	01 96       	adiw	r24, 0x01	; 1
     aa8:	ea d0       	rcall	.+468    	; 0xc7e <writeChar>
     aaa:	f1 2c       	mov	r15, r1
     aac:	f8 01       	movw	r30, r16
     aae:	87 85       	ldd	r24, Z+15	; 0x0f
     ab0:	80 fb       	bst	r24, 0
     ab2:	f1 f8       	bld	r15, 1
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	90 89       	ldd	r25, Z+16	; 0x10
     ab8:	91 11       	cpse	r25, r1
     aba:	01 c0       	rjmp	.+2      	; 0xabe <MQTTSerialize_connect+0x94>
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	80 fb       	bst	r24, 0
     ac0:	f2 f8       	bld	r15, 2
     ac2:	f2 fe       	sbrs	r15, 2
     ac4:	0d c0       	rjmp	.+26     	; 0xae0 <MQTTSerialize_connect+0xb6>
     ac6:	f8 01       	movw	r30, r16
     ac8:	84 a1       	ldd	r24, Z+36	; 0x24
     aca:	83 70       	andi	r24, 0x03	; 3
     acc:	88 0f       	add	r24, r24
     ace:	88 0f       	add	r24, r24
     ad0:	88 0f       	add	r24, r24
     ad2:	9f 2d       	mov	r25, r15
     ad4:	97 7e       	andi	r25, 0xE7	; 231
     ad6:	f9 2e       	mov	r15, r25
     ad8:	f8 2a       	or	r15, r24
     ada:	83 a1       	ldd	r24, Z+35	; 0x23
     adc:	80 fb       	bst	r24, 0
     ade:	f5 f8       	bld	r15, 5
     ae0:	f8 01       	movw	r30, r16
     ae2:	85 a1       	ldd	r24, Z+37	; 0x25
     ae4:	96 a1       	ldd	r25, Z+38	; 0x26
     ae6:	89 2b       	or	r24, r25
     ae8:	21 f4       	brne	.+8      	; 0xaf2 <MQTTSerialize_connect+0xc8>
     aea:	81 a5       	ldd	r24, Z+41	; 0x29
     aec:	92 a5       	ldd	r25, Z+42	; 0x2a
     aee:	89 2b       	or	r24, r25
     af0:	11 f0       	breq	.+4      	; 0xaf6 <MQTTSerialize_connect+0xcc>
     af2:	68 94       	set
     af4:	f7 f8       	bld	r15, 7
     af6:	f8 01       	movw	r30, r16
     af8:	83 a5       	ldd	r24, Z+43	; 0x2b
     afa:	94 a5       	ldd	r25, Z+44	; 0x2c
     afc:	89 2b       	or	r24, r25
     afe:	21 f4       	brne	.+8      	; 0xb08 <MQTTSerialize_connect+0xde>
     b00:	87 a5       	ldd	r24, Z+47	; 0x2f
     b02:	90 a9       	ldd	r25, Z+48	; 0x30
     b04:	89 2b       	or	r24, r25
     b06:	11 f0       	breq	.+4      	; 0xb0c <MQTTSerialize_connect+0xe2>
     b08:	68 94       	set
     b0a:	f6 f8       	bld	r15, 6
     b0c:	6f 2d       	mov	r22, r15
     b0e:	ce 01       	movw	r24, r28
     b10:	01 96       	adiw	r24, 0x01	; 1
     b12:	b5 d0       	rcall	.+362    	; 0xc7e <writeChar>
     b14:	f8 01       	movw	r30, r16
     b16:	65 85       	ldd	r22, Z+13	; 0x0d
     b18:	76 85       	ldd	r23, Z+14	; 0x0e
     b1a:	ce 01       	movw	r24, r28
     b1c:	01 96       	adiw	r24, 0x01	; 1
     b1e:	b9 d0       	rcall	.+370    	; 0xc92 <writeInt>
     b20:	f8 01       	movw	r30, r16
     b22:	27 81       	ldd	r18, Z+7	; 0x07
     b24:	30 85       	ldd	r19, Z+8	; 0x08
     b26:	41 85       	ldd	r20, Z+9	; 0x09
     b28:	52 85       	ldd	r21, Z+10	; 0x0a
     b2a:	63 85       	ldd	r22, Z+11	; 0x0b
     b2c:	74 85       	ldd	r23, Z+12	; 0x0c
     b2e:	ce 01       	movw	r24, r28
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	f4 d0       	rcall	.+488    	; 0xd1c <writeMQTTString>
     b34:	f8 01       	movw	r30, r16
     b36:	80 89       	ldd	r24, Z+16	; 0x10
     b38:	88 23       	and	r24, r24
     b3a:	99 f0       	breq	.+38     	; 0xb62 <MQTTSerialize_connect+0x138>
     b3c:	27 89       	ldd	r18, Z+23	; 0x17
     b3e:	30 8d       	ldd	r19, Z+24	; 0x18
     b40:	41 8d       	ldd	r20, Z+25	; 0x19
     b42:	52 8d       	ldd	r21, Z+26	; 0x1a
     b44:	63 8d       	ldd	r22, Z+27	; 0x1b
     b46:	74 8d       	ldd	r23, Z+28	; 0x1c
     b48:	ce 01       	movw	r24, r28
     b4a:	01 96       	adiw	r24, 0x01	; 1
     b4c:	e7 d0       	rcall	.+462    	; 0xd1c <writeMQTTString>
     b4e:	f8 01       	movw	r30, r16
     b50:	25 8d       	ldd	r18, Z+29	; 0x1d
     b52:	36 8d       	ldd	r19, Z+30	; 0x1e
     b54:	47 8d       	ldd	r20, Z+31	; 0x1f
     b56:	50 a1       	ldd	r21, Z+32	; 0x20
     b58:	61 a1       	ldd	r22, Z+33	; 0x21
     b5a:	72 a1       	ldd	r23, Z+34	; 0x22
     b5c:	ce 01       	movw	r24, r28
     b5e:	01 96       	adiw	r24, 0x01	; 1
     b60:	dd d0       	rcall	.+442    	; 0xd1c <writeMQTTString>
     b62:	ef 2c       	mov	r14, r15
     b64:	ff 20       	and	r15, r15
     b66:	54 f4       	brge	.+20     	; 0xb7c <MQTTSerialize_connect+0x152>
     b68:	f8 01       	movw	r30, r16
     b6a:	25 a1       	ldd	r18, Z+37	; 0x25
     b6c:	36 a1       	ldd	r19, Z+38	; 0x26
     b6e:	47 a1       	ldd	r20, Z+39	; 0x27
     b70:	50 a5       	ldd	r21, Z+40	; 0x28
     b72:	61 a5       	ldd	r22, Z+41	; 0x29
     b74:	72 a5       	ldd	r23, Z+42	; 0x2a
     b76:	ce 01       	movw	r24, r28
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	d0 d0       	rcall	.+416    	; 0xd1c <writeMQTTString>
     b7c:	e6 fe       	sbrs	r14, 6
     b7e:	0a c0       	rjmp	.+20     	; 0xb94 <MQTTSerialize_connect+0x16a>
     b80:	f8 01       	movw	r30, r16
     b82:	23 a5       	ldd	r18, Z+43	; 0x2b
     b84:	34 a5       	ldd	r19, Z+44	; 0x2c
     b86:	45 a5       	ldd	r20, Z+45	; 0x2d
     b88:	56 a5       	ldd	r21, Z+46	; 0x2e
     b8a:	67 a5       	ldd	r22, Z+47	; 0x2f
     b8c:	70 a9       	ldd	r23, Z+48	; 0x30
     b8e:	ce 01       	movw	r24, r28
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	c4 d0       	rcall	.+392    	; 0xd1c <writeMQTTString>
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	9a 81       	ldd	r25, Y+2	; 0x02
     b98:	8c 19       	sub	r24, r12
     b9a:	9d 09       	sbc	r25, r13
     b9c:	02 c0       	rjmp	.+4      	; 0xba2 <MQTTSerialize_connect+0x178>
     b9e:	8e ef       	ldi	r24, 0xFE	; 254
     ba0:	9f ef       	ldi	r25, 0xFF	; 255
     ba2:	0f 90       	pop	r0
     ba4:	0f 90       	pop	r0
     ba6:	df 91       	pop	r29
     ba8:	cf 91       	pop	r28
     baa:	1f 91       	pop	r17
     bac:	0f 91       	pop	r16
     bae:	ff 90       	pop	r15
     bb0:	ef 90       	pop	r14
     bb2:	df 90       	pop	r13
     bb4:	cf 90       	pop	r12
     bb6:	bf 90       	pop	r11
     bb8:	af 90       	pop	r10
     bba:	08 95       	ret

00000bbc <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
     bbc:	0f 93       	push	r16
     bbe:	1f 93       	push	r17
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
     bc4:	1f 92       	push	r1
     bc6:	1f 92       	push	r1
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
     bcc:	89 83       	std	Y+1, r24	; 0x01
     bce:	9a 83       	std	Y+2, r25	; 0x02

	FUNC_ENTRY;
	if (buflen < 2)
     bd0:	62 30       	cpi	r22, 0x02	; 2
     bd2:	71 05       	cpc	r23, r1
     bd4:	9c f0       	brlt	.+38     	; 0xbfc <MQTTSerialize_zero+0x40>
     bd6:	8c 01       	movw	r16, r24
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
     bd8:	64 2f       	mov	r22, r20
     bda:	62 95       	swap	r22
     bdc:	60 7f       	andi	r22, 0xF0	; 240
	writeChar(&ptr, header.byte); /* write header */
     bde:	ce 01       	movw	r24, r28
     be0:	01 96       	adiw	r24, 0x01	; 1
     be2:	4d d0       	rcall	.+154    	; 0xc7e <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
     be4:	60 e0       	ldi	r22, 0x00	; 0
     be6:	70 e0       	ldi	r23, 0x00	; 0
     be8:	89 81       	ldd	r24, Y+1	; 0x01
     bea:	9a 81       	ldd	r25, Y+2	; 0x02
     bec:	13 d0       	rcall	.+38     	; 0xc14 <MQTTPacket_encode>
	rc = ptr - buf;
     bee:	29 81       	ldd	r18, Y+1	; 0x01
     bf0:	3a 81       	ldd	r19, Y+2	; 0x02
     bf2:	82 0f       	add	r24, r18
     bf4:	93 1f       	adc	r25, r19
     bf6:	80 1b       	sub	r24, r16
     bf8:	91 0b       	sbc	r25, r17
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <MQTTSerialize_zero+0x44>
	unsigned char *ptr = buf;

	FUNC_ENTRY;
	if (buflen < 2)
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
     bfc:	8e ef       	ldi	r24, 0xFE	; 254
     bfe:	9f ef       	ldi	r25, 0xFF	; 255
	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
	rc = ptr - buf;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
     c00:	0f 90       	pop	r0
     c02:	0f 90       	pop	r0
     c04:	df 91       	pop	r29
     c06:	cf 91       	pop	r28
     c08:	1f 91       	pop	r17
     c0a:	0f 91       	pop	r16
     c0c:	08 95       	ret

00000c0e <MQTTSerialize_disconnect>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
     c0e:	4e e0       	ldi	r20, 0x0E	; 14
     c10:	d5 cf       	rjmp	.-86     	; 0xbbc <MQTTSerialize_zero>
}
     c12:	08 95       	ret

00000c14 <MQTTPacket_encode>:
		}
	}
	mqttstring->cstring = NULL;
	FUNC_EXIT_RC(rc);
	return rc;
}
     c14:	dc 01       	movw	r26, r24
     c16:	e0 e0       	ldi	r30, 0x00	; 0
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	9b 01       	movw	r18, r22
     c1c:	2f 77       	andi	r18, 0x7F	; 127
     c1e:	30 78       	andi	r19, 0x80	; 128
     c20:	33 23       	and	r19, r19
     c22:	34 f4       	brge	.+12     	; 0xc30 <MQTTPacket_encode+0x1c>
     c24:	21 50       	subi	r18, 0x01	; 1
     c26:	31 09       	sbc	r19, r1
     c28:	20 68       	ori	r18, 0x80	; 128
     c2a:	3f 6f       	ori	r19, 0xFF	; 255
     c2c:	2f 5f       	subi	r18, 0xFF	; 255
     c2e:	3f 4f       	sbci	r19, 0xFF	; 255
     c30:	ab 01       	movw	r20, r22
     c32:	77 23       	and	r23, r23
     c34:	14 f4       	brge	.+4      	; 0xc3a <MQTTPacket_encode+0x26>
     c36:	41 58       	subi	r20, 0x81	; 129
     c38:	5f 4f       	sbci	r21, 0xFF	; 255
     c3a:	ba 01       	movw	r22, r20
     c3c:	66 0f       	add	r22, r22
     c3e:	67 2f       	mov	r22, r23
     c40:	66 1f       	adc	r22, r22
     c42:	77 0b       	sbc	r23, r23
     c44:	16 16       	cp	r1, r22
     c46:	17 06       	cpc	r1, r23
     c48:	24 f4       	brge	.+8      	; 0xc52 <MQTTPacket_encode+0x3e>
     c4a:	31 96       	adiw	r30, 0x01	; 1
     c4c:	20 68       	ori	r18, 0x80	; 128
     c4e:	2d 93       	st	X+, r18
     c50:	e4 cf       	rjmp	.-56     	; 0xc1a <MQTTPacket_encode+0x6>
     c52:	dc 01       	movw	r26, r24
     c54:	ae 0f       	add	r26, r30
     c56:	bf 1f       	adc	r27, r31
     c58:	2c 93       	st	X, r18
     c5a:	cf 01       	movw	r24, r30
     c5c:	01 96       	adiw	r24, 0x01	; 1
     c5e:	08 95       	ret

00000c60 <MQTTPacket_len>:
     c60:	9c 01       	movw	r18, r24
     c62:	2f 5f       	subi	r18, 0xFF	; 255
     c64:	3f 4f       	sbci	r19, 0xFF	; 255
     c66:	20 38       	cpi	r18, 0x80	; 128
     c68:	31 05       	cpc	r19, r1
     c6a:	14 f4       	brge	.+4      	; 0xc70 <MQTTPacket_len+0x10>
     c6c:	02 96       	adiw	r24, 0x02	; 2
     c6e:	08 95       	ret
     c70:	21 15       	cp	r18, r1
     c72:	30 44       	sbci	r19, 0x40	; 64
     c74:	14 f4       	brge	.+4      	; 0xc7a <MQTTPacket_len+0x1a>
     c76:	03 96       	adiw	r24, 0x03	; 3
     c78:	08 95       	ret
     c7a:	04 96       	adiw	r24, 0x04	; 4
     c7c:	08 95       	ret

00000c7e <writeChar>:
     c7e:	fc 01       	movw	r30, r24
     c80:	a0 81       	ld	r26, Z
     c82:	b1 81       	ldd	r27, Z+1	; 0x01
     c84:	6c 93       	st	X, r22
     c86:	80 81       	ld	r24, Z
     c88:	91 81       	ldd	r25, Z+1	; 0x01
     c8a:	01 96       	adiw	r24, 0x01	; 1
     c8c:	80 83       	st	Z, r24
     c8e:	91 83       	std	Z+1, r25	; 0x01
     c90:	08 95       	ret

00000c92 <writeInt>:
     c92:	fc 01       	movw	r30, r24
     c94:	a0 81       	ld	r26, Z
     c96:	b1 81       	ldd	r27, Z+1	; 0x01
     c98:	cb 01       	movw	r24, r22
     c9a:	77 23       	and	r23, r23
     c9c:	14 f4       	brge	.+4      	; 0xca2 <writeInt+0x10>
     c9e:	81 50       	subi	r24, 0x01	; 1
     ca0:	9f 4f       	sbci	r25, 0xFF	; 255
     ca2:	9c 93       	st	X, r25
     ca4:	a0 81       	ld	r26, Z
     ca6:	b1 81       	ldd	r27, Z+1	; 0x01
     ca8:	cd 01       	movw	r24, r26
     caa:	01 96       	adiw	r24, 0x01	; 1
     cac:	80 83       	st	Z, r24
     cae:	91 83       	std	Z+1, r25	; 0x01
     cb0:	70 78       	andi	r23, 0x80	; 128
     cb2:	77 23       	and	r23, r23
     cb4:	2c f4       	brge	.+10     	; 0xcc0 <writeInt+0x2e>
     cb6:	61 50       	subi	r22, 0x01	; 1
     cb8:	71 09       	sbc	r23, r1
     cba:	7f 6f       	ori	r23, 0xFF	; 255
     cbc:	6f 5f       	subi	r22, 0xFF	; 255
     cbe:	7f 4f       	sbci	r23, 0xFF	; 255
     cc0:	11 96       	adiw	r26, 0x01	; 1
     cc2:	6c 93       	st	X, r22
     cc4:	80 81       	ld	r24, Z
     cc6:	91 81       	ldd	r25, Z+1	; 0x01
     cc8:	01 96       	adiw	r24, 0x01	; 1
     cca:	80 83       	st	Z, r24
     ccc:	91 83       	std	Z+1, r25	; 0x01
     cce:	08 95       	ret

00000cd0 <writeCString>:
     cd0:	ef 92       	push	r14
     cd2:	ff 92       	push	r15
     cd4:	0f 93       	push	r16
     cd6:	1f 93       	push	r17
     cd8:	cf 93       	push	r28
     cda:	df 93       	push	r29
     cdc:	8c 01       	movw	r16, r24
     cde:	7b 01       	movw	r14, r22
     ce0:	eb 01       	movw	r28, r22
     ce2:	09 90       	ld	r0, Y+
     ce4:	00 20       	and	r0, r0
     ce6:	e9 f7       	brne	.-6      	; 0xce2 <writeCString+0x12>
     ce8:	21 97       	sbiw	r28, 0x01	; 1
     cea:	c6 1b       	sub	r28, r22
     cec:	d7 0b       	sbc	r29, r23
     cee:	be 01       	movw	r22, r28
     cf0:	d0 df       	rcall	.-96     	; 0xc92 <writeInt>
     cf2:	ae 01       	movw	r20, r28
     cf4:	b7 01       	movw	r22, r14
     cf6:	f8 01       	movw	r30, r16
     cf8:	80 81       	ld	r24, Z
     cfa:	91 81       	ldd	r25, Z+1	; 0x01
     cfc:	0e 94 64 12 	call	0x24c8	; 0x24c8 <memcpy>
     d00:	f8 01       	movw	r30, r16
     d02:	80 81       	ld	r24, Z
     d04:	91 81       	ldd	r25, Z+1	; 0x01
     d06:	c8 0f       	add	r28, r24
     d08:	d9 1f       	adc	r29, r25
     d0a:	c0 83       	st	Z, r28
     d0c:	d1 83       	std	Z+1, r29	; 0x01
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	1f 91       	pop	r17
     d14:	0f 91       	pop	r16
     d16:	ff 90       	pop	r15
     d18:	ef 90       	pop	r14
     d1a:	08 95       	ret

00000d1c <writeMQTTString>:
     d1c:	ef 92       	push	r14
     d1e:	ff 92       	push	r15
     d20:	0f 93       	push	r16
     d22:	1f 93       	push	r17
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
     d28:	00 d0       	rcall	.+0      	; 0xd2a <writeMQTTString+0xe>
     d2a:	00 d0       	rcall	.+0      	; 0xd2c <writeMQTTString+0x10>
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
     d30:	7c 01       	movw	r14, r24
     d32:	29 83       	std	Y+1, r18	; 0x01
     d34:	3a 83       	std	Y+2, r19	; 0x02
     d36:	4b 83       	std	Y+3, r20	; 0x03
     d38:	5c 83       	std	Y+4, r21	; 0x04
     d3a:	6d 83       	std	Y+5, r22	; 0x05
     d3c:	7e 83       	std	Y+6, r23	; 0x06
     d3e:	0b 81       	ldd	r16, Y+3	; 0x03
     d40:	1c 81       	ldd	r17, Y+4	; 0x04
     d42:	10 16       	cp	r1, r16
     d44:	11 06       	cpc	r1, r17
     d46:	94 f4       	brge	.+36     	; 0xd6c <writeMQTTString+0x50>
     d48:	b8 01       	movw	r22, r16
     d4a:	a3 df       	rcall	.-186    	; 0xc92 <writeInt>
     d4c:	6d 81       	ldd	r22, Y+5	; 0x05
     d4e:	7e 81       	ldd	r23, Y+6	; 0x06
     d50:	a8 01       	movw	r20, r16
     d52:	f7 01       	movw	r30, r14
     d54:	80 81       	ld	r24, Z
     d56:	91 81       	ldd	r25, Z+1	; 0x01
     d58:	0e 94 64 12 	call	0x24c8	; 0x24c8 <memcpy>
     d5c:	f7 01       	movw	r30, r14
     d5e:	80 81       	ld	r24, Z
     d60:	91 81       	ldd	r25, Z+1	; 0x01
     d62:	08 0f       	add	r16, r24
     d64:	19 1f       	adc	r17, r25
     d66:	00 83       	st	Z, r16
     d68:	11 83       	std	Z+1, r17	; 0x01
     d6a:	0a c0       	rjmp	.+20     	; 0xd80 <writeMQTTString+0x64>
     d6c:	69 81       	ldd	r22, Y+1	; 0x01
     d6e:	7a 81       	ldd	r23, Y+2	; 0x02
     d70:	61 15       	cp	r22, r1
     d72:	71 05       	cpc	r23, r1
     d74:	11 f0       	breq	.+4      	; 0xd7a <writeMQTTString+0x5e>
     d76:	ac df       	rcall	.-168    	; 0xcd0 <writeCString>
     d78:	03 c0       	rjmp	.+6      	; 0xd80 <writeMQTTString+0x64>
     d7a:	60 e0       	ldi	r22, 0x00	; 0
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	89 df       	rcall	.-238    	; 0xc92 <writeInt>
     d80:	26 96       	adiw	r28, 0x06	; 6
     d82:	cd bf       	out	0x3d, r28	; 61
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	df 91       	pop	r29
     d88:	cf 91       	pop	r28
     d8a:	1f 91       	pop	r17
     d8c:	0f 91       	pop	r16
     d8e:	ff 90       	pop	r15
     d90:	ef 90       	pop	r14
     d92:	08 95       	ret

00000d94 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
     d98:	00 d0       	rcall	.+0      	; 0xd9a <MQTTstrlen+0x6>
     d9a:	00 d0       	rcall	.+0      	; 0xd9c <MQTTstrlen+0x8>
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
     da0:	49 83       	std	Y+1, r20	; 0x01
     da2:	5a 83       	std	Y+2, r21	; 0x02
     da4:	6b 83       	std	Y+3, r22	; 0x03
     da6:	7c 83       	std	Y+4, r23	; 0x04
     da8:	8d 83       	std	Y+5, r24	; 0x05
     daa:	9e 83       	std	Y+6, r25	; 0x06
     dac:	a9 81       	ldd	r26, Y+1	; 0x01
     dae:	ba 81       	ldd	r27, Y+2	; 0x02
	int rc = 0;

	if (mqttstring.cstring)
     db0:	10 97       	sbiw	r26, 0x00	; 0
     db2:	49 f0       	breq	.+18     	; 0xdc6 <MQTTstrlen+0x32>
		rc = strlen(mqttstring.cstring);
     db4:	fd 01       	movw	r30, r26
     db6:	01 90       	ld	r0, Z+
     db8:	00 20       	and	r0, r0
     dba:	e9 f7       	brne	.-6      	; 0xdb6 <MQTTstrlen+0x22>
     dbc:	31 97       	sbiw	r30, 0x01	; 1
     dbe:	cf 01       	movw	r24, r30
     dc0:	8a 1b       	sub	r24, r26
     dc2:	9b 0b       	sbc	r25, r27
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <MQTTstrlen+0x36>
	else
		rc = mqttstring.lenstring.len;
     dc6:	8b 81       	ldd	r24, Y+3	; 0x03
     dc8:	9c 81       	ldd	r25, Y+4	; 0x04
	return rc;
}
     dca:	26 96       	adiw	r28, 0x06	; 6
     dcc:	cd bf       	out	0x3d, r28	; 61
     dce:	de bf       	out	0x3e, r29	; 62
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	08 95       	ret

00000dd6 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
     dd6:	ef 92       	push	r14
     dd8:	ff 92       	push	r15
     dda:	0f 93       	push	r16
     ddc:	1f 93       	push	r17
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
     de2:	00 d0       	rcall	.+0      	; 0xde4 <MQTTSerialize_publishLength+0xe>
     de4:	00 d0       	rcall	.+0      	; 0xde6 <MQTTSerialize_publishLength+0x10>
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
     dea:	7c 01       	movw	r14, r24
     dec:	f4 2f       	mov	r31, r20
     dee:	e5 2f       	mov	r30, r21
     df0:	86 2f       	mov	r24, r22
     df2:	97 2f       	mov	r25, r23
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
     df4:	42 2f       	mov	r20, r18
     df6:	53 2f       	mov	r21, r19
     df8:	6f 2f       	mov	r22, r31
     dfa:	7e 2f       	mov	r23, r30
     dfc:	cb df       	rcall	.-106    	; 0xd94 <MQTTstrlen>
     dfe:	02 96       	adiw	r24, 0x02	; 2
     e00:	80 0f       	add	r24, r16
     e02:	91 1f       	adc	r25, r17
	if (qos > 0)
     e04:	1e 14       	cp	r1, r14
     e06:	1f 04       	cpc	r1, r15
     e08:	0c f4       	brge	.+2      	; 0xe0c <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
     e0a:	02 96       	adiw	r24, 0x02	; 2
	return len;
}
     e0c:	26 96       	adiw	r28, 0x06	; 6
     e0e:	cd bf       	out	0x3d, r28	; 61
     e10:	de bf       	out	0x3e, r29	; 62
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	1f 91       	pop	r17
     e18:	0f 91       	pop	r16
     e1a:	ff 90       	pop	r15
     e1c:	ef 90       	pop	r14
     e1e:	08 95       	ret

00000e20 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
     e20:	2f 92       	push	r2
     e22:	3f 92       	push	r3
     e24:	4f 92       	push	r4
     e26:	5f 92       	push	r5
     e28:	6f 92       	push	r6
     e2a:	7f 92       	push	r7
     e2c:	8f 92       	push	r8
     e2e:	9f 92       	push	r9
     e30:	af 92       	push	r10
     e32:	bf 92       	push	r11
     e34:	cf 92       	push	r12
     e36:	df 92       	push	r13
     e38:	ef 92       	push	r14
     e3a:	ff 92       	push	r15
     e3c:	0f 93       	push	r16
     e3e:	1f 93       	push	r17
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
     e48:	2a 97       	sbiw	r28, 0x0a	; 10
     e4a:	cd bf       	out	0x3d, r28	; 61
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	2c 01       	movw	r4, r24
     e50:	1b 01       	movw	r2, r22
     e52:	49 87       	std	Y+9, r20	; 0x09
     e54:	39 01       	movw	r6, r18
     e56:	0a 87       	std	Y+10, r16	; 0x0a
     e58:	28 2d       	mov	r18, r8
     e5a:	8b 82       	std	Y+3, r8	; 0x03
     e5c:	39 2d       	mov	r19, r9
     e5e:	9c 82       	std	Y+4, r9	; 0x04
     e60:	4a 2d       	mov	r20, r10
     e62:	ad 82       	std	Y+5, r10	; 0x05
     e64:	5b 2d       	mov	r21, r11
     e66:	be 82       	std	Y+6, r11	; 0x06
     e68:	6c 2d       	mov	r22, r12
     e6a:	cf 82       	std	Y+7, r12	; 0x07
     e6c:	7d 2d       	mov	r23, r13
     e6e:	d8 86       	std	Y+8, r13	; 0x08
     e70:	ca a0       	ldd	r12, Y+34	; 0x22
     e72:	db a0       	ldd	r13, Y+35	; 0x23
	unsigned char *ptr = buf;
     e74:	89 83       	std	Y+1, r24	; 0x01
     e76:	9a 83       	std	Y+2, r25	; 0x02
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
     e78:	86 01       	movw	r16, r12
     e7a:	c3 01       	movw	r24, r6
     e7c:	ac df       	rcall	.-168    	; 0xdd6 <MQTTSerialize_publishLength>
     e7e:	8c 01       	movw	r16, r24
     e80:	ef de       	rcall	.-546    	; 0xc60 <MQTTPacket_len>
     e82:	28 16       	cp	r2, r24
     e84:	39 06       	cpc	r3, r25
     e86:	bc f1       	brlt	.+110    	; 0xef6 <MQTTSerialize_publish+0xd6>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
     e88:	60 e3       	ldi	r22, 0x30	; 48
	header.bits.dup = dup;
     e8a:	89 85       	ldd	r24, Y+9	; 0x09
     e8c:	80 fb       	bst	r24, 0
     e8e:	63 f9       	bld	r22, 3
	header.bits.qos = qos;
     e90:	86 2d       	mov	r24, r6
     e92:	83 70       	andi	r24, 0x03	; 3
     e94:	88 0f       	add	r24, r24
     e96:	69 7f       	andi	r22, 0xF9	; 249
     e98:	68 2b       	or	r22, r24
	header.bits.retain = retained;
     e9a:	8a 85       	ldd	r24, Y+10	; 0x0a
     e9c:	80 fb       	bst	r24, 0
	writeChar(&ptr, header.byte); /* write header */
     e9e:	60 f9       	bld	r22, 0
     ea0:	ce 01       	movw	r24, r28

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
     ea2:	01 96       	adiw	r24, 0x01	; 1
     ea4:	ec de       	rcall	.-552    	; 0xc7e <writeChar>
     ea6:	b8 01       	movw	r22, r16
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	9a 81       	ldd	r25, Y+2	; 0x02
     eac:	b3 de       	rcall	.-666    	; 0xc14 <MQTTPacket_encode>
     eae:	29 81       	ldd	r18, Y+1	; 0x01
     eb0:	3a 81       	ldd	r19, Y+2	; 0x02
     eb2:	82 0f       	add	r24, r18
     eb4:	93 1f       	adc	r25, r19

	writeMQTTString(&ptr, topicName);
     eb6:	89 83       	std	Y+1, r24	; 0x01
     eb8:	9a 83       	std	Y+2, r25	; 0x02
     eba:	2b 81       	ldd	r18, Y+3	; 0x03
     ebc:	3c 81       	ldd	r19, Y+4	; 0x04
     ebe:	4d 81       	ldd	r20, Y+5	; 0x05
     ec0:	5e 81       	ldd	r21, Y+6	; 0x06
     ec2:	6f 81       	ldd	r22, Y+7	; 0x07
     ec4:	78 85       	ldd	r23, Y+8	; 0x08
     ec6:	ce 01       	movw	r24, r28

	if (qos > 0)
     ec8:	01 96       	adiw	r24, 0x01	; 1
     eca:	28 df       	rcall	.-432    	; 0xd1c <writeMQTTString>
		writeInt(&ptr, packetid);
     ecc:	16 14       	cp	r1, r6
     ece:	17 04       	cpc	r1, r7
     ed0:	24 f4       	brge	.+8      	; 0xeda <MQTTSerialize_publish+0xba>
     ed2:	b7 01       	movw	r22, r14
     ed4:	ce 01       	movw	r24, r28

	memcpy(ptr, payload, payloadlen);
     ed6:	01 96       	adiw	r24, 0x01	; 1
     ed8:	dc de       	rcall	.-584    	; 0xc92 <writeInt>
     eda:	a6 01       	movw	r20, r12
     edc:	68 a1       	ldd	r22, Y+32	; 0x20
     ede:	79 a1       	ldd	r23, Y+33	; 0x21
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	9a 81       	ldd	r25, Y+2	; 0x02
	ptr += payloadlen;

	rc = ptr - buf;
     ee4:	0e 94 64 12 	call	0x24c8	; 0x24c8 <memcpy>
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	9a 81       	ldd	r25, Y+2	; 0x02
     eec:	8c 0d       	add	r24, r12
     eee:	9d 1d       	adc	r25, r13
     ef0:	84 19       	sub	r24, r4
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
     ef2:	95 09       	sbc	r25, r5
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <MQTTSerialize_publish+0xda>
	rc = ptr - buf;

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
     ef6:	8e ef       	ldi	r24, 0xFE	; 254
     ef8:	9f ef       	ldi	r25, 0xFF	; 255
     efa:	2a 96       	adiw	r28, 0x0a	; 10
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	de bf       	out	0x3e, r29	; 62
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	ff 90       	pop	r15
     f0a:	ef 90       	pop	r14
     f0c:	df 90       	pop	r13
     f0e:	cf 90       	pop	r12
     f10:	bf 90       	pop	r11
     f12:	af 90       	pop	r10
     f14:	9f 90       	pop	r9
     f16:	8f 90       	pop	r8
     f18:	7f 90       	pop	r7
     f1a:	6f 90       	pop	r6
     f1c:	5f 90       	pop	r5
     f1e:	4f 90       	pop	r4
     f20:	3f 90       	pop	r3
     f22:	2f 90       	pop	r2
     f24:	08 95       	ret

00000f26 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	1f 92       	push	r1
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f30:	9f b7       	in	r25, 0x3f	; 63
     f32:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     f34:	f8 94       	cli
	return flags;
     f36:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     f38:	e8 2f       	mov	r30, r24
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	e0 59       	subi	r30, 0x90	; 144
     f3e:	ff 4f       	sbci	r31, 0xFF	; 255
     f40:	60 95       	com	r22
     f42:	80 81       	ld	r24, Z
     f44:	68 23       	and	r22, r24
     f46:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f48:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     f4a:	0f 90       	pop	r0
     f4c:	df 91       	pop	r29
     f4e:	cf 91       	pop	r28
     f50:	08 95       	ret

00000f52 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
     f56:	1f 92       	push	r1
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f5c:	9f b7       	in	r25, 0x3f	; 63
     f5e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     f60:	f8 94       	cli
	return flags;
     f62:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
     f64:	e8 2f       	mov	r30, r24
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	e0 59       	subi	r30, 0x90	; 144
     f6a:	ff 4f       	sbci	r31, 0xFF	; 255
     f6c:	80 81       	ld	r24, Z
     f6e:	68 2b       	or	r22, r24
     f70:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f72:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     f74:	0f 90       	pop	r0
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	08 95       	ret

00000f7c <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     f86:	c6 2f       	mov	r28, r22
     f88:	d0 e0       	ldi	r29, 0x00	; 0
     f8a:	de 01       	movw	r26, r28
     f8c:	02 2e       	mov	r0, r18
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <ioport_configure_port_pin+0x18>
     f90:	b5 95       	asr	r27
     f92:	a7 95       	ror	r26
     f94:	0a 94       	dec	r0
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <ioport_configure_port_pin+0x14>
     f98:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     f9a:	50 8b       	std	Z+16, r21	; 0x10
     f9c:	2f 5f       	subi	r18, 0xFF	; 255
     f9e:	3f 4f       	sbci	r19, 0xFF	; 255
     fa0:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     fa2:	28 30       	cpi	r18, 0x08	; 8
     fa4:	31 05       	cpc	r19, r1
     fa6:	89 f7       	brne	.-30     	; 0xf8a <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     fa8:	40 ff       	sbrs	r20, 0
     faa:	0a c0       	rjmp	.+20     	; 0xfc0 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
     fac:	41 ff       	sbrs	r20, 1
     fae:	03 c0       	rjmp	.+6      	; 0xfb6 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     fb0:	fc 01       	movw	r30, r24
     fb2:	65 83       	std	Z+5, r22	; 0x05
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     fb6:	fc 01       	movw	r30, r24
     fb8:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     fba:	fc 01       	movw	r30, r24
     fbc:	61 83       	std	Z+1, r22	; 0x01
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     fc0:	fc 01       	movw	r30, r24
     fc2:	62 83       	std	Z+2, r22	; 0x02
	}
}
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	08 95       	ret

00000fca <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     fca:	43 e0       	ldi	r20, 0x03	; 3
     fcc:	50 e0       	ldi	r21, 0x00	; 0
     fce:	68 e0       	ldi	r22, 0x08	; 8
     fd0:	80 ec       	ldi	r24, 0xC0	; 192
     fd2:	97 e0       	ldi	r25, 0x07	; 7
     fd4:	d3 df       	rcall	.-90     	; 0xf7c <ioport_configure_port_pin>
     fd6:	40 e0       	ldi	r20, 0x00	; 0
     fd8:	58 e1       	ldi	r21, 0x18	; 24
     fda:	64 e0       	ldi	r22, 0x04	; 4
     fdc:	80 ec       	ldi	r24, 0xC0	; 192
     fde:	97 e0       	ldi	r25, 0x07	; 7
     fe0:	cd df       	rcall	.-102    	; 0xf7c <ioport_configure_port_pin>
     fe2:	43 e0       	ldi	r20, 0x03	; 3
     fe4:	50 e0       	ldi	r21, 0x00	; 0
     fe6:	68 e0       	ldi	r22, 0x08	; 8
     fe8:	80 e8       	ldi	r24, 0x80	; 128
     fea:	96 e0       	ldi	r25, 0x06	; 6
     fec:	c7 df       	rcall	.-114    	; 0xf7c <ioport_configure_port_pin>
     fee:	40 e0       	ldi	r20, 0x00	; 0
     ff0:	50 e0       	ldi	r21, 0x00	; 0
     ff2:	64 e0       	ldi	r22, 0x04	; 4
     ff4:	80 e8       	ldi	r24, 0x80	; 128
     ff6:	96 e0       	ldi	r25, 0x06	; 6
     ff8:	c1 df       	rcall	.-126    	; 0xf7c <ioport_configure_port_pin>
     ffa:	43 e0       	ldi	r20, 0x03	; 3
     ffc:	50 e0       	ldi	r21, 0x00	; 0
     ffe:	68 e0       	ldi	r22, 0x08	; 8
    1000:	80 e4       	ldi	r24, 0x40	; 64
    1002:	96 e0       	ldi	r25, 0x06	; 6
    1004:	bb df       	rcall	.-138    	; 0xf7c <ioport_configure_port_pin>
    1006:	40 e0       	ldi	r20, 0x00	; 0
    1008:	50 e0       	ldi	r21, 0x00	; 0
    100a:	64 e0       	ldi	r22, 0x04	; 4
    100c:	80 e4       	ldi	r24, 0x40	; 64
    100e:	96 e0       	ldi	r25, 0x06	; 6
    1010:	b5 cf       	rjmp	.-150    	; 0xf7c <ioport_configure_port_pin>
    1012:	08 95       	ret

00001014 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1014:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1018:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    101a:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    101c:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1020:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1022:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1026:	08 95       	ret

00001028 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    1028:	fc 01       	movw	r30, r24
    102a:	91 81       	ldd	r25, Z+1	; 0x01
    102c:	95 ff       	sbrs	r25, 5
    102e:	fd cf       	rjmp	.-6      	; 0x102a <usart_putchar+0x2>
    1030:	60 83       	st	Z, r22
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	08 95       	ret

00001038 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1038:	4f 92       	push	r4
    103a:	5f 92       	push	r5
    103c:	6f 92       	push	r6
    103e:	7f 92       	push	r7
    1040:	8f 92       	push	r8
    1042:	9f 92       	push	r9
    1044:	af 92       	push	r10
    1046:	bf 92       	push	r11
    1048:	ef 92       	push	r14
    104a:	ff 92       	push	r15
    104c:	0f 93       	push	r16
    104e:	1f 93       	push	r17
    1050:	cf 93       	push	r28
    1052:	7c 01       	movw	r14, r24
    1054:	4a 01       	movw	r8, r20
    1056:	5b 01       	movw	r10, r22
    1058:	28 01       	movw	r4, r16
    105a:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    105c:	fc 01       	movw	r30, r24
    105e:	84 81       	ldd	r24, Z+4	; 0x04
    1060:	82 ff       	sbrs	r24, 2
    1062:	16 c0       	rjmp	.+44     	; 0x1090 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    1064:	d9 01       	movw	r26, r18
    1066:	c8 01       	movw	r24, r16
    1068:	68 94       	set
    106a:	12 f8       	bld	r1, 2
    106c:	b6 95       	lsr	r27
    106e:	a7 95       	ror	r26
    1070:	97 95       	ror	r25
    1072:	87 95       	ror	r24
    1074:	16 94       	lsr	r1
    1076:	d1 f7       	brne	.-12     	; 0x106c <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    1078:	b9 01       	movw	r22, r18
    107a:	a8 01       	movw	r20, r16
    107c:	03 2e       	mov	r0, r19
    107e:	36 e1       	ldi	r19, 0x16	; 22
    1080:	76 95       	lsr	r23
    1082:	67 95       	ror	r22
    1084:	57 95       	ror	r21
    1086:	47 95       	ror	r20
    1088:	3a 95       	dec	r19
    108a:	d1 f7       	brne	.-12     	; 0x1080 <usart_set_baudrate+0x48>
    108c:	30 2d       	mov	r19, r0
    108e:	15 c0       	rjmp	.+42     	; 0x10ba <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    1090:	d9 01       	movw	r26, r18
    1092:	c8 01       	movw	r24, r16
    1094:	68 94       	set
    1096:	13 f8       	bld	r1, 3
    1098:	b6 95       	lsr	r27
    109a:	a7 95       	ror	r26
    109c:	97 95       	ror	r25
    109e:	87 95       	ror	r24
    10a0:	16 94       	lsr	r1
    10a2:	d1 f7       	brne	.-12     	; 0x1098 <usart_set_baudrate+0x60>
		min_rate /= 2;
    10a4:	b9 01       	movw	r22, r18
    10a6:	a8 01       	movw	r20, r16
    10a8:	03 2e       	mov	r0, r19
    10aa:	37 e1       	ldi	r19, 0x17	; 23
    10ac:	76 95       	lsr	r23
    10ae:	67 95       	ror	r22
    10b0:	57 95       	ror	r21
    10b2:	47 95       	ror	r20
    10b4:	3a 95       	dec	r19
    10b6:	d1 f7       	brne	.-12     	; 0x10ac <usart_set_baudrate+0x74>
    10b8:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    10ba:	88 15       	cp	r24, r8
    10bc:	99 05       	cpc	r25, r9
    10be:	aa 05       	cpc	r26, r10
    10c0:	bb 05       	cpc	r27, r11
    10c2:	08 f4       	brcc	.+2      	; 0x10c6 <usart_set_baudrate+0x8e>
    10c4:	a6 c0       	rjmp	.+332    	; 0x1212 <usart_set_baudrate+0x1da>
    10c6:	84 16       	cp	r8, r20
    10c8:	95 06       	cpc	r9, r21
    10ca:	a6 06       	cpc	r10, r22
    10cc:	b7 06       	cpc	r11, r23
    10ce:	08 f4       	brcc	.+2      	; 0x10d2 <usart_set_baudrate+0x9a>
    10d0:	a2 c0       	rjmp	.+324    	; 0x1216 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    10d2:	f7 01       	movw	r30, r14
    10d4:	84 81       	ldd	r24, Z+4	; 0x04
    10d6:	82 fd       	sbrc	r24, 2
    10d8:	04 c0       	rjmp	.+8      	; 0x10e2 <usart_set_baudrate+0xaa>
		baud *= 2;
    10da:	88 0c       	add	r8, r8
    10dc:	99 1c       	adc	r9, r9
    10de:	aa 1c       	adc	r10, r10
    10e0:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    10e2:	c3 01       	movw	r24, r6
    10e4:	b2 01       	movw	r22, r4
    10e6:	a5 01       	movw	r20, r10
    10e8:	94 01       	movw	r18, r8
    10ea:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    10ee:	2f 3f       	cpi	r18, 0xFF	; 255
    10f0:	31 05       	cpc	r19, r1
    10f2:	41 05       	cpc	r20, r1
    10f4:	51 05       	cpc	r21, r1
    10f6:	08 f4       	brcc	.+2      	; 0x10fa <usart_set_baudrate+0xc2>
    10f8:	90 c0       	rjmp	.+288    	; 0x121a <usart_set_baudrate+0x1e2>
    10fa:	8f ef       	ldi	r24, 0xFF	; 255
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	a0 e0       	ldi	r26, 0x00	; 0
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	c9 ef       	ldi	r28, 0xF9	; 249
    1104:	05 c0       	rjmp	.+10     	; 0x1110 <usart_set_baudrate+0xd8>
    1106:	28 17       	cp	r18, r24
    1108:	39 07       	cpc	r19, r25
    110a:	4a 07       	cpc	r20, r26
    110c:	5b 07       	cpc	r21, r27
    110e:	58 f0       	brcs	.+22     	; 0x1126 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	aa 1f       	adc	r26, r26
    1116:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    1118:	cd 3f       	cpi	r28, 0xFD	; 253
    111a:	0c f4       	brge	.+2      	; 0x111e <usart_set_baudrate+0xe6>
			limit |= 1;
    111c:	81 60       	ori	r24, 0x01	; 1
    111e:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1120:	c7 30       	cpi	r28, 0x07	; 7
    1122:	89 f7       	brne	.-30     	; 0x1106 <usart_set_baudrate+0xce>
    1124:	4f c0       	rjmp	.+158    	; 0x11c4 <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    1126:	cc 23       	and	r28, r28
    1128:	0c f0       	brlt	.+2      	; 0x112c <usart_set_baudrate+0xf4>
    112a:	4c c0       	rjmp	.+152    	; 0x11c4 <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    112c:	d5 01       	movw	r26, r10
    112e:	c4 01       	movw	r24, r8
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	aa 1f       	adc	r26, r26
    1136:	bb 1f       	adc	r27, r27
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	aa 1f       	adc	r26, r26
    113e:	bb 1f       	adc	r27, r27
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	aa 1f       	adc	r26, r26
    1146:	bb 1f       	adc	r27, r27
    1148:	48 1a       	sub	r4, r24
    114a:	59 0a       	sbc	r5, r25
    114c:	6a 0a       	sbc	r6, r26
    114e:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    1150:	ce 3f       	cpi	r28, 0xFE	; 254
    1152:	f4 f4       	brge	.+60     	; 0x1190 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    1154:	8d ef       	ldi	r24, 0xFD	; 253
    1156:	9f ef       	ldi	r25, 0xFF	; 255
    1158:	8c 1b       	sub	r24, r28
    115a:	91 09       	sbc	r25, r1
    115c:	c7 fd       	sbrc	r28, 7
    115e:	93 95       	inc	r25
    1160:	04 c0       	rjmp	.+8      	; 0x116a <usart_set_baudrate+0x132>
    1162:	44 0c       	add	r4, r4
    1164:	55 1c       	adc	r5, r5
    1166:	66 1c       	adc	r6, r6
    1168:	77 1c       	adc	r7, r7
    116a:	8a 95       	dec	r24
    116c:	d2 f7       	brpl	.-12     	; 0x1162 <usart_set_baudrate+0x12a>
    116e:	d5 01       	movw	r26, r10
    1170:	c4 01       	movw	r24, r8
    1172:	b6 95       	lsr	r27
    1174:	a7 95       	ror	r26
    1176:	97 95       	ror	r25
    1178:	87 95       	ror	r24
    117a:	bc 01       	movw	r22, r24
    117c:	cd 01       	movw	r24, r26
    117e:	64 0d       	add	r22, r4
    1180:	75 1d       	adc	r23, r5
    1182:	86 1d       	adc	r24, r6
    1184:	97 1d       	adc	r25, r7
    1186:	a5 01       	movw	r20, r10
    1188:	94 01       	movw	r18, r8
    118a:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <__udivmodsi4>
    118e:	37 c0       	rjmp	.+110    	; 0x11fe <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
    1190:	83 e0       	ldi	r24, 0x03	; 3
    1192:	8c 0f       	add	r24, r28
    1194:	a5 01       	movw	r20, r10
    1196:	94 01       	movw	r18, r8
    1198:	04 c0       	rjmp	.+8      	; 0x11a2 <usart_set_baudrate+0x16a>
    119a:	22 0f       	add	r18, r18
    119c:	33 1f       	adc	r19, r19
    119e:	44 1f       	adc	r20, r20
    11a0:	55 1f       	adc	r21, r21
    11a2:	8a 95       	dec	r24
    11a4:	d2 f7       	brpl	.-12     	; 0x119a <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
    11a6:	da 01       	movw	r26, r20
    11a8:	c9 01       	movw	r24, r18
    11aa:	b6 95       	lsr	r27
    11ac:	a7 95       	ror	r26
    11ae:	97 95       	ror	r25
    11b0:	87 95       	ror	r24
    11b2:	bc 01       	movw	r22, r24
    11b4:	cd 01       	movw	r24, r26
    11b6:	64 0d       	add	r22, r4
    11b8:	75 1d       	adc	r23, r5
    11ba:	86 1d       	adc	r24, r6
    11bc:	97 1d       	adc	r25, r7
    11be:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <__udivmodsi4>
    11c2:	1d c0       	rjmp	.+58     	; 0x11fe <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    11c4:	83 e0       	ldi	r24, 0x03	; 3
    11c6:	8c 0f       	add	r24, r28
    11c8:	a5 01       	movw	r20, r10
    11ca:	94 01       	movw	r18, r8
    11cc:	04 c0       	rjmp	.+8      	; 0x11d6 <usart_set_baudrate+0x19e>
    11ce:	22 0f       	add	r18, r18
    11d0:	33 1f       	adc	r19, r19
    11d2:	44 1f       	adc	r20, r20
    11d4:	55 1f       	adc	r21, r21
    11d6:	8a 95       	dec	r24
    11d8:	d2 f7       	brpl	.-12     	; 0x11ce <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
    11da:	da 01       	movw	r26, r20
    11dc:	c9 01       	movw	r24, r18
    11de:	b6 95       	lsr	r27
    11e0:	a7 95       	ror	r26
    11e2:	97 95       	ror	r25
    11e4:	87 95       	ror	r24
    11e6:	bc 01       	movw	r22, r24
    11e8:	cd 01       	movw	r24, r26
    11ea:	64 0d       	add	r22, r4
    11ec:	75 1d       	adc	r23, r5
    11ee:	86 1d       	adc	r24, r6
    11f0:	97 1d       	adc	r25, r7
    11f2:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <__udivmodsi4>
    11f6:	21 50       	subi	r18, 0x01	; 1
    11f8:	31 09       	sbc	r19, r1
    11fa:	41 09       	sbc	r20, r1
    11fc:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    11fe:	83 2f       	mov	r24, r19
    1200:	8f 70       	andi	r24, 0x0F	; 15
    1202:	c2 95       	swap	r28
    1204:	c0 7f       	andi	r28, 0xF0	; 240
    1206:	c8 2b       	or	r28, r24
    1208:	f7 01       	movw	r30, r14
    120a:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    120c:	26 83       	std	Z+6, r18	; 0x06

	return true;
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	18 c0       	rjmp	.+48     	; 0x1242 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	16 c0       	rjmp	.+44     	; 0x1242 <usart_set_baudrate+0x20a>
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	14 c0       	rjmp	.+40     	; 0x1242 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    121a:	d5 01       	movw	r26, r10
    121c:	c4 01       	movw	r24, r8
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	aa 1f       	adc	r26, r26
    1224:	bb 1f       	adc	r27, r27
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	aa 1f       	adc	r26, r26
    122c:	bb 1f       	adc	r27, r27
    122e:	88 0f       	add	r24, r24
    1230:	99 1f       	adc	r25, r25
    1232:	aa 1f       	adc	r26, r26
    1234:	bb 1f       	adc	r27, r27
    1236:	48 1a       	sub	r4, r24
    1238:	59 0a       	sbc	r5, r25
    123a:	6a 0a       	sbc	r6, r26
    123c:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    123e:	c9 ef       	ldi	r28, 0xF9	; 249
    1240:	89 cf       	rjmp	.-238    	; 0x1154 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    1242:	cf 91       	pop	r28
    1244:	1f 91       	pop	r17
    1246:	0f 91       	pop	r16
    1248:	ff 90       	pop	r15
    124a:	ef 90       	pop	r14
    124c:	bf 90       	pop	r11
    124e:	af 90       	pop	r10
    1250:	9f 90       	pop	r9
    1252:	8f 90       	pop	r8
    1254:	7f 90       	pop	r7
    1256:	6f 90       	pop	r6
    1258:	5f 90       	pop	r5
    125a:	4f 90       	pop	r4
    125c:	08 95       	ret

0000125e <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    125e:	0f 93       	push	r16
    1260:	1f 93       	push	r17
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
    1266:	ec 01       	movw	r28, r24
    1268:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    126a:	00 97       	sbiw	r24, 0x00	; 0
    126c:	09 f4       	brne	.+2      	; 0x1270 <usart_init_rs232+0x12>
    126e:	36 c1       	rjmp	.+620    	; 0x14dc <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1270:	80 3c       	cpi	r24, 0xC0	; 192
    1272:	91 05       	cpc	r25, r1
    1274:	21 f4       	brne	.+8      	; 0x127e <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1276:	60 e1       	ldi	r22, 0x10	; 16
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	55 de       	rcall	.-854    	; 0xf26 <sysclk_enable_module>
    127c:	2f c1       	rjmp	.+606    	; 0x14dc <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    127e:	c0 34       	cpi	r28, 0x40	; 64
    1280:	84 e0       	ldi	r24, 0x04	; 4
    1282:	d8 07       	cpc	r29, r24
    1284:	21 f4       	brne	.+8      	; 0x128e <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    1286:	68 e0       	ldi	r22, 0x08	; 8
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	4d de       	rcall	.-870    	; 0xf26 <sysclk_enable_module>
    128c:	27 c1       	rjmp	.+590    	; 0x14dc <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    128e:	c1 15       	cp	r28, r1
    1290:	e4 e0       	ldi	r30, 0x04	; 4
    1292:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    1294:	21 f4       	brne	.+8      	; 0x129e <usart_init_rs232+0x40>
    1296:	64 e0       	ldi	r22, 0x04	; 4
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	45 de       	rcall	.-886    	; 0xf26 <sysclk_enable_module>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    129c:	1f c1       	rjmp	.+574    	; 0x14dc <usart_init_rs232+0x27e>
    129e:	c0 38       	cpi	r28, 0x80	; 128
    12a0:	f1 e0       	ldi	r31, 0x01	; 1
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    12a2:	df 07       	cpc	r29, r31
    12a4:	21 f4       	brne	.+8      	; 0x12ae <usart_init_rs232+0x50>
    12a6:	62 e0       	ldi	r22, 0x02	; 2
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	3d de       	rcall	.-902    	; 0xf26 <sysclk_enable_module>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    12ac:	17 c1       	rjmp	.+558    	; 0x14dc <usart_init_rs232+0x27e>
    12ae:	c1 15       	cp	r28, r1
    12b0:	81 e0       	ldi	r24, 0x01	; 1
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    12b2:	d8 07       	cpc	r29, r24
    12b4:	21 f4       	brne	.+8      	; 0x12be <usart_init_rs232+0x60>
    12b6:	61 e0       	ldi	r22, 0x01	; 1
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	35 de       	rcall	.-918    	; 0xf26 <sysclk_enable_module>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    12bc:	0f c1       	rjmp	.+542    	; 0x14dc <usart_init_rs232+0x27e>
    12be:	c0 38       	cpi	r28, 0x80	; 128
    12c0:	e3 e0       	ldi	r30, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    12c2:	de 07       	cpc	r29, r30
    12c4:	21 f4       	brne	.+8      	; 0x12ce <usart_init_rs232+0x70>
    12c6:	61 e0       	ldi	r22, 0x01	; 1
    12c8:	81 e0       	ldi	r24, 0x01	; 1
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    12ca:	2d de       	rcall	.-934    	; 0xf26 <sysclk_enable_module>
    12cc:	07 c1       	rjmp	.+526    	; 0x14dc <usart_init_rs232+0x27e>
    12ce:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    12d0:	f3 e0       	ldi	r31, 0x03	; 3
    12d2:	df 07       	cpc	r29, r31
    12d4:	21 f4       	brne	.+8      	; 0x12de <usart_init_rs232+0x80>
    12d6:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    12d8:	82 e0       	ldi	r24, 0x02	; 2
    12da:	25 de       	rcall	.-950    	; 0xf26 <sysclk_enable_module>
    12dc:	ff c0       	rjmp	.+510    	; 0x14dc <usart_init_rs232+0x27e>
    12de:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    12e0:	82 e0       	ldi	r24, 0x02	; 2
    12e2:	d8 07       	cpc	r29, r24
    12e4:	21 f4       	brne	.+8      	; 0x12ee <usart_init_rs232+0x90>
    12e6:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	1d de       	rcall	.-966    	; 0xf26 <sysclk_enable_module>
    12ec:	f7 c0       	rjmp	.+494    	; 0x14dc <usart_init_rs232+0x27e>
    12ee:	c0 34       	cpi	r28, 0x40	; 64
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    12f0:	e2 e0       	ldi	r30, 0x02	; 2
    12f2:	de 07       	cpc	r29, r30
    12f4:	21 f4       	brne	.+8      	; 0x12fe <usart_init_rs232+0xa0>
    12f6:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    12f8:	82 e0       	ldi	r24, 0x02	; 2
    12fa:	15 de       	rcall	.-982    	; 0xf26 <sysclk_enable_module>
    12fc:	ef c0       	rjmp	.+478    	; 0x14dc <usart_init_rs232+0x27e>
    12fe:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    1300:	f3 e0       	ldi	r31, 0x03	; 3
    1302:	df 07       	cpc	r29, r31
    1304:	21 f4       	brne	.+8      	; 0x130e <usart_init_rs232+0xb0>
    1306:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	0d de       	rcall	.-998    	; 0xf26 <sysclk_enable_module>
    130c:	e7 c0       	rjmp	.+462    	; 0x14dc <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    130e:	c0 32       	cpi	r28, 0x20	; 32
    1310:	83 e0       	ldi	r24, 0x03	; 3
    1312:	d8 07       	cpc	r29, r24
    1314:	21 f4       	brne	.+8      	; 0x131e <usart_init_rs232+0xc0>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1316:	64 e0       	ldi	r22, 0x04	; 4
    1318:	82 e0       	ldi	r24, 0x02	; 2
    131a:	05 de       	rcall	.-1014   	; 0xf26 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    131c:	df c0       	rjmp	.+446    	; 0x14dc <usart_init_rs232+0x27e>
    131e:	c1 15       	cp	r28, r1
    1320:	e8 e0       	ldi	r30, 0x08	; 8
    1322:	de 07       	cpc	r29, r30
    1324:	21 f4       	brne	.+8      	; 0x132e <usart_init_rs232+0xd0>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1326:	61 e0       	ldi	r22, 0x01	; 1
    1328:	83 e0       	ldi	r24, 0x03	; 3
    132a:	fd dd       	rcall	.-1030   	; 0xf26 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    132c:	d7 c0       	rjmp	.+430    	; 0x14dc <usart_init_rs232+0x27e>
    132e:	c1 15       	cp	r28, r1
    1330:	f9 e0       	ldi	r31, 0x09	; 9
    1332:	df 07       	cpc	r29, r31
    1334:	21 f4       	brne	.+8      	; 0x133e <usart_init_rs232+0xe0>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1336:	61 e0       	ldi	r22, 0x01	; 1
    1338:	84 e0       	ldi	r24, 0x04	; 4
    133a:	f5 dd       	rcall	.-1046   	; 0xf26 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    133c:	cf c0       	rjmp	.+414    	; 0x14dc <usart_init_rs232+0x27e>
    133e:	c1 15       	cp	r28, r1
    1340:	8a e0       	ldi	r24, 0x0A	; 10
    1342:	d8 07       	cpc	r29, r24
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1344:	21 f4       	brne	.+8      	; 0x134e <usart_init_rs232+0xf0>
    1346:	61 e0       	ldi	r22, 0x01	; 1
    1348:	85 e0       	ldi	r24, 0x05	; 5
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    134a:	ed dd       	rcall	.-1062   	; 0xf26 <sysclk_enable_module>
    134c:	c7 c0       	rjmp	.+398    	; 0x14dc <usart_init_rs232+0x27e>
    134e:	c1 15       	cp	r28, r1
    1350:	eb e0       	ldi	r30, 0x0B	; 11
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1352:	de 07       	cpc	r29, r30
    1354:	21 f4       	brne	.+8      	; 0x135e <usart_init_rs232+0x100>
    1356:	61 e0       	ldi	r22, 0x01	; 1
    1358:	86 e0       	ldi	r24, 0x06	; 6
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    135a:	e5 dd       	rcall	.-1078   	; 0xf26 <sysclk_enable_module>
    135c:	bf c0       	rjmp	.+382    	; 0x14dc <usart_init_rs232+0x27e>
    135e:	c0 34       	cpi	r28, 0x40	; 64
    1360:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1362:	df 07       	cpc	r29, r31
    1364:	21 f4       	brne	.+8      	; 0x136e <usart_init_rs232+0x110>
    1366:	62 e0       	ldi	r22, 0x02	; 2
    1368:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    136a:	dd dd       	rcall	.-1094   	; 0xf26 <sysclk_enable_module>
    136c:	b7 c0       	rjmp	.+366    	; 0x14dc <usart_init_rs232+0x27e>
    136e:	c0 34       	cpi	r28, 0x40	; 64
    1370:	89 e0       	ldi	r24, 0x09	; 9
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1372:	d8 07       	cpc	r29, r24
    1374:	21 f4       	brne	.+8      	; 0x137e <usart_init_rs232+0x120>
    1376:	62 e0       	ldi	r22, 0x02	; 2
    1378:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    137a:	d5 dd       	rcall	.-1110   	; 0xf26 <sysclk_enable_module>
    137c:	af c0       	rjmp	.+350    	; 0x14dc <usart_init_rs232+0x27e>
    137e:	c0 34       	cpi	r28, 0x40	; 64
    1380:	ea e0       	ldi	r30, 0x0A	; 10
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    1382:	de 07       	cpc	r29, r30
    1384:	21 f4       	brne	.+8      	; 0x138e <usart_init_rs232+0x130>
    1386:	62 e0       	ldi	r22, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    1388:	85 e0       	ldi	r24, 0x05	; 5
    138a:	cd dd       	rcall	.-1126   	; 0xf26 <sysclk_enable_module>
    138c:	a7 c0       	rjmp	.+334    	; 0x14dc <usart_init_rs232+0x27e>
    138e:	c0 34       	cpi	r28, 0x40	; 64
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1390:	fb e0       	ldi	r31, 0x0B	; 11
    1392:	df 07       	cpc	r29, r31
    1394:	21 f4       	brne	.+8      	; 0x139e <usart_init_rs232+0x140>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1396:	62 e0       	ldi	r22, 0x02	; 2
    1398:	86 e0       	ldi	r24, 0x06	; 6
    139a:	c5 dd       	rcall	.-1142   	; 0xf26 <sysclk_enable_module>
    139c:	9f c0       	rjmp	.+318    	; 0x14dc <usart_init_rs232+0x27e>
    139e:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    13a0:	88 e0       	ldi	r24, 0x08	; 8
    13a2:	d8 07       	cpc	r29, r24
    13a4:	21 f4       	brne	.+8      	; 0x13ae <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    13a6:	64 e0       	ldi	r22, 0x04	; 4
    13a8:	83 e0       	ldi	r24, 0x03	; 3
    13aa:	bd dd       	rcall	.-1158   	; 0xf26 <sysclk_enable_module>
    13ac:	97 c0       	rjmp	.+302    	; 0x14dc <usart_init_rs232+0x27e>
    13ae:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    13b0:	e9 e0       	ldi	r30, 0x09	; 9
    13b2:	de 07       	cpc	r29, r30
    13b4:	21 f4       	brne	.+8      	; 0x13be <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    13b6:	64 e0       	ldi	r22, 0x04	; 4
    13b8:	84 e0       	ldi	r24, 0x04	; 4
    13ba:	b5 dd       	rcall	.-1174   	; 0xf26 <sysclk_enable_module>
    13bc:	8f c0       	rjmp	.+286    	; 0x14dc <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    13be:	c0 39       	cpi	r28, 0x90	; 144
    13c0:	fa e0       	ldi	r31, 0x0A	; 10
    13c2:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    13c4:	21 f4       	brne	.+8      	; 0x13ce <usart_init_rs232+0x170>
    13c6:	64 e0       	ldi	r22, 0x04	; 4
    13c8:	85 e0       	ldi	r24, 0x05	; 5
    13ca:	ad dd       	rcall	.-1190   	; 0xf26 <sysclk_enable_module>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    13cc:	87 c0       	rjmp	.+270    	; 0x14dc <usart_init_rs232+0x27e>
    13ce:	c0 39       	cpi	r28, 0x90	; 144
    13d0:	8b e0       	ldi	r24, 0x0B	; 11
    13d2:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    13d4:	21 f4       	brne	.+8      	; 0x13de <usart_init_rs232+0x180>
    13d6:	64 e0       	ldi	r22, 0x04	; 4
    13d8:	86 e0       	ldi	r24, 0x06	; 6
    13da:	a5 dd       	rcall	.-1206   	; 0xf26 <sysclk_enable_module>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    13dc:	7f c0       	rjmp	.+254    	; 0x14dc <usart_init_rs232+0x27e>
    13de:	c0 3c       	cpi	r28, 0xC0	; 192
    13e0:	e8 e0       	ldi	r30, 0x08	; 8
    13e2:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    13e4:	21 f4       	brne	.+8      	; 0x13ee <usart_init_rs232+0x190>
    13e6:	68 e0       	ldi	r22, 0x08	; 8
    13e8:	83 e0       	ldi	r24, 0x03	; 3
    13ea:	9d dd       	rcall	.-1222   	; 0xf26 <sysclk_enable_module>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    13ec:	77 c0       	rjmp	.+238    	; 0x14dc <usart_init_rs232+0x27e>
    13ee:	c0 3c       	cpi	r28, 0xC0	; 192
    13f0:	f9 e0       	ldi	r31, 0x09	; 9
    13f2:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    13f4:	21 f4       	brne	.+8      	; 0x13fe <usart_init_rs232+0x1a0>
    13f6:	68 e0       	ldi	r22, 0x08	; 8
    13f8:	84 e0       	ldi	r24, 0x04	; 4
    13fa:	95 dd       	rcall	.-1238   	; 0xf26 <sysclk_enable_module>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    13fc:	6f c0       	rjmp	.+222    	; 0x14dc <usart_init_rs232+0x27e>
    13fe:	c0 3c       	cpi	r28, 0xC0	; 192
    1400:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    1402:	d8 07       	cpc	r29, r24
    1404:	21 f4       	brne	.+8      	; 0x140e <usart_init_rs232+0x1b0>
    1406:	68 e0       	ldi	r22, 0x08	; 8
    1408:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    140a:	8d dd       	rcall	.-1254   	; 0xf26 <sysclk_enable_module>
    140c:	67 c0       	rjmp	.+206    	; 0x14dc <usart_init_rs232+0x27e>
    140e:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1410:	eb e0       	ldi	r30, 0x0B	; 11
    1412:	de 07       	cpc	r29, r30
    1414:	21 f4       	brne	.+8      	; 0x141e <usart_init_rs232+0x1c0>
    1416:	68 e0       	ldi	r22, 0x08	; 8
    1418:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    141a:	85 dd       	rcall	.-1270   	; 0xf26 <sysclk_enable_module>
    141c:	5f c0       	rjmp	.+190    	; 0x14dc <usart_init_rs232+0x27e>
    141e:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1420:	f8 e0       	ldi	r31, 0x08	; 8
    1422:	df 07       	cpc	r29, r31
    1424:	21 f4       	brne	.+8      	; 0x142e <usart_init_rs232+0x1d0>
    1426:	60 e1       	ldi	r22, 0x10	; 16
    1428:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    142a:	7d dd       	rcall	.-1286   	; 0xf26 <sysclk_enable_module>
    142c:	57 c0       	rjmp	.+174    	; 0x14dc <usart_init_rs232+0x27e>
    142e:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1430:	89 e0       	ldi	r24, 0x09	; 9
    1432:	d8 07       	cpc	r29, r24
    1434:	21 f4       	brne	.+8      	; 0x143e <usart_init_rs232+0x1e0>
    1436:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1438:	84 e0       	ldi	r24, 0x04	; 4
    143a:	75 dd       	rcall	.-1302   	; 0xf26 <sysclk_enable_module>
    143c:	4f c0       	rjmp	.+158    	; 0x14dc <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    143e:	c0 3a       	cpi	r28, 0xA0	; 160
    1440:	ea e0       	ldi	r30, 0x0A	; 10
    1442:	de 07       	cpc	r29, r30
    1444:	21 f4       	brne	.+8      	; 0x144e <usart_init_rs232+0x1f0>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1446:	60 e1       	ldi	r22, 0x10	; 16
    1448:	85 e0       	ldi	r24, 0x05	; 5
    144a:	6d dd       	rcall	.-1318   	; 0xf26 <sysclk_enable_module>
    144c:	47 c0       	rjmp	.+142    	; 0x14dc <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    144e:	c0 3a       	cpi	r28, 0xA0	; 160
    1450:	fb e0       	ldi	r31, 0x0B	; 11
    1452:	df 07       	cpc	r29, r31
    1454:	21 f4       	brne	.+8      	; 0x145e <usart_init_rs232+0x200>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1456:	60 e1       	ldi	r22, 0x10	; 16
    1458:	86 e0       	ldi	r24, 0x06	; 6
    145a:	65 dd       	rcall	.-1334   	; 0xf26 <sysclk_enable_module>
    145c:	3f c0       	rjmp	.+126    	; 0x14dc <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    145e:	c0 3b       	cpi	r28, 0xB0	; 176
    1460:	88 e0       	ldi	r24, 0x08	; 8
    1462:	d8 07       	cpc	r29, r24
    1464:	21 f4       	brne	.+8      	; 0x146e <usart_init_rs232+0x210>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    1466:	60 e2       	ldi	r22, 0x20	; 32
    1468:	83 e0       	ldi	r24, 0x03	; 3
    146a:	5d dd       	rcall	.-1350   	; 0xf26 <sysclk_enable_module>
    146c:	37 c0       	rjmp	.+110    	; 0x14dc <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    146e:	c0 3b       	cpi	r28, 0xB0	; 176
    1470:	e9 e0       	ldi	r30, 0x09	; 9
    1472:	de 07       	cpc	r29, r30
    1474:	21 f4       	brne	.+8      	; 0x147e <usart_init_rs232+0x220>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    1476:	60 e2       	ldi	r22, 0x20	; 32
    1478:	84 e0       	ldi	r24, 0x04	; 4
    147a:	55 dd       	rcall	.-1366   	; 0xf26 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    147c:	2f c0       	rjmp	.+94     	; 0x14dc <usart_init_rs232+0x27e>
    147e:	c0 3b       	cpi	r28, 0xB0	; 176
    1480:	fa e0       	ldi	r31, 0x0A	; 10
    1482:	df 07       	cpc	r29, r31
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1484:	21 f4       	brne	.+8      	; 0x148e <usart_init_rs232+0x230>
    1486:	60 e2       	ldi	r22, 0x20	; 32
    1488:	85 e0       	ldi	r24, 0x05	; 5
    148a:	4d dd       	rcall	.-1382   	; 0xf26 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    148c:	27 c0       	rjmp	.+78     	; 0x14dc <usart_init_rs232+0x27e>
    148e:	c0 3b       	cpi	r28, 0xB0	; 176
    1490:	8b e0       	ldi	r24, 0x0B	; 11
    1492:	d8 07       	cpc	r29, r24
    1494:	21 f4       	brne	.+8      	; 0x149e <usart_init_rs232+0x240>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    1496:	60 e2       	ldi	r22, 0x20	; 32
    1498:	86 e0       	ldi	r24, 0x06	; 6
    149a:	45 dd       	rcall	.-1398   	; 0xf26 <sysclk_enable_module>
    149c:	1f c0       	rjmp	.+62     	; 0x14dc <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    149e:	c0 38       	cpi	r28, 0x80	; 128
    14a0:	e4 e0       	ldi	r30, 0x04	; 4
    14a2:	de 07       	cpc	r29, r30
    14a4:	21 f4       	brne	.+8      	; 0x14ae <usart_init_rs232+0x250>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    14a6:	60 e4       	ldi	r22, 0x40	; 64
    14a8:	83 e0       	ldi	r24, 0x03	; 3
    14aa:	3d dd       	rcall	.-1414   	; 0xf26 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    14ac:	17 c0       	rjmp	.+46     	; 0x14dc <usart_init_rs232+0x27e>
    14ae:	c0 39       	cpi	r28, 0x90	; 144
    14b0:	f4 e0       	ldi	r31, 0x04	; 4
    14b2:	df 07       	cpc	r29, r31
    14b4:	21 f4       	brne	.+8      	; 0x14be <usart_init_rs232+0x260>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    14b6:	60 e4       	ldi	r22, 0x40	; 64
    14b8:	84 e0       	ldi	r24, 0x04	; 4
    14ba:	35 dd       	rcall	.-1430   	; 0xf26 <sysclk_enable_module>
    14bc:	0f c0       	rjmp	.+30     	; 0x14dc <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    14be:	c0 3a       	cpi	r28, 0xA0	; 160
    14c0:	84 e0       	ldi	r24, 0x04	; 4
    14c2:	d8 07       	cpc	r29, r24
    14c4:	21 f4       	brne	.+8      	; 0x14ce <usart_init_rs232+0x270>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    14c6:	60 e4       	ldi	r22, 0x40	; 64
    14c8:	85 e0       	ldi	r24, 0x05	; 5
    14ca:	2d dd       	rcall	.-1446   	; 0xf26 <sysclk_enable_module>
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    14cc:	07 c0       	rjmp	.+14     	; 0x14dc <usart_init_rs232+0x27e>
    14ce:	c0 3b       	cpi	r28, 0xB0	; 176
    14d0:	e4 e0       	ldi	r30, 0x04	; 4
    14d2:	de 07       	cpc	r29, r30
    14d4:	19 f4       	brne	.+6      	; 0x14dc <usart_init_rs232+0x27e>
    14d6:	60 e4       	ldi	r22, 0x40	; 64
    14d8:	86 e0       	ldi	r24, 0x06	; 6
    14da:	25 dd       	rcall	.-1462   	; 0xf26 <sysclk_enable_module>
    14dc:	8d 81       	ldd	r24, Y+5	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    14de:	8f 73       	andi	r24, 0x3F	; 63
    14e0:	8d 83       	std	Y+5, r24	; 0x05
    14e2:	f8 01       	movw	r30, r16
    14e4:	95 81       	ldd	r25, Z+5	; 0x05
    14e6:	84 81       	ldd	r24, Z+4	; 0x04
    14e8:	89 2b       	or	r24, r25
    14ea:	96 81       	ldd	r25, Z+6	; 0x06
    14ec:	91 11       	cpse	r25, r1
    14ee:	98 e0       	ldi	r25, 0x08	; 8
    14f0:	89 2b       	or	r24, r25
    14f2:	8d 83       	std	Y+5, r24	; 0x05
    14f4:	f8 01       	movw	r30, r16
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    14f6:	40 81       	ld	r20, Z
    14f8:	51 81       	ldd	r21, Z+1	; 0x01
    14fa:	62 81       	ldd	r22, Z+2	; 0x02
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    14fc:	73 81       	ldd	r23, Z+3	; 0x03
    14fe:	00 e8       	ldi	r16, 0x80	; 128
    1500:	14 e8       	ldi	r17, 0x84	; 132
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    1502:	2e e1       	ldi	r18, 0x1E	; 30
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	ce 01       	movw	r24, r28
    1508:	97 dd       	rcall	.-1234   	; 0x1038 <usart_set_baudrate>
    150a:	9c 81       	ldd	r25, Y+4	; 0x04
    150c:	98 60       	ori	r25, 0x08	; 8
    150e:	9c 83       	std	Y+4, r25	; 0x04
    1510:	9c 81       	ldd	r25, Y+4	; 0x04
    1512:	90 61       	ori	r25, 0x10	; 16
    1514:	9c 83       	std	Y+4, r25	; 0x04
    1516:	df 91       	pop	r29
    1518:	cf 91       	pop	r28
    151a:	1f 91       	pop	r17
    151c:	0f 91       	pop	r16
    151e:	08 95       	ret

00001520 <__portable_avr_delay_cycles>:
	return res;	
}

uint16_t array_results (uint16_t array[]) {
	
}
    1520:	04 c0       	rjmp	.+8      	; 0x152a <__portable_avr_delay_cycles+0xa>
    1522:	61 50       	subi	r22, 0x01	; 1
    1524:	71 09       	sbc	r23, r1
    1526:	81 09       	sbc	r24, r1
    1528:	91 09       	sbc	r25, r1
    152a:	61 15       	cp	r22, r1
    152c:	71 05       	cpc	r23, r1
    152e:	81 05       	cpc	r24, r1
    1530:	91 05       	cpc	r25, r1
    1532:	b9 f7       	brne	.-18     	; 0x1522 <__portable_avr_delay_cycles+0x2>
    1534:	08 95       	ret

00001536 <usart_tx_at>:
    1536:	0f 93       	push	r16
    1538:	1f 93       	push	r17
    153a:	cf 93       	push	r28
    153c:	df 93       	push	r29
    153e:	eb 01       	movw	r28, r22
    1540:	68 81       	ld	r22, Y
    1542:	66 23       	and	r22, r22
    1544:	39 f0       	breq	.+14     	; 0x1554 <usart_tx_at+0x1e>
    1546:	8c 01       	movw	r16, r24
    1548:	21 96       	adiw	r28, 0x01	; 1
    154a:	c8 01       	movw	r24, r16
    154c:	6d dd       	rcall	.-1318   	; 0x1028 <usart_putchar>
    154e:	69 91       	ld	r22, Y+
    1550:	61 11       	cpse	r22, r1
    1552:	fb cf       	rjmp	.-10     	; 0x154a <usart_tx_at+0x14>
    1554:	df 91       	pop	r29
    1556:	cf 91       	pop	r28
    1558:	1f 91       	pop	r17
    155a:	0f 91       	pop	r16
    155c:	08 95       	ret

0000155e <led_blink>:
    155e:	af 92       	push	r10
    1560:	bf 92       	push	r11
    1562:	cf 92       	push	r12
    1564:	df 92       	push	r13
    1566:	ef 92       	push	r14
    1568:	ff 92       	push	r15
    156a:	0f 93       	push	r16
    156c:	1f 93       	push	r17
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	e0 ec       	ldi	r30, 0xC0	; 192
    1574:	f7 e0       	ldi	r31, 0x07	; 7
    1576:	94 81       	ldd	r25, Z+4	; 0x04
    1578:	97 7f       	andi	r25, 0xF7	; 247
    157a:	94 83       	std	Z+4, r25	; 0x04
    157c:	88 23       	and	r24, r24
    157e:	09 f4       	brne	.+2      	; 0x1582 <led_blink+0x24>
    1580:	4c c0       	rjmp	.+152    	; 0x161a <led_blink+0xbc>
    1582:	28 ee       	ldi	r18, 0xE8	; 232
    1584:	33 e0       	ldi	r19, 0x03	; 3
    1586:	82 9f       	mul	r24, r18
    1588:	a0 01       	movw	r20, r0
    158a:	83 9f       	mul	r24, r19
    158c:	50 0d       	add	r21, r0
    158e:	11 24       	eor	r1, r1
    1590:	95 2f       	mov	r25, r21
    1592:	99 0f       	add	r25, r25
    1594:	99 0b       	sbc	r25, r25
    1596:	68 94       	set
    1598:	aa 24       	eor	r10, r10
    159a:	a7 f8       	bld	r10, 7
    159c:	0f 2e       	mov	r0, r31
    159e:	f4 e8       	ldi	r31, 0x84	; 132
    15a0:	bf 2e       	mov	r11, r31
    15a2:	f0 2d       	mov	r31, r0
    15a4:	0f 2e       	mov	r0, r31
    15a6:	fe e1       	ldi	r31, 0x1E	; 30
    15a8:	cf 2e       	mov	r12, r31
    15aa:	f0 2d       	mov	r31, r0
    15ac:	d1 2c       	mov	r13, r1
    15ae:	e1 2c       	mov	r14, r1
    15b0:	f1 2c       	mov	r15, r1
    15b2:	00 e0       	ldi	r16, 0x00	; 0
    15b4:	10 e0       	ldi	r17, 0x00	; 0
    15b6:	24 2f       	mov	r18, r20
    15b8:	35 2f       	mov	r19, r21
    15ba:	49 2f       	mov	r20, r25
    15bc:	59 2f       	mov	r21, r25
    15be:	69 2f       	mov	r22, r25
    15c0:	79 2f       	mov	r23, r25
    15c2:	89 2f       	mov	r24, r25
    15c4:	c3 d6       	rcall	.+3462   	; 0x234c <__muldi3>
    15c6:	0f 2e       	mov	r0, r31
    15c8:	f6 e0       	ldi	r31, 0x06	; 6
    15ca:	af 2e       	mov	r10, r31
    15cc:	f0 2d       	mov	r31, r0
    15ce:	b1 2c       	mov	r11, r1
    15d0:	c1 2c       	mov	r12, r1
    15d2:	0f d7       	rcall	.+3614   	; 0x23f2 <__udivdi3>
    15d4:	29 51       	subi	r18, 0x19	; 25
    15d6:	3c 4f       	sbci	r19, 0xFC	; 252
    15d8:	4f 4f       	sbci	r20, 0xFF	; 255
    15da:	5f 4f       	sbci	r21, 0xFF	; 255
    15dc:	6f 4f       	sbci	r22, 0xFF	; 255
    15de:	7f 4f       	sbci	r23, 0xFF	; 255
    15e0:	8f 4f       	sbci	r24, 0xFF	; 255
    15e2:	9f 4f       	sbci	r25, 0xFF	; 255
    15e4:	e9 d5       	rcall	.+3026   	; 0x21b8 <__floatundisf>
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	4a e7       	ldi	r20, 0x7A	; 122
    15ec:	54 e4       	ldi	r21, 0x44	; 68
    15ee:	42 d5       	rcall	.+2692   	; 0x2074 <__divsf3>
    15f0:	ae d5       	rcall	.+2908   	; 0x214e <__fixunssfdi>
    15f2:	02 2f       	mov	r16, r18
    15f4:	13 2f       	mov	r17, r19
    15f6:	d4 2f       	mov	r29, r20
    15f8:	c5 2f       	mov	r28, r21
    15fa:	62 2f       	mov	r22, r18
    15fc:	71 2f       	mov	r23, r17
    15fe:	8d 2f       	mov	r24, r29
    1600:	9c 2f       	mov	r25, r28
    1602:	8e df       	rcall	.-228    	; 0x1520 <__portable_avr_delay_cycles>
    1604:	e0 ec       	ldi	r30, 0xC0	; 192
    1606:	f7 e0       	ldi	r31, 0x07	; 7
    1608:	84 81       	ldd	r24, Z+4	; 0x04
    160a:	88 60       	ori	r24, 0x08	; 8
    160c:	84 83       	std	Z+4, r24	; 0x04
    160e:	60 2f       	mov	r22, r16
    1610:	71 2f       	mov	r23, r17
    1612:	8d 2f       	mov	r24, r29
    1614:	9c 2f       	mov	r25, r28
    1616:	84 df       	rcall	.-248    	; 0x1520 <__portable_avr_delay_cycles>
    1618:	0f c0       	rjmp	.+30     	; 0x1638 <led_blink+0xda>
    161a:	61 e0       	ldi	r22, 0x01	; 1
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	7e df       	rcall	.-260    	; 0x1520 <__portable_avr_delay_cycles>
    1624:	e0 ec       	ldi	r30, 0xC0	; 192
    1626:	f7 e0       	ldi	r31, 0x07	; 7
    1628:	84 81       	ldd	r24, Z+4	; 0x04
    162a:	88 60       	ori	r24, 0x08	; 8
    162c:	84 83       	std	Z+4, r24	; 0x04
    162e:	61 e0       	ldi	r22, 0x01	; 1
    1630:	70 e0       	ldi	r23, 0x00	; 0
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	74 df       	rcall	.-280    	; 0x1520 <__portable_avr_delay_cycles>
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	1f 91       	pop	r17
    163e:	0f 91       	pop	r16
    1640:	ff 90       	pop	r15
    1642:	ef 90       	pop	r14
    1644:	df 90       	pop	r13
    1646:	cf 90       	pop	r12
    1648:	bf 90       	pop	r11
    164a:	af 90       	pop	r10
    164c:	08 95       	ret

0000164e <at_timeout_start>:
    164e:	e0 e0       	ldi	r30, 0x00	; 0
    1650:	f8 e0       	ldi	r31, 0x08	; 8
    1652:	84 85       	ldd	r24, Z+12	; 0x0c
    1654:	81 60       	ori	r24, 0x01	; 1
    1656:	84 87       	std	Z+12, r24	; 0x0c
    1658:	10 a2       	std	Z+32, r1	; 0x20
    165a:	11 a2       	std	Z+33, r1	; 0x21
    165c:	78 94       	sei
    165e:	08 95       	ret

00001660 <at_timeout_stop>:
    1660:	f8 94       	cli
    1662:	e0 e0       	ldi	r30, 0x00	; 0
    1664:	f8 e0       	ldi	r31, 0x08	; 8
    1666:	84 85       	ldd	r24, Z+12	; 0x0c
    1668:	81 60       	ori	r24, 0x01	; 1
    166a:	84 87       	std	Z+12, r24	; 0x0c
    166c:	08 95       	ret

0000166e <usart_rx_at>:
    166e:	cf 93       	push	r28
    1670:	df 93       	push	r29
    1672:	ec 01       	movw	r28, r24
    1674:	ec df       	rcall	.-40     	; 0x164e <at_timeout_start>
    1676:	89 81       	ldd	r24, Y+1	; 0x01
    1678:	90 91 41 21 	lds	r25, 0x2141	; 0x802141 <status_at_timeout>
    167c:	88 23       	and	r24, r24
    167e:	2c f0       	brlt	.+10     	; 0x168a <usart_rx_at+0x1c>
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	91 11       	cpse	r25, r1
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	81 11       	cpse	r24, r1
    1688:	f6 cf       	rjmp	.-20     	; 0x1676 <usart_rx_at+0x8>
    168a:	ea df       	rcall	.-44     	; 0x1660 <at_timeout_stop>
    168c:	88 81       	ld	r24, Y
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	08 95       	ret

00001694 <at_response>:
    1694:	cf 92       	push	r12
    1696:	df 92       	push	r13
    1698:	ff 92       	push	r15
    169a:	0f 93       	push	r16
    169c:	1f 93       	push	r17
    169e:	cf 93       	push	r28
    16a0:	df 93       	push	r29
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    16a6:	e2 97       	sbiw	r28, 0x32	; 50
    16a8:	cd bf       	out	0x3d, r28	; 61
    16aa:	de bf       	out	0x3e, r29	; 62
    16ac:	6c 01       	movw	r12, r24
    16ae:	10 92 41 21 	sts	0x2141, r1	; 0x802141 <status_at_timeout>
    16b2:	80 91 41 21 	lds	r24, 0x2141	; 0x802141 <status_at_timeout>
    16b6:	81 11       	cpse	r24, r1
    16b8:	50 c0       	rjmp	.+160    	; 0x175a <at_response+0xc6>
    16ba:	f1 2c       	mov	r15, r1
    16bc:	0f 2d       	mov	r16, r15
    16be:	10 e0       	ldi	r17, 0x00	; 0
    16c0:	c6 01       	movw	r24, r12
    16c2:	d5 df       	rcall	.-86     	; 0x166e <usart_rx_at>
    16c4:	98 01       	movw	r18, r16
    16c6:	e1 e0       	ldi	r30, 0x01	; 1
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	ec 0f       	add	r30, r28
    16cc:	fd 1f       	adc	r31, r29
    16ce:	e2 0f       	add	r30, r18
    16d0:	f3 1f       	adc	r31, r19
    16d2:	80 83       	st	Z, r24
    16d4:	fe 01       	movw	r30, r28
    16d6:	e2 0f       	add	r30, r18
    16d8:	f3 1f       	adc	r31, r19
    16da:	91 e0       	ldi	r25, 0x01	; 1
    16dc:	20 81       	ld	r18, Z
    16de:	2f 34       	cpi	r18, 0x4F	; 79
    16e0:	09 f0       	breq	.+2      	; 0x16e4 <at_response+0x50>
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	99 23       	and	r25, r25
    16e6:	41 f0       	breq	.+16     	; 0x16f8 <at_response+0x64>
    16e8:	91 e0       	ldi	r25, 0x01	; 1
    16ea:	8b 34       	cpi	r24, 0x4B	; 75
    16ec:	09 f0       	breq	.+2      	; 0x16f0 <at_response+0x5c>
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	99 23       	and	r25, r25
    16f2:	11 f0       	breq	.+4      	; 0x16f8 <at_response+0x64>
    16f4:	f3 94       	inc	r15
    16f6:	05 c0       	rjmp	.+10     	; 0x1702 <at_response+0x6e>
    16f8:	f3 94       	inc	r15
    16fa:	80 91 41 21 	lds	r24, 0x2141	; 0x802141 <status_at_timeout>
    16fe:	88 23       	and	r24, r24
    1700:	e9 f2       	breq	.-70     	; 0x16bc <at_response+0x28>
    1702:	68 ed       	ldi	r22, 0xD8	; 216
    1704:	70 e2       	ldi	r23, 0x20	; 32
    1706:	80 ea       	ldi	r24, 0xA0	; 160
    1708:	9a e0       	ldi	r25, 0x0A	; 10
    170a:	15 df       	rcall	.-470    	; 0x1536 <usart_tx_at>
    170c:	61 eb       	ldi	r22, 0xB1	; 177
    170e:	70 e2       	ldi	r23, 0x20	; 32
    1710:	80 ea       	ldi	r24, 0xA0	; 160
    1712:	9a e0       	ldi	r25, 0x0A	; 10
    1714:	10 df       	rcall	.-480    	; 0x1536 <usart_tx_at>
    1716:	ff 20       	and	r15, r15
    1718:	99 f0       	breq	.+38     	; 0x1740 <at_response+0xac>
    171a:	ce 01       	movw	r24, r28
    171c:	01 96       	adiw	r24, 0x01	; 1
    171e:	6c 01       	movw	r12, r24
    1720:	fa 94       	dec	r15
    1722:	0f 2d       	mov	r16, r15
    1724:	10 e0       	ldi	r17, 0x00	; 0
    1726:	0f 5f       	subi	r16, 0xFF	; 255
    1728:	1f 4f       	sbci	r17, 0xFF	; 255
    172a:	08 0f       	add	r16, r24
    172c:	19 1f       	adc	r17, r25
    172e:	f6 01       	movw	r30, r12
    1730:	61 91       	ld	r22, Z+
    1732:	6f 01       	movw	r12, r30
    1734:	80 ea       	ldi	r24, 0xA0	; 160
    1736:	9a e0       	ldi	r25, 0x0A	; 10
    1738:	77 dc       	rcall	.-1810   	; 0x1028 <usart_putchar>
    173a:	c0 16       	cp	r12, r16
    173c:	d1 06       	cpc	r13, r17
    173e:	b9 f7       	brne	.-18     	; 0x172e <at_response+0x9a>
    1740:	68 ed       	ldi	r22, 0xD8	; 216
    1742:	70 e2       	ldi	r23, 0x20	; 32
    1744:	80 ea       	ldi	r24, 0xA0	; 160
    1746:	9a e0       	ldi	r25, 0x0A	; 10
    1748:	f6 de       	rcall	.-532    	; 0x1536 <usart_tx_at>
    174a:	61 eb       	ldi	r22, 0xB1	; 177
    174c:	70 e2       	ldi	r23, 0x20	; 32
    174e:	80 ea       	ldi	r24, 0xA0	; 160
    1750:	9a e0       	ldi	r25, 0x0A	; 10
    1752:	f1 de       	rcall	.-542    	; 0x1536 <usart_tx_at>
    1754:	80 91 41 21 	lds	r24, 0x2141	; 0x802141 <status_at_timeout>
    1758:	0b c0       	rjmp	.+22     	; 0x1770 <at_response+0xdc>
    175a:	68 ed       	ldi	r22, 0xD8	; 216
    175c:	70 e2       	ldi	r23, 0x20	; 32
    175e:	80 ea       	ldi	r24, 0xA0	; 160
    1760:	9a e0       	ldi	r25, 0x0A	; 10
    1762:	e9 de       	rcall	.-558    	; 0x1536 <usart_tx_at>
    1764:	61 eb       	ldi	r22, 0xB1	; 177
    1766:	70 e2       	ldi	r23, 0x20	; 32
    1768:	80 ea       	ldi	r24, 0xA0	; 160
    176a:	9a e0       	ldi	r25, 0x0A	; 10
    176c:	e4 de       	rcall	.-568    	; 0x1536 <usart_tx_at>
    176e:	e8 cf       	rjmp	.-48     	; 0x1740 <at_response+0xac>
    1770:	e2 96       	adiw	r28, 0x32	; 50
    1772:	cd bf       	out	0x3d, r28	; 61
    1774:	de bf       	out	0x3e, r29	; 62
    1776:	df 91       	pop	r29
    1778:	cf 91       	pop	r28
    177a:	1f 91       	pop	r17
    177c:	0f 91       	pop	r16
    177e:	ff 90       	pop	r15
    1780:	df 90       	pop	r13
    1782:	cf 90       	pop	r12
    1784:	08 95       	ret

00001786 <mqtt_packet>:
    1786:	4f 92       	push	r4
    1788:	5f 92       	push	r5
    178a:	6f 92       	push	r6
    178c:	7f 92       	push	r7
    178e:	8f 92       	push	r8
    1790:	9f 92       	push	r9
    1792:	af 92       	push	r10
    1794:	bf 92       	push	r11
    1796:	cf 92       	push	r12
    1798:	df 92       	push	r13
    179a:	ef 92       	push	r14
    179c:	ff 92       	push	r15
    179e:	0f 93       	push	r16
    17a0:	1f 93       	push	r17
    17a2:	cf 93       	push	r28
    17a4:	df 93       	push	r29
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
    17aa:	cf 5f       	subi	r28, 0xFF	; 255
    17ac:	d1 09       	sbc	r29, r1
    17ae:	cd bf       	out	0x3d, r28	; 61
    17b0:	de bf       	out	0x3e, r29	; 62
    17b2:	f8 2e       	mov	r15, r24
    17b4:	e9 2e       	mov	r14, r25
    17b6:	81 e3       	ldi	r24, 0x31	; 49
    17b8:	e6 e3       	ldi	r30, 0x36	; 54
    17ba:	f0 e2       	ldi	r31, 0x20	; 32
    17bc:	de 01       	movw	r26, r28
    17be:	11 96       	adiw	r26, 0x01	; 1
    17c0:	01 90       	ld	r0, Z+
    17c2:	0d 92       	st	X+, r0
    17c4:	8a 95       	dec	r24
    17c6:	e1 f7       	brne	.-8      	; 0x17c0 <mqtt_packet+0x3a>
    17c8:	c4 50       	subi	r28, 0x04	; 4
    17ca:	df 4f       	sbci	r29, 0xFF	; 255
    17cc:	18 82       	st	Y, r1
    17ce:	19 82       	std	Y+1, r1	; 0x01
    17d0:	cc 5f       	subi	r28, 0xFC	; 252
    17d2:	d0 40       	sbci	r29, 0x00	; 0
    17d4:	c2 50       	subi	r28, 0x02	; 2
    17d6:	df 4f       	sbci	r29, 0xFF	; 255
    17d8:	18 82       	st	Y, r1
    17da:	19 82       	std	Y+1, r1	; 0x01
    17dc:	ce 5f       	subi	r28, 0xFE	; 254
    17de:	d0 40       	sbci	r29, 0x00	; 0
    17e0:	ef 2d       	mov	r30, r15
    17e2:	f9 2f       	mov	r31, r25
    17e4:	df 01       	movw	r26, r30
    17e6:	0d 90       	ld	r0, X+
    17e8:	00 20       	and	r0, r0
    17ea:	e9 f7       	brne	.-6      	; 0x17e6 <mqtt_packet+0x60>
    17ec:	11 97       	sbiw	r26, 0x01	; 1
    17ee:	8d 01       	movw	r16, r26
    17f0:	0e 1b       	sub	r16, r30
    17f2:	1f 0b       	sbc	r17, r31
    17f4:	83 e7       	ldi	r24, 0x73	; 115
    17f6:	90 e2       	ldi	r25, 0x20	; 32
    17f8:	88 87       	std	Y+8, r24	; 0x08
    17fa:	99 87       	std	Y+9, r25	; 0x09
    17fc:	84 e1       	ldi	r24, 0x14	; 20
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	8e 87       	std	Y+14, r24	; 0x0e
    1802:	9f 87       	std	Y+15, r25	; 0x0f
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	88 8b       	std	Y+16, r24	; 0x10
    1808:	82 eb       	ldi	r24, 0xB2	; 178
    180a:	90 e2       	ldi	r25, 0x20	; 32
    180c:	8e a3       	std	Y+38, r24	; 0x26
    180e:	9f a3       	std	Y+39, r25	; 0x27
    1810:	8c a7       	std	Y+44, r24	; 0x2c
    1812:	9d a7       	std	Y+45, r25	; 0x2d
    1814:	84 e0       	ldi	r24, 0x04	; 4
    1816:	8f 83       	std	Y+7, r24	; 0x07
    1818:	ae 01       	movw	r20, r28
    181a:	4f 5f       	subi	r20, 0xFF	; 255
    181c:	5f 4f       	sbci	r21, 0xFF	; 255
    181e:	68 ec       	ldi	r22, 0xC8	; 200
    1820:	70 e0       	ldi	r23, 0x00	; 0
    1822:	ce 01       	movw	r24, r28
    1824:	c2 96       	adiw	r24, 0x32	; 50
    1826:	01 d9       	rcall	.-3582   	; 0xa2a <MQTTSerialize_connect>
    1828:	3c 01       	movw	r6, r24
    182a:	8a e7       	ldi	r24, 0x7A	; 122
    182c:	90 e2       	ldi	r25, 0x20	; 32
    182e:	c6 50       	subi	r28, 0x06	; 6
    1830:	df 4f       	sbci	r29, 0xFF	; 255
    1832:	88 83       	st	Y, r24
    1834:	99 83       	std	Y+1, r25	; 0x01
    1836:	ca 5f       	subi	r28, 0xFA	; 250
    1838:	d0 40       	sbci	r29, 0x00	; 0
    183a:	0f 2e       	mov	r0, r31
    183c:	f8 ec       	ldi	r31, 0xC8	; 200
    183e:	4f 2e       	mov	r4, r31
    1840:	51 2c       	mov	r5, r1
    1842:	f0 2d       	mov	r31, r0
    1844:	b2 01       	movw	r22, r4
    1846:	66 19       	sub	r22, r6
    1848:	77 09       	sbc	r23, r7
    184a:	1f 93       	push	r17
    184c:	0f 93       	push	r16
    184e:	ef 92       	push	r14
    1850:	ff 92       	push	r15
    1852:	c6 50       	subi	r28, 0x06	; 6
    1854:	df 4f       	sbci	r29, 0xFF	; 255
    1856:	88 80       	ld	r8, Y
    1858:	ca 5f       	subi	r28, 0xFA	; 250
    185a:	d0 40       	sbci	r29, 0x00	; 0
    185c:	c5 50       	subi	r28, 0x05	; 5
    185e:	df 4f       	sbci	r29, 0xFF	; 255
    1860:	98 80       	ld	r9, Y
    1862:	cb 5f       	subi	r28, 0xFB	; 251
    1864:	d0 40       	sbci	r29, 0x00	; 0
    1866:	c4 50       	subi	r28, 0x04	; 4
    1868:	df 4f       	sbci	r29, 0xFF	; 255
    186a:	a8 80       	ld	r10, Y
    186c:	cc 5f       	subi	r28, 0xFC	; 252
    186e:	d0 40       	sbci	r29, 0x00	; 0
    1870:	c3 50       	subi	r28, 0x03	; 3
    1872:	df 4f       	sbci	r29, 0xFF	; 255
    1874:	b8 80       	ld	r11, Y
    1876:	cd 5f       	subi	r28, 0xFD	; 253
    1878:	d0 40       	sbci	r29, 0x00	; 0
    187a:	c2 50       	subi	r28, 0x02	; 2
    187c:	df 4f       	sbci	r29, 0xFF	; 255
    187e:	c8 80       	ld	r12, Y
    1880:	ce 5f       	subi	r28, 0xFE	; 254
    1882:	d0 40       	sbci	r29, 0x00	; 0
    1884:	c1 50       	subi	r28, 0x01	; 1
    1886:	df 4f       	sbci	r29, 0xFF	; 255
    1888:	d8 80       	ld	r13, Y
    188a:	cf 5f       	subi	r28, 0xFF	; 255
    188c:	d0 40       	sbci	r29, 0x00	; 0
    188e:	e1 2c       	mov	r14, r1
    1890:	f1 2c       	mov	r15, r1
    1892:	00 e0       	ldi	r16, 0x00	; 0
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	40 e0       	ldi	r20, 0x00	; 0
    189a:	82 e3       	ldi	r24, 0x32	; 50
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	8c 0f       	add	r24, r28
    18a0:	9d 1f       	adc	r25, r29
    18a2:	86 0d       	add	r24, r6
    18a4:	97 1d       	adc	r25, r7
    18a6:	bc da       	rcall	.-2696   	; 0xe20 <MQTTSerialize_publish>
    18a8:	68 0e       	add	r6, r24
    18aa:	79 1e       	adc	r7, r25
    18ac:	b2 01       	movw	r22, r4
    18ae:	66 19       	sub	r22, r6
    18b0:	77 09       	sbc	r23, r7
    18b2:	82 e3       	ldi	r24, 0x32	; 50
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	8c 0f       	add	r24, r28
    18b8:	9d 1f       	adc	r25, r29
    18ba:	86 0d       	add	r24, r6
    18bc:	97 1d       	adc	r25, r7
    18be:	a7 d9       	rcall	.-3250   	; 0xc0e <MQTTSerialize_disconnect>
    18c0:	86 0d       	add	r24, r6
    18c2:	97 1d       	adc	r25, r7
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	18 16       	cp	r1, r24
    18ce:	19 06       	cpc	r1, r25
    18d0:	7c f4       	brge	.+30     	; 0x18f0 <mqtt_packet+0x16a>
    18d2:	8e 01       	movw	r16, r28
    18d4:	0e 5c       	subi	r16, 0xCE	; 206
    18d6:	1f 4f       	sbci	r17, 0xFF	; 255
    18d8:	78 01       	movw	r14, r16
    18da:	e8 0e       	add	r14, r24
    18dc:	f9 1e       	adc	r15, r25
    18de:	f8 01       	movw	r30, r16
    18e0:	61 91       	ld	r22, Z+
    18e2:	8f 01       	movw	r16, r30
    18e4:	80 ea       	ldi	r24, 0xA0	; 160
    18e6:	98 e0       	ldi	r25, 0x08	; 8
    18e8:	9f db       	rcall	.-2242   	; 0x1028 <usart_putchar>
    18ea:	0e 15       	cp	r16, r14
    18ec:	1f 05       	cpc	r17, r15
    18ee:	b9 f7       	brne	.-18     	; 0x18de <mqtt_packet+0x158>
    18f0:	68 ed       	ldi	r22, 0xD8	; 216
    18f2:	70 e2       	ldi	r23, 0x20	; 32
    18f4:	80 ea       	ldi	r24, 0xA0	; 160
    18f6:	98 e0       	ldi	r25, 0x08	; 8
    18f8:	97 db       	rcall	.-2258   	; 0x1028 <usart_putchar>
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	c1 50       	subi	r28, 0x01	; 1
    1900:	df 4f       	sbci	r29, 0xFF	; 255
    1902:	cd bf       	out	0x3d, r28	; 61
    1904:	de bf       	out	0x3e, r29	; 62
    1906:	df 91       	pop	r29
    1908:	cf 91       	pop	r28
    190a:	1f 91       	pop	r17
    190c:	0f 91       	pop	r16
    190e:	ff 90       	pop	r15
    1910:	ef 90       	pop	r14
    1912:	df 90       	pop	r13
    1914:	cf 90       	pop	r12
    1916:	bf 90       	pop	r11
    1918:	af 90       	pop	r10
    191a:	9f 90       	pop	r9
    191c:	8f 90       	pop	r8
    191e:	7f 90       	pop	r7
    1920:	6f 90       	pop	r6
    1922:	5f 90       	pop	r5
    1924:	4f 90       	pop	r4
    1926:	08 95       	ret

00001928 <at_command_timeout_setup>:
    1928:	e0 e0       	ldi	r30, 0x00	; 0
    192a:	f8 e0       	ldi	r31, 0x08	; 8
    192c:	86 81       	ldd	r24, Z+6	; 0x06
    192e:	81 60       	ori	r24, 0x01	; 1
    1930:	86 83       	std	Z+6, r24	; 0x06
    1932:	87 e0       	ldi	r24, 0x07	; 7
    1934:	80 83       	st	Z, r24
    1936:	81 81       	ldd	r24, Z+1	; 0x01
    1938:	81 83       	std	Z+1, r24	; 0x01
    193a:	80 e4       	ldi	r24, 0x40	; 64
    193c:	9f e1       	ldi	r25, 0x1F	; 31
    193e:	86 a3       	std	Z+38, r24	; 0x26
    1940:	97 a3       	std	Z+39, r25	; 0x27
    1942:	08 95       	ret

00001944 <adc_result_average>:
    1944:	cf 92       	push	r12
    1946:	df 92       	push	r13
    1948:	ef 92       	push	r14
    194a:	ff 92       	push	r15
    194c:	0f 93       	push	r16
    194e:	1f 93       	push	r17
    1950:	cf 93       	push	r28
    1952:	df 93       	push	r29
    1954:	1f 92       	push	r1
    1956:	cd b7       	in	r28, 0x3d	; 61
    1958:	de b7       	in	r29, 0x3e	; 62
    195a:	28 2f       	mov	r18, r24
    195c:	0d b7       	in	r16, 0x3d	; 61
    195e:	1e b7       	in	r17, 0x3e	; 62
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	88 0f       	add	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	4d b7       	in	r20, 0x3d	; 61
    1968:	5e b7       	in	r21, 0x3e	; 62
    196a:	48 1b       	sub	r20, r24
    196c:	59 0b       	sbc	r21, r25
    196e:	4d bf       	out	0x3d, r20	; 61
    1970:	5e bf       	out	0x3e, r21	; 62
    1972:	ad b7       	in	r26, 0x3d	; 61
    1974:	be b7       	in	r27, 0x3e	; 62
    1976:	11 96       	adiw	r26, 0x01	; 1
    1978:	22 23       	and	r18, r18
    197a:	f9 f0       	breq	.+62     	; 0x19ba <adc_result_average+0x76>
    197c:	c1 2c       	mov	r12, r1
    197e:	d1 2c       	mov	r13, r1
    1980:	76 01       	movw	r14, r12
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	e0 e0       	ldi	r30, 0x00	; 0
    1986:	f2 e0       	ldi	r31, 0x02	; 2
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	9f b7       	in	r25, 0x3f	; 63
    198c:	99 83       	std	Y+1, r25	; 0x01
    198e:	f8 94       	cli
    1990:	49 81       	ldd	r20, Y+1	; 0x01
    1992:	90 81       	ld	r25, Z
    1994:	94 60       	ori	r25, 0x04	; 4
    1996:	90 83       	st	Z, r25
    1998:	4f bf       	out	0x3f, r20	; 63
    199a:	96 81       	ldd	r25, Z+6	; 0x06
    199c:	90 ff       	sbrs	r25, 0
    199e:	fd cf       	rjmp	.-6      	; 0x199a <adc_result_average+0x56>
    19a0:	86 83       	std	Z+6, r24	; 0x06
    19a2:	44 a1       	ldd	r20, Z+36	; 0x24
    19a4:	55 a1       	ldd	r21, Z+37	; 0x25
    19a6:	4d 93       	st	X+, r20
    19a8:	5d 93       	st	X+, r21
    19aa:	c4 0e       	add	r12, r20
    19ac:	d5 1e       	adc	r13, r21
    19ae:	e1 1c       	adc	r14, r1
    19b0:	f1 1c       	adc	r15, r1
    19b2:	3f 5f       	subi	r19, 0xFF	; 255
    19b4:	23 13       	cpse	r18, r19
    19b6:	e9 cf       	rjmp	.-46     	; 0x198a <adc_result_average+0x46>
    19b8:	03 c0       	rjmp	.+6      	; 0x19c0 <adc_result_average+0x7c>
    19ba:	c1 2c       	mov	r12, r1
    19bc:	d1 2c       	mov	r13, r1
    19be:	76 01       	movw	r14, r12
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	40 e0       	ldi	r20, 0x00	; 0
    19c4:	50 e0       	ldi	r21, 0x00	; 0
    19c6:	c7 01       	movw	r24, r14
    19c8:	b6 01       	movw	r22, r12
    19ca:	95 d4       	rcall	.+2346   	; 0x22f6 <__udivmodsi4>
    19cc:	c9 01       	movw	r24, r18
    19ce:	0d bf       	out	0x3d, r16	; 61
    19d0:	1e bf       	out	0x3e, r17	; 62
    19d2:	0f 90       	pop	r0
    19d4:	df 91       	pop	r29
    19d6:	cf 91       	pop	r28
    19d8:	1f 91       	pop	r17
    19da:	0f 91       	pop	r16
    19dc:	ff 90       	pop	r15
    19de:	ef 90       	pop	r14
    19e0:	df 90       	pop	r13
    19e2:	cf 90       	pop	r12
    19e4:	08 95       	ret

000019e6 <__vector_14>:

ISR(TCC0_OVF_vect) {
    19e6:	1f 92       	push	r1
    19e8:	0f 92       	push	r0
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	0f 92       	push	r0
    19ee:	11 24       	eor	r1, r1
    19f0:	08 b6       	in	r0, 0x38	; 56
    19f2:	0f 92       	push	r0
    19f4:	18 be       	out	0x38, r1	; 56
    19f6:	09 b6       	in	r0, 0x39	; 57
    19f8:	0f 92       	push	r0
    19fa:	19 be       	out	0x39, r1	; 57
    19fc:	0b b6       	in	r0, 0x3b	; 59
    19fe:	0f 92       	push	r0
    1a00:	1b be       	out	0x3b, r1	; 59
    1a02:	2f 93       	push	r18
    1a04:	3f 93       	push	r19
    1a06:	4f 93       	push	r20
    1a08:	5f 93       	push	r21
    1a0a:	6f 93       	push	r22
    1a0c:	7f 93       	push	r23
    1a0e:	8f 93       	push	r24
    1a10:	9f 93       	push	r25
    1a12:	af 93       	push	r26
    1a14:	bf 93       	push	r27
    1a16:	ef 93       	push	r30
	at_timeout_stop();
    1a18:	ff 93       	push	r31
	status_at_timeout = 1;
    1a1a:	22 de       	rcall	.-956    	; 0x1660 <at_timeout_stop>
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	80 93 41 21 	sts	0x2141, r24	; 0x802141 <status_at_timeout>
}
    1a22:	ff 91       	pop	r31
    1a24:	ef 91       	pop	r30
    1a26:	bf 91       	pop	r27
    1a28:	af 91       	pop	r26
    1a2a:	9f 91       	pop	r25
    1a2c:	8f 91       	pop	r24
    1a2e:	7f 91       	pop	r23
    1a30:	6f 91       	pop	r22
    1a32:	5f 91       	pop	r21
    1a34:	4f 91       	pop	r20
    1a36:	3f 91       	pop	r19
    1a38:	2f 91       	pop	r18
    1a3a:	0f 90       	pop	r0
    1a3c:	0b be       	out	0x3b, r0	; 59
    1a3e:	0f 90       	pop	r0
    1a40:	09 be       	out	0x39, r0	; 57
    1a42:	0f 90       	pop	r0
    1a44:	08 be       	out	0x38, r0	; 56
    1a46:	0f 90       	pop	r0
    1a48:	0f be       	out	0x3f, r0	; 63
    1a4a:	0f 90       	pop	r0
    1a4c:	1f 90       	pop	r1
    1a4e:	18 95       	reti

00001a50 <main>:


/*! \brief Main function.
 */
int main(void)
{
    1a50:	cf 93       	push	r28
    1a52:	df 93       	push	r29
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
    1a58:	c1 57       	subi	r28, 0x71	; 113
    1a5a:	d1 09       	sbc	r29, r1
    1a5c:	cd bf       	out	0x3d, r28	; 61
    1a5e:	de bf       	out	0x3e, r29	; 62
		
	/* Initialize the board.
	 * The board-specific conf_board.h file contains the configuration of
	 * the board initialization.
	 */
	board_init();
    1a60:	f8 94       	cli
	//pmic_init(); //needed for TC ASF code. Check if needed in real implementation.
	PMIC.CTRL = 0x01; //low level interrupt
    1a62:	b3 da       	rcall	.-2714   	; 0xfca <board_init>
    1a64:	11 e0       	ldi	r17, 0x01	; 1
    1a66:	10 93 a2 00 	sts	0x00A2, r17	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	//sysclk_init();
	
	//LED setup
	PORTQ.DIR |= (1<<3);
    1a6a:	e0 ec       	ldi	r30, 0xC0	; 192
    1a6c:	f7 e0       	ldi	r31, 0x07	; 7
    1a6e:	80 81       	ld	r24, Z
    1a70:	88 60       	ori	r24, 0x08	; 8
	PORTQ.OUT |= (1<<3);
    1a72:	80 83       	st	Z, r24
    1a74:	84 81       	ldd	r24, Z+4	; 0x04
    1a76:	88 60       	ori	r24, 0x08	; 8

static void adc_init(void)
{
	struct adc_config adc_conf;
	struct adc_channel_config adcch_conf;
	adc_read_configuration(&ADC_LC, &adc_conf);
    1a78:	84 83       	std	Z+4, r24	; 0x04
    1a7a:	be 01       	movw	r22, r28
    1a7c:	69 59       	subi	r22, 0x99	; 153
    1a7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	92 e0       	ldi	r25, 0x02	; 2
    1a84:	0e 94 e5 03 	call	0x7ca	; 0x7ca <adc_read_configuration>
	adcch_read_configuration(&ADC_LC, ADC_LC_CH, &adcch_conf);
    1a88:	ae 01       	movw	r20, r28
    1a8a:	42 59       	subi	r20, 0x92	; 146
    1a8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a8e:	61 e0       	ldi	r22, 0x01	; 1
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	92 e0       	ldi	r25, 0x02	; 2
    1a94:	0e 94 69 04 	call	0x8d2	; 0x8d2 <adcch_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    1a98:	a9 96       	adiw	r28, 0x29	; 41
    1a9a:	9f ad       	ldd	r25, Y+63	; 0x3f
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
	conf->refctrl |= ref;
    1a9c:	a9 97       	sbiw	r28, 0x29	; 41
    1a9e:	aa 96       	adiw	r28, 0x2a	; 42
    1aa0:	8f ad       	ldd	r24, Y+63	; 0x3f
    1aa2:	aa 97       	sbiw	r28, 0x2a	; 42
    1aa4:	8f 78       	andi	r24, 0x8F	; 143
    1aa6:	80 61       	ori	r24, 0x10	; 16
    1aa8:	aa 96       	adiw	r28, 0x2a	; 42
    1aaa:	8f af       	std	Y+63, r24	; 0x3f
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    1aac:	aa 97       	sbiw	r28, 0x2a	; 42
    1aae:	89 2f       	mov	r24, r25
    1ab0:	81 7e       	andi	r24, 0xE1	; 225
    1ab2:	a9 96       	adiw	r28, 0x29	; 41
    1ab4:	8f af       	std	Y+63, r24	; 0x3f
		conf->evctrl = ADC_EVACT_NONE_gc;
    1ab6:	a9 97       	sbiw	r28, 0x29	; 41
    1ab8:	ab 96       	adiw	r28, 0x2b	; 43
    1aba:	1f ae       	std	Y+63, r1	; 0x3f
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    1abc:	ab 97       	sbiw	r28, 0x2b	; 43
    1abe:	82 e0       	ldi	r24, 0x02	; 2
    1ac0:	ac 96       	adiw	r28, 0x2c	; 44
    1ac2:	8f af       	std	Y+63, r24	; 0x3f
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    1ac4:	ac 97       	sbiw	r28, 0x2c	; 44
    1ac6:	af 96       	adiw	r28, 0x2f	; 47
    1ac8:	1f af       	std	Y+63, r17	; 0x3f
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    1aca:	af 97       	sbiw	r28, 0x2f	; 47
    1acc:	e0 96       	adiw	r28, 0x30	; 48
    1ace:	1f ae       	std	Y+63, r1	; 0x3f
	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_OFF, ADC_RES_12, ADC_REF_VCC); //vdd/1,6 ~ 2V @ 3,3V.
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
	adc_set_clock_rate(&adc_conf, 200000UL);
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN0, ADCCH_NEG_NONE, 1);
	//adcch_set_input(&adcch_conf, ADCCH_POS_SCALED_VCC, ADCCH_NEG_NONE, 1);
	adc_write_configuration(&ADC_LC, &adc_conf);
    1ad0:	e0 97       	sbiw	r28, 0x30	; 48
    1ad2:	be 01       	movw	r22, r28
    1ad4:	69 59       	subi	r22, 0x99	; 153
    1ad6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
    1ada:	92 e0       	ldi	r25, 0x02	; 2
    1adc:	0e 94 7f 03 	call	0x6fe	; 0x6fe <adc_write_configuration>
	adcch_write_configuration(&ADC_LC, ADC_LC_CH, &adcch_conf);
    1ae0:	ae 01       	movw	r20, r28
    1ae2:	42 59       	subi	r20, 0x92	; 146
    1ae4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ae6:	61 e0       	ldi	r22, 0x01	; 1
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	92 e0       	ldi	r25, 0x02	; 2
    1aec:	0e 94 1e 04 	call	0x83c	; 0x83c <adcch_write_configuration>
	
	int loadcell_adc_result_low;
	int loadcell_adc_result_mid;
	int loadcell_adc_result_hi;
	
	char loadcell_adc_result_ascii[5] = "";
    1af0:	19 82       	std	Y+1, r1	; 0x01
    1af2:	1a 82       	std	Y+2, r1	; 0x02
    1af4:	83 e0       	ldi	r24, 0x03	; 3
    1af6:	fe 01       	movw	r30, r28
    1af8:	33 96       	adiw	r30, 0x03	; 3
    1afa:	df 01       	movw	r26, r30
    1afc:	98 2f       	mov	r25, r24
    1afe:	1d 92       	st	X+, r1
    1b00:	9a 95       	dec	r25
	char loadcell_adc_result_min_ascii[5] = "";
    1b02:	e9 f7       	brne	.-6      	; 0x1afe <main+0xae>
    1b04:	1e 82       	std	Y+6, r1	; 0x06
    1b06:	1f 82       	std	Y+7, r1	; 0x07
    1b08:	35 96       	adiw	r30, 0x05	; 5
    1b0a:	df 01       	movw	r26, r30
    1b0c:	98 2f       	mov	r25, r24
    1b0e:	1d 92       	st	X+, r1
    1b10:	9a 95       	dec	r25
	char loadcell_adc_result_max_ascii[5] = "";
    1b12:	e9 f7       	brne	.-6      	; 0x1b0e <main+0xbe>
    1b14:	1b 86       	std	Y+11, r1	; 0x0b
    1b16:	1c 86       	std	Y+12, r1	; 0x0c
    1b18:	35 96       	adiw	r30, 0x05	; 5
    1b1a:	df 01       	movw	r26, r30
    1b1c:	98 2f       	mov	r25, r24
    1b1e:	1d 92       	st	X+, r1
    1b20:	9a 95       	dec	r25
	char loadcell_adc_result_tran_ascii[5] = "";
    1b22:	e9 f7       	brne	.-6      	; 0x1b1e <main+0xce>
    1b24:	18 8a       	std	Y+16, r1	; 0x10
    1b26:	19 8a       	std	Y+17, r1	; 0x11
    1b28:	35 96       	adiw	r30, 0x05	; 5
    1b2a:	df 01       	movw	r26, r30
    1b2c:	1d 92       	st	X+, r1
    1b2e:	8a 95       	dec	r24
	uint8_t month = 0;
	uint8_t day = 0;
	uint8_t hour = 0;
	uint8_t minute = 0;
	uint8_t second = 0;
	char year_ascii[3] = "";
    1b30:	e9 f7       	brne	.-6      	; 0x1b2c <main+0xdc>
    1b32:	1d 8a       	std	Y+21, r1	; 0x15
    1b34:	1e 8a       	std	Y+22, r1	; 0x16
	char month_ascii[3] = "";
    1b36:	1f 8a       	std	Y+23, r1	; 0x17
    1b38:	18 8e       	std	Y+24, r1	; 0x18
    1b3a:	19 8e       	std	Y+25, r1	; 0x19
	char day_ascii[3] = "";
    1b3c:	1a 8e       	std	Y+26, r1	; 0x1a
    1b3e:	1b 8e       	std	Y+27, r1	; 0x1b
    1b40:	1c 8e       	std	Y+28, r1	; 0x1c
	char hour_ascii[3] = "";
    1b42:	1d 8e       	std	Y+29, r1	; 0x1d
    1b44:	1e 8e       	std	Y+30, r1	; 0x1e
    1b46:	1f 8e       	std	Y+31, r1	; 0x1f
	char minute_ascii[3] = "";
    1b48:	18 a2       	std	Y+32, r1	; 0x20
    1b4a:	19 a2       	std	Y+33, r1	; 0x21
    1b4c:	1a a2       	std	Y+34, r1	; 0x22
	char second_ascii[3] = "";
    1b4e:	1b a2       	std	Y+35, r1	; 0x23
    1b50:	1c a2       	std	Y+36, r1	; 0x24
    1b52:	1d a2       	std	Y+37, r1	; 0x25
	char transfer_data[64] = ""; //currently 45 if sent as text.
    1b54:	1e a2       	std	Y+38, r1	; 0x26
    1b56:	1f a2       	std	Y+39, r1	; 0x27
    1b58:	18 a6       	std	Y+40, r1	; 0x28
    1b5a:	77 96       	adiw	r30, 0x17	; 23
    1b5c:	8e e3       	ldi	r24, 0x3E	; 62
    1b5e:	df 01       	movw	r26, r30
    1b60:	1d 92       	st	X+, r1
    1b62:	8a 95       	dec	r24
	
	adc_enable(&ADC_LC);
    1b64:	e9 f7       	brne	.-6      	; 0x1b60 <main+0x110>
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	92 e0       	ldi	r25, 0x02	; 2
    1b6a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <adc_enable>
		.paritytype = USART_SERIAL_SIM900_PARITY,
		.stopbits = USART_SERIAL_SIM900_STOP_BIT
	};

	// Initialize usart driver in RS232 mode
	usart_init_rs232(USART_SERIAL_EXAMPLE, &USART_SERIAL_OPTIONS);
    1b6e:	67 e0       	ldi	r22, 0x07	; 7
    1b70:	70 e2       	ldi	r23, 0x20	; 32
    1b72:	80 ea       	ldi	r24, 0xA0	; 160
    1b74:	9a e0       	ldi	r25, 0x0A	; 10
	usart_init_rs232(USART_SERIAL_SIM900, &USART_SERIAL_SIM900_OPTIONS);
    1b76:	73 db       	rcall	.-2330   	; 0x125e <usart_init_rs232>
    1b78:	60 e0       	ldi	r22, 0x00	; 0
    1b7a:	70 e2       	ldi	r23, 0x20	; 32
    1b7c:	80 ea       	ldi	r24, 0xA0	; 160
	
	
	at_command_timeout_setup();
    1b7e:	98 e0       	ldi	r25, 0x08	; 8
    1b80:	6e db       	rcall	.-2340   	; 0x125e <usart_init_rs232>
	
	
	controller_states_t controller_state = READ_EXT_DATA;
	controller_states_t controller_next_state = controller_state;
	
	tx_active = 1;
    1b82:	d2 de       	rcall	.-604    	; 0x1928 <at_command_timeout_setup>
    1b84:	10 93 40 21 	sts	0x2140, r17	; 0x802140 <tx_active>
	while(tx_active) {
    1b88:	80 91 40 21 	lds	r24, 0x2140	; 0x802140 <tx_active>
    1b8c:	81 11       	cpse	r24, r1
		
		
		
		delay_s(1); //1 ~ 6s
    1b8e:	5f c2       	rjmp	.+1214   	; 0x204e <main+0x5fe>
    1b90:	34 c1       	rjmp	.+616    	; 0x1dfa <main+0x3aa>
    1b92:	66 e1       	ldi	r22, 0x16	; 22
    1b94:	76 e1       	ldi	r23, 0x16	; 22
    1b96:	85 e0       	ldi	r24, 0x05	; 5
		
		
		
		//Configuring the controller state machine. Follow specification from flow chart.
		switch(controller_state) //compare against controller state????
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	c2 dc       	rcall	.-1660   	; 0x1520 <__portable_avr_delay_cycles>
    1b9c:	11 30       	cpi	r17, 0x01	; 1
    1b9e:	51 f0       	breq	.+20     	; 0x1bb4 <main+0x164>
    1ba0:	08 f4       	brcc	.+2      	; 0x1ba4 <main+0x154>
    1ba2:	24 c1       	rjmp	.+584    	; 0x1dec <main+0x39c>
    1ba4:	12 30       	cpi	r17, 0x02	; 2
    1ba6:	09 f4       	brne	.+2      	; 0x1baa <main+0x15a>
    1ba8:	90 c0       	rjmp	.+288    	; 0x1cca <main+0x27a>
			// 			Go to sleep?
			// 			Measure again?
			// 			Transmit again?
			// 			Other?
			
			controller_next_state = READ_EXT_DATA;
    1baa:	14 30       	cpi	r17, 0x04	; 4
    1bac:	09 f4       	brne	.+2      	; 0x1bb0 <main+0x160>
			break;
			
			case MEASURE:
				
				//loadcell_adc_result = 1203;			
				loadcell_adc_result = adc_result_average(9);
    1bae:	8d c0       	rjmp	.+282    	; 0x1cca <main+0x27a>
    1bb0:	10 e0       	ldi	r17, 0x00	; 0
    1bb2:	1f c1       	rjmp	.+574    	; 0x1df2 <main+0x3a2>
    1bb4:	89 e0       	ldi	r24, 0x09	; 9
				accu_data += loadcell_adc_result; //accumulate
    1bb6:	c6 de       	rcall	.-628    	; 0x1944 <adc_result_average>
    1bb8:	7c 01       	movw	r14, r24
    1bba:	80 91 48 21 	lds	r24, 0x2148	; 0x802148 <accu_data>
    1bbe:	90 91 49 21 	lds	r25, 0x2149	; 0x802149 <accu_data+0x1>
    1bc2:	a0 91 4a 21 	lds	r26, 0x214A	; 0x80214a <accu_data+0x2>
    1bc6:	b0 91 4b 21 	lds	r27, 0x214B	; 0x80214b <accu_data+0x3>
    1bca:	8e 0d       	add	r24, r14
    1bcc:	9f 1d       	adc	r25, r15
    1bce:	a1 1d       	adc	r26, r1
    1bd0:	b1 1d       	adc	r27, r1
    1bd2:	80 93 48 21 	sts	0x2148, r24	; 0x802148 <accu_data>
    1bd6:	90 93 49 21 	sts	0x2149, r25	; 0x802149 <accu_data+0x1>
    1bda:	a0 93 4a 21 	sts	0x214A, r26	; 0x80214a <accu_data+0x2>
				
				
				loadcell_adc_result_tran = loadcell_adc_result - loadcell_adc_result_prev;
    1bde:	b0 93 4b 21 	sts	0x214B, r27	; 0x80214b <accu_data+0x3>
    1be2:	c7 01       	movw	r24, r14
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1be4:	8a 19       	sub	r24, r10
    1be6:	9b 09       	sbc	r25, r11
    1be8:	5c 01       	movw	r10, r24
    1bea:	4a e0       	ldi	r20, 0x0A	; 10
    1bec:	be 01       	movw	r22, r28
    1bee:	69 59       	subi	r22, 0x99	; 153
				loadcell_adc_result_prev = loadcell_adc_result;
				
				//debug
				char debugdata[5];
				itoa(loadcell_adc_result, debugdata, 10);
				usart_tx_at(USART_SERIAL_EXAMPLE, debugdata);
    1bf0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf2:	c7 01       	movw	r24, r14
    1bf4:	84 d4       	rcall	.+2312   	; 0x24fe <__itoa_ncheck>
    1bf6:	be 01       	movw	r22, r28
    1bf8:	69 59       	subi	r22, 0x99	; 153
    1bfa:	7f 4f       	sbci	r23, 0xFF	; 255
				usart_tx_at(USART_SERIAL_EXAMPLE, SPACE);
    1bfc:	80 ea       	ldi	r24, 0xA0	; 160
    1bfe:	9a e0       	ldi	r25, 0x0A	; 10
    1c00:	9a dc       	rcall	.-1740   	; 0x1536 <usart_tx_at>
    1c02:	6b e9       	ldi	r22, 0x9B	; 155
    1c04:	70 e2       	ldi	r23, 0x20	; 32
    1c06:	80 ea       	ldi	r24, 0xA0	; 160
				
				
				if (loadcell_adc_result<min_data)
    1c08:	9a e0       	ldi	r25, 0x0A	; 10
    1c0a:	95 dc       	rcall	.-1750   	; 0x1536 <usart_tx_at>
    1c0c:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <min_data>
    1c10:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <min_data+0x1>
    1c14:	e8 16       	cp	r14, r24
				{
					min_data = loadcell_adc_result;
    1c16:	f9 06       	cpc	r15, r25
    1c18:	20 f4       	brcc	.+8      	; 0x1c22 <main+0x1d2>
    1c1a:	e0 92 0e 20 	sts	0x200E, r14	; 0x80200e <min_data>
				}
				if (loadcell_adc_result>max_data)
    1c1e:	f0 92 0f 20 	sts	0x200F, r15	; 0x80200f <min_data+0x1>
    1c22:	80 91 42 21 	lds	r24, 0x2142	; 0x802142 <max_data>
    1c26:	90 91 43 21 	lds	r25, 0x2143	; 0x802143 <max_data+0x1>
    1c2a:	8e 15       	cp	r24, r14
				{
					max_data = loadcell_adc_result;
    1c2c:	9f 05       	cpc	r25, r15
    1c2e:	20 f4       	brcc	.+8      	; 0x1c38 <main+0x1e8>
    1c30:	e0 92 42 21 	sts	0x2142, r14	; 0x802142 <max_data>
				}
				if ((abs(loadcell_adc_result_tran) > abs(loadcell_adc_result_tran_max)) & accu_data_cnt != 0) //first step is not valid due to only one value.
    1c34:	f0 92 43 21 	sts	0x2143, r15	; 0x802143 <max_data+0x1>
    1c38:	20 91 46 21 	lds	r18, 0x2146	; 0x802146 <accu_data_cnt>
    1c3c:	30 91 47 21 	lds	r19, 0x2147	; 0x802147 <accu_data_cnt+0x1>
    1c40:	b5 01       	movw	r22, r10
    1c42:	bb 20       	and	r11, r11
    1c44:	24 f4       	brge	.+8      	; 0x1c4e <main+0x1fe>
    1c46:	66 27       	eor	r22, r22
    1c48:	77 27       	eor	r23, r23
    1c4a:	6a 19       	sub	r22, r10
    1c4c:	7b 09       	sbc	r23, r11
    1c4e:	a6 01       	movw	r20, r12
    1c50:	dd 20       	and	r13, r13
    1c52:	24 f4       	brge	.+8      	; 0x1c5c <main+0x20c>
    1c54:	44 27       	eor	r20, r20
    1c56:	55 27       	eor	r21, r21
    1c58:	4c 19       	sub	r20, r12
    1c5a:	5d 09       	sbc	r21, r13
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	46 17       	cp	r20, r22
    1c60:	57 07       	cpc	r21, r23
    1c62:	0c f0       	brlt	.+2      	; 0x1c66 <main+0x216>
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	88 23       	and	r24, r24
    1c68:	39 f0       	breq	.+14     	; 0x1c78 <main+0x228>
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	21 15       	cp	r18, r1
    1c6e:	31 05       	cpc	r19, r1
    1c70:	09 f4       	brne	.+2      	; 0x1c74 <main+0x224>
				{
					loadcell_adc_result_tran_max = loadcell_adc_result_tran;
    1c72:	80 e0       	ldi	r24, 0x00	; 0
				}
				
				
				accu_data_cnt++;
    1c74:	81 11       	cpse	r24, r1
    1c76:	65 01       	movw	r12, r10
    1c78:	2f 5f       	subi	r18, 0xFF	; 255
    1c7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c7c:	20 93 46 21 	sts	0x2146, r18	; 0x802146 <accu_data_cnt>
				if (accu_data_cnt >= (TAVG/TS) )
    1c80:	30 93 47 21 	sts	0x2147, r19	; 0x802147 <accu_data_cnt+0x1>
    1c84:	2c 30       	cpi	r18, 0x0C	; 12
    1c86:	31 05       	cpc	r19, r1
				{
					avg_data = accu_data/accu_data_cnt;
    1c88:	08 f4       	brcc	.+2      	; 0x1c8c <main+0x23c>
    1c8a:	b2 c0       	rjmp	.+356    	; 0x1df0 <main+0x3a0>
    1c8c:	40 e0       	ldi	r20, 0x00	; 0
    1c8e:	50 e0       	ldi	r21, 0x00	; 0
    1c90:	60 91 48 21 	lds	r22, 0x2148	; 0x802148 <accu_data>
    1c94:	70 91 49 21 	lds	r23, 0x2149	; 0x802149 <accu_data+0x1>
    1c98:	80 91 4a 21 	lds	r24, 0x214A	; 0x80214a <accu_data+0x2>
    1c9c:	90 91 4b 21 	lds	r25, 0x214B	; 0x80214b <accu_data+0x3>
    1ca0:	2a d3       	rcall	.+1620   	; 0x22f6 <__udivmodsi4>
    1ca2:	20 93 44 21 	sts	0x2144, r18	; 0x802144 <avg_data>
					controller_next_state = TX_DATA; //actually calc....
					accu_data = 0;
    1ca6:	30 93 45 21 	sts	0x2145, r19	; 0x802145 <avg_data+0x1>
    1caa:	10 92 48 21 	sts	0x2148, r1	; 0x802148 <accu_data>
    1cae:	10 92 49 21 	sts	0x2149, r1	; 0x802149 <accu_data+0x1>
    1cb2:	10 92 4a 21 	sts	0x214A, r1	; 0x80214a <accu_data+0x2>
					accu_data_cnt = 0; //reset counter
    1cb6:	10 92 4b 21 	sts	0x214B, r1	; 0x80214b <accu_data+0x3>
    1cba:	10 92 46 21 	sts	0x2146, r1	; 0x802146 <accu_data_cnt>
				
				accu_data_cnt++;
				if (accu_data_cnt >= (TAVG/TS) )
				{
					avg_data = accu_data/accu_data_cnt;
					controller_next_state = TX_DATA; //actually calc....
    1cbe:	10 92 47 21 	sts	0x2147, r1	; 0x802147 <accu_data_cnt+0x1>
					accu_data = 0;
					accu_data_cnt = 0; //reset counter
					loadcell_adc_result_prev = 0;
    1cc2:	14 e0       	ldi	r17, 0x04	; 4
    1cc4:	a1 2c       	mov	r10, r1
    1cc6:	b1 2c       	mov	r11, r1
    1cc8:	94 c0       	rjmp	.+296    	; 0x1df2 <main+0x3a2>
    1cca:	4a e0       	ldi	r20, 0x0A	; 10
    1ccc:	be 01       	movw	r22, r28
    1cce:	6f 5f       	subi	r22, 0xFF	; 255
    1cd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd2:	80 91 44 21 	lds	r24, 0x2144	; 0x802144 <avg_data>
    1cd6:	90 91 45 21 	lds	r25, 0x2145	; 0x802145 <avg_data+0x1>
    1cda:	11 d4       	rcall	.+2082   	; 0x24fe <__itoa_ncheck>
    1cdc:	4a e0       	ldi	r20, 0x0A	; 10
    1cde:	be 01       	movw	r22, r28
    1ce0:	6a 5f       	subi	r22, 0xFA	; 250
    1ce2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce4:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <min_data>
    1ce8:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <min_data+0x1>
    1cec:	08 d4       	rcall	.+2064   	; 0x24fe <__itoa_ncheck>
    1cee:	4a e0       	ldi	r20, 0x0A	; 10
    1cf0:	be 01       	movw	r22, r28
    1cf2:	65 5f       	subi	r22, 0xF5	; 245
    1cf4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf6:	80 91 42 21 	lds	r24, 0x2142	; 0x802142 <max_data>
    1cfa:	90 91 43 21 	lds	r25, 0x2143	; 0x802143 <max_data+0x1>
    1cfe:	ff d3       	rcall	.+2046   	; 0x24fe <__itoa_ncheck>
    1d00:	4a e0       	ldi	r20, 0x0A	; 10
    1d02:	be 01       	movw	r22, r28
    1d04:	60 5f       	subi	r22, 0xF0	; 240
				controller_next_state = RX_DATA;
				itoa(avg_data, loadcell_adc_result_ascii, 10); //convert to hex to lower transferred bytes.
				itoa(min_data, loadcell_adc_result_min_ascii, 10); //convert to hex to lower transferred bytes.
				itoa(max_data, loadcell_adc_result_max_ascii, 10); //convert to hex to lower transferred bytes.
				itoa(loadcell_adc_result_tran_max, loadcell_adc_result_tran_ascii, 10); //convert to hex to lower transferred bytes.
				min_data = MIN_DATA_RESET; //reset min data
    1d06:	7f 4f       	sbci	r23, 0xFF	; 255
    1d08:	c6 01       	movw	r24, r12
    1d0a:	f9 d3       	rcall	.+2034   	; 0x24fe <__itoa_ncheck>
				max_data = 0; //reset max data
    1d0c:	60 92 0e 20 	sts	0x200E, r6	; 0x80200e <min_data>
    1d10:	70 92 0f 20 	sts	0x200F, r7	; 0x80200f <min_data+0x1>
    1d14:	10 92 42 21 	sts	0x2142, r1	; 0x802142 <max_data>
    1d18:	10 92 43 21 	sts	0x2143, r1	; 0x802143 <max_data+0x1>
    1d1c:	40 e1       	ldi	r20, 0x10	; 16
    1d1e:	be 01       	movw	r22, r28
    1d20:	6b 5e       	subi	r22, 0xEB	; 235
    1d22:	7f 4f       	sbci	r23, 0xFF	; 255
    1d24:	81 e1       	ldi	r24, 0x11	; 17
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	ea d3       	rcall	.+2004   	; 0x24fe <__itoa_ncheck>
    1d2a:	40 e1       	ldi	r20, 0x10	; 16
    1d2c:	be 01       	movw	r22, r28
    1d2e:	68 5e       	subi	r22, 0xE8	; 232
    1d30:	7f 4f       	sbci	r23, 0xFF	; 255
    1d32:	86 e0       	ldi	r24, 0x06	; 6
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	e3 d3       	rcall	.+1990   	; 0x24fe <__itoa_ncheck>
    1d38:	40 e1       	ldi	r20, 0x10	; 16
    1d3a:	be 01       	movw	r22, r28
    1d3c:	65 5e       	subi	r22, 0xE5	; 229
    1d3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d40:	87 e0       	ldi	r24, 0x07	; 7
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	dc d3       	rcall	.+1976   	; 0x24fe <__itoa_ncheck>
    1d46:	40 e1       	ldi	r20, 0x10	; 16
    1d48:	be 01       	movw	r22, r28
    1d4a:	62 5e       	subi	r22, 0xE2	; 226
    1d4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d4e:	8d e0       	ldi	r24, 0x0D	; 13
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	d5 d3       	rcall	.+1962   	; 0x24fe <__itoa_ncheck>
    1d54:	93 94       	inc	r9
    1d56:	40 e1       	ldi	r20, 0x10	; 16
    1d58:	be 01       	movw	r22, r28
    1d5a:	6f 5d       	subi	r22, 0xDF	; 223
    1d5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d5e:	89 2d       	mov	r24, r9
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	cd d3       	rcall	.+1946   	; 0x24fe <__itoa_ncheck>
    1d64:	40 e1       	ldi	r20, 0x10	; 16
				minute++;
				itoa(minute, minute_ascii, 16);
				second = 0;
				itoa(second, second_ascii,16);
				
				strcpy(transfer_data, loadcell_adc_result_ascii);
    1d66:	be 01       	movw	r22, r28
    1d68:	6c 5d       	subi	r22, 0xDC	; 220
    1d6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	c6 d3       	rcall	.+1932   	; 0x24fe <__itoa_ncheck>
				strcat(transfer_data, ",");
    1d72:	be 01       	movw	r22, r28
    1d74:	6f 5f       	subi	r22, 0xFF	; 255
    1d76:	7f 4f       	sbci	r23, 0xFF	; 255
    1d78:	c2 01       	movw	r24, r4
    1d7a:	ba d3       	rcall	.+1908   	; 0x24f0 <strcpy>
    1d7c:	f2 01       	movw	r30, r4
    1d7e:	01 90       	ld	r0, Z+
    1d80:	00 20       	and	r0, r0
				strcat(transfer_data, loadcell_adc_result_min_ascii);
    1d82:	e9 f7       	brne	.-6      	; 0x1d7e <main+0x32e>
    1d84:	31 97       	sbiw	r30, 0x01	; 1
    1d86:	0c e2       	ldi	r16, 0x2C	; 44
    1d88:	10 e0       	ldi	r17, 0x00	; 0
    1d8a:	00 83       	st	Z, r16
    1d8c:	11 83       	std	Z+1, r17	; 0x01
				strcat(transfer_data, ",");
    1d8e:	be 01       	movw	r22, r28
    1d90:	6a 5f       	subi	r22, 0xFA	; 250
    1d92:	7f 4f       	sbci	r23, 0xFF	; 255
    1d94:	c2 01       	movw	r24, r4
    1d96:	a1 d3       	rcall	.+1858   	; 0x24da <strcat>
				strcat(transfer_data, loadcell_adc_result_max_ascii);
    1d98:	f2 01       	movw	r30, r4
    1d9a:	01 90       	ld	r0, Z+
    1d9c:	00 20       	and	r0, r0
    1d9e:	e9 f7       	brne	.-6      	; 0x1d9a <main+0x34a>
    1da0:	31 97       	sbiw	r30, 0x01	; 1
				strcat(transfer_data, ",");
    1da2:	00 83       	st	Z, r16
    1da4:	11 83       	std	Z+1, r17	; 0x01
    1da6:	be 01       	movw	r22, r28
    1da8:	65 5f       	subi	r22, 0xF5	; 245
    1daa:	7f 4f       	sbci	r23, 0xFF	; 255
    1dac:	c2 01       	movw	r24, r4
				strcat(transfer_data, loadcell_adc_result_tran_ascii);
    1dae:	95 d3       	rcall	.+1834   	; 0x24da <strcat>
    1db0:	f2 01       	movw	r30, r4
    1db2:	01 90       	ld	r0, Z+
    1db4:	00 20       	and	r0, r0
    1db6:	e9 f7       	brne	.-6      	; 0x1db2 <main+0x362>
    1db8:	31 97       	sbiw	r30, 0x01	; 1
				strcat(transfer_data, day_ascii);
				strcat(transfer_data, hour_ascii);
				strcat(transfer_data, minute_ascii);
				strcat(transfer_data, second_ascii);
				*/
				usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_HEADER);
    1dba:	00 83       	st	Z, r16
    1dbc:	11 83       	std	Z+1, r17	; 0x01
    1dbe:	be 01       	movw	r22, r28
    1dc0:	60 5f       	subi	r22, 0xF0	; 240
    1dc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc4:	c2 01       	movw	r24, r4
				usart_tx_at(USART_SERIAL_EXAMPLE, transfer_data);
    1dc6:	89 d3       	rcall	.+1810   	; 0x24da <strcat>
    1dc8:	60 eb       	ldi	r22, 0xB0	; 176
    1dca:	70 e2       	ldi	r23, 0x20	; 32
    1dcc:	80 ea       	ldi	r24, 0xA0	; 160
    1dce:	9a e0       	ldi	r25, 0x0A	; 10
				usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_HEADER);
    1dd0:	b2 db       	rcall	.-2204   	; 0x1536 <usart_tx_at>
    1dd2:	b2 01       	movw	r22, r4
    1dd4:	80 ea       	ldi	r24, 0xA0	; 160
    1dd6:	9a e0       	ldi	r25, 0x0A	; 10
    1dd8:	ae db       	rcall	.-2212   	; 0x1536 <usart_tx_at>
			break;
			
			case CALC:
			
			case TX_DATA:
				controller_next_state = RX_DATA;
    1dda:	60 eb       	ldi	r22, 0xB0	; 176
				itoa(min_data, loadcell_adc_result_min_ascii, 10); //convert to hex to lower transferred bytes.
				itoa(max_data, loadcell_adc_result_max_ascii, 10); //convert to hex to lower transferred bytes.
				itoa(loadcell_adc_result_tran_max, loadcell_adc_result_tran_ascii, 10); //convert to hex to lower transferred bytes.
				min_data = MIN_DATA_RESET; //reset min data
				max_data = 0; //reset max data
				loadcell_adc_result_tran_max = 0;
    1ddc:	70 e2       	ldi	r23, 0x20	; 32
    1dde:	80 ea       	ldi	r24, 0xA0	; 160
				*/
				usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_HEADER);
				usart_tx_at(USART_SERIAL_EXAMPLE, transfer_data);
				usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_HEADER);
								
			break;
    1de0:	9a e0       	ldi	r25, 0x0A	; 10
		
		//Configuring the controller state machine. Follow specification from flow chart.
		switch(controller_state) //compare against controller state????
		{
			case READ_EXT_DATA:
				controller_next_state = MEASURE;
    1de2:	a9 db       	rcall	.-2222   	; 0x1536 <usart_tx_at>
    1de4:	15 e0       	ldi	r17, 0x05	; 5
				loadcell_adc_result = adc_result_average(9);
				accu_data += loadcell_adc_result; //accumulate
				
				
				loadcell_adc_result_tran = loadcell_adc_result - loadcell_adc_result_prev;
				loadcell_adc_result_prev = loadcell_adc_result;
    1de6:	c1 2c       	mov	r12, r1
	
	controller_states_t controller_state = READ_EXT_DATA;
	controller_states_t controller_next_state = controller_state;
	
	tx_active = 1;
	while(tx_active) {
    1de8:	d1 2c       	mov	r13, r1
    1dea:	03 c0       	rjmp	.+6      	; 0x1df2 <main+0x3a2>
    1dec:	11 e0       	ldi	r17, 0x01	; 1
    1dee:	01 c0       	rjmp	.+2      	; 0x1df2 <main+0x3a2>
				//usart_putchar(USART_SERIAL_EXAMPLE, 0x33);
				break;
			
			
			case CIPSHUT: 
				gprs_next_state = CIPSHUT_INIT;
    1df0:	57 01       	movw	r10, r14
    1df2:	80 91 40 21 	lds	r24, 0x2140	; 0x802140 <tx_active>
	
	//tx_active = 1;
	while (tx_active == 1) {
		
		//Configuring the GPRS state machine. Follow specification from flow chart.
		switch(gprs_state) //compare against controller state????
    1df6:	81 11       	cpse	r24, r1
    1df8:	cc ce       	rjmp	.-616    	; 0x1b92 <main+0x142>
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	10 e0       	ldi	r17, 0x00	; 0
    1dfe:	1f c1       	rjmp	.+574    	; 0x203e <main+0x5ee>
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	8a 30       	cpi	r24, 0x0A	; 10
    1e04:	91 05       	cpc	r25, r1
			case CIPSTART: 
				gprs_next_state = CIPSEND;
				//tx_active = 0; //debug
				
				i = 0;
				while (i < LEN_CIPSTART)
    1e06:	08 f0       	brcs	.+2      	; 0x1e0a <main+0x3ba>
    1e08:	07 c1       	rjmp	.+526    	; 0x2018 <main+0x5c8>
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	88 27       	eor	r24, r24
    1e0e:	e2 50       	subi	r30, 0x02	; 2
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
			
			
			case CSTT: 
				gprs_next_state = CIICR;
				//tx_active = 0; //debug
				while (i < LEN_CSTT)
    1e12:	8f 4f       	sbci	r24, 0xFF	; 255
    1e14:	92 c2       	rjmp	.+1316   	; 0x233a <__tablejump2__>
    1e16:	80 91 22 20 	lds	r24, 0x2022	; 0x802022 <LEN_CIPSTART>
		{
			case AT:
				gprs_next_state = CIPSHUT_INIT;
				//tx_active = 0; //debug
				
				usart_tx_at(USART_SERIAL_SIM900, AT_AT); //return OK
    1e1a:	81 11       	cpse	r24, r1
    1e1c:	a1 c0       	rjmp	.+322    	; 0x1f60 <main+0x510>
    1e1e:	10 e0       	ldi	r17, 0x00	; 0
    1e20:	b0 c0       	rjmp	.+352    	; 0x1f82 <main+0x532>
    1e22:	80 91 35 20 	lds	r24, 0x2035	; 0x802035 <LEN_CSTT>
				if (at_response(USART_SERIAL_SIM900)) //if timeout
    1e26:	18 17       	cp	r17, r24
    1e28:	08 f4       	brcc	.+2      	; 0x1e2c <main+0x3dc>
    1e2a:	51 c0       	rjmp	.+162    	; 0x1ece <main+0x47e>
    1e2c:	60 c0       	rjmp	.+192    	; 0x1eee <main+0x49e>
    1e2e:	6d e9       	ldi	r22, 0x9D	; 157
    1e30:	70 e2       	ldi	r23, 0x20	; 32
				{
					usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);
    1e32:	80 ea       	ldi	r24, 0xA0	; 160
    1e34:	98 e0       	ldi	r25, 0x08	; 8
    1e36:	7f db       	rcall	.-2306   	; 0x1536 <usart_tx_at>
    1e38:	80 ea       	ldi	r24, 0xA0	; 160
					tx_active = 0; //stop Tx.
    1e3a:	98 e0       	ldi	r25, 0x08	; 8
		
		//Configuring the GPRS state machine. Follow specification from flow chart.
		switch(gprs_state) //compare against controller state????
		{
			case AT:
				gprs_next_state = CIPSHUT_INIT;
    1e3c:	2b dc       	rcall	.-1962   	; 0x1694 <at_response>
    1e3e:	88 23       	and	r24, r24
			
			case CIPSHUT_INIT: 
				gprs_next_state = CIPSTATUS;
				//tx_active = 0; //debug
				
				usart_tx_at(USART_SERIAL_SIM900, AT_CIPSHUT); //return OK
    1e40:	09 f4       	brne	.+2      	; 0x1e44 <main+0x3f4>
    1e42:	ee c0       	rjmp	.+476    	; 0x2020 <main+0x5d0>
    1e44:	61 ea       	ldi	r22, 0xA1	; 161
    1e46:	70 e2       	ldi	r23, 0x20	; 32
    1e48:	80 ea       	ldi	r24, 0xA0	; 160
				if (at_response(USART_SERIAL_SIM900)) //if timeout
    1e4a:	9a e0       	ldi	r25, 0x0A	; 10
    1e4c:	74 db       	rcall	.-2328   	; 0x1536 <usart_tx_at>
    1e4e:	10 92 40 21 	sts	0x2140, r1	; 0x802140 <tx_active>
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	f4 c0       	rjmp	.+488    	; 0x203e <main+0x5ee>
				{
					usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);
    1e56:	63 eb       	ldi	r22, 0xB3	; 179
    1e58:	70 e2       	ldi	r23, 0x20	; 32
    1e5a:	80 ea       	ldi	r24, 0xA0	; 160
    1e5c:	98 e0       	ldi	r25, 0x08	; 8
					tx_active = 0; //stop Tx.
    1e5e:	6b db       	rcall	.-2346   	; 0x1536 <usart_tx_at>
    1e60:	80 ea       	ldi	r24, 0xA0	; 160
				}
				
				break;
			
			case CIPSHUT_INIT: 
				gprs_next_state = CIPSTATUS;
    1e62:	98 e0       	ldi	r25, 0x08	; 8
    1e64:	17 dc       	rcall	.-2002   	; 0x1694 <at_response>
						
			case CIPSTATUS: 
				gprs_next_state = CIPMUX;
				//tx_active = 0; //debug
				
				usart_tx_at(USART_SERIAL_SIM900, AT_CIPSTATUS); //return OK
    1e66:	88 23       	and	r24, r24
    1e68:	09 f4       	brne	.+2      	; 0x1e6c <main+0x41c>
    1e6a:	dc c0       	rjmp	.+440    	; 0x2024 <main+0x5d4>
    1e6c:	61 ea       	ldi	r22, 0xA1	; 161
    1e6e:	70 e2       	ldi	r23, 0x20	; 32
				if (at_response(USART_SERIAL_SIM900)) //if timeout
    1e70:	80 ea       	ldi	r24, 0xA0	; 160
    1e72:	9a e0       	ldi	r25, 0x0A	; 10
    1e74:	60 db       	rcall	.-2368   	; 0x1536 <usart_tx_at>
    1e76:	10 92 40 21 	sts	0x2140, r1	; 0x802140 <tx_active>
    1e7a:	82 e0       	ldi	r24, 0x02	; 2
    1e7c:	e0 c0       	rjmp	.+448    	; 0x203e <main+0x5ee>
				{
					usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);
    1e7e:	6f eb       	ldi	r22, 0xBF	; 191
    1e80:	70 e2       	ldi	r23, 0x20	; 32
    1e82:	80 ea       	ldi	r24, 0xA0	; 160
    1e84:	98 e0       	ldi	r25, 0x08	; 8
    1e86:	57 db       	rcall	.-2386   	; 0x1536 <usart_tx_at>
					tx_active = 0; //stop Tx.
    1e88:	80 ea       	ldi	r24, 0xA0	; 160
    1e8a:	98 e0       	ldi	r25, 0x08	; 8
				
				break;
			
						
			case CIPSTATUS: 
				gprs_next_state = CIPMUX;
    1e8c:	03 dc       	rcall	.-2042   	; 0x1694 <at_response>
    1e8e:	88 23       	and	r24, r24
										
			case CIPMUX: 
				gprs_next_state = CSTT;
				//tx_active = 0; //debug
								
				usart_tx_at(USART_SERIAL_SIM900, AT_CIPMUX); //return OK
    1e90:	09 f4       	brne	.+2      	; 0x1e94 <main+0x444>
    1e92:	ca c0       	rjmp	.+404    	; 0x2028 <main+0x5d8>
    1e94:	61 ea       	ldi	r22, 0xA1	; 161
    1e96:	70 e2       	ldi	r23, 0x20	; 32
    1e98:	80 ea       	ldi	r24, 0xA0	; 160
				if (at_response(USART_SERIAL_SIM900)) //if timeout
    1e9a:	9a e0       	ldi	r25, 0x0A	; 10
    1e9c:	4c db       	rcall	.-2408   	; 0x1536 <usart_tx_at>
    1e9e:	10 92 40 21 	sts	0x2140, r1	; 0x802140 <tx_active>
    1ea2:	83 e0       	ldi	r24, 0x03	; 3
    1ea4:	cc c0       	rjmp	.+408    	; 0x203e <main+0x5ee>
				{
					usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);
    1ea6:	6d ec       	ldi	r22, 0xCD	; 205
    1ea8:	70 e2       	ldi	r23, 0x20	; 32
    1eaa:	80 ea       	ldi	r24, 0xA0	; 160
    1eac:	98 e0       	ldi	r25, 0x08	; 8
    1eae:	43 db       	rcall	.-2426   	; 0x1536 <usart_tx_at>
					tx_active = 0; //stop Tx.
    1eb0:	80 ea       	ldi	r24, 0xA0	; 160
				
				break;
			
										
			case CIPMUX: 
				gprs_next_state = CSTT;
    1eb2:	98 e0       	ldi	r25, 0x08	; 8
			case CSTT: 
				gprs_next_state = CIICR;
				//tx_active = 0; //debug
				while (i < LEN_CSTT)
				{
					usart_tx_at(USART_SERIAL_SIM900, AT_CSTT[i]); //return OK
    1eb4:	ef db       	rcall	.-2082   	; 0x1694 <at_response>
    1eb6:	88 23       	and	r24, r24
    1eb8:	09 f4       	brne	.+2      	; 0x1ebc <main+0x46c>
    1eba:	b8 c0       	rjmp	.+368    	; 0x202c <main+0x5dc>
    1ebc:	61 ea       	ldi	r22, 0xA1	; 161
    1ebe:	70 e2       	ldi	r23, 0x20	; 32
    1ec0:	80 ea       	ldi	r24, 0xA0	; 160
    1ec2:	9a e0       	ldi	r25, 0x0A	; 10
    1ec4:	38 db       	rcall	.-2448   	; 0x1536 <usart_tx_at>
    1ec6:	10 92 40 21 	sts	0x2140, r1	; 0x802140 <tx_active>
					//usart_tx_at(USART_SERIAL_EXAMPLE, AT_CSTT[i]);
					i++;
    1eca:	84 e0       	ldi	r24, 0x04	; 4
			
			
			case CSTT: 
				gprs_next_state = CIICR;
				//tx_active = 0; //debug
				while (i < LEN_CSTT)
    1ecc:	b8 c0       	rjmp	.+368    	; 0x203e <main+0x5ee>
    1ece:	e1 2f       	mov	r30, r17
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
				{
					usart_tx_at(USART_SERIAL_SIM900, AT_CSTT[i]); //return OK
					//usart_tx_at(USART_SERIAL_EXAMPLE, AT_CSTT[i]);
					i++;
				}
				if (at_response(USART_SERIAL_SIM900)) //if timeout
    1ed2:	ee 0f       	add	r30, r30
    1ed4:	ff 1f       	adc	r31, r31
    1ed6:	ed 5d       	subi	r30, 0xDD	; 221
    1ed8:	ff 4d       	sbci	r31, 0xDF	; 223
    1eda:	60 81       	ld	r22, Z
    1edc:	71 81       	ldd	r23, Z+1	; 0x01
				{
					usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);
    1ede:	80 ea       	ldi	r24, 0xA0	; 160
    1ee0:	98 e0       	ldi	r25, 0x08	; 8
    1ee2:	29 db       	rcall	.-2478   	; 0x1536 <usart_tx_at>
    1ee4:	1f 5f       	subi	r17, 0xFF	; 255
					tx_active = 0; //stop Tx.
    1ee6:	80 91 35 20 	lds	r24, 0x2035	; 0x802035 <LEN_CSTT>
				
				break;
			
			
			case CSTT: 
				gprs_next_state = CIICR;
    1eea:	18 17       	cp	r17, r24
			
						
			case CIICR: 
				gprs_next_state = CIFSR;
				
				usart_tx_at(USART_SERIAL_SIM900, AT_CIICR); //return OK
    1eec:	80 f3       	brcs	.-32     	; 0x1ece <main+0x47e>
    1eee:	80 ea       	ldi	r24, 0xA0	; 160
    1ef0:	98 e0       	ldi	r25, 0x08	; 8
    1ef2:	d0 db       	rcall	.-2144   	; 0x1694 <at_response>
    1ef4:	88 23       	and	r24, r24
    1ef6:	09 f4       	brne	.+2      	; 0x1efa <main+0x4aa>
				if (at_response(USART_SERIAL_SIM900)) //if timeout
    1ef8:	9b c0       	rjmp	.+310    	; 0x2030 <main+0x5e0>
    1efa:	61 ea       	ldi	r22, 0xA1	; 161
    1efc:	70 e2       	ldi	r23, 0x20	; 32
    1efe:	80 ea       	ldi	r24, 0xA0	; 160
    1f00:	9a e0       	ldi	r25, 0x0A	; 10
    1f02:	19 db       	rcall	.-2510   	; 0x1536 <usart_tx_at>
				{
					usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);
    1f04:	10 92 40 21 	sts	0x2140, r1	; 0x802140 <tx_active>
    1f08:	85 e0       	ldi	r24, 0x05	; 5
    1f0a:	99 c0       	rjmp	.+306    	; 0x203e <main+0x5ee>
    1f0c:	6a ed       	ldi	r22, 0xDA	; 218
					tx_active = 0; //stop Tx.
    1f0e:	70 e2       	ldi	r23, 0x20	; 32
    1f10:	80 ea       	ldi	r24, 0xA0	; 160
				
				break;
			
						
			case CIICR: 
				gprs_next_state = CIFSR;
    1f12:	98 e0       	ldi	r25, 0x08	; 8
    1f14:	10 db       	rcall	.-2528   	; 0x1536 <usart_tx_at>
			
						
			case CIFSR: 
				gprs_next_state = CIPSTART;
				
				usart_tx_at(USART_SERIAL_SIM900, AT_CIFSR); //return IP
    1f16:	80 ea       	ldi	r24, 0xA0	; 160
    1f18:	98 e0       	ldi	r25, 0x08	; 8
    1f1a:	bc db       	rcall	.-2184   	; 0x1694 <at_response>
    1f1c:	88 23       	and	r24, r24
    1f1e:	09 f4       	brne	.+2      	; 0x1f22 <main+0x4d2>
				if (at_response(USART_SERIAL_SIM900)) //if timeout
    1f20:	89 c0       	rjmp	.+274    	; 0x2034 <main+0x5e4>
    1f22:	61 ea       	ldi	r22, 0xA1	; 161
    1f24:	70 e2       	ldi	r23, 0x20	; 32
    1f26:	80 ea       	ldi	r24, 0xA0	; 160
    1f28:	9a e0       	ldi	r25, 0x0A	; 10
				{
					usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);
    1f2a:	05 db       	rcall	.-2550   	; 0x1536 <usart_tx_at>
    1f2c:	10 92 40 21 	sts	0x2140, r1	; 0x802140 <tx_active>
    1f30:	86 e0       	ldi	r24, 0x06	; 6
    1f32:	85 c0       	rjmp	.+266    	; 0x203e <main+0x5ee>
					//tx_active = 0; //stop Tx.
				}
				delay_s(1); //for safety, could add this response table as well.
    1f34:	64 ee       	ldi	r22, 0xE4	; 228
    1f36:	70 e2       	ldi	r23, 0x20	; 32
    1f38:	80 ea       	ldi	r24, 0xA0	; 160
    1f3a:	98 e0       	ldi	r25, 0x08	; 8
				
				break;
			
						
			case CIFSR: 
				gprs_next_state = CIPSTART;
    1f3c:	fc da       	rcall	.-2568   	; 0x1536 <usart_tx_at>
					usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);
					//tx_active = 0; //stop Tx.
				}
				delay_s(1); //for safety, could add this response table as well.
				
				break;
    1f3e:	80 ea       	ldi	r24, 0xA0	; 160
				//tx_active = 0; //debug
				
				i = 0;
				while (i < LEN_CIPSTART)
				{
					usart_tx_at(USART_SERIAL_SIM900, AT_CIPSTART[i]); //return several OK
    1f40:	98 e0       	ldi	r25, 0x08	; 8
    1f42:	a8 db       	rcall	.-2224   	; 0x1694 <at_response>
    1f44:	88 23       	and	r24, r24
    1f46:	29 f0       	breq	.+10     	; 0x1f52 <main+0x502>
    1f48:	61 ea       	ldi	r22, 0xA1	; 161
    1f4a:	70 e2       	ldi	r23, 0x20	; 32
    1f4c:	80 ea       	ldi	r24, 0xA0	; 160
    1f4e:	9a e0       	ldi	r25, 0x0A	; 10
    1f50:	f2 da       	rcall	.-2588   	; 0x1536 <usart_tx_at>
					//usart_tx_at(USART_SERIAL_EXAMPLE, AT_CIPSTART[i]);
					i++;
    1f52:	66 e1       	ldi	r22, 0x16	; 22
			case CIPSTART: 
				gprs_next_state = CIPSEND;
				//tx_active = 0; //debug
				
				i = 0;
				while (i < LEN_CIPSTART)
    1f54:	76 e1       	ldi	r23, 0x16	; 22
    1f56:	85 e0       	ldi	r24, 0x05	; 5
    1f58:	90 e0       	ldi	r25, 0x00	; 0
				{
					usart_tx_at(USART_SERIAL_SIM900, AT_CIPSTART[i]); //return several OK
					//usart_tx_at(USART_SERIAL_EXAMPLE, AT_CIPSTART[i]);
					i++;
				}
				if (at_response(USART_SERIAL_SIM900)) //if timeout
    1f5a:	e2 da       	rcall	.-2620   	; 0x1520 <__portable_avr_delay_cycles>
    1f5c:	87 e0       	ldi	r24, 0x07	; 7
    1f5e:	6f c0       	rjmp	.+222    	; 0x203e <main+0x5ee>
    1f60:	10 e0       	ldi	r17, 0x00	; 0
    1f62:	e1 2f       	mov	r30, r17
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
				{
					usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);
    1f66:	ee 0f       	add	r30, r30
    1f68:	ff 1f       	adc	r31, r31
    1f6a:	e0 5f       	subi	r30, 0xF0	; 240
    1f6c:	ff 4d       	sbci	r31, 0xDF	; 223
					//tx_active = 0; //stop Tx.
				}				
				delay_s(3); //for safety, add check for CONNECT before removing this one.
    1f6e:	60 81       	ld	r22, Z
    1f70:	71 81       	ldd	r23, Z+1	; 0x01
    1f72:	80 ea       	ldi	r24, 0xA0	; 160
    1f74:	98 e0       	ldi	r25, 0x08	; 8
    1f76:	df da       	rcall	.-2626   	; 0x1536 <usart_tx_at>
			
						
			case CIPSEND: 
				gprs_next_state = CIPSHUT;
				
				usart_tx_at(USART_SERIAL_SIM900, AT_CIPSEND); //return >
    1f78:	1f 5f       	subi	r17, 0xFF	; 255
    1f7a:	80 91 22 20 	lds	r24, 0x2022	; 0x802022 <LEN_CIPSTART>
    1f7e:	18 17       	cp	r17, r24
    1f80:	80 f3       	brcs	.-32     	; 0x1f62 <main+0x512>
    1f82:	80 ea       	ldi	r24, 0xA0	; 160
				delay_s(1);
    1f84:	98 e0       	ldi	r25, 0x08	; 8
    1f86:	86 db       	rcall	.-2292   	; 0x1694 <at_response>
    1f88:	88 23       	and	r24, r24
    1f8a:	29 f0       	breq	.+10     	; 0x1f96 <main+0x546>
    1f8c:	61 ea       	ldi	r22, 0xA1	; 161
    1f8e:	70 e2       	ldi	r23, 0x20	; 32
				
				//char* AT_MESSAGE2 = "2213 10:33:22";
				char* AT_MESSAGE2 = transfer_data;
				//char* AT_MESSAGE2 = 0x17;
				
				mqtt_packet(AT_MESSAGE2);
    1f90:	80 ea       	ldi	r24, 0xA0	; 160
    1f92:	9a e0       	ldi	r25, 0x0A	; 10
    1f94:	d0 da       	rcall	.-2656   	; 0x1536 <usart_tx_at>
    1f96:	61 e4       	ldi	r22, 0x41	; 65
				//mqtt_packet(loadcell_result);
				//usart_putchar(USART_SERIAL_EXAMPLE, 0x31);
				delay_s(1);
    1f98:	72 e4       	ldi	r23, 0x42	; 66
    1f9a:	8f e0       	ldi	r24, 0x0F	; 15
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	c0 da       	rcall	.-2688   	; 0x1520 <__portable_avr_delay_cycles>
    1fa0:	88 e0       	ldi	r24, 0x08	; 8
    1fa2:	4d c0       	rjmp	.+154    	; 0x203e <main+0x5ee>
				usart_tx_at(USART_SERIAL_SIM900, CTRL_Z); //return OK
    1fa4:	6e ee       	ldi	r22, 0xEE	; 238
    1fa6:	70 e2       	ldi	r23, 0x20	; 32
    1fa8:	80 ea       	ldi	r24, 0xA0	; 160
    1faa:	98 e0       	ldi	r25, 0x08	; 8
    1fac:	c4 da       	rcall	.-2680   	; 0x1536 <usart_tx_at>
    1fae:	66 e1       	ldi	r22, 0x16	; 22
				//usart_putchar(USART_SERIAL_EXAMPLE, 0x32);
				if (at_response(USART_SERIAL_SIM900)) //if timeout
    1fb0:	76 e1       	ldi	r23, 0x16	; 22
    1fb2:	85 e0       	ldi	r24, 0x05	; 5
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	b4 da       	rcall	.-2712   	; 0x1520 <__portable_avr_delay_cycles>
    1fb8:	ce 01       	movw	r24, r28
				{
					usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);
    1fba:	87 96       	adiw	r24, 0x27	; 39
    1fbc:	e4 db       	rcall	.-2104   	; 0x1786 <mqtt_packet>
    1fbe:	66 e1       	ldi	r22, 0x16	; 22
    1fc0:	76 e1       	ldi	r23, 0x16	; 22
    1fc2:	85 e0       	ldi	r24, 0x05	; 5
					tx_active = 0; //stop Tx.
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	ac da       	rcall	.-2728   	; 0x1520 <__portable_avr_delay_cycles>
				
				break;
			
						
			case CIPSEND: 
				gprs_next_state = CIPSHUT;
    1fc8:	6a ef       	ldi	r22, 0xFA	; 250
    1fca:	70 e2       	ldi	r23, 0x20	; 32
				break;
			
			
			case CIPSHUT: 
				gprs_next_state = CIPSHUT_INIT;
				tx_active = 0; //done for now...
    1fcc:	80 ea       	ldi	r24, 0xA0	; 160
    1fce:	98 e0       	ldi	r25, 0x08	; 8
							
				usart_tx_at(USART_SERIAL_SIM900, AT_CIPSHUT); //return OK
    1fd0:	b2 da       	rcall	.-2716   	; 0x1536 <usart_tx_at>
    1fd2:	80 ea       	ldi	r24, 0xA0	; 160
    1fd4:	98 e0       	ldi	r25, 0x08	; 8
    1fd6:	5e db       	rcall	.-2372   	; 0x1694 <at_response>
    1fd8:	88 23       	and	r24, r24
    1fda:	71 f1       	breq	.+92     	; 0x2038 <main+0x5e8>
				if (at_response(USART_SERIAL_SIM900)) //if timeout
    1fdc:	61 ea       	ldi	r22, 0xA1	; 161
    1fde:	70 e2       	ldi	r23, 0x20	; 32
    1fe0:	80 ea       	ldi	r24, 0xA0	; 160
    1fe2:	9a e0       	ldi	r25, 0x0A	; 10
    1fe4:	a8 da       	rcall	.-2736   	; 0x1536 <usart_tx_at>
    1fe6:	10 92 40 21 	sts	0x2140, r1	; 0x802140 <tx_active>
				{
					usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);
    1fea:	89 e0       	ldi	r24, 0x09	; 9
    1fec:	28 c0       	rjmp	.+80     	; 0x203e <main+0x5ee>
    1fee:	10 92 40 21 	sts	0x2140, r1	; 0x802140 <tx_active>
    1ff2:	63 eb       	ldi	r22, 0xB3	; 179
					tx_active = 0; //stop Tx.
    1ff4:	70 e2       	ldi	r23, 0x20	; 32
    1ff6:	80 ea       	ldi	r24, 0xA0	; 160
				//usart_putchar(USART_SERIAL_EXAMPLE, 0x33);
				break;
			
			
			case CIPSHUT: 
				gprs_next_state = CIPSHUT_INIT;
    1ff8:	98 e0       	ldi	r25, 0x08	; 8
    1ffa:	9d da       	rcall	.-2758   	; 0x1536 <usart_tx_at>
// 			Measure again?
// 			Transmit again?
// 			Other?
			
			gprs_next_state = CIPSHUT_INIT;
			tx_active = 0;
    1ffc:	80 ea       	ldi	r24, 0xA0	; 160
    1ffe:	98 e0       	ldi	r25, 0x08	; 8
// 			Go to sleep?
// 			Measure again?
// 			Transmit again?
// 			Other?
			
			gprs_next_state = CIPSHUT_INIT;
    2000:	49 db       	rcall	.-2414   	; 0x1694 <at_response>
			tx_active = 0;
			break;
    2002:	88 23       	and	r24, r24
		
		//Configuring the GPRS state machine. Follow specification from flow chart.
		switch(gprs_state) //compare against controller state????
		{
			case AT:
				gprs_next_state = CIPSHUT_INIT;
    2004:	d9 f0       	breq	.+54     	; 0x203c <main+0x5ec>
    2006:	61 ea       	ldi	r22, 0xA1	; 161
				}
				
				break;
			
			case CIPSHUT_INIT: 
				gprs_next_state = CIPSTATUS;
    2008:	70 e2       	ldi	r23, 0x20	; 32
    200a:	80 ea       	ldi	r24, 0xA0	; 160
				
				break;
			
						
			case CIPSTATUS: 
				gprs_next_state = CIPMUX;
    200c:	9a e0       	ldi	r25, 0x0A	; 10
    200e:	93 da       	rcall	.-2778   	; 0x1536 <usart_tx_at>
				
				break;
			
										
			case CIPMUX: 
				gprs_next_state = CSTT;
    2010:	10 92 40 21 	sts	0x2140, r1	; 0x802140 <tx_active>
				
				break;
			
			
			case CSTT: 
				gprs_next_state = CIICR;
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	13 c0       	rjmp	.+38     	; 0x203e <main+0x5ee>
				
				break;
			
						
			case CIICR: 
				gprs_next_state = CIFSR;
    2018:	10 92 40 21 	sts	0x2140, r1	; 0x802140 <tx_active>
				
				break;
			
						
			case CIPSEND: 
				gprs_next_state = CIPSHUT;
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	0f c0       	rjmp	.+30     	; 0x203e <main+0x5ee>
				//usart_putchar(USART_SERIAL_EXAMPLE, 0x33);
				break;
			
			
			case CIPSHUT: 
				gprs_next_state = CIPSHUT_INIT;
    2020:	81 e0       	ldi	r24, 0x01	; 1
	//Tx/////////////////////////////////////////////////////////////////////////////////////////
	gprs_states_t gprs_state = AT; //CIPSHUT_INIT;
	gprs_states_t gprs_next_state = gprs_state;
	
	//tx_active = 1;
	while (tx_active == 1) {
    2022:	0d c0       	rjmp	.+26     	; 0x203e <main+0x5ee>
    2024:	82 e0       	ldi	r24, 0x02	; 2
    2026:	0b c0       	rjmp	.+22     	; 0x203e <main+0x5ee>
    2028:	83 e0       	ldi	r24, 0x03	; 3
    202a:	09 c0       	rjmp	.+18     	; 0x203e <main+0x5ee>
		gprs_state = gprs_next_state;
		
	}
	////////////////////////////////////////////////////////////////////////////////////////////////
	
	led_blink(1);
    202c:	84 e0       	ldi	r24, 0x04	; 4
    202e:	07 c0       	rjmp	.+14     	; 0x203e <main+0x5ee>
    2030:	85 e0       	ldi	r24, 0x05	; 5
    2032:	05 c0       	rjmp	.+10     	; 0x203e <main+0x5ee>
	tx_active = 1;
	while(tx_active) {
		
		
		
		delay_s(1); //1 ~ 6s
    2034:	86 e0       	ldi	r24, 0x06	; 6
    2036:	03 c0       	rjmp	.+6      	; 0x203e <main+0x5ee>
    2038:	89 e0       	ldi	r24, 0x09	; 9
    203a:	01 c0       	rjmp	.+2      	; 0x203e <main+0x5ee>
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	90 91 40 21 	lds	r25, 0x2140	; 0x802140 <tx_active>
    2042:	91 30       	cpi	r25, 0x01	; 1
    2044:	09 f4       	brne	.+2      	; 0x2048 <main+0x5f8>
    2046:	dc ce       	rjmp	.-584    	; 0x1e00 <main+0x3b0>
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	89 da       	rcall	.-2798   	; 0x155e <led_blink>
				controller_next_state = RX_DATA;
				itoa(avg_data, loadcell_adc_result_ascii, 10); //convert to hex to lower transferred bytes.
				itoa(min_data, loadcell_adc_result_min_ascii, 10); //convert to hex to lower transferred bytes.
				itoa(max_data, loadcell_adc_result_max_ascii, 10); //convert to hex to lower transferred bytes.
				itoa(loadcell_adc_result_tran_max, loadcell_adc_result_tran_ascii, 10); //convert to hex to lower transferred bytes.
				min_data = MIN_DATA_RESET; //reset min data
    204c:	ff cf       	rjmp	.-2      	; 0x204c <main+0x5fc>
    204e:	66 e1       	ldi	r22, 0x16	; 22
    2050:	76 e1       	ldi	r23, 0x16	; 22
				minute++;
				itoa(minute, minute_ascii, 16);
				second = 0;
				itoa(second, second_ascii,16);
				
				strcpy(transfer_data, loadcell_adc_result_ascii);
    2052:	85 e0       	ldi	r24, 0x05	; 5
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	64 da       	rcall	.-2872   	; 0x1520 <__portable_avr_delay_cycles>
    2058:	11 e0       	ldi	r17, 0x01	; 1
    205a:	91 2c       	mov	r9, r1
    205c:	c1 2c       	mov	r12, r1
    205e:	d1 2c       	mov	r13, r1
    2060:	a1 2c       	mov	r10, r1
    2062:	b1 2c       	mov	r11, r1
    2064:	66 24       	eor	r6, r6
    2066:	6a 94       	dec	r6
    2068:	76 2c       	mov	r7, r6
    206a:	2e 01       	movw	r4, r28
    206c:	97 e2       	ldi	r25, 0x27	; 39
    206e:	49 0e       	add	r4, r25
    2070:	51 1c       	adc	r5, r1
    2072:	bf ce       	rjmp	.-642    	; 0x1df2 <main+0x3a2>

00002074 <__divsf3>:
    2074:	0c d0       	rcall	.+24     	; 0x208e <__divsf3x>
    2076:	05 c1       	rjmp	.+522    	; 0x2282 <__fp_round>
    2078:	fd d0       	rcall	.+506    	; 0x2274 <__fp_pscB>
    207a:	40 f0       	brcs	.+16     	; 0x208c <__divsf3+0x18>
    207c:	f4 d0       	rcall	.+488    	; 0x2266 <__fp_pscA>
    207e:	30 f0       	brcs	.+12     	; 0x208c <__divsf3+0x18>
    2080:	21 f4       	brne	.+8      	; 0x208a <__divsf3+0x16>
    2082:	5f 3f       	cpi	r21, 0xFF	; 255
    2084:	19 f0       	breq	.+6      	; 0x208c <__divsf3+0x18>
    2086:	d6 c0       	rjmp	.+428    	; 0x2234 <__fp_inf>
    2088:	51 11       	cpse	r21, r1
    208a:	2f c1       	rjmp	.+606    	; 0x22ea <__fp_szero>
    208c:	d9 c0       	rjmp	.+434    	; 0x2240 <__fp_nan>

0000208e <__divsf3x>:
    208e:	0a d1       	rcall	.+532    	; 0x22a4 <__fp_split3>
    2090:	98 f3       	brcs	.-26     	; 0x2078 <__divsf3+0x4>

00002092 <__divsf3_pse>:
    2092:	99 23       	and	r25, r25
    2094:	c9 f3       	breq	.-14     	; 0x2088 <__divsf3+0x14>
    2096:	55 23       	and	r21, r21
    2098:	b1 f3       	breq	.-20     	; 0x2086 <__divsf3+0x12>
    209a:	95 1b       	sub	r25, r21
    209c:	55 0b       	sbc	r21, r21
    209e:	bb 27       	eor	r27, r27
    20a0:	aa 27       	eor	r26, r26
    20a2:	62 17       	cp	r22, r18
    20a4:	73 07       	cpc	r23, r19
    20a6:	84 07       	cpc	r24, r20
    20a8:	38 f0       	brcs	.+14     	; 0x20b8 <__divsf3_pse+0x26>
    20aa:	9f 5f       	subi	r25, 0xFF	; 255
    20ac:	5f 4f       	sbci	r21, 0xFF	; 255
    20ae:	22 0f       	add	r18, r18
    20b0:	33 1f       	adc	r19, r19
    20b2:	44 1f       	adc	r20, r20
    20b4:	aa 1f       	adc	r26, r26
    20b6:	a9 f3       	breq	.-22     	; 0x20a2 <__divsf3_pse+0x10>
    20b8:	33 d0       	rcall	.+102    	; 0x2120 <__divsf3_pse+0x8e>
    20ba:	0e 2e       	mov	r0, r30
    20bc:	3a f0       	brmi	.+14     	; 0x20cc <__divsf3_pse+0x3a>
    20be:	e0 e8       	ldi	r30, 0x80	; 128
    20c0:	30 d0       	rcall	.+96     	; 0x2122 <__divsf3_pse+0x90>
    20c2:	91 50       	subi	r25, 0x01	; 1
    20c4:	50 40       	sbci	r21, 0x00	; 0
    20c6:	e6 95       	lsr	r30
    20c8:	00 1c       	adc	r0, r0
    20ca:	ca f7       	brpl	.-14     	; 0x20be <__divsf3_pse+0x2c>
    20cc:	29 d0       	rcall	.+82     	; 0x2120 <__divsf3_pse+0x8e>
    20ce:	fe 2f       	mov	r31, r30
    20d0:	27 d0       	rcall	.+78     	; 0x2120 <__divsf3_pse+0x8e>
    20d2:	66 0f       	add	r22, r22
    20d4:	77 1f       	adc	r23, r23
    20d6:	88 1f       	adc	r24, r24
    20d8:	bb 1f       	adc	r27, r27
    20da:	26 17       	cp	r18, r22
    20dc:	37 07       	cpc	r19, r23
    20de:	48 07       	cpc	r20, r24
    20e0:	ab 07       	cpc	r26, r27
    20e2:	b0 e8       	ldi	r27, 0x80	; 128
    20e4:	09 f0       	breq	.+2      	; 0x20e8 <__divsf3_pse+0x56>
    20e6:	bb 0b       	sbc	r27, r27
    20e8:	80 2d       	mov	r24, r0
    20ea:	bf 01       	movw	r22, r30
    20ec:	ff 27       	eor	r31, r31
    20ee:	93 58       	subi	r25, 0x83	; 131
    20f0:	5f 4f       	sbci	r21, 0xFF	; 255
    20f2:	2a f0       	brmi	.+10     	; 0x20fe <__divsf3_pse+0x6c>
    20f4:	9e 3f       	cpi	r25, 0xFE	; 254
    20f6:	51 05       	cpc	r21, r1
    20f8:	68 f0       	brcs	.+26     	; 0x2114 <__divsf3_pse+0x82>
    20fa:	9c c0       	rjmp	.+312    	; 0x2234 <__fp_inf>
    20fc:	f6 c0       	rjmp	.+492    	; 0x22ea <__fp_szero>
    20fe:	5f 3f       	cpi	r21, 0xFF	; 255
    2100:	ec f3       	brlt	.-6      	; 0x20fc <__divsf3_pse+0x6a>
    2102:	98 3e       	cpi	r25, 0xE8	; 232
    2104:	dc f3       	brlt	.-10     	; 0x20fc <__divsf3_pse+0x6a>
    2106:	86 95       	lsr	r24
    2108:	77 95       	ror	r23
    210a:	67 95       	ror	r22
    210c:	b7 95       	ror	r27
    210e:	f7 95       	ror	r31
    2110:	9f 5f       	subi	r25, 0xFF	; 255
    2112:	c9 f7       	brne	.-14     	; 0x2106 <__divsf3_pse+0x74>
    2114:	88 0f       	add	r24, r24
    2116:	91 1d       	adc	r25, r1
    2118:	96 95       	lsr	r25
    211a:	87 95       	ror	r24
    211c:	97 f9       	bld	r25, 7
    211e:	08 95       	ret
    2120:	e1 e0       	ldi	r30, 0x01	; 1
    2122:	66 0f       	add	r22, r22
    2124:	77 1f       	adc	r23, r23
    2126:	88 1f       	adc	r24, r24
    2128:	bb 1f       	adc	r27, r27
    212a:	62 17       	cp	r22, r18
    212c:	73 07       	cpc	r23, r19
    212e:	84 07       	cpc	r24, r20
    2130:	ba 07       	cpc	r27, r26
    2132:	20 f0       	brcs	.+8      	; 0x213c <__divsf3_pse+0xaa>
    2134:	62 1b       	sub	r22, r18
    2136:	73 0b       	sbc	r23, r19
    2138:	84 0b       	sbc	r24, r20
    213a:	ba 0b       	sbc	r27, r26
    213c:	ee 1f       	adc	r30, r30
    213e:	88 f7       	brcc	.-30     	; 0x2122 <__divsf3_pse+0x90>
    2140:	e0 95       	com	r30
    2142:	08 95       	ret

00002144 <__fixsfdi>:
    2144:	be e3       	ldi	r27, 0x3E	; 62
    2146:	04 d0       	rcall	.+8      	; 0x2150 <__fixunssfdi+0x2>
    2148:	08 f4       	brcc	.+2      	; 0x214c <__fixsfdi+0x8>
    214a:	90 e8       	ldi	r25, 0x80	; 128
    214c:	08 95       	ret

0000214e <__fixunssfdi>:
    214e:	bf e3       	ldi	r27, 0x3F	; 63
    2150:	22 27       	eor	r18, r18
    2152:	33 27       	eor	r19, r19
    2154:	a9 01       	movw	r20, r18
    2156:	ae d0       	rcall	.+348    	; 0x22b4 <__fp_splitA>
    2158:	58 f1       	brcs	.+86     	; 0x21b0 <__fixunssfdi+0x62>
    215a:	9f 57       	subi	r25, 0x7F	; 127
    215c:	40 f1       	brcs	.+80     	; 0x21ae <__fixunssfdi+0x60>
    215e:	b9 17       	cp	r27, r25
    2160:	38 f1       	brcs	.+78     	; 0x21b0 <__fixunssfdi+0x62>
    2162:	bf e3       	ldi	r27, 0x3F	; 63
    2164:	b9 1b       	sub	r27, r25
    2166:	99 27       	eor	r25, r25
    2168:	b8 50       	subi	r27, 0x08	; 8
    216a:	3a f4       	brpl	.+14     	; 0x217a <__fixunssfdi+0x2c>
    216c:	66 0f       	add	r22, r22
    216e:	77 1f       	adc	r23, r23
    2170:	88 1f       	adc	r24, r24
    2172:	99 1f       	adc	r25, r25
    2174:	b3 95       	inc	r27
    2176:	d2 f3       	brmi	.-12     	; 0x216c <__fixunssfdi+0x1e>
    2178:	16 c0       	rjmp	.+44     	; 0x21a6 <__fixunssfdi+0x58>
    217a:	b8 50       	subi	r27, 0x08	; 8
    217c:	4a f0       	brmi	.+18     	; 0x2190 <__fixunssfdi+0x42>
    217e:	23 2f       	mov	r18, r19
    2180:	34 2f       	mov	r19, r20
    2182:	45 2f       	mov	r20, r21
    2184:	56 2f       	mov	r21, r22
    2186:	67 2f       	mov	r22, r23
    2188:	78 2f       	mov	r23, r24
    218a:	88 27       	eor	r24, r24
    218c:	b8 50       	subi	r27, 0x08	; 8
    218e:	ba f7       	brpl	.-18     	; 0x217e <__fixunssfdi+0x30>
    2190:	b8 5f       	subi	r27, 0xF8	; 248
    2192:	49 f0       	breq	.+18     	; 0x21a6 <__fixunssfdi+0x58>
    2194:	86 95       	lsr	r24
    2196:	77 95       	ror	r23
    2198:	67 95       	ror	r22
    219a:	57 95       	ror	r21
    219c:	47 95       	ror	r20
    219e:	37 95       	ror	r19
    21a0:	27 95       	ror	r18
    21a2:	ba 95       	dec	r27
    21a4:	b9 f7       	brne	.-18     	; 0x2194 <__fixunssfdi+0x46>
    21a6:	0e f4       	brtc	.+2      	; 0x21aa <__fixunssfdi+0x5c>
    21a8:	4e d0       	rcall	.+156    	; 0x2246 <__fp_negdi>
    21aa:	88 94       	clc
    21ac:	08 95       	ret
    21ae:	88 94       	clc
    21b0:	60 e0       	ldi	r22, 0x00	; 0
    21b2:	70 e0       	ldi	r23, 0x00	; 0
    21b4:	cb 01       	movw	r24, r22
    21b6:	08 95       	ret

000021b8 <__floatundisf>:
    21b8:	e8 94       	clt

000021ba <__fp_di2sf>:
    21ba:	f9 2f       	mov	r31, r25
    21bc:	96 eb       	ldi	r25, 0xB6	; 182
    21be:	ff 23       	and	r31, r31
    21c0:	81 f0       	breq	.+32     	; 0x21e2 <__fp_di2sf+0x28>
    21c2:	12 16       	cp	r1, r18
    21c4:	13 06       	cpc	r1, r19
    21c6:	14 06       	cpc	r1, r20
    21c8:	44 0b       	sbc	r20, r20
    21ca:	93 95       	inc	r25
    21cc:	f6 95       	lsr	r31
    21ce:	87 95       	ror	r24
    21d0:	77 95       	ror	r23
    21d2:	67 95       	ror	r22
    21d4:	57 95       	ror	r21
    21d6:	40 40       	sbci	r20, 0x00	; 0
    21d8:	ff 23       	and	r31, r31
    21da:	b9 f7       	brne	.-18     	; 0x21ca <__fp_di2sf+0x10>
    21dc:	1b c0       	rjmp	.+54     	; 0x2214 <__fp_di2sf+0x5a>
    21de:	99 27       	eor	r25, r25
    21e0:	08 95       	ret
    21e2:	88 23       	and	r24, r24
    21e4:	51 f4       	brne	.+20     	; 0x21fa <__fp_di2sf+0x40>
    21e6:	98 50       	subi	r25, 0x08	; 8
    21e8:	d2 f7       	brpl	.-12     	; 0x21de <__fp_di2sf+0x24>
    21ea:	87 2b       	or	r24, r23
    21ec:	76 2f       	mov	r23, r22
    21ee:	65 2f       	mov	r22, r21
    21f0:	54 2f       	mov	r21, r20
    21f2:	43 2f       	mov	r20, r19
    21f4:	32 2f       	mov	r19, r18
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	b1 f3       	breq	.-20     	; 0x21e6 <__fp_di2sf+0x2c>
    21fa:	12 16       	cp	r1, r18
    21fc:	13 06       	cpc	r1, r19
    21fe:	14 06       	cpc	r1, r20
    2200:	44 0b       	sbc	r20, r20
    2202:	88 23       	and	r24, r24
    2204:	3a f0       	brmi	.+14     	; 0x2214 <__fp_di2sf+0x5a>
    2206:	9a 95       	dec	r25
    2208:	44 0f       	add	r20, r20
    220a:	55 1f       	adc	r21, r21
    220c:	66 1f       	adc	r22, r22
    220e:	77 1f       	adc	r23, r23
    2210:	88 1f       	adc	r24, r24
    2212:	ca f7       	brpl	.-14     	; 0x2206 <__fp_di2sf+0x4c>
    2214:	55 23       	and	r21, r21
    2216:	4a f4       	brpl	.+18     	; 0x222a <__fp_di2sf+0x70>
    2218:	44 0f       	add	r20, r20
    221a:	55 1f       	adc	r21, r21
    221c:	11 f4       	brne	.+4      	; 0x2222 <__fp_di2sf+0x68>
    221e:	60 ff       	sbrs	r22, 0
    2220:	04 c0       	rjmp	.+8      	; 0x222a <__fp_di2sf+0x70>
    2222:	6f 5f       	subi	r22, 0xFF	; 255
    2224:	7f 4f       	sbci	r23, 0xFF	; 255
    2226:	8f 4f       	sbci	r24, 0xFF	; 255
    2228:	9f 4f       	sbci	r25, 0xFF	; 255
    222a:	88 0f       	add	r24, r24
    222c:	96 95       	lsr	r25
    222e:	87 95       	ror	r24
    2230:	97 f9       	bld	r25, 7
    2232:	08 95       	ret

00002234 <__fp_inf>:
    2234:	97 f9       	bld	r25, 7
    2236:	9f 67       	ori	r25, 0x7F	; 127
    2238:	80 e8       	ldi	r24, 0x80	; 128
    223a:	70 e0       	ldi	r23, 0x00	; 0
    223c:	60 e0       	ldi	r22, 0x00	; 0
    223e:	08 95       	ret

00002240 <__fp_nan>:
    2240:	9f ef       	ldi	r25, 0xFF	; 255
    2242:	80 ec       	ldi	r24, 0xC0	; 192
    2244:	08 95       	ret

00002246 <__fp_negdi>:
    2246:	90 95       	com	r25
    2248:	80 95       	com	r24
    224a:	70 95       	com	r23
    224c:	60 95       	com	r22
    224e:	50 95       	com	r21
    2250:	40 95       	com	r20
    2252:	30 95       	com	r19
    2254:	21 95       	neg	r18
    2256:	3f 4f       	sbci	r19, 0xFF	; 255
    2258:	4f 4f       	sbci	r20, 0xFF	; 255
    225a:	5f 4f       	sbci	r21, 0xFF	; 255
    225c:	6f 4f       	sbci	r22, 0xFF	; 255
    225e:	7f 4f       	sbci	r23, 0xFF	; 255
    2260:	8f 4f       	sbci	r24, 0xFF	; 255
    2262:	9f 4f       	sbci	r25, 0xFF	; 255
    2264:	08 95       	ret

00002266 <__fp_pscA>:
    2266:	00 24       	eor	r0, r0
    2268:	0a 94       	dec	r0
    226a:	16 16       	cp	r1, r22
    226c:	17 06       	cpc	r1, r23
    226e:	18 06       	cpc	r1, r24
    2270:	09 06       	cpc	r0, r25
    2272:	08 95       	ret

00002274 <__fp_pscB>:
    2274:	00 24       	eor	r0, r0
    2276:	0a 94       	dec	r0
    2278:	12 16       	cp	r1, r18
    227a:	13 06       	cpc	r1, r19
    227c:	14 06       	cpc	r1, r20
    227e:	05 06       	cpc	r0, r21
    2280:	08 95       	ret

00002282 <__fp_round>:
    2282:	09 2e       	mov	r0, r25
    2284:	03 94       	inc	r0
    2286:	00 0c       	add	r0, r0
    2288:	11 f4       	brne	.+4      	; 0x228e <__fp_round+0xc>
    228a:	88 23       	and	r24, r24
    228c:	52 f0       	brmi	.+20     	; 0x22a2 <__fp_round+0x20>
    228e:	bb 0f       	add	r27, r27
    2290:	40 f4       	brcc	.+16     	; 0x22a2 <__fp_round+0x20>
    2292:	bf 2b       	or	r27, r31
    2294:	11 f4       	brne	.+4      	; 0x229a <__fp_round+0x18>
    2296:	60 ff       	sbrs	r22, 0
    2298:	04 c0       	rjmp	.+8      	; 0x22a2 <__fp_round+0x20>
    229a:	6f 5f       	subi	r22, 0xFF	; 255
    229c:	7f 4f       	sbci	r23, 0xFF	; 255
    229e:	8f 4f       	sbci	r24, 0xFF	; 255
    22a0:	9f 4f       	sbci	r25, 0xFF	; 255
    22a2:	08 95       	ret

000022a4 <__fp_split3>:
    22a4:	57 fd       	sbrc	r21, 7
    22a6:	90 58       	subi	r25, 0x80	; 128
    22a8:	44 0f       	add	r20, r20
    22aa:	55 1f       	adc	r21, r21
    22ac:	59 f0       	breq	.+22     	; 0x22c4 <__fp_splitA+0x10>
    22ae:	5f 3f       	cpi	r21, 0xFF	; 255
    22b0:	71 f0       	breq	.+28     	; 0x22ce <__fp_splitA+0x1a>
    22b2:	47 95       	ror	r20

000022b4 <__fp_splitA>:
    22b4:	88 0f       	add	r24, r24
    22b6:	97 fb       	bst	r25, 7
    22b8:	99 1f       	adc	r25, r25
    22ba:	61 f0       	breq	.+24     	; 0x22d4 <__fp_splitA+0x20>
    22bc:	9f 3f       	cpi	r25, 0xFF	; 255
    22be:	79 f0       	breq	.+30     	; 0x22de <__fp_splitA+0x2a>
    22c0:	87 95       	ror	r24
    22c2:	08 95       	ret
    22c4:	12 16       	cp	r1, r18
    22c6:	13 06       	cpc	r1, r19
    22c8:	14 06       	cpc	r1, r20
    22ca:	55 1f       	adc	r21, r21
    22cc:	f2 cf       	rjmp	.-28     	; 0x22b2 <__fp_split3+0xe>
    22ce:	46 95       	lsr	r20
    22d0:	f1 df       	rcall	.-30     	; 0x22b4 <__fp_splitA>
    22d2:	08 c0       	rjmp	.+16     	; 0x22e4 <__fp_splitA+0x30>
    22d4:	16 16       	cp	r1, r22
    22d6:	17 06       	cpc	r1, r23
    22d8:	18 06       	cpc	r1, r24
    22da:	99 1f       	adc	r25, r25
    22dc:	f1 cf       	rjmp	.-30     	; 0x22c0 <__fp_splitA+0xc>
    22de:	86 95       	lsr	r24
    22e0:	71 05       	cpc	r23, r1
    22e2:	61 05       	cpc	r22, r1
    22e4:	08 94       	sec
    22e6:	08 95       	ret

000022e8 <__fp_zero>:
    22e8:	e8 94       	clt

000022ea <__fp_szero>:
    22ea:	bb 27       	eor	r27, r27
    22ec:	66 27       	eor	r22, r22
    22ee:	77 27       	eor	r23, r23
    22f0:	cb 01       	movw	r24, r22
    22f2:	97 f9       	bld	r25, 7
    22f4:	08 95       	ret

000022f6 <__udivmodsi4>:
    22f6:	a1 e2       	ldi	r26, 0x21	; 33
    22f8:	1a 2e       	mov	r1, r26
    22fa:	aa 1b       	sub	r26, r26
    22fc:	bb 1b       	sub	r27, r27
    22fe:	fd 01       	movw	r30, r26
    2300:	0d c0       	rjmp	.+26     	; 0x231c <__udivmodsi4_ep>

00002302 <__udivmodsi4_loop>:
    2302:	aa 1f       	adc	r26, r26
    2304:	bb 1f       	adc	r27, r27
    2306:	ee 1f       	adc	r30, r30
    2308:	ff 1f       	adc	r31, r31
    230a:	a2 17       	cp	r26, r18
    230c:	b3 07       	cpc	r27, r19
    230e:	e4 07       	cpc	r30, r20
    2310:	f5 07       	cpc	r31, r21
    2312:	20 f0       	brcs	.+8      	; 0x231c <__udivmodsi4_ep>
    2314:	a2 1b       	sub	r26, r18
    2316:	b3 0b       	sbc	r27, r19
    2318:	e4 0b       	sbc	r30, r20
    231a:	f5 0b       	sbc	r31, r21

0000231c <__udivmodsi4_ep>:
    231c:	66 1f       	adc	r22, r22
    231e:	77 1f       	adc	r23, r23
    2320:	88 1f       	adc	r24, r24
    2322:	99 1f       	adc	r25, r25
    2324:	1a 94       	dec	r1
    2326:	69 f7       	brne	.-38     	; 0x2302 <__udivmodsi4_loop>
    2328:	60 95       	com	r22
    232a:	70 95       	com	r23
    232c:	80 95       	com	r24
    232e:	90 95       	com	r25
    2330:	9b 01       	movw	r18, r22
    2332:	ac 01       	movw	r20, r24
    2334:	bd 01       	movw	r22, r26
    2336:	cf 01       	movw	r24, r30
    2338:	08 95       	ret

0000233a <__tablejump2__>:
    233a:	ee 0f       	add	r30, r30
    233c:	ff 1f       	adc	r31, r31
    233e:	88 1f       	adc	r24, r24
    2340:	8b bf       	out	0x3b, r24	; 59
    2342:	07 90       	elpm	r0, Z+
    2344:	f6 91       	elpm	r31, Z
    2346:	e0 2d       	mov	r30, r0
    2348:	1b be       	out	0x3b, r1	; 59
    234a:	19 94       	eijmp

0000234c <__muldi3>:
    234c:	df 93       	push	r29
    234e:	cf 93       	push	r28
    2350:	1f 93       	push	r17
    2352:	0f 93       	push	r16
    2354:	9a 9d       	mul	r25, r10
    2356:	f0 2d       	mov	r31, r0
    2358:	21 9f       	mul	r18, r17
    235a:	f0 0d       	add	r31, r0
    235c:	8b 9d       	mul	r24, r11
    235e:	f0 0d       	add	r31, r0
    2360:	8a 9d       	mul	r24, r10
    2362:	e0 2d       	mov	r30, r0
    2364:	f1 0d       	add	r31, r1
    2366:	03 9f       	mul	r16, r19
    2368:	f0 0d       	add	r31, r0
    236a:	02 9f       	mul	r16, r18
    236c:	e0 0d       	add	r30, r0
    236e:	f1 1d       	adc	r31, r1
    2370:	4e 9d       	mul	r20, r14
    2372:	e0 0d       	add	r30, r0
    2374:	f1 1d       	adc	r31, r1
    2376:	5e 9d       	mul	r21, r14
    2378:	f0 0d       	add	r31, r0
    237a:	4f 9d       	mul	r20, r15
    237c:	f0 0d       	add	r31, r0
    237e:	7f 93       	push	r23
    2380:	6f 93       	push	r22
    2382:	bf 92       	push	r11
    2384:	af 92       	push	r10
    2386:	5f 93       	push	r21
    2388:	4f 93       	push	r20
    238a:	d5 01       	movw	r26, r10
    238c:	8e d0       	rcall	.+284    	; 0x24aa <__umulhisi3>
    238e:	8b 01       	movw	r16, r22
    2390:	ac 01       	movw	r20, r24
    2392:	d7 01       	movw	r26, r14
    2394:	8a d0       	rcall	.+276    	; 0x24aa <__umulhisi3>
    2396:	eb 01       	movw	r28, r22
    2398:	e8 0f       	add	r30, r24
    239a:	f9 1f       	adc	r31, r25
    239c:	d6 01       	movw	r26, r12
    239e:	1f d0       	rcall	.+62     	; 0x23de <__muldi3_6>
    23a0:	2f 91       	pop	r18
    23a2:	3f 91       	pop	r19
    23a4:	d6 01       	movw	r26, r12
    23a6:	81 d0       	rcall	.+258    	; 0x24aa <__umulhisi3>
    23a8:	c6 0f       	add	r28, r22
    23aa:	d7 1f       	adc	r29, r23
    23ac:	e8 1f       	adc	r30, r24
    23ae:	f9 1f       	adc	r31, r25
    23b0:	af 91       	pop	r26
    23b2:	bf 91       	pop	r27
    23b4:	14 d0       	rcall	.+40     	; 0x23de <__muldi3_6>
    23b6:	2f 91       	pop	r18
    23b8:	3f 91       	pop	r19
    23ba:	77 d0       	rcall	.+238    	; 0x24aa <__umulhisi3>
    23bc:	c6 0f       	add	r28, r22
    23be:	d7 1f       	adc	r29, r23
    23c0:	e8 1f       	adc	r30, r24
    23c2:	f9 1f       	adc	r31, r25
    23c4:	d6 01       	movw	r26, r12
    23c6:	71 d0       	rcall	.+226    	; 0x24aa <__umulhisi3>
    23c8:	e6 0f       	add	r30, r22
    23ca:	f7 1f       	adc	r31, r23
    23cc:	98 01       	movw	r18, r16
    23ce:	be 01       	movw	r22, r28
    23d0:	cf 01       	movw	r24, r30
    23d2:	11 24       	eor	r1, r1
    23d4:	0f 91       	pop	r16
    23d6:	1f 91       	pop	r17
    23d8:	cf 91       	pop	r28
    23da:	df 91       	pop	r29
    23dc:	08 95       	ret

000023de <__muldi3_6>:
    23de:	65 d0       	rcall	.+202    	; 0x24aa <__umulhisi3>
    23e0:	46 0f       	add	r20, r22
    23e2:	57 1f       	adc	r21, r23
    23e4:	c8 1f       	adc	r28, r24
    23e6:	d9 1f       	adc	r29, r25
    23e8:	08 f4       	brcc	.+2      	; 0x23ec <__muldi3_6+0xe>
    23ea:	31 96       	adiw	r30, 0x01	; 1
    23ec:	08 95       	ret

000023ee <__umoddi3>:
    23ee:	68 94       	set
    23f0:	01 c0       	rjmp	.+2      	; 0x23f4 <__udivdi3_umoddi3>

000023f2 <__udivdi3>:
    23f2:	e8 94       	clt

000023f4 <__udivdi3_umoddi3>:
    23f4:	8f 92       	push	r8
    23f6:	9f 92       	push	r9
    23f8:	cf 93       	push	r28
    23fa:	df 93       	push	r29
    23fc:	05 d0       	rcall	.+10     	; 0x2408 <__udivmod64>
    23fe:	df 91       	pop	r29
    2400:	cf 91       	pop	r28
    2402:	9f 90       	pop	r9
    2404:	8f 90       	pop	r8
    2406:	08 95       	ret

00002408 <__udivmod64>:
    2408:	88 24       	eor	r8, r8
    240a:	99 24       	eor	r9, r9
    240c:	f4 01       	movw	r30, r8
    240e:	e4 01       	movw	r28, r8
    2410:	b0 e4       	ldi	r27, 0x40	; 64
    2412:	9f 93       	push	r25
    2414:	aa 27       	eor	r26, r26
    2416:	9a 15       	cp	r25, r10
    2418:	8b 04       	cpc	r8, r11
    241a:	9c 04       	cpc	r9, r12
    241c:	ed 05       	cpc	r30, r13
    241e:	fe 05       	cpc	r31, r14
    2420:	cf 05       	cpc	r28, r15
    2422:	d0 07       	cpc	r29, r16
    2424:	a1 07       	cpc	r26, r17
    2426:	98 f4       	brcc	.+38     	; 0x244e <__udivmod64+0x46>
    2428:	ad 2f       	mov	r26, r29
    242a:	dc 2f       	mov	r29, r28
    242c:	cf 2f       	mov	r28, r31
    242e:	fe 2f       	mov	r31, r30
    2430:	e9 2d       	mov	r30, r9
    2432:	98 2c       	mov	r9, r8
    2434:	89 2e       	mov	r8, r25
    2436:	98 2f       	mov	r25, r24
    2438:	87 2f       	mov	r24, r23
    243a:	76 2f       	mov	r23, r22
    243c:	65 2f       	mov	r22, r21
    243e:	54 2f       	mov	r21, r20
    2440:	43 2f       	mov	r20, r19
    2442:	32 2f       	mov	r19, r18
    2444:	22 27       	eor	r18, r18
    2446:	b8 50       	subi	r27, 0x08	; 8
    2448:	31 f7       	brne	.-52     	; 0x2416 <__udivmod64+0xe>
    244a:	bf 91       	pop	r27
    244c:	27 c0       	rjmp	.+78     	; 0x249c <__udivmod64+0x94>
    244e:	1b 2e       	mov	r1, r27
    2450:	bf 91       	pop	r27
    2452:	bb 27       	eor	r27, r27
    2454:	22 0f       	add	r18, r18
    2456:	33 1f       	adc	r19, r19
    2458:	44 1f       	adc	r20, r20
    245a:	55 1f       	adc	r21, r21
    245c:	66 1f       	adc	r22, r22
    245e:	77 1f       	adc	r23, r23
    2460:	88 1f       	adc	r24, r24
    2462:	99 1f       	adc	r25, r25
    2464:	88 1c       	adc	r8, r8
    2466:	99 1c       	adc	r9, r9
    2468:	ee 1f       	adc	r30, r30
    246a:	ff 1f       	adc	r31, r31
    246c:	cc 1f       	adc	r28, r28
    246e:	dd 1f       	adc	r29, r29
    2470:	aa 1f       	adc	r26, r26
    2472:	bb 1f       	adc	r27, r27
    2474:	8a 14       	cp	r8, r10
    2476:	9b 04       	cpc	r9, r11
    2478:	ec 05       	cpc	r30, r12
    247a:	fd 05       	cpc	r31, r13
    247c:	ce 05       	cpc	r28, r14
    247e:	df 05       	cpc	r29, r15
    2480:	a0 07       	cpc	r26, r16
    2482:	b1 07       	cpc	r27, r17
    2484:	48 f0       	brcs	.+18     	; 0x2498 <__udivmod64+0x90>
    2486:	8a 18       	sub	r8, r10
    2488:	9b 08       	sbc	r9, r11
    248a:	ec 09       	sbc	r30, r12
    248c:	fd 09       	sbc	r31, r13
    248e:	ce 09       	sbc	r28, r14
    2490:	df 09       	sbc	r29, r15
    2492:	a0 0b       	sbc	r26, r16
    2494:	b1 0b       	sbc	r27, r17
    2496:	21 60       	ori	r18, 0x01	; 1
    2498:	1a 94       	dec	r1
    249a:	e1 f6       	brne	.-72     	; 0x2454 <__udivmod64+0x4c>
    249c:	2e f4       	brtc	.+10     	; 0x24a8 <__udivmod64+0xa0>
    249e:	94 01       	movw	r18, r8
    24a0:	af 01       	movw	r20, r30
    24a2:	be 01       	movw	r22, r28
    24a4:	cd 01       	movw	r24, r26
    24a6:	00 0c       	add	r0, r0
    24a8:	08 95       	ret

000024aa <__umulhisi3>:
    24aa:	a2 9f       	mul	r26, r18
    24ac:	b0 01       	movw	r22, r0
    24ae:	b3 9f       	mul	r27, r19
    24b0:	c0 01       	movw	r24, r0
    24b2:	a3 9f       	mul	r26, r19
    24b4:	70 0d       	add	r23, r0
    24b6:	81 1d       	adc	r24, r1
    24b8:	11 24       	eor	r1, r1
    24ba:	91 1d       	adc	r25, r1
    24bc:	b2 9f       	mul	r27, r18
    24be:	70 0d       	add	r23, r0
    24c0:	81 1d       	adc	r24, r1
    24c2:	11 24       	eor	r1, r1
    24c4:	91 1d       	adc	r25, r1
    24c6:	08 95       	ret

000024c8 <memcpy>:
    24c8:	fb 01       	movw	r30, r22
    24ca:	dc 01       	movw	r26, r24
    24cc:	02 c0       	rjmp	.+4      	; 0x24d2 <memcpy+0xa>
    24ce:	01 90       	ld	r0, Z+
    24d0:	0d 92       	st	X+, r0
    24d2:	41 50       	subi	r20, 0x01	; 1
    24d4:	50 40       	sbci	r21, 0x00	; 0
    24d6:	d8 f7       	brcc	.-10     	; 0x24ce <memcpy+0x6>
    24d8:	08 95       	ret

000024da <strcat>:
    24da:	fb 01       	movw	r30, r22
    24dc:	dc 01       	movw	r26, r24
    24de:	0d 90       	ld	r0, X+
    24e0:	00 20       	and	r0, r0
    24e2:	e9 f7       	brne	.-6      	; 0x24de <strcat+0x4>
    24e4:	11 97       	sbiw	r26, 0x01	; 1
    24e6:	01 90       	ld	r0, Z+
    24e8:	0d 92       	st	X+, r0
    24ea:	00 20       	and	r0, r0
    24ec:	e1 f7       	brne	.-8      	; 0x24e6 <strcat+0xc>
    24ee:	08 95       	ret

000024f0 <strcpy>:
    24f0:	fb 01       	movw	r30, r22
    24f2:	dc 01       	movw	r26, r24
    24f4:	01 90       	ld	r0, Z+
    24f6:	0d 92       	st	X+, r0
    24f8:	00 20       	and	r0, r0
    24fa:	e1 f7       	brne	.-8      	; 0x24f4 <strcpy+0x4>
    24fc:	08 95       	ret

000024fe <__itoa_ncheck>:
    24fe:	bb 27       	eor	r27, r27
    2500:	4a 30       	cpi	r20, 0x0A	; 10
    2502:	31 f4       	brne	.+12     	; 0x2510 <__itoa_ncheck+0x12>
    2504:	99 23       	and	r25, r25
    2506:	22 f4       	brpl	.+8      	; 0x2510 <__itoa_ncheck+0x12>
    2508:	bd e2       	ldi	r27, 0x2D	; 45
    250a:	90 95       	com	r25
    250c:	81 95       	neg	r24
    250e:	9f 4f       	sbci	r25, 0xFF	; 255
    2510:	01 c0       	rjmp	.+2      	; 0x2514 <__utoa_common>

00002512 <__utoa_ncheck>:
    2512:	bb 27       	eor	r27, r27

00002514 <__utoa_common>:
    2514:	fb 01       	movw	r30, r22
    2516:	55 27       	eor	r21, r21
    2518:	aa 27       	eor	r26, r26
    251a:	88 0f       	add	r24, r24
    251c:	99 1f       	adc	r25, r25
    251e:	aa 1f       	adc	r26, r26
    2520:	a4 17       	cp	r26, r20
    2522:	10 f0       	brcs	.+4      	; 0x2528 <__utoa_common+0x14>
    2524:	a4 1b       	sub	r26, r20
    2526:	83 95       	inc	r24
    2528:	50 51       	subi	r21, 0x10	; 16
    252a:	b9 f7       	brne	.-18     	; 0x251a <__utoa_common+0x6>
    252c:	a0 5d       	subi	r26, 0xD0	; 208
    252e:	aa 33       	cpi	r26, 0x3A	; 58
    2530:	08 f0       	brcs	.+2      	; 0x2534 <__utoa_common+0x20>
    2532:	a9 5d       	subi	r26, 0xD9	; 217
    2534:	a1 93       	st	Z+, r26
    2536:	00 97       	sbiw	r24, 0x00	; 0
    2538:	79 f7       	brne	.-34     	; 0x2518 <__utoa_common+0x4>
    253a:	b1 11       	cpse	r27, r1
    253c:	b1 93       	st	Z+, r27
    253e:	11 92       	st	Z+, r1
    2540:	cb 01       	movw	r24, r22
    2542:	00 c0       	rjmp	.+0      	; 0x2544 <strrev>

00002544 <strrev>:
    2544:	dc 01       	movw	r26, r24
    2546:	fc 01       	movw	r30, r24
    2548:	67 2f       	mov	r22, r23
    254a:	71 91       	ld	r23, Z+
    254c:	77 23       	and	r23, r23
    254e:	e1 f7       	brne	.-8      	; 0x2548 <strrev+0x4>
    2550:	32 97       	sbiw	r30, 0x02	; 2
    2552:	04 c0       	rjmp	.+8      	; 0x255c <strrev+0x18>
    2554:	7c 91       	ld	r23, X
    2556:	6d 93       	st	X+, r22
    2558:	70 83       	st	Z, r23
    255a:	62 91       	ld	r22, -Z
    255c:	ae 17       	cp	r26, r30
    255e:	bf 07       	cpc	r27, r31
    2560:	c8 f3       	brcs	.-14     	; 0x2554 <strrev+0x10>
    2562:	08 95       	ret

00002564 <_exit>:
    2564:	f8 94       	cli

00002566 <__stop_program>:
    2566:	ff cf       	rjmp	.-2      	; 0x2566 <__stop_program>
