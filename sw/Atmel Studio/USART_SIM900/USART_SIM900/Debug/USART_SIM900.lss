
USART_SIM900.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000040f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002bc  00802000  000040f2  00004186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000028e  008022bc  008022bc  00004442  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004442  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004474  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005c0  00000000  00000000  000044b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00010433  00000000  00000000  00004a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005b84  00000000  00000000  00014eab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007459  00000000  00000000  0001aa2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ecc  00000000  00000000  00021e88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00036906  00000000  00000000  00023d54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007ce1  00000000  00000000  0005a65a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005a0  00000000  00000000  00062340  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000ce9a  00000000  00000000  000628e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4a c1       	rjmp	.+660    	; 0x296 <__ctors_end>
       2:	00 00       	nop
       4:	6e c1       	rjmp	.+732    	; 0x2e2 <__bad_interrupt>
       6:	00 00       	nop
       8:	6c c1       	rjmp	.+728    	; 0x2e2 <__bad_interrupt>
       a:	00 00       	nop
       c:	6a c1       	rjmp	.+724    	; 0x2e2 <__bad_interrupt>
       e:	00 00       	nop
      10:	68 c1       	rjmp	.+720    	; 0x2e2 <__bad_interrupt>
      12:	00 00       	nop
      14:	66 c1       	rjmp	.+716    	; 0x2e2 <__bad_interrupt>
      16:	00 00       	nop
      18:	64 c1       	rjmp	.+712    	; 0x2e2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	62 c1       	rjmp	.+708    	; 0x2e2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	60 c1       	rjmp	.+704    	; 0x2e2 <__bad_interrupt>
      22:	00 00       	nop
      24:	5e c1       	rjmp	.+700    	; 0x2e2 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 76 18 	jmp	0x30ec	; 0x30ec <__vector_10>
      2c:	5a c1       	rjmp	.+692    	; 0x2e2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	58 c1       	rjmp	.+688    	; 0x2e2 <__bad_interrupt>
      32:	00 00       	nop
      34:	56 c1       	rjmp	.+684    	; 0x2e2 <__bad_interrupt>
      36:	00 00       	nop
      38:	54 c1       	rjmp	.+680    	; 0x2e2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e0 c4       	rjmp	.+2496   	; 0x9fe <__vector_15>
      3e:	00 00       	nop
      40:	16 c5       	rjmp	.+2604   	; 0xa6e <__vector_16>
      42:	00 00       	nop
      44:	4c c5       	rjmp	.+2712   	; 0xade <__vector_17>
      46:	00 00       	nop
      48:	82 c5       	rjmp	.+2820   	; 0xb4e <__vector_18>
      4a:	00 00       	nop
      4c:	b8 c5       	rjmp	.+2928   	; 0xbbe <__vector_19>
      4e:	00 00       	nop
      50:	ee c5       	rjmp	.+3036   	; 0xc2e <__vector_20>
      52:	00 00       	nop
      54:	24 c6       	rjmp	.+3144   	; 0xc9e <__vector_21>
      56:	00 00       	nop
      58:	5a c6       	rjmp	.+3252   	; 0xd0e <__vector_22>
      5a:	00 00       	nop
      5c:	90 c6       	rjmp	.+3360   	; 0xd7e <__vector_23>
      5e:	00 00       	nop
      60:	40 c1       	rjmp	.+640    	; 0x2e2 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 26 18 	jmp	0x304c	; 0x304c <__vector_25>
      68:	3c c1       	rjmp	.+632    	; 0x2e2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3a c1       	rjmp	.+628    	; 0x2e2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	38 c1       	rjmp	.+624    	; 0x2e2 <__bad_interrupt>
      72:	00 00       	nop
      74:	36 c1       	rjmp	.+620    	; 0x2e2 <__bad_interrupt>
      76:	00 00       	nop
      78:	34 c1       	rjmp	.+616    	; 0x2e2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	32 c1       	rjmp	.+612    	; 0x2e2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	30 c1       	rjmp	.+608    	; 0x2e2 <__bad_interrupt>
      82:	00 00       	nop
      84:	2e c1       	rjmp	.+604    	; 0x2e2 <__bad_interrupt>
      86:	00 00       	nop
      88:	2c c1       	rjmp	.+600    	; 0x2e2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2a c1       	rjmp	.+596    	; 0x2e2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	28 c1       	rjmp	.+592    	; 0x2e2 <__bad_interrupt>
      92:	00 00       	nop
      94:	26 c1       	rjmp	.+588    	; 0x2e2 <__bad_interrupt>
      96:	00 00       	nop
      98:	24 c1       	rjmp	.+584    	; 0x2e2 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	83 c2       	rjmp	.+1286   	; 0x5a4 <__vector_39>
      9e:	00 00       	nop
      a0:	be c2       	rjmp	.+1404   	; 0x61e <__vector_40>
      a2:	00 00       	nop
      a4:	f9 c2       	rjmp	.+1522   	; 0x698 <__vector_41>
      a6:	00 00       	nop
      a8:	34 c3       	rjmp	.+1640   	; 0x712 <__vector_42>
      aa:	00 00       	nop
      ac:	1a c1       	rjmp	.+564    	; 0x2e2 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	18 c1       	rjmp	.+560    	; 0x2e2 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	16 c1       	rjmp	.+556    	; 0x2e2 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	14 c1       	rjmp	.+552    	; 0x2e2 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 27 09 	jmp	0x124e	; 0x124e <__vector_47>
      c0:	0c 94 5f 09 	jmp	0x12be	; 0x12be <__vector_48>
      c4:	0c 94 97 09 	jmp	0x132e	; 0x132e <__vector_49>
      c8:	0c 94 cf 09 	jmp	0x139e	; 0x139e <__vector_50>
      cc:	0c 94 07 0a 	jmp	0x140e	; 0x140e <__vector_51>
      d0:	0c 94 3f 0a 	jmp	0x147e	; 0x147e <__vector_52>
      d4:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <__vector_53>
      d8:	0c 94 af 0a 	jmp	0x155e	; 0x155e <__vector_54>
      dc:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__vector_55>
      e0:	0c 94 1f 0b 	jmp	0x163e	; 0x163e <__vector_56>
      e4:	fe c0       	rjmp	.+508    	; 0x2e2 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	fc c0       	rjmp	.+504    	; 0x2e2 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	fa c0       	rjmp	.+500    	; 0x2e2 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	f8 c0       	rjmp	.+496    	; 0x2e2 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	f6 c0       	rjmp	.+492    	; 0x2e2 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	f4 c0       	rjmp	.+488    	; 0x2e2 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	f2 c0       	rjmp	.+484    	; 0x2e2 <__bad_interrupt>
      fe:	00 00       	nop
     100:	f0 c0       	rjmp	.+480    	; 0x2e2 <__bad_interrupt>
     102:	00 00       	nop
     104:	ee c0       	rjmp	.+476    	; 0x2e2 <__bad_interrupt>
     106:	00 00       	nop
     108:	ec c0       	rjmp	.+472    	; 0x2e2 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	ea c0       	rjmp	.+468    	; 0x2e2 <__bad_interrupt>
     10e:	00 00       	nop
     110:	e8 c0       	rjmp	.+464    	; 0x2e2 <__bad_interrupt>
     112:	00 00       	nop
     114:	e6 c0       	rjmp	.+460    	; 0x2e2 <__bad_interrupt>
     116:	00 00       	nop
     118:	e4 c0       	rjmp	.+456    	; 0x2e2 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	4f c1       	rjmp	.+670    	; 0x3bc <__vector_71>
     11e:	00 00       	nop
     120:	8a c1       	rjmp	.+788    	; 0x436 <__vector_72>
     122:	00 00       	nop
     124:	c5 c1       	rjmp	.+906    	; 0x4b0 <__vector_73>
     126:	00 00       	nop
     128:	00 c2       	rjmp	.+1024   	; 0x52a <__vector_74>
     12a:	00 00       	nop
     12c:	da c0       	rjmp	.+436    	; 0x2e2 <__bad_interrupt>
     12e:	00 00       	nop
     130:	d8 c0       	rjmp	.+432    	; 0x2e2 <__bad_interrupt>
     132:	00 00       	nop
     134:	5c c6       	rjmp	.+3256   	; 0xdee <__vector_77>
     136:	00 00       	nop
     138:	92 c6       	rjmp	.+3364   	; 0xe5e <__vector_78>
     13a:	00 00       	nop
     13c:	c8 c6       	rjmp	.+3472   	; 0xece <__vector_79>
     13e:	00 00       	nop
     140:	fe c6       	rjmp	.+3580   	; 0xf3e <__vector_80>
     142:	00 00       	nop
     144:	34 c7       	rjmp	.+3688   	; 0xfae <__vector_81>
     146:	00 00       	nop
     148:	6a c7       	rjmp	.+3796   	; 0x101e <__vector_82>
     14a:	00 00       	nop
     14c:	a0 c7       	rjmp	.+3904   	; 0x108e <__vector_83>
     14e:	00 00       	nop
     150:	d6 c7       	rjmp	.+4012   	; 0x10fe <__vector_84>
     152:	00 00       	nop
     154:	0c 94 b7 08 	jmp	0x116e	; 0x116e <__vector_85>
     158:	0c 94 ef 08 	jmp	0x11de	; 0x11de <__vector_86>
     15c:	c2 c0       	rjmp	.+388    	; 0x2e2 <__bad_interrupt>
     15e:	00 00       	nop
     160:	c0 c0       	rjmp	.+384    	; 0x2e2 <__bad_interrupt>
     162:	00 00       	nop
     164:	be c0       	rjmp	.+380    	; 0x2e2 <__bad_interrupt>
     166:	00 00       	nop
     168:	bc c0       	rjmp	.+376    	; 0x2e2 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	ba c0       	rjmp	.+372    	; 0x2e2 <__bad_interrupt>
     16e:	00 00       	nop
     170:	b8 c0       	rjmp	.+368    	; 0x2e2 <__bad_interrupt>
     172:	00 00       	nop
     174:	b6 c0       	rjmp	.+364    	; 0x2e2 <__bad_interrupt>
     176:	00 00       	nop
     178:	b4 c0       	rjmp	.+360    	; 0x2e2 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	b2 c0       	rjmp	.+356    	; 0x2e2 <__bad_interrupt>
     17e:	00 00       	nop
     180:	b0 c0       	rjmp	.+352    	; 0x2e2 <__bad_interrupt>
     182:	00 00       	nop
     184:	ae c0       	rjmp	.+348    	; 0x2e2 <__bad_interrupt>
     186:	00 00       	nop
     188:	ac c0       	rjmp	.+344    	; 0x2e2 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	aa c0       	rjmp	.+340    	; 0x2e2 <__bad_interrupt>
     18e:	00 00       	nop
     190:	a8 c0       	rjmp	.+336    	; 0x2e2 <__bad_interrupt>
     192:	00 00       	nop
     194:	a6 c0       	rjmp	.+332    	; 0x2e2 <__bad_interrupt>
     196:	00 00       	nop
     198:	a4 c0       	rjmp	.+328    	; 0x2e2 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	a2 c0       	rjmp	.+324    	; 0x2e2 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	a0 c0       	rjmp	.+320    	; 0x2e2 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	9e c0       	rjmp	.+316    	; 0x2e2 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	9c c0       	rjmp	.+312    	; 0x2e2 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	9a c0       	rjmp	.+308    	; 0x2e2 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 57 0b 	jmp	0x16ae	; 0x16ae <__vector_108>
     1b4:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <__vector_109>
     1b8:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__vector_110>
     1bc:	0c 94 ff 0b 	jmp	0x17fe	; 0x17fe <__vector_111>
     1c0:	0c 94 37 0c 	jmp	0x186e	; 0x186e <__vector_112>
     1c4:	0c 94 6f 0c 	jmp	0x18de	; 0x18de <__vector_113>
     1c8:	0c 94 a7 0c 	jmp	0x194e	; 0x194e <__vector_114>
     1cc:	0c 94 df 0c 	jmp	0x19be	; 0x19be <__vector_115>
     1d0:	0c 94 17 0d 	jmp	0x1a2e	; 0x1a2e <__vector_116>
     1d4:	0c 94 4f 0d 	jmp	0x1a9e	; 0x1a9e <__vector_117>
     1d8:	84 c0       	rjmp	.+264    	; 0x2e2 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	82 c0       	rjmp	.+260    	; 0x2e2 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	80 c0       	rjmp	.+256    	; 0x2e2 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	7e c0       	rjmp	.+252    	; 0x2e2 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	7c c0       	rjmp	.+248    	; 0x2e2 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	7a c0       	rjmp	.+244    	; 0x2e2 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	78 c0       	rjmp	.+240    	; 0x2e2 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	76 c0       	rjmp	.+236    	; 0x2e2 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	74 c0       	rjmp	.+232    	; 0x2e2 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	f2 18       	sub	r15, r2
     1fe:	18 19       	sub	r17, r8
     200:	67 19       	sub	r22, r7
     202:	85 19       	sub	r24, r5
     204:	8d 19       	sub	r24, r13
     206:	9d 19       	sub	r25, r13
     208:	ad 19       	sub	r26, r13
     20a:	e3 19       	sub	r30, r3
     20c:	ed 19       	sub	r30, r13
     20e:	f0 19       	sub	r31, r0
     210:	f4 19       	sub	r31, r4
     212:	f8 19       	sub	r31, r8
     214:	07 63       	ori	r16, 0x37	; 55
     216:	42 36       	cpi	r20, 0x62	; 98
     218:	b7 9b       	sbis	0x16, 7	; 22
     21a:	d8 a7       	std	Y+40, r29	; 0x28
     21c:	1a 39       	cpi	r17, 0x9A	; 154
     21e:	68 56       	subi	r22, 0x68	; 104
     220:	18 ae       	std	Y+56, r1	; 0x38
     222:	ba ab       	std	Y+50, r27	; 0x32
     224:	55 8c       	ldd	r5, Z+29	; 0x1d
     226:	1d 3c       	cpi	r17, 0xCD	; 205
     228:	b7 cc       	rjmp	.-1682   	; 0xfffffb98 <__eeprom_end+0xff7efb98>
     22a:	57 63       	ori	r21, 0x37	; 55
     22c:	bd 6d       	ori	r27, 0xDD	; 221
     22e:	ed fd       	.word	0xfded	; ????
     230:	75 3e       	cpi	r23, 0xE5	; 229
     232:	f6 17       	cp	r31, r22
     234:	72 31       	cpi	r23, 0x12	; 18
     236:	bf 00       	.word	0x00bf	; ????
     238:	00 00       	nop
     23a:	80 3f       	cpi	r24, 0xF0	; 240
     23c:	08 00       	.word	0x0008	; ????
     23e:	00 00       	nop
     240:	be 92       	st	-X, r11
     242:	24 49       	sbci	r18, 0x94	; 148
     244:	12 3e       	cpi	r17, 0xE2	; 226
     246:	ab aa       	std	Y+51, r10	; 0x33
     248:	aa 2a       	or	r10, r26
     24a:	be cd       	rjmp	.-1156   	; 0xfffffdc8 <__eeprom_end+0xff7efdc8>
     24c:	cc cc       	rjmp	.-1640   	; 0xfffffbe6 <__eeprom_end+0xff7efbe6>
     24e:	4c 3e       	cpi	r20, 0xEC	; 236
     250:	00 00       	nop
     252:	00 80       	ld	r0, Z
     254:	be ab       	std	Y+54, r27	; 0x36
     256:	aa aa       	std	Y+50, r10	; 0x32
     258:	aa 3e       	cpi	r26, 0xEA	; 234
     25a:	00 00       	nop
     25c:	00 00       	nop
     25e:	bf 00       	.word	0x00bf	; ????
     260:	00 00       	nop
     262:	80 3f       	cpi	r24, 0xF0	; 240
     264:	00 00       	nop
     266:	00 00       	nop
     268:	00 08       	sbc	r0, r0
     26a:	41 78       	andi	r20, 0x81	; 129
     26c:	d3 bb       	out	0x13, r29	; 19
     26e:	43 87       	std	Z+11, r20	; 0x0b
     270:	d1 13       	cpse	r29, r17
     272:	3d 19       	sub	r19, r13
     274:	0e 3c       	cpi	r16, 0xCE	; 206
     276:	c3 bd       	out	0x23, r28	; 35
     278:	42 82       	std	Z+2, r4	; 0x02
     27a:	ad 2b       	or	r26, r29
     27c:	3e 68       	ori	r19, 0x8E	; 142
     27e:	ec 82       	std	Y+4, r14	; 0x04
     280:	76 be       	out	0x36, r7	; 54
     282:	d9 8f       	std	Y+25, r29	; 0x19
     284:	e1 a9       	ldd	r30, Z+49	; 0x31
     286:	3e 4c       	sbci	r19, 0xCE	; 206
     288:	80 ef       	ldi	r24, 0xF0	; 240
     28a:	ff be       	out	0x3f, r15	; 63
     28c:	01 c4       	rjmp	.+2050   	; 0xa90 <__vector_16+0x22>
     28e:	ff 7f       	andi	r31, 0xFF	; 255
     290:	3f 00       	.word	0x003f	; ????
     292:	00 00       	nop
	...

00000296 <__ctors_end>:
     296:	11 24       	eor	r1, r1
     298:	1f be       	out	0x3f, r1	; 63
     29a:	cf ef       	ldi	r28, 0xFF	; 255
     29c:	cd bf       	out	0x3d, r28	; 61
     29e:	df e3       	ldi	r29, 0x3F	; 63
     2a0:	de bf       	out	0x3e, r29	; 62
     2a2:	00 e0       	ldi	r16, 0x00	; 0
     2a4:	0c bf       	out	0x3c, r16	; 60
     2a6:	18 be       	out	0x38, r1	; 56
     2a8:	19 be       	out	0x39, r1	; 57
     2aa:	1a be       	out	0x3a, r1	; 58
     2ac:	1b be       	out	0x3b, r1	; 59

000002ae <__do_copy_data>:
     2ae:	12 e2       	ldi	r17, 0x22	; 34
     2b0:	a0 e0       	ldi	r26, 0x00	; 0
     2b2:	b0 e2       	ldi	r27, 0x20	; 32
     2b4:	e2 ef       	ldi	r30, 0xF2	; 242
     2b6:	f0 e4       	ldi	r31, 0x40	; 64
     2b8:	00 e0       	ldi	r16, 0x00	; 0
     2ba:	0b bf       	out	0x3b, r16	; 59
     2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <__do_copy_data+0x14>
     2be:	07 90       	elpm	r0, Z+
     2c0:	0d 92       	st	X+, r0
     2c2:	ac 3b       	cpi	r26, 0xBC	; 188
     2c4:	b1 07       	cpc	r27, r17
     2c6:	d9 f7       	brne	.-10     	; 0x2be <__do_copy_data+0x10>
     2c8:	1b be       	out	0x3b, r1	; 59

000002ca <__do_clear_bss>:
     2ca:	25 e2       	ldi	r18, 0x25	; 37
     2cc:	ac eb       	ldi	r26, 0xBC	; 188
     2ce:	b2 e2       	ldi	r27, 0x22	; 34
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <.do_clear_bss_start>

000002d2 <.do_clear_bss_loop>:
     2d2:	1d 92       	st	X+, r1

000002d4 <.do_clear_bss_start>:
     2d4:	aa 34       	cpi	r26, 0x4A	; 74
     2d6:	b2 07       	cpc	r27, r18
     2d8:	e1 f7       	brne	.-8      	; 0x2d2 <.do_clear_bss_loop>
     2da:	0e 94 3f 1a 	call	0x347e	; 0x347e <main>
     2de:	0c 94 77 20 	jmp	0x40ee	; 0x40ee <_exit>

000002e2 <__bad_interrupt>:
     2e2:	8e ce       	rjmp	.-740    	; 0x0 <__vectors>

000002e4 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     2e4:	81 15       	cp	r24, r1
     2e6:	22 e0       	ldi	r18, 0x02	; 2
     2e8:	92 07       	cpc	r25, r18
     2ea:	69 f4       	brne	.+26     	; 0x306 <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     2ec:	80 91 bd 22 	lds	r24, 0x22BD	; 0x8022bd <adca_enable_count>
     2f0:	91 e0       	ldi	r25, 0x01	; 1
     2f2:	98 0f       	add	r25, r24
     2f4:	90 93 bd 22 	sts	0x22BD, r25	; 0x8022bd <adca_enable_count>
     2f8:	81 11       	cpse	r24, r1
     2fa:	14 c0       	rjmp	.+40     	; 0x324 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     2fc:	62 e0       	ldi	r22, 0x02	; 2
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	0c 94 41 11 	jmp	0x2282	; 0x2282 <sysclk_enable_module>
     304:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     306:	80 34       	cpi	r24, 0x40	; 64
     308:	92 40       	sbci	r25, 0x02	; 2
     30a:	61 f4       	brne	.+24     	; 0x324 <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     30c:	80 91 bc 22 	lds	r24, 0x22BC	; 0x8022bc <__data_end>
     310:	91 e0       	ldi	r25, 0x01	; 1
     312:	98 0f       	add	r25, r24
     314:	90 93 bc 22 	sts	0x22BC, r25	; 0x8022bc <__data_end>
     318:	81 11       	cpse	r24, r1
     31a:	04 c0       	rjmp	.+8      	; 0x324 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     31c:	62 e0       	ldi	r22, 0x02	; 2
     31e:	82 e0       	ldi	r24, 0x02	; 2
     320:	0c 94 41 11 	jmp	0x2282	; 0x2282 <sysclk_enable_module>
     324:	08 95       	ret

00000326 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     326:	81 15       	cp	r24, r1
     328:	22 e0       	ldi	r18, 0x02	; 2
     32a:	92 07       	cpc	r25, r18
     32c:	61 f4       	brne	.+24     	; 0x346 <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     32e:	80 91 bd 22 	lds	r24, 0x22BD	; 0x8022bd <adca_enable_count>
     332:	81 50       	subi	r24, 0x01	; 1
     334:	80 93 bd 22 	sts	0x22BD, r24	; 0x8022bd <adca_enable_count>
     338:	81 11       	cpse	r24, r1
     33a:	13 c0       	rjmp	.+38     	; 0x362 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     33c:	62 e0       	ldi	r22, 0x02	; 2
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <sysclk_disable_module>
     344:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     346:	80 34       	cpi	r24, 0x40	; 64
     348:	92 40       	sbci	r25, 0x02	; 2
     34a:	59 f4       	brne	.+22     	; 0x362 <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     34c:	80 91 bc 22 	lds	r24, 0x22BC	; 0x8022bc <__data_end>
     350:	81 50       	subi	r24, 0x01	; 1
     352:	80 93 bc 22 	sts	0x22BC, r24	; 0x8022bc <__data_end>
     356:	81 11       	cpse	r24, r1
     358:	04 c0       	rjmp	.+8      	; 0x362 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     35a:	62 e0       	ldi	r22, 0x02	; 2
     35c:	82 e0       	ldi	r24, 0x02	; 2
     35e:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <sysclk_disable_module>
     362:	08 95       	ret

00000364 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     364:	ef 92       	push	r14
     366:	ff 92       	push	r15
     368:	1f 93       	push	r17
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	1f 92       	push	r1
     370:	1f 92       	push	r1
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62
     376:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     378:	8f b7       	in	r24, 0x3f	; 63
     37a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     37c:	f8 94       	cli
	return flags;
     37e:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     380:	c7 01       	movw	r24, r14
     382:	b0 df       	rcall	.-160    	; 0x2e4 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     384:	f7 01       	movw	r30, r14
     386:	80 81       	ld	r24, Z
     388:	81 60       	ori	r24, 0x01	; 1
     38a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     38c:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     38e:	80 91 9f 24 	lds	r24, 0x249F	; 0x80249f <sleepmgr_locks+0x1>
     392:	8f 3f       	cpi	r24, 0xFF	; 255
     394:	09 f4       	brne	.+2      	; 0x398 <adc_enable+0x34>
     396:	ff cf       	rjmp	.-2      	; 0x396 <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     398:	8f b7       	in	r24, 0x3f	; 63
     39a:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     39c:	f8 94       	cli
	return flags;
     39e:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     3a0:	ee e9       	ldi	r30, 0x9E	; 158
     3a2:	f4 e2       	ldi	r31, 0x24	; 36
     3a4:	81 81       	ldd	r24, Z+1	; 0x01
     3a6:	8f 5f       	subi	r24, 0xFF	; 255
     3a8:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3aa:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     3ac:	0f 90       	pop	r0
     3ae:	0f 90       	pop	r0
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	1f 91       	pop	r17
     3b6:	ff 90       	pop	r15
     3b8:	ef 90       	pop	r14
     3ba:	08 95       	ret

000003bc <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     3bc:	1f 92       	push	r1
     3be:	0f 92       	push	r0
     3c0:	0f b6       	in	r0, 0x3f	; 63
     3c2:	0f 92       	push	r0
     3c4:	11 24       	eor	r1, r1
     3c6:	08 b6       	in	r0, 0x38	; 56
     3c8:	0f 92       	push	r0
     3ca:	18 be       	out	0x38, r1	; 56
     3cc:	09 b6       	in	r0, 0x39	; 57
     3ce:	0f 92       	push	r0
     3d0:	19 be       	out	0x39, r1	; 57
     3d2:	0b b6       	in	r0, 0x3b	; 59
     3d4:	0f 92       	push	r0
     3d6:	1b be       	out	0x3b, r1	; 59
     3d8:	2f 93       	push	r18
     3da:	3f 93       	push	r19
     3dc:	4f 93       	push	r20
     3de:	5f 93       	push	r21
     3e0:	6f 93       	push	r22
     3e2:	7f 93       	push	r23
     3e4:	8f 93       	push	r24
     3e6:	9f 93       	push	r25
     3e8:	af 93       	push	r26
     3ea:	bf 93       	push	r27
     3ec:	ef 93       	push	r30
     3ee:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     3f0:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     3f4:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     3f8:	e0 91 a6 24 	lds	r30, 0x24A6	; 0x8024a6 <adca_callback>
     3fc:	f0 91 a7 24 	lds	r31, 0x24A7	; 0x8024a7 <adca_callback+0x1>
     400:	61 e0       	ldi	r22, 0x01	; 1
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	92 e0       	ldi	r25, 0x02	; 2
     406:	19 95       	eicall
}
     408:	ff 91       	pop	r31
     40a:	ef 91       	pop	r30
     40c:	bf 91       	pop	r27
     40e:	af 91       	pop	r26
     410:	9f 91       	pop	r25
     412:	8f 91       	pop	r24
     414:	7f 91       	pop	r23
     416:	6f 91       	pop	r22
     418:	5f 91       	pop	r21
     41a:	4f 91       	pop	r20
     41c:	3f 91       	pop	r19
     41e:	2f 91       	pop	r18
     420:	0f 90       	pop	r0
     422:	0b be       	out	0x3b, r0	; 59
     424:	0f 90       	pop	r0
     426:	09 be       	out	0x39, r0	; 57
     428:	0f 90       	pop	r0
     42a:	08 be       	out	0x38, r0	; 56
     42c:	0f 90       	pop	r0
     42e:	0f be       	out	0x3f, r0	; 63
     430:	0f 90       	pop	r0
     432:	1f 90       	pop	r1
     434:	18 95       	reti

00000436 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     436:	1f 92       	push	r1
     438:	0f 92       	push	r0
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	0f 92       	push	r0
     43e:	11 24       	eor	r1, r1
     440:	08 b6       	in	r0, 0x38	; 56
     442:	0f 92       	push	r0
     444:	18 be       	out	0x38, r1	; 56
     446:	09 b6       	in	r0, 0x39	; 57
     448:	0f 92       	push	r0
     44a:	19 be       	out	0x39, r1	; 57
     44c:	0b b6       	in	r0, 0x3b	; 59
     44e:	0f 92       	push	r0
     450:	1b be       	out	0x3b, r1	; 59
     452:	2f 93       	push	r18
     454:	3f 93       	push	r19
     456:	4f 93       	push	r20
     458:	5f 93       	push	r21
     45a:	6f 93       	push	r22
     45c:	7f 93       	push	r23
     45e:	8f 93       	push	r24
     460:	9f 93       	push	r25
     462:	af 93       	push	r26
     464:	bf 93       	push	r27
     466:	ef 93       	push	r30
     468:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     46a:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     46e:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     472:	e0 91 a6 24 	lds	r30, 0x24A6	; 0x8024a6 <adca_callback>
     476:	f0 91 a7 24 	lds	r31, 0x24A7	; 0x8024a7 <adca_callback+0x1>
     47a:	62 e0       	ldi	r22, 0x02	; 2
     47c:	80 e0       	ldi	r24, 0x00	; 0
     47e:	92 e0       	ldi	r25, 0x02	; 2
     480:	19 95       	eicall
}
     482:	ff 91       	pop	r31
     484:	ef 91       	pop	r30
     486:	bf 91       	pop	r27
     488:	af 91       	pop	r26
     48a:	9f 91       	pop	r25
     48c:	8f 91       	pop	r24
     48e:	7f 91       	pop	r23
     490:	6f 91       	pop	r22
     492:	5f 91       	pop	r21
     494:	4f 91       	pop	r20
     496:	3f 91       	pop	r19
     498:	2f 91       	pop	r18
     49a:	0f 90       	pop	r0
     49c:	0b be       	out	0x3b, r0	; 59
     49e:	0f 90       	pop	r0
     4a0:	09 be       	out	0x39, r0	; 57
     4a2:	0f 90       	pop	r0
     4a4:	08 be       	out	0x38, r0	; 56
     4a6:	0f 90       	pop	r0
     4a8:	0f be       	out	0x3f, r0	; 63
     4aa:	0f 90       	pop	r0
     4ac:	1f 90       	pop	r1
     4ae:	18 95       	reti

000004b0 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     4b0:	1f 92       	push	r1
     4b2:	0f 92       	push	r0
     4b4:	0f b6       	in	r0, 0x3f	; 63
     4b6:	0f 92       	push	r0
     4b8:	11 24       	eor	r1, r1
     4ba:	08 b6       	in	r0, 0x38	; 56
     4bc:	0f 92       	push	r0
     4be:	18 be       	out	0x38, r1	; 56
     4c0:	09 b6       	in	r0, 0x39	; 57
     4c2:	0f 92       	push	r0
     4c4:	19 be       	out	0x39, r1	; 57
     4c6:	0b b6       	in	r0, 0x3b	; 59
     4c8:	0f 92       	push	r0
     4ca:	1b be       	out	0x3b, r1	; 59
     4cc:	2f 93       	push	r18
     4ce:	3f 93       	push	r19
     4d0:	4f 93       	push	r20
     4d2:	5f 93       	push	r21
     4d4:	6f 93       	push	r22
     4d6:	7f 93       	push	r23
     4d8:	8f 93       	push	r24
     4da:	9f 93       	push	r25
     4dc:	af 93       	push	r26
     4de:	bf 93       	push	r27
     4e0:	ef 93       	push	r30
     4e2:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     4e4:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     4e8:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     4ec:	e0 91 a6 24 	lds	r30, 0x24A6	; 0x8024a6 <adca_callback>
     4f0:	f0 91 a7 24 	lds	r31, 0x24A7	; 0x8024a7 <adca_callback+0x1>
     4f4:	64 e0       	ldi	r22, 0x04	; 4
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	92 e0       	ldi	r25, 0x02	; 2
     4fa:	19 95       	eicall
}
     4fc:	ff 91       	pop	r31
     4fe:	ef 91       	pop	r30
     500:	bf 91       	pop	r27
     502:	af 91       	pop	r26
     504:	9f 91       	pop	r25
     506:	8f 91       	pop	r24
     508:	7f 91       	pop	r23
     50a:	6f 91       	pop	r22
     50c:	5f 91       	pop	r21
     50e:	4f 91       	pop	r20
     510:	3f 91       	pop	r19
     512:	2f 91       	pop	r18
     514:	0f 90       	pop	r0
     516:	0b be       	out	0x3b, r0	; 59
     518:	0f 90       	pop	r0
     51a:	09 be       	out	0x39, r0	; 57
     51c:	0f 90       	pop	r0
     51e:	08 be       	out	0x38, r0	; 56
     520:	0f 90       	pop	r0
     522:	0f be       	out	0x3f, r0	; 63
     524:	0f 90       	pop	r0
     526:	1f 90       	pop	r1
     528:	18 95       	reti

0000052a <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     52a:	1f 92       	push	r1
     52c:	0f 92       	push	r0
     52e:	0f b6       	in	r0, 0x3f	; 63
     530:	0f 92       	push	r0
     532:	11 24       	eor	r1, r1
     534:	08 b6       	in	r0, 0x38	; 56
     536:	0f 92       	push	r0
     538:	18 be       	out	0x38, r1	; 56
     53a:	09 b6       	in	r0, 0x39	; 57
     53c:	0f 92       	push	r0
     53e:	19 be       	out	0x39, r1	; 57
     540:	0b b6       	in	r0, 0x3b	; 59
     542:	0f 92       	push	r0
     544:	1b be       	out	0x3b, r1	; 59
     546:	2f 93       	push	r18
     548:	3f 93       	push	r19
     54a:	4f 93       	push	r20
     54c:	5f 93       	push	r21
     54e:	6f 93       	push	r22
     550:	7f 93       	push	r23
     552:	8f 93       	push	r24
     554:	9f 93       	push	r25
     556:	af 93       	push	r26
     558:	bf 93       	push	r27
     55a:	ef 93       	push	r30
     55c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     55e:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     562:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     566:	e0 91 a6 24 	lds	r30, 0x24A6	; 0x8024a6 <adca_callback>
     56a:	f0 91 a7 24 	lds	r31, 0x24A7	; 0x8024a7 <adca_callback+0x1>
     56e:	68 e0       	ldi	r22, 0x08	; 8
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	92 e0       	ldi	r25, 0x02	; 2
     574:	19 95       	eicall
}
     576:	ff 91       	pop	r31
     578:	ef 91       	pop	r30
     57a:	bf 91       	pop	r27
     57c:	af 91       	pop	r26
     57e:	9f 91       	pop	r25
     580:	8f 91       	pop	r24
     582:	7f 91       	pop	r23
     584:	6f 91       	pop	r22
     586:	5f 91       	pop	r21
     588:	4f 91       	pop	r20
     58a:	3f 91       	pop	r19
     58c:	2f 91       	pop	r18
     58e:	0f 90       	pop	r0
     590:	0b be       	out	0x3b, r0	; 59
     592:	0f 90       	pop	r0
     594:	09 be       	out	0x39, r0	; 57
     596:	0f 90       	pop	r0
     598:	08 be       	out	0x38, r0	; 56
     59a:	0f 90       	pop	r0
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	0f 90       	pop	r0
     5a0:	1f 90       	pop	r1
     5a2:	18 95       	reti

000005a4 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     5a4:	1f 92       	push	r1
     5a6:	0f 92       	push	r0
     5a8:	0f b6       	in	r0, 0x3f	; 63
     5aa:	0f 92       	push	r0
     5ac:	11 24       	eor	r1, r1
     5ae:	08 b6       	in	r0, 0x38	; 56
     5b0:	0f 92       	push	r0
     5b2:	18 be       	out	0x38, r1	; 56
     5b4:	09 b6       	in	r0, 0x39	; 57
     5b6:	0f 92       	push	r0
     5b8:	19 be       	out	0x39, r1	; 57
     5ba:	0b b6       	in	r0, 0x3b	; 59
     5bc:	0f 92       	push	r0
     5be:	1b be       	out	0x3b, r1	; 59
     5c0:	2f 93       	push	r18
     5c2:	3f 93       	push	r19
     5c4:	4f 93       	push	r20
     5c6:	5f 93       	push	r21
     5c8:	6f 93       	push	r22
     5ca:	7f 93       	push	r23
     5cc:	8f 93       	push	r24
     5ce:	9f 93       	push	r25
     5d0:	af 93       	push	r26
     5d2:	bf 93       	push	r27
     5d4:	ef 93       	push	r30
     5d6:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     5d8:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     5dc:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     5e0:	e0 91 a4 24 	lds	r30, 0x24A4	; 0x8024a4 <adcb_callback>
     5e4:	f0 91 a5 24 	lds	r31, 0x24A5	; 0x8024a5 <adcb_callback+0x1>
     5e8:	61 e0       	ldi	r22, 0x01	; 1
     5ea:	80 e4       	ldi	r24, 0x40	; 64
     5ec:	92 e0       	ldi	r25, 0x02	; 2
     5ee:	19 95       	eicall
}
     5f0:	ff 91       	pop	r31
     5f2:	ef 91       	pop	r30
     5f4:	bf 91       	pop	r27
     5f6:	af 91       	pop	r26
     5f8:	9f 91       	pop	r25
     5fa:	8f 91       	pop	r24
     5fc:	7f 91       	pop	r23
     5fe:	6f 91       	pop	r22
     600:	5f 91       	pop	r21
     602:	4f 91       	pop	r20
     604:	3f 91       	pop	r19
     606:	2f 91       	pop	r18
     608:	0f 90       	pop	r0
     60a:	0b be       	out	0x3b, r0	; 59
     60c:	0f 90       	pop	r0
     60e:	09 be       	out	0x39, r0	; 57
     610:	0f 90       	pop	r0
     612:	08 be       	out	0x38, r0	; 56
     614:	0f 90       	pop	r0
     616:	0f be       	out	0x3f, r0	; 63
     618:	0f 90       	pop	r0
     61a:	1f 90       	pop	r1
     61c:	18 95       	reti

0000061e <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     61e:	1f 92       	push	r1
     620:	0f 92       	push	r0
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	0f 92       	push	r0
     626:	11 24       	eor	r1, r1
     628:	08 b6       	in	r0, 0x38	; 56
     62a:	0f 92       	push	r0
     62c:	18 be       	out	0x38, r1	; 56
     62e:	09 b6       	in	r0, 0x39	; 57
     630:	0f 92       	push	r0
     632:	19 be       	out	0x39, r1	; 57
     634:	0b b6       	in	r0, 0x3b	; 59
     636:	0f 92       	push	r0
     638:	1b be       	out	0x3b, r1	; 59
     63a:	2f 93       	push	r18
     63c:	3f 93       	push	r19
     63e:	4f 93       	push	r20
     640:	5f 93       	push	r21
     642:	6f 93       	push	r22
     644:	7f 93       	push	r23
     646:	8f 93       	push	r24
     648:	9f 93       	push	r25
     64a:	af 93       	push	r26
     64c:	bf 93       	push	r27
     64e:	ef 93       	push	r30
     650:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     652:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     656:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     65a:	e0 91 a4 24 	lds	r30, 0x24A4	; 0x8024a4 <adcb_callback>
     65e:	f0 91 a5 24 	lds	r31, 0x24A5	; 0x8024a5 <adcb_callback+0x1>
     662:	62 e0       	ldi	r22, 0x02	; 2
     664:	80 e4       	ldi	r24, 0x40	; 64
     666:	92 e0       	ldi	r25, 0x02	; 2
     668:	19 95       	eicall
}
     66a:	ff 91       	pop	r31
     66c:	ef 91       	pop	r30
     66e:	bf 91       	pop	r27
     670:	af 91       	pop	r26
     672:	9f 91       	pop	r25
     674:	8f 91       	pop	r24
     676:	7f 91       	pop	r23
     678:	6f 91       	pop	r22
     67a:	5f 91       	pop	r21
     67c:	4f 91       	pop	r20
     67e:	3f 91       	pop	r19
     680:	2f 91       	pop	r18
     682:	0f 90       	pop	r0
     684:	0b be       	out	0x3b, r0	; 59
     686:	0f 90       	pop	r0
     688:	09 be       	out	0x39, r0	; 57
     68a:	0f 90       	pop	r0
     68c:	08 be       	out	0x38, r0	; 56
     68e:	0f 90       	pop	r0
     690:	0f be       	out	0x3f, r0	; 63
     692:	0f 90       	pop	r0
     694:	1f 90       	pop	r1
     696:	18 95       	reti

00000698 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     698:	1f 92       	push	r1
     69a:	0f 92       	push	r0
     69c:	0f b6       	in	r0, 0x3f	; 63
     69e:	0f 92       	push	r0
     6a0:	11 24       	eor	r1, r1
     6a2:	08 b6       	in	r0, 0x38	; 56
     6a4:	0f 92       	push	r0
     6a6:	18 be       	out	0x38, r1	; 56
     6a8:	09 b6       	in	r0, 0x39	; 57
     6aa:	0f 92       	push	r0
     6ac:	19 be       	out	0x39, r1	; 57
     6ae:	0b b6       	in	r0, 0x3b	; 59
     6b0:	0f 92       	push	r0
     6b2:	1b be       	out	0x3b, r1	; 59
     6b4:	2f 93       	push	r18
     6b6:	3f 93       	push	r19
     6b8:	4f 93       	push	r20
     6ba:	5f 93       	push	r21
     6bc:	6f 93       	push	r22
     6be:	7f 93       	push	r23
     6c0:	8f 93       	push	r24
     6c2:	9f 93       	push	r25
     6c4:	af 93       	push	r26
     6c6:	bf 93       	push	r27
     6c8:	ef 93       	push	r30
     6ca:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     6cc:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     6d0:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     6d4:	e0 91 a4 24 	lds	r30, 0x24A4	; 0x8024a4 <adcb_callback>
     6d8:	f0 91 a5 24 	lds	r31, 0x24A5	; 0x8024a5 <adcb_callback+0x1>
     6dc:	64 e0       	ldi	r22, 0x04	; 4
     6de:	80 e4       	ldi	r24, 0x40	; 64
     6e0:	92 e0       	ldi	r25, 0x02	; 2
     6e2:	19 95       	eicall
}
     6e4:	ff 91       	pop	r31
     6e6:	ef 91       	pop	r30
     6e8:	bf 91       	pop	r27
     6ea:	af 91       	pop	r26
     6ec:	9f 91       	pop	r25
     6ee:	8f 91       	pop	r24
     6f0:	7f 91       	pop	r23
     6f2:	6f 91       	pop	r22
     6f4:	5f 91       	pop	r21
     6f6:	4f 91       	pop	r20
     6f8:	3f 91       	pop	r19
     6fa:	2f 91       	pop	r18
     6fc:	0f 90       	pop	r0
     6fe:	0b be       	out	0x3b, r0	; 59
     700:	0f 90       	pop	r0
     702:	09 be       	out	0x39, r0	; 57
     704:	0f 90       	pop	r0
     706:	08 be       	out	0x38, r0	; 56
     708:	0f 90       	pop	r0
     70a:	0f be       	out	0x3f, r0	; 63
     70c:	0f 90       	pop	r0
     70e:	1f 90       	pop	r1
     710:	18 95       	reti

00000712 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     712:	1f 92       	push	r1
     714:	0f 92       	push	r0
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	0f 92       	push	r0
     71a:	11 24       	eor	r1, r1
     71c:	08 b6       	in	r0, 0x38	; 56
     71e:	0f 92       	push	r0
     720:	18 be       	out	0x38, r1	; 56
     722:	09 b6       	in	r0, 0x39	; 57
     724:	0f 92       	push	r0
     726:	19 be       	out	0x39, r1	; 57
     728:	0b b6       	in	r0, 0x3b	; 59
     72a:	0f 92       	push	r0
     72c:	1b be       	out	0x3b, r1	; 59
     72e:	2f 93       	push	r18
     730:	3f 93       	push	r19
     732:	4f 93       	push	r20
     734:	5f 93       	push	r21
     736:	6f 93       	push	r22
     738:	7f 93       	push	r23
     73a:	8f 93       	push	r24
     73c:	9f 93       	push	r25
     73e:	af 93       	push	r26
     740:	bf 93       	push	r27
     742:	ef 93       	push	r30
     744:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     746:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     74a:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     74e:	e0 91 a4 24 	lds	r30, 0x24A4	; 0x8024a4 <adcb_callback>
     752:	f0 91 a5 24 	lds	r31, 0x24A5	; 0x8024a5 <adcb_callback+0x1>
     756:	68 e0       	ldi	r22, 0x08	; 8
     758:	80 e4       	ldi	r24, 0x40	; 64
     75a:	92 e0       	ldi	r25, 0x02	; 2
     75c:	19 95       	eicall
}
     75e:	ff 91       	pop	r31
     760:	ef 91       	pop	r30
     762:	bf 91       	pop	r27
     764:	af 91       	pop	r26
     766:	9f 91       	pop	r25
     768:	8f 91       	pop	r24
     76a:	7f 91       	pop	r23
     76c:	6f 91       	pop	r22
     76e:	5f 91       	pop	r21
     770:	4f 91       	pop	r20
     772:	3f 91       	pop	r19
     774:	2f 91       	pop	r18
     776:	0f 90       	pop	r0
     778:	0b be       	out	0x3b, r0	; 59
     77a:	0f 90       	pop	r0
     77c:	09 be       	out	0x39, r0	; 57
     77e:	0f 90       	pop	r0
     780:	08 be       	out	0x38, r0	; 56
     782:	0f 90       	pop	r0
     784:	0f be       	out	0x3f, r0	; 63
     786:	0f 90       	pop	r0
     788:	1f 90       	pop	r1
     78a:	18 95       	reti

0000078c <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
     78c:	bf 92       	push	r11
     78e:	cf 92       	push	r12
     790:	df 92       	push	r13
     792:	ef 92       	push	r14
     794:	ff 92       	push	r15
     796:	0f 93       	push	r16
     798:	1f 93       	push	r17
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	1f 92       	push	r1
     7a0:	cd b7       	in	r28, 0x3d	; 61
     7a2:	de b7       	in	r29, 0x3e	; 62
     7a4:	8c 01       	movw	r16, r24
     7a6:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     7a8:	81 15       	cp	r24, r1
     7aa:	22 e0       	ldi	r18, 0x02	; 2
     7ac:	92 07       	cpc	r25, r18
     7ae:	81 f4       	brne	.+32     	; 0x7d0 <adc_write_configuration+0x44>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     7b0:	61 e2       	ldi	r22, 0x21	; 33
     7b2:	70 e0       	ldi	r23, 0x00	; 0
     7b4:	82 e0       	ldi	r24, 0x02	; 2
     7b6:	0e 94 b8 11 	call	0x2370	; 0x2370 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     7ba:	c8 2e       	mov	r12, r24
     7bc:	d1 2c       	mov	r13, r1
     7be:	60 e2       	ldi	r22, 0x20	; 32
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	82 e0       	ldi	r24, 0x02	; 2
     7c4:	0e 94 b8 11 	call	0x2370	; 0x2370 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
     7c8:	dc 2c       	mov	r13, r12
     7ca:	cc 24       	eor	r12, r12
     7cc:	c8 2a       	or	r12, r24
     7ce:	12 c0       	rjmp	.+36     	; 0x7f4 <adc_write_configuration+0x68>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     7d0:	80 34       	cpi	r24, 0x40	; 64
     7d2:	92 40       	sbci	r25, 0x02	; 2
     7d4:	d1 f5       	brne	.+116    	; 0x84a <adc_write_configuration+0xbe>
     7d6:	65 e2       	ldi	r22, 0x25	; 37
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	82 e0       	ldi	r24, 0x02	; 2
     7dc:	0e 94 b8 11 	call	0x2370	; 0x2370 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
     7e0:	c8 2e       	mov	r12, r24
     7e2:	d1 2c       	mov	r13, r1
     7e4:	64 e2       	ldi	r22, 0x24	; 36
     7e6:	70 e0       	ldi	r23, 0x00	; 0
     7e8:	82 e0       	ldi	r24, 0x02	; 2
     7ea:	0e 94 b8 11 	call	0x2370	; 0x2370 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
     7ee:	dc 2c       	mov	r13, r12
     7f0:	cc 24       	eor	r12, r12
     7f2:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     7f4:	8f b7       	in	r24, 0x3f	; 63
     7f6:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     7f8:	f8 94       	cli
	return flags;
     7fa:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
     7fc:	c8 01       	movw	r24, r16
     7fe:	72 dd       	rcall	.-1308   	; 0x2e4 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
     800:	f8 01       	movw	r30, r16
     802:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
     804:	92 e0       	ldi	r25, 0x02	; 2
     806:	90 83       	st	Z, r25
	adc->CAL = cal;
     808:	c4 86       	std	Z+12, r12	; 0x0c
     80a:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
     80c:	f7 01       	movw	r30, r14
     80e:	25 81       	ldd	r18, Z+5	; 0x05
     810:	36 81       	ldd	r19, Z+6	; 0x06
     812:	f8 01       	movw	r30, r16
     814:	20 8f       	std	Z+24, r18	; 0x18
     816:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
     818:	f7 01       	movw	r30, r14
     81a:	92 81       	ldd	r25, Z+2	; 0x02
     81c:	f8 01       	movw	r30, r16
     81e:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
     820:	f7 01       	movw	r30, r14
     822:	94 81       	ldd	r25, Z+4	; 0x04
     824:	f8 01       	movw	r30, r16
     826:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
     828:	f7 01       	movw	r30, r14
     82a:	93 81       	ldd	r25, Z+3	; 0x03
     82c:	f8 01       	movw	r30, r16
     82e:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
     830:	f7 01       	movw	r30, r14
     832:	91 81       	ldd	r25, Z+1	; 0x01
     834:	f8 01       	movw	r30, r16
     836:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
     838:	81 70       	andi	r24, 0x01	; 1
     83a:	f7 01       	movw	r30, r14
     83c:	90 81       	ld	r25, Z
     83e:	89 2b       	or	r24, r25
     840:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
     842:	80 83       	st	Z, r24
     844:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     846:	6f dd       	rcall	.-1314   	; 0x326 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     848:	bf be       	out	0x3f, r11	; 63
     84a:	0f 90       	pop	r0
     84c:	df 91       	pop	r29
     84e:	cf 91       	pop	r28
     850:	1f 91       	pop	r17
     852:	0f 91       	pop	r16
     854:	ff 90       	pop	r15
     856:	ef 90       	pop	r14
     858:	df 90       	pop	r13
     85a:	cf 90       	pop	r12
     85c:	bf 90       	pop	r11
     85e:	08 95       	ret

00000860 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
     860:	df 92       	push	r13
     862:	ef 92       	push	r14
     864:	ff 92       	push	r15
     866:	0f 93       	push	r16
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	1f 92       	push	r1
     870:	cd b7       	in	r28, 0x3d	; 61
     872:	de b7       	in	r29, 0x3e	; 62
     874:	8c 01       	movw	r16, r24
     876:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     878:	8f b7       	in	r24, 0x3f	; 63
     87a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     87c:	f8 94       	cli
	return flags;
     87e:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
     880:	c8 01       	movw	r24, r16
     882:	30 dd       	rcall	.-1440   	; 0x2e4 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
     884:	f8 01       	movw	r30, r16
     886:	80 81       	ld	r24, Z
     888:	80 7c       	andi	r24, 0xC0	; 192
     88a:	f7 01       	movw	r30, r14
     88c:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
     88e:	f8 01       	movw	r30, r16
     890:	80 8d       	ldd	r24, Z+24	; 0x18
     892:	91 8d       	ldd	r25, Z+25	; 0x19
     894:	f7 01       	movw	r30, r14
     896:	85 83       	std	Z+5, r24	; 0x05
     898:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
     89a:	f8 01       	movw	r30, r16
     89c:	82 81       	ldd	r24, Z+2	; 0x02
     89e:	f7 01       	movw	r30, r14
     8a0:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
     8a2:	f8 01       	movw	r30, r16
     8a4:	84 81       	ldd	r24, Z+4	; 0x04
     8a6:	f7 01       	movw	r30, r14
     8a8:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
     8aa:	f8 01       	movw	r30, r16
     8ac:	83 81       	ldd	r24, Z+3	; 0x03
     8ae:	f7 01       	movw	r30, r14
     8b0:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
     8b2:	f8 01       	movw	r30, r16
     8b4:	81 81       	ldd	r24, Z+1	; 0x01
     8b6:	f7 01       	movw	r30, r14

	adc_disable_clock(adc);
     8b8:	81 83       	std	Z+1, r24	; 0x01
     8ba:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     8bc:	34 dd       	rcall	.-1432   	; 0x326 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     8be:	df be       	out	0x3f, r13	; 63
     8c0:	0f 90       	pop	r0
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	1f 91       	pop	r17
     8c8:	0f 91       	pop	r16
     8ca:	ff 90       	pop	r15
     8cc:	ef 90       	pop	r14
     8ce:	df 90       	pop	r13
     8d0:	08 95       	ret

000008d2 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
     8d2:	af 92       	push	r10
     8d4:	bf 92       	push	r11
     8d6:	cf 92       	push	r12
     8d8:	df 92       	push	r13
     8da:	ef 92       	push	r14
     8dc:	ff 92       	push	r15
     8de:	0f 93       	push	r16
     8e0:	1f 93       	push	r17
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	1f 92       	push	r1
     8e8:	cd b7       	in	r28, 0x3d	; 61
     8ea:	de b7       	in	r29, 0x3e	; 62
     8ec:	6c 01       	movw	r12, r24
     8ee:	b6 2e       	mov	r11, r22
     8f0:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     8f2:	86 2f       	mov	r24, r22
     8f4:	83 70       	andi	r24, 0x03	; 3
     8f6:	29 f4       	brne	.+10     	; 0x902 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     8f8:	96 2f       	mov	r25, r22
     8fa:	96 95       	lsr	r25
     8fc:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     8fe:	82 e0       	ldi	r24, 0x02	; 2
     900:	02 c0       	rjmp	.+4      	; 0x906 <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     902:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     904:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     906:	90 ff       	sbrs	r25, 0
		index++;
     908:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     90a:	86 01       	movw	r16, r12
     90c:	00 5e       	subi	r16, 0xE0	; 224
     90e:	1f 4f       	sbci	r17, 0xFF	; 255
     910:	98 e0       	ldi	r25, 0x08	; 8
     912:	89 9f       	mul	r24, r25
     914:	00 0d       	add	r16, r0
     916:	11 1d       	adc	r17, r1
     918:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     91a:	8f b7       	in	r24, 0x3f	; 63
     91c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     91e:	f8 94       	cli
	return flags;
     920:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
     922:	c6 01       	movw	r24, r12
     924:	df dc       	rcall	.-1602   	; 0x2e4 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
     926:	f7 01       	movw	r30, r14
     928:	80 81       	ld	r24, Z
     92a:	f8 01       	movw	r30, r16
     92c:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
     92e:	f7 01       	movw	r30, r14
     930:	82 81       	ldd	r24, Z+2	; 0x02
     932:	f8 01       	movw	r30, r16
     934:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
     936:	f7 01       	movw	r30, r14
     938:	81 81       	ldd	r24, Z+1	; 0x01
     93a:	f8 01       	movw	r30, r16
     93c:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     93e:	b0 fe       	sbrs	r11, 0
     940:	04 c0       	rjmp	.+8      	; 0x94a <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
     942:	f7 01       	movw	r30, r14
     944:	83 81       	ldd	r24, Z+3	; 0x03
     946:	f8 01       	movw	r30, r16
	}
	adc_disable_clock(adc);
     948:	86 83       	std	Z+6, r24	; 0x06
     94a:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     94c:	ec dc       	rcall	.-1576   	; 0x326 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     94e:	af be       	out	0x3f, r10	; 63
     950:	0f 90       	pop	r0
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	1f 91       	pop	r17
     958:	0f 91       	pop	r16
     95a:	ff 90       	pop	r15
     95c:	ef 90       	pop	r14
     95e:	df 90       	pop	r13
     960:	cf 90       	pop	r12
     962:	bf 90       	pop	r11
     964:	af 90       	pop	r10
     966:	08 95       	ret

00000968 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
     968:	af 92       	push	r10
     96a:	bf 92       	push	r11
     96c:	cf 92       	push	r12
     96e:	df 92       	push	r13
     970:	ef 92       	push	r14
     972:	ff 92       	push	r15
     974:	0f 93       	push	r16
     976:	1f 93       	push	r17
     978:	cf 93       	push	r28
     97a:	df 93       	push	r29
     97c:	1f 92       	push	r1
     97e:	cd b7       	in	r28, 0x3d	; 61
     980:	de b7       	in	r29, 0x3e	; 62
     982:	6c 01       	movw	r12, r24
     984:	b6 2e       	mov	r11, r22
     986:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     988:	86 2f       	mov	r24, r22
     98a:	83 70       	andi	r24, 0x03	; 3
     98c:	29 f4       	brne	.+10     	; 0x998 <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     98e:	96 2f       	mov	r25, r22
     990:	96 95       	lsr	r25
     992:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     994:	82 e0       	ldi	r24, 0x02	; 2
     996:	02 c0       	rjmp	.+4      	; 0x99c <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     998:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     99a:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     99c:	90 ff       	sbrs	r25, 0
		index++;
     99e:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     9a0:	86 01       	movw	r16, r12
     9a2:	00 5e       	subi	r16, 0xE0	; 224
     9a4:	1f 4f       	sbci	r17, 0xFF	; 255
     9a6:	98 e0       	ldi	r25, 0x08	; 8
     9a8:	89 9f       	mul	r24, r25
     9aa:	00 0d       	add	r16, r0
     9ac:	11 1d       	adc	r17, r1
     9ae:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     9b0:	8f b7       	in	r24, 0x3f	; 63
     9b2:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     9b4:	f8 94       	cli
	return flags;
     9b6:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
     9b8:	c6 01       	movw	r24, r12
     9ba:	94 dc       	rcall	.-1752   	; 0x2e4 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
     9bc:	f8 01       	movw	r30, r16
     9be:	80 81       	ld	r24, Z
     9c0:	f7 01       	movw	r30, r14
     9c2:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
     9c4:	f8 01       	movw	r30, r16
     9c6:	82 81       	ldd	r24, Z+2	; 0x02
     9c8:	f7 01       	movw	r30, r14
     9ca:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
     9cc:	f8 01       	movw	r30, r16
     9ce:	81 81       	ldd	r24, Z+1	; 0x01
     9d0:	f7 01       	movw	r30, r14
     9d2:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     9d4:	b0 fe       	sbrs	r11, 0
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
     9d8:	f8 01       	movw	r30, r16
     9da:	86 81       	ldd	r24, Z+6	; 0x06
     9dc:	f7 01       	movw	r30, r14
	}
	adc_disable_clock(adc);
     9de:	83 83       	std	Z+3, r24	; 0x03
     9e0:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     9e2:	a1 dc       	rcall	.-1726   	; 0x326 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     9e4:	af be       	out	0x3f, r10	; 63
     9e6:	0f 90       	pop	r0
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	1f 91       	pop	r17
     9ee:	0f 91       	pop	r16
     9f0:	ff 90       	pop	r15
     9f2:	ef 90       	pop	r14
     9f4:	df 90       	pop	r13
     9f6:	cf 90       	pop	r12
     9f8:	bf 90       	pop	r11
     9fa:	af 90       	pop	r10
     9fc:	08 95       	ret

000009fe <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     9fe:	1f 92       	push	r1
     a00:	0f 92       	push	r0
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	0f 92       	push	r0
     a06:	11 24       	eor	r1, r1
     a08:	08 b6       	in	r0, 0x38	; 56
     a0a:	0f 92       	push	r0
     a0c:	18 be       	out	0x38, r1	; 56
     a0e:	09 b6       	in	r0, 0x39	; 57
     a10:	0f 92       	push	r0
     a12:	19 be       	out	0x39, r1	; 57
     a14:	0b b6       	in	r0, 0x3b	; 59
     a16:	0f 92       	push	r0
     a18:	1b be       	out	0x3b, r1	; 59
     a1a:	2f 93       	push	r18
     a1c:	3f 93       	push	r19
     a1e:	4f 93       	push	r20
     a20:	5f 93       	push	r21
     a22:	6f 93       	push	r22
     a24:	7f 93       	push	r23
     a26:	8f 93       	push	r24
     a28:	9f 93       	push	r25
     a2a:	af 93       	push	r26
     a2c:	bf 93       	push	r27
     a2e:	ef 93       	push	r30
     a30:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     a32:	e0 91 0a 23 	lds	r30, 0x230A	; 0x80230a <tc_tcc0_err_callback>
     a36:	f0 91 0b 23 	lds	r31, 0x230B	; 0x80230b <tc_tcc0_err_callback+0x1>
     a3a:	30 97       	sbiw	r30, 0x00	; 0
     a3c:	09 f0       	breq	.+2      	; 0xa40 <__vector_15+0x42>
		tc_tcc0_err_callback();
     a3e:	19 95       	eicall
	}
}
     a40:	ff 91       	pop	r31
     a42:	ef 91       	pop	r30
     a44:	bf 91       	pop	r27
     a46:	af 91       	pop	r26
     a48:	9f 91       	pop	r25
     a4a:	8f 91       	pop	r24
     a4c:	7f 91       	pop	r23
     a4e:	6f 91       	pop	r22
     a50:	5f 91       	pop	r21
     a52:	4f 91       	pop	r20
     a54:	3f 91       	pop	r19
     a56:	2f 91       	pop	r18
     a58:	0f 90       	pop	r0
     a5a:	0b be       	out	0x3b, r0	; 59
     a5c:	0f 90       	pop	r0
     a5e:	09 be       	out	0x39, r0	; 57
     a60:	0f 90       	pop	r0
     a62:	08 be       	out	0x38, r0	; 56
     a64:	0f 90       	pop	r0
     a66:	0f be       	out	0x3f, r0	; 63
     a68:	0f 90       	pop	r0
     a6a:	1f 90       	pop	r1
     a6c:	18 95       	reti

00000a6e <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     a6e:	1f 92       	push	r1
     a70:	0f 92       	push	r0
     a72:	0f b6       	in	r0, 0x3f	; 63
     a74:	0f 92       	push	r0
     a76:	11 24       	eor	r1, r1
     a78:	08 b6       	in	r0, 0x38	; 56
     a7a:	0f 92       	push	r0
     a7c:	18 be       	out	0x38, r1	; 56
     a7e:	09 b6       	in	r0, 0x39	; 57
     a80:	0f 92       	push	r0
     a82:	19 be       	out	0x39, r1	; 57
     a84:	0b b6       	in	r0, 0x3b	; 59
     a86:	0f 92       	push	r0
     a88:	1b be       	out	0x3b, r1	; 59
     a8a:	2f 93       	push	r18
     a8c:	3f 93       	push	r19
     a8e:	4f 93       	push	r20
     a90:	5f 93       	push	r21
     a92:	6f 93       	push	r22
     a94:	7f 93       	push	r23
     a96:	8f 93       	push	r24
     a98:	9f 93       	push	r25
     a9a:	af 93       	push	r26
     a9c:	bf 93       	push	r27
     a9e:	ef 93       	push	r30
     aa0:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     aa2:	e0 91 08 23 	lds	r30, 0x2308	; 0x802308 <tc_tcc0_cca_callback>
     aa6:	f0 91 09 23 	lds	r31, 0x2309	; 0x802309 <tc_tcc0_cca_callback+0x1>
     aaa:	30 97       	sbiw	r30, 0x00	; 0
     aac:	09 f0       	breq	.+2      	; 0xab0 <__vector_16+0x42>
		tc_tcc0_cca_callback();
     aae:	19 95       	eicall
	}
}
     ab0:	ff 91       	pop	r31
     ab2:	ef 91       	pop	r30
     ab4:	bf 91       	pop	r27
     ab6:	af 91       	pop	r26
     ab8:	9f 91       	pop	r25
     aba:	8f 91       	pop	r24
     abc:	7f 91       	pop	r23
     abe:	6f 91       	pop	r22
     ac0:	5f 91       	pop	r21
     ac2:	4f 91       	pop	r20
     ac4:	3f 91       	pop	r19
     ac6:	2f 91       	pop	r18
     ac8:	0f 90       	pop	r0
     aca:	0b be       	out	0x3b, r0	; 59
     acc:	0f 90       	pop	r0
     ace:	09 be       	out	0x39, r0	; 57
     ad0:	0f 90       	pop	r0
     ad2:	08 be       	out	0x38, r0	; 56
     ad4:	0f 90       	pop	r0
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	0f 90       	pop	r0
     ada:	1f 90       	pop	r1
     adc:	18 95       	reti

00000ade <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     ade:	1f 92       	push	r1
     ae0:	0f 92       	push	r0
     ae2:	0f b6       	in	r0, 0x3f	; 63
     ae4:	0f 92       	push	r0
     ae6:	11 24       	eor	r1, r1
     ae8:	08 b6       	in	r0, 0x38	; 56
     aea:	0f 92       	push	r0
     aec:	18 be       	out	0x38, r1	; 56
     aee:	09 b6       	in	r0, 0x39	; 57
     af0:	0f 92       	push	r0
     af2:	19 be       	out	0x39, r1	; 57
     af4:	0b b6       	in	r0, 0x3b	; 59
     af6:	0f 92       	push	r0
     af8:	1b be       	out	0x3b, r1	; 59
     afa:	2f 93       	push	r18
     afc:	3f 93       	push	r19
     afe:	4f 93       	push	r20
     b00:	5f 93       	push	r21
     b02:	6f 93       	push	r22
     b04:	7f 93       	push	r23
     b06:	8f 93       	push	r24
     b08:	9f 93       	push	r25
     b0a:	af 93       	push	r26
     b0c:	bf 93       	push	r27
     b0e:	ef 93       	push	r30
     b10:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     b12:	e0 91 06 23 	lds	r30, 0x2306	; 0x802306 <tc_tcc0_ccb_callback>
     b16:	f0 91 07 23 	lds	r31, 0x2307	; 0x802307 <tc_tcc0_ccb_callback+0x1>
     b1a:	30 97       	sbiw	r30, 0x00	; 0
     b1c:	09 f0       	breq	.+2      	; 0xb20 <__vector_17+0x42>
		tc_tcc0_ccb_callback();
     b1e:	19 95       	eicall
	}
}
     b20:	ff 91       	pop	r31
     b22:	ef 91       	pop	r30
     b24:	bf 91       	pop	r27
     b26:	af 91       	pop	r26
     b28:	9f 91       	pop	r25
     b2a:	8f 91       	pop	r24
     b2c:	7f 91       	pop	r23
     b2e:	6f 91       	pop	r22
     b30:	5f 91       	pop	r21
     b32:	4f 91       	pop	r20
     b34:	3f 91       	pop	r19
     b36:	2f 91       	pop	r18
     b38:	0f 90       	pop	r0
     b3a:	0b be       	out	0x3b, r0	; 59
     b3c:	0f 90       	pop	r0
     b3e:	09 be       	out	0x39, r0	; 57
     b40:	0f 90       	pop	r0
     b42:	08 be       	out	0x38, r0	; 56
     b44:	0f 90       	pop	r0
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	0f 90       	pop	r0
     b4a:	1f 90       	pop	r1
     b4c:	18 95       	reti

00000b4e <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     b4e:	1f 92       	push	r1
     b50:	0f 92       	push	r0
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	0f 92       	push	r0
     b56:	11 24       	eor	r1, r1
     b58:	08 b6       	in	r0, 0x38	; 56
     b5a:	0f 92       	push	r0
     b5c:	18 be       	out	0x38, r1	; 56
     b5e:	09 b6       	in	r0, 0x39	; 57
     b60:	0f 92       	push	r0
     b62:	19 be       	out	0x39, r1	; 57
     b64:	0b b6       	in	r0, 0x3b	; 59
     b66:	0f 92       	push	r0
     b68:	1b be       	out	0x3b, r1	; 59
     b6a:	2f 93       	push	r18
     b6c:	3f 93       	push	r19
     b6e:	4f 93       	push	r20
     b70:	5f 93       	push	r21
     b72:	6f 93       	push	r22
     b74:	7f 93       	push	r23
     b76:	8f 93       	push	r24
     b78:	9f 93       	push	r25
     b7a:	af 93       	push	r26
     b7c:	bf 93       	push	r27
     b7e:	ef 93       	push	r30
     b80:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     b82:	e0 91 04 23 	lds	r30, 0x2304	; 0x802304 <tc_tcc0_ccc_callback>
     b86:	f0 91 05 23 	lds	r31, 0x2305	; 0x802305 <tc_tcc0_ccc_callback+0x1>
     b8a:	30 97       	sbiw	r30, 0x00	; 0
     b8c:	09 f0       	breq	.+2      	; 0xb90 <__vector_18+0x42>
		tc_tcc0_ccc_callback();
     b8e:	19 95       	eicall
	}
}
     b90:	ff 91       	pop	r31
     b92:	ef 91       	pop	r30
     b94:	bf 91       	pop	r27
     b96:	af 91       	pop	r26
     b98:	9f 91       	pop	r25
     b9a:	8f 91       	pop	r24
     b9c:	7f 91       	pop	r23
     b9e:	6f 91       	pop	r22
     ba0:	5f 91       	pop	r21
     ba2:	4f 91       	pop	r20
     ba4:	3f 91       	pop	r19
     ba6:	2f 91       	pop	r18
     ba8:	0f 90       	pop	r0
     baa:	0b be       	out	0x3b, r0	; 59
     bac:	0f 90       	pop	r0
     bae:	09 be       	out	0x39, r0	; 57
     bb0:	0f 90       	pop	r0
     bb2:	08 be       	out	0x38, r0	; 56
     bb4:	0f 90       	pop	r0
     bb6:	0f be       	out	0x3f, r0	; 63
     bb8:	0f 90       	pop	r0
     bba:	1f 90       	pop	r1
     bbc:	18 95       	reti

00000bbe <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     bbe:	1f 92       	push	r1
     bc0:	0f 92       	push	r0
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	0f 92       	push	r0
     bc6:	11 24       	eor	r1, r1
     bc8:	08 b6       	in	r0, 0x38	; 56
     bca:	0f 92       	push	r0
     bcc:	18 be       	out	0x38, r1	; 56
     bce:	09 b6       	in	r0, 0x39	; 57
     bd0:	0f 92       	push	r0
     bd2:	19 be       	out	0x39, r1	; 57
     bd4:	0b b6       	in	r0, 0x3b	; 59
     bd6:	0f 92       	push	r0
     bd8:	1b be       	out	0x3b, r1	; 59
     bda:	2f 93       	push	r18
     bdc:	3f 93       	push	r19
     bde:	4f 93       	push	r20
     be0:	5f 93       	push	r21
     be2:	6f 93       	push	r22
     be4:	7f 93       	push	r23
     be6:	8f 93       	push	r24
     be8:	9f 93       	push	r25
     bea:	af 93       	push	r26
     bec:	bf 93       	push	r27
     bee:	ef 93       	push	r30
     bf0:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     bf2:	e0 91 02 23 	lds	r30, 0x2302	; 0x802302 <tc_tcc0_ccd_callback>
     bf6:	f0 91 03 23 	lds	r31, 0x2303	; 0x802303 <tc_tcc0_ccd_callback+0x1>
     bfa:	30 97       	sbiw	r30, 0x00	; 0
     bfc:	09 f0       	breq	.+2      	; 0xc00 <__vector_19+0x42>
		tc_tcc0_ccd_callback();
     bfe:	19 95       	eicall
	}
}
     c00:	ff 91       	pop	r31
     c02:	ef 91       	pop	r30
     c04:	bf 91       	pop	r27
     c06:	af 91       	pop	r26
     c08:	9f 91       	pop	r25
     c0a:	8f 91       	pop	r24
     c0c:	7f 91       	pop	r23
     c0e:	6f 91       	pop	r22
     c10:	5f 91       	pop	r21
     c12:	4f 91       	pop	r20
     c14:	3f 91       	pop	r19
     c16:	2f 91       	pop	r18
     c18:	0f 90       	pop	r0
     c1a:	0b be       	out	0x3b, r0	; 59
     c1c:	0f 90       	pop	r0
     c1e:	09 be       	out	0x39, r0	; 57
     c20:	0f 90       	pop	r0
     c22:	08 be       	out	0x38, r0	; 56
     c24:	0f 90       	pop	r0
     c26:	0f be       	out	0x3f, r0	; 63
     c28:	0f 90       	pop	r0
     c2a:	1f 90       	pop	r1
     c2c:	18 95       	reti

00000c2e <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     c2e:	1f 92       	push	r1
     c30:	0f 92       	push	r0
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	0f 92       	push	r0
     c36:	11 24       	eor	r1, r1
     c38:	08 b6       	in	r0, 0x38	; 56
     c3a:	0f 92       	push	r0
     c3c:	18 be       	out	0x38, r1	; 56
     c3e:	09 b6       	in	r0, 0x39	; 57
     c40:	0f 92       	push	r0
     c42:	19 be       	out	0x39, r1	; 57
     c44:	0b b6       	in	r0, 0x3b	; 59
     c46:	0f 92       	push	r0
     c48:	1b be       	out	0x3b, r1	; 59
     c4a:	2f 93       	push	r18
     c4c:	3f 93       	push	r19
     c4e:	4f 93       	push	r20
     c50:	5f 93       	push	r21
     c52:	6f 93       	push	r22
     c54:	7f 93       	push	r23
     c56:	8f 93       	push	r24
     c58:	9f 93       	push	r25
     c5a:	af 93       	push	r26
     c5c:	bf 93       	push	r27
     c5e:	ef 93       	push	r30
     c60:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     c62:	e0 91 00 23 	lds	r30, 0x2300	; 0x802300 <tc_tcc1_ovf_callback>
     c66:	f0 91 01 23 	lds	r31, 0x2301	; 0x802301 <tc_tcc1_ovf_callback+0x1>
     c6a:	30 97       	sbiw	r30, 0x00	; 0
     c6c:	09 f0       	breq	.+2      	; 0xc70 <__vector_20+0x42>
		tc_tcc1_ovf_callback();
     c6e:	19 95       	eicall
	}
}
     c70:	ff 91       	pop	r31
     c72:	ef 91       	pop	r30
     c74:	bf 91       	pop	r27
     c76:	af 91       	pop	r26
     c78:	9f 91       	pop	r25
     c7a:	8f 91       	pop	r24
     c7c:	7f 91       	pop	r23
     c7e:	6f 91       	pop	r22
     c80:	5f 91       	pop	r21
     c82:	4f 91       	pop	r20
     c84:	3f 91       	pop	r19
     c86:	2f 91       	pop	r18
     c88:	0f 90       	pop	r0
     c8a:	0b be       	out	0x3b, r0	; 59
     c8c:	0f 90       	pop	r0
     c8e:	09 be       	out	0x39, r0	; 57
     c90:	0f 90       	pop	r0
     c92:	08 be       	out	0x38, r0	; 56
     c94:	0f 90       	pop	r0
     c96:	0f be       	out	0x3f, r0	; 63
     c98:	0f 90       	pop	r0
     c9a:	1f 90       	pop	r1
     c9c:	18 95       	reti

00000c9e <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     c9e:	1f 92       	push	r1
     ca0:	0f 92       	push	r0
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	0f 92       	push	r0
     ca6:	11 24       	eor	r1, r1
     ca8:	08 b6       	in	r0, 0x38	; 56
     caa:	0f 92       	push	r0
     cac:	18 be       	out	0x38, r1	; 56
     cae:	09 b6       	in	r0, 0x39	; 57
     cb0:	0f 92       	push	r0
     cb2:	19 be       	out	0x39, r1	; 57
     cb4:	0b b6       	in	r0, 0x3b	; 59
     cb6:	0f 92       	push	r0
     cb8:	1b be       	out	0x3b, r1	; 59
     cba:	2f 93       	push	r18
     cbc:	3f 93       	push	r19
     cbe:	4f 93       	push	r20
     cc0:	5f 93       	push	r21
     cc2:	6f 93       	push	r22
     cc4:	7f 93       	push	r23
     cc6:	8f 93       	push	r24
     cc8:	9f 93       	push	r25
     cca:	af 93       	push	r26
     ccc:	bf 93       	push	r27
     cce:	ef 93       	push	r30
     cd0:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     cd2:	e0 91 fe 22 	lds	r30, 0x22FE	; 0x8022fe <tc_tcc1_err_callback>
     cd6:	f0 91 ff 22 	lds	r31, 0x22FF	; 0x8022ff <tc_tcc1_err_callback+0x1>
     cda:	30 97       	sbiw	r30, 0x00	; 0
     cdc:	09 f0       	breq	.+2      	; 0xce0 <__vector_21+0x42>
		tc_tcc1_err_callback();
     cde:	19 95       	eicall
	}
}
     ce0:	ff 91       	pop	r31
     ce2:	ef 91       	pop	r30
     ce4:	bf 91       	pop	r27
     ce6:	af 91       	pop	r26
     ce8:	9f 91       	pop	r25
     cea:	8f 91       	pop	r24
     cec:	7f 91       	pop	r23
     cee:	6f 91       	pop	r22
     cf0:	5f 91       	pop	r21
     cf2:	4f 91       	pop	r20
     cf4:	3f 91       	pop	r19
     cf6:	2f 91       	pop	r18
     cf8:	0f 90       	pop	r0
     cfa:	0b be       	out	0x3b, r0	; 59
     cfc:	0f 90       	pop	r0
     cfe:	09 be       	out	0x39, r0	; 57
     d00:	0f 90       	pop	r0
     d02:	08 be       	out	0x38, r0	; 56
     d04:	0f 90       	pop	r0
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	0f 90       	pop	r0
     d0a:	1f 90       	pop	r1
     d0c:	18 95       	reti

00000d0e <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     d0e:	1f 92       	push	r1
     d10:	0f 92       	push	r0
     d12:	0f b6       	in	r0, 0x3f	; 63
     d14:	0f 92       	push	r0
     d16:	11 24       	eor	r1, r1
     d18:	08 b6       	in	r0, 0x38	; 56
     d1a:	0f 92       	push	r0
     d1c:	18 be       	out	0x38, r1	; 56
     d1e:	09 b6       	in	r0, 0x39	; 57
     d20:	0f 92       	push	r0
     d22:	19 be       	out	0x39, r1	; 57
     d24:	0b b6       	in	r0, 0x3b	; 59
     d26:	0f 92       	push	r0
     d28:	1b be       	out	0x3b, r1	; 59
     d2a:	2f 93       	push	r18
     d2c:	3f 93       	push	r19
     d2e:	4f 93       	push	r20
     d30:	5f 93       	push	r21
     d32:	6f 93       	push	r22
     d34:	7f 93       	push	r23
     d36:	8f 93       	push	r24
     d38:	9f 93       	push	r25
     d3a:	af 93       	push	r26
     d3c:	bf 93       	push	r27
     d3e:	ef 93       	push	r30
     d40:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     d42:	e0 91 fc 22 	lds	r30, 0x22FC	; 0x8022fc <tc_tcc1_cca_callback>
     d46:	f0 91 fd 22 	lds	r31, 0x22FD	; 0x8022fd <tc_tcc1_cca_callback+0x1>
     d4a:	30 97       	sbiw	r30, 0x00	; 0
     d4c:	09 f0       	breq	.+2      	; 0xd50 <__vector_22+0x42>
		tc_tcc1_cca_callback();
     d4e:	19 95       	eicall
	}
}
     d50:	ff 91       	pop	r31
     d52:	ef 91       	pop	r30
     d54:	bf 91       	pop	r27
     d56:	af 91       	pop	r26
     d58:	9f 91       	pop	r25
     d5a:	8f 91       	pop	r24
     d5c:	7f 91       	pop	r23
     d5e:	6f 91       	pop	r22
     d60:	5f 91       	pop	r21
     d62:	4f 91       	pop	r20
     d64:	3f 91       	pop	r19
     d66:	2f 91       	pop	r18
     d68:	0f 90       	pop	r0
     d6a:	0b be       	out	0x3b, r0	; 59
     d6c:	0f 90       	pop	r0
     d6e:	09 be       	out	0x39, r0	; 57
     d70:	0f 90       	pop	r0
     d72:	08 be       	out	0x38, r0	; 56
     d74:	0f 90       	pop	r0
     d76:	0f be       	out	0x3f, r0	; 63
     d78:	0f 90       	pop	r0
     d7a:	1f 90       	pop	r1
     d7c:	18 95       	reti

00000d7e <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     d7e:	1f 92       	push	r1
     d80:	0f 92       	push	r0
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	0f 92       	push	r0
     d86:	11 24       	eor	r1, r1
     d88:	08 b6       	in	r0, 0x38	; 56
     d8a:	0f 92       	push	r0
     d8c:	18 be       	out	0x38, r1	; 56
     d8e:	09 b6       	in	r0, 0x39	; 57
     d90:	0f 92       	push	r0
     d92:	19 be       	out	0x39, r1	; 57
     d94:	0b b6       	in	r0, 0x3b	; 59
     d96:	0f 92       	push	r0
     d98:	1b be       	out	0x3b, r1	; 59
     d9a:	2f 93       	push	r18
     d9c:	3f 93       	push	r19
     d9e:	4f 93       	push	r20
     da0:	5f 93       	push	r21
     da2:	6f 93       	push	r22
     da4:	7f 93       	push	r23
     da6:	8f 93       	push	r24
     da8:	9f 93       	push	r25
     daa:	af 93       	push	r26
     dac:	bf 93       	push	r27
     dae:	ef 93       	push	r30
     db0:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     db2:	e0 91 fa 22 	lds	r30, 0x22FA	; 0x8022fa <tc_tcc1_ccb_callback>
     db6:	f0 91 fb 22 	lds	r31, 0x22FB	; 0x8022fb <tc_tcc1_ccb_callback+0x1>
     dba:	30 97       	sbiw	r30, 0x00	; 0
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <__vector_23+0x42>
		tc_tcc1_ccb_callback();
     dbe:	19 95       	eicall
	}
}
     dc0:	ff 91       	pop	r31
     dc2:	ef 91       	pop	r30
     dc4:	bf 91       	pop	r27
     dc6:	af 91       	pop	r26
     dc8:	9f 91       	pop	r25
     dca:	8f 91       	pop	r24
     dcc:	7f 91       	pop	r23
     dce:	6f 91       	pop	r22
     dd0:	5f 91       	pop	r21
     dd2:	4f 91       	pop	r20
     dd4:	3f 91       	pop	r19
     dd6:	2f 91       	pop	r18
     dd8:	0f 90       	pop	r0
     dda:	0b be       	out	0x3b, r0	; 59
     ddc:	0f 90       	pop	r0
     dde:	09 be       	out	0x39, r0	; 57
     de0:	0f 90       	pop	r0
     de2:	08 be       	out	0x38, r0	; 56
     de4:	0f 90       	pop	r0
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	0f 90       	pop	r0
     dea:	1f 90       	pop	r1
     dec:	18 95       	reti

00000dee <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     dee:	1f 92       	push	r1
     df0:	0f 92       	push	r0
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	0f 92       	push	r0
     df6:	11 24       	eor	r1, r1
     df8:	08 b6       	in	r0, 0x38	; 56
     dfa:	0f 92       	push	r0
     dfc:	18 be       	out	0x38, r1	; 56
     dfe:	09 b6       	in	r0, 0x39	; 57
     e00:	0f 92       	push	r0
     e02:	19 be       	out	0x39, r1	; 57
     e04:	0b b6       	in	r0, 0x3b	; 59
     e06:	0f 92       	push	r0
     e08:	1b be       	out	0x3b, r1	; 59
     e0a:	2f 93       	push	r18
     e0c:	3f 93       	push	r19
     e0e:	4f 93       	push	r20
     e10:	5f 93       	push	r21
     e12:	6f 93       	push	r22
     e14:	7f 93       	push	r23
     e16:	8f 93       	push	r24
     e18:	9f 93       	push	r25
     e1a:	af 93       	push	r26
     e1c:	bf 93       	push	r27
     e1e:	ef 93       	push	r30
     e20:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     e22:	e0 91 f8 22 	lds	r30, 0x22F8	; 0x8022f8 <tc_tcd0_ovf_callback>
     e26:	f0 91 f9 22 	lds	r31, 0x22F9	; 0x8022f9 <tc_tcd0_ovf_callback+0x1>
     e2a:	30 97       	sbiw	r30, 0x00	; 0
     e2c:	09 f0       	breq	.+2      	; 0xe30 <__vector_77+0x42>
		tc_tcd0_ovf_callback();
     e2e:	19 95       	eicall
	}
}
     e30:	ff 91       	pop	r31
     e32:	ef 91       	pop	r30
     e34:	bf 91       	pop	r27
     e36:	af 91       	pop	r26
     e38:	9f 91       	pop	r25
     e3a:	8f 91       	pop	r24
     e3c:	7f 91       	pop	r23
     e3e:	6f 91       	pop	r22
     e40:	5f 91       	pop	r21
     e42:	4f 91       	pop	r20
     e44:	3f 91       	pop	r19
     e46:	2f 91       	pop	r18
     e48:	0f 90       	pop	r0
     e4a:	0b be       	out	0x3b, r0	; 59
     e4c:	0f 90       	pop	r0
     e4e:	09 be       	out	0x39, r0	; 57
     e50:	0f 90       	pop	r0
     e52:	08 be       	out	0x38, r0	; 56
     e54:	0f 90       	pop	r0
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	0f 90       	pop	r0
     e5a:	1f 90       	pop	r1
     e5c:	18 95       	reti

00000e5e <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     e5e:	1f 92       	push	r1
     e60:	0f 92       	push	r0
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	0f 92       	push	r0
     e66:	11 24       	eor	r1, r1
     e68:	08 b6       	in	r0, 0x38	; 56
     e6a:	0f 92       	push	r0
     e6c:	18 be       	out	0x38, r1	; 56
     e6e:	09 b6       	in	r0, 0x39	; 57
     e70:	0f 92       	push	r0
     e72:	19 be       	out	0x39, r1	; 57
     e74:	0b b6       	in	r0, 0x3b	; 59
     e76:	0f 92       	push	r0
     e78:	1b be       	out	0x3b, r1	; 59
     e7a:	2f 93       	push	r18
     e7c:	3f 93       	push	r19
     e7e:	4f 93       	push	r20
     e80:	5f 93       	push	r21
     e82:	6f 93       	push	r22
     e84:	7f 93       	push	r23
     e86:	8f 93       	push	r24
     e88:	9f 93       	push	r25
     e8a:	af 93       	push	r26
     e8c:	bf 93       	push	r27
     e8e:	ef 93       	push	r30
     e90:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     e92:	e0 91 f6 22 	lds	r30, 0x22F6	; 0x8022f6 <tc_tcd0_err_callback>
     e96:	f0 91 f7 22 	lds	r31, 0x22F7	; 0x8022f7 <tc_tcd0_err_callback+0x1>
     e9a:	30 97       	sbiw	r30, 0x00	; 0
     e9c:	09 f0       	breq	.+2      	; 0xea0 <__vector_78+0x42>
		tc_tcd0_err_callback();
     e9e:	19 95       	eicall
	}
}
     ea0:	ff 91       	pop	r31
     ea2:	ef 91       	pop	r30
     ea4:	bf 91       	pop	r27
     ea6:	af 91       	pop	r26
     ea8:	9f 91       	pop	r25
     eaa:	8f 91       	pop	r24
     eac:	7f 91       	pop	r23
     eae:	6f 91       	pop	r22
     eb0:	5f 91       	pop	r21
     eb2:	4f 91       	pop	r20
     eb4:	3f 91       	pop	r19
     eb6:	2f 91       	pop	r18
     eb8:	0f 90       	pop	r0
     eba:	0b be       	out	0x3b, r0	; 59
     ebc:	0f 90       	pop	r0
     ebe:	09 be       	out	0x39, r0	; 57
     ec0:	0f 90       	pop	r0
     ec2:	08 be       	out	0x38, r0	; 56
     ec4:	0f 90       	pop	r0
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	0f 90       	pop	r0
     eca:	1f 90       	pop	r1
     ecc:	18 95       	reti

00000ece <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     ece:	1f 92       	push	r1
     ed0:	0f 92       	push	r0
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	0f 92       	push	r0
     ed6:	11 24       	eor	r1, r1
     ed8:	08 b6       	in	r0, 0x38	; 56
     eda:	0f 92       	push	r0
     edc:	18 be       	out	0x38, r1	; 56
     ede:	09 b6       	in	r0, 0x39	; 57
     ee0:	0f 92       	push	r0
     ee2:	19 be       	out	0x39, r1	; 57
     ee4:	0b b6       	in	r0, 0x3b	; 59
     ee6:	0f 92       	push	r0
     ee8:	1b be       	out	0x3b, r1	; 59
     eea:	2f 93       	push	r18
     eec:	3f 93       	push	r19
     eee:	4f 93       	push	r20
     ef0:	5f 93       	push	r21
     ef2:	6f 93       	push	r22
     ef4:	7f 93       	push	r23
     ef6:	8f 93       	push	r24
     ef8:	9f 93       	push	r25
     efa:	af 93       	push	r26
     efc:	bf 93       	push	r27
     efe:	ef 93       	push	r30
     f00:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     f02:	e0 91 f4 22 	lds	r30, 0x22F4	; 0x8022f4 <tc_tcd0_cca_callback>
     f06:	f0 91 f5 22 	lds	r31, 0x22F5	; 0x8022f5 <tc_tcd0_cca_callback+0x1>
     f0a:	30 97       	sbiw	r30, 0x00	; 0
     f0c:	09 f0       	breq	.+2      	; 0xf10 <__vector_79+0x42>
		tc_tcd0_cca_callback();
     f0e:	19 95       	eicall
	}
}
     f10:	ff 91       	pop	r31
     f12:	ef 91       	pop	r30
     f14:	bf 91       	pop	r27
     f16:	af 91       	pop	r26
     f18:	9f 91       	pop	r25
     f1a:	8f 91       	pop	r24
     f1c:	7f 91       	pop	r23
     f1e:	6f 91       	pop	r22
     f20:	5f 91       	pop	r21
     f22:	4f 91       	pop	r20
     f24:	3f 91       	pop	r19
     f26:	2f 91       	pop	r18
     f28:	0f 90       	pop	r0
     f2a:	0b be       	out	0x3b, r0	; 59
     f2c:	0f 90       	pop	r0
     f2e:	09 be       	out	0x39, r0	; 57
     f30:	0f 90       	pop	r0
     f32:	08 be       	out	0x38, r0	; 56
     f34:	0f 90       	pop	r0
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	0f 90       	pop	r0
     f3a:	1f 90       	pop	r1
     f3c:	18 95       	reti

00000f3e <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     f3e:	1f 92       	push	r1
     f40:	0f 92       	push	r0
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	0f 92       	push	r0
     f46:	11 24       	eor	r1, r1
     f48:	08 b6       	in	r0, 0x38	; 56
     f4a:	0f 92       	push	r0
     f4c:	18 be       	out	0x38, r1	; 56
     f4e:	09 b6       	in	r0, 0x39	; 57
     f50:	0f 92       	push	r0
     f52:	19 be       	out	0x39, r1	; 57
     f54:	0b b6       	in	r0, 0x3b	; 59
     f56:	0f 92       	push	r0
     f58:	1b be       	out	0x3b, r1	; 59
     f5a:	2f 93       	push	r18
     f5c:	3f 93       	push	r19
     f5e:	4f 93       	push	r20
     f60:	5f 93       	push	r21
     f62:	6f 93       	push	r22
     f64:	7f 93       	push	r23
     f66:	8f 93       	push	r24
     f68:	9f 93       	push	r25
     f6a:	af 93       	push	r26
     f6c:	bf 93       	push	r27
     f6e:	ef 93       	push	r30
     f70:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     f72:	e0 91 f2 22 	lds	r30, 0x22F2	; 0x8022f2 <tc_tcd0_ccb_callback>
     f76:	f0 91 f3 22 	lds	r31, 0x22F3	; 0x8022f3 <tc_tcd0_ccb_callback+0x1>
     f7a:	30 97       	sbiw	r30, 0x00	; 0
     f7c:	09 f0       	breq	.+2      	; 0xf80 <__vector_80+0x42>
		tc_tcd0_ccb_callback();
     f7e:	19 95       	eicall
	}
}
     f80:	ff 91       	pop	r31
     f82:	ef 91       	pop	r30
     f84:	bf 91       	pop	r27
     f86:	af 91       	pop	r26
     f88:	9f 91       	pop	r25
     f8a:	8f 91       	pop	r24
     f8c:	7f 91       	pop	r23
     f8e:	6f 91       	pop	r22
     f90:	5f 91       	pop	r21
     f92:	4f 91       	pop	r20
     f94:	3f 91       	pop	r19
     f96:	2f 91       	pop	r18
     f98:	0f 90       	pop	r0
     f9a:	0b be       	out	0x3b, r0	; 59
     f9c:	0f 90       	pop	r0
     f9e:	09 be       	out	0x39, r0	; 57
     fa0:	0f 90       	pop	r0
     fa2:	08 be       	out	0x38, r0	; 56
     fa4:	0f 90       	pop	r0
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	0f 90       	pop	r0
     faa:	1f 90       	pop	r1
     fac:	18 95       	reti

00000fae <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     fae:	1f 92       	push	r1
     fb0:	0f 92       	push	r0
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	0f 92       	push	r0
     fb6:	11 24       	eor	r1, r1
     fb8:	08 b6       	in	r0, 0x38	; 56
     fba:	0f 92       	push	r0
     fbc:	18 be       	out	0x38, r1	; 56
     fbe:	09 b6       	in	r0, 0x39	; 57
     fc0:	0f 92       	push	r0
     fc2:	19 be       	out	0x39, r1	; 57
     fc4:	0b b6       	in	r0, 0x3b	; 59
     fc6:	0f 92       	push	r0
     fc8:	1b be       	out	0x3b, r1	; 59
     fca:	2f 93       	push	r18
     fcc:	3f 93       	push	r19
     fce:	4f 93       	push	r20
     fd0:	5f 93       	push	r21
     fd2:	6f 93       	push	r22
     fd4:	7f 93       	push	r23
     fd6:	8f 93       	push	r24
     fd8:	9f 93       	push	r25
     fda:	af 93       	push	r26
     fdc:	bf 93       	push	r27
     fde:	ef 93       	push	r30
     fe0:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     fe2:	e0 91 f0 22 	lds	r30, 0x22F0	; 0x8022f0 <tc_tcd0_ccc_callback>
     fe6:	f0 91 f1 22 	lds	r31, 0x22F1	; 0x8022f1 <tc_tcd0_ccc_callback+0x1>
     fea:	30 97       	sbiw	r30, 0x00	; 0
     fec:	09 f0       	breq	.+2      	; 0xff0 <__vector_81+0x42>
		tc_tcd0_ccc_callback();
     fee:	19 95       	eicall
	}
}
     ff0:	ff 91       	pop	r31
     ff2:	ef 91       	pop	r30
     ff4:	bf 91       	pop	r27
     ff6:	af 91       	pop	r26
     ff8:	9f 91       	pop	r25
     ffa:	8f 91       	pop	r24
     ffc:	7f 91       	pop	r23
     ffe:	6f 91       	pop	r22
    1000:	5f 91       	pop	r21
    1002:	4f 91       	pop	r20
    1004:	3f 91       	pop	r19
    1006:	2f 91       	pop	r18
    1008:	0f 90       	pop	r0
    100a:	0b be       	out	0x3b, r0	; 59
    100c:	0f 90       	pop	r0
    100e:	09 be       	out	0x39, r0	; 57
    1010:	0f 90       	pop	r0
    1012:	08 be       	out	0x38, r0	; 56
    1014:	0f 90       	pop	r0
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	0f 90       	pop	r0
    101a:	1f 90       	pop	r1
    101c:	18 95       	reti

0000101e <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    101e:	1f 92       	push	r1
    1020:	0f 92       	push	r0
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	0f 92       	push	r0
    1026:	11 24       	eor	r1, r1
    1028:	08 b6       	in	r0, 0x38	; 56
    102a:	0f 92       	push	r0
    102c:	18 be       	out	0x38, r1	; 56
    102e:	09 b6       	in	r0, 0x39	; 57
    1030:	0f 92       	push	r0
    1032:	19 be       	out	0x39, r1	; 57
    1034:	0b b6       	in	r0, 0x3b	; 59
    1036:	0f 92       	push	r0
    1038:	1b be       	out	0x3b, r1	; 59
    103a:	2f 93       	push	r18
    103c:	3f 93       	push	r19
    103e:	4f 93       	push	r20
    1040:	5f 93       	push	r21
    1042:	6f 93       	push	r22
    1044:	7f 93       	push	r23
    1046:	8f 93       	push	r24
    1048:	9f 93       	push	r25
    104a:	af 93       	push	r26
    104c:	bf 93       	push	r27
    104e:	ef 93       	push	r30
    1050:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    1052:	e0 91 ee 22 	lds	r30, 0x22EE	; 0x8022ee <tc_tcd0_ccd_callback>
    1056:	f0 91 ef 22 	lds	r31, 0x22EF	; 0x8022ef <tc_tcd0_ccd_callback+0x1>
    105a:	30 97       	sbiw	r30, 0x00	; 0
    105c:	09 f0       	breq	.+2      	; 0x1060 <__vector_82+0x42>
		tc_tcd0_ccd_callback();
    105e:	19 95       	eicall
	}
}
    1060:	ff 91       	pop	r31
    1062:	ef 91       	pop	r30
    1064:	bf 91       	pop	r27
    1066:	af 91       	pop	r26
    1068:	9f 91       	pop	r25
    106a:	8f 91       	pop	r24
    106c:	7f 91       	pop	r23
    106e:	6f 91       	pop	r22
    1070:	5f 91       	pop	r21
    1072:	4f 91       	pop	r20
    1074:	3f 91       	pop	r19
    1076:	2f 91       	pop	r18
    1078:	0f 90       	pop	r0
    107a:	0b be       	out	0x3b, r0	; 59
    107c:	0f 90       	pop	r0
    107e:	09 be       	out	0x39, r0	; 57
    1080:	0f 90       	pop	r0
    1082:	08 be       	out	0x38, r0	; 56
    1084:	0f 90       	pop	r0
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	0f 90       	pop	r0
    108a:	1f 90       	pop	r1
    108c:	18 95       	reti

0000108e <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    108e:	1f 92       	push	r1
    1090:	0f 92       	push	r0
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	0f 92       	push	r0
    1096:	11 24       	eor	r1, r1
    1098:	08 b6       	in	r0, 0x38	; 56
    109a:	0f 92       	push	r0
    109c:	18 be       	out	0x38, r1	; 56
    109e:	09 b6       	in	r0, 0x39	; 57
    10a0:	0f 92       	push	r0
    10a2:	19 be       	out	0x39, r1	; 57
    10a4:	0b b6       	in	r0, 0x3b	; 59
    10a6:	0f 92       	push	r0
    10a8:	1b be       	out	0x3b, r1	; 59
    10aa:	2f 93       	push	r18
    10ac:	3f 93       	push	r19
    10ae:	4f 93       	push	r20
    10b0:	5f 93       	push	r21
    10b2:	6f 93       	push	r22
    10b4:	7f 93       	push	r23
    10b6:	8f 93       	push	r24
    10b8:	9f 93       	push	r25
    10ba:	af 93       	push	r26
    10bc:	bf 93       	push	r27
    10be:	ef 93       	push	r30
    10c0:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    10c2:	e0 91 ec 22 	lds	r30, 0x22EC	; 0x8022ec <tc_tcd1_ovf_callback>
    10c6:	f0 91 ed 22 	lds	r31, 0x22ED	; 0x8022ed <tc_tcd1_ovf_callback+0x1>
    10ca:	30 97       	sbiw	r30, 0x00	; 0
    10cc:	09 f0       	breq	.+2      	; 0x10d0 <__vector_83+0x42>
		tc_tcd1_ovf_callback();
    10ce:	19 95       	eicall
	}
}
    10d0:	ff 91       	pop	r31
    10d2:	ef 91       	pop	r30
    10d4:	bf 91       	pop	r27
    10d6:	af 91       	pop	r26
    10d8:	9f 91       	pop	r25
    10da:	8f 91       	pop	r24
    10dc:	7f 91       	pop	r23
    10de:	6f 91       	pop	r22
    10e0:	5f 91       	pop	r21
    10e2:	4f 91       	pop	r20
    10e4:	3f 91       	pop	r19
    10e6:	2f 91       	pop	r18
    10e8:	0f 90       	pop	r0
    10ea:	0b be       	out	0x3b, r0	; 59
    10ec:	0f 90       	pop	r0
    10ee:	09 be       	out	0x39, r0	; 57
    10f0:	0f 90       	pop	r0
    10f2:	08 be       	out	0x38, r0	; 56
    10f4:	0f 90       	pop	r0
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	0f 90       	pop	r0
    10fa:	1f 90       	pop	r1
    10fc:	18 95       	reti

000010fe <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    10fe:	1f 92       	push	r1
    1100:	0f 92       	push	r0
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	0f 92       	push	r0
    1106:	11 24       	eor	r1, r1
    1108:	08 b6       	in	r0, 0x38	; 56
    110a:	0f 92       	push	r0
    110c:	18 be       	out	0x38, r1	; 56
    110e:	09 b6       	in	r0, 0x39	; 57
    1110:	0f 92       	push	r0
    1112:	19 be       	out	0x39, r1	; 57
    1114:	0b b6       	in	r0, 0x3b	; 59
    1116:	0f 92       	push	r0
    1118:	1b be       	out	0x3b, r1	; 59
    111a:	2f 93       	push	r18
    111c:	3f 93       	push	r19
    111e:	4f 93       	push	r20
    1120:	5f 93       	push	r21
    1122:	6f 93       	push	r22
    1124:	7f 93       	push	r23
    1126:	8f 93       	push	r24
    1128:	9f 93       	push	r25
    112a:	af 93       	push	r26
    112c:	bf 93       	push	r27
    112e:	ef 93       	push	r30
    1130:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    1132:	e0 91 ea 22 	lds	r30, 0x22EA	; 0x8022ea <tc_tcd1_err_callback>
    1136:	f0 91 eb 22 	lds	r31, 0x22EB	; 0x8022eb <tc_tcd1_err_callback+0x1>
    113a:	30 97       	sbiw	r30, 0x00	; 0
    113c:	09 f0       	breq	.+2      	; 0x1140 <__vector_84+0x42>
		tc_tcd1_err_callback();
    113e:	19 95       	eicall
	}
}
    1140:	ff 91       	pop	r31
    1142:	ef 91       	pop	r30
    1144:	bf 91       	pop	r27
    1146:	af 91       	pop	r26
    1148:	9f 91       	pop	r25
    114a:	8f 91       	pop	r24
    114c:	7f 91       	pop	r23
    114e:	6f 91       	pop	r22
    1150:	5f 91       	pop	r21
    1152:	4f 91       	pop	r20
    1154:	3f 91       	pop	r19
    1156:	2f 91       	pop	r18
    1158:	0f 90       	pop	r0
    115a:	0b be       	out	0x3b, r0	; 59
    115c:	0f 90       	pop	r0
    115e:	09 be       	out	0x39, r0	; 57
    1160:	0f 90       	pop	r0
    1162:	08 be       	out	0x38, r0	; 56
    1164:	0f 90       	pop	r0
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	0f 90       	pop	r0
    116a:	1f 90       	pop	r1
    116c:	18 95       	reti

0000116e <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    116e:	1f 92       	push	r1
    1170:	0f 92       	push	r0
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	0f 92       	push	r0
    1176:	11 24       	eor	r1, r1
    1178:	08 b6       	in	r0, 0x38	; 56
    117a:	0f 92       	push	r0
    117c:	18 be       	out	0x38, r1	; 56
    117e:	09 b6       	in	r0, 0x39	; 57
    1180:	0f 92       	push	r0
    1182:	19 be       	out	0x39, r1	; 57
    1184:	0b b6       	in	r0, 0x3b	; 59
    1186:	0f 92       	push	r0
    1188:	1b be       	out	0x3b, r1	; 59
    118a:	2f 93       	push	r18
    118c:	3f 93       	push	r19
    118e:	4f 93       	push	r20
    1190:	5f 93       	push	r21
    1192:	6f 93       	push	r22
    1194:	7f 93       	push	r23
    1196:	8f 93       	push	r24
    1198:	9f 93       	push	r25
    119a:	af 93       	push	r26
    119c:	bf 93       	push	r27
    119e:	ef 93       	push	r30
    11a0:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    11a2:	e0 91 e8 22 	lds	r30, 0x22E8	; 0x8022e8 <tc_tcd1_cca_callback>
    11a6:	f0 91 e9 22 	lds	r31, 0x22E9	; 0x8022e9 <tc_tcd1_cca_callback+0x1>
    11aa:	30 97       	sbiw	r30, 0x00	; 0
    11ac:	09 f0       	breq	.+2      	; 0x11b0 <__vector_85+0x42>
		tc_tcd1_cca_callback();
    11ae:	19 95       	eicall
	}
}
    11b0:	ff 91       	pop	r31
    11b2:	ef 91       	pop	r30
    11b4:	bf 91       	pop	r27
    11b6:	af 91       	pop	r26
    11b8:	9f 91       	pop	r25
    11ba:	8f 91       	pop	r24
    11bc:	7f 91       	pop	r23
    11be:	6f 91       	pop	r22
    11c0:	5f 91       	pop	r21
    11c2:	4f 91       	pop	r20
    11c4:	3f 91       	pop	r19
    11c6:	2f 91       	pop	r18
    11c8:	0f 90       	pop	r0
    11ca:	0b be       	out	0x3b, r0	; 59
    11cc:	0f 90       	pop	r0
    11ce:	09 be       	out	0x39, r0	; 57
    11d0:	0f 90       	pop	r0
    11d2:	08 be       	out	0x38, r0	; 56
    11d4:	0f 90       	pop	r0
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	0f 90       	pop	r0
    11da:	1f 90       	pop	r1
    11dc:	18 95       	reti

000011de <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    11de:	1f 92       	push	r1
    11e0:	0f 92       	push	r0
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	0f 92       	push	r0
    11e6:	11 24       	eor	r1, r1
    11e8:	08 b6       	in	r0, 0x38	; 56
    11ea:	0f 92       	push	r0
    11ec:	18 be       	out	0x38, r1	; 56
    11ee:	09 b6       	in	r0, 0x39	; 57
    11f0:	0f 92       	push	r0
    11f2:	19 be       	out	0x39, r1	; 57
    11f4:	0b b6       	in	r0, 0x3b	; 59
    11f6:	0f 92       	push	r0
    11f8:	1b be       	out	0x3b, r1	; 59
    11fa:	2f 93       	push	r18
    11fc:	3f 93       	push	r19
    11fe:	4f 93       	push	r20
    1200:	5f 93       	push	r21
    1202:	6f 93       	push	r22
    1204:	7f 93       	push	r23
    1206:	8f 93       	push	r24
    1208:	9f 93       	push	r25
    120a:	af 93       	push	r26
    120c:	bf 93       	push	r27
    120e:	ef 93       	push	r30
    1210:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    1212:	e0 91 e6 22 	lds	r30, 0x22E6	; 0x8022e6 <tc_tcd1_ccb_callback>
    1216:	f0 91 e7 22 	lds	r31, 0x22E7	; 0x8022e7 <tc_tcd1_ccb_callback+0x1>
    121a:	30 97       	sbiw	r30, 0x00	; 0
    121c:	09 f0       	breq	.+2      	; 0x1220 <__vector_86+0x42>
		tc_tcd1_ccb_callback();
    121e:	19 95       	eicall
	}
}
    1220:	ff 91       	pop	r31
    1222:	ef 91       	pop	r30
    1224:	bf 91       	pop	r27
    1226:	af 91       	pop	r26
    1228:	9f 91       	pop	r25
    122a:	8f 91       	pop	r24
    122c:	7f 91       	pop	r23
    122e:	6f 91       	pop	r22
    1230:	5f 91       	pop	r21
    1232:	4f 91       	pop	r20
    1234:	3f 91       	pop	r19
    1236:	2f 91       	pop	r18
    1238:	0f 90       	pop	r0
    123a:	0b be       	out	0x3b, r0	; 59
    123c:	0f 90       	pop	r0
    123e:	09 be       	out	0x39, r0	; 57
    1240:	0f 90       	pop	r0
    1242:	08 be       	out	0x38, r0	; 56
    1244:	0f 90       	pop	r0
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	0f 90       	pop	r0
    124a:	1f 90       	pop	r1
    124c:	18 95       	reti

0000124e <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    124e:	1f 92       	push	r1
    1250:	0f 92       	push	r0
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	0f 92       	push	r0
    1256:	11 24       	eor	r1, r1
    1258:	08 b6       	in	r0, 0x38	; 56
    125a:	0f 92       	push	r0
    125c:	18 be       	out	0x38, r1	; 56
    125e:	09 b6       	in	r0, 0x39	; 57
    1260:	0f 92       	push	r0
    1262:	19 be       	out	0x39, r1	; 57
    1264:	0b b6       	in	r0, 0x3b	; 59
    1266:	0f 92       	push	r0
    1268:	1b be       	out	0x3b, r1	; 59
    126a:	2f 93       	push	r18
    126c:	3f 93       	push	r19
    126e:	4f 93       	push	r20
    1270:	5f 93       	push	r21
    1272:	6f 93       	push	r22
    1274:	7f 93       	push	r23
    1276:	8f 93       	push	r24
    1278:	9f 93       	push	r25
    127a:	af 93       	push	r26
    127c:	bf 93       	push	r27
    127e:	ef 93       	push	r30
    1280:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    1282:	e0 91 e4 22 	lds	r30, 0x22E4	; 0x8022e4 <tc_tce0_ovf_callback>
    1286:	f0 91 e5 22 	lds	r31, 0x22E5	; 0x8022e5 <tc_tce0_ovf_callback+0x1>
    128a:	30 97       	sbiw	r30, 0x00	; 0
    128c:	09 f0       	breq	.+2      	; 0x1290 <__vector_47+0x42>
		tc_tce0_ovf_callback();
    128e:	19 95       	eicall
	}
}
    1290:	ff 91       	pop	r31
    1292:	ef 91       	pop	r30
    1294:	bf 91       	pop	r27
    1296:	af 91       	pop	r26
    1298:	9f 91       	pop	r25
    129a:	8f 91       	pop	r24
    129c:	7f 91       	pop	r23
    129e:	6f 91       	pop	r22
    12a0:	5f 91       	pop	r21
    12a2:	4f 91       	pop	r20
    12a4:	3f 91       	pop	r19
    12a6:	2f 91       	pop	r18
    12a8:	0f 90       	pop	r0
    12aa:	0b be       	out	0x3b, r0	; 59
    12ac:	0f 90       	pop	r0
    12ae:	09 be       	out	0x39, r0	; 57
    12b0:	0f 90       	pop	r0
    12b2:	08 be       	out	0x38, r0	; 56
    12b4:	0f 90       	pop	r0
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	0f 90       	pop	r0
    12ba:	1f 90       	pop	r1
    12bc:	18 95       	reti

000012be <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    12be:	1f 92       	push	r1
    12c0:	0f 92       	push	r0
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	0f 92       	push	r0
    12c6:	11 24       	eor	r1, r1
    12c8:	08 b6       	in	r0, 0x38	; 56
    12ca:	0f 92       	push	r0
    12cc:	18 be       	out	0x38, r1	; 56
    12ce:	09 b6       	in	r0, 0x39	; 57
    12d0:	0f 92       	push	r0
    12d2:	19 be       	out	0x39, r1	; 57
    12d4:	0b b6       	in	r0, 0x3b	; 59
    12d6:	0f 92       	push	r0
    12d8:	1b be       	out	0x3b, r1	; 59
    12da:	2f 93       	push	r18
    12dc:	3f 93       	push	r19
    12de:	4f 93       	push	r20
    12e0:	5f 93       	push	r21
    12e2:	6f 93       	push	r22
    12e4:	7f 93       	push	r23
    12e6:	8f 93       	push	r24
    12e8:	9f 93       	push	r25
    12ea:	af 93       	push	r26
    12ec:	bf 93       	push	r27
    12ee:	ef 93       	push	r30
    12f0:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    12f2:	e0 91 e2 22 	lds	r30, 0x22E2	; 0x8022e2 <tc_tce0_err_callback>
    12f6:	f0 91 e3 22 	lds	r31, 0x22E3	; 0x8022e3 <tc_tce0_err_callback+0x1>
    12fa:	30 97       	sbiw	r30, 0x00	; 0
    12fc:	09 f0       	breq	.+2      	; 0x1300 <__vector_48+0x42>
		tc_tce0_err_callback();
    12fe:	19 95       	eicall
	}
}
    1300:	ff 91       	pop	r31
    1302:	ef 91       	pop	r30
    1304:	bf 91       	pop	r27
    1306:	af 91       	pop	r26
    1308:	9f 91       	pop	r25
    130a:	8f 91       	pop	r24
    130c:	7f 91       	pop	r23
    130e:	6f 91       	pop	r22
    1310:	5f 91       	pop	r21
    1312:	4f 91       	pop	r20
    1314:	3f 91       	pop	r19
    1316:	2f 91       	pop	r18
    1318:	0f 90       	pop	r0
    131a:	0b be       	out	0x3b, r0	; 59
    131c:	0f 90       	pop	r0
    131e:	09 be       	out	0x39, r0	; 57
    1320:	0f 90       	pop	r0
    1322:	08 be       	out	0x38, r0	; 56
    1324:	0f 90       	pop	r0
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	0f 90       	pop	r0
    132a:	1f 90       	pop	r1
    132c:	18 95       	reti

0000132e <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    132e:	1f 92       	push	r1
    1330:	0f 92       	push	r0
    1332:	0f b6       	in	r0, 0x3f	; 63
    1334:	0f 92       	push	r0
    1336:	11 24       	eor	r1, r1
    1338:	08 b6       	in	r0, 0x38	; 56
    133a:	0f 92       	push	r0
    133c:	18 be       	out	0x38, r1	; 56
    133e:	09 b6       	in	r0, 0x39	; 57
    1340:	0f 92       	push	r0
    1342:	19 be       	out	0x39, r1	; 57
    1344:	0b b6       	in	r0, 0x3b	; 59
    1346:	0f 92       	push	r0
    1348:	1b be       	out	0x3b, r1	; 59
    134a:	2f 93       	push	r18
    134c:	3f 93       	push	r19
    134e:	4f 93       	push	r20
    1350:	5f 93       	push	r21
    1352:	6f 93       	push	r22
    1354:	7f 93       	push	r23
    1356:	8f 93       	push	r24
    1358:	9f 93       	push	r25
    135a:	af 93       	push	r26
    135c:	bf 93       	push	r27
    135e:	ef 93       	push	r30
    1360:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    1362:	e0 91 e0 22 	lds	r30, 0x22E0	; 0x8022e0 <tc_tce0_cca_callback>
    1366:	f0 91 e1 22 	lds	r31, 0x22E1	; 0x8022e1 <tc_tce0_cca_callback+0x1>
    136a:	30 97       	sbiw	r30, 0x00	; 0
    136c:	09 f0       	breq	.+2      	; 0x1370 <__vector_49+0x42>
		tc_tce0_cca_callback();
    136e:	19 95       	eicall
	}
}
    1370:	ff 91       	pop	r31
    1372:	ef 91       	pop	r30
    1374:	bf 91       	pop	r27
    1376:	af 91       	pop	r26
    1378:	9f 91       	pop	r25
    137a:	8f 91       	pop	r24
    137c:	7f 91       	pop	r23
    137e:	6f 91       	pop	r22
    1380:	5f 91       	pop	r21
    1382:	4f 91       	pop	r20
    1384:	3f 91       	pop	r19
    1386:	2f 91       	pop	r18
    1388:	0f 90       	pop	r0
    138a:	0b be       	out	0x3b, r0	; 59
    138c:	0f 90       	pop	r0
    138e:	09 be       	out	0x39, r0	; 57
    1390:	0f 90       	pop	r0
    1392:	08 be       	out	0x38, r0	; 56
    1394:	0f 90       	pop	r0
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	0f 90       	pop	r0
    139a:	1f 90       	pop	r1
    139c:	18 95       	reti

0000139e <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    139e:	1f 92       	push	r1
    13a0:	0f 92       	push	r0
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	0f 92       	push	r0
    13a6:	11 24       	eor	r1, r1
    13a8:	08 b6       	in	r0, 0x38	; 56
    13aa:	0f 92       	push	r0
    13ac:	18 be       	out	0x38, r1	; 56
    13ae:	09 b6       	in	r0, 0x39	; 57
    13b0:	0f 92       	push	r0
    13b2:	19 be       	out	0x39, r1	; 57
    13b4:	0b b6       	in	r0, 0x3b	; 59
    13b6:	0f 92       	push	r0
    13b8:	1b be       	out	0x3b, r1	; 59
    13ba:	2f 93       	push	r18
    13bc:	3f 93       	push	r19
    13be:	4f 93       	push	r20
    13c0:	5f 93       	push	r21
    13c2:	6f 93       	push	r22
    13c4:	7f 93       	push	r23
    13c6:	8f 93       	push	r24
    13c8:	9f 93       	push	r25
    13ca:	af 93       	push	r26
    13cc:	bf 93       	push	r27
    13ce:	ef 93       	push	r30
    13d0:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    13d2:	e0 91 de 22 	lds	r30, 0x22DE	; 0x8022de <tc_tce0_ccb_callback>
    13d6:	f0 91 df 22 	lds	r31, 0x22DF	; 0x8022df <tc_tce0_ccb_callback+0x1>
    13da:	30 97       	sbiw	r30, 0x00	; 0
    13dc:	09 f0       	breq	.+2      	; 0x13e0 <__vector_50+0x42>
		tc_tce0_ccb_callback();
    13de:	19 95       	eicall
	}
}
    13e0:	ff 91       	pop	r31
    13e2:	ef 91       	pop	r30
    13e4:	bf 91       	pop	r27
    13e6:	af 91       	pop	r26
    13e8:	9f 91       	pop	r25
    13ea:	8f 91       	pop	r24
    13ec:	7f 91       	pop	r23
    13ee:	6f 91       	pop	r22
    13f0:	5f 91       	pop	r21
    13f2:	4f 91       	pop	r20
    13f4:	3f 91       	pop	r19
    13f6:	2f 91       	pop	r18
    13f8:	0f 90       	pop	r0
    13fa:	0b be       	out	0x3b, r0	; 59
    13fc:	0f 90       	pop	r0
    13fe:	09 be       	out	0x39, r0	; 57
    1400:	0f 90       	pop	r0
    1402:	08 be       	out	0x38, r0	; 56
    1404:	0f 90       	pop	r0
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	0f 90       	pop	r0
    140a:	1f 90       	pop	r1
    140c:	18 95       	reti

0000140e <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    140e:	1f 92       	push	r1
    1410:	0f 92       	push	r0
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	0f 92       	push	r0
    1416:	11 24       	eor	r1, r1
    1418:	08 b6       	in	r0, 0x38	; 56
    141a:	0f 92       	push	r0
    141c:	18 be       	out	0x38, r1	; 56
    141e:	09 b6       	in	r0, 0x39	; 57
    1420:	0f 92       	push	r0
    1422:	19 be       	out	0x39, r1	; 57
    1424:	0b b6       	in	r0, 0x3b	; 59
    1426:	0f 92       	push	r0
    1428:	1b be       	out	0x3b, r1	; 59
    142a:	2f 93       	push	r18
    142c:	3f 93       	push	r19
    142e:	4f 93       	push	r20
    1430:	5f 93       	push	r21
    1432:	6f 93       	push	r22
    1434:	7f 93       	push	r23
    1436:	8f 93       	push	r24
    1438:	9f 93       	push	r25
    143a:	af 93       	push	r26
    143c:	bf 93       	push	r27
    143e:	ef 93       	push	r30
    1440:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    1442:	e0 91 dc 22 	lds	r30, 0x22DC	; 0x8022dc <tc_tce0_ccc_callback>
    1446:	f0 91 dd 22 	lds	r31, 0x22DD	; 0x8022dd <tc_tce0_ccc_callback+0x1>
    144a:	30 97       	sbiw	r30, 0x00	; 0
    144c:	09 f0       	breq	.+2      	; 0x1450 <__vector_51+0x42>
		tc_tce0_ccc_callback();
    144e:	19 95       	eicall
	}
}
    1450:	ff 91       	pop	r31
    1452:	ef 91       	pop	r30
    1454:	bf 91       	pop	r27
    1456:	af 91       	pop	r26
    1458:	9f 91       	pop	r25
    145a:	8f 91       	pop	r24
    145c:	7f 91       	pop	r23
    145e:	6f 91       	pop	r22
    1460:	5f 91       	pop	r21
    1462:	4f 91       	pop	r20
    1464:	3f 91       	pop	r19
    1466:	2f 91       	pop	r18
    1468:	0f 90       	pop	r0
    146a:	0b be       	out	0x3b, r0	; 59
    146c:	0f 90       	pop	r0
    146e:	09 be       	out	0x39, r0	; 57
    1470:	0f 90       	pop	r0
    1472:	08 be       	out	0x38, r0	; 56
    1474:	0f 90       	pop	r0
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	0f 90       	pop	r0
    147a:	1f 90       	pop	r1
    147c:	18 95       	reti

0000147e <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    147e:	1f 92       	push	r1
    1480:	0f 92       	push	r0
    1482:	0f b6       	in	r0, 0x3f	; 63
    1484:	0f 92       	push	r0
    1486:	11 24       	eor	r1, r1
    1488:	08 b6       	in	r0, 0x38	; 56
    148a:	0f 92       	push	r0
    148c:	18 be       	out	0x38, r1	; 56
    148e:	09 b6       	in	r0, 0x39	; 57
    1490:	0f 92       	push	r0
    1492:	19 be       	out	0x39, r1	; 57
    1494:	0b b6       	in	r0, 0x3b	; 59
    1496:	0f 92       	push	r0
    1498:	1b be       	out	0x3b, r1	; 59
    149a:	2f 93       	push	r18
    149c:	3f 93       	push	r19
    149e:	4f 93       	push	r20
    14a0:	5f 93       	push	r21
    14a2:	6f 93       	push	r22
    14a4:	7f 93       	push	r23
    14a6:	8f 93       	push	r24
    14a8:	9f 93       	push	r25
    14aa:	af 93       	push	r26
    14ac:	bf 93       	push	r27
    14ae:	ef 93       	push	r30
    14b0:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    14b2:	e0 91 da 22 	lds	r30, 0x22DA	; 0x8022da <tc_tce0_ccd_callback>
    14b6:	f0 91 db 22 	lds	r31, 0x22DB	; 0x8022db <tc_tce0_ccd_callback+0x1>
    14ba:	30 97       	sbiw	r30, 0x00	; 0
    14bc:	09 f0       	breq	.+2      	; 0x14c0 <__vector_52+0x42>
		tc_tce0_ccd_callback();
    14be:	19 95       	eicall
	}
}
    14c0:	ff 91       	pop	r31
    14c2:	ef 91       	pop	r30
    14c4:	bf 91       	pop	r27
    14c6:	af 91       	pop	r26
    14c8:	9f 91       	pop	r25
    14ca:	8f 91       	pop	r24
    14cc:	7f 91       	pop	r23
    14ce:	6f 91       	pop	r22
    14d0:	5f 91       	pop	r21
    14d2:	4f 91       	pop	r20
    14d4:	3f 91       	pop	r19
    14d6:	2f 91       	pop	r18
    14d8:	0f 90       	pop	r0
    14da:	0b be       	out	0x3b, r0	; 59
    14dc:	0f 90       	pop	r0
    14de:	09 be       	out	0x39, r0	; 57
    14e0:	0f 90       	pop	r0
    14e2:	08 be       	out	0x38, r0	; 56
    14e4:	0f 90       	pop	r0
    14e6:	0f be       	out	0x3f, r0	; 63
    14e8:	0f 90       	pop	r0
    14ea:	1f 90       	pop	r1
    14ec:	18 95       	reti

000014ee <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    14ee:	1f 92       	push	r1
    14f0:	0f 92       	push	r0
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	0f 92       	push	r0
    14f6:	11 24       	eor	r1, r1
    14f8:	08 b6       	in	r0, 0x38	; 56
    14fa:	0f 92       	push	r0
    14fc:	18 be       	out	0x38, r1	; 56
    14fe:	09 b6       	in	r0, 0x39	; 57
    1500:	0f 92       	push	r0
    1502:	19 be       	out	0x39, r1	; 57
    1504:	0b b6       	in	r0, 0x3b	; 59
    1506:	0f 92       	push	r0
    1508:	1b be       	out	0x3b, r1	; 59
    150a:	2f 93       	push	r18
    150c:	3f 93       	push	r19
    150e:	4f 93       	push	r20
    1510:	5f 93       	push	r21
    1512:	6f 93       	push	r22
    1514:	7f 93       	push	r23
    1516:	8f 93       	push	r24
    1518:	9f 93       	push	r25
    151a:	af 93       	push	r26
    151c:	bf 93       	push	r27
    151e:	ef 93       	push	r30
    1520:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    1522:	e0 91 d8 22 	lds	r30, 0x22D8	; 0x8022d8 <tc_tce1_ovf_callback>
    1526:	f0 91 d9 22 	lds	r31, 0x22D9	; 0x8022d9 <tc_tce1_ovf_callback+0x1>
    152a:	30 97       	sbiw	r30, 0x00	; 0
    152c:	09 f0       	breq	.+2      	; 0x1530 <__vector_53+0x42>
		tc_tce1_ovf_callback();
    152e:	19 95       	eicall
	}
}
    1530:	ff 91       	pop	r31
    1532:	ef 91       	pop	r30
    1534:	bf 91       	pop	r27
    1536:	af 91       	pop	r26
    1538:	9f 91       	pop	r25
    153a:	8f 91       	pop	r24
    153c:	7f 91       	pop	r23
    153e:	6f 91       	pop	r22
    1540:	5f 91       	pop	r21
    1542:	4f 91       	pop	r20
    1544:	3f 91       	pop	r19
    1546:	2f 91       	pop	r18
    1548:	0f 90       	pop	r0
    154a:	0b be       	out	0x3b, r0	; 59
    154c:	0f 90       	pop	r0
    154e:	09 be       	out	0x39, r0	; 57
    1550:	0f 90       	pop	r0
    1552:	08 be       	out	0x38, r0	; 56
    1554:	0f 90       	pop	r0
    1556:	0f be       	out	0x3f, r0	; 63
    1558:	0f 90       	pop	r0
    155a:	1f 90       	pop	r1
    155c:	18 95       	reti

0000155e <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    155e:	1f 92       	push	r1
    1560:	0f 92       	push	r0
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	0f 92       	push	r0
    1566:	11 24       	eor	r1, r1
    1568:	08 b6       	in	r0, 0x38	; 56
    156a:	0f 92       	push	r0
    156c:	18 be       	out	0x38, r1	; 56
    156e:	09 b6       	in	r0, 0x39	; 57
    1570:	0f 92       	push	r0
    1572:	19 be       	out	0x39, r1	; 57
    1574:	0b b6       	in	r0, 0x3b	; 59
    1576:	0f 92       	push	r0
    1578:	1b be       	out	0x3b, r1	; 59
    157a:	2f 93       	push	r18
    157c:	3f 93       	push	r19
    157e:	4f 93       	push	r20
    1580:	5f 93       	push	r21
    1582:	6f 93       	push	r22
    1584:	7f 93       	push	r23
    1586:	8f 93       	push	r24
    1588:	9f 93       	push	r25
    158a:	af 93       	push	r26
    158c:	bf 93       	push	r27
    158e:	ef 93       	push	r30
    1590:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    1592:	e0 91 d6 22 	lds	r30, 0x22D6	; 0x8022d6 <tc_tce1_err_callback>
    1596:	f0 91 d7 22 	lds	r31, 0x22D7	; 0x8022d7 <tc_tce1_err_callback+0x1>
    159a:	30 97       	sbiw	r30, 0x00	; 0
    159c:	09 f0       	breq	.+2      	; 0x15a0 <__vector_54+0x42>
		tc_tce1_err_callback();
    159e:	19 95       	eicall
	}
}
    15a0:	ff 91       	pop	r31
    15a2:	ef 91       	pop	r30
    15a4:	bf 91       	pop	r27
    15a6:	af 91       	pop	r26
    15a8:	9f 91       	pop	r25
    15aa:	8f 91       	pop	r24
    15ac:	7f 91       	pop	r23
    15ae:	6f 91       	pop	r22
    15b0:	5f 91       	pop	r21
    15b2:	4f 91       	pop	r20
    15b4:	3f 91       	pop	r19
    15b6:	2f 91       	pop	r18
    15b8:	0f 90       	pop	r0
    15ba:	0b be       	out	0x3b, r0	; 59
    15bc:	0f 90       	pop	r0
    15be:	09 be       	out	0x39, r0	; 57
    15c0:	0f 90       	pop	r0
    15c2:	08 be       	out	0x38, r0	; 56
    15c4:	0f 90       	pop	r0
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	0f 90       	pop	r0
    15ca:	1f 90       	pop	r1
    15cc:	18 95       	reti

000015ce <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    15ce:	1f 92       	push	r1
    15d0:	0f 92       	push	r0
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	0f 92       	push	r0
    15d6:	11 24       	eor	r1, r1
    15d8:	08 b6       	in	r0, 0x38	; 56
    15da:	0f 92       	push	r0
    15dc:	18 be       	out	0x38, r1	; 56
    15de:	09 b6       	in	r0, 0x39	; 57
    15e0:	0f 92       	push	r0
    15e2:	19 be       	out	0x39, r1	; 57
    15e4:	0b b6       	in	r0, 0x3b	; 59
    15e6:	0f 92       	push	r0
    15e8:	1b be       	out	0x3b, r1	; 59
    15ea:	2f 93       	push	r18
    15ec:	3f 93       	push	r19
    15ee:	4f 93       	push	r20
    15f0:	5f 93       	push	r21
    15f2:	6f 93       	push	r22
    15f4:	7f 93       	push	r23
    15f6:	8f 93       	push	r24
    15f8:	9f 93       	push	r25
    15fa:	af 93       	push	r26
    15fc:	bf 93       	push	r27
    15fe:	ef 93       	push	r30
    1600:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    1602:	e0 91 d4 22 	lds	r30, 0x22D4	; 0x8022d4 <tc_tce1_cca_callback>
    1606:	f0 91 d5 22 	lds	r31, 0x22D5	; 0x8022d5 <tc_tce1_cca_callback+0x1>
    160a:	30 97       	sbiw	r30, 0x00	; 0
    160c:	09 f0       	breq	.+2      	; 0x1610 <__vector_55+0x42>
		tc_tce1_cca_callback();
    160e:	19 95       	eicall
	}
}
    1610:	ff 91       	pop	r31
    1612:	ef 91       	pop	r30
    1614:	bf 91       	pop	r27
    1616:	af 91       	pop	r26
    1618:	9f 91       	pop	r25
    161a:	8f 91       	pop	r24
    161c:	7f 91       	pop	r23
    161e:	6f 91       	pop	r22
    1620:	5f 91       	pop	r21
    1622:	4f 91       	pop	r20
    1624:	3f 91       	pop	r19
    1626:	2f 91       	pop	r18
    1628:	0f 90       	pop	r0
    162a:	0b be       	out	0x3b, r0	; 59
    162c:	0f 90       	pop	r0
    162e:	09 be       	out	0x39, r0	; 57
    1630:	0f 90       	pop	r0
    1632:	08 be       	out	0x38, r0	; 56
    1634:	0f 90       	pop	r0
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	0f 90       	pop	r0
    163a:	1f 90       	pop	r1
    163c:	18 95       	reti

0000163e <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    163e:	1f 92       	push	r1
    1640:	0f 92       	push	r0
    1642:	0f b6       	in	r0, 0x3f	; 63
    1644:	0f 92       	push	r0
    1646:	11 24       	eor	r1, r1
    1648:	08 b6       	in	r0, 0x38	; 56
    164a:	0f 92       	push	r0
    164c:	18 be       	out	0x38, r1	; 56
    164e:	09 b6       	in	r0, 0x39	; 57
    1650:	0f 92       	push	r0
    1652:	19 be       	out	0x39, r1	; 57
    1654:	0b b6       	in	r0, 0x3b	; 59
    1656:	0f 92       	push	r0
    1658:	1b be       	out	0x3b, r1	; 59
    165a:	2f 93       	push	r18
    165c:	3f 93       	push	r19
    165e:	4f 93       	push	r20
    1660:	5f 93       	push	r21
    1662:	6f 93       	push	r22
    1664:	7f 93       	push	r23
    1666:	8f 93       	push	r24
    1668:	9f 93       	push	r25
    166a:	af 93       	push	r26
    166c:	bf 93       	push	r27
    166e:	ef 93       	push	r30
    1670:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    1672:	e0 91 d2 22 	lds	r30, 0x22D2	; 0x8022d2 <tc_tce1_ccb_callback>
    1676:	f0 91 d3 22 	lds	r31, 0x22D3	; 0x8022d3 <tc_tce1_ccb_callback+0x1>
    167a:	30 97       	sbiw	r30, 0x00	; 0
    167c:	09 f0       	breq	.+2      	; 0x1680 <__vector_56+0x42>
		tc_tce1_ccb_callback();
    167e:	19 95       	eicall
	}
}
    1680:	ff 91       	pop	r31
    1682:	ef 91       	pop	r30
    1684:	bf 91       	pop	r27
    1686:	af 91       	pop	r26
    1688:	9f 91       	pop	r25
    168a:	8f 91       	pop	r24
    168c:	7f 91       	pop	r23
    168e:	6f 91       	pop	r22
    1690:	5f 91       	pop	r21
    1692:	4f 91       	pop	r20
    1694:	3f 91       	pop	r19
    1696:	2f 91       	pop	r18
    1698:	0f 90       	pop	r0
    169a:	0b be       	out	0x3b, r0	; 59
    169c:	0f 90       	pop	r0
    169e:	09 be       	out	0x39, r0	; 57
    16a0:	0f 90       	pop	r0
    16a2:	08 be       	out	0x38, r0	; 56
    16a4:	0f 90       	pop	r0
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	0f 90       	pop	r0
    16aa:	1f 90       	pop	r1
    16ac:	18 95       	reti

000016ae <__vector_108>:
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */

ISR(TCF0_OVF_vect)
{
    16ae:	1f 92       	push	r1
    16b0:	0f 92       	push	r0
    16b2:	0f b6       	in	r0, 0x3f	; 63
    16b4:	0f 92       	push	r0
    16b6:	11 24       	eor	r1, r1
    16b8:	08 b6       	in	r0, 0x38	; 56
    16ba:	0f 92       	push	r0
    16bc:	18 be       	out	0x38, r1	; 56
    16be:	09 b6       	in	r0, 0x39	; 57
    16c0:	0f 92       	push	r0
    16c2:	19 be       	out	0x39, r1	; 57
    16c4:	0b b6       	in	r0, 0x3b	; 59
    16c6:	0f 92       	push	r0
    16c8:	1b be       	out	0x3b, r1	; 59
    16ca:	2f 93       	push	r18
    16cc:	3f 93       	push	r19
    16ce:	4f 93       	push	r20
    16d0:	5f 93       	push	r21
    16d2:	6f 93       	push	r22
    16d4:	7f 93       	push	r23
    16d6:	8f 93       	push	r24
    16d8:	9f 93       	push	r25
    16da:	af 93       	push	r26
    16dc:	bf 93       	push	r27
    16de:	ef 93       	push	r30
    16e0:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    16e2:	e0 91 d0 22 	lds	r30, 0x22D0	; 0x8022d0 <tc_tcf0_ovf_callback>
    16e6:	f0 91 d1 22 	lds	r31, 0x22D1	; 0x8022d1 <tc_tcf0_ovf_callback+0x1>
    16ea:	30 97       	sbiw	r30, 0x00	; 0
    16ec:	09 f0       	breq	.+2      	; 0x16f0 <__vector_108+0x42>
		tc_tcf0_ovf_callback();
    16ee:	19 95       	eicall
	}
}
    16f0:	ff 91       	pop	r31
    16f2:	ef 91       	pop	r30
    16f4:	bf 91       	pop	r27
    16f6:	af 91       	pop	r26
    16f8:	9f 91       	pop	r25
    16fa:	8f 91       	pop	r24
    16fc:	7f 91       	pop	r23
    16fe:	6f 91       	pop	r22
    1700:	5f 91       	pop	r21
    1702:	4f 91       	pop	r20
    1704:	3f 91       	pop	r19
    1706:	2f 91       	pop	r18
    1708:	0f 90       	pop	r0
    170a:	0b be       	out	0x3b, r0	; 59
    170c:	0f 90       	pop	r0
    170e:	09 be       	out	0x39, r0	; 57
    1710:	0f 90       	pop	r0
    1712:	08 be       	out	0x38, r0	; 56
    1714:	0f 90       	pop	r0
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	0f 90       	pop	r0
    171a:	1f 90       	pop	r1
    171c:	18 95       	reti

0000171e <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    171e:	1f 92       	push	r1
    1720:	0f 92       	push	r0
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	0f 92       	push	r0
    1726:	11 24       	eor	r1, r1
    1728:	08 b6       	in	r0, 0x38	; 56
    172a:	0f 92       	push	r0
    172c:	18 be       	out	0x38, r1	; 56
    172e:	09 b6       	in	r0, 0x39	; 57
    1730:	0f 92       	push	r0
    1732:	19 be       	out	0x39, r1	; 57
    1734:	0b b6       	in	r0, 0x3b	; 59
    1736:	0f 92       	push	r0
    1738:	1b be       	out	0x3b, r1	; 59
    173a:	2f 93       	push	r18
    173c:	3f 93       	push	r19
    173e:	4f 93       	push	r20
    1740:	5f 93       	push	r21
    1742:	6f 93       	push	r22
    1744:	7f 93       	push	r23
    1746:	8f 93       	push	r24
    1748:	9f 93       	push	r25
    174a:	af 93       	push	r26
    174c:	bf 93       	push	r27
    174e:	ef 93       	push	r30
    1750:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    1752:	e0 91 ce 22 	lds	r30, 0x22CE	; 0x8022ce <tc_tcf0_err_callback>
    1756:	f0 91 cf 22 	lds	r31, 0x22CF	; 0x8022cf <tc_tcf0_err_callback+0x1>
    175a:	30 97       	sbiw	r30, 0x00	; 0
    175c:	09 f0       	breq	.+2      	; 0x1760 <__vector_109+0x42>
		tc_tcf0_err_callback();
    175e:	19 95       	eicall
	}
}
    1760:	ff 91       	pop	r31
    1762:	ef 91       	pop	r30
    1764:	bf 91       	pop	r27
    1766:	af 91       	pop	r26
    1768:	9f 91       	pop	r25
    176a:	8f 91       	pop	r24
    176c:	7f 91       	pop	r23
    176e:	6f 91       	pop	r22
    1770:	5f 91       	pop	r21
    1772:	4f 91       	pop	r20
    1774:	3f 91       	pop	r19
    1776:	2f 91       	pop	r18
    1778:	0f 90       	pop	r0
    177a:	0b be       	out	0x3b, r0	; 59
    177c:	0f 90       	pop	r0
    177e:	09 be       	out	0x39, r0	; 57
    1780:	0f 90       	pop	r0
    1782:	08 be       	out	0x38, r0	; 56
    1784:	0f 90       	pop	r0
    1786:	0f be       	out	0x3f, r0	; 63
    1788:	0f 90       	pop	r0
    178a:	1f 90       	pop	r1
    178c:	18 95       	reti

0000178e <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    178e:	1f 92       	push	r1
    1790:	0f 92       	push	r0
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	0f 92       	push	r0
    1796:	11 24       	eor	r1, r1
    1798:	08 b6       	in	r0, 0x38	; 56
    179a:	0f 92       	push	r0
    179c:	18 be       	out	0x38, r1	; 56
    179e:	09 b6       	in	r0, 0x39	; 57
    17a0:	0f 92       	push	r0
    17a2:	19 be       	out	0x39, r1	; 57
    17a4:	0b b6       	in	r0, 0x3b	; 59
    17a6:	0f 92       	push	r0
    17a8:	1b be       	out	0x3b, r1	; 59
    17aa:	2f 93       	push	r18
    17ac:	3f 93       	push	r19
    17ae:	4f 93       	push	r20
    17b0:	5f 93       	push	r21
    17b2:	6f 93       	push	r22
    17b4:	7f 93       	push	r23
    17b6:	8f 93       	push	r24
    17b8:	9f 93       	push	r25
    17ba:	af 93       	push	r26
    17bc:	bf 93       	push	r27
    17be:	ef 93       	push	r30
    17c0:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    17c2:	e0 91 cc 22 	lds	r30, 0x22CC	; 0x8022cc <tc_tcf0_cca_callback>
    17c6:	f0 91 cd 22 	lds	r31, 0x22CD	; 0x8022cd <tc_tcf0_cca_callback+0x1>
    17ca:	30 97       	sbiw	r30, 0x00	; 0
    17cc:	09 f0       	breq	.+2      	; 0x17d0 <__vector_110+0x42>
		tc_tcf0_cca_callback();
    17ce:	19 95       	eicall
	}
}
    17d0:	ff 91       	pop	r31
    17d2:	ef 91       	pop	r30
    17d4:	bf 91       	pop	r27
    17d6:	af 91       	pop	r26
    17d8:	9f 91       	pop	r25
    17da:	8f 91       	pop	r24
    17dc:	7f 91       	pop	r23
    17de:	6f 91       	pop	r22
    17e0:	5f 91       	pop	r21
    17e2:	4f 91       	pop	r20
    17e4:	3f 91       	pop	r19
    17e6:	2f 91       	pop	r18
    17e8:	0f 90       	pop	r0
    17ea:	0b be       	out	0x3b, r0	; 59
    17ec:	0f 90       	pop	r0
    17ee:	09 be       	out	0x39, r0	; 57
    17f0:	0f 90       	pop	r0
    17f2:	08 be       	out	0x38, r0	; 56
    17f4:	0f 90       	pop	r0
    17f6:	0f be       	out	0x3f, r0	; 63
    17f8:	0f 90       	pop	r0
    17fa:	1f 90       	pop	r1
    17fc:	18 95       	reti

000017fe <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    17fe:	1f 92       	push	r1
    1800:	0f 92       	push	r0
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	0f 92       	push	r0
    1806:	11 24       	eor	r1, r1
    1808:	08 b6       	in	r0, 0x38	; 56
    180a:	0f 92       	push	r0
    180c:	18 be       	out	0x38, r1	; 56
    180e:	09 b6       	in	r0, 0x39	; 57
    1810:	0f 92       	push	r0
    1812:	19 be       	out	0x39, r1	; 57
    1814:	0b b6       	in	r0, 0x3b	; 59
    1816:	0f 92       	push	r0
    1818:	1b be       	out	0x3b, r1	; 59
    181a:	2f 93       	push	r18
    181c:	3f 93       	push	r19
    181e:	4f 93       	push	r20
    1820:	5f 93       	push	r21
    1822:	6f 93       	push	r22
    1824:	7f 93       	push	r23
    1826:	8f 93       	push	r24
    1828:	9f 93       	push	r25
    182a:	af 93       	push	r26
    182c:	bf 93       	push	r27
    182e:	ef 93       	push	r30
    1830:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    1832:	e0 91 ca 22 	lds	r30, 0x22CA	; 0x8022ca <tc_tcf0_ccb_callback>
    1836:	f0 91 cb 22 	lds	r31, 0x22CB	; 0x8022cb <tc_tcf0_ccb_callback+0x1>
    183a:	30 97       	sbiw	r30, 0x00	; 0
    183c:	09 f0       	breq	.+2      	; 0x1840 <__vector_111+0x42>
		tc_tcf0_ccb_callback();
    183e:	19 95       	eicall
	}
}
    1840:	ff 91       	pop	r31
    1842:	ef 91       	pop	r30
    1844:	bf 91       	pop	r27
    1846:	af 91       	pop	r26
    1848:	9f 91       	pop	r25
    184a:	8f 91       	pop	r24
    184c:	7f 91       	pop	r23
    184e:	6f 91       	pop	r22
    1850:	5f 91       	pop	r21
    1852:	4f 91       	pop	r20
    1854:	3f 91       	pop	r19
    1856:	2f 91       	pop	r18
    1858:	0f 90       	pop	r0
    185a:	0b be       	out	0x3b, r0	; 59
    185c:	0f 90       	pop	r0
    185e:	09 be       	out	0x39, r0	; 57
    1860:	0f 90       	pop	r0
    1862:	08 be       	out	0x38, r0	; 56
    1864:	0f 90       	pop	r0
    1866:	0f be       	out	0x3f, r0	; 63
    1868:	0f 90       	pop	r0
    186a:	1f 90       	pop	r1
    186c:	18 95       	reti

0000186e <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    186e:	1f 92       	push	r1
    1870:	0f 92       	push	r0
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	0f 92       	push	r0
    1876:	11 24       	eor	r1, r1
    1878:	08 b6       	in	r0, 0x38	; 56
    187a:	0f 92       	push	r0
    187c:	18 be       	out	0x38, r1	; 56
    187e:	09 b6       	in	r0, 0x39	; 57
    1880:	0f 92       	push	r0
    1882:	19 be       	out	0x39, r1	; 57
    1884:	0b b6       	in	r0, 0x3b	; 59
    1886:	0f 92       	push	r0
    1888:	1b be       	out	0x3b, r1	; 59
    188a:	2f 93       	push	r18
    188c:	3f 93       	push	r19
    188e:	4f 93       	push	r20
    1890:	5f 93       	push	r21
    1892:	6f 93       	push	r22
    1894:	7f 93       	push	r23
    1896:	8f 93       	push	r24
    1898:	9f 93       	push	r25
    189a:	af 93       	push	r26
    189c:	bf 93       	push	r27
    189e:	ef 93       	push	r30
    18a0:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    18a2:	e0 91 c8 22 	lds	r30, 0x22C8	; 0x8022c8 <tc_tcf0_ccc_callback>
    18a6:	f0 91 c9 22 	lds	r31, 0x22C9	; 0x8022c9 <tc_tcf0_ccc_callback+0x1>
    18aa:	30 97       	sbiw	r30, 0x00	; 0
    18ac:	09 f0       	breq	.+2      	; 0x18b0 <__vector_112+0x42>
		tc_tcf0_ccc_callback();
    18ae:	19 95       	eicall
	}
}
    18b0:	ff 91       	pop	r31
    18b2:	ef 91       	pop	r30
    18b4:	bf 91       	pop	r27
    18b6:	af 91       	pop	r26
    18b8:	9f 91       	pop	r25
    18ba:	8f 91       	pop	r24
    18bc:	7f 91       	pop	r23
    18be:	6f 91       	pop	r22
    18c0:	5f 91       	pop	r21
    18c2:	4f 91       	pop	r20
    18c4:	3f 91       	pop	r19
    18c6:	2f 91       	pop	r18
    18c8:	0f 90       	pop	r0
    18ca:	0b be       	out	0x3b, r0	; 59
    18cc:	0f 90       	pop	r0
    18ce:	09 be       	out	0x39, r0	; 57
    18d0:	0f 90       	pop	r0
    18d2:	08 be       	out	0x38, r0	; 56
    18d4:	0f 90       	pop	r0
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	0f 90       	pop	r0
    18da:	1f 90       	pop	r1
    18dc:	18 95       	reti

000018de <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    18de:	1f 92       	push	r1
    18e0:	0f 92       	push	r0
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	0f 92       	push	r0
    18e6:	11 24       	eor	r1, r1
    18e8:	08 b6       	in	r0, 0x38	; 56
    18ea:	0f 92       	push	r0
    18ec:	18 be       	out	0x38, r1	; 56
    18ee:	09 b6       	in	r0, 0x39	; 57
    18f0:	0f 92       	push	r0
    18f2:	19 be       	out	0x39, r1	; 57
    18f4:	0b b6       	in	r0, 0x3b	; 59
    18f6:	0f 92       	push	r0
    18f8:	1b be       	out	0x3b, r1	; 59
    18fa:	2f 93       	push	r18
    18fc:	3f 93       	push	r19
    18fe:	4f 93       	push	r20
    1900:	5f 93       	push	r21
    1902:	6f 93       	push	r22
    1904:	7f 93       	push	r23
    1906:	8f 93       	push	r24
    1908:	9f 93       	push	r25
    190a:	af 93       	push	r26
    190c:	bf 93       	push	r27
    190e:	ef 93       	push	r30
    1910:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    1912:	e0 91 c6 22 	lds	r30, 0x22C6	; 0x8022c6 <tc_tcf0_ccd_callback>
    1916:	f0 91 c7 22 	lds	r31, 0x22C7	; 0x8022c7 <tc_tcf0_ccd_callback+0x1>
    191a:	30 97       	sbiw	r30, 0x00	; 0
    191c:	09 f0       	breq	.+2      	; 0x1920 <__vector_113+0x42>
		tc_tcf0_ccd_callback();
    191e:	19 95       	eicall
	}
}
    1920:	ff 91       	pop	r31
    1922:	ef 91       	pop	r30
    1924:	bf 91       	pop	r27
    1926:	af 91       	pop	r26
    1928:	9f 91       	pop	r25
    192a:	8f 91       	pop	r24
    192c:	7f 91       	pop	r23
    192e:	6f 91       	pop	r22
    1930:	5f 91       	pop	r21
    1932:	4f 91       	pop	r20
    1934:	3f 91       	pop	r19
    1936:	2f 91       	pop	r18
    1938:	0f 90       	pop	r0
    193a:	0b be       	out	0x3b, r0	; 59
    193c:	0f 90       	pop	r0
    193e:	09 be       	out	0x39, r0	; 57
    1940:	0f 90       	pop	r0
    1942:	08 be       	out	0x38, r0	; 56
    1944:	0f 90       	pop	r0
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	0f 90       	pop	r0
    194a:	1f 90       	pop	r1
    194c:	18 95       	reti

0000194e <__vector_114>:
 *
 * This function will handle interrupt on Timer Counter F1 overflow and
 * call the callback function.
 */
ISR(TCF1_OVF_vect)
{
    194e:	1f 92       	push	r1
    1950:	0f 92       	push	r0
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	0f 92       	push	r0
    1956:	11 24       	eor	r1, r1
    1958:	08 b6       	in	r0, 0x38	; 56
    195a:	0f 92       	push	r0
    195c:	18 be       	out	0x38, r1	; 56
    195e:	09 b6       	in	r0, 0x39	; 57
    1960:	0f 92       	push	r0
    1962:	19 be       	out	0x39, r1	; 57
    1964:	0b b6       	in	r0, 0x3b	; 59
    1966:	0f 92       	push	r0
    1968:	1b be       	out	0x3b, r1	; 59
    196a:	2f 93       	push	r18
    196c:	3f 93       	push	r19
    196e:	4f 93       	push	r20
    1970:	5f 93       	push	r21
    1972:	6f 93       	push	r22
    1974:	7f 93       	push	r23
    1976:	8f 93       	push	r24
    1978:	9f 93       	push	r25
    197a:	af 93       	push	r26
    197c:	bf 93       	push	r27
    197e:	ef 93       	push	r30
    1980:	ff 93       	push	r31
	if (tc_tcf1_ovf_callback) {
    1982:	e0 91 c4 22 	lds	r30, 0x22C4	; 0x8022c4 <tc_tcf1_ovf_callback>
    1986:	f0 91 c5 22 	lds	r31, 0x22C5	; 0x8022c5 <tc_tcf1_ovf_callback+0x1>
    198a:	30 97       	sbiw	r30, 0x00	; 0
    198c:	09 f0       	breq	.+2      	; 0x1990 <__vector_114+0x42>
		tc_tcf1_ovf_callback();
    198e:	19 95       	eicall
	}
}
    1990:	ff 91       	pop	r31
    1992:	ef 91       	pop	r30
    1994:	bf 91       	pop	r27
    1996:	af 91       	pop	r26
    1998:	9f 91       	pop	r25
    199a:	8f 91       	pop	r24
    199c:	7f 91       	pop	r23
    199e:	6f 91       	pop	r22
    19a0:	5f 91       	pop	r21
    19a2:	4f 91       	pop	r20
    19a4:	3f 91       	pop	r19
    19a6:	2f 91       	pop	r18
    19a8:	0f 90       	pop	r0
    19aa:	0b be       	out	0x3b, r0	; 59
    19ac:	0f 90       	pop	r0
    19ae:	09 be       	out	0x39, r0	; 57
    19b0:	0f 90       	pop	r0
    19b2:	08 be       	out	0x38, r0	; 56
    19b4:	0f 90       	pop	r0
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	0f 90       	pop	r0
    19ba:	1f 90       	pop	r1
    19bc:	18 95       	reti

000019be <__vector_115>:
 *
 * This function will handle interrupt on Timer Counter F1 error and
 * call the callback function.
 */
ISR(TCF1_ERR_vect)
{
    19be:	1f 92       	push	r1
    19c0:	0f 92       	push	r0
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	0f 92       	push	r0
    19c6:	11 24       	eor	r1, r1
    19c8:	08 b6       	in	r0, 0x38	; 56
    19ca:	0f 92       	push	r0
    19cc:	18 be       	out	0x38, r1	; 56
    19ce:	09 b6       	in	r0, 0x39	; 57
    19d0:	0f 92       	push	r0
    19d2:	19 be       	out	0x39, r1	; 57
    19d4:	0b b6       	in	r0, 0x3b	; 59
    19d6:	0f 92       	push	r0
    19d8:	1b be       	out	0x3b, r1	; 59
    19da:	2f 93       	push	r18
    19dc:	3f 93       	push	r19
    19de:	4f 93       	push	r20
    19e0:	5f 93       	push	r21
    19e2:	6f 93       	push	r22
    19e4:	7f 93       	push	r23
    19e6:	8f 93       	push	r24
    19e8:	9f 93       	push	r25
    19ea:	af 93       	push	r26
    19ec:	bf 93       	push	r27
    19ee:	ef 93       	push	r30
    19f0:	ff 93       	push	r31
	if (tc_tcf1_err_callback) {
    19f2:	e0 91 c2 22 	lds	r30, 0x22C2	; 0x8022c2 <tc_tcf1_err_callback>
    19f6:	f0 91 c3 22 	lds	r31, 0x22C3	; 0x8022c3 <tc_tcf1_err_callback+0x1>
    19fa:	30 97       	sbiw	r30, 0x00	; 0
    19fc:	09 f0       	breq	.+2      	; 0x1a00 <__vector_115+0x42>
		tc_tcf1_err_callback();
    19fe:	19 95       	eicall
	}
}
    1a00:	ff 91       	pop	r31
    1a02:	ef 91       	pop	r30
    1a04:	bf 91       	pop	r27
    1a06:	af 91       	pop	r26
    1a08:	9f 91       	pop	r25
    1a0a:	8f 91       	pop	r24
    1a0c:	7f 91       	pop	r23
    1a0e:	6f 91       	pop	r22
    1a10:	5f 91       	pop	r21
    1a12:	4f 91       	pop	r20
    1a14:	3f 91       	pop	r19
    1a16:	2f 91       	pop	r18
    1a18:	0f 90       	pop	r0
    1a1a:	0b be       	out	0x3b, r0	; 59
    1a1c:	0f 90       	pop	r0
    1a1e:	09 be       	out	0x39, r0	; 57
    1a20:	0f 90       	pop	r0
    1a22:	08 be       	out	0x38, r0	; 56
    1a24:	0f 90       	pop	r0
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	0f 90       	pop	r0
    1a2a:	1f 90       	pop	r1
    1a2c:	18 95       	reti

00001a2e <__vector_116>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF1_CCA_vect)
{
    1a2e:	1f 92       	push	r1
    1a30:	0f 92       	push	r0
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	0f 92       	push	r0
    1a36:	11 24       	eor	r1, r1
    1a38:	08 b6       	in	r0, 0x38	; 56
    1a3a:	0f 92       	push	r0
    1a3c:	18 be       	out	0x38, r1	; 56
    1a3e:	09 b6       	in	r0, 0x39	; 57
    1a40:	0f 92       	push	r0
    1a42:	19 be       	out	0x39, r1	; 57
    1a44:	0b b6       	in	r0, 0x3b	; 59
    1a46:	0f 92       	push	r0
    1a48:	1b be       	out	0x3b, r1	; 59
    1a4a:	2f 93       	push	r18
    1a4c:	3f 93       	push	r19
    1a4e:	4f 93       	push	r20
    1a50:	5f 93       	push	r21
    1a52:	6f 93       	push	r22
    1a54:	7f 93       	push	r23
    1a56:	8f 93       	push	r24
    1a58:	9f 93       	push	r25
    1a5a:	af 93       	push	r26
    1a5c:	bf 93       	push	r27
    1a5e:	ef 93       	push	r30
    1a60:	ff 93       	push	r31
	if (tc_tcf1_cca_callback) {
    1a62:	e0 91 c0 22 	lds	r30, 0x22C0	; 0x8022c0 <tc_tcf1_cca_callback>
    1a66:	f0 91 c1 22 	lds	r31, 0x22C1	; 0x8022c1 <tc_tcf1_cca_callback+0x1>
    1a6a:	30 97       	sbiw	r30, 0x00	; 0
    1a6c:	09 f0       	breq	.+2      	; 0x1a70 <__vector_116+0x42>
		tc_tcf1_cca_callback();
    1a6e:	19 95       	eicall
	}
}
    1a70:	ff 91       	pop	r31
    1a72:	ef 91       	pop	r30
    1a74:	bf 91       	pop	r27
    1a76:	af 91       	pop	r26
    1a78:	9f 91       	pop	r25
    1a7a:	8f 91       	pop	r24
    1a7c:	7f 91       	pop	r23
    1a7e:	6f 91       	pop	r22
    1a80:	5f 91       	pop	r21
    1a82:	4f 91       	pop	r20
    1a84:	3f 91       	pop	r19
    1a86:	2f 91       	pop	r18
    1a88:	0f 90       	pop	r0
    1a8a:	0b be       	out	0x3b, r0	; 59
    1a8c:	0f 90       	pop	r0
    1a8e:	09 be       	out	0x39, r0	; 57
    1a90:	0f 90       	pop	r0
    1a92:	08 be       	out	0x38, r0	; 56
    1a94:	0f 90       	pop	r0
    1a96:	0f be       	out	0x3f, r0	; 63
    1a98:	0f 90       	pop	r0
    1a9a:	1f 90       	pop	r1
    1a9c:	18 95       	reti

00001a9e <__vector_117>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF1_CCB_vect)
{
    1a9e:	1f 92       	push	r1
    1aa0:	0f 92       	push	r0
    1aa2:	0f b6       	in	r0, 0x3f	; 63
    1aa4:	0f 92       	push	r0
    1aa6:	11 24       	eor	r1, r1
    1aa8:	08 b6       	in	r0, 0x38	; 56
    1aaa:	0f 92       	push	r0
    1aac:	18 be       	out	0x38, r1	; 56
    1aae:	09 b6       	in	r0, 0x39	; 57
    1ab0:	0f 92       	push	r0
    1ab2:	19 be       	out	0x39, r1	; 57
    1ab4:	0b b6       	in	r0, 0x3b	; 59
    1ab6:	0f 92       	push	r0
    1ab8:	1b be       	out	0x3b, r1	; 59
    1aba:	2f 93       	push	r18
    1abc:	3f 93       	push	r19
    1abe:	4f 93       	push	r20
    1ac0:	5f 93       	push	r21
    1ac2:	6f 93       	push	r22
    1ac4:	7f 93       	push	r23
    1ac6:	8f 93       	push	r24
    1ac8:	9f 93       	push	r25
    1aca:	af 93       	push	r26
    1acc:	bf 93       	push	r27
    1ace:	ef 93       	push	r30
    1ad0:	ff 93       	push	r31
	if (tc_tcf1_ccb_callback) {
    1ad2:	e0 91 be 22 	lds	r30, 0x22BE	; 0x8022be <tc_tcf1_ccb_callback>
    1ad6:	f0 91 bf 22 	lds	r31, 0x22BF	; 0x8022bf <tc_tcf1_ccb_callback+0x1>
    1ada:	30 97       	sbiw	r30, 0x00	; 0
    1adc:	09 f0       	breq	.+2      	; 0x1ae0 <__vector_117+0x42>
		tc_tcf1_ccb_callback();
    1ade:	19 95       	eicall
	}
}
    1ae0:	ff 91       	pop	r31
    1ae2:	ef 91       	pop	r30
    1ae4:	bf 91       	pop	r27
    1ae6:	af 91       	pop	r26
    1ae8:	9f 91       	pop	r25
    1aea:	8f 91       	pop	r24
    1aec:	7f 91       	pop	r23
    1aee:	6f 91       	pop	r22
    1af0:	5f 91       	pop	r21
    1af2:	4f 91       	pop	r20
    1af4:	3f 91       	pop	r19
    1af6:	2f 91       	pop	r18
    1af8:	0f 90       	pop	r0
    1afa:	0b be       	out	0x3b, r0	; 59
    1afc:	0f 90       	pop	r0
    1afe:	09 be       	out	0x39, r0	; 57
    1b00:	0f 90       	pop	r0
    1b02:	08 be       	out	0x38, r0	; 56
    1b04:	0f 90       	pop	r0
    1b06:	0f be       	out	0x3f, r0	; 63
    1b08:	0f 90       	pop	r0
    1b0a:	1f 90       	pop	r1
    1b0c:	18 95       	reti

00001b0e <loadcell_min_max_tran>:
 *  Author: jan.rune.herheim
 */ 

#include "loadcell_logger.h"

uint8_t loadcell_min_max_tran(uint16_t current_value, uint16_t *data_array) {
    1b0e:	fb 01       	movw	r30, r22
	
	//find tran
	signed int tran = 0; //could go positive and negative, and could store a 15 bits number, hence enough for our 12 bits results.
	uint16_t tran_abs = 0;
	
	tran = current_value - *(data_array + POSITION_PREV); //tran = current - previous
    1b10:	22 81       	ldd	r18, Z+2	; 0x02
    1b12:	33 81       	ldd	r19, Z+3	; 0x03
    1b14:	ac 01       	movw	r20, r24
    1b16:	42 1b       	sub	r20, r18
    1b18:	53 0b       	sbc	r21, r19
    1b1a:	9a 01       	movw	r18, r20
	if ((abs(tran) > abs(*(data_array+POSITION_TRAN_MAX))) & (*(data_array+POSITION_ACCU_CNT) > 0)) //first step is not valid due to only one value.
    1b1c:	22 f4       	brpl	.+8      	; 0x1b26 <loadcell_min_max_tran+0x18>
    1b1e:	44 27       	eor	r20, r20
    1b20:	55 27       	eor	r21, r21
    1b22:	42 1b       	sub	r20, r18
    1b24:	53 0b       	sbc	r21, r19
    1b26:	62 85       	ldd	r22, Z+10	; 0x0a
    1b28:	73 85       	ldd	r23, Z+11	; 0x0b
    1b2a:	77 23       	and	r23, r23
    1b2c:	1c f4       	brge	.+6      	; 0x1b34 <loadcell_min_max_tran+0x26>
    1b2e:	71 95       	neg	r23
    1b30:	61 95       	neg	r22
    1b32:	71 09       	sbc	r23, r1
    1b34:	a1 e0       	ldi	r26, 0x01	; 1
    1b36:	64 17       	cp	r22, r20
    1b38:	75 07       	cpc	r23, r21
    1b3a:	0c f0       	brlt	.+2      	; 0x1b3e <loadcell_min_max_tran+0x30>
    1b3c:	a0 e0       	ldi	r26, 0x00	; 0
    1b3e:	aa 23       	and	r26, r26
    1b40:	a1 f0       	breq	.+40     	; 0x1b6a <loadcell_min_max_tran+0x5c>
    1b42:	61 e0       	ldi	r22, 0x01	; 1
    1b44:	a2 89       	ldd	r26, Z+18	; 0x12
    1b46:	b3 89       	ldd	r27, Z+19	; 0x13
    1b48:	ab 2b       	or	r26, r27
    1b4a:	09 f4       	brne	.+2      	; 0x1b4e <loadcell_min_max_tran+0x40>
    1b4c:	60 e0       	ldi	r22, 0x00	; 0
    1b4e:	66 23       	and	r22, r22
    1b50:	61 f0       	breq	.+24     	; 0x1b6a <loadcell_min_max_tran+0x5c>
	{
		if (tran < 0)
    1b52:	33 23       	and	r19, r19
    1b54:	44 f4       	brge	.+16     	; 0x1b66 <loadcell_min_max_tran+0x58>
		{
			tran_abs = abs(tran); //check if >2047, if yes this is the max limit that could be transferred.
    1b56:	9a 01       	movw	r18, r20
			if (tran_abs >= 0x7ff) //if yes the set to max value
    1b58:	2f 3f       	cpi	r18, 0xFF	; 255
    1b5a:	57 e0       	ldi	r21, 0x07	; 7
    1b5c:	35 07       	cpc	r19, r21
    1b5e:	10 f0       	brcs	.+4      	; 0x1b64 <loadcell_min_max_tran+0x56>
			{
				tran_abs = 0x7ff;
    1b60:	2f ef       	ldi	r18, 0xFF	; 255
    1b62:	37 e0       	ldi	r19, 0x07	; 7
			}
			tran_abs |= (1<<11); //flip the MSB of the 12 bits word to set the negative sign.
			tran = tran_abs;
    1b64:	38 60       	ori	r19, 0x08	; 8
		}
		
		*(data_array+POSITION_TRAN_MAX) = tran; //store new tran max.
    1b66:	22 87       	std	Z+10, r18	; 0x0a
    1b68:	33 87       	std	Z+11, r19	; 0x0b
	}
	
	//find min and max
	if (current_value < *(data_array+POSITION_MIN))
    1b6a:	26 81       	ldd	r18, Z+6	; 0x06
    1b6c:	37 81       	ldd	r19, Z+7	; 0x07
    1b6e:	82 17       	cp	r24, r18
    1b70:	93 07       	cpc	r25, r19
    1b72:	10 f4       	brcc	.+4      	; 0x1b78 <loadcell_min_max_tran+0x6a>
	{
		*(data_array+POSITION_MIN) = current_value; //store new min value.
    1b74:	86 83       	std	Z+6, r24	; 0x06
    1b76:	97 83       	std	Z+7, r25	; 0x07
	}
	if (current_value > *(data_array+POSITION_MAX))
    1b78:	20 85       	ldd	r18, Z+8	; 0x08
    1b7a:	31 85       	ldd	r19, Z+9	; 0x09
    1b7c:	28 17       	cp	r18, r24
    1b7e:	39 07       	cpc	r19, r25
    1b80:	10 f4       	brcc	.+4      	; 0x1b86 <loadcell_min_max_tran+0x78>
	{
		*(data_array+POSITION_MAX) = current_value; //Store new max.
    1b82:	80 87       	std	Z+8, r24	; 0x08
    1b84:	91 87       	std	Z+9, r25	; 0x09
	}
}
    1b86:	08 95       	ret

00001b88 <MQTTSerialize_connectLength>:

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    1b88:	ef 92       	push	r14
    1b8a:	ff 92       	push	r15
    1b8c:	0f 93       	push	r16
    1b8e:	1f 93       	push	r17
    1b90:	cf 93       	push	r28
    1b92:	df 93       	push	r29
    1b94:	ec 01       	movw	r28, r24
    1b96:	8e 81       	ldd	r24, Y+6	; 0x06
    1b98:	83 30       	cpi	r24, 0x03	; 3
    1b9a:	29 f0       	breq	.+10     	; 0x1ba6 <MQTTSerialize_connectLength+0x1e>
    1b9c:	84 30       	cpi	r24, 0x04	; 4
    1b9e:	31 f4       	brne	.+12     	; 0x1bac <MQTTSerialize_connectLength+0x24>
    1ba0:	0a e0       	ldi	r16, 0x0A	; 10
    1ba2:	10 e0       	ldi	r17, 0x00	; 0
    1ba4:	05 c0       	rjmp	.+10     	; 0x1bb0 <MQTTSerialize_connectLength+0x28>
    1ba6:	0c e0       	ldi	r16, 0x0C	; 12
    1ba8:	10 e0       	ldi	r17, 0x00	; 0
    1baa:	02 c0       	rjmp	.+4      	; 0x1bb0 <MQTTSerialize_connectLength+0x28>
    1bac:	00 e0       	ldi	r16, 0x00	; 0
    1bae:	10 e0       	ldi	r17, 0x00	; 0
    1bb0:	4f 81       	ldd	r20, Y+7	; 0x07
    1bb2:	58 85       	ldd	r21, Y+8	; 0x08
    1bb4:	69 85       	ldd	r22, Y+9	; 0x09
    1bb6:	7a 85       	ldd	r23, Y+10	; 0x0a
    1bb8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bba:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bbc:	fb d1       	rcall	.+1014   	; 0x1fb4 <MQTTstrlen>
    1bbe:	02 96       	adiw	r24, 0x02	; 2
    1bc0:	08 0f       	add	r16, r24
    1bc2:	19 1f       	adc	r17, r25
    1bc4:	88 89       	ldd	r24, Y+16	; 0x10
    1bc6:	88 23       	and	r24, r24
    1bc8:	a1 f0       	breq	.+40     	; 0x1bf2 <MQTTSerialize_connectLength+0x6a>
    1bca:	4f 89       	ldd	r20, Y+23	; 0x17
    1bcc:	58 8d       	ldd	r21, Y+24	; 0x18
    1bce:	69 8d       	ldd	r22, Y+25	; 0x19
    1bd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bd6:	ee d1       	rcall	.+988    	; 0x1fb4 <MQTTstrlen>
    1bd8:	7c 01       	movw	r14, r24
    1bda:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1bdc:	5e 8d       	ldd	r21, Y+30	; 0x1e
    1bde:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1be0:	78 a1       	ldd	r23, Y+32	; 0x20
    1be2:	89 a1       	ldd	r24, Y+33	; 0x21
    1be4:	9a a1       	ldd	r25, Y+34	; 0x22
    1be6:	e6 d1       	rcall	.+972    	; 0x1fb4 <MQTTstrlen>
    1be8:	8e 0d       	add	r24, r14
    1bea:	9f 1d       	adc	r25, r15
    1bec:	04 96       	adiw	r24, 0x04	; 4
    1bee:	08 0f       	add	r16, r24
    1bf0:	19 1f       	adc	r17, r25
    1bf2:	8d a1       	ldd	r24, Y+37	; 0x25
    1bf4:	9e a1       	ldd	r25, Y+38	; 0x26
    1bf6:	89 2b       	or	r24, r25
    1bf8:	21 f4       	brne	.+8      	; 0x1c02 <MQTTSerialize_connectLength+0x7a>
    1bfa:	89 a5       	ldd	r24, Y+41	; 0x29
    1bfc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bfe:	89 2b       	or	r24, r25
    1c00:	51 f0       	breq	.+20     	; 0x1c16 <MQTTSerialize_connectLength+0x8e>
    1c02:	4d a1       	ldd	r20, Y+37	; 0x25
    1c04:	5e a1       	ldd	r21, Y+38	; 0x26
    1c06:	6f a1       	ldd	r22, Y+39	; 0x27
    1c08:	78 a5       	ldd	r23, Y+40	; 0x28
    1c0a:	89 a5       	ldd	r24, Y+41	; 0x29
    1c0c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c0e:	d2 d1       	rcall	.+932    	; 0x1fb4 <MQTTstrlen>
    1c10:	02 96       	adiw	r24, 0x02	; 2
    1c12:	08 0f       	add	r16, r24
    1c14:	19 1f       	adc	r17, r25
    1c16:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c18:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c1a:	89 2b       	or	r24, r25
    1c1c:	21 f4       	brne	.+8      	; 0x1c26 <MQTTSerialize_connectLength+0x9e>
    1c1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c20:	98 a9       	ldd	r25, Y+48	; 0x30
    1c22:	89 2b       	or	r24, r25
    1c24:	51 f0       	breq	.+20     	; 0x1c3a <MQTTSerialize_connectLength+0xb2>
    1c26:	4b a5       	ldd	r20, Y+43	; 0x2b
    1c28:	5c a5       	ldd	r21, Y+44	; 0x2c
    1c2a:	6d a5       	ldd	r22, Y+45	; 0x2d
    1c2c:	7e a5       	ldd	r23, Y+46	; 0x2e
    1c2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c30:	98 a9       	ldd	r25, Y+48	; 0x30
    1c32:	c0 d1       	rcall	.+896    	; 0x1fb4 <MQTTstrlen>
    1c34:	02 96       	adiw	r24, 0x02	; 2
    1c36:	08 0f       	add	r16, r24
    1c38:	19 1f       	adc	r17, r25
    1c3a:	c8 01       	movw	r24, r16
    1c3c:	df 91       	pop	r29
    1c3e:	cf 91       	pop	r28
    1c40:	1f 91       	pop	r17
    1c42:	0f 91       	pop	r16
    1c44:	ff 90       	pop	r15
    1c46:	ef 90       	pop	r14
    1c48:	08 95       	ret

00001c4a <MQTTSerialize_connect>:
    1c4a:	af 92       	push	r10
    1c4c:	bf 92       	push	r11
    1c4e:	cf 92       	push	r12
    1c50:	df 92       	push	r13
    1c52:	ef 92       	push	r14
    1c54:	ff 92       	push	r15
    1c56:	0f 93       	push	r16
    1c58:	1f 93       	push	r17
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
    1c5e:	1f 92       	push	r1
    1c60:	1f 92       	push	r1
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    1c66:	6c 01       	movw	r12, r24
    1c68:	5b 01       	movw	r10, r22
    1c6a:	8a 01       	movw	r16, r20
    1c6c:	89 83       	std	Y+1, r24	; 0x01
    1c6e:	9a 83       	std	Y+2, r25	; 0x02
    1c70:	ca 01       	movw	r24, r20
    1c72:	8a df       	rcall	.-236    	; 0x1b88 <MQTTSerialize_connectLength>
    1c74:	7c 01       	movw	r14, r24
    1c76:	04 d1       	rcall	.+520    	; 0x1e80 <MQTTPacket_len>
    1c78:	a8 16       	cp	r10, r24
    1c7a:	b9 06       	cpc	r11, r25
    1c7c:	0c f4       	brge	.+2      	; 0x1c80 <MQTTSerialize_connect+0x36>
    1c7e:	9f c0       	rjmp	.+318    	; 0x1dbe <MQTTSerialize_connect+0x174>
    1c80:	60 e1       	ldi	r22, 0x10	; 16
    1c82:	ce 01       	movw	r24, r28
    1c84:	01 96       	adiw	r24, 0x01	; 1
    1c86:	0b d1       	rcall	.+534    	; 0x1e9e <writeChar>
    1c88:	b7 01       	movw	r22, r14
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
    1c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8e:	d2 d0       	rcall	.+420    	; 0x1e34 <MQTTPacket_encode>
    1c90:	29 81       	ldd	r18, Y+1	; 0x01
    1c92:	3a 81       	ldd	r19, Y+2	; 0x02
    1c94:	82 0f       	add	r24, r18
    1c96:	93 1f       	adc	r25, r19
    1c98:	89 83       	std	Y+1, r24	; 0x01
    1c9a:	9a 83       	std	Y+2, r25	; 0x02
    1c9c:	f8 01       	movw	r30, r16
    1c9e:	86 81       	ldd	r24, Z+6	; 0x06
    1ca0:	84 30       	cpi	r24, 0x04	; 4
    1ca2:	51 f4       	brne	.+20     	; 0x1cb8 <MQTTSerialize_connect+0x6e>
    1ca4:	60 e6       	ldi	r22, 0x60	; 96
    1ca6:	70 e2       	ldi	r23, 0x20	; 32
    1ca8:	ce 01       	movw	r24, r28
    1caa:	01 96       	adiw	r24, 0x01	; 1
    1cac:	21 d1       	rcall	.+578    	; 0x1ef0 <writeCString>
    1cae:	64 e0       	ldi	r22, 0x04	; 4
    1cb0:	ce 01       	movw	r24, r28
    1cb2:	01 96       	adiw	r24, 0x01	; 1
    1cb4:	f4 d0       	rcall	.+488    	; 0x1e9e <writeChar>
    1cb6:	09 c0       	rjmp	.+18     	; 0x1cca <MQTTSerialize_connect+0x80>
    1cb8:	65 e6       	ldi	r22, 0x65	; 101
    1cba:	70 e2       	ldi	r23, 0x20	; 32
    1cbc:	ce 01       	movw	r24, r28
    1cbe:	01 96       	adiw	r24, 0x01	; 1
    1cc0:	17 d1       	rcall	.+558    	; 0x1ef0 <writeCString>
    1cc2:	63 e0       	ldi	r22, 0x03	; 3
    1cc4:	ce 01       	movw	r24, r28
    1cc6:	01 96       	adiw	r24, 0x01	; 1
    1cc8:	ea d0       	rcall	.+468    	; 0x1e9e <writeChar>
    1cca:	f1 2c       	mov	r15, r1
    1ccc:	f8 01       	movw	r30, r16
    1cce:	87 85       	ldd	r24, Z+15	; 0x0f
    1cd0:	80 fb       	bst	r24, 0
    1cd2:	f1 f8       	bld	r15, 1
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	90 89       	ldd	r25, Z+16	; 0x10
    1cd8:	91 11       	cpse	r25, r1
    1cda:	01 c0       	rjmp	.+2      	; 0x1cde <MQTTSerialize_connect+0x94>
    1cdc:	80 e0       	ldi	r24, 0x00	; 0
    1cde:	80 fb       	bst	r24, 0
    1ce0:	f2 f8       	bld	r15, 2
    1ce2:	f2 fe       	sbrs	r15, 2
    1ce4:	0d c0       	rjmp	.+26     	; 0x1d00 <MQTTSerialize_connect+0xb6>
    1ce6:	f8 01       	movw	r30, r16
    1ce8:	84 a1       	ldd	r24, Z+36	; 0x24
    1cea:	83 70       	andi	r24, 0x03	; 3
    1cec:	88 0f       	add	r24, r24
    1cee:	88 0f       	add	r24, r24
    1cf0:	88 0f       	add	r24, r24
    1cf2:	9f 2d       	mov	r25, r15
    1cf4:	97 7e       	andi	r25, 0xE7	; 231
    1cf6:	f9 2e       	mov	r15, r25
    1cf8:	f8 2a       	or	r15, r24
    1cfa:	83 a1       	ldd	r24, Z+35	; 0x23
    1cfc:	80 fb       	bst	r24, 0
    1cfe:	f5 f8       	bld	r15, 5
    1d00:	f8 01       	movw	r30, r16
    1d02:	85 a1       	ldd	r24, Z+37	; 0x25
    1d04:	96 a1       	ldd	r25, Z+38	; 0x26
    1d06:	89 2b       	or	r24, r25
    1d08:	21 f4       	brne	.+8      	; 0x1d12 <MQTTSerialize_connect+0xc8>
    1d0a:	81 a5       	ldd	r24, Z+41	; 0x29
    1d0c:	92 a5       	ldd	r25, Z+42	; 0x2a
    1d0e:	89 2b       	or	r24, r25
    1d10:	11 f0       	breq	.+4      	; 0x1d16 <MQTTSerialize_connect+0xcc>
    1d12:	68 94       	set
    1d14:	f7 f8       	bld	r15, 7
    1d16:	f8 01       	movw	r30, r16
    1d18:	83 a5       	ldd	r24, Z+43	; 0x2b
    1d1a:	94 a5       	ldd	r25, Z+44	; 0x2c
    1d1c:	89 2b       	or	r24, r25
    1d1e:	21 f4       	brne	.+8      	; 0x1d28 <MQTTSerialize_connect+0xde>
    1d20:	87 a5       	ldd	r24, Z+47	; 0x2f
    1d22:	90 a9       	ldd	r25, Z+48	; 0x30
    1d24:	89 2b       	or	r24, r25
    1d26:	11 f0       	breq	.+4      	; 0x1d2c <MQTTSerialize_connect+0xe2>
    1d28:	68 94       	set
    1d2a:	f6 f8       	bld	r15, 6
    1d2c:	6f 2d       	mov	r22, r15
    1d2e:	ce 01       	movw	r24, r28
    1d30:	01 96       	adiw	r24, 0x01	; 1
    1d32:	b5 d0       	rcall	.+362    	; 0x1e9e <writeChar>
    1d34:	f8 01       	movw	r30, r16
    1d36:	65 85       	ldd	r22, Z+13	; 0x0d
    1d38:	76 85       	ldd	r23, Z+14	; 0x0e
    1d3a:	ce 01       	movw	r24, r28
    1d3c:	01 96       	adiw	r24, 0x01	; 1
    1d3e:	b9 d0       	rcall	.+370    	; 0x1eb2 <writeInt>
    1d40:	f8 01       	movw	r30, r16
    1d42:	27 81       	ldd	r18, Z+7	; 0x07
    1d44:	30 85       	ldd	r19, Z+8	; 0x08
    1d46:	41 85       	ldd	r20, Z+9	; 0x09
    1d48:	52 85       	ldd	r21, Z+10	; 0x0a
    1d4a:	63 85       	ldd	r22, Z+11	; 0x0b
    1d4c:	74 85       	ldd	r23, Z+12	; 0x0c
    1d4e:	ce 01       	movw	r24, r28
    1d50:	01 96       	adiw	r24, 0x01	; 1
    1d52:	f4 d0       	rcall	.+488    	; 0x1f3c <writeMQTTString>
    1d54:	f8 01       	movw	r30, r16
    1d56:	80 89       	ldd	r24, Z+16	; 0x10
    1d58:	88 23       	and	r24, r24
    1d5a:	99 f0       	breq	.+38     	; 0x1d82 <MQTTSerialize_connect+0x138>
    1d5c:	27 89       	ldd	r18, Z+23	; 0x17
    1d5e:	30 8d       	ldd	r19, Z+24	; 0x18
    1d60:	41 8d       	ldd	r20, Z+25	; 0x19
    1d62:	52 8d       	ldd	r21, Z+26	; 0x1a
    1d64:	63 8d       	ldd	r22, Z+27	; 0x1b
    1d66:	74 8d       	ldd	r23, Z+28	; 0x1c
    1d68:	ce 01       	movw	r24, r28
    1d6a:	01 96       	adiw	r24, 0x01	; 1
    1d6c:	e7 d0       	rcall	.+462    	; 0x1f3c <writeMQTTString>
    1d6e:	f8 01       	movw	r30, r16
    1d70:	25 8d       	ldd	r18, Z+29	; 0x1d
    1d72:	36 8d       	ldd	r19, Z+30	; 0x1e
    1d74:	47 8d       	ldd	r20, Z+31	; 0x1f
    1d76:	50 a1       	ldd	r21, Z+32	; 0x20
    1d78:	61 a1       	ldd	r22, Z+33	; 0x21
    1d7a:	72 a1       	ldd	r23, Z+34	; 0x22
    1d7c:	ce 01       	movw	r24, r28
    1d7e:	01 96       	adiw	r24, 0x01	; 1
    1d80:	dd d0       	rcall	.+442    	; 0x1f3c <writeMQTTString>
    1d82:	ef 2c       	mov	r14, r15
    1d84:	ff 20       	and	r15, r15
    1d86:	54 f4       	brge	.+20     	; 0x1d9c <MQTTSerialize_connect+0x152>
    1d88:	f8 01       	movw	r30, r16
    1d8a:	25 a1       	ldd	r18, Z+37	; 0x25
    1d8c:	36 a1       	ldd	r19, Z+38	; 0x26
    1d8e:	47 a1       	ldd	r20, Z+39	; 0x27
    1d90:	50 a5       	ldd	r21, Z+40	; 0x28
    1d92:	61 a5       	ldd	r22, Z+41	; 0x29
    1d94:	72 a5       	ldd	r23, Z+42	; 0x2a
    1d96:	ce 01       	movw	r24, r28
    1d98:	01 96       	adiw	r24, 0x01	; 1
    1d9a:	d0 d0       	rcall	.+416    	; 0x1f3c <writeMQTTString>
    1d9c:	e6 fe       	sbrs	r14, 6
    1d9e:	0a c0       	rjmp	.+20     	; 0x1db4 <MQTTSerialize_connect+0x16a>
    1da0:	f8 01       	movw	r30, r16
    1da2:	23 a5       	ldd	r18, Z+43	; 0x2b
    1da4:	34 a5       	ldd	r19, Z+44	; 0x2c
    1da6:	45 a5       	ldd	r20, Z+45	; 0x2d
    1da8:	56 a5       	ldd	r21, Z+46	; 0x2e
    1daa:	67 a5       	ldd	r22, Z+47	; 0x2f
    1dac:	70 a9       	ldd	r23, Z+48	; 0x30
    1dae:	ce 01       	movw	r24, r28
    1db0:	01 96       	adiw	r24, 0x01	; 1
    1db2:	c4 d0       	rcall	.+392    	; 0x1f3c <writeMQTTString>
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
    1db6:	9a 81       	ldd	r25, Y+2	; 0x02
    1db8:	8c 19       	sub	r24, r12
    1dba:	9d 09       	sbc	r25, r13
    1dbc:	02 c0       	rjmp	.+4      	; 0x1dc2 <MQTTSerialize_connect+0x178>
    1dbe:	8e ef       	ldi	r24, 0xFE	; 254
    1dc0:	9f ef       	ldi	r25, 0xFF	; 255
    1dc2:	0f 90       	pop	r0
    1dc4:	0f 90       	pop	r0
    1dc6:	df 91       	pop	r29
    1dc8:	cf 91       	pop	r28
    1dca:	1f 91       	pop	r17
    1dcc:	0f 91       	pop	r16
    1dce:	ff 90       	pop	r15
    1dd0:	ef 90       	pop	r14
    1dd2:	df 90       	pop	r13
    1dd4:	cf 90       	pop	r12
    1dd6:	bf 90       	pop	r11
    1dd8:	af 90       	pop	r10
    1dda:	08 95       	ret

00001ddc <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
    1ddc:	0f 93       	push	r16
    1dde:	1f 93       	push	r17
    1de0:	cf 93       	push	r28
    1de2:	df 93       	push	r29
    1de4:	1f 92       	push	r1
    1de6:	1f 92       	push	r1
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
    1dec:	89 83       	std	Y+1, r24	; 0x01
    1dee:	9a 83       	std	Y+2, r25	; 0x02

	FUNC_ENTRY;
	if (buflen < 2)
    1df0:	62 30       	cpi	r22, 0x02	; 2
    1df2:	71 05       	cpc	r23, r1
    1df4:	9c f0       	brlt	.+38     	; 0x1e1c <MQTTSerialize_zero+0x40>
    1df6:	8c 01       	movw	r16, r24
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
    1df8:	64 2f       	mov	r22, r20
    1dfa:	62 95       	swap	r22
    1dfc:	60 7f       	andi	r22, 0xF0	; 240
	writeChar(&ptr, header.byte); /* write header */
    1dfe:	ce 01       	movw	r24, r28
    1e00:	01 96       	adiw	r24, 0x01	; 1
    1e02:	4d d0       	rcall	.+154    	; 0x1e9e <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
    1e04:	60 e0       	ldi	r22, 0x00	; 0
    1e06:	70 e0       	ldi	r23, 0x00	; 0
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
    1e0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0c:	13 d0       	rcall	.+38     	; 0x1e34 <MQTTPacket_encode>
	rc = ptr - buf;
    1e0e:	29 81       	ldd	r18, Y+1	; 0x01
    1e10:	3a 81       	ldd	r19, Y+2	; 0x02
    1e12:	82 0f       	add	r24, r18
    1e14:	93 1f       	adc	r25, r19
    1e16:	80 1b       	sub	r24, r16
    1e18:	91 0b       	sbc	r25, r17
    1e1a:	02 c0       	rjmp	.+4      	; 0x1e20 <MQTTSerialize_zero+0x44>
	unsigned char *ptr = buf;

	FUNC_ENTRY;
	if (buflen < 2)
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    1e1c:	8e ef       	ldi	r24, 0xFE	; 254
    1e1e:	9f ef       	ldi	r25, 0xFF	; 255
	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
	rc = ptr - buf;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    1e20:	0f 90       	pop	r0
    1e22:	0f 90       	pop	r0
    1e24:	df 91       	pop	r29
    1e26:	cf 91       	pop	r28
    1e28:	1f 91       	pop	r17
    1e2a:	0f 91       	pop	r16
    1e2c:	08 95       	ret

00001e2e <MQTTSerialize_disconnect>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
    1e2e:	4e e0       	ldi	r20, 0x0E	; 14
    1e30:	d5 cf       	rjmp	.-86     	; 0x1ddc <MQTTSerialize_zero>
}
    1e32:	08 95       	ret

00001e34 <MQTTPacket_encode>:
		}
	}
	mqttstring->cstring = NULL;
	FUNC_EXIT_RC(rc);
	return rc;
}
    1e34:	dc 01       	movw	r26, r24
    1e36:	e0 e0       	ldi	r30, 0x00	; 0
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	9b 01       	movw	r18, r22
    1e3c:	2f 77       	andi	r18, 0x7F	; 127
    1e3e:	30 78       	andi	r19, 0x80	; 128
    1e40:	33 23       	and	r19, r19
    1e42:	34 f4       	brge	.+12     	; 0x1e50 <MQTTPacket_encode+0x1c>
    1e44:	21 50       	subi	r18, 0x01	; 1
    1e46:	31 09       	sbc	r19, r1
    1e48:	20 68       	ori	r18, 0x80	; 128
    1e4a:	3f 6f       	ori	r19, 0xFF	; 255
    1e4c:	2f 5f       	subi	r18, 0xFF	; 255
    1e4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e50:	ab 01       	movw	r20, r22
    1e52:	77 23       	and	r23, r23
    1e54:	14 f4       	brge	.+4      	; 0x1e5a <MQTTPacket_encode+0x26>
    1e56:	41 58       	subi	r20, 0x81	; 129
    1e58:	5f 4f       	sbci	r21, 0xFF	; 255
    1e5a:	ba 01       	movw	r22, r20
    1e5c:	66 0f       	add	r22, r22
    1e5e:	67 2f       	mov	r22, r23
    1e60:	66 1f       	adc	r22, r22
    1e62:	77 0b       	sbc	r23, r23
    1e64:	16 16       	cp	r1, r22
    1e66:	17 06       	cpc	r1, r23
    1e68:	24 f4       	brge	.+8      	; 0x1e72 <MQTTPacket_encode+0x3e>
    1e6a:	31 96       	adiw	r30, 0x01	; 1
    1e6c:	20 68       	ori	r18, 0x80	; 128
    1e6e:	2d 93       	st	X+, r18
    1e70:	e4 cf       	rjmp	.-56     	; 0x1e3a <MQTTPacket_encode+0x6>
    1e72:	dc 01       	movw	r26, r24
    1e74:	ae 0f       	add	r26, r30
    1e76:	bf 1f       	adc	r27, r31
    1e78:	2c 93       	st	X, r18
    1e7a:	cf 01       	movw	r24, r30
    1e7c:	01 96       	adiw	r24, 0x01	; 1
    1e7e:	08 95       	ret

00001e80 <MQTTPacket_len>:
    1e80:	9c 01       	movw	r18, r24
    1e82:	2f 5f       	subi	r18, 0xFF	; 255
    1e84:	3f 4f       	sbci	r19, 0xFF	; 255
    1e86:	20 38       	cpi	r18, 0x80	; 128
    1e88:	31 05       	cpc	r19, r1
    1e8a:	14 f4       	brge	.+4      	; 0x1e90 <MQTTPacket_len+0x10>
    1e8c:	02 96       	adiw	r24, 0x02	; 2
    1e8e:	08 95       	ret
    1e90:	21 15       	cp	r18, r1
    1e92:	30 44       	sbci	r19, 0x40	; 64
    1e94:	14 f4       	brge	.+4      	; 0x1e9a <MQTTPacket_len+0x1a>
    1e96:	03 96       	adiw	r24, 0x03	; 3
    1e98:	08 95       	ret
    1e9a:	04 96       	adiw	r24, 0x04	; 4
    1e9c:	08 95       	ret

00001e9e <writeChar>:
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	a0 81       	ld	r26, Z
    1ea2:	b1 81       	ldd	r27, Z+1	; 0x01
    1ea4:	6c 93       	st	X, r22
    1ea6:	80 81       	ld	r24, Z
    1ea8:	91 81       	ldd	r25, Z+1	; 0x01
    1eaa:	01 96       	adiw	r24, 0x01	; 1
    1eac:	80 83       	st	Z, r24
    1eae:	91 83       	std	Z+1, r25	; 0x01
    1eb0:	08 95       	ret

00001eb2 <writeInt>:
    1eb2:	fc 01       	movw	r30, r24
    1eb4:	a0 81       	ld	r26, Z
    1eb6:	b1 81       	ldd	r27, Z+1	; 0x01
    1eb8:	cb 01       	movw	r24, r22
    1eba:	77 23       	and	r23, r23
    1ebc:	14 f4       	brge	.+4      	; 0x1ec2 <writeInt+0x10>
    1ebe:	81 50       	subi	r24, 0x01	; 1
    1ec0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec2:	9c 93       	st	X, r25
    1ec4:	a0 81       	ld	r26, Z
    1ec6:	b1 81       	ldd	r27, Z+1	; 0x01
    1ec8:	cd 01       	movw	r24, r26
    1eca:	01 96       	adiw	r24, 0x01	; 1
    1ecc:	80 83       	st	Z, r24
    1ece:	91 83       	std	Z+1, r25	; 0x01
    1ed0:	70 78       	andi	r23, 0x80	; 128
    1ed2:	77 23       	and	r23, r23
    1ed4:	2c f4       	brge	.+10     	; 0x1ee0 <writeInt+0x2e>
    1ed6:	61 50       	subi	r22, 0x01	; 1
    1ed8:	71 09       	sbc	r23, r1
    1eda:	7f 6f       	ori	r23, 0xFF	; 255
    1edc:	6f 5f       	subi	r22, 0xFF	; 255
    1ede:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee0:	11 96       	adiw	r26, 0x01	; 1
    1ee2:	6c 93       	st	X, r22
    1ee4:	80 81       	ld	r24, Z
    1ee6:	91 81       	ldd	r25, Z+1	; 0x01
    1ee8:	01 96       	adiw	r24, 0x01	; 1
    1eea:	80 83       	st	Z, r24
    1eec:	91 83       	std	Z+1, r25	; 0x01
    1eee:	08 95       	ret

00001ef0 <writeCString>:
    1ef0:	ef 92       	push	r14
    1ef2:	ff 92       	push	r15
    1ef4:	0f 93       	push	r16
    1ef6:	1f 93       	push	r17
    1ef8:	cf 93       	push	r28
    1efa:	df 93       	push	r29
    1efc:	8c 01       	movw	r16, r24
    1efe:	7b 01       	movw	r14, r22
    1f00:	eb 01       	movw	r28, r22
    1f02:	09 90       	ld	r0, Y+
    1f04:	00 20       	and	r0, r0
    1f06:	e9 f7       	brne	.-6      	; 0x1f02 <writeCString+0x12>
    1f08:	21 97       	sbiw	r28, 0x01	; 1
    1f0a:	c6 1b       	sub	r28, r22
    1f0c:	d7 0b       	sbc	r29, r23
    1f0e:	be 01       	movw	r22, r28
    1f10:	d0 df       	rcall	.-96     	; 0x1eb2 <writeInt>
    1f12:	ae 01       	movw	r20, r28
    1f14:	b7 01       	movw	r22, r14
    1f16:	f8 01       	movw	r30, r16
    1f18:	80 81       	ld	r24, Z
    1f1a:	91 81       	ldd	r25, Z+1	; 0x01
    1f1c:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <memcpy>
    1f20:	f8 01       	movw	r30, r16
    1f22:	80 81       	ld	r24, Z
    1f24:	91 81       	ldd	r25, Z+1	; 0x01
    1f26:	c8 0f       	add	r28, r24
    1f28:	d9 1f       	adc	r29, r25
    1f2a:	c0 83       	st	Z, r28
    1f2c:	d1 83       	std	Z+1, r29	; 0x01
    1f2e:	df 91       	pop	r29
    1f30:	cf 91       	pop	r28
    1f32:	1f 91       	pop	r17
    1f34:	0f 91       	pop	r16
    1f36:	ff 90       	pop	r15
    1f38:	ef 90       	pop	r14
    1f3a:	08 95       	ret

00001f3c <writeMQTTString>:
    1f3c:	ef 92       	push	r14
    1f3e:	ff 92       	push	r15
    1f40:	0f 93       	push	r16
    1f42:	1f 93       	push	r17
    1f44:	cf 93       	push	r28
    1f46:	df 93       	push	r29
    1f48:	00 d0       	rcall	.+0      	; 0x1f4a <writeMQTTString+0xe>
    1f4a:	00 d0       	rcall	.+0      	; 0x1f4c <writeMQTTString+0x10>
    1f4c:	cd b7       	in	r28, 0x3d	; 61
    1f4e:	de b7       	in	r29, 0x3e	; 62
    1f50:	7c 01       	movw	r14, r24
    1f52:	29 83       	std	Y+1, r18	; 0x01
    1f54:	3a 83       	std	Y+2, r19	; 0x02
    1f56:	4b 83       	std	Y+3, r20	; 0x03
    1f58:	5c 83       	std	Y+4, r21	; 0x04
    1f5a:	6d 83       	std	Y+5, r22	; 0x05
    1f5c:	7e 83       	std	Y+6, r23	; 0x06
    1f5e:	0b 81       	ldd	r16, Y+3	; 0x03
    1f60:	1c 81       	ldd	r17, Y+4	; 0x04
    1f62:	10 16       	cp	r1, r16
    1f64:	11 06       	cpc	r1, r17
    1f66:	94 f4       	brge	.+36     	; 0x1f8c <writeMQTTString+0x50>
    1f68:	b8 01       	movw	r22, r16
    1f6a:	a3 df       	rcall	.-186    	; 0x1eb2 <writeInt>
    1f6c:	6d 81       	ldd	r22, Y+5	; 0x05
    1f6e:	7e 81       	ldd	r23, Y+6	; 0x06
    1f70:	a8 01       	movw	r20, r16
    1f72:	f7 01       	movw	r30, r14
    1f74:	80 81       	ld	r24, Z
    1f76:	91 81       	ldd	r25, Z+1	; 0x01
    1f78:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <memcpy>
    1f7c:	f7 01       	movw	r30, r14
    1f7e:	80 81       	ld	r24, Z
    1f80:	91 81       	ldd	r25, Z+1	; 0x01
    1f82:	08 0f       	add	r16, r24
    1f84:	19 1f       	adc	r17, r25
    1f86:	00 83       	st	Z, r16
    1f88:	11 83       	std	Z+1, r17	; 0x01
    1f8a:	0a c0       	rjmp	.+20     	; 0x1fa0 <writeMQTTString+0x64>
    1f8c:	69 81       	ldd	r22, Y+1	; 0x01
    1f8e:	7a 81       	ldd	r23, Y+2	; 0x02
    1f90:	61 15       	cp	r22, r1
    1f92:	71 05       	cpc	r23, r1
    1f94:	11 f0       	breq	.+4      	; 0x1f9a <writeMQTTString+0x5e>
    1f96:	ac df       	rcall	.-168    	; 0x1ef0 <writeCString>
    1f98:	03 c0       	rjmp	.+6      	; 0x1fa0 <writeMQTTString+0x64>
    1f9a:	60 e0       	ldi	r22, 0x00	; 0
    1f9c:	70 e0       	ldi	r23, 0x00	; 0
    1f9e:	89 df       	rcall	.-238    	; 0x1eb2 <writeInt>
    1fa0:	26 96       	adiw	r28, 0x06	; 6
    1fa2:	cd bf       	out	0x3d, r28	; 61
    1fa4:	de bf       	out	0x3e, r29	; 62
    1fa6:	df 91       	pop	r29
    1fa8:	cf 91       	pop	r28
    1faa:	1f 91       	pop	r17
    1fac:	0f 91       	pop	r16
    1fae:	ff 90       	pop	r15
    1fb0:	ef 90       	pop	r14
    1fb2:	08 95       	ret

00001fb4 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
    1fb4:	cf 93       	push	r28
    1fb6:	df 93       	push	r29
    1fb8:	00 d0       	rcall	.+0      	; 0x1fba <MQTTstrlen+0x6>
    1fba:	00 d0       	rcall	.+0      	; 0x1fbc <MQTTstrlen+0x8>
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    1fc0:	49 83       	std	Y+1, r20	; 0x01
    1fc2:	5a 83       	std	Y+2, r21	; 0x02
    1fc4:	6b 83       	std	Y+3, r22	; 0x03
    1fc6:	7c 83       	std	Y+4, r23	; 0x04
    1fc8:	8d 83       	std	Y+5, r24	; 0x05
    1fca:	9e 83       	std	Y+6, r25	; 0x06
    1fcc:	a9 81       	ldd	r26, Y+1	; 0x01
    1fce:	ba 81       	ldd	r27, Y+2	; 0x02
	int rc = 0;

	if (mqttstring.cstring)
    1fd0:	10 97       	sbiw	r26, 0x00	; 0
    1fd2:	49 f0       	breq	.+18     	; 0x1fe6 <MQTTstrlen+0x32>
		rc = strlen(mqttstring.cstring);
    1fd4:	fd 01       	movw	r30, r26
    1fd6:	01 90       	ld	r0, Z+
    1fd8:	00 20       	and	r0, r0
    1fda:	e9 f7       	brne	.-6      	; 0x1fd6 <MQTTstrlen+0x22>
    1fdc:	31 97       	sbiw	r30, 0x01	; 1
    1fde:	cf 01       	movw	r24, r30
    1fe0:	8a 1b       	sub	r24, r26
    1fe2:	9b 0b       	sbc	r25, r27
    1fe4:	02 c0       	rjmp	.+4      	; 0x1fea <MQTTstrlen+0x36>
	else
		rc = mqttstring.lenstring.len;
    1fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe8:	9c 81       	ldd	r25, Y+4	; 0x04
	return rc;
}
    1fea:	26 96       	adiw	r28, 0x06	; 6
    1fec:	cd bf       	out	0x3d, r28	; 61
    1fee:	de bf       	out	0x3e, r29	; 62
    1ff0:	df 91       	pop	r29
    1ff2:	cf 91       	pop	r28
    1ff4:	08 95       	ret

00001ff6 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
    1ff6:	ef 92       	push	r14
    1ff8:	ff 92       	push	r15
    1ffa:	0f 93       	push	r16
    1ffc:	1f 93       	push	r17
    1ffe:	cf 93       	push	r28
    2000:	df 93       	push	r29
    2002:	00 d0       	rcall	.+0      	; 0x2004 <MQTTSerialize_publishLength+0xe>
    2004:	00 d0       	rcall	.+0      	; 0x2006 <MQTTSerialize_publishLength+0x10>
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
    200a:	7c 01       	movw	r14, r24
    200c:	f4 2f       	mov	r31, r20
    200e:	e5 2f       	mov	r30, r21
    2010:	86 2f       	mov	r24, r22
    2012:	97 2f       	mov	r25, r23
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
    2014:	42 2f       	mov	r20, r18
    2016:	53 2f       	mov	r21, r19
    2018:	6f 2f       	mov	r22, r31
    201a:	7e 2f       	mov	r23, r30
    201c:	cb df       	rcall	.-106    	; 0x1fb4 <MQTTstrlen>
    201e:	02 96       	adiw	r24, 0x02	; 2
    2020:	80 0f       	add	r24, r16
    2022:	91 1f       	adc	r25, r17
	if (qos > 0)
    2024:	1e 14       	cp	r1, r14
    2026:	1f 04       	cpc	r1, r15
    2028:	0c f4       	brge	.+2      	; 0x202c <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
    202a:	02 96       	adiw	r24, 0x02	; 2
	return len;
}
    202c:	26 96       	adiw	r28, 0x06	; 6
    202e:	cd bf       	out	0x3d, r28	; 61
    2030:	de bf       	out	0x3e, r29	; 62
    2032:	df 91       	pop	r29
    2034:	cf 91       	pop	r28
    2036:	1f 91       	pop	r17
    2038:	0f 91       	pop	r16
    203a:	ff 90       	pop	r15
    203c:	ef 90       	pop	r14
    203e:	08 95       	ret

00002040 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
    2040:	2f 92       	push	r2
    2042:	3f 92       	push	r3
    2044:	4f 92       	push	r4
    2046:	5f 92       	push	r5
    2048:	6f 92       	push	r6
    204a:	7f 92       	push	r7
    204c:	8f 92       	push	r8
    204e:	9f 92       	push	r9
    2050:	af 92       	push	r10
    2052:	bf 92       	push	r11
    2054:	cf 92       	push	r12
    2056:	df 92       	push	r13
    2058:	ef 92       	push	r14
    205a:	ff 92       	push	r15
    205c:	0f 93       	push	r16
    205e:	1f 93       	push	r17
    2060:	cf 93       	push	r28
    2062:	df 93       	push	r29
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
    2068:	2a 97       	sbiw	r28, 0x0a	; 10
    206a:	cd bf       	out	0x3d, r28	; 61
    206c:	de bf       	out	0x3e, r29	; 62
    206e:	2c 01       	movw	r4, r24
    2070:	1b 01       	movw	r2, r22
    2072:	49 87       	std	Y+9, r20	; 0x09
    2074:	39 01       	movw	r6, r18
    2076:	0a 87       	std	Y+10, r16	; 0x0a
    2078:	28 2d       	mov	r18, r8
    207a:	8b 82       	std	Y+3, r8	; 0x03
    207c:	39 2d       	mov	r19, r9
    207e:	9c 82       	std	Y+4, r9	; 0x04
    2080:	4a 2d       	mov	r20, r10
    2082:	ad 82       	std	Y+5, r10	; 0x05
    2084:	5b 2d       	mov	r21, r11
    2086:	be 82       	std	Y+6, r11	; 0x06
    2088:	6c 2d       	mov	r22, r12
    208a:	cf 82       	std	Y+7, r12	; 0x07
    208c:	7d 2d       	mov	r23, r13
    208e:	d8 86       	std	Y+8, r13	; 0x08
    2090:	ca a0       	ldd	r12, Y+34	; 0x22
    2092:	db a0       	ldd	r13, Y+35	; 0x23
	unsigned char *ptr = buf;
    2094:	89 83       	std	Y+1, r24	; 0x01
    2096:	9a 83       	std	Y+2, r25	; 0x02
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
    2098:	86 01       	movw	r16, r12
    209a:	c3 01       	movw	r24, r6
    209c:	ac df       	rcall	.-168    	; 0x1ff6 <MQTTSerialize_publishLength>
    209e:	8c 01       	movw	r16, r24
    20a0:	ef de       	rcall	.-546    	; 0x1e80 <MQTTPacket_len>
    20a2:	28 16       	cp	r2, r24
    20a4:	39 06       	cpc	r3, r25
    20a6:	bc f1       	brlt	.+110    	; 0x2116 <MQTTSerialize_publish+0xd6>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
    20a8:	60 e3       	ldi	r22, 0x30	; 48
	header.bits.dup = dup;
    20aa:	89 85       	ldd	r24, Y+9	; 0x09
    20ac:	80 fb       	bst	r24, 0
    20ae:	63 f9       	bld	r22, 3
	header.bits.qos = qos;
    20b0:	86 2d       	mov	r24, r6
    20b2:	83 70       	andi	r24, 0x03	; 3
    20b4:	88 0f       	add	r24, r24
    20b6:	69 7f       	andi	r22, 0xF9	; 249
    20b8:	68 2b       	or	r22, r24
	header.bits.retain = retained;
    20ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    20bc:	80 fb       	bst	r24, 0
	writeChar(&ptr, header.byte); /* write header */
    20be:	60 f9       	bld	r22, 0
    20c0:	ce 01       	movw	r24, r28

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
    20c2:	01 96       	adiw	r24, 0x01	; 1
    20c4:	ec de       	rcall	.-552    	; 0x1e9e <writeChar>
    20c6:	b8 01       	movw	r22, r16
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	9a 81       	ldd	r25, Y+2	; 0x02
    20cc:	b3 de       	rcall	.-666    	; 0x1e34 <MQTTPacket_encode>
    20ce:	29 81       	ldd	r18, Y+1	; 0x01
    20d0:	3a 81       	ldd	r19, Y+2	; 0x02
    20d2:	82 0f       	add	r24, r18
    20d4:	93 1f       	adc	r25, r19

	writeMQTTString(&ptr, topicName);
    20d6:	89 83       	std	Y+1, r24	; 0x01
    20d8:	9a 83       	std	Y+2, r25	; 0x02
    20da:	2b 81       	ldd	r18, Y+3	; 0x03
    20dc:	3c 81       	ldd	r19, Y+4	; 0x04
    20de:	4d 81       	ldd	r20, Y+5	; 0x05
    20e0:	5e 81       	ldd	r21, Y+6	; 0x06
    20e2:	6f 81       	ldd	r22, Y+7	; 0x07
    20e4:	78 85       	ldd	r23, Y+8	; 0x08
    20e6:	ce 01       	movw	r24, r28

	if (qos > 0)
    20e8:	01 96       	adiw	r24, 0x01	; 1
    20ea:	28 df       	rcall	.-432    	; 0x1f3c <writeMQTTString>
		writeInt(&ptr, packetid);
    20ec:	16 14       	cp	r1, r6
    20ee:	17 04       	cpc	r1, r7
    20f0:	24 f4       	brge	.+8      	; 0x20fa <MQTTSerialize_publish+0xba>
    20f2:	b7 01       	movw	r22, r14
    20f4:	ce 01       	movw	r24, r28

	memcpy(ptr, payload, payloadlen);
    20f6:	01 96       	adiw	r24, 0x01	; 1
    20f8:	dc de       	rcall	.-584    	; 0x1eb2 <writeInt>
    20fa:	a6 01       	movw	r20, r12
    20fc:	68 a1       	ldd	r22, Y+32	; 0x20
    20fe:	79 a1       	ldd	r23, Y+33	; 0x21
    2100:	89 81       	ldd	r24, Y+1	; 0x01
    2102:	9a 81       	ldd	r25, Y+2	; 0x02
	ptr += payloadlen;

	rc = ptr - buf;
    2104:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <memcpy>
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	9a 81       	ldd	r25, Y+2	; 0x02
    210c:	8c 0d       	add	r24, r12
    210e:	9d 1d       	adc	r25, r13
    2110:	84 19       	sub	r24, r4
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    2112:	95 09       	sbc	r25, r5
    2114:	02 c0       	rjmp	.+4      	; 0x211a <MQTTSerialize_publish+0xda>
	rc = ptr - buf;

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    2116:	8e ef       	ldi	r24, 0xFE	; 254
    2118:	9f ef       	ldi	r25, 0xFF	; 255
    211a:	2a 96       	adiw	r28, 0x0a	; 10
    211c:	cd bf       	out	0x3d, r28	; 61
    211e:	de bf       	out	0x3e, r29	; 62
    2120:	df 91       	pop	r29
    2122:	cf 91       	pop	r28
    2124:	1f 91       	pop	r17
    2126:	0f 91       	pop	r16
    2128:	ff 90       	pop	r15
    212a:	ef 90       	pop	r14
    212c:	df 90       	pop	r13
    212e:	cf 90       	pop	r12
    2130:	bf 90       	pop	r11
    2132:	af 90       	pop	r10
    2134:	9f 90       	pop	r9
    2136:	8f 90       	pop	r8
    2138:	7f 90       	pop	r7
    213a:	6f 90       	pop	r6
    213c:	5f 90       	pop	r5
    213e:	4f 90       	pop	r4
    2140:	3f 90       	pop	r3
    2142:	2f 90       	pop	r2
    2144:	08 95       	ret

00002146 <mqtt_packet>:
#include "string.h"
#include "MQTT_functions.h" 

/////////////MQTT////////////////////
int mqtt_packet(char *payload, char *package, int buflen)
{
    2146:	2f 92       	push	r2
    2148:	3f 92       	push	r3
    214a:	4f 92       	push	r4
    214c:	5f 92       	push	r5
    214e:	6f 92       	push	r6
    2150:	7f 92       	push	r7
    2152:	8f 92       	push	r8
    2154:	9f 92       	push	r9
    2156:	af 92       	push	r10
    2158:	bf 92       	push	r11
    215a:	cf 92       	push	r12
    215c:	df 92       	push	r13
    215e:	ef 92       	push	r14
    2160:	ff 92       	push	r15
    2162:	0f 93       	push	r16
    2164:	1f 93       	push	r17
    2166:	cf 93       	push	r28
    2168:	df 93       	push	r29
    216a:	cd b7       	in	r28, 0x3d	; 61
    216c:	de b7       	in	r29, 0x3e	; 62
    216e:	e7 97       	sbiw	r28, 0x37	; 55
    2170:	cd bf       	out	0x3d, r28	; 61
    2172:	de bf       	out	0x3e, r29	; 62
    2174:	f8 2e       	mov	r15, r24
    2176:	e9 2e       	mov	r14, r25
    2178:	1b 01       	movw	r2, r22
    217a:	2a 01       	movw	r4, r20
	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
    217c:	81 e3       	ldi	r24, 0x31	; 49
    217e:	ef e2       	ldi	r30, 0x2F	; 47
    2180:	f0 e2       	ldi	r31, 0x20	; 32
    2182:	de 01       	movw	r26, r28
    2184:	11 96       	adiw	r26, 0x01	; 1
    2186:	01 90       	ld	r0, Z+
    2188:	0d 92       	st	X+, r0
    218a:	8a 95       	dec	r24
    218c:	e1 f7       	brne	.-8      	; 0x2186 <mqtt_packet+0x40>
	
	//volatile int buflen = sizeof(&package);
	char buf[256];
	//buflen = sizeof(buf);
	MQTTString topicString = MQTTString_initializer;
    218e:	1c aa       	std	Y+52, r1	; 0x34
    2190:	1d aa       	std	Y+53, r1	; 0x35
    2192:	1e aa       	std	Y+54, r1	; 0x36
    2194:	1f aa       	std	Y+55, r1	; 0x37
	
	int payloadlen = strlen(payload);
    2196:	ef 2d       	mov	r30, r15
    2198:	f9 2f       	mov	r31, r25
    219a:	df 01       	movw	r26, r30
    219c:	0d 90       	ld	r0, X+
    219e:	00 20       	and	r0, r0
    21a0:	e9 f7       	brne	.-6      	; 0x219c <mqtt_packet+0x56>
    21a2:	11 97       	sbiw	r26, 0x01	; 1
    21a4:	8d 01       	movw	r16, r26
    21a6:	0e 1b       	sub	r16, r30
    21a8:	1f 0b       	sbc	r17, r31
	int len = 0;
	
	data.clientID.cstring = "LE";
    21aa:	8c e6       	ldi	r24, 0x6C	; 108
    21ac:	90 e2       	ldi	r25, 0x20	; 32
    21ae:	88 87       	std	Y+8, r24	; 0x08
    21b0:	99 87       	std	Y+9, r25	; 0x09
	data.keepAliveInterval = 20;
    21b2:	84 e1       	ldi	r24, 0x14	; 20
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	8e 87       	std	Y+14, r24	; 0x0e
    21b8:	9f 87       	std	Y+15, r25	; 0x0f
	data.cleansession = 1;
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	88 8b       	std	Y+16, r24	; 0x10
	data.username.cstring = "";
    21be:	85 ec       	ldi	r24, 0xC5	; 197
    21c0:	91 e2       	ldi	r25, 0x21	; 33
    21c2:	8e a3       	std	Y+38, r24	; 0x26
    21c4:	9f a3       	std	Y+39, r25	; 0x27
	data.password.cstring = "";
    21c6:	8c a7       	std	Y+44, r24	; 0x2c
    21c8:	9d a7       	std	Y+45, r25	; 0x2d
	data.MQTTVersion = 4;
    21ca:	84 e0       	ldi	r24, 0x04	; 4
    21cc:	8f 83       	std	Y+7, r24	; 0x07

	len = MQTTSerialize_connect((unsigned char *)package, buflen, &data);
    21ce:	ae 01       	movw	r20, r28
    21d0:	4f 5f       	subi	r20, 0xFF	; 255
    21d2:	5f 4f       	sbci	r21, 0xFF	; 255
    21d4:	b2 01       	movw	r22, r4
    21d6:	c1 01       	movw	r24, r2
    21d8:	38 dd       	rcall	.-1424   	; 0x1c4a <MQTTSerialize_connect>
    21da:	3c 01       	movw	r6, r24
	
	topicString.cstring = "LE/0"; //MAKE A GENERAL CONFIGUREATION OF THIS PARAMETER
    21dc:	8f e6       	ldi	r24, 0x6F	; 111
    21de:	90 e2       	ldi	r25, 0x20	; 32
    21e0:	8a ab       	std	Y+50, r24	; 0x32
    21e2:	9b ab       	std	Y+51, r25	; 0x33
	
	len += MQTTSerialize_publish((unsigned char *)(package + len), buflen - len, 0, 0, 0, 0, topicString, (unsigned char *)payload, payloadlen);
    21e4:	b2 01       	movw	r22, r4
    21e6:	66 19       	sub	r22, r6
    21e8:	77 09       	sbc	r23, r7
    21ea:	1f 93       	push	r17
    21ec:	0f 93       	push	r16
    21ee:	ef 92       	push	r14
    21f0:	ff 92       	push	r15
    21f2:	8a a8       	ldd	r8, Y+50	; 0x32
    21f4:	9b a8       	ldd	r9, Y+51	; 0x33
    21f6:	ac a8       	ldd	r10, Y+52	; 0x34
    21f8:	bd a8       	ldd	r11, Y+53	; 0x35
    21fa:	ce a8       	ldd	r12, Y+54	; 0x36
    21fc:	df a8       	ldd	r13, Y+55	; 0x37
    21fe:	e1 2c       	mov	r14, r1
    2200:	f1 2c       	mov	r15, r1
    2202:	00 e0       	ldi	r16, 0x00	; 0
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	40 e0       	ldi	r20, 0x00	; 0
    220a:	c1 01       	movw	r24, r2
    220c:	86 0d       	add	r24, r6
    220e:	97 1d       	adc	r25, r7
    2210:	17 df       	rcall	.-466    	; 0x2040 <MQTTSerialize_publish>
    2212:	68 0e       	add	r6, r24
    2214:	79 1e       	adc	r7, r25
		
	len += MQTTSerialize_disconnect((unsigned char *)(package + len), buflen - len);
    2216:	b2 01       	movw	r22, r4
    2218:	66 19       	sub	r22, r6
    221a:	77 09       	sbc	r23, r7
    221c:	c1 01       	movw	r24, r2
    221e:	86 0d       	add	r24, r6
    2220:	97 1d       	adc	r25, r7
    2222:	05 de       	rcall	.-1014   	; 0x1e2e <MQTTSerialize_disconnect>
	
	exit:
	
	//return 0;
	return len;
    2224:	0f 90       	pop	r0
    2226:	0f 90       	pop	r0
    2228:	0f 90       	pop	r0
    222a:	0f 90       	pop	r0
}
    222c:	86 0d       	add	r24, r6
    222e:	97 1d       	adc	r25, r7
    2230:	e7 96       	adiw	r28, 0x37	; 55
    2232:	cd bf       	out	0x3d, r28	; 61
    2234:	de bf       	out	0x3e, r29	; 62
    2236:	df 91       	pop	r29
    2238:	cf 91       	pop	r28
    223a:	1f 91       	pop	r17
    223c:	0f 91       	pop	r16
    223e:	ff 90       	pop	r15
    2240:	ef 90       	pop	r14
    2242:	df 90       	pop	r13
    2244:	cf 90       	pop	r12
    2246:	bf 90       	pop	r11
    2248:	af 90       	pop	r10
    224a:	9f 90       	pop	r9
    224c:	8f 90       	pop	r8
    224e:	7f 90       	pop	r7
    2250:	6f 90       	pop	r6
    2252:	5f 90       	pop	r5
    2254:	4f 90       	pop	r4
    2256:	3f 90       	pop	r3
    2258:	2f 90       	pop	r2
    225a:	08 95       	ret

0000225c <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    225c:	8f ef       	ldi	r24, 0xFF	; 255
    225e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    2262:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    2266:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    226a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    226e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    2272:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    2276:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
    2280:	08 95       	ret

00002282 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    2282:	cf 93       	push	r28
    2284:	df 93       	push	r29
    2286:	1f 92       	push	r1
    2288:	cd b7       	in	r28, 0x3d	; 61
    228a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    228c:	9f b7       	in	r25, 0x3f	; 63
    228e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    2290:	f8 94       	cli
	return flags;
    2292:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    2294:	e8 2f       	mov	r30, r24
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	e0 59       	subi	r30, 0x90	; 144
    229a:	ff 4f       	sbci	r31, 0xFF	; 255
    229c:	60 95       	com	r22
    229e:	80 81       	ld	r24, Z
    22a0:	68 23       	and	r22, r24
    22a2:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    22a4:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    22a6:	0f 90       	pop	r0
    22a8:	df 91       	pop	r29
    22aa:	cf 91       	pop	r28
    22ac:	08 95       	ret

000022ae <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    22ae:	cf 93       	push	r28
    22b0:	df 93       	push	r29
    22b2:	1f 92       	push	r1
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    22b8:	9f b7       	in	r25, 0x3f	; 63
    22ba:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    22bc:	f8 94       	cli
	return flags;
    22be:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    22c0:	e8 2f       	mov	r30, r24
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	e0 59       	subi	r30, 0x90	; 144
    22c6:	ff 4f       	sbci	r31, 0xFF	; 255
    22c8:	80 81       	ld	r24, Z
    22ca:	68 2b       	or	r22, r24
    22cc:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    22ce:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    22d0:	0f 90       	pop	r0
    22d2:	df 91       	pop	r29
    22d4:	cf 91       	pop	r28
    22d6:	08 95       	ret

000022d8 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    22d8:	cf 93       	push	r28
    22da:	df 93       	push	r29
    22dc:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    22e2:	c6 2f       	mov	r28, r22
    22e4:	d0 e0       	ldi	r29, 0x00	; 0
    22e6:	de 01       	movw	r26, r28
    22e8:	02 2e       	mov	r0, r18
    22ea:	02 c0       	rjmp	.+4      	; 0x22f0 <ioport_configure_port_pin+0x18>
    22ec:	b5 95       	asr	r27
    22ee:	a7 95       	ror	r26
    22f0:	0a 94       	dec	r0
    22f2:	e2 f7       	brpl	.-8      	; 0x22ec <ioport_configure_port_pin+0x14>
    22f4:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    22f6:	50 8b       	std	Z+16, r21	; 0x10
    22f8:	2f 5f       	subi	r18, 0xFF	; 255
    22fa:	3f 4f       	sbci	r19, 0xFF	; 255
    22fc:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    22fe:	28 30       	cpi	r18, 0x08	; 8
    2300:	31 05       	cpc	r19, r1
    2302:	89 f7       	brne	.-30     	; 0x22e6 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    2304:	40 ff       	sbrs	r20, 0
    2306:	0a c0       	rjmp	.+20     	; 0x231c <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    2308:	41 ff       	sbrs	r20, 1
    230a:	03 c0       	rjmp	.+6      	; 0x2312 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    230c:	fc 01       	movw	r30, r24
    230e:	65 83       	std	Z+5, r22	; 0x05
    2310:	02 c0       	rjmp	.+4      	; 0x2316 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    2312:	fc 01       	movw	r30, r24
    2314:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    2316:	fc 01       	movw	r30, r24
    2318:	61 83       	std	Z+1, r22	; 0x01
    231a:	02 c0       	rjmp	.+4      	; 0x2320 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    231c:	fc 01       	movw	r30, r24
    231e:	62 83       	std	Z+2, r22	; 0x02
	}
}
    2320:	df 91       	pop	r29
    2322:	cf 91       	pop	r28
    2324:	08 95       	ret

00002326 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    2326:	43 e0       	ldi	r20, 0x03	; 3
    2328:	50 e0       	ldi	r21, 0x00	; 0
    232a:	68 e0       	ldi	r22, 0x08	; 8
    232c:	80 ec       	ldi	r24, 0xC0	; 192
    232e:	97 e0       	ldi	r25, 0x07	; 7
    2330:	d3 df       	rcall	.-90     	; 0x22d8 <ioport_configure_port_pin>
    2332:	40 e0       	ldi	r20, 0x00	; 0
    2334:	58 e1       	ldi	r21, 0x18	; 24
    2336:	64 e0       	ldi	r22, 0x04	; 4
    2338:	80 ec       	ldi	r24, 0xC0	; 192
    233a:	97 e0       	ldi	r25, 0x07	; 7
    233c:	cd df       	rcall	.-102    	; 0x22d8 <ioport_configure_port_pin>
    233e:	43 e0       	ldi	r20, 0x03	; 3
    2340:	50 e0       	ldi	r21, 0x00	; 0
    2342:	68 e0       	ldi	r22, 0x08	; 8
    2344:	80 e8       	ldi	r24, 0x80	; 128
    2346:	96 e0       	ldi	r25, 0x06	; 6
    2348:	c7 df       	rcall	.-114    	; 0x22d8 <ioport_configure_port_pin>
    234a:	40 e0       	ldi	r20, 0x00	; 0
    234c:	50 e0       	ldi	r21, 0x00	; 0
    234e:	64 e0       	ldi	r22, 0x04	; 4
    2350:	80 e8       	ldi	r24, 0x80	; 128
    2352:	96 e0       	ldi	r25, 0x06	; 6
    2354:	c1 df       	rcall	.-126    	; 0x22d8 <ioport_configure_port_pin>
    2356:	43 e0       	ldi	r20, 0x03	; 3
    2358:	50 e0       	ldi	r21, 0x00	; 0
    235a:	68 e0       	ldi	r22, 0x08	; 8
    235c:	80 e4       	ldi	r24, 0x40	; 64
    235e:	96 e0       	ldi	r25, 0x06	; 6
    2360:	bb df       	rcall	.-138    	; 0x22d8 <ioport_configure_port_pin>
    2362:	40 e0       	ldi	r20, 0x00	; 0
    2364:	50 e0       	ldi	r21, 0x00	; 0
    2366:	64 e0       	ldi	r22, 0x04	; 4
    2368:	80 e4       	ldi	r24, 0x40	; 64
    236a:	96 e0       	ldi	r25, 0x06	; 6
    236c:	b5 cf       	rjmp	.-150    	; 0x22d8 <ioport_configure_port_pin>
    236e:	08 95       	ret

00002370 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    2370:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    2374:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    2376:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    2378:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    237c:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    237e:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    2382:	08 95       	ret

00002384 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    2384:	fc 01       	movw	r30, r24
    2386:	91 81       	ldd	r25, Z+1	; 0x01
    2388:	95 ff       	sbrs	r25, 5
    238a:	fd cf       	rjmp	.-6      	; 0x2386 <usart_putchar+0x2>
    238c:	60 83       	st	Z, r22
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	08 95       	ret

00002394 <usart_getchar>:
    2394:	fc 01       	movw	r30, r24
    2396:	91 81       	ldd	r25, Z+1	; 0x01
    2398:	99 23       	and	r25, r25
    239a:	ec f7       	brge	.-6      	; 0x2396 <usart_getchar+0x2>
    239c:	80 81       	ld	r24, Z
    239e:	08 95       	ret

000023a0 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    23a0:	4f 92       	push	r4
    23a2:	5f 92       	push	r5
    23a4:	6f 92       	push	r6
    23a6:	7f 92       	push	r7
    23a8:	8f 92       	push	r8
    23aa:	9f 92       	push	r9
    23ac:	af 92       	push	r10
    23ae:	bf 92       	push	r11
    23b0:	ef 92       	push	r14
    23b2:	ff 92       	push	r15
    23b4:	0f 93       	push	r16
    23b6:	1f 93       	push	r17
    23b8:	cf 93       	push	r28
    23ba:	7c 01       	movw	r14, r24
    23bc:	4a 01       	movw	r8, r20
    23be:	5b 01       	movw	r10, r22
    23c0:	28 01       	movw	r4, r16
    23c2:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    23c4:	fc 01       	movw	r30, r24
    23c6:	84 81       	ldd	r24, Z+4	; 0x04
    23c8:	82 ff       	sbrs	r24, 2
    23ca:	16 c0       	rjmp	.+44     	; 0x23f8 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    23cc:	d9 01       	movw	r26, r18
    23ce:	c8 01       	movw	r24, r16
    23d0:	68 94       	set
    23d2:	12 f8       	bld	r1, 2
    23d4:	b6 95       	lsr	r27
    23d6:	a7 95       	ror	r26
    23d8:	97 95       	ror	r25
    23da:	87 95       	ror	r24
    23dc:	16 94       	lsr	r1
    23de:	d1 f7       	brne	.-12     	; 0x23d4 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    23e0:	b9 01       	movw	r22, r18
    23e2:	a8 01       	movw	r20, r16
    23e4:	03 2e       	mov	r0, r19
    23e6:	36 e1       	ldi	r19, 0x16	; 22
    23e8:	76 95       	lsr	r23
    23ea:	67 95       	ror	r22
    23ec:	57 95       	ror	r21
    23ee:	47 95       	ror	r20
    23f0:	3a 95       	dec	r19
    23f2:	d1 f7       	brne	.-12     	; 0x23e8 <usart_set_baudrate+0x48>
    23f4:	30 2d       	mov	r19, r0
    23f6:	15 c0       	rjmp	.+42     	; 0x2422 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    23f8:	d9 01       	movw	r26, r18
    23fa:	c8 01       	movw	r24, r16
    23fc:	68 94       	set
    23fe:	13 f8       	bld	r1, 3
    2400:	b6 95       	lsr	r27
    2402:	a7 95       	ror	r26
    2404:	97 95       	ror	r25
    2406:	87 95       	ror	r24
    2408:	16 94       	lsr	r1
    240a:	d1 f7       	brne	.-12     	; 0x2400 <usart_set_baudrate+0x60>
		min_rate /= 2;
    240c:	b9 01       	movw	r22, r18
    240e:	a8 01       	movw	r20, r16
    2410:	03 2e       	mov	r0, r19
    2412:	37 e1       	ldi	r19, 0x17	; 23
    2414:	76 95       	lsr	r23
    2416:	67 95       	ror	r22
    2418:	57 95       	ror	r21
    241a:	47 95       	ror	r20
    241c:	3a 95       	dec	r19
    241e:	d1 f7       	brne	.-12     	; 0x2414 <usart_set_baudrate+0x74>
    2420:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    2422:	88 15       	cp	r24, r8
    2424:	99 05       	cpc	r25, r9
    2426:	aa 05       	cpc	r26, r10
    2428:	bb 05       	cpc	r27, r11
    242a:	08 f4       	brcc	.+2      	; 0x242e <usart_set_baudrate+0x8e>
    242c:	a6 c0       	rjmp	.+332    	; 0x257a <usart_set_baudrate+0x1da>
    242e:	84 16       	cp	r8, r20
    2430:	95 06       	cpc	r9, r21
    2432:	a6 06       	cpc	r10, r22
    2434:	b7 06       	cpc	r11, r23
    2436:	08 f4       	brcc	.+2      	; 0x243a <usart_set_baudrate+0x9a>
    2438:	a2 c0       	rjmp	.+324    	; 0x257e <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    243a:	f7 01       	movw	r30, r14
    243c:	84 81       	ldd	r24, Z+4	; 0x04
    243e:	82 fd       	sbrc	r24, 2
    2440:	04 c0       	rjmp	.+8      	; 0x244a <usart_set_baudrate+0xaa>
		baud *= 2;
    2442:	88 0c       	add	r8, r8
    2444:	99 1c       	adc	r9, r9
    2446:	aa 1c       	adc	r10, r10
    2448:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    244a:	c3 01       	movw	r24, r6
    244c:	b2 01       	movw	r22, r4
    244e:	a5 01       	movw	r20, r10
    2450:	94 01       	movw	r18, r8
    2452:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    2456:	2f 3f       	cpi	r18, 0xFF	; 255
    2458:	31 05       	cpc	r19, r1
    245a:	41 05       	cpc	r20, r1
    245c:	51 05       	cpc	r21, r1
    245e:	08 f4       	brcc	.+2      	; 0x2462 <usart_set_baudrate+0xc2>
    2460:	90 c0       	rjmp	.+288    	; 0x2582 <usart_set_baudrate+0x1e2>
    2462:	8f ef       	ldi	r24, 0xFF	; 255
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	a0 e0       	ldi	r26, 0x00	; 0
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	c9 ef       	ldi	r28, 0xF9	; 249
    246c:	05 c0       	rjmp	.+10     	; 0x2478 <usart_set_baudrate+0xd8>
    246e:	28 17       	cp	r18, r24
    2470:	39 07       	cpc	r19, r25
    2472:	4a 07       	cpc	r20, r26
    2474:	5b 07       	cpc	r21, r27
    2476:	58 f0       	brcs	.+22     	; 0x248e <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
    2478:	88 0f       	add	r24, r24
    247a:	99 1f       	adc	r25, r25
    247c:	aa 1f       	adc	r26, r26
    247e:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    2480:	cd 3f       	cpi	r28, 0xFD	; 253
    2482:	0c f4       	brge	.+2      	; 0x2486 <usart_set_baudrate+0xe6>
			limit |= 1;
    2484:	81 60       	ori	r24, 0x01	; 1
    2486:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    2488:	c7 30       	cpi	r28, 0x07	; 7
    248a:	89 f7       	brne	.-30     	; 0x246e <usart_set_baudrate+0xce>
    248c:	4f c0       	rjmp	.+158    	; 0x252c <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    248e:	cc 23       	and	r28, r28
    2490:	0c f0       	brlt	.+2      	; 0x2494 <usart_set_baudrate+0xf4>
    2492:	4c c0       	rjmp	.+152    	; 0x252c <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    2494:	d5 01       	movw	r26, r10
    2496:	c4 01       	movw	r24, r8
    2498:	88 0f       	add	r24, r24
    249a:	99 1f       	adc	r25, r25
    249c:	aa 1f       	adc	r26, r26
    249e:	bb 1f       	adc	r27, r27
    24a0:	88 0f       	add	r24, r24
    24a2:	99 1f       	adc	r25, r25
    24a4:	aa 1f       	adc	r26, r26
    24a6:	bb 1f       	adc	r27, r27
    24a8:	88 0f       	add	r24, r24
    24aa:	99 1f       	adc	r25, r25
    24ac:	aa 1f       	adc	r26, r26
    24ae:	bb 1f       	adc	r27, r27
    24b0:	48 1a       	sub	r4, r24
    24b2:	59 0a       	sbc	r5, r25
    24b4:	6a 0a       	sbc	r6, r26
    24b6:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    24b8:	ce 3f       	cpi	r28, 0xFE	; 254
    24ba:	f4 f4       	brge	.+60     	; 0x24f8 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    24bc:	8d ef       	ldi	r24, 0xFD	; 253
    24be:	9f ef       	ldi	r25, 0xFF	; 255
    24c0:	8c 1b       	sub	r24, r28
    24c2:	91 09       	sbc	r25, r1
    24c4:	c7 fd       	sbrc	r28, 7
    24c6:	93 95       	inc	r25
    24c8:	04 c0       	rjmp	.+8      	; 0x24d2 <usart_set_baudrate+0x132>
    24ca:	44 0c       	add	r4, r4
    24cc:	55 1c       	adc	r5, r5
    24ce:	66 1c       	adc	r6, r6
    24d0:	77 1c       	adc	r7, r7
    24d2:	8a 95       	dec	r24
    24d4:	d2 f7       	brpl	.-12     	; 0x24ca <usart_set_baudrate+0x12a>
    24d6:	d5 01       	movw	r26, r10
    24d8:	c4 01       	movw	r24, r8
    24da:	b6 95       	lsr	r27
    24dc:	a7 95       	ror	r26
    24de:	97 95       	ror	r25
    24e0:	87 95       	ror	r24
    24e2:	bc 01       	movw	r22, r24
    24e4:	cd 01       	movw	r24, r26
    24e6:	64 0d       	add	r22, r4
    24e8:	75 1d       	adc	r23, r5
    24ea:	86 1d       	adc	r24, r6
    24ec:	97 1d       	adc	r25, r7
    24ee:	a5 01       	movw	r20, r10
    24f0:	94 01       	movw	r18, r8
    24f2:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <__udivmodsi4>
    24f6:	37 c0       	rjmp	.+110    	; 0x2566 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
    24f8:	83 e0       	ldi	r24, 0x03	; 3
    24fa:	8c 0f       	add	r24, r28
    24fc:	a5 01       	movw	r20, r10
    24fe:	94 01       	movw	r18, r8
    2500:	04 c0       	rjmp	.+8      	; 0x250a <usart_set_baudrate+0x16a>
    2502:	22 0f       	add	r18, r18
    2504:	33 1f       	adc	r19, r19
    2506:	44 1f       	adc	r20, r20
    2508:	55 1f       	adc	r21, r21
    250a:	8a 95       	dec	r24
    250c:	d2 f7       	brpl	.-12     	; 0x2502 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
    250e:	da 01       	movw	r26, r20
    2510:	c9 01       	movw	r24, r18
    2512:	b6 95       	lsr	r27
    2514:	a7 95       	ror	r26
    2516:	97 95       	ror	r25
    2518:	87 95       	ror	r24
    251a:	bc 01       	movw	r22, r24
    251c:	cd 01       	movw	r24, r26
    251e:	64 0d       	add	r22, r4
    2520:	75 1d       	adc	r23, r5
    2522:	86 1d       	adc	r24, r6
    2524:	97 1d       	adc	r25, r7
    2526:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <__udivmodsi4>
    252a:	1d c0       	rjmp	.+58     	; 0x2566 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    252c:	83 e0       	ldi	r24, 0x03	; 3
    252e:	8c 0f       	add	r24, r28
    2530:	a5 01       	movw	r20, r10
    2532:	94 01       	movw	r18, r8
    2534:	04 c0       	rjmp	.+8      	; 0x253e <usart_set_baudrate+0x19e>
    2536:	22 0f       	add	r18, r18
    2538:	33 1f       	adc	r19, r19
    253a:	44 1f       	adc	r20, r20
    253c:	55 1f       	adc	r21, r21
    253e:	8a 95       	dec	r24
    2540:	d2 f7       	brpl	.-12     	; 0x2536 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
    2542:	da 01       	movw	r26, r20
    2544:	c9 01       	movw	r24, r18
    2546:	b6 95       	lsr	r27
    2548:	a7 95       	ror	r26
    254a:	97 95       	ror	r25
    254c:	87 95       	ror	r24
    254e:	bc 01       	movw	r22, r24
    2550:	cd 01       	movw	r24, r26
    2552:	64 0d       	add	r22, r4
    2554:	75 1d       	adc	r23, r5
    2556:	86 1d       	adc	r24, r6
    2558:	97 1d       	adc	r25, r7
    255a:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <__udivmodsi4>
    255e:	21 50       	subi	r18, 0x01	; 1
    2560:	31 09       	sbc	r19, r1
    2562:	41 09       	sbc	r20, r1
    2564:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    2566:	83 2f       	mov	r24, r19
    2568:	8f 70       	andi	r24, 0x0F	; 15
    256a:	c2 95       	swap	r28
    256c:	c0 7f       	andi	r28, 0xF0	; 240
    256e:	c8 2b       	or	r28, r24
    2570:	f7 01       	movw	r30, r14
    2572:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    2574:	26 83       	std	Z+6, r18	; 0x06

	return true;
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	18 c0       	rjmp	.+48     	; 0x25aa <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    257a:	80 e0       	ldi	r24, 0x00	; 0
    257c:	16 c0       	rjmp	.+44     	; 0x25aa <usart_set_baudrate+0x20a>
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	14 c0       	rjmp	.+40     	; 0x25aa <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    2582:	d5 01       	movw	r26, r10
    2584:	c4 01       	movw	r24, r8
    2586:	88 0f       	add	r24, r24
    2588:	99 1f       	adc	r25, r25
    258a:	aa 1f       	adc	r26, r26
    258c:	bb 1f       	adc	r27, r27
    258e:	88 0f       	add	r24, r24
    2590:	99 1f       	adc	r25, r25
    2592:	aa 1f       	adc	r26, r26
    2594:	bb 1f       	adc	r27, r27
    2596:	88 0f       	add	r24, r24
    2598:	99 1f       	adc	r25, r25
    259a:	aa 1f       	adc	r26, r26
    259c:	bb 1f       	adc	r27, r27
    259e:	48 1a       	sub	r4, r24
    25a0:	59 0a       	sbc	r5, r25
    25a2:	6a 0a       	sbc	r6, r26
    25a4:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    25a6:	c9 ef       	ldi	r28, 0xF9	; 249
    25a8:	89 cf       	rjmp	.-238    	; 0x24bc <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    25aa:	cf 91       	pop	r28
    25ac:	1f 91       	pop	r17
    25ae:	0f 91       	pop	r16
    25b0:	ff 90       	pop	r15
    25b2:	ef 90       	pop	r14
    25b4:	bf 90       	pop	r11
    25b6:	af 90       	pop	r10
    25b8:	9f 90       	pop	r9
    25ba:	8f 90       	pop	r8
    25bc:	7f 90       	pop	r7
    25be:	6f 90       	pop	r6
    25c0:	5f 90       	pop	r5
    25c2:	4f 90       	pop	r4
    25c4:	08 95       	ret

000025c6 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    25c6:	0f 93       	push	r16
    25c8:	1f 93       	push	r17
    25ca:	cf 93       	push	r28
    25cc:	df 93       	push	r29
    25ce:	ec 01       	movw	r28, r24
    25d0:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    25d2:	00 97       	sbiw	r24, 0x00	; 0
    25d4:	09 f4       	brne	.+2      	; 0x25d8 <usart_init_rs232+0x12>
    25d6:	36 c1       	rjmp	.+620    	; 0x2844 <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    25d8:	80 3c       	cpi	r24, 0xC0	; 192
    25da:	91 05       	cpc	r25, r1
    25dc:	21 f4       	brne	.+8      	; 0x25e6 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    25de:	60 e1       	ldi	r22, 0x10	; 16
    25e0:	80 e0       	ldi	r24, 0x00	; 0
    25e2:	4f de       	rcall	.-866    	; 0x2282 <sysclk_enable_module>
    25e4:	2f c1       	rjmp	.+606    	; 0x2844 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    25e6:	c0 34       	cpi	r28, 0x40	; 64
    25e8:	84 e0       	ldi	r24, 0x04	; 4
    25ea:	d8 07       	cpc	r29, r24
    25ec:	21 f4       	brne	.+8      	; 0x25f6 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    25ee:	68 e0       	ldi	r22, 0x08	; 8
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	47 de       	rcall	.-882    	; 0x2282 <sysclk_enable_module>
    25f4:	27 c1       	rjmp	.+590    	; 0x2844 <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    25f6:	c1 15       	cp	r28, r1
    25f8:	e4 e0       	ldi	r30, 0x04	; 4
    25fa:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    25fc:	21 f4       	brne	.+8      	; 0x2606 <usart_init_rs232+0x40>
    25fe:	64 e0       	ldi	r22, 0x04	; 4
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	3f de       	rcall	.-898    	; 0x2282 <sysclk_enable_module>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    2604:	1f c1       	rjmp	.+574    	; 0x2844 <usart_init_rs232+0x27e>
    2606:	c0 38       	cpi	r28, 0x80	; 128
    2608:	f1 e0       	ldi	r31, 0x01	; 1
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    260a:	df 07       	cpc	r29, r31
    260c:	21 f4       	brne	.+8      	; 0x2616 <usart_init_rs232+0x50>
    260e:	62 e0       	ldi	r22, 0x02	; 2
    2610:	80 e0       	ldi	r24, 0x00	; 0
    2612:	37 de       	rcall	.-914    	; 0x2282 <sysclk_enable_module>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    2614:	17 c1       	rjmp	.+558    	; 0x2844 <usart_init_rs232+0x27e>
    2616:	c1 15       	cp	r28, r1
    2618:	81 e0       	ldi	r24, 0x01	; 1
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    261a:	d8 07       	cpc	r29, r24
    261c:	21 f4       	brne	.+8      	; 0x2626 <usart_init_rs232+0x60>
    261e:	61 e0       	ldi	r22, 0x01	; 1
    2620:	80 e0       	ldi	r24, 0x00	; 0
    2622:	2f de       	rcall	.-930    	; 0x2282 <sysclk_enable_module>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    2624:	0f c1       	rjmp	.+542    	; 0x2844 <usart_init_rs232+0x27e>
    2626:	c0 38       	cpi	r28, 0x80	; 128
    2628:	e3 e0       	ldi	r30, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    262a:	de 07       	cpc	r29, r30
    262c:	21 f4       	brne	.+8      	; 0x2636 <usart_init_rs232+0x70>
    262e:	61 e0       	ldi	r22, 0x01	; 1
    2630:	81 e0       	ldi	r24, 0x01	; 1
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    2632:	27 de       	rcall	.-946    	; 0x2282 <sysclk_enable_module>
    2634:	07 c1       	rjmp	.+526    	; 0x2844 <usart_init_rs232+0x27e>
    2636:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    2638:	f3 e0       	ldi	r31, 0x03	; 3
    263a:	df 07       	cpc	r29, r31
    263c:	21 f4       	brne	.+8      	; 0x2646 <usart_init_rs232+0x80>
    263e:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    2640:	82 e0       	ldi	r24, 0x02	; 2
    2642:	1f de       	rcall	.-962    	; 0x2282 <sysclk_enable_module>
    2644:	ff c0       	rjmp	.+510    	; 0x2844 <usart_init_rs232+0x27e>
    2646:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2648:	82 e0       	ldi	r24, 0x02	; 2
    264a:	d8 07       	cpc	r29, r24
    264c:	21 f4       	brne	.+8      	; 0x2656 <usart_init_rs232+0x90>
    264e:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	17 de       	rcall	.-978    	; 0x2282 <sysclk_enable_module>
    2654:	f7 c0       	rjmp	.+494    	; 0x2844 <usart_init_rs232+0x27e>
    2656:	c0 34       	cpi	r28, 0x40	; 64
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    2658:	e2 e0       	ldi	r30, 0x02	; 2
    265a:	de 07       	cpc	r29, r30
    265c:	21 f4       	brne	.+8      	; 0x2666 <usart_init_rs232+0xa0>
    265e:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    2660:	82 e0       	ldi	r24, 0x02	; 2
    2662:	0f de       	rcall	.-994    	; 0x2282 <sysclk_enable_module>
    2664:	ef c0       	rjmp	.+478    	; 0x2844 <usart_init_rs232+0x27e>
    2666:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    2668:	f3 e0       	ldi	r31, 0x03	; 3
    266a:	df 07       	cpc	r29, r31
    266c:	21 f4       	brne	.+8      	; 0x2676 <usart_init_rs232+0xb0>
    266e:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    2670:	81 e0       	ldi	r24, 0x01	; 1
    2672:	07 de       	rcall	.-1010   	; 0x2282 <sysclk_enable_module>
    2674:	e7 c0       	rjmp	.+462    	; 0x2844 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    2676:	c0 32       	cpi	r28, 0x20	; 32
    2678:	83 e0       	ldi	r24, 0x03	; 3
    267a:	d8 07       	cpc	r29, r24
    267c:	21 f4       	brne	.+8      	; 0x2686 <usart_init_rs232+0xc0>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    267e:	64 e0       	ldi	r22, 0x04	; 4
    2680:	82 e0       	ldi	r24, 0x02	; 2
    2682:	ff dd       	rcall	.-1026   	; 0x2282 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    2684:	df c0       	rjmp	.+446    	; 0x2844 <usart_init_rs232+0x27e>
    2686:	c1 15       	cp	r28, r1
    2688:	e8 e0       	ldi	r30, 0x08	; 8
    268a:	de 07       	cpc	r29, r30
    268c:	21 f4       	brne	.+8      	; 0x2696 <usart_init_rs232+0xd0>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    268e:	61 e0       	ldi	r22, 0x01	; 1
    2690:	83 e0       	ldi	r24, 0x03	; 3
    2692:	f7 dd       	rcall	.-1042   	; 0x2282 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    2694:	d7 c0       	rjmp	.+430    	; 0x2844 <usart_init_rs232+0x27e>
    2696:	c1 15       	cp	r28, r1
    2698:	f9 e0       	ldi	r31, 0x09	; 9
    269a:	df 07       	cpc	r29, r31
    269c:	21 f4       	brne	.+8      	; 0x26a6 <usart_init_rs232+0xe0>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    269e:	61 e0       	ldi	r22, 0x01	; 1
    26a0:	84 e0       	ldi	r24, 0x04	; 4
    26a2:	ef dd       	rcall	.-1058   	; 0x2282 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    26a4:	cf c0       	rjmp	.+414    	; 0x2844 <usart_init_rs232+0x27e>
    26a6:	c1 15       	cp	r28, r1
    26a8:	8a e0       	ldi	r24, 0x0A	; 10
    26aa:	d8 07       	cpc	r29, r24
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    26ac:	21 f4       	brne	.+8      	; 0x26b6 <usart_init_rs232+0xf0>
    26ae:	61 e0       	ldi	r22, 0x01	; 1
    26b0:	85 e0       	ldi	r24, 0x05	; 5
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    26b2:	e7 dd       	rcall	.-1074   	; 0x2282 <sysclk_enable_module>
    26b4:	c7 c0       	rjmp	.+398    	; 0x2844 <usart_init_rs232+0x27e>
    26b6:	c1 15       	cp	r28, r1
    26b8:	eb e0       	ldi	r30, 0x0B	; 11
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    26ba:	de 07       	cpc	r29, r30
    26bc:	21 f4       	brne	.+8      	; 0x26c6 <usart_init_rs232+0x100>
    26be:	61 e0       	ldi	r22, 0x01	; 1
    26c0:	86 e0       	ldi	r24, 0x06	; 6
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    26c2:	df dd       	rcall	.-1090   	; 0x2282 <sysclk_enable_module>
    26c4:	bf c0       	rjmp	.+382    	; 0x2844 <usart_init_rs232+0x27e>
    26c6:	c0 34       	cpi	r28, 0x40	; 64
    26c8:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    26ca:	df 07       	cpc	r29, r31
    26cc:	21 f4       	brne	.+8      	; 0x26d6 <usart_init_rs232+0x110>
    26ce:	62 e0       	ldi	r22, 0x02	; 2
    26d0:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    26d2:	d7 dd       	rcall	.-1106   	; 0x2282 <sysclk_enable_module>
    26d4:	b7 c0       	rjmp	.+366    	; 0x2844 <usart_init_rs232+0x27e>
    26d6:	c0 34       	cpi	r28, 0x40	; 64
    26d8:	89 e0       	ldi	r24, 0x09	; 9
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    26da:	d8 07       	cpc	r29, r24
    26dc:	21 f4       	brne	.+8      	; 0x26e6 <usart_init_rs232+0x120>
    26de:	62 e0       	ldi	r22, 0x02	; 2
    26e0:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    26e2:	cf dd       	rcall	.-1122   	; 0x2282 <sysclk_enable_module>
    26e4:	af c0       	rjmp	.+350    	; 0x2844 <usart_init_rs232+0x27e>
    26e6:	c0 34       	cpi	r28, 0x40	; 64
    26e8:	ea e0       	ldi	r30, 0x0A	; 10
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    26ea:	de 07       	cpc	r29, r30
    26ec:	21 f4       	brne	.+8      	; 0x26f6 <usart_init_rs232+0x130>
    26ee:	62 e0       	ldi	r22, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    26f0:	85 e0       	ldi	r24, 0x05	; 5
    26f2:	c7 dd       	rcall	.-1138   	; 0x2282 <sysclk_enable_module>
    26f4:	a7 c0       	rjmp	.+334    	; 0x2844 <usart_init_rs232+0x27e>
    26f6:	c0 34       	cpi	r28, 0x40	; 64
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    26f8:	fb e0       	ldi	r31, 0x0B	; 11
    26fa:	df 07       	cpc	r29, r31
    26fc:	21 f4       	brne	.+8      	; 0x2706 <usart_init_rs232+0x140>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    26fe:	62 e0       	ldi	r22, 0x02	; 2
    2700:	86 e0       	ldi	r24, 0x06	; 6
    2702:	bf dd       	rcall	.-1154   	; 0x2282 <sysclk_enable_module>
    2704:	9f c0       	rjmp	.+318    	; 0x2844 <usart_init_rs232+0x27e>
    2706:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    2708:	88 e0       	ldi	r24, 0x08	; 8
    270a:	d8 07       	cpc	r29, r24
    270c:	21 f4       	brne	.+8      	; 0x2716 <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    270e:	64 e0       	ldi	r22, 0x04	; 4
    2710:	83 e0       	ldi	r24, 0x03	; 3
    2712:	b7 dd       	rcall	.-1170   	; 0x2282 <sysclk_enable_module>
    2714:	97 c0       	rjmp	.+302    	; 0x2844 <usart_init_rs232+0x27e>
    2716:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    2718:	e9 e0       	ldi	r30, 0x09	; 9
    271a:	de 07       	cpc	r29, r30
    271c:	21 f4       	brne	.+8      	; 0x2726 <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    271e:	64 e0       	ldi	r22, 0x04	; 4
    2720:	84 e0       	ldi	r24, 0x04	; 4
    2722:	af dd       	rcall	.-1186   	; 0x2282 <sysclk_enable_module>
    2724:	8f c0       	rjmp	.+286    	; 0x2844 <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    2726:	c0 39       	cpi	r28, 0x90	; 144
    2728:	fa e0       	ldi	r31, 0x0A	; 10
    272a:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    272c:	21 f4       	brne	.+8      	; 0x2736 <usart_init_rs232+0x170>
    272e:	64 e0       	ldi	r22, 0x04	; 4
    2730:	85 e0       	ldi	r24, 0x05	; 5
    2732:	a7 dd       	rcall	.-1202   	; 0x2282 <sysclk_enable_module>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    2734:	87 c0       	rjmp	.+270    	; 0x2844 <usart_init_rs232+0x27e>
    2736:	c0 39       	cpi	r28, 0x90	; 144
    2738:	8b e0       	ldi	r24, 0x0B	; 11
    273a:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    273c:	21 f4       	brne	.+8      	; 0x2746 <usart_init_rs232+0x180>
    273e:	64 e0       	ldi	r22, 0x04	; 4
    2740:	86 e0       	ldi	r24, 0x06	; 6
    2742:	9f dd       	rcall	.-1218   	; 0x2282 <sysclk_enable_module>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    2744:	7f c0       	rjmp	.+254    	; 0x2844 <usart_init_rs232+0x27e>
    2746:	c0 3c       	cpi	r28, 0xC0	; 192
    2748:	e8 e0       	ldi	r30, 0x08	; 8
    274a:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    274c:	21 f4       	brne	.+8      	; 0x2756 <usart_init_rs232+0x190>
    274e:	68 e0       	ldi	r22, 0x08	; 8
    2750:	83 e0       	ldi	r24, 0x03	; 3
    2752:	97 dd       	rcall	.-1234   	; 0x2282 <sysclk_enable_module>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    2754:	77 c0       	rjmp	.+238    	; 0x2844 <usart_init_rs232+0x27e>
    2756:	c0 3c       	cpi	r28, 0xC0	; 192
    2758:	f9 e0       	ldi	r31, 0x09	; 9
    275a:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    275c:	21 f4       	brne	.+8      	; 0x2766 <usart_init_rs232+0x1a0>
    275e:	68 e0       	ldi	r22, 0x08	; 8
    2760:	84 e0       	ldi	r24, 0x04	; 4
    2762:	8f dd       	rcall	.-1250   	; 0x2282 <sysclk_enable_module>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    2764:	6f c0       	rjmp	.+222    	; 0x2844 <usart_init_rs232+0x27e>
    2766:	c0 3c       	cpi	r28, 0xC0	; 192
    2768:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    276a:	d8 07       	cpc	r29, r24
    276c:	21 f4       	brne	.+8      	; 0x2776 <usart_init_rs232+0x1b0>
    276e:	68 e0       	ldi	r22, 0x08	; 8
    2770:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    2772:	87 dd       	rcall	.-1266   	; 0x2282 <sysclk_enable_module>
    2774:	67 c0       	rjmp	.+206    	; 0x2844 <usart_init_rs232+0x27e>
    2776:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    2778:	eb e0       	ldi	r30, 0x0B	; 11
    277a:	de 07       	cpc	r29, r30
    277c:	21 f4       	brne	.+8      	; 0x2786 <usart_init_rs232+0x1c0>
    277e:	68 e0       	ldi	r22, 0x08	; 8
    2780:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    2782:	7f dd       	rcall	.-1282   	; 0x2282 <sysclk_enable_module>
    2784:	5f c0       	rjmp	.+190    	; 0x2844 <usart_init_rs232+0x27e>
    2786:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    2788:	f8 e0       	ldi	r31, 0x08	; 8
    278a:	df 07       	cpc	r29, r31
    278c:	21 f4       	brne	.+8      	; 0x2796 <usart_init_rs232+0x1d0>
    278e:	60 e1       	ldi	r22, 0x10	; 16
    2790:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    2792:	77 dd       	rcall	.-1298   	; 0x2282 <sysclk_enable_module>
    2794:	57 c0       	rjmp	.+174    	; 0x2844 <usart_init_rs232+0x27e>
    2796:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    2798:	89 e0       	ldi	r24, 0x09	; 9
    279a:	d8 07       	cpc	r29, r24
    279c:	21 f4       	brne	.+8      	; 0x27a6 <usart_init_rs232+0x1e0>
    279e:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    27a0:	84 e0       	ldi	r24, 0x04	; 4
    27a2:	6f dd       	rcall	.-1314   	; 0x2282 <sysclk_enable_module>
    27a4:	4f c0       	rjmp	.+158    	; 0x2844 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    27a6:	c0 3a       	cpi	r28, 0xA0	; 160
    27a8:	ea e0       	ldi	r30, 0x0A	; 10
    27aa:	de 07       	cpc	r29, r30
    27ac:	21 f4       	brne	.+8      	; 0x27b6 <usart_init_rs232+0x1f0>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    27ae:	60 e1       	ldi	r22, 0x10	; 16
    27b0:	85 e0       	ldi	r24, 0x05	; 5
    27b2:	67 dd       	rcall	.-1330   	; 0x2282 <sysclk_enable_module>
    27b4:	47 c0       	rjmp	.+142    	; 0x2844 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    27b6:	c0 3a       	cpi	r28, 0xA0	; 160
    27b8:	fb e0       	ldi	r31, 0x0B	; 11
    27ba:	df 07       	cpc	r29, r31
    27bc:	21 f4       	brne	.+8      	; 0x27c6 <usart_init_rs232+0x200>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    27be:	60 e1       	ldi	r22, 0x10	; 16
    27c0:	86 e0       	ldi	r24, 0x06	; 6
    27c2:	5f dd       	rcall	.-1346   	; 0x2282 <sysclk_enable_module>
    27c4:	3f c0       	rjmp	.+126    	; 0x2844 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    27c6:	c0 3b       	cpi	r28, 0xB0	; 176
    27c8:	88 e0       	ldi	r24, 0x08	; 8
    27ca:	d8 07       	cpc	r29, r24
    27cc:	21 f4       	brne	.+8      	; 0x27d6 <usart_init_rs232+0x210>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    27ce:	60 e2       	ldi	r22, 0x20	; 32
    27d0:	83 e0       	ldi	r24, 0x03	; 3
    27d2:	57 dd       	rcall	.-1362   	; 0x2282 <sysclk_enable_module>
    27d4:	37 c0       	rjmp	.+110    	; 0x2844 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    27d6:	c0 3b       	cpi	r28, 0xB0	; 176
    27d8:	e9 e0       	ldi	r30, 0x09	; 9
    27da:	de 07       	cpc	r29, r30
    27dc:	21 f4       	brne	.+8      	; 0x27e6 <usart_init_rs232+0x220>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    27de:	60 e2       	ldi	r22, 0x20	; 32
    27e0:	84 e0       	ldi	r24, 0x04	; 4
    27e2:	4f dd       	rcall	.-1378   	; 0x2282 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    27e4:	2f c0       	rjmp	.+94     	; 0x2844 <usart_init_rs232+0x27e>
    27e6:	c0 3b       	cpi	r28, 0xB0	; 176
    27e8:	fa e0       	ldi	r31, 0x0A	; 10
    27ea:	df 07       	cpc	r29, r31
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    27ec:	21 f4       	brne	.+8      	; 0x27f6 <usart_init_rs232+0x230>
    27ee:	60 e2       	ldi	r22, 0x20	; 32
    27f0:	85 e0       	ldi	r24, 0x05	; 5
    27f2:	47 dd       	rcall	.-1394   	; 0x2282 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    27f4:	27 c0       	rjmp	.+78     	; 0x2844 <usart_init_rs232+0x27e>
    27f6:	c0 3b       	cpi	r28, 0xB0	; 176
    27f8:	8b e0       	ldi	r24, 0x0B	; 11
    27fa:	d8 07       	cpc	r29, r24
    27fc:	21 f4       	brne	.+8      	; 0x2806 <usart_init_rs232+0x240>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    27fe:	60 e2       	ldi	r22, 0x20	; 32
    2800:	86 e0       	ldi	r24, 0x06	; 6
    2802:	3f dd       	rcall	.-1410   	; 0x2282 <sysclk_enable_module>
    2804:	1f c0       	rjmp	.+62     	; 0x2844 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    2806:	c0 38       	cpi	r28, 0x80	; 128
    2808:	e4 e0       	ldi	r30, 0x04	; 4
    280a:	de 07       	cpc	r29, r30
    280c:	21 f4       	brne	.+8      	; 0x2816 <usart_init_rs232+0x250>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    280e:	60 e4       	ldi	r22, 0x40	; 64
    2810:	83 e0       	ldi	r24, 0x03	; 3
    2812:	37 dd       	rcall	.-1426   	; 0x2282 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    2814:	17 c0       	rjmp	.+46     	; 0x2844 <usart_init_rs232+0x27e>
    2816:	c0 39       	cpi	r28, 0x90	; 144
    2818:	f4 e0       	ldi	r31, 0x04	; 4
    281a:	df 07       	cpc	r29, r31
    281c:	21 f4       	brne	.+8      	; 0x2826 <usart_init_rs232+0x260>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    281e:	60 e4       	ldi	r22, 0x40	; 64
    2820:	84 e0       	ldi	r24, 0x04	; 4
    2822:	2f dd       	rcall	.-1442   	; 0x2282 <sysclk_enable_module>
    2824:	0f c0       	rjmp	.+30     	; 0x2844 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    2826:	c0 3a       	cpi	r28, 0xA0	; 160
    2828:	84 e0       	ldi	r24, 0x04	; 4
    282a:	d8 07       	cpc	r29, r24
    282c:	21 f4       	brne	.+8      	; 0x2836 <usart_init_rs232+0x270>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    282e:	60 e4       	ldi	r22, 0x40	; 64
    2830:	85 e0       	ldi	r24, 0x05	; 5
    2832:	27 dd       	rcall	.-1458   	; 0x2282 <sysclk_enable_module>
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    2834:	07 c0       	rjmp	.+14     	; 0x2844 <usart_init_rs232+0x27e>
    2836:	c0 3b       	cpi	r28, 0xB0	; 176
    2838:	e4 e0       	ldi	r30, 0x04	; 4
    283a:	de 07       	cpc	r29, r30
    283c:	19 f4       	brne	.+6      	; 0x2844 <usart_init_rs232+0x27e>
    283e:	60 e4       	ldi	r22, 0x40	; 64
    2840:	86 e0       	ldi	r24, 0x06	; 6
    2842:	1f dd       	rcall	.-1474   	; 0x2282 <sysclk_enable_module>
    2844:	8d 81       	ldd	r24, Y+5	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    2846:	8f 73       	andi	r24, 0x3F	; 63
    2848:	8d 83       	std	Y+5, r24	; 0x05
    284a:	f8 01       	movw	r30, r16
    284c:	95 81       	ldd	r25, Z+5	; 0x05
    284e:	84 81       	ldd	r24, Z+4	; 0x04
    2850:	89 2b       	or	r24, r25
    2852:	96 81       	ldd	r25, Z+6	; 0x06
    2854:	91 11       	cpse	r25, r1
    2856:	98 e0       	ldi	r25, 0x08	; 8
    2858:	89 2b       	or	r24, r25
    285a:	8d 83       	std	Y+5, r24	; 0x05
    285c:	f8 01       	movw	r30, r16
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    285e:	40 81       	ld	r20, Z
    2860:	51 81       	ldd	r21, Z+1	; 0x01
    2862:	62 81       	ldd	r22, Z+2	; 0x02
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    2864:	73 81       	ldd	r23, Z+3	; 0x03
    2866:	00 e8       	ldi	r16, 0x80	; 128
    2868:	14 e8       	ldi	r17, 0x84	; 132
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    286a:	2e e1       	ldi	r18, 0x1E	; 30
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	ce 01       	movw	r24, r28
    2870:	97 dd       	rcall	.-1234   	; 0x23a0 <usart_set_baudrate>
    2872:	9c 81       	ldd	r25, Y+4	; 0x04
    2874:	98 60       	ori	r25, 0x08	; 8
    2876:	9c 83       	std	Y+4, r25	; 0x04
    2878:	9c 81       	ldd	r25, Y+4	; 0x04
    287a:	90 61       	ori	r25, 0x10	; 16
    287c:	9c 83       	std	Y+4, r25	; 0x04
    287e:	df 91       	pop	r29
    2880:	cf 91       	pop	r28
    2882:	1f 91       	pop	r17
    2884:	0f 91       	pop	r16
    2886:	08 95       	ret

00002888 <__portable_avr_delay_cycles>:
		case 5: port.PIN5CTRL |= PORT_OPC_PULLDOWN_gc;
		case 6: port.PIN6CTRL |= PORT_OPC_PULLDOWN_gc;
		case 7: port.PIN7CTRL |= PORT_OPC_PULLDOWN_gc;
		
	}
}
    2888:	04 c0       	rjmp	.+8      	; 0x2892 <__portable_avr_delay_cycles+0xa>
    288a:	61 50       	subi	r22, 0x01	; 1
    288c:	71 09       	sbc	r23, r1
    288e:	81 09       	sbc	r24, r1
    2890:	91 09       	sbc	r25, r1
    2892:	61 15       	cp	r22, r1
    2894:	71 05       	cpc	r23, r1
    2896:	81 05       	cpc	r24, r1
    2898:	91 05       	cpc	r25, r1
    289a:	b9 f7       	brne	.-18     	; 0x288a <__portable_avr_delay_cycles+0x2>
    289c:	08 95       	ret

0000289e <usart_tx_at>:
    289e:	0f 93       	push	r16
    28a0:	1f 93       	push	r17
    28a2:	cf 93       	push	r28
    28a4:	df 93       	push	r29
    28a6:	eb 01       	movw	r28, r22
    28a8:	68 81       	ld	r22, Y
    28aa:	66 23       	and	r22, r22
    28ac:	39 f0       	breq	.+14     	; 0x28bc <usart_tx_at+0x1e>
    28ae:	8c 01       	movw	r16, r24
    28b0:	21 96       	adiw	r28, 0x01	; 1
    28b2:	c8 01       	movw	r24, r16
    28b4:	67 dd       	rcall	.-1330   	; 0x2384 <usart_putchar>
    28b6:	69 91       	ld	r22, Y+
    28b8:	61 11       	cpse	r22, r1
    28ba:	fb cf       	rjmp	.-10     	; 0x28b2 <usart_tx_at+0x14>
    28bc:	df 91       	pop	r29
    28be:	cf 91       	pop	r28
    28c0:	1f 91       	pop	r17
    28c2:	0f 91       	pop	r16
    28c4:	08 95       	ret

000028c6 <led_blink>:
    28c6:	af 92       	push	r10
    28c8:	bf 92       	push	r11
    28ca:	cf 92       	push	r12
    28cc:	df 92       	push	r13
    28ce:	ef 92       	push	r14
    28d0:	ff 92       	push	r15
    28d2:	0f 93       	push	r16
    28d4:	1f 93       	push	r17
    28d6:	cf 93       	push	r28
    28d8:	df 93       	push	r29
    28da:	e0 ec       	ldi	r30, 0xC0	; 192
    28dc:	f7 e0       	ldi	r31, 0x07	; 7
    28de:	24 81       	ldd	r18, Z+4	; 0x04
    28e0:	27 7f       	andi	r18, 0xF7	; 247
    28e2:	24 83       	std	Z+4, r18	; 0x04
    28e4:	00 97       	sbiw	r24, 0x00	; 0
    28e6:	09 f4       	brne	.+2      	; 0x28ea <led_blink+0x24>
    28e8:	45 c0       	rjmp	.+138    	; 0x2974 <led_blink+0xae>
    28ea:	68 94       	set
    28ec:	aa 24       	eor	r10, r10
    28ee:	a7 f8       	bld	r10, 7
    28f0:	0f 2e       	mov	r0, r31
    28f2:	f4 e8       	ldi	r31, 0x84	; 132
    28f4:	bf 2e       	mov	r11, r31
    28f6:	f0 2d       	mov	r31, r0
    28f8:	0f 2e       	mov	r0, r31
    28fa:	fe e1       	ldi	r31, 0x1E	; 30
    28fc:	cf 2e       	mov	r12, r31
    28fe:	f0 2d       	mov	r31, r0
    2900:	d1 2c       	mov	r13, r1
    2902:	e1 2c       	mov	r14, r1
    2904:	f1 2c       	mov	r15, r1
    2906:	00 e0       	ldi	r16, 0x00	; 0
    2908:	10 e0       	ldi	r17, 0x00	; 0
    290a:	28 2f       	mov	r18, r24
    290c:	39 2f       	mov	r19, r25
    290e:	40 e0       	ldi	r20, 0x00	; 0
    2910:	50 e0       	ldi	r21, 0x00	; 0
    2912:	60 e0       	ldi	r22, 0x00	; 0
    2914:	70 e0       	ldi	r23, 0x00	; 0
    2916:	80 e0       	ldi	r24, 0x00	; 0
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <__muldi3>
    291e:	0f 2e       	mov	r0, r31
    2920:	f6 e0       	ldi	r31, 0x06	; 6
    2922:	af 2e       	mov	r10, r31
    2924:	f0 2d       	mov	r31, r0
    2926:	b1 2c       	mov	r11, r1
    2928:	c1 2c       	mov	r12, r1
    292a:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__udivdi3>
    292e:	29 51       	subi	r18, 0x19	; 25
    2930:	3c 4f       	sbci	r19, 0xFC	; 252
    2932:	4f 4f       	sbci	r20, 0xFF	; 255
    2934:	5f 4f       	sbci	r21, 0xFF	; 255
    2936:	6f 4f       	sbci	r22, 0xFF	; 255
    2938:	7f 4f       	sbci	r23, 0xFF	; 255
    293a:	8f 4f       	sbci	r24, 0xFF	; 255
    293c:	9f 4f       	sbci	r25, 0xFF	; 255
    293e:	63 d7       	rcall	.+3782   	; 0x3806 <__floatundisf>
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	4a e7       	ldi	r20, 0x7A	; 122
    2946:	54 e4       	ldi	r21, 0x44	; 68
    2948:	7f d6       	rcall	.+3326   	; 0x3648 <__divsf3>
    294a:	eb d6       	rcall	.+3542   	; 0x3722 <__fixunssfdi>
    294c:	02 2f       	mov	r16, r18
    294e:	13 2f       	mov	r17, r19
    2950:	d4 2f       	mov	r29, r20
    2952:	c5 2f       	mov	r28, r21
    2954:	62 2f       	mov	r22, r18
    2956:	71 2f       	mov	r23, r17
    2958:	8d 2f       	mov	r24, r29
    295a:	9c 2f       	mov	r25, r28
    295c:	95 df       	rcall	.-214    	; 0x2888 <__portable_avr_delay_cycles>
    295e:	e0 ec       	ldi	r30, 0xC0	; 192
    2960:	f7 e0       	ldi	r31, 0x07	; 7
    2962:	84 81       	ldd	r24, Z+4	; 0x04
    2964:	88 60       	ori	r24, 0x08	; 8
    2966:	84 83       	std	Z+4, r24	; 0x04
    2968:	60 2f       	mov	r22, r16
    296a:	71 2f       	mov	r23, r17
    296c:	8d 2f       	mov	r24, r29
    296e:	9c 2f       	mov	r25, r28
    2970:	8b df       	rcall	.-234    	; 0x2888 <__portable_avr_delay_cycles>
    2972:	0f c0       	rjmp	.+30     	; 0x2992 <led_blink+0xcc>
    2974:	61 e0       	ldi	r22, 0x01	; 1
    2976:	70 e0       	ldi	r23, 0x00	; 0
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	85 df       	rcall	.-246    	; 0x2888 <__portable_avr_delay_cycles>
    297e:	e0 ec       	ldi	r30, 0xC0	; 192
    2980:	f7 e0       	ldi	r31, 0x07	; 7
    2982:	84 81       	ldd	r24, Z+4	; 0x04
    2984:	88 60       	ori	r24, 0x08	; 8
    2986:	84 83       	std	Z+4, r24	; 0x04
    2988:	61 e0       	ldi	r22, 0x01	; 1
    298a:	70 e0       	ldi	r23, 0x00	; 0
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	7b df       	rcall	.-266    	; 0x2888 <__portable_avr_delay_cycles>
    2992:	df 91       	pop	r29
    2994:	cf 91       	pop	r28
    2996:	1f 91       	pop	r17
    2998:	0f 91       	pop	r16
    299a:	ff 90       	pop	r15
    299c:	ef 90       	pop	r14
    299e:	df 90       	pop	r13
    29a0:	cf 90       	pop	r12
    29a2:	bf 90       	pop	r11
    29a4:	af 90       	pop	r10
    29a6:	08 95       	ret

000029a8 <rtc_init_period>:
    29a8:	0f 93       	push	r16
    29aa:	1f 93       	push	r17
    29ac:	cf 93       	push	r28
    29ae:	df 93       	push	r29
    29b0:	1f 92       	push	r1
    29b2:	cd b7       	in	r28, 0x3d	; 61
    29b4:	de b7       	in	r29, 0x3e	; 62
    29b6:	8c 01       	movw	r16, r24
    29b8:	64 e0       	ldi	r22, 0x04	; 4
    29ba:	80 e0       	ldi	r24, 0x00	; 0
    29bc:	62 dc       	rcall	.-1852   	; 0x2282 <sysclk_enable_module>
    29be:	e0 e0       	ldi	r30, 0x00	; 0
    29c0:	f4 e0       	ldi	r31, 0x04	; 4
    29c2:	02 87       	std	Z+10, r16	; 0x0a
    29c4:	13 87       	std	Z+11, r17	; 0x0b
    29c6:	10 86       	std	Z+8, r1	; 0x08
    29c8:	11 86       	std	Z+9, r1	; 0x09
    29ca:	80 91 a1 24 	lds	r24, 0x24A1	; 0x8024a1 <sleepmgr_locks+0x3>
    29ce:	8f 3f       	cpi	r24, 0xFF	; 255
    29d0:	09 f4       	brne	.+2      	; 0x29d4 <rtc_init_period+0x2c>
    29d2:	ff cf       	rjmp	.-2      	; 0x29d2 <rtc_init_period+0x2a>
    29d4:	8f b7       	in	r24, 0x3f	; 63
    29d6:	89 83       	std	Y+1, r24	; 0x01
    29d8:	f8 94       	cli
    29da:	99 81       	ldd	r25, Y+1	; 0x01
    29dc:	ee e9       	ldi	r30, 0x9E	; 158
    29de:	f4 e2       	ldi	r31, 0x24	; 36
    29e0:	83 81       	ldd	r24, Z+3	; 0x03
    29e2:	8f 5f       	subi	r24, 0xFF	; 255
    29e4:	83 83       	std	Z+3, r24	; 0x03
    29e6:	9f bf       	out	0x3f, r25	; 63
    29e8:	e0 e0       	ldi	r30, 0x00	; 0
    29ea:	f4 e0       	ldi	r31, 0x04	; 4
    29ec:	82 81       	ldd	r24, Z+2	; 0x02
    29ee:	81 60       	ori	r24, 0x01	; 1
    29f0:	82 83       	std	Z+2, r24	; 0x02
    29f2:	87 e0       	ldi	r24, 0x07	; 7
    29f4:	80 83       	st	Z, r24
    29f6:	0f 90       	pop	r0
    29f8:	df 91       	pop	r29
    29fa:	cf 91       	pop	r28
    29fc:	1f 91       	pop	r17
    29fe:	0f 91       	pop	r16
    2a00:	08 95       	ret

00002a02 <adc_result_average>:
    2a02:	8f 92       	push	r8
    2a04:	9f 92       	push	r9
    2a06:	af 92       	push	r10
    2a08:	bf 92       	push	r11
    2a0a:	cf 92       	push	r12
    2a0c:	df 92       	push	r13
    2a0e:	ef 92       	push	r14
    2a10:	ff 92       	push	r15
    2a12:	0f 93       	push	r16
    2a14:	1f 93       	push	r17
    2a16:	cf 93       	push	r28
    2a18:	df 93       	push	r29
    2a1a:	1f 92       	push	r1
    2a1c:	cd b7       	in	r28, 0x3d	; 61
    2a1e:	de b7       	in	r29, 0x3e	; 62
    2a20:	fc 01       	movw	r30, r24
    2a22:	0d b7       	in	r16, 0x3d	; 61
    2a24:	1e b7       	in	r17, 0x3e	; 62
    2a26:	82 2f       	mov	r24, r18
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	88 0f       	add	r24, r24
    2a2c:	99 1f       	adc	r25, r25
    2a2e:	ad b7       	in	r26, 0x3d	; 61
    2a30:	be b7       	in	r27, 0x3e	; 62
    2a32:	a8 1b       	sub	r26, r24
    2a34:	b9 0b       	sbc	r27, r25
    2a36:	ad bf       	out	0x3d, r26	; 61
    2a38:	be bf       	out	0x3e, r27	; 62
    2a3a:	11 96       	adiw	r26, 0x01	; 1
    2a3c:	e1 15       	cp	r30, r1
    2a3e:	72 e0       	ldi	r23, 0x02	; 2
    2a40:	f7 07       	cpc	r31, r23
    2a42:	51 f4       	brne	.+20     	; 0x2a58 <adc_result_average+0x56>
    2a44:	84 2f       	mov	r24, r20
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	88 0f       	add	r24, r24
    2a4a:	99 1f       	adc	r25, r25
    2a4c:	88 0f       	add	r24, r24
    2a4e:	99 1f       	adc	r25, r25
    2a50:	88 0f       	add	r24, r24
    2a52:	99 1f       	adc	r25, r25
    2a54:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
    2a58:	22 23       	and	r18, r18
    2a5a:	09 f4       	brne	.+2      	; 0x2a5e <adc_result_average+0x5c>
    2a5c:	3f c0       	rjmp	.+126    	; 0x2adc <adc_result_average+0xda>
    2a5e:	56 2f       	mov	r21, r22
    2a60:	55 0f       	add	r21, r21
    2a62:	55 0f       	add	r21, r21
    2a64:	46 2f       	mov	r20, r22
    2a66:	43 70       	andi	r20, 0x03	; 3
    2a68:	96 2f       	mov	r25, r22
    2a6a:	96 95       	lsr	r25
    2a6c:	96 95       	lsr	r25
    2a6e:	41 11       	cpse	r20, r1
    2a70:	02 c0       	rjmp	.+4      	; 0x2a76 <adc_result_average+0x74>
    2a72:	82 e0       	ldi	r24, 0x02	; 2
    2a74:	01 c0       	rjmp	.+2      	; 0x2a78 <adc_result_average+0x76>
    2a76:	80 e0       	ldi	r24, 0x00	; 0
    2a78:	38 2f       	mov	r19, r24
    2a7a:	8f 5f       	subi	r24, 0xFF	; 255
    2a7c:	6d 01       	movw	r12, r26
    2a7e:	7f 01       	movw	r14, r30
    2a80:	a0 e2       	ldi	r26, 0x20	; 32
    2a82:	ea 0e       	add	r14, r26
    2a84:	f1 1c       	adc	r15, r1
    2a86:	41 11       	cpse	r20, r1
    2a88:	96 2f       	mov	r25, r22
    2a8a:	90 fd       	sbrc	r25, 0
    2a8c:	83 2f       	mov	r24, r19
    2a8e:	b8 e0       	ldi	r27, 0x08	; 8
    2a90:	8b 9f       	mul	r24, r27
    2a92:	e0 0c       	add	r14, r0
    2a94:	f1 1c       	adc	r15, r1
    2a96:	11 24       	eor	r1, r1
    2a98:	81 2c       	mov	r8, r1
    2a9a:	91 2c       	mov	r9, r1
    2a9c:	54 01       	movw	r10, r8
    2a9e:	40 e0       	ldi	r20, 0x00	; 0
    2aa0:	8f b7       	in	r24, 0x3f	; 63
    2aa2:	89 83       	std	Y+1, r24	; 0x01
    2aa4:	f8 94       	cli
    2aa6:	99 81       	ldd	r25, Y+1	; 0x01
    2aa8:	80 81       	ld	r24, Z
    2aaa:	85 2b       	or	r24, r21
    2aac:	80 83       	st	Z, r24
    2aae:	9f bf       	out	0x3f, r25	; 63
    2ab0:	96 81       	ldd	r25, Z+6	; 0x06
    2ab2:	96 23       	and	r25, r22
    2ab4:	69 13       	cpse	r22, r25
    2ab6:	fc cf       	rjmp	.-8      	; 0x2ab0 <adc_result_average+0xae>
    2ab8:	66 83       	std	Z+6, r22	; 0x06
    2aba:	d7 01       	movw	r26, r14
    2abc:	14 96       	adiw	r26, 0x04	; 4
    2abe:	8d 91       	ld	r24, X+
    2ac0:	9c 91       	ld	r25, X
    2ac2:	15 97       	sbiw	r26, 0x05	; 5
    2ac4:	d6 01       	movw	r26, r12
    2ac6:	8d 93       	st	X+, r24
    2ac8:	9d 93       	st	X+, r25
    2aca:	6d 01       	movw	r12, r26
    2acc:	88 0e       	add	r8, r24
    2ace:	99 1e       	adc	r9, r25
    2ad0:	a1 1c       	adc	r10, r1
    2ad2:	b1 1c       	adc	r11, r1
    2ad4:	4f 5f       	subi	r20, 0xFF	; 255
    2ad6:	24 13       	cpse	r18, r20
    2ad8:	e3 cf       	rjmp	.-58     	; 0x2aa0 <adc_result_average+0x9e>
    2ada:	03 c0       	rjmp	.+6      	; 0x2ae2 <adc_result_average+0xe0>
    2adc:	81 2c       	mov	r8, r1
    2ade:	91 2c       	mov	r9, r1
    2ae0:	54 01       	movw	r10, r8
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	40 e0       	ldi	r20, 0x00	; 0
    2ae6:	50 e0       	ldi	r21, 0x00	; 0
    2ae8:	c5 01       	movw	r24, r10
    2aea:	b4 01       	movw	r22, r8
    2aec:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <__udivmodsi4>
    2af0:	c9 01       	movw	r24, r18
    2af2:	0d bf       	out	0x3d, r16	; 61
    2af4:	1e bf       	out	0x3e, r17	; 62
    2af6:	0f 90       	pop	r0
    2af8:	df 91       	pop	r29
    2afa:	cf 91       	pop	r28
    2afc:	1f 91       	pop	r17
    2afe:	0f 91       	pop	r16
    2b00:	ff 90       	pop	r15
    2b02:	ef 90       	pop	r14
    2b04:	df 90       	pop	r13
    2b06:	cf 90       	pop	r12
    2b08:	bf 90       	pop	r11
    2b0a:	af 90       	pop	r10
    2b0c:	9f 90       	pop	r9
    2b0e:	8f 90       	pop	r8
    2b10:	08 95       	ret

00002b12 <reset_tx_data>:
    2b12:	44 23       	and	r20, r20
    2b14:	61 f0       	breq	.+24     	; 0x2b2e <reset_tx_data+0x1c>
    2b16:	a6 2f       	mov	r26, r22
    2b18:	b7 2f       	mov	r27, r23
    2b1a:	e8 2f       	mov	r30, r24
    2b1c:	f9 2f       	mov	r31, r25
    2b1e:	80 e0       	ldi	r24, 0x00	; 0
    2b20:	2d 91       	ld	r18, X+
    2b22:	3d 91       	ld	r19, X+
    2b24:	21 93       	st	Z+, r18
    2b26:	31 93       	st	Z+, r19
    2b28:	8f 5f       	subi	r24, 0xFF	; 255
    2b2a:	48 13       	cpse	r20, r24
    2b2c:	f9 cf       	rjmp	.-14     	; 0x2b20 <reset_tx_data+0xe>
    2b2e:	80 e0       	ldi	r24, 0x00	; 0
    2b30:	08 95       	ret

00002b32 <radio_pins_init>:

void radio_pins_init(void) {
	
	//PWRKEY and startup sequence.
	PWRKEY_PORT.DIR |= (1<<PWRKEY_PIN); //reset pin
    2b32:	e0 e8       	ldi	r30, 0x80	; 128
    2b34:	f6 e0       	ldi	r31, 0x06	; 6
    2b36:	80 81       	ld	r24, Z
    2b38:	80 64       	ori	r24, 0x40	; 64
    2b3a:	80 83       	st	Z, r24
	
	
	//STATUS, NOT NEEDED AS NETLIGHT IS REQUIRED BEFORE SENDING COMMANDS.
	STATUS_PORT.DIR &= ~(1<<STATUS_PIN); //input
    2b3c:	80 81       	ld	r24, Z
    2b3e:	8f 77       	andi	r24, 0x7F	; 127
    2b40:	80 83       	st	Z, r24
    2b42:	08 95       	ret

00002b44 <ext_data_pins_init>:
	
}

void ext_data_pins_init() {
	//Set up port and pin to wake and request data from external source
	REQUEST_DATA_PORT.DIR |= (1<<REQUEST_DATA_PIN); //request pin as output
    2b44:	e0 ea       	ldi	r30, 0xA0	; 160
    2b46:	f6 e0       	ldi	r31, 0x06	; 6
    2b48:	80 81       	ld	r24, Z
    2b4a:	80 61       	ori	r24, 0x10	; 16
    2b4c:	80 83       	st	Z, r24
    2b4e:	08 95       	ret

00002b50 <radio_power_on>:
	
	//SETUP CTS AND RTS LATER!!!!!!	
	
}

uint8_t radio_power_on(void) {
    2b50:	0f 93       	push	r16
    2b52:	1f 93       	push	r17
    2b54:	cf 93       	push	r28
    2b56:	df 93       	push	r29
	uint8_t status = 0;
	uint8_t cnt_pwron = 0;
	
	PWRKEY_PORT.OUT &= ~(1<<PWRKEY_PIN); //reset
    2b58:	c0 e8       	ldi	r28, 0x80	; 128
    2b5a:	d6 e0       	ldi	r29, 0x06	; 6
    2b5c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b5e:	8f 7b       	andi	r24, 0xBF	; 191
    2b60:	8c 83       	std	Y+4, r24	; 0x04
	delay_ms(1); //wait for battery voltage to settle.
    2b62:	6e e4       	ldi	r22, 0x4E	; 78
    2b64:	71 e0       	ldi	r23, 0x01	; 1
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	8e de       	rcall	.-740    	; 0x2888 <__portable_avr_delay_cycles>
	PWRKEY_PORT.OUT |= (1<<PWRKEY_PIN); //reset of radio
    2b6c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b6e:	80 64       	ori	r24, 0x40	; 64
    2b70:	8c 83       	std	Y+4, r24	; 0x04
	delay_ms(100); //boot time, 100ms recommended for m95
    2b72:	66 e3       	ldi	r22, 0x36	; 54
    2b74:	72 e8       	ldi	r23, 0x82	; 130
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	86 de       	rcall	.-756    	; 0x2888 <__portable_avr_delay_cycles>
	PWRKEY_PORT.OUT &= ~(1<<PWRKEY_PIN);
    2b7c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b7e:	8f 7b       	andi	r24, 0xBF	; 191
    2b80:	8c 83       	std	Y+4, r24	; 0x04
	delay_ms(800); //time before m95 is running. There exist a status bit that might be useful to monitor.
    2b82:	6b ea       	ldi	r22, 0xAB	; 171
    2b84:	71 e1       	ldi	r23, 0x11	; 17
    2b86:	84 e0       	ldi	r24, 0x04	; 4
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	7e de       	rcall	.-772    	; 0x2888 <__portable_avr_delay_cycles>
	delay_ms(400);
    2b8c:	66 ed       	ldi	r22, 0xD6	; 214
    2b8e:	78 e0       	ldi	r23, 0x08	; 8
    2b90:	82 e0       	ldi	r24, 0x02	; 2
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	79 de       	rcall	.-782    	; 0x2888 <__portable_avr_delay_cycles>
	PWRKEY_PORT.OUT |= (1<<PWRKEY_PIN); //normal level for this pin
    2b96:	8c 81       	ldd	r24, Y+4	; 0x04
    2b98:	80 64       	ori	r24, 0x40	; 64
    2b9a:	8c 83       	std	Y+4, r24	; 0x04
	
	//wait for status
	while ( (!(STATUS_PORT.IN & (1<<STATUS_PIN))) & (cnt_pwron < AT_REPEAT_LONG) )
    2b9c:	88 85       	ldd	r24, Y+8	; 0x08
    2b9e:	88 23       	and	r24, r24
    2ba0:	a4 f0       	brlt	.+40     	; 0x2bca <radio_power_on+0x7a>
    2ba2:	c0 e0       	ldi	r28, 0x00	; 0
    2ba4:	00 e8       	ldi	r16, 0x80	; 128
	{
		delay_ms(300);
    2ba6:	16 e0       	ldi	r17, 0x06	; 6
    2ba8:	61 ea       	ldi	r22, 0xA1	; 161
    2baa:	76 e8       	ldi	r23, 0x86	; 134
    2bac:	81 e0       	ldi	r24, 0x01	; 1
    2bae:	90 e0       	ldi	r25, 0x00	; 0
		cnt_pwron++;
    2bb0:	6b de       	rcall	.-810    	; 0x2888 <__portable_avr_delay_cycles>
	delay_ms(800); //time before m95 is running. There exist a status bit that might be useful to monitor.
	delay_ms(400);
	PWRKEY_PORT.OUT |= (1<<PWRKEY_PIN); //normal level for this pin
	
	//wait for status
	while ( (!(STATUS_PORT.IN & (1<<STATUS_PIN))) & (cnt_pwron < AT_REPEAT_LONG) )
    2bb2:	cf 5f       	subi	r28, 0xFF	; 255
    2bb4:	f8 01       	movw	r30, r16
    2bb6:	80 85       	ldd	r24, Z+8	; 0x08
    2bb8:	88 23       	and	r24, r24
    2bba:	44 f0       	brlt	.+16     	; 0x2bcc <radio_power_on+0x7c>
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	cb 31       	cpi	r28, 0x1B	; 27
    2bc0:	08 f0       	brcs	.+2      	; 0x2bc4 <radio_power_on+0x74>
    2bc2:	80 e0       	ldi	r24, 0x00	; 0
    2bc4:	81 11       	cpse	r24, r1
    2bc6:	f0 cf       	rjmp	.-32     	; 0x2ba8 <radio_power_on+0x58>
	
}

uint8_t radio_power_on(void) {
	uint8_t status = 0;
	uint8_t cnt_pwron = 0;
    2bc8:	01 c0       	rjmp	.+2      	; 0x2bcc <radio_power_on+0x7c>
	if (cnt_pwron == AT_REPEAT_LONG)
	{
		status = 1;
	}
	
	return status;
    2bca:	c0 e0       	ldi	r28, 0x00	; 0
    2bcc:	81 e0       	ldi	r24, 0x01	; 1
    2bce:	cb 31       	cpi	r28, 0x1B	; 27
    2bd0:	09 f0       	breq	.+2      	; 0x2bd4 <radio_power_on+0x84>
}
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	df 91       	pop	r29
    2bd6:	cf 91       	pop	r28
    2bd8:	1f 91       	pop	r17
    2bda:	0f 91       	pop	r16
    2bdc:	08 95       	ret

00002bde <radio_power_down>:

uint8_t radio_power_down(void) {
    2bde:	cf 93       	push	r28
    2be0:	df 93       	push	r29
	uint8_t status = 0;
	uint8_t cnt_pwrdwn = 0;
	
	//power down
	PWRKEY_PORT.OUT &= ~(1<<PWRKEY_PIN);
    2be2:	c0 e8       	ldi	r28, 0x80	; 128
    2be4:	d6 e0       	ldi	r29, 0x06	; 6
    2be6:	8c 81       	ldd	r24, Y+4	; 0x04
    2be8:	8f 7b       	andi	r24, 0xBF	; 191
    2bea:	8c 83       	std	Y+4, r24	; 0x04
	delay_s(1);
    2bec:	66 e1       	ldi	r22, 0x16	; 22
    2bee:	76 e1       	ldi	r23, 0x16	; 22
    2bf0:	85 e0       	ldi	r24, 0x05	; 5
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	49 de       	rcall	.-878    	; 0x2888 <__portable_avr_delay_cycles>
	PWRKEY_PORT.OUT |= (1<<PWRKEY_PIN); 
    2bf6:	8c 81       	ldd	r24, Y+4	; 0x04
    2bf8:	80 64       	ori	r24, 0x40	; 64
    2bfa:	8c 83       	std	Y+4, r24	; 0x04
	delay_s(1);
    2bfc:	66 e1       	ldi	r22, 0x16	; 22
    2bfe:	76 e1       	ldi	r23, 0x16	; 22
    2c00:	85 e0       	ldi	r24, 0x05	; 5
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	41 de       	rcall	.-894    	; 0x2888 <__portable_avr_delay_cycles>
	PWRKEY_PORT.OUT &= ~(1<<PWRKEY_PIN);
    2c06:	8c 81       	ldd	r24, Y+4	; 0x04
    2c08:	8f 7b       	andi	r24, 0xBF	; 191
    2c0a:	8c 83       	std	Y+4, r24	; 0x04
	
	while ( (STATUS_PORT.IN & (1<<STATUS_PIN)) & (cnt_pwrdwn < AT_REPEAT_LONG) )
    2c0c:	88 85       	ldd	r24, Y+8	; 0x08
	{
		status = 1;
	}
	
	return status;
}
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
    2c10:	df 91       	pop	r29
    2c12:	cf 91       	pop	r28
    2c14:	08 95       	ret

00002c16 <reset_char_array>:

void reset_char_array(char *array_pointer , uint8_t size) {
	uint8_t i = 0;
	while (i < size)
    2c16:	66 23       	and	r22, r22
    2c18:	59 f0       	breq	.+22     	; 0x2c30 <reset_char_array+0x1a>
    2c1a:	fc 01       	movw	r30, r24
    2c1c:	61 50       	subi	r22, 0x01	; 1
    2c1e:	70 e0       	ldi	r23, 0x00	; 0
    2c20:	6f 5f       	subi	r22, 0xFF	; 255
    2c22:	7f 4f       	sbci	r23, 0xFF	; 255
    2c24:	86 0f       	add	r24, r22
    2c26:	97 1f       	adc	r25, r23
	{
		*(array_pointer+i) = 0x00;
    2c28:	11 92       	st	Z+, r1
	return status;
}

void reset_char_array(char *array_pointer , uint8_t size) {
	uint8_t i = 0;
	while (i < size)
    2c2a:	e8 17       	cp	r30, r24
    2c2c:	f9 07       	cpc	r31, r25
    2c2e:	e1 f7       	brne	.-8      	; 0x2c28 <reset_char_array+0x12>
    2c30:	08 95       	ret

00002c32 <data_to_char>:
	 
	 avg = data/cnt;
	 return avg;
}

uint8_t data_to_char(uint16_t *array_data, uint8_t array_data_len, char *array_ascii, int base) {
    2c32:	2f 92       	push	r2
    2c34:	3f 92       	push	r3
    2c36:	4f 92       	push	r4
    2c38:	5f 92       	push	r5
    2c3a:	6f 92       	push	r6
    2c3c:	7f 92       	push	r7
    2c3e:	8f 92       	push	r8
    2c40:	9f 92       	push	r9
    2c42:	af 92       	push	r10
    2c44:	bf 92       	push	r11
    2c46:	cf 92       	push	r12
    2c48:	df 92       	push	r13
    2c4a:	ef 92       	push	r14
    2c4c:	ff 92       	push	r15
    2c4e:	0f 93       	push	r16
    2c50:	1f 93       	push	r17
    2c52:	cf 93       	push	r28
    2c54:	df 93       	push	r29
    2c56:	cd b7       	in	r28, 0x3d	; 61
    2c58:	de b7       	in	r29, 0x3e	; 62
    2c5a:	63 97       	sbiw	r28, 0x13	; 19
    2c5c:	cd bf       	out	0x3d, r28	; 61
    2c5e:	de bf       	out	0x3e, r29	; 62
    2c60:	8a 8b       	std	Y+18, r24	; 0x12
    2c62:	9b 8b       	std	Y+19, r25	; 0x13
    2c64:	2e 87       	std	Y+14, r18	; 0x0e
    2c66:	3f 87       	std	Y+15, r19	; 0x0f
	uint8_t status = 0;
	uint8_t i = 0;
	uint8_t j = 0;
	char temp[5] = ""; //MAX 4 VALUES + NULL TERMINATION
    2c68:	19 82       	std	Y+1, r1	; 0x01
    2c6a:	1a 82       	std	Y+2, r1	; 0x02
    2c6c:	fe 01       	movw	r30, r28
    2c6e:	33 96       	adiw	r30, 0x03	; 3
    2c70:	83 e0       	ldi	r24, 0x03	; 3
    2c72:	df 01       	movw	r26, r30
    2c74:	1d 92       	st	X+, r1
    2c76:	8a 95       	dec	r24
    2c78:	e9 f7       	brne	.-6      	; 0x2c74 <data_to_char+0x42>
    2c7a:	aa 88       	ldd	r10, Y+18	; 0x12
    2c7c:	bb 88       	ldd	r11, Y+19	; 0x13
    2c7e:	15 01       	movw	r2, r10
    2c80:	b4 e1       	ldi	r27, 0x14	; 20
    2c82:	2b 0e       	add	r2, r27
    2c84:	31 1c       	adc	r3, r1
	while (i <= POSITION_TIME)
	{
		j=1;
		while (TX_DATA_DIGITS-j > 0)
		{
			if ((*(array_data+i) < pow(base,TX_DATA_DIGITS-j))) //CHECK IF NUMBER IS LESS THAN LIMITS
    2c86:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c88:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c8a:	09 2e       	mov	r0, r25
    2c8c:	00 0c       	add	r0, r0
    2c8e:	aa 0b       	sbc	r26, r26
    2c90:	bb 0b       	sbc	r27, r27
    2c92:	8a 87       	std	Y+10, r24	; 0x0a
    2c94:	9b 87       	std	Y+11, r25	; 0x0b
    2c96:	ac 87       	std	Y+12, r26	; 0x0c
    2c98:	bd 87       	std	Y+13, r27	; 0x0d
    2c9a:	28 8a       	std	Y+16, r2	; 0x10
    2c9c:	39 8a       	std	Y+17, r3	; 0x11
    2c9e:	6a 01       	movw	r12, r20
    2ca0:	68 c0       	rjmp	.+208    	; 0x2d72 <data_to_char+0x140>
    2ca2:	e9 2c       	mov	r14, r9
    2ca4:	f3 2c       	mov	r15, r3
    2ca6:	6a 85       	ldd	r22, Y+10	; 0x0a
    2ca8:	7b 85       	ldd	r23, Y+11	; 0x0b
    2caa:	8c 85       	ldd	r24, Y+12	; 0x0c
    2cac:	9d 85       	ldd	r25, Y+13	; 0x0d
    2cae:	70 d5       	rcall	.+2784   	; 0x3790 <__floatsisf>
    2cb0:	2b 01       	movw	r4, r22
    2cb2:	3c 01       	movw	r6, r24
    2cb4:	b8 01       	movw	r22, r16
    2cb6:	01 2e       	mov	r0, r17
    2cb8:	00 0c       	add	r0, r0
    2cba:	88 0b       	sbc	r24, r24
    2cbc:	99 0b       	sbc	r25, r25
    2cbe:	68 d5       	rcall	.+2768   	; 0x3790 <__floatsisf>
    2cc0:	9b 01       	movw	r18, r22
    2cc2:	ac 01       	movw	r20, r24
    2cc4:	c3 01       	movw	r24, r6
    2cc6:	b2 01       	movw	r22, r4
    2cc8:	65 d6       	rcall	.+3274   	; 0x3994 <pow>
    2cca:	6e 83       	std	Y+6, r22	; 0x06
    2ccc:	7f 83       	std	Y+7, r23	; 0x07
    2cce:	88 87       	std	Y+8, r24	; 0x08
    2cd0:	99 87       	std	Y+9, r25	; 0x09
    2cd2:	d5 01       	movw	r26, r10
    2cd4:	6d 91       	ld	r22, X+
    2cd6:	7c 91       	ld	r23, X
    2cd8:	80 e0       	ldi	r24, 0x00	; 0
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	57 d5       	rcall	.+2734   	; 0x378c <__floatunsisf>
    2cde:	2e 81       	ldd	r18, Y+6	; 0x06
    2ce0:	3f 81       	ldd	r19, Y+7	; 0x07
    2ce2:	48 85       	ldd	r20, Y+8	; 0x08
    2ce4:	59 85       	ldd	r21, Y+9	; 0x09
    2ce6:	ac d4       	rcall	.+2392   	; 0x3640 <__cmpsf2>
    2ce8:	88 23       	and	r24, r24
    2cea:	4c f4       	brge	.+18     	; 0x2cfe <data_to_char+0xcc>
			{
				strcat(array_ascii, "0"); //ADD LEADING ZEROS
    2cec:	f6 01       	movw	r30, r12
    2cee:	01 90       	ld	r0, Z+
    2cf0:	00 20       	and	r0, r0
    2cf2:	e9 f7       	brne	.-6      	; 0x2cee <data_to_char+0xbc>
    2cf4:	31 97       	sbiw	r30, 0x01	; 1
    2cf6:	80 e3       	ldi	r24, 0x30	; 48
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	80 83       	st	Z, r24
    2cfc:	91 83       	std	Z+1, r25	; 0x01
    2cfe:	01 50       	subi	r16, 0x01	; 1
    2d00:	11 09       	sbc	r17, r1
		
	//CONVERT ALL 2 BYTES NUMBERS
	while (i <= POSITION_TIME)
	{
		j=1;
		while (TX_DATA_DIGITS-j > 0)
    2d02:	79 f6       	brne	.-98     	; 0x2ca2 <data_to_char+0x70>
    2d04:	92 e0       	ldi	r25, 0x02	; 2
    2d06:	a9 0e       	add	r10, r25
    2d08:	b1 1c       	adc	r11, r1
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
    2d0a:	4e 85       	ldd	r20, Y+14	; 0x0e
    2d0c:	5f 85       	ldd	r21, Y+15	; 0x0f
    2d0e:	be 01       	movw	r22, r28
    2d10:	6f 5f       	subi	r22, 0xFF	; 255
    2d12:	7f 4f       	sbci	r23, 0xFF	; 255
    2d14:	d7 01       	movw	r26, r14
    2d16:	8d 91       	ld	r24, X+
    2d18:	9c 91       	ld	r25, X
    2d1a:	0e 94 32 20 	call	0x4064	; 0x4064 <itoa>
		} else {
			temp[0] = (*(array_data+i) >> 8) & 0xff; //JUST GRAB THE BYTES
			temp[1] = *(array_data+i) & 0xff;
		}
				
		strcat(array_ascii, temp); //APPEND NUMBER
    2d1e:	be 01       	movw	r22, r28
    2d20:	6f 5f       	subi	r22, 0xFF	; 255
    2d22:	7f 4f       	sbci	r23, 0xFF	; 255
    2d24:	c6 01       	movw	r24, r12
    2d26:	0e 94 06 20 	call	0x400c	; 0x400c <strcat>
		strcat(array_ascii, ","); //DEBUG
    2d2a:	f6 01       	movw	r30, r12
    2d2c:	01 90       	ld	r0, Z+
    2d2e:	00 20       	and	r0, r0
    2d30:	e9 f7       	brne	.-6      	; 0x2d2c <data_to_char+0xfa>
    2d32:	31 97       	sbiw	r30, 0x01	; 1
    2d34:	8c e2       	ldi	r24, 0x2C	; 44
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	80 83       	st	Z, r24
		reset_char_array(&temp, sizeof(temp));
    2d3a:	91 83       	std	Z+1, r25	; 0x01
    2d3c:	65 e0       	ldi	r22, 0x05	; 5
    2d3e:	ce 01       	movw	r24, r28
    2d40:	01 96       	adiw	r24, 0x01	; 1
    2d42:	69 df       	rcall	.-302    	; 0x2c16 <reset_char_array>
	uint8_t i = 0;
	uint8_t j = 0;
	char temp[5] = ""; //MAX 4 VALUES + NULL TERMINATION
		
	//CONVERT ALL 2 BYTES NUMBERS
	while (i <= POSITION_TIME)
    2d44:	a8 89       	ldd	r26, Y+16	; 0x10
    2d46:	b9 89       	ldd	r27, Y+17	; 0x11
    2d48:	aa 16       	cp	r10, r26
    2d4a:	bb 06       	cpc	r11, r27
    2d4c:	91 f4       	brne	.+36     	; 0x2d72 <data_to_char+0x140>
    2d4e:	1d 01       	movw	r2, r26
    2d50:	46 01       	movw	r8, r12
    2d52:	ea 88       	ldd	r14, Y+18	; 0x12
    2d54:	fb 88       	ldd	r15, Y+19	; 0x13
    2d56:	b2 e2       	ldi	r27, 0x22	; 34
    2d58:	eb 0e       	add	r14, r27
    2d5a:	f1 1c       	adc	r15, r1
		j=1;
		while (TX_DATE_DIGITS-j > 0)
		{
			if ((*(array_data+i) < pow(base,TX_DATE_DIGITS-j))) //CHECK IF NUMBER IS LESS THAN LIMITS
			{
				strcat(array_ascii, "0"); //ADD LEADING ZEROS
    2d5c:	0f 2e       	mov	r0, r31
    2d5e:	f0 e3       	ldi	r31, 0x30	; 48
    2d60:	af 2e       	mov	r10, r31
    2d62:	b1 2c       	mov	r11, r1
    2d64:	f0 2d       	mov	r31, r0
		} else {
			temp[0] = *(array_data+i) & 0xff; //JUST GRAB THE BYTES
		}
		
		strcat(array_ascii, temp); //APPEND NUMBER
		strcat(array_ascii, ","); //DEBUG
    2d66:	0f 2e       	mov	r0, r31
    2d68:	fc e2       	ldi	r31, 0x2C	; 44
    2d6a:	cf 2e       	mov	r12, r31
    2d6c:	d1 2c       	mov	r13, r1
    2d6e:	f0 2d       	mov	r31, r0
    2d70:	2d c0       	rjmp	.+90     	; 0x2dcc <data_to_char+0x19a>
	 
	 avg = data/cnt;
	 return avg;
}

uint8_t data_to_char(uint16_t *array_data, uint8_t array_data_len, char *array_ascii, int base) {
    2d72:	03 e0       	ldi	r16, 0x03	; 3
    2d74:	10 e0       	ldi	r17, 0x00	; 0
    2d76:	9a 2c       	mov	r9, r10
    2d78:	3b 2c       	mov	r3, r11
    2d7a:	93 cf       	rjmp	.-218    	; 0x2ca2 <data_to_char+0x70>
		j=1;
		while (TX_DATE_DIGITS-j > 0)
		{
			if ((*(array_data+i) < pow(base,TX_DATE_DIGITS-j))) //CHECK IF NUMBER IS LESS THAN LIMITS
			{
				strcat(array_ascii, "0"); //ADD LEADING ZEROS
    2d7c:	f4 01       	movw	r30, r8
    2d7e:	01 90       	ld	r0, Z+
    2d80:	00 20       	and	r0, r0
    2d82:	e9 f7       	brne	.-6      	; 0x2d7e <data_to_char+0x14c>
    2d84:	31 97       	sbiw	r30, 0x01	; 1
    2d86:	a0 82       	st	Z, r10
    2d88:	b1 82       	std	Z+1, r11	; 0x01
    2d8a:	e2 e0       	ldi	r30, 0x02	; 2
    2d8c:	2e 0e       	add	r2, r30
    2d8e:	31 1c       	adc	r3, r1
    2d90:	4e 85       	ldd	r20, Y+14	; 0x0e
    2d92:	5f 85       	ldd	r21, Y+15	; 0x0f
    2d94:	be 01       	movw	r22, r28
    2d96:	6f 5f       	subi	r22, 0xFF	; 255
    2d98:	7f 4f       	sbci	r23, 0xFF	; 255
    2d9a:	d8 01       	movw	r26, r16
    2d9c:	8d 91       	ld	r24, X+
    2d9e:	9c 91       	ld	r25, X
    2da0:	0e 94 32 20 	call	0x4064	; 0x4064 <itoa>
			itoa(*(array_data+i), temp, base); //CONVERT NUMBER TO ASCII
		} else {
			temp[0] = *(array_data+i) & 0xff; //JUST GRAB THE BYTES
		}
		
		strcat(array_ascii, temp); //APPEND NUMBER
    2da4:	be 01       	movw	r22, r28
    2da6:	6f 5f       	subi	r22, 0xFF	; 255
    2da8:	7f 4f       	sbci	r23, 0xFF	; 255
    2daa:	c4 01       	movw	r24, r8
    2dac:	0e 94 06 20 	call	0x400c	; 0x400c <strcat>
		strcat(array_ascii, ","); //DEBUG
    2db0:	f4 01       	movw	r30, r8
    2db2:	01 90       	ld	r0, Z+
    2db4:	00 20       	and	r0, r0
    2db6:	e9 f7       	brne	.-6      	; 0x2db2 <data_to_char+0x180>
    2db8:	31 97       	sbiw	r30, 0x01	; 1
    2dba:	c0 82       	st	Z, r12
		reset_char_array(&temp, sizeof(temp));
    2dbc:	d1 82       	std	Z+1, r13	; 0x01
    2dbe:	65 e0       	ldi	r22, 0x05	; 5
    2dc0:	ce 01       	movw	r24, r28
    2dc2:	01 96       	adiw	r24, 0x01	; 1
    2dc4:	28 df       	rcall	.-432    	; 0x2c16 <reset_char_array>
	}
	//////////////////////////////////////////////////////////////////////////
		
	//CONVERT ALL 1 BYTES NUMBERS
	i = POSITION_YEAR;
	while (i <= POSITION_STATUS)
    2dc6:	e2 14       	cp	r14, r2
    2dc8:	f3 04       	cpc	r15, r3
    2dca:	79 f0       	breq	.+30     	; 0x2dea <data_to_char+0x1b8>
	{
		j=1;
		while (TX_DATE_DIGITS-j > 0)
		{
			if ((*(array_data+i) < pow(base,TX_DATE_DIGITS-j))) //CHECK IF NUMBER IS LESS THAN LIMITS
    2dcc:	81 01       	movw	r16, r2
    2dce:	f1 01       	movw	r30, r2
    2dd0:	60 81       	ld	r22, Z
    2dd2:	71 81       	ldd	r23, Z+1	; 0x01
    2dd4:	80 e0       	ldi	r24, 0x00	; 0
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	d9 d4       	rcall	.+2482   	; 0x378c <__floatunsisf>
    2dda:	9b 01       	movw	r18, r22
    2ddc:	ac 01       	movw	r20, r24
    2dde:	c3 01       	movw	r24, r6
    2de0:	b2 01       	movw	r22, r4
    2de2:	d4 d5       	rcall	.+2984   	; 0x398c <__gesf2>
    2de4:	18 16       	cp	r1, r24
    2de6:	8c f6       	brge	.-94     	; 0x2d8a <data_to_char+0x158>
    2de8:	c9 cf       	rjmp	.-110    	; 0x2d7c <data_to_char+0x14a>
		reset_char_array(&temp, sizeof(temp));
		i++;
	}
	//////////////////////////////////////////////////////////////////////////
	return status;
}
    2dea:	80 e0       	ldi	r24, 0x00	; 0
    2dec:	63 96       	adiw	r28, 0x13	; 19
    2dee:	cd bf       	out	0x3d, r28	; 61
    2df0:	de bf       	out	0x3e, r29	; 62
    2df2:	df 91       	pop	r29
    2df4:	cf 91       	pop	r28
    2df6:	1f 91       	pop	r17
    2df8:	0f 91       	pop	r16
    2dfa:	ff 90       	pop	r15
    2dfc:	ef 90       	pop	r14
    2dfe:	df 90       	pop	r13
    2e00:	cf 90       	pop	r12
    2e02:	bf 90       	pop	r11
    2e04:	af 90       	pop	r10
    2e06:	9f 90       	pop	r9
    2e08:	8f 90       	pop	r8
    2e0a:	7f 90       	pop	r7
    2e0c:	6f 90       	pop	r6
    2e0e:	5f 90       	pop	r5
    2e10:	4f 90       	pop	r4
    2e12:	3f 90       	pop	r3
    2e14:	2f 90       	pop	r2
    2e16:	08 95       	ret

00002e18 <reset_all_data>:
	}
}

uint8_t reset_all_data() {
	//reset data and date
	reset_tx_data(&tx_data, &tx_data_reset_values, TX_DATA_SIZE);
    2e18:	41 e1       	ldi	r20, 0x11	; 17
    2e1a:	66 e0       	ldi	r22, 0x06	; 6
    2e1c:	70 e2       	ldi	r23, 0x20	; 32
    2e1e:	88 e2       	ldi	r24, 0x28	; 40
    2e20:	95 e2       	ldi	r25, 0x25	; 37
    2e22:	77 de       	rcall	.-786    	; 0x2b12 <reset_tx_data>
	reset_char_array(&tx_data_bytes, TRANSFER_DATA_SIZE);
    2e24:	60 e8       	ldi	r22, 0x80	; 128
    2e26:	8e e0       	ldi	r24, 0x0E	; 14
    2e28:	94 e2       	ldi	r25, 0x24	; 36
    2e2a:	f5 de       	rcall	.-534    	; 0x2c16 <reset_char_array>
	reset_char_array(&tx_data_package, TRANSFER_DATA_SIZE_PACKAGE);
    2e2c:	60 e0       	ldi	r22, 0x00	; 0
    2e2e:	8e e0       	ldi	r24, 0x0E	; 14
    2e30:	93 e2       	ldi	r25, 0x23	; 35
    2e32:	f1 ce       	rjmp	.-542    	; 0x2c16 <reset_char_array>
}
    2e34:	08 95       	ret

00002e36 <at_get_radio_network_time>:

void at_get_radio_network_time(){
    2e36:	ef 92       	push	r14
    2e38:	ff 92       	push	r15
    2e3a:	0f 93       	push	r16
    2e3c:	1f 93       	push	r17
    2e3e:	cf 93       	push	r28
    2e40:	df 93       	push	r29
    2e42:	00 d0       	rcall	.+0      	; 0x2e44 <at_get_radio_network_time+0xe>
    2e44:	cd b7       	in	r28, 0x3d	; 61
    2e46:	de b7       	in	r29, 0x3e	; 62
	
	int j = 0;
	int k = AT_QLTS_START;
	char temp[3] = "";
    2e48:	19 82       	std	Y+1, r1	; 0x01
    2e4a:	1a 82       	std	Y+2, r1	; 0x02
    2e4c:	1b 82       	std	Y+3, r1	; 0x03
    2e4e:	0f 2e       	mov	r0, r31
    2e50:	fb eb       	ldi	r31, 0xBB	; 187
    2e52:	ef 2e       	mov	r14, r31
    2e54:	f4 e2       	ldi	r31, 0x24	; 36
    2e56:	ff 2e       	mov	r15, r31
    2e58:	f0 2d       	mov	r31, r0
    2e5a:	0a e0       	ldi	r16, 0x0A	; 10
    2e5c:	10 e0       	ldi	r17, 0x00	; 0
    2e5e:	f7 01       	movw	r30, r14
    2e60:	31 97       	sbiw	r30, 0x01	; 1
	while (j < 6)
		{
			int i = 0;
			while (i < 2)
			{
				temp[i] = *(response+k+i);
    2e62:	80 81       	ld	r24, Z
    2e64:	89 83       	std	Y+1, r24	; 0x01
    2e66:	f7 01       	movw	r30, r14
    2e68:	80 81       	ld	r24, Z
    2e6a:	8a 83       	std	Y+2, r24	; 0x02
				i++;
			}
		tx_data[POSITION_YEAR+j] = atoi(temp);
    2e6c:	ce 01       	movw	r24, r28
    2e6e:	01 96       	adiw	r24, 0x01	; 1
    2e70:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <atoi>
    2e74:	f8 01       	movw	r30, r16
    2e76:	ee 0f       	add	r30, r30
    2e78:	ff 1f       	adc	r31, r31
    2e7a:	e8 5d       	subi	r30, 0xD8	; 216
    2e7c:	fa 4d       	sbci	r31, 0xDA	; 218
    2e7e:	80 83       	st	Z, r24
    2e80:	91 83       	std	Z+1, r25	; 0x01
    2e82:	f3 e0       	ldi	r31, 0x03	; 3
    2e84:	ef 0e       	add	r14, r31
    2e86:	f1 1c       	adc	r15, r1
    2e88:	0f 5f       	subi	r16, 0xFF	; 255
    2e8a:	1f 4f       	sbci	r17, 0xFF	; 255
	
	int j = 0;
	int k = AT_QLTS_START;
	char temp[3] = "";
	
	while (j < 6)
    2e8c:	00 31       	cpi	r16, 0x10	; 16
    2e8e:	11 05       	cpc	r17, r1
    2e90:	31 f7       	brne	.-52     	; 0x2e5e <at_get_radio_network_time+0x28>
		tx_data[POSITION_YEAR+j] = atoi(temp);
		k = k+3;
		j++;
	}
	
}
    2e92:	23 96       	adiw	r28, 0x03	; 3
    2e94:	cd bf       	out	0x3d, r28	; 61
    2e96:	de bf       	out	0x3e, r29	; 62
    2e98:	df 91       	pop	r29
    2e9a:	cf 91       	pop	r28
    2e9c:	1f 91       	pop	r17
    2e9e:	0f 91       	pop	r16
    2ea0:	ff 90       	pop	r15
    2ea2:	ef 90       	pop	r14
    2ea4:	08 95       	ret

00002ea6 <tx_at_response>:

uint8_t tx_at_response(const m95_at_t *opt) {
    2ea6:	0f 93       	push	r16
    2ea8:	1f 93       	push	r17
    2eaa:	cf 93       	push	r28
    2eac:	df 93       	push	r29
    2eae:	ec 01       	movw	r28, r24
	uint8_t tx_at_cnt = 0; //nr of AT command sent
	char *ret; //response pointer
	uint32_t i = 0;
	
	ret = 0;
	while (tx_at_cnt < opt->retries) //Less than nr of retries to send the AT command
    2eb0:	88 85       	ldd	r24, Y+8	; 0x08
    2eb2:	88 23       	and	r24, r24
    2eb4:	09 f4       	brne	.+2      	; 0x2eb8 <tx_at_response+0x12>
    2eb6:	69 c0       	rjmp	.+210    	; 0x2f8a <tx_at_response+0xe4>
    2eb8:	10 e0       	ldi	r17, 0x00	; 0
    2eba:	00 e0       	ldi	r16, 0x00	; 0
	{
		reset_char_array(&response, RESPONSE_SIZE); //reset response buffer
    2ebc:	60 e8       	ldi	r22, 0x80	; 128
    2ebe:	88 ea       	ldi	r24, 0xA8	; 168
    2ec0:	94 e2       	ldi	r25, 0x24	; 36
    2ec2:	a9 de       	rcall	.-686    	; 0x2c16 <reset_char_array>
		response_counter = 0; //RESET COUNTER
    2ec4:	10 92 97 24 	sts	0x2497, r1	; 0x802497 <response_counter>
		response_timeout = opt->resp_time;
    2ec8:	8c 81       	ldd	r24, Y+4	; 0x04
    2eca:	9d 81       	ldd	r25, Y+5	; 0x05
    2ecc:	ae 81       	ldd	r26, Y+6	; 0x06
    2ece:	bf 81       	ldd	r27, Y+7	; 0x07
    2ed0:	80 93 93 24 	sts	0x2493, r24	; 0x802493 <response_timeout>
    2ed4:	90 93 94 24 	sts	0x2494, r25	; 0x802494 <response_timeout+0x1>
    2ed8:	a0 93 95 24 	sts	0x2495, r26	; 0x802495 <response_timeout+0x2>
    2edc:	b0 93 96 24 	sts	0x2496, r27	; 0x802496 <response_timeout+0x3>
		response_timeout_counter = 0;
    2ee0:	10 92 8f 24 	sts	0x248F, r1	; 0x80248f <response_timeout_counter>
    2ee4:	10 92 90 24 	sts	0x2490, r1	; 0x802490 <response_timeout_counter+0x1>
    2ee8:	10 92 91 24 	sts	0x2491, r1	; 0x802491 <response_timeout_counter+0x2>
    2eec:	10 92 92 24 	sts	0x2492, r1	; 0x802492 <response_timeout_counter+0x3>
		
		usart_tx_at(USART_SERIAL_SIM900, opt->cmd); //send AT command to radio
    2ef0:	68 81       	ld	r22, Y
    2ef2:	79 81       	ldd	r23, Y+1	; 0x01
    2ef4:	80 ea       	ldi	r24, 0xA0	; 160
    2ef6:	98 e0       	ldi	r25, 0x08	; 8
    2ef8:	d2 dc       	rcall	.-1628   	; 0x289e <usart_tx_at>
 * \param level Interrupt level of the RXD interrupt.
 */
static inline void usart_set_rx_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_RXCINTLVL_gm) |
    2efa:	e0 ea       	ldi	r30, 0xA0	; 160
    2efc:	f8 e0       	ldi	r31, 0x08	; 8
    2efe:	83 81       	ldd	r24, Z+3	; 0x03
    2f00:	8f 7c       	andi	r24, 0xCF	; 207
    2f02:	80 62       	ori	r24, 0x20	; 32
    2f04:	83 83       	std	Z+3, r24	; 0x03
    2f06:	21 c0       	rjmp	.+66     	; 0x2f4a <tx_at_response+0xa4>
		
		usart_set_rx_interrupt_level(USART_SERIAL_SIM900, USART_INT_LVL_MED); //READY FOR RECEIVING BYTES
		while (response_timeout_counter < response_timeout) {
			response_timeout_counter++;
    2f08:	80 91 8f 24 	lds	r24, 0x248F	; 0x80248f <response_timeout_counter>
    2f0c:	90 91 90 24 	lds	r25, 0x2490	; 0x802490 <response_timeout_counter+0x1>
    2f10:	a0 91 91 24 	lds	r26, 0x2491	; 0x802491 <response_timeout_counter+0x2>
    2f14:	b0 91 92 24 	lds	r27, 0x2492	; 0x802492 <response_timeout_counter+0x3>
    2f18:	01 96       	adiw	r24, 0x01	; 1
    2f1a:	a1 1d       	adc	r26, r1
    2f1c:	b1 1d       	adc	r27, r1
    2f1e:	80 93 8f 24 	sts	0x248F, r24	; 0x80248f <response_timeout_counter>
    2f22:	90 93 90 24 	sts	0x2490, r25	; 0x802490 <response_timeout_counter+0x1>
    2f26:	a0 93 91 24 	sts	0x2491, r26	; 0x802491 <response_timeout_counter+0x2>
    2f2a:	b0 93 92 24 	sts	0x2492, r27	; 0x802492 <response_timeout_counter+0x3>
			delay_us(1);
    2f2e:	61 e0       	ldi	r22, 0x01	; 1
    2f30:	70 e0       	ldi	r23, 0x00	; 0
    2f32:	80 e0       	ldi	r24, 0x00	; 0
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	a8 dc       	rcall	.-1712   	; 0x2888 <__portable_avr_delay_cycles>
			ret = strstr(response, opt->comp); //DO THE COMPARISON AND BREAK THE LOOP
    2f38:	6a 81       	ldd	r22, Y+2	; 0x02
    2f3a:	7b 81       	ldd	r23, Y+3	; 0x03
    2f3c:	88 ea       	ldi	r24, 0xA8	; 168
    2f3e:	94 e2       	ldi	r25, 0x24	; 36
    2f40:	0e 94 18 20 	call	0x4030	; 0x4030 <strstr>
			if (ret != 0) //correct response received. IDEALLY IT SHOULD CHECK FOR WRONG RESPONSES TO AVOID TIMOUT TO BE RUN IF IT HAPPENS
			{
				status = 0;
				goto END;
				} else {
				status = 1;
    2f44:	01 e0       	ldi	r16, 0x01	; 1
		usart_set_rx_interrupt_level(USART_SERIAL_SIM900, USART_INT_LVL_MED); //READY FOR RECEIVING BYTES
		while (response_timeout_counter < response_timeout) {
			response_timeout_counter++;
			delay_us(1);
			ret = strstr(response, opt->comp); //DO THE COMPARISON AND BREAK THE LOOP
			if (ret != 0) //correct response received. IDEALLY IT SHOULD CHECK FOR WRONG RESPONSES TO AVOID TIMOUT TO BE RUN IF IT HAPPENS
    2f46:	89 2b       	or	r24, r25
    2f48:	11 f5       	brne	.+68     	; 0x2f8e <tx_at_response+0xe8>
		response_timeout_counter = 0;
		
		usart_tx_at(USART_SERIAL_SIM900, opt->cmd); //send AT command to radio
		
		usart_set_rx_interrupt_level(USART_SERIAL_SIM900, USART_INT_LVL_MED); //READY FOR RECEIVING BYTES
		while (response_timeout_counter < response_timeout) {
    2f4a:	40 91 8f 24 	lds	r20, 0x248F	; 0x80248f <response_timeout_counter>
    2f4e:	50 91 90 24 	lds	r21, 0x2490	; 0x802490 <response_timeout_counter+0x1>
    2f52:	60 91 91 24 	lds	r22, 0x2491	; 0x802491 <response_timeout_counter+0x2>
    2f56:	70 91 92 24 	lds	r23, 0x2492	; 0x802492 <response_timeout_counter+0x3>
    2f5a:	80 91 93 24 	lds	r24, 0x2493	; 0x802493 <response_timeout>
    2f5e:	90 91 94 24 	lds	r25, 0x2494	; 0x802494 <response_timeout+0x1>
    2f62:	a0 91 95 24 	lds	r26, 0x2495	; 0x802495 <response_timeout+0x2>
    2f66:	b0 91 96 24 	lds	r27, 0x2496	; 0x802496 <response_timeout+0x3>
    2f6a:	48 17       	cp	r20, r24
    2f6c:	59 07       	cpc	r21, r25
    2f6e:	6a 07       	cpc	r22, r26
    2f70:	7b 07       	cpc	r23, r27
    2f72:	50 f2       	brcs	.-108    	; 0x2f08 <tx_at_response+0x62>
				} else {
				status = 1;
			}
		}
		
		delay_ms(300);
    2f74:	61 ea       	ldi	r22, 0xA1	; 161
    2f76:	76 e8       	ldi	r23, 0x86	; 134
    2f78:	81 e0       	ldi	r24, 0x01	; 1
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	85 dc       	rcall	.-1782   	; 0x2888 <__portable_avr_delay_cycles>
		tx_at_cnt++;
    2f7e:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t tx_at_cnt = 0; //nr of AT command sent
	char *ret; //response pointer
	uint32_t i = 0;
	
	ret = 0;
	while (tx_at_cnt < opt->retries) //Less than nr of retries to send the AT command
    2f80:	88 85       	ldd	r24, Y+8	; 0x08
    2f82:	18 17       	cp	r17, r24
    2f84:	08 f4       	brcc	.+2      	; 0x2f88 <tx_at_response+0xe2>
    2f86:	9a cf       	rjmp	.-204    	; 0x2ebc <tx_at_response+0x16>
    2f88:	03 c0       	rjmp	.+6      	; 0x2f90 <tx_at_response+0xea>
	
}

uint8_t tx_at_response(const m95_at_t *opt) {
	
	uint8_t status = 0; //tx status, 0 = alles ok.
    2f8a:	00 e0       	ldi	r16, 0x00	; 0
    2f8c:	01 c0       	rjmp	.+2      	; 0x2f90 <tx_at_response+0xea>
			response_timeout_counter++;
			delay_us(1);
			ret = strstr(response, opt->comp); //DO THE COMPARISON AND BREAK THE LOOP
			if (ret != 0) //correct response received. IDEALLY IT SHOULD CHECK FOR WRONG RESPONSES TO AVOID TIMOUT TO BE RUN IF IT HAPPENS
			{
				status = 0;
    2f8e:	00 e0       	ldi	r16, 0x00	; 0
    2f90:	e0 ea       	ldi	r30, 0xA0	; 160
    2f92:	f8 e0       	ldi	r31, 0x08	; 8
    2f94:	83 81       	ldd	r24, Z+3	; 0x03
    2f96:	8f 7c       	andi	r24, 0xCF	; 207
	
	END:
	usart_set_rx_interrupt_level(USART_SERIAL_SIM900, USART_INT_LVL_OFF); //disable rx interrupts
	
	#ifdef DEBUG
		usart_tx_at(USART_SERIAL_EXAMPLE, response); //DEBUG
    2f98:	83 83       	std	Z+3, r24	; 0x03
    2f9a:	68 ea       	ldi	r22, 0xA8	; 168
    2f9c:	74 e2       	ldi	r23, 0x24	; 36
    2f9e:	80 ea       	ldi	r24, 0xA0	; 160
    2fa0:	9a e0       	ldi	r25, 0x0A	; 10
		//usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_FOOTER); //DEBUG
	#endif // DEBUG
	
	return status;
}
    2fa2:	7d dc       	rcall	.-1798   	; 0x289e <usart_tx_at>
    2fa4:	80 2f       	mov	r24, r16
    2fa6:	df 91       	pop	r29
    2fa8:	cf 91       	pop	r28
    2faa:	1f 91       	pop	r17
    2fac:	0f 91       	pop	r16
    2fae:	08 95       	ret

00002fb0 <at_rf_connect>:

uint8_t at_rf_connect(void) {
    2fb0:	0f 93       	push	r16
    2fb2:	1f 93       	push	r17
    2fb4:	cf 93       	push	r28
    2fb6:	df 93       	push	r29
    2fb8:	c4 e3       	ldi	r28, 0x34	; 52
    2fba:	d2 e2       	ldi	r29, 0x22	; 34
    2fbc:	02 eb       	ldi	r16, 0xB2	; 178
    2fbe:	12 e2       	ldi	r17, 0x22	; 34
	
	uint8_t status = 0;
	uint8_t i = 0;
	while (i < ((sizeof(m95_connect)/(sizeof(m95_connect[0])))-1))
	{
		if (tx_at_response(&m95_connect[i])) {/*goto END;*/}
    2fc0:	ce 01       	movw	r24, r28
    2fc2:	71 df       	rcall	.-286    	; 0x2ea6 <tx_at_response>
    2fc4:	29 96       	adiw	r28, 0x09	; 9
	WILL MATCH FLOWCHART IN VISIO
	*/
	
	uint8_t status = 0;
	uint8_t i = 0;
	while (i < ((sizeof(m95_connect)/(sizeof(m95_connect[0])))-1))
    2fc6:	c0 17       	cp	r28, r16
    2fc8:	d1 07       	cpc	r29, r17
    2fca:	d1 f7       	brne	.-12     	; 0x2fc0 <at_rf_connect+0x10>
	{
		if (tx_at_response(&m95_connect[i])) {/*goto END;*/}
		i++;
	}
	if (tx_at_response(&m95_connect[i])) {status = 32; goto END;} else {at_get_radio_network_time();} //get network's time
    2fcc:	82 eb       	ldi	r24, 0xB2	; 178
    2fce:	92 e2       	ldi	r25, 0x22	; 34
    2fd0:	6a df       	rcall	.-300    	; 0x2ea6 <tx_at_response>
    2fd2:	81 11       	cpse	r24, r1
    2fd4:	03 c0       	rjmp	.+6      	; 0x2fdc <at_rf_connect+0x2c>
    2fd6:	2f df       	rcall	.-418    	; 0x2e36 <at_get_radio_network_time>
	status = 32 => QLTS, i.e. the network time didn't execute sucessfully.
	
	WILL MATCH FLOWCHART IN VISIO
	*/
	
	uint8_t status = 0;
    2fd8:	80 e0       	ldi	r24, 0x00	; 0
    2fda:	01 c0       	rjmp	.+2      	; 0x2fde <at_rf_connect+0x2e>
	while (i < ((sizeof(m95_connect)/(sizeof(m95_connect[0])))-1))
	{
		if (tx_at_response(&m95_connect[i])) {/*goto END;*/}
		i++;
	}
	if (tx_at_response(&m95_connect[i])) {status = 32; goto END;} else {at_get_radio_network_time();} //get network's time
    2fdc:	80 e2       	ldi	r24, 0x20	; 32
	
	END: 
	
	return status;
}
    2fde:	df 91       	pop	r29
    2fe0:	cf 91       	pop	r28
    2fe2:	1f 91       	pop	r17
    2fe4:	0f 91       	pop	r16
    2fe6:	08 95       	ret

00002fe8 <at_rf_disconnect>:
	*/
	uint8_t status = 0;
	uint8_t i = 0;
	while (i < ((sizeof(m95_disconnect)/(sizeof(m95_disconnect[0])))))
	{
		if (tx_at_response(&m95_disconnect[i])) {/*goto END;*/}
    2fe8:	87 e0       	ldi	r24, 0x07	; 7
    2fea:	92 e2       	ldi	r25, 0x22	; 34
    2fec:	5c df       	rcall	.-328    	; 0x2ea6 <tx_at_response>
    2fee:	80 e1       	ldi	r24, 0x10	; 16
    2ff0:	92 e2       	ldi	r25, 0x22	; 34
    2ff2:	59 df       	rcall	.-334    	; 0x2ea6 <tx_at_response>
		i++;
	}
	
	END: return status;
}
    2ff4:	80 e0       	ldi	r24, 0x00	; 0
    2ff6:	08 95       	ret

00002ff8 <tx>:

uint8_t tx(char *data, int len) {
    2ff8:	ef 92       	push	r14
    2ffa:	ff 92       	push	r15
    2ffc:	0f 93       	push	r16
    2ffe:	1f 93       	push	r17
    3000:	cf 93       	push	r28
    3002:	7c 01       	movw	r14, r24
    3004:	8b 01       	movw	r16, r22
	status > 0 => one of the AT commands was not executed sucessfully.
	*/
	uint8_t status = 0;
	uint8_t i = 0;
		
	if (tx_at_response(&m95_tx[0])) {/*status = 1; goto END;*/} //SPECIFIED TO ELEMENT 0
    3006:	89 e1       	ldi	r24, 0x19	; 25
    3008:	92 e2       	ldi	r25, 0x22	; 34
    300a:	4d df       	rcall	.-358    	; 0x2ea6 <tx_at_response>
	if (tx_at_response(&m95_tx[1])) {/*status = 1; goto END;*/} //SPECIFIED TO ELEMENT 0
    300c:	82 e2       	ldi	r24, 0x22	; 34
    300e:	92 e2       	ldi	r25, 0x22	; 34
    3010:	4a df       	rcall	.-364    	; 0x2ea6 <tx_at_response>
	while (i < len)
    3012:	10 16       	cp	r1, r16
    3014:	11 06       	cpc	r1, r17
    3016:	74 f4       	brge	.+28     	; 0x3034 <tx+0x3c>
    3018:	c0 e0       	ldi	r28, 0x00	; 0
	{
		//usart_putchar(USART_SERIAL_SIM900, *(data+i));
		#ifdef DEBUG
			usart_putchar(USART_SERIAL_EXAMPLE, *(data+i)); //DEBUG
    301a:	f7 01       	movw	r30, r14
    301c:	ec 0f       	add	r30, r28
    301e:	f1 1d       	adc	r31, r1
    3020:	60 81       	ld	r22, Z
    3022:	80 ea       	ldi	r24, 0xA0	; 160
    3024:	9a e0       	ldi	r25, 0x0A	; 10
    3026:	ae d9       	rcall	.-3236   	; 0x2384 <usart_putchar>
		#endif // DEBUG
		i++;
    3028:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t status = 0;
	uint8_t i = 0;
		
	if (tx_at_response(&m95_tx[0])) {/*status = 1; goto END;*/} //SPECIFIED TO ELEMENT 0
	if (tx_at_response(&m95_tx[1])) {/*status = 1; goto END;*/} //SPECIFIED TO ELEMENT 0
	while (i < len)
    302a:	8c 2f       	mov	r24, r28
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	80 17       	cp	r24, r16
    3030:	91 07       	cpc	r25, r17
    3032:	9c f3       	brlt	.-26     	; 0x301a <tx+0x22>
		#ifdef DEBUG
			usart_putchar(USART_SERIAL_EXAMPLE, *(data+i)); //DEBUG
		#endif // DEBUG
		i++;
	}
	usart_tx_at(USART_SERIAL_SIM900, CTRL_Z);
    3034:	64 e7       	ldi	r22, 0x74	; 116
    3036:	70 e2       	ldi	r23, 0x20	; 32
    3038:	80 ea       	ldi	r24, 0xA0	; 160
    303a:	98 e0       	ldi	r25, 0x08	; 8
    303c:	30 dc       	rcall	.-1952   	; 0x289e <usart_tx_at>
	//if (tx_at_response(&m95_tx[2])) {/*status = 1; goto END;*/} //SPECIFIED TO ELEMENT 0 FIX!!!!!!
			
	END: return status;
}
    303e:	80 e0       	ldi	r24, 0x00	; 0
    3040:	cf 91       	pop	r28
    3042:	1f 91       	pop	r17
    3044:	0f 91       	pop	r16
    3046:	ff 90       	pop	r15
    3048:	ef 90       	pop	r14
    304a:	08 95       	ret

0000304c <__vector_25>:


ISR(USARTC0_RXC_vect)
{
    304c:	1f 92       	push	r1
    304e:	0f 92       	push	r0
    3050:	0f b6       	in	r0, 0x3f	; 63
    3052:	0f 92       	push	r0
    3054:	11 24       	eor	r1, r1
    3056:	08 b6       	in	r0, 0x38	; 56
    3058:	0f 92       	push	r0
    305a:	18 be       	out	0x38, r1	; 56
    305c:	09 b6       	in	r0, 0x39	; 57
    305e:	0f 92       	push	r0
    3060:	19 be       	out	0x39, r1	; 57
    3062:	0a b6       	in	r0, 0x3a	; 58
    3064:	0f 92       	push	r0
    3066:	1a be       	out	0x3a, r1	; 58
    3068:	0b b6       	in	r0, 0x3b	; 59
    306a:	0f 92       	push	r0
    306c:	1b be       	out	0x3b, r1	; 59
    306e:	2f 93       	push	r18
    3070:	3f 93       	push	r19
    3072:	4f 93       	push	r20
    3074:	5f 93       	push	r21
    3076:	6f 93       	push	r22
    3078:	7f 93       	push	r23
    307a:	8f 93       	push	r24
    307c:	9f 93       	push	r25
    307e:	af 93       	push	r26
    3080:	bf 93       	push	r27
    3082:	cf 93       	push	r28
    3084:	df 93       	push	r29
    3086:	ef 93       	push	r30
    3088:	ff 93       	push	r31
	*(response + response_counter) = usart_getchar(USART_SERIAL_SIM900);
    308a:	c0 91 97 24 	lds	r28, 0x2497	; 0x802497 <response_counter>
    308e:	d0 e0       	ldi	r29, 0x00	; 0
    3090:	c8 55       	subi	r28, 0x58	; 88
    3092:	db 4d       	sbci	r29, 0xDB	; 219
    3094:	80 ea       	ldi	r24, 0xA0	; 160
    3096:	98 e0       	ldi	r25, 0x08	; 8
    3098:	7d d9       	rcall	.-3334   	; 0x2394 <usart_getchar>
    309a:	88 83       	st	Y, r24
	response_counter++;
    309c:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <response_counter>
    30a0:	8f 5f       	subi	r24, 0xFF	; 255
    30a2:	80 93 97 24 	sts	0x2497, r24	; 0x802497 <response_counter>
	response_timeout_counter = 0; //reset global timeout counter for each byte read. Could ideally be lower for 20 seconds timeout commands. FIX!!!!!
    30a6:	10 92 8f 24 	sts	0x248F, r1	; 0x80248f <response_timeout_counter>
    30aa:	10 92 90 24 	sts	0x2490, r1	; 0x802490 <response_timeout_counter+0x1>
    30ae:	10 92 91 24 	sts	0x2491, r1	; 0x802491 <response_timeout_counter+0x2>
    30b2:	10 92 92 24 	sts	0x2492, r1	; 0x802492 <response_timeout_counter+0x3>
}
    30b6:	ff 91       	pop	r31
    30b8:	ef 91       	pop	r30
    30ba:	df 91       	pop	r29
    30bc:	cf 91       	pop	r28
    30be:	bf 91       	pop	r27
    30c0:	af 91       	pop	r26
    30c2:	9f 91       	pop	r25
    30c4:	8f 91       	pop	r24
    30c6:	7f 91       	pop	r23
    30c8:	6f 91       	pop	r22
    30ca:	5f 91       	pop	r21
    30cc:	4f 91       	pop	r20
    30ce:	3f 91       	pop	r19
    30d0:	2f 91       	pop	r18
    30d2:	0f 90       	pop	r0
    30d4:	0b be       	out	0x3b, r0	; 59
    30d6:	0f 90       	pop	r0
    30d8:	0a be       	out	0x3a, r0	; 58
    30da:	0f 90       	pop	r0
    30dc:	09 be       	out	0x39, r0	; 57
    30de:	0f 90       	pop	r0
    30e0:	08 be       	out	0x38, r0	; 56
    30e2:	0f 90       	pop	r0
    30e4:	0f be       	out	0x3f, r0	; 63
    30e6:	0f 90       	pop	r0
    30e8:	1f 90       	pop	r1
    30ea:	18 95       	reti

000030ec <__vector_10>:

ISR(RTC_OVF_vect)
{
    30ec:	1f 92       	push	r1
    30ee:	0f 92       	push	r0
    30f0:	0f b6       	in	r0, 0x3f	; 63
    30f2:	0f 92       	push	r0
    30f4:	11 24       	eor	r1, r1
    30f6:	08 b6       	in	r0, 0x38	; 56
    30f8:	0f 92       	push	r0
    30fa:	18 be       	out	0x38, r1	; 56
    30fc:	09 b6       	in	r0, 0x39	; 57
    30fe:	0f 92       	push	r0
    3100:	19 be       	out	0x39, r1	; 57
    3102:	0a b6       	in	r0, 0x3a	; 58
    3104:	0f 92       	push	r0
    3106:	1a be       	out	0x3a, r1	; 58
    3108:	0b b6       	in	r0, 0x3b	; 59
    310a:	0f 92       	push	r0
    310c:	1b be       	out	0x3b, r1	; 59
    310e:	2f 92       	push	r2
    3110:	3f 92       	push	r3
    3112:	4f 92       	push	r4
    3114:	5f 92       	push	r5
    3116:	6f 92       	push	r6
    3118:	7f 92       	push	r7
    311a:	8f 92       	push	r8
    311c:	9f 92       	push	r9
    311e:	af 92       	push	r10
    3120:	bf 92       	push	r11
    3122:	cf 92       	push	r12
    3124:	df 92       	push	r13
    3126:	ef 92       	push	r14
    3128:	ff 92       	push	r15
    312a:	0f 93       	push	r16
    312c:	1f 93       	push	r17
    312e:	2f 93       	push	r18
    3130:	3f 93       	push	r19
    3132:	4f 93       	push	r20
    3134:	5f 93       	push	r21
    3136:	6f 93       	push	r22
    3138:	7f 93       	push	r23
    313a:	8f 93       	push	r24
    313c:	9f 93       	push	r25
    313e:	af 93       	push	r26
    3140:	bf 93       	push	r27
    3142:	ef 93       	push	r30
    3144:	ff 93       	push	r31
    3146:	cf 93       	push	r28
    3148:	df 93       	push	r29
    314a:	cd b7       	in	r28, 0x3d	; 61
    314c:	de b7       	in	r29, 0x3e	; 62
    314e:	2a 97       	sbiw	r28, 0x0a	; 10
    3150:	cd bf       	out	0x3d, r28	; 61
    3152:	de bf       	out	0x3e, r29	; 62
	sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    3154:	64 e0       	ldi	r22, 0x04	; 4
    3156:	80 e0       	ldi	r24, 0x00	; 0
    3158:	aa d8       	rcall	.-3756   	; 0x22ae <sysclk_disable_module>
	//cli(); //disable interrupts. Other way of disabling and resetting?
	#ifdef DEBUG
		led_blink(50); //DEBUG
    315a:	82 e3       	ldi	r24, 0x32	; 50
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	b3 db       	rcall	.-2202   	; 0x28c6 <led_blink>
	#endif // DEBUG
	
	RTC_ISR_ACTIVE = 1;
    3160:	81 e0       	ldi	r24, 0x01	; 1
    3162:	80 93 8e 24 	sts	0x248E, r24	; 0x80248e <RTC_ISR_ACTIVE>
	while (RTC_ISR_ACTIVE == 1)
    3166:	80 91 8e 24 	lds	r24, 0x248E	; 0x80248e <RTC_ISR_ACTIVE>
    316a:	81 30       	cpi	r24, 0x01	; 1
    316c:	09 f0       	breq	.+2      	; 0x3170 <__vector_10+0x84>
    316e:	51 c1       	rjmp	.+674    	; 0x3412 <__vector_10+0x326>
				controller_next_state = RF_POWER_OFF;
				break;
			
			case RF_POWER_OFF:
				radio_power_down(); //radio power down
				controller_next_state = RESET_REGISTERS;
    3170:	0f 2e       	mov	r0, r31
    3172:	fb e0       	ldi	r31, 0x0B	; 11
    3174:	6f 2e       	mov	r6, r31
    3176:	f0 2d       	mov	r31, r0
				controller_next_state = RF_DISCONNECT;		
				break;
				
			case RF_DISCONNECT:
				at_rf_disconnect(); //Disconnect
				controller_next_state = RF_POWER_OFF;
    3178:	0f 2e       	mov	r0, r31
    317a:	fa e0       	ldi	r31, 0x0A	; 10
    317c:	7f 2e       	mov	r7, r31
    317e:	f0 2d       	mov	r31, r0
				tx(&tx_data_package, transfer_data_length_package); //transmit package. GENERATE STATUS FROM THIS.
				controller_next_state = RX_DATA;		
				break;
			
			case RX_DATA:
				controller_next_state = RF_DISCONNECT;		
    3180:	0f 2e       	mov	r0, r31
    3182:	f9 e0       	ldi	r31, 0x09	; 9
    3184:	cf 2e       	mov	r12, r31
    3186:	f0 2d       	mov	r31, r0
				controller_next_state = TX_DATA;
				break;
				
			case TX_DATA:
				tx(&tx_data_package, transfer_data_length_package); //transmit package. GENERATE STATUS FROM THIS.
				controller_next_state = RX_DATA;		
    3188:	68 94       	set
    318a:	44 24       	eor	r4, r4
    318c:	43 f8       	bld	r4, 3
				
			case GENERATE_PACKAGE:
				data_to_char(&tx_data, TX_DATA_SIZE, &tx_data_bytes, TRANSFER_DATA_BASE);
 				transfer_data_length_package = mqtt_packet(&tx_data_bytes, &tx_data_package, TRANSFER_DATA_SIZE_PACKAGE); //convert ascii data to MQTT package.
				#ifdef DEBUG //output package size
					char package_lenght[5] = "";
    318e:	0f 2e       	mov	r0, r31
    3190:	f3 e0       	ldi	r31, 0x03	; 3
    3192:	df 2e       	mov	r13, r31
    3194:	f0 2d       	mov	r31, r0
    3196:	4e 01       	movw	r8, r28
    3198:	28 e0       	ldi	r18, 0x08	; 8
    319a:	82 0e       	add	r8, r18
    319c:	91 1c       	adc	r9, r1
					char mystring[5] = "";
    319e:	5e 01       	movw	r10, r28
    31a0:	83 e0       	ldi	r24, 0x03	; 3
    31a2:	a8 0e       	add	r10, r24
    31a4:	b1 1c       	adc	r11, r1
					itoa(transfer_data_length_package, package_lenght, 10);
					strcpy(mystring, package_lenght);
					usart_tx_at(USART_SERIAL_EXAMPLE, mystring);
				#endif // DEBUG
				controller_next_state = TX_DATA;
    31a6:	0f 2e       	mov	r0, r31
    31a8:	f7 e0       	ldi	r31, 0x07	; 7
    31aa:	5f 2e       	mov	r5, r31
    31ac:	f0 2d       	mov	r31, r0
				{
					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_CONNECT); //set failure status
					controller_next_state = RF_DISCONNECT; //if failure go to disconnect
					break;
 				}
				controller_next_state = GENERATE_PACKAGE;
    31ae:	0f 2e       	mov	r0, r31
    31b0:	f6 e0       	ldi	r31, 0x06	; 6
    31b2:	2f 2e       	mov	r2, r31
    31b4:	f0 2d       	mov	r31, r0
				{
					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_POWER_ON); //set failure status
					controller_next_state = RF_POWER_OFF; //if failure go to power off
					break;
				}
				controller_next_state = RF_CONNECT;
    31b6:	0f 2e       	mov	r0, r31
    31b8:	f5 e0       	ldi	r31, 0x05	; 5
    31ba:	3f 2e       	mov	r3, r31
    31bc:	f0 2d       	mov	r31, r0
		
		switch(controller_state) {
			
			case READ_EXT_DATA:
				reset_char_array(&response, RESPONSE_SIZE); //reset response buffer
				REQUEST_DATA_PORT.OUTSET |= (1<<REQUEST_DATA_PIN); //set signal high
    31be:	0f 2e       	mov	r0, r31
    31c0:	f0 ea       	ldi	r31, 0xA0	; 160
    31c2:	ef 2e       	mov	r14, r31
    31c4:	f6 e0       	ldi	r31, 0x06	; 6
    31c6:	ff 2e       	mov	r15, r31
    31c8:	f0 2d       	mov	r31, r0
	
	RTC_ISR_ACTIVE = 1;
	while (RTC_ISR_ACTIVE == 1)
	{
		
		switch(controller_state) {
    31ca:	80 91 9d 24 	lds	r24, 0x249D	; 0x80249d <controller_state>
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	8c 30       	cpi	r24, 0x0C	; 12
    31d2:	91 05       	cpc	r25, r1
    31d4:	08 f0       	brcs	.+2      	; 0x31d8 <__vector_10+0xec>
    31d6:	12 c1       	rjmp	.+548    	; 0x33fc <__vector_10+0x310>
    31d8:	fc 01       	movw	r30, r24
    31da:	88 27       	eor	r24, r24
    31dc:	e2 50       	subi	r30, 0x02	; 2
    31de:	ff 4f       	sbci	r31, 0xFF	; 255
    31e0:	8f 4f       	sbci	r24, 0xFF	; 255
			
			case READ_EXT_DATA:
				reset_char_array(&response, RESPONSE_SIZE); //reset response buffer
    31e2:	27 c6       	rjmp	.+3150   	; 0x3e32 <__tablejump2__>
    31e4:	60 e8       	ldi	r22, 0x80	; 128
    31e6:	88 ea       	ldi	r24, 0xA8	; 168
    31e8:	94 e2       	ldi	r25, 0x24	; 36
				REQUEST_DATA_PORT.OUTSET |= (1<<REQUEST_DATA_PIN); //set signal high
    31ea:	15 dd       	rcall	.-1494   	; 0x2c16 <reset_char_array>
    31ec:	f7 01       	movw	r30, r14
    31ee:	85 81       	ldd	r24, Z+5	; 0x05
    31f0:	80 61       	ori	r24, 0x10	; 16
				//at_response(USART_EXT_DATA, RESPONSE_TIME_300M, &response); //read the response from the radio
				REQUEST_DATA_PORT.OUTSET &= ~(1<<REQUEST_DATA_PIN); //set signal low
    31f2:	85 83       	std	Z+5, r24	; 0x05
    31f4:	85 81       	ldd	r24, Z+5	; 0x05
				#ifdef DEBUG
					usart_tx_at(USART_SERIAL_EXAMPLE, response);
    31f6:	8f 7e       	andi	r24, 0xEF	; 239
    31f8:	85 83       	std	Z+5, r24	; 0x05
    31fa:	68 ea       	ldi	r22, 0xA8	; 168
    31fc:	74 e2       	ldi	r23, 0x24	; 36
    31fe:	80 ea       	ldi	r24, 0xA0	; 160
				#endif // _DEBUG
				uint16_t ext_data = (response[0] << 8) | response[1]; //convert response to bytes and store in data registers
    3200:	9a e0       	ldi	r25, 0x0A	; 10
    3202:	4d db       	rcall	.-2406   	; 0x289e <usart_tx_at>
    3204:	e8 ea       	ldi	r30, 0xA8	; 168
    3206:	f4 e2       	ldi	r31, 0x24	; 36
    3208:	20 81       	ld	r18, Z
    320a:	81 81       	ldd	r24, Z+1	; 0x01
    320c:	02 2e       	mov	r0, r18
    320e:	00 0c       	add	r0, r0
    3210:	33 0b       	sbc	r19, r19
    3212:	32 2f       	mov	r19, r18
    3214:	22 27       	eor	r18, r18
    3216:	08 2e       	mov	r0, r24
    3218:	00 0c       	add	r0, r0
    321a:	99 0b       	sbc	r25, r25
				//This position needs to be specified for each use case dependent on available registers.
				tx_data[POSITION_DIO] = ext_data;
    321c:	82 2b       	or	r24, r18
    321e:	93 2b       	or	r25, r19
    3220:	80 93 38 25 	sts	0x2538, r24	; 0x802538 <tx_data+0x10>
				//////////////////////////////////////////////////////////////////////////
				controller_next_state = MEASURE;
    3224:	90 93 39 25 	sts	0x2539, r25	; 0x802539 <tx_data+0x11>
    3228:	81 e0       	ldi	r24, 0x01	; 1
				//controller_next_state = RESET_REGISTERS; //DEBUG
				break;
			
			case MEASURE:
				//GENERAL MEASUREMENTS
 				tx_data[POSITION_ANA0] = adc_result_average(&ADCA, ADC_CH0, ADCCH_POS_PIN0, ADC_NUM_AVG); //
    322a:	80 93 9c 24 	sts	0x249C, r24	; 0x80249c <controller_next_state>
    322e:	e8 c0       	rjmp	.+464    	; 0x3400 <__vector_10+0x314>
    3230:	2c 2d       	mov	r18, r12
    3232:	40 e0       	ldi	r20, 0x00	; 0
    3234:	61 e0       	ldi	r22, 0x01	; 1
    3236:	80 e0       	ldi	r24, 0x00	; 0
    3238:	92 e0       	ldi	r25, 0x02	; 2
    323a:	e3 db       	rcall	.-2106   	; 0x2a02 <adc_result_average>
    323c:	08 e2       	ldi	r16, 0x28	; 40
// 				tx_data[POSITION_ANA1] = adc_result_average(&ADCA, ADC_CH0, ADCCH_POS_PIN1, ADC_NUM_AVG); //
// 				tx_data[POSITION_ANA2] = adc_result_average(&ADCA, ADC_CH0, ADCCH_POS_PIN2, ADC_NUM_AVG); //
// 				tx_data[POSITION_ANA3] = adc_result_average(&ADCA, ADC_CH0, ADCCH_POS_PIN3, ADC_NUM_AVG); //
// 				tx_data[POSITION_ANA4] = adc_result_average(&ADCA, ADC_CH0, ADCCH_POS_PIN4, ADC_NUM_AVG); //
// 				tx_data[POSITION_ANA5] = adc_result_average(&ADCA, ADC_CH0, ADCCH_POS_PIN5, ADC_NUM_AVG); //
				tx_data[POSITION_TEMP] = adc_result_average(&ADCB, ADC_CH0, ADCCH_POS_TEMPSENSE, 1); //PIN CHANGE HAVE NO EFFECT ON ADCB
    323e:	15 e2       	ldi	r17, 0x25	; 37
    3240:	f8 01       	movw	r30, r16
    3242:	80 83       	st	Z, r24
    3244:	91 83       	std	Z+1, r25	; 0x01
    3246:	21 e0       	ldi	r18, 0x01	; 1
    3248:	40 e1       	ldi	r20, 0x10	; 16
    324a:	61 e0       	ldi	r22, 0x01	; 1
    324c:	80 e4       	ldi	r24, 0x40	; 64
    324e:	92 e0       	ldi	r25, 0x02	; 2
				tx_data[POSITION_VDD] = adc_result_average(&ADCB, ADC_CH1, ADCCH_POS_BANDGAP, 1); //PIN CHANGE HAVE NO EFFECT ON ADCB
    3250:	d8 db       	rcall	.-2128   	; 0x2a02 <adc_result_average>
    3252:	f8 01       	movw	r30, r16
    3254:	84 87       	std	Z+12, r24	; 0x0c
    3256:	95 87       	std	Z+13, r25	; 0x0d
    3258:	21 e0       	ldi	r18, 0x01	; 1
    325a:	41 e1       	ldi	r20, 0x11	; 17
    325c:	62 e0       	ldi	r22, 0x02	; 2
    325e:	80 e4       	ldi	r24, 0x40	; 64
    3260:	92 e0       	ldi	r25, 0x02	; 2
    3262:	cf db       	rcall	.-2146   	; 0x2a02 <adc_result_average>
				
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				accu_data += tx_data[POSITION_CURRENT]; //controller_measure(9, &tx_data); //measure with averaging, and accumulate.
    3264:	f8 01       	movw	r30, r16
    3266:	86 87       	std	Z+14, r24	; 0x0e
    3268:	97 87       	std	Z+15, r25	; 0x0f
    326a:	20 81       	ld	r18, Z
    326c:	31 81       	ldd	r19, Z+1	; 0x01
    326e:	80 91 98 24 	lds	r24, 0x2498	; 0x802498 <accu_data>
    3272:	90 91 99 24 	lds	r25, 0x2499	; 0x802499 <accu_data+0x1>
    3276:	a0 91 9a 24 	lds	r26, 0x249A	; 0x80249a <accu_data+0x2>
    327a:	b0 91 9b 24 	lds	r27, 0x249B	; 0x80249b <accu_data+0x3>
    327e:	82 0f       	add	r24, r18
    3280:	93 1f       	adc	r25, r19
    3282:	a1 1d       	adc	r26, r1
    3284:	b1 1d       	adc	r27, r1
    3286:	80 93 98 24 	sts	0x2498, r24	; 0x802498 <accu_data>
    328a:	90 93 99 24 	sts	0x2499, r25	; 0x802499 <accu_data+0x1>
    328e:	a0 93 9a 24 	sts	0x249A, r26	; 0x80249a <accu_data+0x2>
				loadcell_min_max_tran(tx_data[POSITION_CURRENT], &tx_data); //check if new value should be stored in min, max and tran.
    3292:	b0 93 9b 24 	sts	0x249B, r27	; 0x80249b <accu_data+0x3>
    3296:	80 81       	ld	r24, Z
    3298:	91 81       	ldd	r25, Z+1	; 0x01
				tx_data[POSITION_PREV] = tx_data[POSITION_CURRENT]; //store adc value for next measurement.
    329a:	b8 01       	movw	r22, r16
    329c:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <loadcell_min_max_tran>
    32a0:	f8 01       	movw	r30, r16
    32a2:	80 81       	ld	r24, Z
				///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				
				tx_data[POSITION_TIME]++; //increase timestamp counter.
    32a4:	91 81       	ldd	r25, Z+1	; 0x01
    32a6:	82 83       	std	Z+2, r24	; 0x02
    32a8:	93 83       	std	Z+3, r25	; 0x03
    32aa:	82 89       	ldd	r24, Z+18	; 0x12
    32ac:	93 89       	ldd	r25, Z+19	; 0x13
								
				if (tx_data[POSITION_TIME] >= (TRANSMIT_RATE/WAKEUP_RATE)) //if accumulation limit is reached.
    32ae:	01 96       	adiw	r24, 0x01	; 1
    32b0:	82 8b       	std	Z+18, r24	; 0x12
    32b2:	93 8b       	std	Z+19, r25	; 0x13
    32b4:	82 89       	ldd	r24, Z+18	; 0x12
				{
					controller_next_state = CALC; //limit reached, go to next 
    32b6:	93 89       	ldd	r25, Z+19	; 0x13
    32b8:	02 97       	sbiw	r24, 0x02	; 2
    32ba:	20 f0       	brcs	.+8      	; 0x32c4 <__vector_10+0x1d8>
    32bc:	82 e0       	ldi	r24, 0x02	; 2
				} else {
					controller_next_state = READ_EXT_DATA; //Start from top again
    32be:	80 93 9c 24 	sts	0x249C, r24	; 0x80249c <controller_next_state>
					RTC_ISR_ACTIVE = 0; //Break loop and go to sleep again
    32c2:	9e c0       	rjmp	.+316    	; 0x3400 <__vector_10+0x314>
    32c4:	10 92 9c 24 	sts	0x249C, r1	; 0x80249c <controller_next_state>
				}
				break;
				
			case CALC:
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				tx_data[POSITION_AVG] = controller_calc_avg(accu_data, tx_data[POSITION_TIME]); //calc and store average.
    32c8:	10 92 8e 24 	sts	0x248E, r1	; 0x80248e <RTC_ISR_ACTIVE>
    32cc:	99 c0       	rjmp	.+306    	; 0x3400 <__vector_10+0x314>
    32ce:	08 e2       	ldi	r16, 0x28	; 40
    32d0:	15 e2       	ldi	r17, 0x25	; 37
}

uint16_t controller_calc_avg(uint32_t data, uint16_t cnt) {
	 uint16_t avg = 0;
	 
	 avg = data/cnt;
    32d2:	f8 01       	movw	r30, r16
    32d4:	22 89       	ldd	r18, Z+18	; 0x12
    32d6:	33 89       	ldd	r19, Z+19	; 0x13
    32d8:	40 e0       	ldi	r20, 0x00	; 0
    32da:	50 e0       	ldi	r21, 0x00	; 0
    32dc:	60 91 98 24 	lds	r22, 0x2498	; 0x802498 <accu_data>
    32e0:	70 91 99 24 	lds	r23, 0x2499	; 0x802499 <accu_data+0x1>
    32e4:	80 91 9a 24 	lds	r24, 0x249A	; 0x80249a <accu_data+0x2>
				}
				break;
				
			case CALC:
				//SPECIAL MEASUREMENTS REQUIRED BY THE LOADCELL////////////////////////////////////////////////////////////////////////
				tx_data[POSITION_AVG] = controller_calc_avg(accu_data, tx_data[POSITION_TIME]); //calc and store average.
    32e8:	90 91 9b 24 	lds	r25, 0x249B	; 0x80249b <accu_data+0x3>
    32ec:	80 d5       	rcall	.+2816   	; 0x3dee <__udivmodsi4>
				accu_data = 0; //reset parameters
    32ee:	f8 01       	movw	r30, r16
    32f0:	24 83       	std	Z+4, r18	; 0x04
    32f2:	35 83       	std	Z+5, r19	; 0x05
    32f4:	10 92 98 24 	sts	0x2498, r1	; 0x802498 <accu_data>
    32f8:	10 92 99 24 	sts	0x2499, r1	; 0x802499 <accu_data+0x1>
    32fc:	10 92 9a 24 	sts	0x249A, r1	; 0x80249a <accu_data+0x2>
				///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				controller_next_state = STORE_EXT_MEM;
				break;
				
			case STORE_EXT_MEM:
				tx_data[POSITION_TIME] = 0; //reset accumulation counter if something???????????????
    3300:	10 92 9b 24 	sts	0x249B, r1	; 0x80249b <accu_data+0x3>
    3304:	d0 92 9c 24 	sts	0x249C, r13	; 0x80249c <controller_next_state>
				controller_next_state = RF_POWER_ON;
    3308:	7b c0       	rjmp	.+246    	; 0x3400 <__vector_10+0x314>
    330a:	10 92 3a 25 	sts	0x253A, r1	; 0x80253a <tx_data+0x12>
				break;
    330e:	10 92 3b 25 	sts	0x253B, r1	; 0x80253b <tx_data+0x13>
			
			case RF_POWER_ON:
				if (radio_power_on() == 1) //power on and check if it fails
    3312:	84 e0       	ldi	r24, 0x04	; 4
    3314:	80 93 9c 24 	sts	0x249C, r24	; 0x80249c <controller_next_state>
				{
					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_POWER_ON); //set failure status
    3318:	73 c0       	rjmp	.+230    	; 0x3400 <__vector_10+0x314>
    331a:	1a dc       	rcall	.-1996   	; 0x2b50 <radio_power_on>
    331c:	81 30       	cpi	r24, 0x01	; 1
    331e:	51 f4       	brne	.+20     	; 0x3334 <__vector_10+0x248>
    3320:	e8 e2       	ldi	r30, 0x28	; 40
    3322:	f5 e2       	ldi	r31, 0x25	; 37
					controller_next_state = RF_POWER_OFF; //if failure go to power off
    3324:	80 a1       	ldd	r24, Z+32	; 0x20
    3326:	91 a1       	ldd	r25, Z+33	; 0x21
					break;
    3328:	81 60       	ori	r24, 0x01	; 1
				}
				controller_next_state = RF_CONNECT;
    332a:	80 a3       	std	Z+32, r24	; 0x20
    332c:	91 a3       	std	Z+33, r25	; 0x21
				break;
    332e:	70 92 9c 24 	sts	0x249C, r7	; 0x80249c <controller_next_state>
				
			case RF_CONNECT:
				if (at_rf_connect() != 0) //Connect to network. MAKE STATUS REPORT FROM THIS!!!!!!!
    3332:	66 c0       	rjmp	.+204    	; 0x3400 <__vector_10+0x314>
    3334:	30 92 9c 24 	sts	0x249C, r3	; 0x80249c <controller_next_state>
				{
					tx_data[POSITION_STATUS] |= (1<<STATUS_BIT_RF_CONNECT); //set failure status
    3338:	63 c0       	rjmp	.+198    	; 0x3400 <__vector_10+0x314>
    333a:	3a de       	rcall	.-908    	; 0x2fb0 <at_rf_connect>
    333c:	88 23       	and	r24, r24
    333e:	51 f0       	breq	.+20     	; 0x3354 <__vector_10+0x268>
    3340:	e8 e2       	ldi	r30, 0x28	; 40
    3342:	f5 e2       	ldi	r31, 0x25	; 37
    3344:	80 a1       	ldd	r24, Z+32	; 0x20
					controller_next_state = RF_DISCONNECT; //if failure go to disconnect
    3346:	91 a1       	ldd	r25, Z+33	; 0x21
					break;
 				}
				controller_next_state = GENERATE_PACKAGE;
    3348:	82 60       	ori	r24, 0x02	; 2
    334a:	80 a3       	std	Z+32, r24	; 0x20
				break;
    334c:	91 a3       	std	Z+33, r25	; 0x21
				
			case GENERATE_PACKAGE:
				data_to_char(&tx_data, TX_DATA_SIZE, &tx_data_bytes, TRANSFER_DATA_BASE);
    334e:	c0 92 9c 24 	sts	0x249C, r12	; 0x80249c <controller_next_state>
    3352:	56 c0       	rjmp	.+172    	; 0x3400 <__vector_10+0x314>
    3354:	20 92 9c 24 	sts	0x249C, r2	; 0x80249c <controller_next_state>
    3358:	53 c0       	rjmp	.+166    	; 0x3400 <__vector_10+0x314>
    335a:	2a e0       	ldi	r18, 0x0A	; 10
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	4e e0       	ldi	r20, 0x0E	; 14
 				transfer_data_length_package = mqtt_packet(&tx_data_bytes, &tx_data_package, TRANSFER_DATA_SIZE_PACKAGE); //convert ascii data to MQTT package.
    3360:	54 e2       	ldi	r21, 0x24	; 36
    3362:	61 e1       	ldi	r22, 0x11	; 17
    3364:	88 e2       	ldi	r24, 0x28	; 40
    3366:	95 e2       	ldi	r25, 0x25	; 37
    3368:	64 dc       	rcall	.-1848   	; 0x2c32 <data_to_char>
    336a:	40 e0       	ldi	r20, 0x00	; 0
    336c:	51 e0       	ldi	r21, 0x01	; 1
    336e:	6e e0       	ldi	r22, 0x0E	; 14
    3370:	73 e2       	ldi	r23, 0x23	; 35
    3372:	8e e0       	ldi	r24, 0x0E	; 14
    3374:	94 e2       	ldi	r25, 0x24	; 36
    3376:	0e 94 a3 10 	call	0x2146	; 0x2146 <mqtt_packet>
				#ifdef DEBUG //output package size
					char package_lenght[5] = "";
    337a:	80 93 0c 23 	sts	0x230C, r24	; 0x80230c <transfer_data_length_package>
    337e:	90 93 0d 23 	sts	0x230D, r25	; 0x80230d <transfer_data_length_package+0x1>
    3382:	1e 82       	std	Y+6, r1	; 0x06
					char mystring[5] = "";
    3384:	1f 82       	std	Y+7, r1	; 0x07
    3386:	f4 01       	movw	r30, r8
    3388:	2d 2d       	mov	r18, r13
    338a:	11 92       	st	Z+, r1
    338c:	2a 95       	dec	r18
    338e:	e9 f7       	brne	.-6      	; 0x338a <__vector_10+0x29e>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    3390:	19 82       	std	Y+1, r1	; 0x01
    3392:	1a 82       	std	Y+2, r1	; 0x02
    3394:	f5 01       	movw	r30, r10
    3396:	2d 2d       	mov	r18, r13
    3398:	11 92       	st	Z+, r1
					itoa(transfer_data_length_package, package_lenght, 10);
					strcpy(mystring, package_lenght);
    339a:	2a 95       	dec	r18
    339c:	e9 f7       	brne	.-6      	; 0x3398 <__vector_10+0x2ac>
    339e:	47 2d       	mov	r20, r7
    33a0:	be 01       	movw	r22, r28
    33a2:	6a 5f       	subi	r22, 0xFA	; 250
    33a4:	7f 4f       	sbci	r23, 0xFF	; 255
    33a6:	68 d6       	rcall	.+3280   	; 0x4078 <__itoa_ncheck>
					usart_tx_at(USART_SERIAL_EXAMPLE, mystring);
    33a8:	be 01       	movw	r22, r28
    33aa:	6a 5f       	subi	r22, 0xFA	; 250
    33ac:	7f 4f       	sbci	r23, 0xFF	; 255
    33ae:	ce 01       	movw	r24, r28
    33b0:	01 96       	adiw	r24, 0x01	; 1
    33b2:	37 d6       	rcall	.+3182   	; 0x4022 <strcpy>
				#endif // DEBUG
				controller_next_state = TX_DATA;
    33b4:	be 01       	movw	r22, r28
				break;
    33b6:	6f 5f       	subi	r22, 0xFF	; 255
				
			case TX_DATA:
				tx(&tx_data_package, transfer_data_length_package); //transmit package. GENERATE STATUS FROM THIS.
    33b8:	7f 4f       	sbci	r23, 0xFF	; 255
    33ba:	80 ea       	ldi	r24, 0xA0	; 160
    33bc:	9a e0       	ldi	r25, 0x0A	; 10
    33be:	6f da       	rcall	.-2850   	; 0x289e <usart_tx_at>
    33c0:	50 92 9c 24 	sts	0x249C, r5	; 0x80249c <controller_next_state>
				controller_next_state = RX_DATA;		
    33c4:	1d c0       	rjmp	.+58     	; 0x3400 <__vector_10+0x314>
    33c6:	60 91 0c 23 	lds	r22, 0x230C	; 0x80230c <transfer_data_length_package>
				break;
			
			case RX_DATA:
				controller_next_state = RF_DISCONNECT;		
    33ca:	70 91 0d 23 	lds	r23, 0x230D	; 0x80230d <transfer_data_length_package+0x1>
				break;
    33ce:	8e e0       	ldi	r24, 0x0E	; 14
				
			case RF_DISCONNECT:
				at_rf_disconnect(); //Disconnect
    33d0:	93 e2       	ldi	r25, 0x23	; 35
    33d2:	12 de       	rcall	.-988    	; 0x2ff8 <tx>
				controller_next_state = RF_POWER_OFF;
    33d4:	40 92 9c 24 	sts	0x249C, r4	; 0x80249c <controller_next_state>
				break;
    33d8:	13 c0       	rjmp	.+38     	; 0x3400 <__vector_10+0x314>
			
			case RF_POWER_OFF:
				radio_power_down(); //radio power down
    33da:	c0 92 9c 24 	sts	0x249C, r12	; 0x80249c <controller_next_state>
				controller_next_state = RESET_REGISTERS;
    33de:	10 c0       	rjmp	.+32     	; 0x3400 <__vector_10+0x314>
    33e0:	03 de       	rcall	.-1018   	; 0x2fe8 <at_rf_disconnect>
				break;
    33e2:	70 92 9c 24 	sts	0x249C, r7	; 0x80249c <controller_next_state>
				
			case RESET_REGISTERS:
				reset_all_data(); //reset all arrays
    33e6:	0c c0       	rjmp	.+24     	; 0x3400 <__vector_10+0x314>
				controller_next_state = READ_EXT_DATA;
    33e8:	fa db       	rcall	.-2060   	; 0x2bde <radio_power_down>
    33ea:	60 92 9c 24 	sts	0x249C, r6	; 0x80249c <controller_next_state>
				RTC_ISR_ACTIVE = 0; //FINISHED, break LOOP!
    33ee:	08 c0       	rjmp	.+16     	; 0x3400 <__vector_10+0x314>
				break;
    33f0:	13 dd       	rcall	.-1498   	; 0x2e18 <reset_all_data>
				
			default:
				controller_next_state = RESET_REGISTERS; //TRY RESET.
    33f2:	10 92 9c 24 	sts	0x249C, r1	; 0x80249c <controller_next_state>
				break;
				
		}
		
		controller_state = controller_next_state; //NEXT STATE => STATE
    33f6:	10 92 8e 24 	sts	0x248E, r1	; 0x80248e <RTC_ISR_ACTIVE>
    33fa:	02 c0       	rjmp	.+4      	; 0x3400 <__vector_10+0x314>
    33fc:	60 92 9c 24 	sts	0x249C, r6	; 0x80249c <controller_next_state>
	#ifdef DEBUG
		led_blink(50); //DEBUG
	#endif // DEBUG
	
	RTC_ISR_ACTIVE = 1;
	while (RTC_ISR_ACTIVE == 1)
    3400:	80 91 9c 24 	lds	r24, 0x249C	; 0x80249c <controller_next_state>
    3404:	80 93 9d 24 	sts	0x249D, r24	; 0x80249d <controller_state>
		controller_state = controller_next_state; //NEXT STATE => STATE
		
	}

	
	RTC.CNT = 0; //RESET RTC COUNTER.
    3408:	80 91 8e 24 	lds	r24, 0x248E	; 0x80248e <RTC_ISR_ACTIVE>
    340c:	81 30       	cpi	r24, 0x01	; 1
    340e:	09 f4       	brne	.+2      	; 0x3412 <__vector_10+0x326>
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    3410:	dc ce       	rjmp	.-584    	; 0x31ca <__vector_10+0xde>
    3412:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    3416:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
	//sei(); //enable interrupt, go to sleep
}
    341a:	64 e0       	ldi	r22, 0x04	; 4
    341c:	80 e0       	ldi	r24, 0x00	; 0
    341e:	0e 94 41 11 	call	0x2282	; 0x2282 <sysclk_enable_module>
    3422:	2a 96       	adiw	r28, 0x0a	; 10
    3424:	cd bf       	out	0x3d, r28	; 61
    3426:	de bf       	out	0x3e, r29	; 62
    3428:	df 91       	pop	r29
    342a:	cf 91       	pop	r28
    342c:	ff 91       	pop	r31
    342e:	ef 91       	pop	r30
    3430:	bf 91       	pop	r27
    3432:	af 91       	pop	r26
    3434:	9f 91       	pop	r25
    3436:	8f 91       	pop	r24
    3438:	7f 91       	pop	r23
    343a:	6f 91       	pop	r22
    343c:	5f 91       	pop	r21
    343e:	4f 91       	pop	r20
    3440:	3f 91       	pop	r19
    3442:	2f 91       	pop	r18
    3444:	1f 91       	pop	r17
    3446:	0f 91       	pop	r16
    3448:	ff 90       	pop	r15
    344a:	ef 90       	pop	r14
    344c:	df 90       	pop	r13
    344e:	cf 90       	pop	r12
    3450:	bf 90       	pop	r11
    3452:	af 90       	pop	r10
    3454:	9f 90       	pop	r9
    3456:	8f 90       	pop	r8
    3458:	7f 90       	pop	r7
    345a:	6f 90       	pop	r6
    345c:	5f 90       	pop	r5
    345e:	4f 90       	pop	r4
    3460:	3f 90       	pop	r3
    3462:	2f 90       	pop	r2
    3464:	0f 90       	pop	r0
    3466:	0b be       	out	0x3b, r0	; 59
    3468:	0f 90       	pop	r0
    346a:	0a be       	out	0x3a, r0	; 58
    346c:	0f 90       	pop	r0
    346e:	09 be       	out	0x39, r0	; 57
    3470:	0f 90       	pop	r0
    3472:	08 be       	out	0x38, r0	; 56
    3474:	0f 90       	pop	r0
    3476:	0f be       	out	0x3f, r0	; 63
    3478:	0f 90       	pop	r0
    347a:	1f 90       	pop	r1
    347c:	18 95       	reti

0000347e <main>:

/*! \brief Main function.
 */
int main(void)
{
    347e:	cf 93       	push	r28
    3480:	df 93       	push	r29
    3482:	cd b7       	in	r28, 0x3d	; 61
    3484:	de b7       	in	r29, 0x3e	; 62
    3486:	66 97       	sbiw	r28, 0x16	; 22
    3488:	cd bf       	out	0x3d, r28	; 61
    348a:	de bf       	out	0x3e, r29	; 62
	//disables interrupts
	cli();
    348c:	f8 94       	cli
		
	/* Initialize the board.
	 * The board-specific conf_board.h file contains the configuration of
	 * the board initialization.
	 */
	board_init();
    348e:	0e 94 93 11 	call	0x2326	; 0x2326 <board_init>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    3492:	87 e0       	ldi	r24, 0x07	; 7
    3494:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	pmic_init(); 
	sysclk_init(); //disables all peripheral clocks
    3498:	0e 94 2e 11 	call	0x225c	; 0x225c <sysclk_init>
	//select system clock
	//CLK.CTRL = 0x01; //2M
	
	#ifdef DEBUG
		//LED setup
		PORTQ.DIR |= (1<<3);
    349c:	e0 ec       	ldi	r30, 0xC0	; 192
    349e:	f7 e0       	ldi	r31, 0x07	; 7
    34a0:	80 81       	ld	r24, Z
    34a2:	88 60       	ori	r24, 0x08	; 8
    34a4:	80 83       	st	Z, r24
		PORTQ.OUT |= (1<<3);
    34a6:	84 81       	ldd	r24, Z+4	; 0x04
    34a8:	88 60       	ori	r24, 0x08	; 8
    34aa:	84 83       	std	Z+4, r24	; 0x04
{
	//ADCA configurations
	struct adc_config adca_conf;
	struct adc_channel_config adca_ch_conf;
	
	adc_read_configuration(&ADCA, &adca_conf);
    34ac:	be 01       	movw	r22, r28
    34ae:	68 5f       	subi	r22, 0xF8	; 248
    34b0:	7f 4f       	sbci	r23, 0xFF	; 255
    34b2:	80 e0       	ldi	r24, 0x00	; 0
    34b4:	92 e0       	ldi	r25, 0x02	; 2
    34b6:	0e 94 30 04 	call	0x860	; 0x860 <adc_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    34ba:	99 85       	ldd	r25, Y+9	; 0x09
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
	conf->refctrl |= ref;
    34bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    34be:	8f 78       	andi	r24, 0x8F	; 143
    34c0:	80 61       	ori	r24, 0x10	; 16
    34c2:	8a 87       	std	Y+10, r24	; 0x0a
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    34c4:	89 2f       	mov	r24, r25
    34c6:	81 7e       	andi	r24, 0xE1	; 225
    34c8:	89 87       	std	Y+9, r24	; 0x09
		conf->evctrl = ADC_EVACT_NONE_gc;
    34ca:	1b 86       	std	Y+11, r1	; 0x0b
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    34cc:	12 e0       	ldi	r17, 0x02	; 2
    34ce:	1c 87       	std	Y+12, r17	; 0x0c
	adc_set_conversion_parameters(&adca_conf, ADC_SIGN_OFF, ADC_RES_12, ADC_REF_VCC); //Single ended, 12 bits, vref = vdd/1,6 ~ 2V @ 3,3V.
	adc_set_conversion_trigger(&adca_conf, ADC_TRIG_MANUAL, 1, 0);
	adc_set_clock_rate(&adca_conf, 200000UL); //200kHz clock
	adc_write_configuration(&ADCA, &adca_conf);
    34d0:	be 01       	movw	r22, r28
    34d2:	68 5f       	subi	r22, 0xF8	; 248
    34d4:	7f 4f       	sbci	r23, 0xFF	; 255
    34d6:	80 e0       	ldi	r24, 0x00	; 0
    34d8:	92 e0       	ldi	r25, 0x02	; 2
    34da:	0e 94 c6 03 	call	0x78c	; 0x78c <adc_write_configuration>
	
	adcch_read_configuration(&ADCA, ADC_CH0, &adca_ch_conf);
    34de:	ae 01       	movw	r20, r28
    34e0:	4d 5e       	subi	r20, 0xED	; 237
    34e2:	5f 4f       	sbci	r21, 0xFF	; 255
    34e4:	61 e0       	ldi	r22, 0x01	; 1
    34e6:	80 e0       	ldi	r24, 0x00	; 0
    34e8:	92 e0       	ldi	r25, 0x02	; 2
    34ea:	0e 94 b4 04 	call	0x968	; 0x968 <adcch_read_configuration>
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    34ee:	81 e0       	ldi	r24, 0x01	; 1
    34f0:	8b 8b       	std	Y+19, r24	; 0x13
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    34f2:	1c 8a       	std	Y+20, r1	; 0x14
	adcch_set_input(&adca_ch_conf, ADCCH_POS_PIN0, ADCCH_NEG_NONE, 1);
	adcch_write_configuration(&ADCA, ADC_CH0, &adca_ch_conf); //Channel 0
    34f4:	ae 01       	movw	r20, r28
    34f6:	4d 5e       	subi	r20, 0xED	; 237
    34f8:	5f 4f       	sbci	r21, 0xFF	; 255
    34fa:	61 e0       	ldi	r22, 0x01	; 1
    34fc:	80 e0       	ldi	r24, 0x00	; 0
    34fe:	92 e0       	ldi	r25, 0x02	; 2
    3500:	0e 94 69 04 	call	0x8d2	; 0x8d2 <adcch_write_configuration>
	
	//ADCB configurations
	struct adc_config adcb_conf;
	struct adc_channel_config adcb_ch_conf;
	
	adc_read_configuration(&ADCB, &adcb_conf);
    3504:	be 01       	movw	r22, r28
    3506:	6f 5f       	subi	r22, 0xFF	; 255
    3508:	7f 4f       	sbci	r23, 0xFF	; 255
    350a:	80 e4       	ldi	r24, 0x40	; 64
    350c:	92 e0       	ldi	r25, 0x02	; 2
    350e:	0e 94 30 04 	call	0x860	; 0x860 <adc_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    3512:	9a 81       	ldd	r25, Y+2	; 0x02
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
	conf->refctrl |= ref;
    3514:	8b 81       	ldd	r24, Y+3	; 0x03
    3516:	8f 78       	andi	r24, 0x8F	; 143
    3518:	80 61       	ori	r24, 0x10	; 16
    351a:	8b 83       	std	Y+3, r24	; 0x03
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    351c:	89 2f       	mov	r24, r25
    351e:	81 7e       	andi	r24, 0xE1	; 225
    3520:	8a 83       	std	Y+2, r24	; 0x02
		conf->evctrl = ADC_EVACT_NONE_gc;
    3522:	1c 82       	std	Y+4, r1	; 0x04
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    3524:	1d 83       	std	Y+5, r17	; 0x05
	adc_set_conversion_parameters(&adcb_conf, ADC_SIGN_OFF, ADC_RES_12, ADC_REF_VCC); //Single ended, 12 bits, vref = vdd/1,6 ~ 2V @ 3,3V.
	adc_set_conversion_trigger(&adcb_conf, ADC_TRIG_MANUAL, 1, 0);
	adc_set_clock_rate(&adcb_conf, 200000UL); //200kHz clock
	adc_write_configuration(&ADCB, &adcb_conf);
    3526:	be 01       	movw	r22, r28
    3528:	6f 5f       	subi	r22, 0xFF	; 255
    352a:	7f 4f       	sbci	r23, 0xFF	; 255
    352c:	80 e4       	ldi	r24, 0x40	; 64
    352e:	92 e0       	ldi	r25, 0x02	; 2
    3530:	0e 94 c6 03 	call	0x78c	; 0x78c <adc_write_configuration>
	
	adcch_read_configuration(&ADCB, ADC_CH0, &adcb_ch_conf);
    3534:	ae 01       	movw	r20, r28
    3536:	41 5f       	subi	r20, 0xF1	; 241
    3538:	5f 4f       	sbci	r21, 0xFF	; 255
    353a:	61 e0       	ldi	r22, 0x01	; 1
    353c:	80 e4       	ldi	r24, 0x40	; 64
    353e:	92 e0       	ldi	r25, 0x02	; 2
    3540:	0e 94 b4 04 	call	0x968	; 0x968 <adcch_read_configuration>
	if (pos >= ADCCH_POS_TEMPSENSE) {
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
    3544:	1f 86       	std	Y+15, r1	; 0x0f
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
    3546:	88 e0       	ldi	r24, 0x08	; 8
    3548:	88 8b       	std	Y+16, r24	; 0x10
	adcch_set_input(&adcb_ch_conf, ADCCH_POS_BANDGAP, ADCCH_NEG_NONE, 1);
	adcch_write_configuration(&ADCB, ADC_CH0, &adcb_ch_conf); //Channel 0
    354a:	ae 01       	movw	r20, r28
    354c:	41 5f       	subi	r20, 0xF1	; 241
    354e:	5f 4f       	sbci	r21, 0xFF	; 255
    3550:	61 e0       	ldi	r22, 0x01	; 1
    3552:	80 e4       	ldi	r24, 0x40	; 64
    3554:	92 e0       	ldi	r25, 0x02	; 2
    3556:	0e 94 69 04 	call	0x8d2	; 0x8d2 <adcch_write_configuration>
	if (pos >= ADCCH_POS_TEMPSENSE) {
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
    355a:	1f 86       	std	Y+15, r1	; 0x0f
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
    355c:	18 8a       	std	Y+16, r1	; 0x10
	
	adcch_set_input(&adcb_ch_conf, ADCCH_POS_TEMPSENSE, ADCCH_NEG_NONE, 1);
	adcch_write_configuration(&ADCB, ADC_CH1, &adcb_ch_conf); //Channel 1
    355e:	ae 01       	movw	r20, r28
    3560:	41 5f       	subi	r20, 0xF1	; 241
    3562:	5f 4f       	sbci	r21, 0xFF	; 255
    3564:	62 e0       	ldi	r22, 0x02	; 2
    3566:	80 e4       	ldi	r24, 0x40	; 64
    3568:	92 e0       	ldi	r25, 0x02	; 2
    356a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <adcch_write_configuration>
	
	
	
	//ADC setup
	adc_init();
	adc_enable(&ADCA); //Later??? By interrupt?
    356e:	80 e0       	ldi	r24, 0x00	; 0
    3570:	92 e0       	ldi	r25, 0x02	; 2
    3572:	0e 94 b2 01 	call	0x364	; 0x364 <adc_enable>
	adc_enable(&ADCB); //Later??? By interrupt?
    3576:	80 e4       	ldi	r24, 0x40	; 64
    3578:	92 e0       	ldi	r25, 0x02	; 2
    357a:	0e 94 b2 01 	call	0x364	; 0x364 <adc_enable>
		
	#ifdef DEBUG //terminal communication
		usart_init_rs232(USART_SERIAL_EXAMPLE, &USART_SERIAL_OPTIONS);
    357e:	68 e2       	ldi	r22, 0x28	; 40
    3580:	70 e2       	ldi	r23, 0x20	; 32
    3582:	80 ea       	ldi	r24, 0xA0	; 160
    3584:	9a e0       	ldi	r25, 0x0A	; 10
    3586:	1f d8       	rcall	.-4034   	; 0x25c6 <usart_init_rs232>
		sysclk_enable_module(SYSCLK_PORT_E, 4);
    3588:	64 e0       	ldi	r22, 0x04	; 4
    358a:	85 e0       	ldi	r24, 0x05	; 5
    358c:	0e 94 41 11 	call	0x2282	; 0x2282 <sysclk_enable_module>
	#endif // DEBUG
	
	usart_init_rs232(USART_SERIAL_SIM900, &USART_SERIAL_OPTIONS); //Radio UART
    3590:	68 e2       	ldi	r22, 0x28	; 40
    3592:	70 e2       	ldi	r23, 0x20	; 32
    3594:	80 ea       	ldi	r24, 0xA0	; 160
    3596:	98 e0       	ldi	r25, 0x08	; 8
    3598:	16 d8       	rcall	.-4052   	; 0x25c6 <usart_init_rs232>
	//usart_set_rx_interrupt_level(USART_SERIAL_SIM900, USART_INT_LVL_MED);
	sysclk_enable_module(SYSCLK_PORT_C, 4);
    359a:	64 e0       	ldi	r22, 0x04	; 4
    359c:	83 e0       	ldi	r24, 0x03	; 3
    359e:	0e 94 41 11 	call	0x2282	; 0x2282 <sysclk_enable_module>
	
	usart_init_rs232(USART_EXT_DATA, &USART_SERIAL_OPTIONS); //External data UART
    35a2:	68 e2       	ldi	r22, 0x28	; 40
    35a4:	70 e2       	ldi	r23, 0x20	; 32
    35a6:	80 ea       	ldi	r24, 0xA0	; 160
    35a8:	9b e0       	ldi	r25, 0x0B	; 11
    35aa:	0d d8       	rcall	.-4070   	; 0x25c6 <usart_init_rs232>
	sysclk_enable_module(SYSCLK_PORT_F, 4);
    35ac:	64 e0       	ldi	r22, 0x04	; 4
    35ae:	86 e0       	ldi	r24, 0x06	; 6
    35b0:	0e 94 41 11 	call	0x2282	; 0x2282 <sysclk_enable_module>
	
	//Initialize external data pins
	ext_data_pins_init();
	
	//initialize radio pins
	radio_pins_init();
    35b4:	c7 da       	rcall	.-2674   	; 0x2b44 <ext_data_pins_init>
	delay_s(1);
    35b6:	bd da       	rcall	.-2694   	; 0x2b32 <radio_pins_init>
    35b8:	66 e1       	ldi	r22, 0x16	; 22
    35ba:	76 e1       	ldi	r23, 0x16	; 22
    35bc:	85 e0       	ldi	r24, 0x05	; 5
    35be:	90 e0       	ldi	r25, 0x00	; 0
	
	//Shut down radio if already awake
	//check if radio is off, and turn of if it's on
	if (STATUS_PORT.IN & (1<<STATUS_PIN))
    35c0:	63 d9       	rcall	.-3386   	; 0x2888 <__portable_avr_delay_cycles>
    35c2:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
	{
		radio_power_down();
    35c6:	88 23       	and	r24, r24
		
	//WDT setup for interrupt
	//////////////////////////////////////////////////////////////////////////
		
	//reset all tx data and date
	reset_all_data();
    35c8:	0c f4       	brge	.+2      	; 0x35cc <main+0x14e>
    35ca:	09 db       	rcall	.-2542   	; 0x2bde <radio_power_down>
	
	//RTC setup.
	PR.PRGEN &= ~(1<<2); //enable the RTC clock
    35cc:	25 dc       	rcall	.-1974   	; 0x2e18 <reset_all_data>
    35ce:	e0 e7       	ldi	r30, 0x70	; 112
    35d0:	f0 e0       	ldi	r31, 0x00	; 0
    35d2:	80 81       	ld	r24, Z
    35d4:	8b 7f       	andi	r24, 0xFB	; 251
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    35d6:	80 83       	st	Z, r24
    35d8:	ee e9       	ldi	r30, 0x9E	; 158
    35da:	f4 e2       	ldi	r31, 0x24	; 36
    35dc:	10 82       	st	Z, r1
    35de:	11 82       	std	Z+1, r1	; 0x01
    35e0:	12 82       	std	Z+2, r1	; 0x02
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    35e2:	13 82       	std	Z+3, r1	; 0x03
    35e4:	14 82       	std	Z+4, r1	; 0x04
	sleepmgr_init();
	rtc_init_period(WAKEUP_RATE); //using RTC as sampler timer.
    35e6:	81 e0       	ldi	r24, 0x01	; 1
    35e8:	85 83       	std	Z+5, r24	; 0x05
    35ea:	81 e0       	ldi	r24, 0x01	; 1
    35ec:	90 e0       	ldi	r25, 0x00	; 0
	
	sei(); //enable interrupts
    35ee:	dc d9       	rcall	.-3144   	; 0x29a8 <rtc_init_period>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    35f0:	78 94       	sei
    35f2:	4e e9       	ldi	r20, 0x9E	; 158
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    35f4:	54 e2       	ldi	r21, 0x24	; 36
    35f6:	28 e4       	ldi	r18, 0x48	; 72
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    35f8:	30 e0       	ldi	r19, 0x00	; 0

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    35fa:	f8 94       	cli
    35fc:	da 01       	movw	r26, r20
    35fe:	8c 91       	ld	r24, X
    3600:	81 11       	cpse	r24, r1
    3602:	09 c0       	rjmp	.+18     	; 0x3616 <main+0x198>
    3604:	af e9       	ldi	r26, 0x9F	; 159
    3606:	b4 e2       	ldi	r27, 0x24	; 36
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    3608:	e0 e0       	ldi	r30, 0x00	; 0

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    360a:	ef 5f       	subi	r30, 0xFF	; 255
    360c:	8d 91       	ld	r24, X+
    360e:	88 23       	and	r24, r24
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    3610:	e1 f3       	breq	.-8      	; 0x360a <main+0x18c>
    3612:	e1 11       	cpse	r30, r1
		cpu_irq_enable();
    3614:	02 c0       	rjmp	.+4      	; 0x361a <main+0x19c>
    3616:	78 94       	sei
    3618:	f0 cf       	rjmp	.-32     	; 0x35fa <main+0x17c>
    361a:	d9 01       	movw	r26, r18

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    361c:	8c 91       	ld	r24, X
    361e:	f0 e0       	ldi	r31, 0x00	; 0
    3620:	e1 50       	subi	r30, 0x01	; 1
    3622:	f0 4e       	sbci	r31, 0xE0	; 224
    3624:	81 7f       	andi	r24, 0xF1	; 241
    3626:	90 81       	ld	r25, Z
    3628:	89 2b       	or	r24, r25
	sleep_enable();
    362a:	8c 93       	st	X, r24
    362c:	8c 91       	ld	r24, X
    362e:	81 60       	ori	r24, 0x01	; 1

	cpu_irq_enable();
    3630:	8c 93       	st	X, r24
	sleep_enter();
    3632:	78 94       	sei

	sleep_disable();
    3634:	88 95       	sleep
    3636:	f9 01       	movw	r30, r18
    3638:	80 81       	ld	r24, Z
    363a:	8e 7f       	andi	r24, 0xFE	; 254
    363c:	80 83       	st	Z, r24
    363e:	dd cf       	rjmp	.-70     	; 0x35fa <main+0x17c>

00003640 <__cmpsf2>:
    3640:	20 d1       	rcall	.+576    	; 0x3882 <__fp_cmp>
    3642:	08 f4       	brcc	.+2      	; 0x3646 <__cmpsf2+0x6>
    3644:	81 e0       	ldi	r24, 0x01	; 1
    3646:	08 95       	ret

00003648 <__divsf3>:
    3648:	0c d0       	rcall	.+24     	; 0x3662 <__divsf3x>
    364a:	66 c1       	rjmp	.+716    	; 0x3918 <__fp_round>
    364c:	5e d1       	rcall	.+700    	; 0x390a <__fp_pscB>
    364e:	40 f0       	brcs	.+16     	; 0x3660 <__divsf3+0x18>
    3650:	55 d1       	rcall	.+682    	; 0x38fc <__fp_pscA>
    3652:	30 f0       	brcs	.+12     	; 0x3660 <__divsf3+0x18>
    3654:	21 f4       	brne	.+8      	; 0x365e <__divsf3+0x16>
    3656:	5f 3f       	cpi	r21, 0xFF	; 255
    3658:	19 f0       	breq	.+6      	; 0x3660 <__divsf3+0x18>
    365a:	37 c1       	rjmp	.+622    	; 0x38ca <__fp_inf>
    365c:	51 11       	cpse	r21, r1
    365e:	90 c1       	rjmp	.+800    	; 0x3980 <__fp_szero>
    3660:	3a c1       	rjmp	.+628    	; 0x38d6 <__fp_nan>

00003662 <__divsf3x>:
    3662:	6b d1       	rcall	.+726    	; 0x393a <__fp_split3>
    3664:	98 f3       	brcs	.-26     	; 0x364c <__divsf3+0x4>

00003666 <__divsf3_pse>:
    3666:	99 23       	and	r25, r25
    3668:	c9 f3       	breq	.-14     	; 0x365c <__divsf3+0x14>
    366a:	55 23       	and	r21, r21
    366c:	b1 f3       	breq	.-20     	; 0x365a <__divsf3+0x12>
    366e:	95 1b       	sub	r25, r21
    3670:	55 0b       	sbc	r21, r21
    3672:	bb 27       	eor	r27, r27
    3674:	aa 27       	eor	r26, r26
    3676:	62 17       	cp	r22, r18
    3678:	73 07       	cpc	r23, r19
    367a:	84 07       	cpc	r24, r20
    367c:	38 f0       	brcs	.+14     	; 0x368c <__divsf3_pse+0x26>
    367e:	9f 5f       	subi	r25, 0xFF	; 255
    3680:	5f 4f       	sbci	r21, 0xFF	; 255
    3682:	22 0f       	add	r18, r18
    3684:	33 1f       	adc	r19, r19
    3686:	44 1f       	adc	r20, r20
    3688:	aa 1f       	adc	r26, r26
    368a:	a9 f3       	breq	.-22     	; 0x3676 <__divsf3_pse+0x10>
    368c:	33 d0       	rcall	.+102    	; 0x36f4 <__divsf3_pse+0x8e>
    368e:	0e 2e       	mov	r0, r30
    3690:	3a f0       	brmi	.+14     	; 0x36a0 <__divsf3_pse+0x3a>
    3692:	e0 e8       	ldi	r30, 0x80	; 128
    3694:	30 d0       	rcall	.+96     	; 0x36f6 <__divsf3_pse+0x90>
    3696:	91 50       	subi	r25, 0x01	; 1
    3698:	50 40       	sbci	r21, 0x00	; 0
    369a:	e6 95       	lsr	r30
    369c:	00 1c       	adc	r0, r0
    369e:	ca f7       	brpl	.-14     	; 0x3692 <__divsf3_pse+0x2c>
    36a0:	29 d0       	rcall	.+82     	; 0x36f4 <__divsf3_pse+0x8e>
    36a2:	fe 2f       	mov	r31, r30
    36a4:	27 d0       	rcall	.+78     	; 0x36f4 <__divsf3_pse+0x8e>
    36a6:	66 0f       	add	r22, r22
    36a8:	77 1f       	adc	r23, r23
    36aa:	88 1f       	adc	r24, r24
    36ac:	bb 1f       	adc	r27, r27
    36ae:	26 17       	cp	r18, r22
    36b0:	37 07       	cpc	r19, r23
    36b2:	48 07       	cpc	r20, r24
    36b4:	ab 07       	cpc	r26, r27
    36b6:	b0 e8       	ldi	r27, 0x80	; 128
    36b8:	09 f0       	breq	.+2      	; 0x36bc <__divsf3_pse+0x56>
    36ba:	bb 0b       	sbc	r27, r27
    36bc:	80 2d       	mov	r24, r0
    36be:	bf 01       	movw	r22, r30
    36c0:	ff 27       	eor	r31, r31
    36c2:	93 58       	subi	r25, 0x83	; 131
    36c4:	5f 4f       	sbci	r21, 0xFF	; 255
    36c6:	2a f0       	brmi	.+10     	; 0x36d2 <__divsf3_pse+0x6c>
    36c8:	9e 3f       	cpi	r25, 0xFE	; 254
    36ca:	51 05       	cpc	r21, r1
    36cc:	68 f0       	brcs	.+26     	; 0x36e8 <__divsf3_pse+0x82>
    36ce:	fd c0       	rjmp	.+506    	; 0x38ca <__fp_inf>
    36d0:	57 c1       	rjmp	.+686    	; 0x3980 <__fp_szero>
    36d2:	5f 3f       	cpi	r21, 0xFF	; 255
    36d4:	ec f3       	brlt	.-6      	; 0x36d0 <__divsf3_pse+0x6a>
    36d6:	98 3e       	cpi	r25, 0xE8	; 232
    36d8:	dc f3       	brlt	.-10     	; 0x36d0 <__divsf3_pse+0x6a>
    36da:	86 95       	lsr	r24
    36dc:	77 95       	ror	r23
    36de:	67 95       	ror	r22
    36e0:	b7 95       	ror	r27
    36e2:	f7 95       	ror	r31
    36e4:	9f 5f       	subi	r25, 0xFF	; 255
    36e6:	c9 f7       	brne	.-14     	; 0x36da <__divsf3_pse+0x74>
    36e8:	88 0f       	add	r24, r24
    36ea:	91 1d       	adc	r25, r1
    36ec:	96 95       	lsr	r25
    36ee:	87 95       	ror	r24
    36f0:	97 f9       	bld	r25, 7
    36f2:	08 95       	ret
    36f4:	e1 e0       	ldi	r30, 0x01	; 1
    36f6:	66 0f       	add	r22, r22
    36f8:	77 1f       	adc	r23, r23
    36fa:	88 1f       	adc	r24, r24
    36fc:	bb 1f       	adc	r27, r27
    36fe:	62 17       	cp	r22, r18
    3700:	73 07       	cpc	r23, r19
    3702:	84 07       	cpc	r24, r20
    3704:	ba 07       	cpc	r27, r26
    3706:	20 f0       	brcs	.+8      	; 0x3710 <__divsf3_pse+0xaa>
    3708:	62 1b       	sub	r22, r18
    370a:	73 0b       	sbc	r23, r19
    370c:	84 0b       	sbc	r24, r20
    370e:	ba 0b       	sbc	r27, r26
    3710:	ee 1f       	adc	r30, r30
    3712:	88 f7       	brcc	.-30     	; 0x36f6 <__divsf3_pse+0x90>
    3714:	e0 95       	com	r30
    3716:	08 95       	ret

00003718 <__fixsfdi>:
    3718:	be e3       	ldi	r27, 0x3E	; 62
    371a:	04 d0       	rcall	.+8      	; 0x3724 <__fixunssfdi+0x2>
    371c:	08 f4       	brcc	.+2      	; 0x3720 <__fixsfdi+0x8>
    371e:	90 e8       	ldi	r25, 0x80	; 128
    3720:	08 95       	ret

00003722 <__fixunssfdi>:
    3722:	bf e3       	ldi	r27, 0x3F	; 63
    3724:	22 27       	eor	r18, r18
    3726:	33 27       	eor	r19, r19
    3728:	a9 01       	movw	r20, r18
    372a:	0f d1       	rcall	.+542    	; 0x394a <__fp_splitA>
    372c:	58 f1       	brcs	.+86     	; 0x3784 <__fixunssfdi+0x62>
    372e:	9f 57       	subi	r25, 0x7F	; 127
    3730:	40 f1       	brcs	.+80     	; 0x3782 <__fixunssfdi+0x60>
    3732:	b9 17       	cp	r27, r25
    3734:	38 f1       	brcs	.+78     	; 0x3784 <__fixunssfdi+0x62>
    3736:	bf e3       	ldi	r27, 0x3F	; 63
    3738:	b9 1b       	sub	r27, r25
    373a:	99 27       	eor	r25, r25
    373c:	b8 50       	subi	r27, 0x08	; 8
    373e:	3a f4       	brpl	.+14     	; 0x374e <__fixunssfdi+0x2c>
    3740:	66 0f       	add	r22, r22
    3742:	77 1f       	adc	r23, r23
    3744:	88 1f       	adc	r24, r24
    3746:	99 1f       	adc	r25, r25
    3748:	b3 95       	inc	r27
    374a:	d2 f3       	brmi	.-12     	; 0x3740 <__fixunssfdi+0x1e>
    374c:	16 c0       	rjmp	.+44     	; 0x377a <__fixunssfdi+0x58>
    374e:	b8 50       	subi	r27, 0x08	; 8
    3750:	4a f0       	brmi	.+18     	; 0x3764 <__fixunssfdi+0x42>
    3752:	23 2f       	mov	r18, r19
    3754:	34 2f       	mov	r19, r20
    3756:	45 2f       	mov	r20, r21
    3758:	56 2f       	mov	r21, r22
    375a:	67 2f       	mov	r22, r23
    375c:	78 2f       	mov	r23, r24
    375e:	88 27       	eor	r24, r24
    3760:	b8 50       	subi	r27, 0x08	; 8
    3762:	ba f7       	brpl	.-18     	; 0x3752 <__fixunssfdi+0x30>
    3764:	b8 5f       	subi	r27, 0xF8	; 248
    3766:	49 f0       	breq	.+18     	; 0x377a <__fixunssfdi+0x58>
    3768:	86 95       	lsr	r24
    376a:	77 95       	ror	r23
    376c:	67 95       	ror	r22
    376e:	57 95       	ror	r21
    3770:	47 95       	ror	r20
    3772:	37 95       	ror	r19
    3774:	27 95       	ror	r18
    3776:	ba 95       	dec	r27
    3778:	b9 f7       	brne	.-18     	; 0x3768 <__fixunssfdi+0x46>
    377a:	0e f4       	brtc	.+2      	; 0x377e <__fixunssfdi+0x5c>
    377c:	af d0       	rcall	.+350    	; 0x38dc <__fp_negdi>
    377e:	88 94       	clc
    3780:	08 95       	ret
    3782:	88 94       	clc
    3784:	60 e0       	ldi	r22, 0x00	; 0
    3786:	70 e0       	ldi	r23, 0x00	; 0
    3788:	cb 01       	movw	r24, r22
    378a:	08 95       	ret

0000378c <__floatunsisf>:
    378c:	e8 94       	clt
    378e:	09 c0       	rjmp	.+18     	; 0x37a2 <__floatsisf+0x12>

00003790 <__floatsisf>:
    3790:	97 fb       	bst	r25, 7
    3792:	3e f4       	brtc	.+14     	; 0x37a2 <__floatsisf+0x12>
    3794:	90 95       	com	r25
    3796:	80 95       	com	r24
    3798:	70 95       	com	r23
    379a:	61 95       	neg	r22
    379c:	7f 4f       	sbci	r23, 0xFF	; 255
    379e:	8f 4f       	sbci	r24, 0xFF	; 255
    37a0:	9f 4f       	sbci	r25, 0xFF	; 255
    37a2:	99 23       	and	r25, r25
    37a4:	a9 f0       	breq	.+42     	; 0x37d0 <__floatsisf+0x40>
    37a6:	f9 2f       	mov	r31, r25
    37a8:	96 e9       	ldi	r25, 0x96	; 150
    37aa:	bb 27       	eor	r27, r27
    37ac:	93 95       	inc	r25
    37ae:	f6 95       	lsr	r31
    37b0:	87 95       	ror	r24
    37b2:	77 95       	ror	r23
    37b4:	67 95       	ror	r22
    37b6:	b7 95       	ror	r27
    37b8:	f1 11       	cpse	r31, r1
    37ba:	f8 cf       	rjmp	.-16     	; 0x37ac <__floatsisf+0x1c>
    37bc:	fa f4       	brpl	.+62     	; 0x37fc <__floatsisf+0x6c>
    37be:	bb 0f       	add	r27, r27
    37c0:	11 f4       	brne	.+4      	; 0x37c6 <__floatsisf+0x36>
    37c2:	60 ff       	sbrs	r22, 0
    37c4:	1b c0       	rjmp	.+54     	; 0x37fc <__floatsisf+0x6c>
    37c6:	6f 5f       	subi	r22, 0xFF	; 255
    37c8:	7f 4f       	sbci	r23, 0xFF	; 255
    37ca:	8f 4f       	sbci	r24, 0xFF	; 255
    37cc:	9f 4f       	sbci	r25, 0xFF	; 255
    37ce:	16 c0       	rjmp	.+44     	; 0x37fc <__floatsisf+0x6c>
    37d0:	88 23       	and	r24, r24
    37d2:	11 f0       	breq	.+4      	; 0x37d8 <__floatsisf+0x48>
    37d4:	96 e9       	ldi	r25, 0x96	; 150
    37d6:	11 c0       	rjmp	.+34     	; 0x37fa <__floatsisf+0x6a>
    37d8:	77 23       	and	r23, r23
    37da:	21 f0       	breq	.+8      	; 0x37e4 <__floatsisf+0x54>
    37dc:	9e e8       	ldi	r25, 0x8E	; 142
    37de:	87 2f       	mov	r24, r23
    37e0:	76 2f       	mov	r23, r22
    37e2:	05 c0       	rjmp	.+10     	; 0x37ee <__floatsisf+0x5e>
    37e4:	66 23       	and	r22, r22
    37e6:	71 f0       	breq	.+28     	; 0x3804 <__floatsisf+0x74>
    37e8:	96 e8       	ldi	r25, 0x86	; 134
    37ea:	86 2f       	mov	r24, r22
    37ec:	70 e0       	ldi	r23, 0x00	; 0
    37ee:	60 e0       	ldi	r22, 0x00	; 0
    37f0:	2a f0       	brmi	.+10     	; 0x37fc <__floatsisf+0x6c>
    37f2:	9a 95       	dec	r25
    37f4:	66 0f       	add	r22, r22
    37f6:	77 1f       	adc	r23, r23
    37f8:	88 1f       	adc	r24, r24
    37fa:	da f7       	brpl	.-10     	; 0x37f2 <__floatsisf+0x62>
    37fc:	88 0f       	add	r24, r24
    37fe:	96 95       	lsr	r25
    3800:	87 95       	ror	r24
    3802:	97 f9       	bld	r25, 7
    3804:	08 95       	ret

00003806 <__floatundisf>:
    3806:	e8 94       	clt

00003808 <__fp_di2sf>:
    3808:	f9 2f       	mov	r31, r25
    380a:	96 eb       	ldi	r25, 0xB6	; 182
    380c:	ff 23       	and	r31, r31
    380e:	81 f0       	breq	.+32     	; 0x3830 <__fp_di2sf+0x28>
    3810:	12 16       	cp	r1, r18
    3812:	13 06       	cpc	r1, r19
    3814:	14 06       	cpc	r1, r20
    3816:	44 0b       	sbc	r20, r20
    3818:	93 95       	inc	r25
    381a:	f6 95       	lsr	r31
    381c:	87 95       	ror	r24
    381e:	77 95       	ror	r23
    3820:	67 95       	ror	r22
    3822:	57 95       	ror	r21
    3824:	40 40       	sbci	r20, 0x00	; 0
    3826:	ff 23       	and	r31, r31
    3828:	b9 f7       	brne	.-18     	; 0x3818 <__fp_di2sf+0x10>
    382a:	1b c0       	rjmp	.+54     	; 0x3862 <__fp_di2sf+0x5a>
    382c:	99 27       	eor	r25, r25
    382e:	08 95       	ret
    3830:	88 23       	and	r24, r24
    3832:	51 f4       	brne	.+20     	; 0x3848 <__fp_di2sf+0x40>
    3834:	98 50       	subi	r25, 0x08	; 8
    3836:	d2 f7       	brpl	.-12     	; 0x382c <__fp_di2sf+0x24>
    3838:	87 2b       	or	r24, r23
    383a:	76 2f       	mov	r23, r22
    383c:	65 2f       	mov	r22, r21
    383e:	54 2f       	mov	r21, r20
    3840:	43 2f       	mov	r20, r19
    3842:	32 2f       	mov	r19, r18
    3844:	20 e0       	ldi	r18, 0x00	; 0
    3846:	b1 f3       	breq	.-20     	; 0x3834 <__fp_di2sf+0x2c>
    3848:	12 16       	cp	r1, r18
    384a:	13 06       	cpc	r1, r19
    384c:	14 06       	cpc	r1, r20
    384e:	44 0b       	sbc	r20, r20
    3850:	88 23       	and	r24, r24
    3852:	3a f0       	brmi	.+14     	; 0x3862 <__fp_di2sf+0x5a>
    3854:	9a 95       	dec	r25
    3856:	44 0f       	add	r20, r20
    3858:	55 1f       	adc	r21, r21
    385a:	66 1f       	adc	r22, r22
    385c:	77 1f       	adc	r23, r23
    385e:	88 1f       	adc	r24, r24
    3860:	ca f7       	brpl	.-14     	; 0x3854 <__fp_di2sf+0x4c>
    3862:	55 23       	and	r21, r21
    3864:	4a f4       	brpl	.+18     	; 0x3878 <__fp_di2sf+0x70>
    3866:	44 0f       	add	r20, r20
    3868:	55 1f       	adc	r21, r21
    386a:	11 f4       	brne	.+4      	; 0x3870 <__fp_di2sf+0x68>
    386c:	60 ff       	sbrs	r22, 0
    386e:	04 c0       	rjmp	.+8      	; 0x3878 <__fp_di2sf+0x70>
    3870:	6f 5f       	subi	r22, 0xFF	; 255
    3872:	7f 4f       	sbci	r23, 0xFF	; 255
    3874:	8f 4f       	sbci	r24, 0xFF	; 255
    3876:	9f 4f       	sbci	r25, 0xFF	; 255
    3878:	88 0f       	add	r24, r24
    387a:	96 95       	lsr	r25
    387c:	87 95       	ror	r24
    387e:	97 f9       	bld	r25, 7
    3880:	08 95       	ret

00003882 <__fp_cmp>:
    3882:	99 0f       	add	r25, r25
    3884:	00 08       	sbc	r0, r0
    3886:	55 0f       	add	r21, r21
    3888:	aa 0b       	sbc	r26, r26
    388a:	e0 e8       	ldi	r30, 0x80	; 128
    388c:	fe ef       	ldi	r31, 0xFE	; 254
    388e:	16 16       	cp	r1, r22
    3890:	17 06       	cpc	r1, r23
    3892:	e8 07       	cpc	r30, r24
    3894:	f9 07       	cpc	r31, r25
    3896:	c0 f0       	brcs	.+48     	; 0x38c8 <__fp_cmp+0x46>
    3898:	12 16       	cp	r1, r18
    389a:	13 06       	cpc	r1, r19
    389c:	e4 07       	cpc	r30, r20
    389e:	f5 07       	cpc	r31, r21
    38a0:	98 f0       	brcs	.+38     	; 0x38c8 <__fp_cmp+0x46>
    38a2:	62 1b       	sub	r22, r18
    38a4:	73 0b       	sbc	r23, r19
    38a6:	84 0b       	sbc	r24, r20
    38a8:	95 0b       	sbc	r25, r21
    38aa:	39 f4       	brne	.+14     	; 0x38ba <__fp_cmp+0x38>
    38ac:	0a 26       	eor	r0, r26
    38ae:	61 f0       	breq	.+24     	; 0x38c8 <__fp_cmp+0x46>
    38b0:	23 2b       	or	r18, r19
    38b2:	24 2b       	or	r18, r20
    38b4:	25 2b       	or	r18, r21
    38b6:	21 f4       	brne	.+8      	; 0x38c0 <__fp_cmp+0x3e>
    38b8:	08 95       	ret
    38ba:	0a 26       	eor	r0, r26
    38bc:	09 f4       	brne	.+2      	; 0x38c0 <__fp_cmp+0x3e>
    38be:	a1 40       	sbci	r26, 0x01	; 1
    38c0:	a6 95       	lsr	r26
    38c2:	8f ef       	ldi	r24, 0xFF	; 255
    38c4:	81 1d       	adc	r24, r1
    38c6:	81 1d       	adc	r24, r1
    38c8:	08 95       	ret

000038ca <__fp_inf>:
    38ca:	97 f9       	bld	r25, 7
    38cc:	9f 67       	ori	r25, 0x7F	; 127
    38ce:	80 e8       	ldi	r24, 0x80	; 128
    38d0:	70 e0       	ldi	r23, 0x00	; 0
    38d2:	60 e0       	ldi	r22, 0x00	; 0
    38d4:	08 95       	ret

000038d6 <__fp_nan>:
    38d6:	9f ef       	ldi	r25, 0xFF	; 255
    38d8:	80 ec       	ldi	r24, 0xC0	; 192
    38da:	08 95       	ret

000038dc <__fp_negdi>:
    38dc:	90 95       	com	r25
    38de:	80 95       	com	r24
    38e0:	70 95       	com	r23
    38e2:	60 95       	com	r22
    38e4:	50 95       	com	r21
    38e6:	40 95       	com	r20
    38e8:	30 95       	com	r19
    38ea:	21 95       	neg	r18
    38ec:	3f 4f       	sbci	r19, 0xFF	; 255
    38ee:	4f 4f       	sbci	r20, 0xFF	; 255
    38f0:	5f 4f       	sbci	r21, 0xFF	; 255
    38f2:	6f 4f       	sbci	r22, 0xFF	; 255
    38f4:	7f 4f       	sbci	r23, 0xFF	; 255
    38f6:	8f 4f       	sbci	r24, 0xFF	; 255
    38f8:	9f 4f       	sbci	r25, 0xFF	; 255
    38fa:	08 95       	ret

000038fc <__fp_pscA>:
    38fc:	00 24       	eor	r0, r0
    38fe:	0a 94       	dec	r0
    3900:	16 16       	cp	r1, r22
    3902:	17 06       	cpc	r1, r23
    3904:	18 06       	cpc	r1, r24
    3906:	09 06       	cpc	r0, r25
    3908:	08 95       	ret

0000390a <__fp_pscB>:
    390a:	00 24       	eor	r0, r0
    390c:	0a 94       	dec	r0
    390e:	12 16       	cp	r1, r18
    3910:	13 06       	cpc	r1, r19
    3912:	14 06       	cpc	r1, r20
    3914:	05 06       	cpc	r0, r21
    3916:	08 95       	ret

00003918 <__fp_round>:
    3918:	09 2e       	mov	r0, r25
    391a:	03 94       	inc	r0
    391c:	00 0c       	add	r0, r0
    391e:	11 f4       	brne	.+4      	; 0x3924 <__fp_round+0xc>
    3920:	88 23       	and	r24, r24
    3922:	52 f0       	brmi	.+20     	; 0x3938 <__fp_round+0x20>
    3924:	bb 0f       	add	r27, r27
    3926:	40 f4       	brcc	.+16     	; 0x3938 <__fp_round+0x20>
    3928:	bf 2b       	or	r27, r31
    392a:	11 f4       	brne	.+4      	; 0x3930 <__fp_round+0x18>
    392c:	60 ff       	sbrs	r22, 0
    392e:	04 c0       	rjmp	.+8      	; 0x3938 <__fp_round+0x20>
    3930:	6f 5f       	subi	r22, 0xFF	; 255
    3932:	7f 4f       	sbci	r23, 0xFF	; 255
    3934:	8f 4f       	sbci	r24, 0xFF	; 255
    3936:	9f 4f       	sbci	r25, 0xFF	; 255
    3938:	08 95       	ret

0000393a <__fp_split3>:
    393a:	57 fd       	sbrc	r21, 7
    393c:	90 58       	subi	r25, 0x80	; 128
    393e:	44 0f       	add	r20, r20
    3940:	55 1f       	adc	r21, r21
    3942:	59 f0       	breq	.+22     	; 0x395a <__fp_splitA+0x10>
    3944:	5f 3f       	cpi	r21, 0xFF	; 255
    3946:	71 f0       	breq	.+28     	; 0x3964 <__fp_splitA+0x1a>
    3948:	47 95       	ror	r20

0000394a <__fp_splitA>:
    394a:	88 0f       	add	r24, r24
    394c:	97 fb       	bst	r25, 7
    394e:	99 1f       	adc	r25, r25
    3950:	61 f0       	breq	.+24     	; 0x396a <__fp_splitA+0x20>
    3952:	9f 3f       	cpi	r25, 0xFF	; 255
    3954:	79 f0       	breq	.+30     	; 0x3974 <__fp_splitA+0x2a>
    3956:	87 95       	ror	r24
    3958:	08 95       	ret
    395a:	12 16       	cp	r1, r18
    395c:	13 06       	cpc	r1, r19
    395e:	14 06       	cpc	r1, r20
    3960:	55 1f       	adc	r21, r21
    3962:	f2 cf       	rjmp	.-28     	; 0x3948 <__fp_split3+0xe>
    3964:	46 95       	lsr	r20
    3966:	f1 df       	rcall	.-30     	; 0x394a <__fp_splitA>
    3968:	08 c0       	rjmp	.+16     	; 0x397a <__fp_splitA+0x30>
    396a:	16 16       	cp	r1, r22
    396c:	17 06       	cpc	r1, r23
    396e:	18 06       	cpc	r1, r24
    3970:	99 1f       	adc	r25, r25
    3972:	f1 cf       	rjmp	.-30     	; 0x3956 <__fp_splitA+0xc>
    3974:	86 95       	lsr	r24
    3976:	71 05       	cpc	r23, r1
    3978:	61 05       	cpc	r22, r1
    397a:	08 94       	sec
    397c:	08 95       	ret

0000397e <__fp_zero>:
    397e:	e8 94       	clt

00003980 <__fp_szero>:
    3980:	bb 27       	eor	r27, r27
    3982:	66 27       	eor	r22, r22
    3984:	77 27       	eor	r23, r23
    3986:	cb 01       	movw	r24, r22
    3988:	97 f9       	bld	r25, 7
    398a:	08 95       	ret

0000398c <__gesf2>:
    398c:	7a df       	rcall	.-268    	; 0x3882 <__fp_cmp>
    398e:	08 f4       	brcc	.+2      	; 0x3992 <__gesf2+0x6>
    3990:	8f ef       	ldi	r24, 0xFF	; 255
    3992:	08 95       	ret

00003994 <pow>:
    3994:	fa 01       	movw	r30, r20
    3996:	ee 0f       	add	r30, r30
    3998:	ff 1f       	adc	r31, r31
    399a:	30 96       	adiw	r30, 0x00	; 0
    399c:	21 05       	cpc	r18, r1
    399e:	31 05       	cpc	r19, r1
    39a0:	99 f1       	breq	.+102    	; 0x3a08 <pow+0x74>
    39a2:	61 15       	cp	r22, r1
    39a4:	71 05       	cpc	r23, r1
    39a6:	61 f4       	brne	.+24     	; 0x39c0 <pow+0x2c>
    39a8:	80 38       	cpi	r24, 0x80	; 128
    39aa:	bf e3       	ldi	r27, 0x3F	; 63
    39ac:	9b 07       	cpc	r25, r27
    39ae:	49 f1       	breq	.+82     	; 0x3a02 <pow+0x6e>
    39b0:	68 94       	set
    39b2:	90 38       	cpi	r25, 0x80	; 128
    39b4:	81 05       	cpc	r24, r1
    39b6:	61 f0       	breq	.+24     	; 0x39d0 <pow+0x3c>
    39b8:	80 38       	cpi	r24, 0x80	; 128
    39ba:	bf ef       	ldi	r27, 0xFF	; 255
    39bc:	9b 07       	cpc	r25, r27
    39be:	41 f0       	breq	.+16     	; 0x39d0 <pow+0x3c>
    39c0:	99 23       	and	r25, r25
    39c2:	42 f5       	brpl	.+80     	; 0x3a14 <pow+0x80>
    39c4:	ff 3f       	cpi	r31, 0xFF	; 255
    39c6:	e1 05       	cpc	r30, r1
    39c8:	31 05       	cpc	r19, r1
    39ca:	21 05       	cpc	r18, r1
    39cc:	11 f1       	breq	.+68     	; 0x3a12 <pow+0x7e>
    39ce:	e8 94       	clt
    39d0:	08 94       	sec
    39d2:	e7 95       	ror	r30
    39d4:	d9 01       	movw	r26, r18
    39d6:	aa 23       	and	r26, r26
    39d8:	29 f4       	brne	.+10     	; 0x39e4 <pow+0x50>
    39da:	ab 2f       	mov	r26, r27
    39dc:	be 2f       	mov	r27, r30
    39de:	f8 5f       	subi	r31, 0xF8	; 248
    39e0:	d0 f3       	brcs	.-12     	; 0x39d6 <pow+0x42>
    39e2:	10 c0       	rjmp	.+32     	; 0x3a04 <pow+0x70>
    39e4:	ff 5f       	subi	r31, 0xFF	; 255
    39e6:	70 f4       	brcc	.+28     	; 0x3a04 <pow+0x70>
    39e8:	a6 95       	lsr	r26
    39ea:	e0 f7       	brcc	.-8      	; 0x39e4 <pow+0x50>
    39ec:	f7 39       	cpi	r31, 0x97	; 151
    39ee:	50 f0       	brcs	.+20     	; 0x3a04 <pow+0x70>
    39f0:	19 f0       	breq	.+6      	; 0x39f8 <pow+0x64>
    39f2:	ff 3a       	cpi	r31, 0xAF	; 175
    39f4:	38 f4       	brcc	.+14     	; 0x3a04 <pow+0x70>
    39f6:	9f 77       	andi	r25, 0x7F	; 127
    39f8:	9f 93       	push	r25
    39fa:	0c d0       	rcall	.+24     	; 0x3a14 <pow+0x80>
    39fc:	0f 90       	pop	r0
    39fe:	07 fc       	sbrc	r0, 7
    3a00:	90 58       	subi	r25, 0x80	; 128
    3a02:	08 95       	ret
    3a04:	3e f0       	brts	.+14     	; 0x3a14 <pow+0x80>
    3a06:	67 cf       	rjmp	.-306    	; 0x38d6 <__fp_nan>
    3a08:	60 e0       	ldi	r22, 0x00	; 0
    3a0a:	70 e0       	ldi	r23, 0x00	; 0
    3a0c:	80 e8       	ldi	r24, 0x80	; 128
    3a0e:	9f e3       	ldi	r25, 0x3F	; 63
    3a10:	08 95       	ret
    3a12:	4f e7       	ldi	r20, 0x7F	; 127
    3a14:	9f 77       	andi	r25, 0x7F	; 127
    3a16:	5f 93       	push	r21
    3a18:	4f 93       	push	r20
    3a1a:	3f 93       	push	r19
    3a1c:	2f 93       	push	r18
    3a1e:	9e d0       	rcall	.+316    	; 0x3b5c <log>
    3a20:	2f 91       	pop	r18
    3a22:	3f 91       	pop	r19
    3a24:	4f 91       	pop	r20
    3a26:	5f 91       	pop	r21
    3a28:	0c d1       	rcall	.+536    	; 0x3c42 <__mulsf3>
    3a2a:	05 c0       	rjmp	.+10     	; 0x3a36 <exp>
    3a2c:	19 f4       	brne	.+6      	; 0x3a34 <pow+0xa0>
    3a2e:	0e f0       	brts	.+2      	; 0x3a32 <pow+0x9e>
    3a30:	4c cf       	rjmp	.-360    	; 0x38ca <__fp_inf>
    3a32:	a5 cf       	rjmp	.-182    	; 0x397e <__fp_zero>
    3a34:	50 cf       	rjmp	.-352    	; 0x38d6 <__fp_nan>

00003a36 <exp>:
    3a36:	89 df       	rcall	.-238    	; 0x394a <__fp_splitA>
    3a38:	c8 f3       	brcs	.-14     	; 0x3a2c <pow+0x98>
    3a3a:	96 38       	cpi	r25, 0x86	; 134
    3a3c:	c0 f7       	brcc	.-16     	; 0x3a2e <pow+0x9a>
    3a3e:	07 f8       	bld	r0, 7
    3a40:	0f 92       	push	r0
    3a42:	e8 94       	clt
    3a44:	2b e3       	ldi	r18, 0x3B	; 59
    3a46:	3a ea       	ldi	r19, 0xAA	; 170
    3a48:	48 eb       	ldi	r20, 0xB8	; 184
    3a4a:	5f e7       	ldi	r21, 0x7F	; 127
    3a4c:	08 d1       	rcall	.+528    	; 0x3c5e <__mulsf3_pse>
    3a4e:	0f 92       	push	r0
    3a50:	0f 92       	push	r0
    3a52:	0f 92       	push	r0
    3a54:	4d b7       	in	r20, 0x3d	; 61
    3a56:	5e b7       	in	r21, 0x3e	; 62
    3a58:	0f 92       	push	r0
    3a5a:	c0 d0       	rcall	.+384    	; 0x3bdc <modf>
    3a5c:	e4 e1       	ldi	r30, 0x14	; 20
    3a5e:	f2 e0       	ldi	r31, 0x02	; 2
    3a60:	16 d0       	rcall	.+44     	; 0x3a8e <__fp_powser>
    3a62:	4f 91       	pop	r20
    3a64:	5f 91       	pop	r21
    3a66:	ef 91       	pop	r30
    3a68:	ff 91       	pop	r31
    3a6a:	e5 95       	asr	r30
    3a6c:	ee 1f       	adc	r30, r30
    3a6e:	ff 1f       	adc	r31, r31
    3a70:	49 f0       	breq	.+18     	; 0x3a84 <exp+0x4e>
    3a72:	fe 57       	subi	r31, 0x7E	; 126
    3a74:	e0 68       	ori	r30, 0x80	; 128
    3a76:	44 27       	eor	r20, r20
    3a78:	ee 0f       	add	r30, r30
    3a7a:	44 1f       	adc	r20, r20
    3a7c:	fa 95       	dec	r31
    3a7e:	e1 f7       	brne	.-8      	; 0x3a78 <exp+0x42>
    3a80:	41 95       	neg	r20
    3a82:	55 0b       	sbc	r21, r21
    3a84:	32 d0       	rcall	.+100    	; 0x3aea <ldexp>
    3a86:	0f 90       	pop	r0
    3a88:	07 fe       	sbrs	r0, 7
    3a8a:	26 c0       	rjmp	.+76     	; 0x3ad8 <inverse>
    3a8c:	08 95       	ret

00003a8e <__fp_powser>:
    3a8e:	df 93       	push	r29
    3a90:	cf 93       	push	r28
    3a92:	1f 93       	push	r17
    3a94:	0f 93       	push	r16
    3a96:	ff 92       	push	r15
    3a98:	ef 92       	push	r14
    3a9a:	df 92       	push	r13
    3a9c:	7b 01       	movw	r14, r22
    3a9e:	8c 01       	movw	r16, r24
    3aa0:	68 94       	set
    3aa2:	05 c0       	rjmp	.+10     	; 0x3aae <__fp_powser+0x20>
    3aa4:	da 2e       	mov	r13, r26
    3aa6:	ef 01       	movw	r28, r30
    3aa8:	d8 d0       	rcall	.+432    	; 0x3c5a <__mulsf3x>
    3aaa:	fe 01       	movw	r30, r28
    3aac:	e8 94       	clt
    3aae:	a5 91       	lpm	r26, Z+
    3ab0:	25 91       	lpm	r18, Z+
    3ab2:	35 91       	lpm	r19, Z+
    3ab4:	45 91       	lpm	r20, Z+
    3ab6:	55 91       	lpm	r21, Z+
    3ab8:	ae f3       	brts	.-22     	; 0x3aa4 <__fp_powser+0x16>
    3aba:	ef 01       	movw	r28, r30
    3abc:	37 d1       	rcall	.+622    	; 0x3d2c <__addsf3x>
    3abe:	fe 01       	movw	r30, r28
    3ac0:	97 01       	movw	r18, r14
    3ac2:	a8 01       	movw	r20, r16
    3ac4:	da 94       	dec	r13
    3ac6:	79 f7       	brne	.-34     	; 0x3aa6 <__fp_powser+0x18>
    3ac8:	df 90       	pop	r13
    3aca:	ef 90       	pop	r14
    3acc:	ff 90       	pop	r15
    3ace:	0f 91       	pop	r16
    3ad0:	1f 91       	pop	r17
    3ad2:	cf 91       	pop	r28
    3ad4:	df 91       	pop	r29
    3ad6:	08 95       	ret

00003ad8 <inverse>:
    3ad8:	9b 01       	movw	r18, r22
    3ada:	ac 01       	movw	r20, r24
    3adc:	60 e0       	ldi	r22, 0x00	; 0
    3ade:	70 e0       	ldi	r23, 0x00	; 0
    3ae0:	80 e8       	ldi	r24, 0x80	; 128
    3ae2:	9f e3       	ldi	r25, 0x3F	; 63
    3ae4:	b1 cd       	rjmp	.-1182   	; 0x3648 <__divsf3>
    3ae6:	f1 ce       	rjmp	.-542    	; 0x38ca <__fp_inf>
    3ae8:	74 c1       	rjmp	.+744    	; 0x3dd2 <__fp_mpack>

00003aea <ldexp>:
    3aea:	2f df       	rcall	.-418    	; 0x394a <__fp_splitA>
    3aec:	e8 f3       	brcs	.-6      	; 0x3ae8 <inverse+0x10>
    3aee:	99 23       	and	r25, r25
    3af0:	d9 f3       	breq	.-10     	; 0x3ae8 <inverse+0x10>
    3af2:	94 0f       	add	r25, r20
    3af4:	51 1d       	adc	r21, r1
    3af6:	bb f3       	brvs	.-18     	; 0x3ae6 <inverse+0xe>
    3af8:	91 50       	subi	r25, 0x01	; 1
    3afa:	50 40       	sbci	r21, 0x00	; 0
    3afc:	94 f0       	brlt	.+36     	; 0x3b22 <ldexp+0x38>
    3afe:	59 f0       	breq	.+22     	; 0x3b16 <ldexp+0x2c>
    3b00:	88 23       	and	r24, r24
    3b02:	32 f0       	brmi	.+12     	; 0x3b10 <ldexp+0x26>
    3b04:	66 0f       	add	r22, r22
    3b06:	77 1f       	adc	r23, r23
    3b08:	88 1f       	adc	r24, r24
    3b0a:	91 50       	subi	r25, 0x01	; 1
    3b0c:	50 40       	sbci	r21, 0x00	; 0
    3b0e:	c1 f7       	brne	.-16     	; 0x3b00 <ldexp+0x16>
    3b10:	9e 3f       	cpi	r25, 0xFE	; 254
    3b12:	51 05       	cpc	r21, r1
    3b14:	44 f7       	brge	.-48     	; 0x3ae6 <inverse+0xe>
    3b16:	88 0f       	add	r24, r24
    3b18:	91 1d       	adc	r25, r1
    3b1a:	96 95       	lsr	r25
    3b1c:	87 95       	ror	r24
    3b1e:	97 f9       	bld	r25, 7
    3b20:	08 95       	ret
    3b22:	5f 3f       	cpi	r21, 0xFF	; 255
    3b24:	ac f0       	brlt	.+42     	; 0x3b50 <ldexp+0x66>
    3b26:	98 3e       	cpi	r25, 0xE8	; 232
    3b28:	9c f0       	brlt	.+38     	; 0x3b50 <ldexp+0x66>
    3b2a:	bb 27       	eor	r27, r27
    3b2c:	86 95       	lsr	r24
    3b2e:	77 95       	ror	r23
    3b30:	67 95       	ror	r22
    3b32:	b7 95       	ror	r27
    3b34:	08 f4       	brcc	.+2      	; 0x3b38 <ldexp+0x4e>
    3b36:	b1 60       	ori	r27, 0x01	; 1
    3b38:	93 95       	inc	r25
    3b3a:	c1 f7       	brne	.-16     	; 0x3b2c <ldexp+0x42>
    3b3c:	bb 0f       	add	r27, r27
    3b3e:	58 f7       	brcc	.-42     	; 0x3b16 <ldexp+0x2c>
    3b40:	11 f4       	brne	.+4      	; 0x3b46 <ldexp+0x5c>
    3b42:	60 ff       	sbrs	r22, 0
    3b44:	e8 cf       	rjmp	.-48     	; 0x3b16 <ldexp+0x2c>
    3b46:	6f 5f       	subi	r22, 0xFF	; 255
    3b48:	7f 4f       	sbci	r23, 0xFF	; 255
    3b4a:	8f 4f       	sbci	r24, 0xFF	; 255
    3b4c:	9f 4f       	sbci	r25, 0xFF	; 255
    3b4e:	e3 cf       	rjmp	.-58     	; 0x3b16 <ldexp+0x2c>
    3b50:	17 cf       	rjmp	.-466    	; 0x3980 <__fp_szero>
    3b52:	0e f0       	brts	.+2      	; 0x3b56 <ldexp+0x6c>
    3b54:	3e c1       	rjmp	.+636    	; 0x3dd2 <__fp_mpack>
    3b56:	bf ce       	rjmp	.-642    	; 0x38d6 <__fp_nan>
    3b58:	68 94       	set
    3b5a:	b7 ce       	rjmp	.-658    	; 0x38ca <__fp_inf>

00003b5c <log>:
    3b5c:	f6 de       	rcall	.-532    	; 0x394a <__fp_splitA>
    3b5e:	c8 f3       	brcs	.-14     	; 0x3b52 <ldexp+0x68>
    3b60:	99 23       	and	r25, r25
    3b62:	d1 f3       	breq	.-12     	; 0x3b58 <ldexp+0x6e>
    3b64:	c6 f3       	brts	.-16     	; 0x3b56 <ldexp+0x6c>
    3b66:	df 93       	push	r29
    3b68:	cf 93       	push	r28
    3b6a:	1f 93       	push	r17
    3b6c:	0f 93       	push	r16
    3b6e:	ff 92       	push	r15
    3b70:	c9 2f       	mov	r28, r25
    3b72:	dd 27       	eor	r29, r29
    3b74:	88 23       	and	r24, r24
    3b76:	2a f0       	brmi	.+10     	; 0x3b82 <log+0x26>
    3b78:	21 97       	sbiw	r28, 0x01	; 1
    3b7a:	66 0f       	add	r22, r22
    3b7c:	77 1f       	adc	r23, r23
    3b7e:	88 1f       	adc	r24, r24
    3b80:	da f7       	brpl	.-10     	; 0x3b78 <log+0x1c>
    3b82:	20 e0       	ldi	r18, 0x00	; 0
    3b84:	30 e0       	ldi	r19, 0x00	; 0
    3b86:	40 e8       	ldi	r20, 0x80	; 128
    3b88:	5f eb       	ldi	r21, 0xBF	; 191
    3b8a:	9f e3       	ldi	r25, 0x3F	; 63
    3b8c:	88 39       	cpi	r24, 0x98	; 152
    3b8e:	20 f0       	brcs	.+8      	; 0x3b98 <log+0x3c>
    3b90:	80 3e       	cpi	r24, 0xE0	; 224
    3b92:	30 f0       	brcs	.+12     	; 0x3ba0 <log+0x44>
    3b94:	21 96       	adiw	r28, 0x01	; 1
    3b96:	8f 77       	andi	r24, 0x7F	; 127
    3b98:	b8 d0       	rcall	.+368    	; 0x3d0a <__addsf3>
    3b9a:	ec e3       	ldi	r30, 0x3C	; 60
    3b9c:	f2 e0       	ldi	r31, 0x02	; 2
    3b9e:	03 c0       	rjmp	.+6      	; 0x3ba6 <log+0x4a>
    3ba0:	b4 d0       	rcall	.+360    	; 0x3d0a <__addsf3>
    3ba2:	e9 e6       	ldi	r30, 0x69	; 105
    3ba4:	f2 e0       	ldi	r31, 0x02	; 2
    3ba6:	73 df       	rcall	.-282    	; 0x3a8e <__fp_powser>
    3ba8:	8b 01       	movw	r16, r22
    3baa:	be 01       	movw	r22, r28
    3bac:	ec 01       	movw	r28, r24
    3bae:	fb 2e       	mov	r15, r27
    3bb0:	6f 57       	subi	r22, 0x7F	; 127
    3bb2:	71 09       	sbc	r23, r1
    3bb4:	75 95       	asr	r23
    3bb6:	77 1f       	adc	r23, r23
    3bb8:	88 0b       	sbc	r24, r24
    3bba:	99 0b       	sbc	r25, r25
    3bbc:	e9 dd       	rcall	.-1070   	; 0x3790 <__floatsisf>
    3bbe:	28 e1       	ldi	r18, 0x18	; 24
    3bc0:	32 e7       	ldi	r19, 0x72	; 114
    3bc2:	41 e3       	ldi	r20, 0x31	; 49
    3bc4:	5f e3       	ldi	r21, 0x3F	; 63
    3bc6:	49 d0       	rcall	.+146    	; 0x3c5a <__mulsf3x>
    3bc8:	af 2d       	mov	r26, r15
    3bca:	98 01       	movw	r18, r16
    3bcc:	ae 01       	movw	r20, r28
    3bce:	ff 90       	pop	r15
    3bd0:	0f 91       	pop	r16
    3bd2:	1f 91       	pop	r17
    3bd4:	cf 91       	pop	r28
    3bd6:	df 91       	pop	r29
    3bd8:	a9 d0       	rcall	.+338    	; 0x3d2c <__addsf3x>
    3bda:	9e ce       	rjmp	.-708    	; 0x3918 <__fp_round>

00003bdc <modf>:
    3bdc:	fa 01       	movw	r30, r20
    3bde:	dc 01       	movw	r26, r24
    3be0:	aa 0f       	add	r26, r26
    3be2:	bb 1f       	adc	r27, r27
    3be4:	9b 01       	movw	r18, r22
    3be6:	ac 01       	movw	r20, r24
    3be8:	bf 57       	subi	r27, 0x7F	; 127
    3bea:	28 f4       	brcc	.+10     	; 0x3bf6 <modf+0x1a>
    3bec:	22 27       	eor	r18, r18
    3bee:	33 27       	eor	r19, r19
    3bf0:	44 27       	eor	r20, r20
    3bf2:	50 78       	andi	r21, 0x80	; 128
    3bf4:	1f c0       	rjmp	.+62     	; 0x3c34 <modf+0x58>
    3bf6:	b7 51       	subi	r27, 0x17	; 23
    3bf8:	88 f4       	brcc	.+34     	; 0x3c1c <modf+0x40>
    3bfa:	ab 2f       	mov	r26, r27
    3bfc:	00 24       	eor	r0, r0
    3bfe:	46 95       	lsr	r20
    3c00:	37 95       	ror	r19
    3c02:	27 95       	ror	r18
    3c04:	01 1c       	adc	r0, r1
    3c06:	a3 95       	inc	r26
    3c08:	d2 f3       	brmi	.-12     	; 0x3bfe <modf+0x22>
    3c0a:	00 20       	and	r0, r0
    3c0c:	69 f0       	breq	.+26     	; 0x3c28 <modf+0x4c>
    3c0e:	22 0f       	add	r18, r18
    3c10:	33 1f       	adc	r19, r19
    3c12:	44 1f       	adc	r20, r20
    3c14:	b3 95       	inc	r27
    3c16:	da f3       	brmi	.-10     	; 0x3c0e <modf+0x32>
    3c18:	0d d0       	rcall	.+26     	; 0x3c34 <modf+0x58>
    3c1a:	76 c0       	rjmp	.+236    	; 0x3d08 <__subsf3>
    3c1c:	61 30       	cpi	r22, 0x01	; 1
    3c1e:	71 05       	cpc	r23, r1
    3c20:	a0 e8       	ldi	r26, 0x80	; 128
    3c22:	8a 07       	cpc	r24, r26
    3c24:	b9 46       	sbci	r27, 0x69	; 105
    3c26:	30 f4       	brcc	.+12     	; 0x3c34 <modf+0x58>
    3c28:	9b 01       	movw	r18, r22
    3c2a:	ac 01       	movw	r20, r24
    3c2c:	66 27       	eor	r22, r22
    3c2e:	77 27       	eor	r23, r23
    3c30:	88 27       	eor	r24, r24
    3c32:	90 78       	andi	r25, 0x80	; 128
    3c34:	30 96       	adiw	r30, 0x00	; 0
    3c36:	21 f0       	breq	.+8      	; 0x3c40 <modf+0x64>
    3c38:	20 83       	st	Z, r18
    3c3a:	31 83       	std	Z+1, r19	; 0x01
    3c3c:	42 83       	std	Z+2, r20	; 0x02
    3c3e:	53 83       	std	Z+3, r21	; 0x03
    3c40:	08 95       	ret

00003c42 <__mulsf3>:
    3c42:	0b d0       	rcall	.+22     	; 0x3c5a <__mulsf3x>
    3c44:	69 ce       	rjmp	.-814    	; 0x3918 <__fp_round>
    3c46:	5a de       	rcall	.-844    	; 0x38fc <__fp_pscA>
    3c48:	28 f0       	brcs	.+10     	; 0x3c54 <__mulsf3+0x12>
    3c4a:	5f de       	rcall	.-834    	; 0x390a <__fp_pscB>
    3c4c:	18 f0       	brcs	.+6      	; 0x3c54 <__mulsf3+0x12>
    3c4e:	95 23       	and	r25, r21
    3c50:	09 f0       	breq	.+2      	; 0x3c54 <__mulsf3+0x12>
    3c52:	3b ce       	rjmp	.-906    	; 0x38ca <__fp_inf>
    3c54:	40 ce       	rjmp	.-896    	; 0x38d6 <__fp_nan>
    3c56:	11 24       	eor	r1, r1
    3c58:	93 ce       	rjmp	.-730    	; 0x3980 <__fp_szero>

00003c5a <__mulsf3x>:
    3c5a:	6f de       	rcall	.-802    	; 0x393a <__fp_split3>
    3c5c:	a0 f3       	brcs	.-24     	; 0x3c46 <__mulsf3+0x4>

00003c5e <__mulsf3_pse>:
    3c5e:	95 9f       	mul	r25, r21
    3c60:	d1 f3       	breq	.-12     	; 0x3c56 <__mulsf3+0x14>
    3c62:	95 0f       	add	r25, r21
    3c64:	50 e0       	ldi	r21, 0x00	; 0
    3c66:	55 1f       	adc	r21, r21
    3c68:	62 9f       	mul	r22, r18
    3c6a:	f0 01       	movw	r30, r0
    3c6c:	72 9f       	mul	r23, r18
    3c6e:	bb 27       	eor	r27, r27
    3c70:	f0 0d       	add	r31, r0
    3c72:	b1 1d       	adc	r27, r1
    3c74:	63 9f       	mul	r22, r19
    3c76:	aa 27       	eor	r26, r26
    3c78:	f0 0d       	add	r31, r0
    3c7a:	b1 1d       	adc	r27, r1
    3c7c:	aa 1f       	adc	r26, r26
    3c7e:	64 9f       	mul	r22, r20
    3c80:	66 27       	eor	r22, r22
    3c82:	b0 0d       	add	r27, r0
    3c84:	a1 1d       	adc	r26, r1
    3c86:	66 1f       	adc	r22, r22
    3c88:	82 9f       	mul	r24, r18
    3c8a:	22 27       	eor	r18, r18
    3c8c:	b0 0d       	add	r27, r0
    3c8e:	a1 1d       	adc	r26, r1
    3c90:	62 1f       	adc	r22, r18
    3c92:	73 9f       	mul	r23, r19
    3c94:	b0 0d       	add	r27, r0
    3c96:	a1 1d       	adc	r26, r1
    3c98:	62 1f       	adc	r22, r18
    3c9a:	83 9f       	mul	r24, r19
    3c9c:	a0 0d       	add	r26, r0
    3c9e:	61 1d       	adc	r22, r1
    3ca0:	22 1f       	adc	r18, r18
    3ca2:	74 9f       	mul	r23, r20
    3ca4:	33 27       	eor	r19, r19
    3ca6:	a0 0d       	add	r26, r0
    3ca8:	61 1d       	adc	r22, r1
    3caa:	23 1f       	adc	r18, r19
    3cac:	84 9f       	mul	r24, r20
    3cae:	60 0d       	add	r22, r0
    3cb0:	21 1d       	adc	r18, r1
    3cb2:	82 2f       	mov	r24, r18
    3cb4:	76 2f       	mov	r23, r22
    3cb6:	6a 2f       	mov	r22, r26
    3cb8:	11 24       	eor	r1, r1
    3cba:	9f 57       	subi	r25, 0x7F	; 127
    3cbc:	50 40       	sbci	r21, 0x00	; 0
    3cbe:	8a f0       	brmi	.+34     	; 0x3ce2 <__mulsf3_pse+0x84>
    3cc0:	e1 f0       	breq	.+56     	; 0x3cfa <__mulsf3_pse+0x9c>
    3cc2:	88 23       	and	r24, r24
    3cc4:	4a f0       	brmi	.+18     	; 0x3cd8 <__mulsf3_pse+0x7a>
    3cc6:	ee 0f       	add	r30, r30
    3cc8:	ff 1f       	adc	r31, r31
    3cca:	bb 1f       	adc	r27, r27
    3ccc:	66 1f       	adc	r22, r22
    3cce:	77 1f       	adc	r23, r23
    3cd0:	88 1f       	adc	r24, r24
    3cd2:	91 50       	subi	r25, 0x01	; 1
    3cd4:	50 40       	sbci	r21, 0x00	; 0
    3cd6:	a9 f7       	brne	.-22     	; 0x3cc2 <__mulsf3_pse+0x64>
    3cd8:	9e 3f       	cpi	r25, 0xFE	; 254
    3cda:	51 05       	cpc	r21, r1
    3cdc:	70 f0       	brcs	.+28     	; 0x3cfa <__mulsf3_pse+0x9c>
    3cde:	f5 cd       	rjmp	.-1046   	; 0x38ca <__fp_inf>
    3ce0:	4f ce       	rjmp	.-866    	; 0x3980 <__fp_szero>
    3ce2:	5f 3f       	cpi	r21, 0xFF	; 255
    3ce4:	ec f3       	brlt	.-6      	; 0x3ce0 <__mulsf3_pse+0x82>
    3ce6:	98 3e       	cpi	r25, 0xE8	; 232
    3ce8:	dc f3       	brlt	.-10     	; 0x3ce0 <__mulsf3_pse+0x82>
    3cea:	86 95       	lsr	r24
    3cec:	77 95       	ror	r23
    3cee:	67 95       	ror	r22
    3cf0:	b7 95       	ror	r27
    3cf2:	f7 95       	ror	r31
    3cf4:	e7 95       	ror	r30
    3cf6:	9f 5f       	subi	r25, 0xFF	; 255
    3cf8:	c1 f7       	brne	.-16     	; 0x3cea <__mulsf3_pse+0x8c>
    3cfa:	fe 2b       	or	r31, r30
    3cfc:	88 0f       	add	r24, r24
    3cfe:	91 1d       	adc	r25, r1
    3d00:	96 95       	lsr	r25
    3d02:	87 95       	ror	r24
    3d04:	97 f9       	bld	r25, 7
    3d06:	08 95       	ret

00003d08 <__subsf3>:
    3d08:	50 58       	subi	r21, 0x80	; 128

00003d0a <__addsf3>:
    3d0a:	bb 27       	eor	r27, r27
    3d0c:	aa 27       	eor	r26, r26
    3d0e:	0e d0       	rcall	.+28     	; 0x3d2c <__addsf3x>
    3d10:	03 ce       	rjmp	.-1018   	; 0x3918 <__fp_round>
    3d12:	f4 dd       	rcall	.-1048   	; 0x38fc <__fp_pscA>
    3d14:	30 f0       	brcs	.+12     	; 0x3d22 <__addsf3+0x18>
    3d16:	f9 dd       	rcall	.-1038   	; 0x390a <__fp_pscB>
    3d18:	20 f0       	brcs	.+8      	; 0x3d22 <__addsf3+0x18>
    3d1a:	31 f4       	brne	.+12     	; 0x3d28 <__addsf3+0x1e>
    3d1c:	9f 3f       	cpi	r25, 0xFF	; 255
    3d1e:	11 f4       	brne	.+4      	; 0x3d24 <__addsf3+0x1a>
    3d20:	1e f4       	brtc	.+6      	; 0x3d28 <__addsf3+0x1e>
    3d22:	d9 cd       	rjmp	.-1102   	; 0x38d6 <__fp_nan>
    3d24:	0e f4       	brtc	.+2      	; 0x3d28 <__addsf3+0x1e>
    3d26:	e0 95       	com	r30
    3d28:	e7 fb       	bst	r30, 7
    3d2a:	cf cd       	rjmp	.-1122   	; 0x38ca <__fp_inf>

00003d2c <__addsf3x>:
    3d2c:	e9 2f       	mov	r30, r25
    3d2e:	05 de       	rcall	.-1014   	; 0x393a <__fp_split3>
    3d30:	80 f3       	brcs	.-32     	; 0x3d12 <__addsf3+0x8>
    3d32:	ba 17       	cp	r27, r26
    3d34:	62 07       	cpc	r22, r18
    3d36:	73 07       	cpc	r23, r19
    3d38:	84 07       	cpc	r24, r20
    3d3a:	95 07       	cpc	r25, r21
    3d3c:	18 f0       	brcs	.+6      	; 0x3d44 <__addsf3x+0x18>
    3d3e:	71 f4       	brne	.+28     	; 0x3d5c <__addsf3x+0x30>
    3d40:	9e f5       	brtc	.+102    	; 0x3da8 <__addsf3x+0x7c>
    3d42:	1d ce       	rjmp	.-966    	; 0x397e <__fp_zero>
    3d44:	0e f4       	brtc	.+2      	; 0x3d48 <__addsf3x+0x1c>
    3d46:	e0 95       	com	r30
    3d48:	0b 2e       	mov	r0, r27
    3d4a:	ba 2f       	mov	r27, r26
    3d4c:	a0 2d       	mov	r26, r0
    3d4e:	0b 01       	movw	r0, r22
    3d50:	b9 01       	movw	r22, r18
    3d52:	90 01       	movw	r18, r0
    3d54:	0c 01       	movw	r0, r24
    3d56:	ca 01       	movw	r24, r20
    3d58:	a0 01       	movw	r20, r0
    3d5a:	11 24       	eor	r1, r1
    3d5c:	ff 27       	eor	r31, r31
    3d5e:	59 1b       	sub	r21, r25
    3d60:	99 f0       	breq	.+38     	; 0x3d88 <__addsf3x+0x5c>
    3d62:	59 3f       	cpi	r21, 0xF9	; 249
    3d64:	50 f4       	brcc	.+20     	; 0x3d7a <__addsf3x+0x4e>
    3d66:	50 3e       	cpi	r21, 0xE0	; 224
    3d68:	68 f1       	brcs	.+90     	; 0x3dc4 <__addsf3x+0x98>
    3d6a:	1a 16       	cp	r1, r26
    3d6c:	f0 40       	sbci	r31, 0x00	; 0
    3d6e:	a2 2f       	mov	r26, r18
    3d70:	23 2f       	mov	r18, r19
    3d72:	34 2f       	mov	r19, r20
    3d74:	44 27       	eor	r20, r20
    3d76:	58 5f       	subi	r21, 0xF8	; 248
    3d78:	f3 cf       	rjmp	.-26     	; 0x3d60 <__addsf3x+0x34>
    3d7a:	46 95       	lsr	r20
    3d7c:	37 95       	ror	r19
    3d7e:	27 95       	ror	r18
    3d80:	a7 95       	ror	r26
    3d82:	f0 40       	sbci	r31, 0x00	; 0
    3d84:	53 95       	inc	r21
    3d86:	c9 f7       	brne	.-14     	; 0x3d7a <__addsf3x+0x4e>
    3d88:	7e f4       	brtc	.+30     	; 0x3da8 <__addsf3x+0x7c>
    3d8a:	1f 16       	cp	r1, r31
    3d8c:	ba 0b       	sbc	r27, r26
    3d8e:	62 0b       	sbc	r22, r18
    3d90:	73 0b       	sbc	r23, r19
    3d92:	84 0b       	sbc	r24, r20
    3d94:	ba f0       	brmi	.+46     	; 0x3dc4 <__addsf3x+0x98>
    3d96:	91 50       	subi	r25, 0x01	; 1
    3d98:	a1 f0       	breq	.+40     	; 0x3dc2 <__addsf3x+0x96>
    3d9a:	ff 0f       	add	r31, r31
    3d9c:	bb 1f       	adc	r27, r27
    3d9e:	66 1f       	adc	r22, r22
    3da0:	77 1f       	adc	r23, r23
    3da2:	88 1f       	adc	r24, r24
    3da4:	c2 f7       	brpl	.-16     	; 0x3d96 <__addsf3x+0x6a>
    3da6:	0e c0       	rjmp	.+28     	; 0x3dc4 <__addsf3x+0x98>
    3da8:	ba 0f       	add	r27, r26
    3daa:	62 1f       	adc	r22, r18
    3dac:	73 1f       	adc	r23, r19
    3dae:	84 1f       	adc	r24, r20
    3db0:	48 f4       	brcc	.+18     	; 0x3dc4 <__addsf3x+0x98>
    3db2:	87 95       	ror	r24
    3db4:	77 95       	ror	r23
    3db6:	67 95       	ror	r22
    3db8:	b7 95       	ror	r27
    3dba:	f7 95       	ror	r31
    3dbc:	9e 3f       	cpi	r25, 0xFE	; 254
    3dbe:	08 f0       	brcs	.+2      	; 0x3dc2 <__addsf3x+0x96>
    3dc0:	b3 cf       	rjmp	.-154    	; 0x3d28 <__addsf3+0x1e>
    3dc2:	93 95       	inc	r25
    3dc4:	88 0f       	add	r24, r24
    3dc6:	08 f0       	brcs	.+2      	; 0x3dca <__addsf3x+0x9e>
    3dc8:	99 27       	eor	r25, r25
    3dca:	ee 0f       	add	r30, r30
    3dcc:	97 95       	ror	r25
    3dce:	87 95       	ror	r24
    3dd0:	08 95       	ret

00003dd2 <__fp_mpack>:
    3dd2:	9f 3f       	cpi	r25, 0xFF	; 255
    3dd4:	31 f0       	breq	.+12     	; 0x3de2 <__fp_mpack_finite+0xc>

00003dd6 <__fp_mpack_finite>:
    3dd6:	91 50       	subi	r25, 0x01	; 1
    3dd8:	20 f4       	brcc	.+8      	; 0x3de2 <__fp_mpack_finite+0xc>
    3dda:	87 95       	ror	r24
    3ddc:	77 95       	ror	r23
    3dde:	67 95       	ror	r22
    3de0:	b7 95       	ror	r27
    3de2:	88 0f       	add	r24, r24
    3de4:	91 1d       	adc	r25, r1
    3de6:	96 95       	lsr	r25
    3de8:	87 95       	ror	r24
    3dea:	97 f9       	bld	r25, 7
    3dec:	08 95       	ret

00003dee <__udivmodsi4>:
    3dee:	a1 e2       	ldi	r26, 0x21	; 33
    3df0:	1a 2e       	mov	r1, r26
    3df2:	aa 1b       	sub	r26, r26
    3df4:	bb 1b       	sub	r27, r27
    3df6:	fd 01       	movw	r30, r26
    3df8:	0d c0       	rjmp	.+26     	; 0x3e14 <__udivmodsi4_ep>

00003dfa <__udivmodsi4_loop>:
    3dfa:	aa 1f       	adc	r26, r26
    3dfc:	bb 1f       	adc	r27, r27
    3dfe:	ee 1f       	adc	r30, r30
    3e00:	ff 1f       	adc	r31, r31
    3e02:	a2 17       	cp	r26, r18
    3e04:	b3 07       	cpc	r27, r19
    3e06:	e4 07       	cpc	r30, r20
    3e08:	f5 07       	cpc	r31, r21
    3e0a:	20 f0       	brcs	.+8      	; 0x3e14 <__udivmodsi4_ep>
    3e0c:	a2 1b       	sub	r26, r18
    3e0e:	b3 0b       	sbc	r27, r19
    3e10:	e4 0b       	sbc	r30, r20
    3e12:	f5 0b       	sbc	r31, r21

00003e14 <__udivmodsi4_ep>:
    3e14:	66 1f       	adc	r22, r22
    3e16:	77 1f       	adc	r23, r23
    3e18:	88 1f       	adc	r24, r24
    3e1a:	99 1f       	adc	r25, r25
    3e1c:	1a 94       	dec	r1
    3e1e:	69 f7       	brne	.-38     	; 0x3dfa <__udivmodsi4_loop>
    3e20:	60 95       	com	r22
    3e22:	70 95       	com	r23
    3e24:	80 95       	com	r24
    3e26:	90 95       	com	r25
    3e28:	9b 01       	movw	r18, r22
    3e2a:	ac 01       	movw	r20, r24
    3e2c:	bd 01       	movw	r22, r26
    3e2e:	cf 01       	movw	r24, r30
    3e30:	08 95       	ret

00003e32 <__tablejump2__>:
    3e32:	ee 0f       	add	r30, r30
    3e34:	ff 1f       	adc	r31, r31
    3e36:	88 1f       	adc	r24, r24
    3e38:	8b bf       	out	0x3b, r24	; 59
    3e3a:	07 90       	elpm	r0, Z+
    3e3c:	f6 91       	elpm	r31, Z
    3e3e:	e0 2d       	mov	r30, r0
    3e40:	1b be       	out	0x3b, r1	; 59
    3e42:	19 94       	eijmp

00003e44 <__muldi3>:
    3e44:	df 93       	push	r29
    3e46:	cf 93       	push	r28
    3e48:	1f 93       	push	r17
    3e4a:	0f 93       	push	r16
    3e4c:	9a 9d       	mul	r25, r10
    3e4e:	f0 2d       	mov	r31, r0
    3e50:	21 9f       	mul	r18, r17
    3e52:	f0 0d       	add	r31, r0
    3e54:	8b 9d       	mul	r24, r11
    3e56:	f0 0d       	add	r31, r0
    3e58:	8a 9d       	mul	r24, r10
    3e5a:	e0 2d       	mov	r30, r0
    3e5c:	f1 0d       	add	r31, r1
    3e5e:	03 9f       	mul	r16, r19
    3e60:	f0 0d       	add	r31, r0
    3e62:	02 9f       	mul	r16, r18
    3e64:	e0 0d       	add	r30, r0
    3e66:	f1 1d       	adc	r31, r1
    3e68:	4e 9d       	mul	r20, r14
    3e6a:	e0 0d       	add	r30, r0
    3e6c:	f1 1d       	adc	r31, r1
    3e6e:	5e 9d       	mul	r21, r14
    3e70:	f0 0d       	add	r31, r0
    3e72:	4f 9d       	mul	r20, r15
    3e74:	f0 0d       	add	r31, r0
    3e76:	7f 93       	push	r23
    3e78:	6f 93       	push	r22
    3e7a:	bf 92       	push	r11
    3e7c:	af 92       	push	r10
    3e7e:	5f 93       	push	r21
    3e80:	4f 93       	push	r20
    3e82:	d5 01       	movw	r26, r10
    3e84:	8e d0       	rcall	.+284    	; 0x3fa2 <__umulhisi3>
    3e86:	8b 01       	movw	r16, r22
    3e88:	ac 01       	movw	r20, r24
    3e8a:	d7 01       	movw	r26, r14
    3e8c:	8a d0       	rcall	.+276    	; 0x3fa2 <__umulhisi3>
    3e8e:	eb 01       	movw	r28, r22
    3e90:	e8 0f       	add	r30, r24
    3e92:	f9 1f       	adc	r31, r25
    3e94:	d6 01       	movw	r26, r12
    3e96:	1f d0       	rcall	.+62     	; 0x3ed6 <__muldi3_6>
    3e98:	2f 91       	pop	r18
    3e9a:	3f 91       	pop	r19
    3e9c:	d6 01       	movw	r26, r12
    3e9e:	81 d0       	rcall	.+258    	; 0x3fa2 <__umulhisi3>
    3ea0:	c6 0f       	add	r28, r22
    3ea2:	d7 1f       	adc	r29, r23
    3ea4:	e8 1f       	adc	r30, r24
    3ea6:	f9 1f       	adc	r31, r25
    3ea8:	af 91       	pop	r26
    3eaa:	bf 91       	pop	r27
    3eac:	14 d0       	rcall	.+40     	; 0x3ed6 <__muldi3_6>
    3eae:	2f 91       	pop	r18
    3eb0:	3f 91       	pop	r19
    3eb2:	77 d0       	rcall	.+238    	; 0x3fa2 <__umulhisi3>
    3eb4:	c6 0f       	add	r28, r22
    3eb6:	d7 1f       	adc	r29, r23
    3eb8:	e8 1f       	adc	r30, r24
    3eba:	f9 1f       	adc	r31, r25
    3ebc:	d6 01       	movw	r26, r12
    3ebe:	71 d0       	rcall	.+226    	; 0x3fa2 <__umulhisi3>
    3ec0:	e6 0f       	add	r30, r22
    3ec2:	f7 1f       	adc	r31, r23
    3ec4:	98 01       	movw	r18, r16
    3ec6:	be 01       	movw	r22, r28
    3ec8:	cf 01       	movw	r24, r30
    3eca:	11 24       	eor	r1, r1
    3ecc:	0f 91       	pop	r16
    3ece:	1f 91       	pop	r17
    3ed0:	cf 91       	pop	r28
    3ed2:	df 91       	pop	r29
    3ed4:	08 95       	ret

00003ed6 <__muldi3_6>:
    3ed6:	65 d0       	rcall	.+202    	; 0x3fa2 <__umulhisi3>
    3ed8:	46 0f       	add	r20, r22
    3eda:	57 1f       	adc	r21, r23
    3edc:	c8 1f       	adc	r28, r24
    3ede:	d9 1f       	adc	r29, r25
    3ee0:	08 f4       	brcc	.+2      	; 0x3ee4 <__muldi3_6+0xe>
    3ee2:	31 96       	adiw	r30, 0x01	; 1
    3ee4:	08 95       	ret

00003ee6 <__umoddi3>:
    3ee6:	68 94       	set
    3ee8:	01 c0       	rjmp	.+2      	; 0x3eec <__udivdi3_umoddi3>

00003eea <__udivdi3>:
    3eea:	e8 94       	clt

00003eec <__udivdi3_umoddi3>:
    3eec:	8f 92       	push	r8
    3eee:	9f 92       	push	r9
    3ef0:	cf 93       	push	r28
    3ef2:	df 93       	push	r29
    3ef4:	05 d0       	rcall	.+10     	; 0x3f00 <__udivmod64>
    3ef6:	df 91       	pop	r29
    3ef8:	cf 91       	pop	r28
    3efa:	9f 90       	pop	r9
    3efc:	8f 90       	pop	r8
    3efe:	08 95       	ret

00003f00 <__udivmod64>:
    3f00:	88 24       	eor	r8, r8
    3f02:	99 24       	eor	r9, r9
    3f04:	f4 01       	movw	r30, r8
    3f06:	e4 01       	movw	r28, r8
    3f08:	b0 e4       	ldi	r27, 0x40	; 64
    3f0a:	9f 93       	push	r25
    3f0c:	aa 27       	eor	r26, r26
    3f0e:	9a 15       	cp	r25, r10
    3f10:	8b 04       	cpc	r8, r11
    3f12:	9c 04       	cpc	r9, r12
    3f14:	ed 05       	cpc	r30, r13
    3f16:	fe 05       	cpc	r31, r14
    3f18:	cf 05       	cpc	r28, r15
    3f1a:	d0 07       	cpc	r29, r16
    3f1c:	a1 07       	cpc	r26, r17
    3f1e:	98 f4       	brcc	.+38     	; 0x3f46 <__udivmod64+0x46>
    3f20:	ad 2f       	mov	r26, r29
    3f22:	dc 2f       	mov	r29, r28
    3f24:	cf 2f       	mov	r28, r31
    3f26:	fe 2f       	mov	r31, r30
    3f28:	e9 2d       	mov	r30, r9
    3f2a:	98 2c       	mov	r9, r8
    3f2c:	89 2e       	mov	r8, r25
    3f2e:	98 2f       	mov	r25, r24
    3f30:	87 2f       	mov	r24, r23
    3f32:	76 2f       	mov	r23, r22
    3f34:	65 2f       	mov	r22, r21
    3f36:	54 2f       	mov	r21, r20
    3f38:	43 2f       	mov	r20, r19
    3f3a:	32 2f       	mov	r19, r18
    3f3c:	22 27       	eor	r18, r18
    3f3e:	b8 50       	subi	r27, 0x08	; 8
    3f40:	31 f7       	brne	.-52     	; 0x3f0e <__udivmod64+0xe>
    3f42:	bf 91       	pop	r27
    3f44:	27 c0       	rjmp	.+78     	; 0x3f94 <__udivmod64+0x94>
    3f46:	1b 2e       	mov	r1, r27
    3f48:	bf 91       	pop	r27
    3f4a:	bb 27       	eor	r27, r27
    3f4c:	22 0f       	add	r18, r18
    3f4e:	33 1f       	adc	r19, r19
    3f50:	44 1f       	adc	r20, r20
    3f52:	55 1f       	adc	r21, r21
    3f54:	66 1f       	adc	r22, r22
    3f56:	77 1f       	adc	r23, r23
    3f58:	88 1f       	adc	r24, r24
    3f5a:	99 1f       	adc	r25, r25
    3f5c:	88 1c       	adc	r8, r8
    3f5e:	99 1c       	adc	r9, r9
    3f60:	ee 1f       	adc	r30, r30
    3f62:	ff 1f       	adc	r31, r31
    3f64:	cc 1f       	adc	r28, r28
    3f66:	dd 1f       	adc	r29, r29
    3f68:	aa 1f       	adc	r26, r26
    3f6a:	bb 1f       	adc	r27, r27
    3f6c:	8a 14       	cp	r8, r10
    3f6e:	9b 04       	cpc	r9, r11
    3f70:	ec 05       	cpc	r30, r12
    3f72:	fd 05       	cpc	r31, r13
    3f74:	ce 05       	cpc	r28, r14
    3f76:	df 05       	cpc	r29, r15
    3f78:	a0 07       	cpc	r26, r16
    3f7a:	b1 07       	cpc	r27, r17
    3f7c:	48 f0       	brcs	.+18     	; 0x3f90 <__udivmod64+0x90>
    3f7e:	8a 18       	sub	r8, r10
    3f80:	9b 08       	sbc	r9, r11
    3f82:	ec 09       	sbc	r30, r12
    3f84:	fd 09       	sbc	r31, r13
    3f86:	ce 09       	sbc	r28, r14
    3f88:	df 09       	sbc	r29, r15
    3f8a:	a0 0b       	sbc	r26, r16
    3f8c:	b1 0b       	sbc	r27, r17
    3f8e:	21 60       	ori	r18, 0x01	; 1
    3f90:	1a 94       	dec	r1
    3f92:	e1 f6       	brne	.-72     	; 0x3f4c <__udivmod64+0x4c>
    3f94:	2e f4       	brtc	.+10     	; 0x3fa0 <__udivmod64+0xa0>
    3f96:	94 01       	movw	r18, r8
    3f98:	af 01       	movw	r20, r30
    3f9a:	be 01       	movw	r22, r28
    3f9c:	cd 01       	movw	r24, r26
    3f9e:	00 0c       	add	r0, r0
    3fa0:	08 95       	ret

00003fa2 <__umulhisi3>:
    3fa2:	a2 9f       	mul	r26, r18
    3fa4:	b0 01       	movw	r22, r0
    3fa6:	b3 9f       	mul	r27, r19
    3fa8:	c0 01       	movw	r24, r0
    3faa:	a3 9f       	mul	r26, r19
    3fac:	70 0d       	add	r23, r0
    3fae:	81 1d       	adc	r24, r1
    3fb0:	11 24       	eor	r1, r1
    3fb2:	91 1d       	adc	r25, r1
    3fb4:	b2 9f       	mul	r27, r18
    3fb6:	70 0d       	add	r23, r0
    3fb8:	81 1d       	adc	r24, r1
    3fba:	11 24       	eor	r1, r1
    3fbc:	91 1d       	adc	r25, r1
    3fbe:	08 95       	ret

00003fc0 <atoi>:
    3fc0:	fc 01       	movw	r30, r24
    3fc2:	88 27       	eor	r24, r24
    3fc4:	99 27       	eor	r25, r25
    3fc6:	e8 94       	clt
    3fc8:	21 91       	ld	r18, Z+
    3fca:	20 32       	cpi	r18, 0x20	; 32
    3fcc:	e9 f3       	breq	.-6      	; 0x3fc8 <atoi+0x8>
    3fce:	29 30       	cpi	r18, 0x09	; 9
    3fd0:	10 f0       	brcs	.+4      	; 0x3fd6 <atoi+0x16>
    3fd2:	2e 30       	cpi	r18, 0x0E	; 14
    3fd4:	c8 f3       	brcs	.-14     	; 0x3fc8 <atoi+0x8>
    3fd6:	2b 32       	cpi	r18, 0x2B	; 43
    3fd8:	39 f0       	breq	.+14     	; 0x3fe8 <atoi+0x28>
    3fda:	2d 32       	cpi	r18, 0x2D	; 45
    3fdc:	31 f4       	brne	.+12     	; 0x3fea <atoi+0x2a>
    3fde:	68 94       	set
    3fe0:	03 c0       	rjmp	.+6      	; 0x3fe8 <atoi+0x28>
    3fe2:	54 d0       	rcall	.+168    	; 0x408c <__mulhi_const_10>
    3fe4:	82 0f       	add	r24, r18
    3fe6:	91 1d       	adc	r25, r1
    3fe8:	21 91       	ld	r18, Z+
    3fea:	20 53       	subi	r18, 0x30	; 48
    3fec:	2a 30       	cpi	r18, 0x0A	; 10
    3fee:	c8 f3       	brcs	.-14     	; 0x3fe2 <atoi+0x22>
    3ff0:	1e f4       	brtc	.+6      	; 0x3ff8 <atoi+0x38>
    3ff2:	90 95       	com	r25
    3ff4:	81 95       	neg	r24
    3ff6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ff8:	08 95       	ret

00003ffa <memcpy>:
    3ffa:	fb 01       	movw	r30, r22
    3ffc:	dc 01       	movw	r26, r24
    3ffe:	02 c0       	rjmp	.+4      	; 0x4004 <__stack+0x5>
    4000:	01 90       	ld	r0, Z+
    4002:	0d 92       	st	X+, r0
    4004:	41 50       	subi	r20, 0x01	; 1
    4006:	50 40       	sbci	r21, 0x00	; 0
    4008:	d8 f7       	brcc	.-10     	; 0x4000 <__stack+0x1>
    400a:	08 95       	ret

0000400c <strcat>:
    400c:	fb 01       	movw	r30, r22
    400e:	dc 01       	movw	r26, r24
    4010:	0d 90       	ld	r0, X+
    4012:	00 20       	and	r0, r0
    4014:	e9 f7       	brne	.-6      	; 0x4010 <strcat+0x4>
    4016:	11 97       	sbiw	r26, 0x01	; 1
    4018:	01 90       	ld	r0, Z+
    401a:	0d 92       	st	X+, r0
    401c:	00 20       	and	r0, r0
    401e:	e1 f7       	brne	.-8      	; 0x4018 <strcat+0xc>
    4020:	08 95       	ret

00004022 <strcpy>:
    4022:	fb 01       	movw	r30, r22
    4024:	dc 01       	movw	r26, r24
    4026:	01 90       	ld	r0, Z+
    4028:	0d 92       	st	X+, r0
    402a:	00 20       	and	r0, r0
    402c:	e1 f7       	brne	.-8      	; 0x4026 <strcpy+0x4>
    402e:	08 95       	ret

00004030 <strstr>:
    4030:	fb 01       	movw	r30, r22
    4032:	51 91       	ld	r21, Z+
    4034:	55 23       	and	r21, r21
    4036:	a9 f0       	breq	.+42     	; 0x4062 <strstr+0x32>
    4038:	bf 01       	movw	r22, r30
    403a:	dc 01       	movw	r26, r24
    403c:	4d 91       	ld	r20, X+
    403e:	45 17       	cp	r20, r21
    4040:	41 11       	cpse	r20, r1
    4042:	e1 f7       	brne	.-8      	; 0x403c <strstr+0xc>
    4044:	59 f4       	brne	.+22     	; 0x405c <strstr+0x2c>
    4046:	cd 01       	movw	r24, r26
    4048:	01 90       	ld	r0, Z+
    404a:	00 20       	and	r0, r0
    404c:	49 f0       	breq	.+18     	; 0x4060 <strstr+0x30>
    404e:	4d 91       	ld	r20, X+
    4050:	40 15       	cp	r20, r0
    4052:	41 11       	cpse	r20, r1
    4054:	c9 f3       	breq	.-14     	; 0x4048 <strstr+0x18>
    4056:	fb 01       	movw	r30, r22
    4058:	41 11       	cpse	r20, r1
    405a:	ef cf       	rjmp	.-34     	; 0x403a <strstr+0xa>
    405c:	81 e0       	ldi	r24, 0x01	; 1
    405e:	90 e0       	ldi	r25, 0x00	; 0
    4060:	01 97       	sbiw	r24, 0x01	; 1
    4062:	08 95       	ret

00004064 <itoa>:
    4064:	45 32       	cpi	r20, 0x25	; 37
    4066:	51 05       	cpc	r21, r1
    4068:	18 f4       	brcc	.+6      	; 0x4070 <itoa+0xc>
    406a:	42 30       	cpi	r20, 0x02	; 2
    406c:	08 f0       	brcs	.+2      	; 0x4070 <itoa+0xc>
    406e:	04 c0       	rjmp	.+8      	; 0x4078 <__itoa_ncheck>
    4070:	fb 01       	movw	r30, r22
    4072:	10 82       	st	Z, r1
    4074:	cb 01       	movw	r24, r22
    4076:	08 95       	ret

00004078 <__itoa_ncheck>:
    4078:	bb 27       	eor	r27, r27
    407a:	4a 30       	cpi	r20, 0x0A	; 10
    407c:	31 f4       	brne	.+12     	; 0x408a <__itoa_ncheck+0x12>
    407e:	99 23       	and	r25, r25
    4080:	22 f4       	brpl	.+8      	; 0x408a <__itoa_ncheck+0x12>
    4082:	bd e2       	ldi	r27, 0x2D	; 45
    4084:	90 95       	com	r25
    4086:	81 95       	neg	r24
    4088:	9f 4f       	sbci	r25, 0xFF	; 255
    408a:	09 c0       	rjmp	.+18     	; 0x409e <__utoa_common>

0000408c <__mulhi_const_10>:
    408c:	7a e0       	ldi	r23, 0x0A	; 10
    408e:	97 9f       	mul	r25, r23
    4090:	90 2d       	mov	r25, r0
    4092:	87 9f       	mul	r24, r23
    4094:	80 2d       	mov	r24, r0
    4096:	91 0d       	add	r25, r1
    4098:	11 24       	eor	r1, r1
    409a:	08 95       	ret

0000409c <__utoa_ncheck>:
    409c:	bb 27       	eor	r27, r27

0000409e <__utoa_common>:
    409e:	fb 01       	movw	r30, r22
    40a0:	55 27       	eor	r21, r21
    40a2:	aa 27       	eor	r26, r26
    40a4:	88 0f       	add	r24, r24
    40a6:	99 1f       	adc	r25, r25
    40a8:	aa 1f       	adc	r26, r26
    40aa:	a4 17       	cp	r26, r20
    40ac:	10 f0       	brcs	.+4      	; 0x40b2 <__utoa_common+0x14>
    40ae:	a4 1b       	sub	r26, r20
    40b0:	83 95       	inc	r24
    40b2:	50 51       	subi	r21, 0x10	; 16
    40b4:	b9 f7       	brne	.-18     	; 0x40a4 <__utoa_common+0x6>
    40b6:	a0 5d       	subi	r26, 0xD0	; 208
    40b8:	aa 33       	cpi	r26, 0x3A	; 58
    40ba:	08 f0       	brcs	.+2      	; 0x40be <__utoa_common+0x20>
    40bc:	a9 5d       	subi	r26, 0xD9	; 217
    40be:	a1 93       	st	Z+, r26
    40c0:	00 97       	sbiw	r24, 0x00	; 0
    40c2:	79 f7       	brne	.-34     	; 0x40a2 <__utoa_common+0x4>
    40c4:	b1 11       	cpse	r27, r1
    40c6:	b1 93       	st	Z+, r27
    40c8:	11 92       	st	Z+, r1
    40ca:	cb 01       	movw	r24, r22
    40cc:	00 c0       	rjmp	.+0      	; 0x40ce <strrev>

000040ce <strrev>:
    40ce:	dc 01       	movw	r26, r24
    40d0:	fc 01       	movw	r30, r24
    40d2:	67 2f       	mov	r22, r23
    40d4:	71 91       	ld	r23, Z+
    40d6:	77 23       	and	r23, r23
    40d8:	e1 f7       	brne	.-8      	; 0x40d2 <strrev+0x4>
    40da:	32 97       	sbiw	r30, 0x02	; 2
    40dc:	04 c0       	rjmp	.+8      	; 0x40e6 <strrev+0x18>
    40de:	7c 91       	ld	r23, X
    40e0:	6d 93       	st	X+, r22
    40e2:	70 83       	st	Z, r23
    40e4:	62 91       	ld	r22, -Z
    40e6:	ae 17       	cp	r26, r30
    40e8:	bf 07       	cpc	r27, r31
    40ea:	c8 f3       	brcs	.-14     	; 0x40de <strrev+0x10>
    40ec:	08 95       	ret

000040ee <_exit>:
    40ee:	f8 94       	cli

000040f0 <__stop_program>:
    40f0:	ff cf       	rjmp	.-2      	; 0x40f0 <__stop_program>
