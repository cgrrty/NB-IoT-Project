
USART_SIM900.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c2  00802000  00001d22  00001db6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000095  008020c2  008020c2  00001e78  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e78  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ed4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  00001f18  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d228  00000000  00000000  000021b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004f0a  00000000  00000000  0000f3d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004a22  00000000  00000000  000142e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000aa8  00000000  00000000  00018d04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00035428  00000000  00000000  000197ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000035bc  00000000  00000000  0004ebd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000288  00000000  00000000  00052190  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000befd  00000000  00000000  00052418  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	21 c1       	rjmp	.+578    	; 0x248 <__bad_interrupt>
       6:	00 00       	nop
       8:	1f c1       	rjmp	.+574    	; 0x248 <__bad_interrupt>
       a:	00 00       	nop
       c:	1d c1       	rjmp	.+570    	; 0x248 <__bad_interrupt>
       e:	00 00       	nop
      10:	1b c1       	rjmp	.+566    	; 0x248 <__bad_interrupt>
      12:	00 00       	nop
      14:	19 c1       	rjmp	.+562    	; 0x248 <__bad_interrupt>
      16:	00 00       	nop
      18:	17 c1       	rjmp	.+558    	; 0x248 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	15 c1       	rjmp	.+554    	; 0x248 <__bad_interrupt>
      1e:	00 00       	nop
      20:	13 c1       	rjmp	.+550    	; 0x248 <__bad_interrupt>
      22:	00 00       	nop
      24:	11 c1       	rjmp	.+546    	; 0x248 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <__vector_10>
      2c:	0d c1       	rjmp	.+538    	; 0x248 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0b c1       	rjmp	.+534    	; 0x248 <__bad_interrupt>
      32:	00 00       	nop
      34:	09 c1       	rjmp	.+530    	; 0x248 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 d7 09 	jmp	0x13ae	; 0x13ae <__vector_14>
      3c:	05 c1       	rjmp	.+522    	; 0x248 <__bad_interrupt>
      3e:	00 00       	nop
      40:	03 c1       	rjmp	.+518    	; 0x248 <__bad_interrupt>
      42:	00 00       	nop
      44:	01 c1       	rjmp	.+514    	; 0x248 <__bad_interrupt>
      46:	00 00       	nop
      48:	ff c0       	rjmp	.+510    	; 0x248 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fd c0       	rjmp	.+506    	; 0x248 <__bad_interrupt>
      4e:	00 00       	nop
      50:	fb c0       	rjmp	.+502    	; 0x248 <__bad_interrupt>
      52:	00 00       	nop
      54:	f9 c0       	rjmp	.+498    	; 0x248 <__bad_interrupt>
      56:	00 00       	nop
      58:	f7 c0       	rjmp	.+494    	; 0x248 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f5 c0       	rjmp	.+490    	; 0x248 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f3 c0       	rjmp	.+486    	; 0x248 <__bad_interrupt>
      62:	00 00       	nop
      64:	f1 c0       	rjmp	.+482    	; 0x248 <__bad_interrupt>
      66:	00 00       	nop
      68:	ef c0       	rjmp	.+478    	; 0x248 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ed c0       	rjmp	.+474    	; 0x248 <__bad_interrupt>
      6e:	00 00       	nop
      70:	eb c0       	rjmp	.+470    	; 0x248 <__bad_interrupt>
      72:	00 00       	nop
      74:	e9 c0       	rjmp	.+466    	; 0x248 <__bad_interrupt>
      76:	00 00       	nop
      78:	e7 c0       	rjmp	.+462    	; 0x248 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e5 c0       	rjmp	.+458    	; 0x248 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e3 c0       	rjmp	.+454    	; 0x248 <__bad_interrupt>
      82:	00 00       	nop
      84:	e1 c0       	rjmp	.+450    	; 0x248 <__bad_interrupt>
      86:	00 00       	nop
      88:	df c0       	rjmp	.+446    	; 0x248 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dd c0       	rjmp	.+442    	; 0x248 <__bad_interrupt>
      8e:	00 00       	nop
      90:	db c0       	rjmp	.+438    	; 0x248 <__bad_interrupt>
      92:	00 00       	nop
      94:	d9 c0       	rjmp	.+434    	; 0x248 <__bad_interrupt>
      96:	00 00       	nop
      98:	d7 c0       	rjmp	.+430    	; 0x248 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	32 c2       	rjmp	.+1124   	; 0x502 <__vector_39>
      9e:	00 00       	nop
      a0:	6d c2       	rjmp	.+1242   	; 0x57c <__vector_40>
      a2:	00 00       	nop
      a4:	a8 c2       	rjmp	.+1360   	; 0x5f6 <__vector_41>
      a6:	00 00       	nop
      a8:	e3 c2       	rjmp	.+1478   	; 0x670 <__vector_42>
      aa:	00 00       	nop
      ac:	cd c0       	rjmp	.+410    	; 0x248 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cb c0       	rjmp	.+406    	; 0x248 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c9 c0       	rjmp	.+402    	; 0x248 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c7 c0       	rjmp	.+398    	; 0x248 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c5 c0       	rjmp	.+394    	; 0x248 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c3 c0       	rjmp	.+390    	; 0x248 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c1 c0       	rjmp	.+386    	; 0x248 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	bf c0       	rjmp	.+382    	; 0x248 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bd c0       	rjmp	.+378    	; 0x248 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	bb c0       	rjmp	.+374    	; 0x248 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b9 c0       	rjmp	.+370    	; 0x248 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b7 c0       	rjmp	.+366    	; 0x248 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b5 c0       	rjmp	.+362    	; 0x248 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b3 c0       	rjmp	.+358    	; 0x248 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b1 c0       	rjmp	.+354    	; 0x248 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	af c0       	rjmp	.+350    	; 0x248 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ad c0       	rjmp	.+346    	; 0x248 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ab c0       	rjmp	.+342    	; 0x248 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a9 c0       	rjmp	.+338    	; 0x248 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a7 c0       	rjmp	.+334    	; 0x248 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a5 c0       	rjmp	.+330    	; 0x248 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a3 c0       	rjmp	.+326    	; 0x248 <__bad_interrupt>
     102:	00 00       	nop
     104:	a1 c0       	rjmp	.+322    	; 0x248 <__bad_interrupt>
     106:	00 00       	nop
     108:	9f c0       	rjmp	.+318    	; 0x248 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9d c0       	rjmp	.+314    	; 0x248 <__bad_interrupt>
     10e:	00 00       	nop
     110:	9b c0       	rjmp	.+310    	; 0x248 <__bad_interrupt>
     112:	00 00       	nop
     114:	99 c0       	rjmp	.+306    	; 0x248 <__bad_interrupt>
     116:	00 00       	nop
     118:	97 c0       	rjmp	.+302    	; 0x248 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	fe c0       	rjmp	.+508    	; 0x31a <__vector_71>
     11e:	00 00       	nop
     120:	39 c1       	rjmp	.+626    	; 0x394 <__vector_72>
     122:	00 00       	nop
     124:	74 c1       	rjmp	.+744    	; 0x40e <__vector_73>
     126:	00 00       	nop
     128:	af c1       	rjmp	.+862    	; 0x488 <__vector_74>
     12a:	00 00       	nop
     12c:	8d c0       	rjmp	.+282    	; 0x248 <__bad_interrupt>
     12e:	00 00       	nop
     130:	8b c0       	rjmp	.+278    	; 0x248 <__bad_interrupt>
     132:	00 00       	nop
     134:	89 c0       	rjmp	.+274    	; 0x248 <__bad_interrupt>
     136:	00 00       	nop
     138:	87 c0       	rjmp	.+270    	; 0x248 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	85 c0       	rjmp	.+266    	; 0x248 <__bad_interrupt>
     13e:	00 00       	nop
     140:	83 c0       	rjmp	.+262    	; 0x248 <__bad_interrupt>
     142:	00 00       	nop
     144:	81 c0       	rjmp	.+258    	; 0x248 <__bad_interrupt>
     146:	00 00       	nop
     148:	7f c0       	rjmp	.+254    	; 0x248 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7d c0       	rjmp	.+250    	; 0x248 <__bad_interrupt>
     14e:	00 00       	nop
     150:	7b c0       	rjmp	.+246    	; 0x248 <__bad_interrupt>
     152:	00 00       	nop
     154:	79 c0       	rjmp	.+242    	; 0x248 <__bad_interrupt>
     156:	00 00       	nop
     158:	77 c0       	rjmp	.+238    	; 0x248 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	75 c0       	rjmp	.+234    	; 0x248 <__bad_interrupt>
     15e:	00 00       	nop
     160:	73 c0       	rjmp	.+230    	; 0x248 <__bad_interrupt>
     162:	00 00       	nop
     164:	71 c0       	rjmp	.+226    	; 0x248 <__bad_interrupt>
     166:	00 00       	nop
     168:	6f c0       	rjmp	.+222    	; 0x248 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6d c0       	rjmp	.+218    	; 0x248 <__bad_interrupt>
     16e:	00 00       	nop
     170:	6b c0       	rjmp	.+214    	; 0x248 <__bad_interrupt>
     172:	00 00       	nop
     174:	69 c0       	rjmp	.+210    	; 0x248 <__bad_interrupt>
     176:	00 00       	nop
     178:	67 c0       	rjmp	.+206    	; 0x248 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	65 c0       	rjmp	.+202    	; 0x248 <__bad_interrupt>
     17e:	00 00       	nop
     180:	63 c0       	rjmp	.+198    	; 0x248 <__bad_interrupt>
     182:	00 00       	nop
     184:	61 c0       	rjmp	.+194    	; 0x248 <__bad_interrupt>
     186:	00 00       	nop
     188:	5f c0       	rjmp	.+190    	; 0x248 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5d c0       	rjmp	.+186    	; 0x248 <__bad_interrupt>
     18e:	00 00       	nop
     190:	5b c0       	rjmp	.+182    	; 0x248 <__bad_interrupt>
     192:	00 00       	nop
     194:	59 c0       	rjmp	.+178    	; 0x248 <__bad_interrupt>
     196:	00 00       	nop
     198:	57 c0       	rjmp	.+174    	; 0x248 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	55 c0       	rjmp	.+170    	; 0x248 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	53 c0       	rjmp	.+166    	; 0x248 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	51 c0       	rjmp	.+162    	; 0x248 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4f c0       	rjmp	.+158    	; 0x248 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4d c0       	rjmp	.+154    	; 0x248 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	4b c0       	rjmp	.+150    	; 0x248 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	49 c0       	rjmp	.+146    	; 0x248 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	47 c0       	rjmp	.+142    	; 0x248 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	45 c0       	rjmp	.+138    	; 0x248 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	43 c0       	rjmp	.+134    	; 0x248 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	41 c0       	rjmp	.+130    	; 0x248 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3f c0       	rjmp	.+126    	; 0x248 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3d c0       	rjmp	.+122    	; 0x248 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	3b c0       	rjmp	.+118    	; 0x248 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	39 c0       	rjmp	.+114    	; 0x248 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	37 c0       	rjmp	.+110    	; 0x248 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	35 c0       	rjmp	.+106    	; 0x248 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	33 c0       	rjmp	.+102    	; 0x248 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	31 c0       	rjmp	.+98     	; 0x248 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2f c0       	rjmp	.+94     	; 0x248 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2d c0       	rjmp	.+90     	; 0x248 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2b c0       	rjmp	.+86     	; 0x248 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	29 c0       	rjmp	.+82     	; 0x248 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	27 c0       	rjmp	.+78     	; 0x248 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	e2 e2       	ldi	r30, 0x22	; 34
     21c:	fd e1       	ldi	r31, 0x1D	; 29
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a2 3c       	cpi	r26, 0xC2	; 194
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	21 e2       	ldi	r18, 0x21	; 33
     232:	a2 ec       	ldi	r26, 0xC2	; 194
     234:	b0 e2       	ldi	r27, 0x20	; 32
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	a7 35       	cpi	r26, 0x57	; 87
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	0e 94 9c 0a 	call	0x1538	; 0x1538 <main>
     244:	0c 94 8f 0e 	jmp	0x1d1e	; 0x1d1e <_exit>

00000248 <__bad_interrupt>:
     248:	db ce       	rjmp	.-586    	; 0x0 <__vectors>

0000024a <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     24a:	81 15       	cp	r24, r1
     24c:	22 e0       	ldi	r18, 0x02	; 2
     24e:	92 07       	cpc	r25, r18
     250:	61 f4       	brne	.+24     	; 0x26a <adc_enable_clock+0x20>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     252:	80 91 c3 20 	lds	r24, 0x20C3	; 0x8020c3 <adca_enable_count>
     256:	91 e0       	ldi	r25, 0x01	; 1
     258:	98 0f       	add	r25, r24
     25a:	90 93 c3 20 	sts	0x20C3, r25	; 0x8020c3 <adca_enable_count>
     25e:	81 11       	cpse	r24, r1
     260:	12 c0       	rjmp	.+36     	; 0x286 <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     262:	62 e0       	ldi	r22, 0x02	; 2
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	76 c3       	rjmp	.+1772   	; 0x954 <sysclk_enable_module>
     268:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     26a:	80 34       	cpi	r24, 0x40	; 64
     26c:	92 40       	sbci	r25, 0x02	; 2
     26e:	59 f4       	brne	.+22     	; 0x286 <adc_enable_clock+0x3c>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     270:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <__data_end>
     274:	91 e0       	ldi	r25, 0x01	; 1
     276:	98 0f       	add	r25, r24
     278:	90 93 c2 20 	sts	0x20C2, r25	; 0x8020c2 <__data_end>
     27c:	81 11       	cpse	r24, r1
     27e:	03 c0       	rjmp	.+6      	; 0x286 <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     280:	62 e0       	ldi	r22, 0x02	; 2
     282:	82 e0       	ldi	r24, 0x02	; 2
     284:	67 c3       	rjmp	.+1742   	; 0x954 <sysclk_enable_module>
     286:	08 95       	ret

00000288 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     288:	81 15       	cp	r24, r1
     28a:	22 e0       	ldi	r18, 0x02	; 2
     28c:	92 07       	cpc	r25, r18
     28e:	59 f4       	brne	.+22     	; 0x2a6 <adc_disable_clock+0x1e>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     290:	80 91 c3 20 	lds	r24, 0x20C3	; 0x8020c3 <adca_enable_count>
     294:	81 50       	subi	r24, 0x01	; 1
     296:	80 93 c3 20 	sts	0x20C3, r24	; 0x8020c3 <adca_enable_count>
     29a:	81 11       	cpse	r24, r1
     29c:	11 c0       	rjmp	.+34     	; 0x2c0 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     29e:	62 e0       	ldi	r22, 0x02	; 2
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	6e c3       	rjmp	.+1756   	; 0x980 <sysclk_disable_module>
     2a4:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     2a6:	80 34       	cpi	r24, 0x40	; 64
     2a8:	92 40       	sbci	r25, 0x02	; 2
     2aa:	51 f4       	brne	.+20     	; 0x2c0 <adc_disable_clock+0x38>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     2ac:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <__data_end>
     2b0:	81 50       	subi	r24, 0x01	; 1
     2b2:	80 93 c2 20 	sts	0x20C2, r24	; 0x8020c2 <__data_end>
     2b6:	81 11       	cpse	r24, r1
     2b8:	03 c0       	rjmp	.+6      	; 0x2c0 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     2ba:	62 e0       	ldi	r22, 0x02	; 2
     2bc:	82 e0       	ldi	r24, 0x02	; 2
     2be:	60 c3       	rjmp	.+1728   	; 0x980 <sysclk_disable_module>
     2c0:	08 95       	ret

000002c2 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     2c2:	ef 92       	push	r14
     2c4:	ff 92       	push	r15
     2c6:	1f 93       	push	r17
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	1f 92       	push	r1
     2ce:	1f 92       	push	r1
     2d0:	cd b7       	in	r28, 0x3d	; 61
     2d2:	de b7       	in	r29, 0x3e	; 62
     2d4:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     2d6:	8f b7       	in	r24, 0x3f	; 63
     2d8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     2da:	f8 94       	cli
	return flags;
     2dc:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     2de:	c7 01       	movw	r24, r14
     2e0:	b4 df       	rcall	.-152    	; 0x24a <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     2e2:	f7 01       	movw	r30, r14
     2e4:	80 81       	ld	r24, Z
     2e6:	81 60       	ori	r24, 0x01	; 1
     2e8:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     2ea:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     2ec:	80 91 36 21 	lds	r24, 0x2136	; 0x802136 <sleepmgr_locks+0x1>
     2f0:	8f 3f       	cpi	r24, 0xFF	; 255
     2f2:	09 f4       	brne	.+2      	; 0x2f6 <adc_enable+0x34>
     2f4:	ff cf       	rjmp	.-2      	; 0x2f4 <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     2f6:	8f b7       	in	r24, 0x3f	; 63
     2f8:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     2fa:	f8 94       	cli
	return flags;
     2fc:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     2fe:	e5 e3       	ldi	r30, 0x35	; 53
     300:	f1 e2       	ldi	r31, 0x21	; 33
     302:	81 81       	ldd	r24, Z+1	; 0x01
     304:	8f 5f       	subi	r24, 0xFF	; 255
     306:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     308:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     30a:	0f 90       	pop	r0
     30c:	0f 90       	pop	r0
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	1f 91       	pop	r17
     314:	ff 90       	pop	r15
     316:	ef 90       	pop	r14
     318:	08 95       	ret

0000031a <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     31a:	1f 92       	push	r1
     31c:	0f 92       	push	r0
     31e:	0f b6       	in	r0, 0x3f	; 63
     320:	0f 92       	push	r0
     322:	11 24       	eor	r1, r1
     324:	08 b6       	in	r0, 0x38	; 56
     326:	0f 92       	push	r0
     328:	18 be       	out	0x38, r1	; 56
     32a:	09 b6       	in	r0, 0x39	; 57
     32c:	0f 92       	push	r0
     32e:	19 be       	out	0x39, r1	; 57
     330:	0b b6       	in	r0, 0x3b	; 59
     332:	0f 92       	push	r0
     334:	1b be       	out	0x3b, r1	; 59
     336:	2f 93       	push	r18
     338:	3f 93       	push	r19
     33a:	4f 93       	push	r20
     33c:	5f 93       	push	r21
     33e:	6f 93       	push	r22
     340:	7f 93       	push	r23
     342:	8f 93       	push	r24
     344:	9f 93       	push	r25
     346:	af 93       	push	r26
     348:	bf 93       	push	r27
     34a:	ef 93       	push	r30
     34c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     34e:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     352:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     356:	e0 91 3d 21 	lds	r30, 0x213D	; 0x80213d <adca_callback>
     35a:	f0 91 3e 21 	lds	r31, 0x213E	; 0x80213e <adca_callback+0x1>
     35e:	61 e0       	ldi	r22, 0x01	; 1
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	92 e0       	ldi	r25, 0x02	; 2
     364:	19 95       	eicall
}
     366:	ff 91       	pop	r31
     368:	ef 91       	pop	r30
     36a:	bf 91       	pop	r27
     36c:	af 91       	pop	r26
     36e:	9f 91       	pop	r25
     370:	8f 91       	pop	r24
     372:	7f 91       	pop	r23
     374:	6f 91       	pop	r22
     376:	5f 91       	pop	r21
     378:	4f 91       	pop	r20
     37a:	3f 91       	pop	r19
     37c:	2f 91       	pop	r18
     37e:	0f 90       	pop	r0
     380:	0b be       	out	0x3b, r0	; 59
     382:	0f 90       	pop	r0
     384:	09 be       	out	0x39, r0	; 57
     386:	0f 90       	pop	r0
     388:	08 be       	out	0x38, r0	; 56
     38a:	0f 90       	pop	r0
     38c:	0f be       	out	0x3f, r0	; 63
     38e:	0f 90       	pop	r0
     390:	1f 90       	pop	r1
     392:	18 95       	reti

00000394 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     394:	1f 92       	push	r1
     396:	0f 92       	push	r0
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	0f 92       	push	r0
     39c:	11 24       	eor	r1, r1
     39e:	08 b6       	in	r0, 0x38	; 56
     3a0:	0f 92       	push	r0
     3a2:	18 be       	out	0x38, r1	; 56
     3a4:	09 b6       	in	r0, 0x39	; 57
     3a6:	0f 92       	push	r0
     3a8:	19 be       	out	0x39, r1	; 57
     3aa:	0b b6       	in	r0, 0x3b	; 59
     3ac:	0f 92       	push	r0
     3ae:	1b be       	out	0x3b, r1	; 59
     3b0:	2f 93       	push	r18
     3b2:	3f 93       	push	r19
     3b4:	4f 93       	push	r20
     3b6:	5f 93       	push	r21
     3b8:	6f 93       	push	r22
     3ba:	7f 93       	push	r23
     3bc:	8f 93       	push	r24
     3be:	9f 93       	push	r25
     3c0:	af 93       	push	r26
     3c2:	bf 93       	push	r27
     3c4:	ef 93       	push	r30
     3c6:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     3c8:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     3cc:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     3d0:	e0 91 3d 21 	lds	r30, 0x213D	; 0x80213d <adca_callback>
     3d4:	f0 91 3e 21 	lds	r31, 0x213E	; 0x80213e <adca_callback+0x1>
     3d8:	62 e0       	ldi	r22, 0x02	; 2
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	92 e0       	ldi	r25, 0x02	; 2
     3de:	19 95       	eicall
}
     3e0:	ff 91       	pop	r31
     3e2:	ef 91       	pop	r30
     3e4:	bf 91       	pop	r27
     3e6:	af 91       	pop	r26
     3e8:	9f 91       	pop	r25
     3ea:	8f 91       	pop	r24
     3ec:	7f 91       	pop	r23
     3ee:	6f 91       	pop	r22
     3f0:	5f 91       	pop	r21
     3f2:	4f 91       	pop	r20
     3f4:	3f 91       	pop	r19
     3f6:	2f 91       	pop	r18
     3f8:	0f 90       	pop	r0
     3fa:	0b be       	out	0x3b, r0	; 59
     3fc:	0f 90       	pop	r0
     3fe:	09 be       	out	0x39, r0	; 57
     400:	0f 90       	pop	r0
     402:	08 be       	out	0x38, r0	; 56
     404:	0f 90       	pop	r0
     406:	0f be       	out	0x3f, r0	; 63
     408:	0f 90       	pop	r0
     40a:	1f 90       	pop	r1
     40c:	18 95       	reti

0000040e <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     40e:	1f 92       	push	r1
     410:	0f 92       	push	r0
     412:	0f b6       	in	r0, 0x3f	; 63
     414:	0f 92       	push	r0
     416:	11 24       	eor	r1, r1
     418:	08 b6       	in	r0, 0x38	; 56
     41a:	0f 92       	push	r0
     41c:	18 be       	out	0x38, r1	; 56
     41e:	09 b6       	in	r0, 0x39	; 57
     420:	0f 92       	push	r0
     422:	19 be       	out	0x39, r1	; 57
     424:	0b b6       	in	r0, 0x3b	; 59
     426:	0f 92       	push	r0
     428:	1b be       	out	0x3b, r1	; 59
     42a:	2f 93       	push	r18
     42c:	3f 93       	push	r19
     42e:	4f 93       	push	r20
     430:	5f 93       	push	r21
     432:	6f 93       	push	r22
     434:	7f 93       	push	r23
     436:	8f 93       	push	r24
     438:	9f 93       	push	r25
     43a:	af 93       	push	r26
     43c:	bf 93       	push	r27
     43e:	ef 93       	push	r30
     440:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     442:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     446:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     44a:	e0 91 3d 21 	lds	r30, 0x213D	; 0x80213d <adca_callback>
     44e:	f0 91 3e 21 	lds	r31, 0x213E	; 0x80213e <adca_callback+0x1>
     452:	64 e0       	ldi	r22, 0x04	; 4
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	92 e0       	ldi	r25, 0x02	; 2
     458:	19 95       	eicall
}
     45a:	ff 91       	pop	r31
     45c:	ef 91       	pop	r30
     45e:	bf 91       	pop	r27
     460:	af 91       	pop	r26
     462:	9f 91       	pop	r25
     464:	8f 91       	pop	r24
     466:	7f 91       	pop	r23
     468:	6f 91       	pop	r22
     46a:	5f 91       	pop	r21
     46c:	4f 91       	pop	r20
     46e:	3f 91       	pop	r19
     470:	2f 91       	pop	r18
     472:	0f 90       	pop	r0
     474:	0b be       	out	0x3b, r0	; 59
     476:	0f 90       	pop	r0
     478:	09 be       	out	0x39, r0	; 57
     47a:	0f 90       	pop	r0
     47c:	08 be       	out	0x38, r0	; 56
     47e:	0f 90       	pop	r0
     480:	0f be       	out	0x3f, r0	; 63
     482:	0f 90       	pop	r0
     484:	1f 90       	pop	r1
     486:	18 95       	reti

00000488 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     488:	1f 92       	push	r1
     48a:	0f 92       	push	r0
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	0f 92       	push	r0
     490:	11 24       	eor	r1, r1
     492:	08 b6       	in	r0, 0x38	; 56
     494:	0f 92       	push	r0
     496:	18 be       	out	0x38, r1	; 56
     498:	09 b6       	in	r0, 0x39	; 57
     49a:	0f 92       	push	r0
     49c:	19 be       	out	0x39, r1	; 57
     49e:	0b b6       	in	r0, 0x3b	; 59
     4a0:	0f 92       	push	r0
     4a2:	1b be       	out	0x3b, r1	; 59
     4a4:	2f 93       	push	r18
     4a6:	3f 93       	push	r19
     4a8:	4f 93       	push	r20
     4aa:	5f 93       	push	r21
     4ac:	6f 93       	push	r22
     4ae:	7f 93       	push	r23
     4b0:	8f 93       	push	r24
     4b2:	9f 93       	push	r25
     4b4:	af 93       	push	r26
     4b6:	bf 93       	push	r27
     4b8:	ef 93       	push	r30
     4ba:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     4bc:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     4c0:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     4c4:	e0 91 3d 21 	lds	r30, 0x213D	; 0x80213d <adca_callback>
     4c8:	f0 91 3e 21 	lds	r31, 0x213E	; 0x80213e <adca_callback+0x1>
     4cc:	68 e0       	ldi	r22, 0x08	; 8
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	92 e0       	ldi	r25, 0x02	; 2
     4d2:	19 95       	eicall
}
     4d4:	ff 91       	pop	r31
     4d6:	ef 91       	pop	r30
     4d8:	bf 91       	pop	r27
     4da:	af 91       	pop	r26
     4dc:	9f 91       	pop	r25
     4de:	8f 91       	pop	r24
     4e0:	7f 91       	pop	r23
     4e2:	6f 91       	pop	r22
     4e4:	5f 91       	pop	r21
     4e6:	4f 91       	pop	r20
     4e8:	3f 91       	pop	r19
     4ea:	2f 91       	pop	r18
     4ec:	0f 90       	pop	r0
     4ee:	0b be       	out	0x3b, r0	; 59
     4f0:	0f 90       	pop	r0
     4f2:	09 be       	out	0x39, r0	; 57
     4f4:	0f 90       	pop	r0
     4f6:	08 be       	out	0x38, r0	; 56
     4f8:	0f 90       	pop	r0
     4fa:	0f be       	out	0x3f, r0	; 63
     4fc:	0f 90       	pop	r0
     4fe:	1f 90       	pop	r1
     500:	18 95       	reti

00000502 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     502:	1f 92       	push	r1
     504:	0f 92       	push	r0
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	0f 92       	push	r0
     50a:	11 24       	eor	r1, r1
     50c:	08 b6       	in	r0, 0x38	; 56
     50e:	0f 92       	push	r0
     510:	18 be       	out	0x38, r1	; 56
     512:	09 b6       	in	r0, 0x39	; 57
     514:	0f 92       	push	r0
     516:	19 be       	out	0x39, r1	; 57
     518:	0b b6       	in	r0, 0x3b	; 59
     51a:	0f 92       	push	r0
     51c:	1b be       	out	0x3b, r1	; 59
     51e:	2f 93       	push	r18
     520:	3f 93       	push	r19
     522:	4f 93       	push	r20
     524:	5f 93       	push	r21
     526:	6f 93       	push	r22
     528:	7f 93       	push	r23
     52a:	8f 93       	push	r24
     52c:	9f 93       	push	r25
     52e:	af 93       	push	r26
     530:	bf 93       	push	r27
     532:	ef 93       	push	r30
     534:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     536:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     53a:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     53e:	e0 91 3b 21 	lds	r30, 0x213B	; 0x80213b <adcb_callback>
     542:	f0 91 3c 21 	lds	r31, 0x213C	; 0x80213c <adcb_callback+0x1>
     546:	61 e0       	ldi	r22, 0x01	; 1
     548:	80 e4       	ldi	r24, 0x40	; 64
     54a:	92 e0       	ldi	r25, 0x02	; 2
     54c:	19 95       	eicall
}
     54e:	ff 91       	pop	r31
     550:	ef 91       	pop	r30
     552:	bf 91       	pop	r27
     554:	af 91       	pop	r26
     556:	9f 91       	pop	r25
     558:	8f 91       	pop	r24
     55a:	7f 91       	pop	r23
     55c:	6f 91       	pop	r22
     55e:	5f 91       	pop	r21
     560:	4f 91       	pop	r20
     562:	3f 91       	pop	r19
     564:	2f 91       	pop	r18
     566:	0f 90       	pop	r0
     568:	0b be       	out	0x3b, r0	; 59
     56a:	0f 90       	pop	r0
     56c:	09 be       	out	0x39, r0	; 57
     56e:	0f 90       	pop	r0
     570:	08 be       	out	0x38, r0	; 56
     572:	0f 90       	pop	r0
     574:	0f be       	out	0x3f, r0	; 63
     576:	0f 90       	pop	r0
     578:	1f 90       	pop	r1
     57a:	18 95       	reti

0000057c <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     57c:	1f 92       	push	r1
     57e:	0f 92       	push	r0
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	0f 92       	push	r0
     584:	11 24       	eor	r1, r1
     586:	08 b6       	in	r0, 0x38	; 56
     588:	0f 92       	push	r0
     58a:	18 be       	out	0x38, r1	; 56
     58c:	09 b6       	in	r0, 0x39	; 57
     58e:	0f 92       	push	r0
     590:	19 be       	out	0x39, r1	; 57
     592:	0b b6       	in	r0, 0x3b	; 59
     594:	0f 92       	push	r0
     596:	1b be       	out	0x3b, r1	; 59
     598:	2f 93       	push	r18
     59a:	3f 93       	push	r19
     59c:	4f 93       	push	r20
     59e:	5f 93       	push	r21
     5a0:	6f 93       	push	r22
     5a2:	7f 93       	push	r23
     5a4:	8f 93       	push	r24
     5a6:	9f 93       	push	r25
     5a8:	af 93       	push	r26
     5aa:	bf 93       	push	r27
     5ac:	ef 93       	push	r30
     5ae:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     5b0:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     5b4:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     5b8:	e0 91 3b 21 	lds	r30, 0x213B	; 0x80213b <adcb_callback>
     5bc:	f0 91 3c 21 	lds	r31, 0x213C	; 0x80213c <adcb_callback+0x1>
     5c0:	62 e0       	ldi	r22, 0x02	; 2
     5c2:	80 e4       	ldi	r24, 0x40	; 64
     5c4:	92 e0       	ldi	r25, 0x02	; 2
     5c6:	19 95       	eicall
}
     5c8:	ff 91       	pop	r31
     5ca:	ef 91       	pop	r30
     5cc:	bf 91       	pop	r27
     5ce:	af 91       	pop	r26
     5d0:	9f 91       	pop	r25
     5d2:	8f 91       	pop	r24
     5d4:	7f 91       	pop	r23
     5d6:	6f 91       	pop	r22
     5d8:	5f 91       	pop	r21
     5da:	4f 91       	pop	r20
     5dc:	3f 91       	pop	r19
     5de:	2f 91       	pop	r18
     5e0:	0f 90       	pop	r0
     5e2:	0b be       	out	0x3b, r0	; 59
     5e4:	0f 90       	pop	r0
     5e6:	09 be       	out	0x39, r0	; 57
     5e8:	0f 90       	pop	r0
     5ea:	08 be       	out	0x38, r0	; 56
     5ec:	0f 90       	pop	r0
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	0f 90       	pop	r0
     5f2:	1f 90       	pop	r1
     5f4:	18 95       	reti

000005f6 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     5f6:	1f 92       	push	r1
     5f8:	0f 92       	push	r0
     5fa:	0f b6       	in	r0, 0x3f	; 63
     5fc:	0f 92       	push	r0
     5fe:	11 24       	eor	r1, r1
     600:	08 b6       	in	r0, 0x38	; 56
     602:	0f 92       	push	r0
     604:	18 be       	out	0x38, r1	; 56
     606:	09 b6       	in	r0, 0x39	; 57
     608:	0f 92       	push	r0
     60a:	19 be       	out	0x39, r1	; 57
     60c:	0b b6       	in	r0, 0x3b	; 59
     60e:	0f 92       	push	r0
     610:	1b be       	out	0x3b, r1	; 59
     612:	2f 93       	push	r18
     614:	3f 93       	push	r19
     616:	4f 93       	push	r20
     618:	5f 93       	push	r21
     61a:	6f 93       	push	r22
     61c:	7f 93       	push	r23
     61e:	8f 93       	push	r24
     620:	9f 93       	push	r25
     622:	af 93       	push	r26
     624:	bf 93       	push	r27
     626:	ef 93       	push	r30
     628:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     62a:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     62e:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     632:	e0 91 3b 21 	lds	r30, 0x213B	; 0x80213b <adcb_callback>
     636:	f0 91 3c 21 	lds	r31, 0x213C	; 0x80213c <adcb_callback+0x1>
     63a:	64 e0       	ldi	r22, 0x04	; 4
     63c:	80 e4       	ldi	r24, 0x40	; 64
     63e:	92 e0       	ldi	r25, 0x02	; 2
     640:	19 95       	eicall
}
     642:	ff 91       	pop	r31
     644:	ef 91       	pop	r30
     646:	bf 91       	pop	r27
     648:	af 91       	pop	r26
     64a:	9f 91       	pop	r25
     64c:	8f 91       	pop	r24
     64e:	7f 91       	pop	r23
     650:	6f 91       	pop	r22
     652:	5f 91       	pop	r21
     654:	4f 91       	pop	r20
     656:	3f 91       	pop	r19
     658:	2f 91       	pop	r18
     65a:	0f 90       	pop	r0
     65c:	0b be       	out	0x3b, r0	; 59
     65e:	0f 90       	pop	r0
     660:	09 be       	out	0x39, r0	; 57
     662:	0f 90       	pop	r0
     664:	08 be       	out	0x38, r0	; 56
     666:	0f 90       	pop	r0
     668:	0f be       	out	0x3f, r0	; 63
     66a:	0f 90       	pop	r0
     66c:	1f 90       	pop	r1
     66e:	18 95       	reti

00000670 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     670:	1f 92       	push	r1
     672:	0f 92       	push	r0
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	0f 92       	push	r0
     678:	11 24       	eor	r1, r1
     67a:	08 b6       	in	r0, 0x38	; 56
     67c:	0f 92       	push	r0
     67e:	18 be       	out	0x38, r1	; 56
     680:	09 b6       	in	r0, 0x39	; 57
     682:	0f 92       	push	r0
     684:	19 be       	out	0x39, r1	; 57
     686:	0b b6       	in	r0, 0x3b	; 59
     688:	0f 92       	push	r0
     68a:	1b be       	out	0x3b, r1	; 59
     68c:	2f 93       	push	r18
     68e:	3f 93       	push	r19
     690:	4f 93       	push	r20
     692:	5f 93       	push	r21
     694:	6f 93       	push	r22
     696:	7f 93       	push	r23
     698:	8f 93       	push	r24
     69a:	9f 93       	push	r25
     69c:	af 93       	push	r26
     69e:	bf 93       	push	r27
     6a0:	ef 93       	push	r30
     6a2:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     6a4:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     6a8:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     6ac:	e0 91 3b 21 	lds	r30, 0x213B	; 0x80213b <adcb_callback>
     6b0:	f0 91 3c 21 	lds	r31, 0x213C	; 0x80213c <adcb_callback+0x1>
     6b4:	68 e0       	ldi	r22, 0x08	; 8
     6b6:	80 e4       	ldi	r24, 0x40	; 64
     6b8:	92 e0       	ldi	r25, 0x02	; 2
     6ba:	19 95       	eicall
}
     6bc:	ff 91       	pop	r31
     6be:	ef 91       	pop	r30
     6c0:	bf 91       	pop	r27
     6c2:	af 91       	pop	r26
     6c4:	9f 91       	pop	r25
     6c6:	8f 91       	pop	r24
     6c8:	7f 91       	pop	r23
     6ca:	6f 91       	pop	r22
     6cc:	5f 91       	pop	r21
     6ce:	4f 91       	pop	r20
     6d0:	3f 91       	pop	r19
     6d2:	2f 91       	pop	r18
     6d4:	0f 90       	pop	r0
     6d6:	0b be       	out	0x3b, r0	; 59
     6d8:	0f 90       	pop	r0
     6da:	09 be       	out	0x39, r0	; 57
     6dc:	0f 90       	pop	r0
     6de:	08 be       	out	0x38, r0	; 56
     6e0:	0f 90       	pop	r0
     6e2:	0f be       	out	0x3f, r0	; 63
     6e4:	0f 90       	pop	r0
     6e6:	1f 90       	pop	r1
     6e8:	18 95       	reti

000006ea <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
     6ea:	bf 92       	push	r11
     6ec:	cf 92       	push	r12
     6ee:	df 92       	push	r13
     6f0:	ef 92       	push	r14
     6f2:	ff 92       	push	r15
     6f4:	0f 93       	push	r16
     6f6:	1f 93       	push	r17
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	1f 92       	push	r1
     6fe:	cd b7       	in	r28, 0x3d	; 61
     700:	de b7       	in	r29, 0x3e	; 62
     702:	8c 01       	movw	r16, r24
     704:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     706:	81 15       	cp	r24, r1
     708:	22 e0       	ldi	r18, 0x02	; 2
     70a:	92 07       	cpc	r25, r18
     70c:	71 f4       	brne	.+28     	; 0x72a <adc_write_configuration+0x40>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     70e:	61 e2       	ldi	r22, 0x21	; 33
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	82 e0       	ldi	r24, 0x02	; 2
     714:	96 d1       	rcall	.+812    	; 0xa42 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     716:	c8 2e       	mov	r12, r24
     718:	d1 2c       	mov	r13, r1
     71a:	60 e2       	ldi	r22, 0x20	; 32
     71c:	70 e0       	ldi	r23, 0x00	; 0
     71e:	82 e0       	ldi	r24, 0x02	; 2
     720:	90 d1       	rcall	.+800    	; 0xa42 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
     722:	dc 2c       	mov	r13, r12
     724:	cc 24       	eor	r12, r12
     726:	c8 2a       	or	r12, r24
     728:	10 c0       	rjmp	.+32     	; 0x74a <adc_write_configuration+0x60>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     72a:	80 34       	cpi	r24, 0x40	; 64
     72c:	92 40       	sbci	r25, 0x02	; 2
     72e:	c1 f5       	brne	.+112    	; 0x7a0 <adc_write_configuration+0xb6>
     730:	65 e2       	ldi	r22, 0x25	; 37
     732:	70 e0       	ldi	r23, 0x00	; 0
     734:	82 e0       	ldi	r24, 0x02	; 2
     736:	85 d1       	rcall	.+778    	; 0xa42 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
     738:	c8 2e       	mov	r12, r24
     73a:	d1 2c       	mov	r13, r1
     73c:	64 e2       	ldi	r22, 0x24	; 36
     73e:	70 e0       	ldi	r23, 0x00	; 0
     740:	82 e0       	ldi	r24, 0x02	; 2
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
     742:	7f d1       	rcall	.+766    	; 0xa42 <nvm_read_byte>
     744:	dc 2c       	mov	r13, r12
     746:	cc 24       	eor	r12, r12

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     748:	c8 2a       	or	r12, r24
	cpu_irq_disable();
     74a:	8f b7       	in	r24, 0x3f	; 63
	return flags;
     74c:	89 83       	std	Y+1, r24	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
     74e:	f8 94       	cli
     750:	b9 80       	ldd	r11, Y+1	; 0x01
     752:	c8 01       	movw	r24, r16
	enable = adc->CTRLA & ADC_ENABLE_bm;
     754:	7a dd       	rcall	.-1292   	; 0x24a <adc_enable_clock>
     756:	f8 01       	movw	r30, r16

	adc->CTRLA = ADC_FLUSH_bm;
     758:	80 81       	ld	r24, Z
     75a:	92 e0       	ldi	r25, 0x02	; 2
	adc->CAL = cal;
     75c:	90 83       	st	Z, r25
     75e:	c4 86       	std	Z+12, r12	; 0x0c
	adc->CMP = conf->cmp;
     760:	d5 86       	std	Z+13, r13	; 0x0d
     762:	f7 01       	movw	r30, r14
     764:	25 81       	ldd	r18, Z+5	; 0x05
     766:	36 81       	ldd	r19, Z+6	; 0x06
     768:	f8 01       	movw	r30, r16
     76a:	20 8f       	std	Z+24, r18	; 0x18
	adc->REFCTRL = conf->refctrl;
     76c:	31 8f       	std	Z+25, r19	; 0x19
     76e:	f7 01       	movw	r30, r14
     770:	92 81       	ldd	r25, Z+2	; 0x02
     772:	f8 01       	movw	r30, r16
	adc->PRESCALER = conf->prescaler;
     774:	92 83       	std	Z+2, r25	; 0x02
     776:	f7 01       	movw	r30, r14
     778:	94 81       	ldd	r25, Z+4	; 0x04
     77a:	f8 01       	movw	r30, r16
	adc->EVCTRL = conf->evctrl;
     77c:	94 83       	std	Z+4, r25	; 0x04
     77e:	f7 01       	movw	r30, r14
     780:	93 81       	ldd	r25, Z+3	; 0x03
     782:	f8 01       	movw	r30, r16
	adc->CTRLB = conf->ctrlb;
     784:	93 83       	std	Z+3, r25	; 0x03
     786:	f7 01       	movw	r30, r14
     788:	91 81       	ldd	r25, Z+1	; 0x01
     78a:	f8 01       	movw	r30, r16

	adc->CTRLA = enable | conf->ctrla;
     78c:	91 83       	std	Z+1, r25	; 0x01
     78e:	81 70       	andi	r24, 0x01	; 1
     790:	f7 01       	movw	r30, r14
     792:	90 81       	ld	r25, Z
     794:	89 2b       	or	r24, r25

	adc_disable_clock(adc);
     796:	f8 01       	movw	r30, r16
     798:	80 83       	st	Z, r24
     79a:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     79c:	75 dd       	rcall	.-1302   	; 0x288 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     79e:	bf be       	out	0x3f, r11	; 63
     7a0:	0f 90       	pop	r0
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
     7aa:	ff 90       	pop	r15
     7ac:	ef 90       	pop	r14
     7ae:	df 90       	pop	r13
     7b0:	cf 90       	pop	r12
     7b2:	bf 90       	pop	r11
     7b4:	08 95       	ret

000007b6 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
     7b6:	df 92       	push	r13
     7b8:	ef 92       	push	r14
     7ba:	ff 92       	push	r15
     7bc:	0f 93       	push	r16
     7be:	1f 93       	push	r17
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	1f 92       	push	r1
     7c6:	cd b7       	in	r28, 0x3d	; 61
     7c8:	de b7       	in	r29, 0x3e	; 62
     7ca:	8c 01       	movw	r16, r24
     7cc:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     7ce:	8f b7       	in	r24, 0x3f	; 63
     7d0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     7d2:	f8 94       	cli
	return flags;
     7d4:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
     7d6:	c8 01       	movw	r24, r16
     7d8:	38 dd       	rcall	.-1424   	; 0x24a <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
     7da:	f8 01       	movw	r30, r16
     7dc:	80 81       	ld	r24, Z
     7de:	80 7c       	andi	r24, 0xC0	; 192
     7e0:	f7 01       	movw	r30, r14
     7e2:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
     7e4:	f8 01       	movw	r30, r16
     7e6:	80 8d       	ldd	r24, Z+24	; 0x18
     7e8:	91 8d       	ldd	r25, Z+25	; 0x19
     7ea:	f7 01       	movw	r30, r14
     7ec:	85 83       	std	Z+5, r24	; 0x05
     7ee:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
     7f0:	f8 01       	movw	r30, r16
     7f2:	82 81       	ldd	r24, Z+2	; 0x02
     7f4:	f7 01       	movw	r30, r14
     7f6:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
     7f8:	f8 01       	movw	r30, r16
     7fa:	84 81       	ldd	r24, Z+4	; 0x04
     7fc:	f7 01       	movw	r30, r14
     7fe:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
     800:	f8 01       	movw	r30, r16
     802:	83 81       	ldd	r24, Z+3	; 0x03
     804:	f7 01       	movw	r30, r14
     806:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
     808:	f8 01       	movw	r30, r16
     80a:	81 81       	ldd	r24, Z+1	; 0x01
     80c:	f7 01       	movw	r30, r14

	adc_disable_clock(adc);
     80e:	81 83       	std	Z+1, r24	; 0x01
     810:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     812:	3a dd       	rcall	.-1420   	; 0x288 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     814:	df be       	out	0x3f, r13	; 63
     816:	0f 90       	pop	r0
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	1f 91       	pop	r17
     81e:	0f 91       	pop	r16
     820:	ff 90       	pop	r15
     822:	ef 90       	pop	r14
     824:	df 90       	pop	r13
     826:	08 95       	ret

00000828 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
     828:	af 92       	push	r10
     82a:	bf 92       	push	r11
     82c:	cf 92       	push	r12
     82e:	df 92       	push	r13
     830:	ef 92       	push	r14
     832:	ff 92       	push	r15
     834:	0f 93       	push	r16
     836:	1f 93       	push	r17
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
     83c:	1f 92       	push	r1
     83e:	cd b7       	in	r28, 0x3d	; 61
     840:	de b7       	in	r29, 0x3e	; 62
     842:	6c 01       	movw	r12, r24
     844:	b6 2e       	mov	r11, r22
     846:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     848:	86 2f       	mov	r24, r22
     84a:	83 70       	andi	r24, 0x03	; 3
     84c:	29 f4       	brne	.+10     	; 0x858 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     84e:	96 2f       	mov	r25, r22
     850:	96 95       	lsr	r25
     852:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     854:	82 e0       	ldi	r24, 0x02	; 2
     856:	02 c0       	rjmp	.+4      	; 0x85c <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     858:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     85a:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     85c:	90 ff       	sbrs	r25, 0
		index++;
     85e:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     860:	86 01       	movw	r16, r12
     862:	00 5e       	subi	r16, 0xE0	; 224
     864:	1f 4f       	sbci	r17, 0xFF	; 255
     866:	98 e0       	ldi	r25, 0x08	; 8
     868:	89 9f       	mul	r24, r25
     86a:	00 0d       	add	r16, r0
     86c:	11 1d       	adc	r17, r1
     86e:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     870:	8f b7       	in	r24, 0x3f	; 63
     872:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     874:	f8 94       	cli
	return flags;
     876:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
     878:	c6 01       	movw	r24, r12
     87a:	e7 dc       	rcall	.-1586   	; 0x24a <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
     87c:	f7 01       	movw	r30, r14
     87e:	80 81       	ld	r24, Z
     880:	f8 01       	movw	r30, r16
     882:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
     884:	f7 01       	movw	r30, r14
     886:	82 81       	ldd	r24, Z+2	; 0x02
     888:	f8 01       	movw	r30, r16
     88a:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
     88c:	f7 01       	movw	r30, r14
     88e:	81 81       	ldd	r24, Z+1	; 0x01
     890:	f8 01       	movw	r30, r16
     892:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     894:	b0 fe       	sbrs	r11, 0
     896:	04 c0       	rjmp	.+8      	; 0x8a0 <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
     898:	f7 01       	movw	r30, r14
     89a:	83 81       	ldd	r24, Z+3	; 0x03
     89c:	f8 01       	movw	r30, r16
	}
	adc_disable_clock(adc);
     89e:	86 83       	std	Z+6, r24	; 0x06
     8a0:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     8a2:	f2 dc       	rcall	.-1564   	; 0x288 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     8a4:	af be       	out	0x3f, r10	; 63
     8a6:	0f 90       	pop	r0
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	1f 91       	pop	r17
     8ae:	0f 91       	pop	r16
     8b0:	ff 90       	pop	r15
     8b2:	ef 90       	pop	r14
     8b4:	df 90       	pop	r13
     8b6:	cf 90       	pop	r12
     8b8:	bf 90       	pop	r11
     8ba:	af 90       	pop	r10
     8bc:	08 95       	ret

000008be <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
     8be:	af 92       	push	r10
     8c0:	bf 92       	push	r11
     8c2:	cf 92       	push	r12
     8c4:	df 92       	push	r13
     8c6:	ef 92       	push	r14
     8c8:	ff 92       	push	r15
     8ca:	0f 93       	push	r16
     8cc:	1f 93       	push	r17
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	1f 92       	push	r1
     8d4:	cd b7       	in	r28, 0x3d	; 61
     8d6:	de b7       	in	r29, 0x3e	; 62
     8d8:	6c 01       	movw	r12, r24
     8da:	b6 2e       	mov	r11, r22
     8dc:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     8de:	86 2f       	mov	r24, r22
     8e0:	83 70       	andi	r24, 0x03	; 3
     8e2:	29 f4       	brne	.+10     	; 0x8ee <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     8e4:	96 2f       	mov	r25, r22
     8e6:	96 95       	lsr	r25
     8e8:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     8ea:	82 e0       	ldi	r24, 0x02	; 2
     8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     8ee:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     8f0:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     8f2:	90 ff       	sbrs	r25, 0
		index++;
     8f4:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     8f6:	86 01       	movw	r16, r12
     8f8:	00 5e       	subi	r16, 0xE0	; 224
     8fa:	1f 4f       	sbci	r17, 0xFF	; 255
     8fc:	98 e0       	ldi	r25, 0x08	; 8
     8fe:	89 9f       	mul	r24, r25
     900:	00 0d       	add	r16, r0
     902:	11 1d       	adc	r17, r1
     904:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     906:	8f b7       	in	r24, 0x3f	; 63
     908:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     90a:	f8 94       	cli
	return flags;
     90c:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
     90e:	c6 01       	movw	r24, r12
     910:	9c dc       	rcall	.-1736   	; 0x24a <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
     912:	f8 01       	movw	r30, r16
     914:	80 81       	ld	r24, Z
     916:	f7 01       	movw	r30, r14
     918:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
     91a:	f8 01       	movw	r30, r16
     91c:	82 81       	ldd	r24, Z+2	; 0x02
     91e:	f7 01       	movw	r30, r14
     920:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
     922:	f8 01       	movw	r30, r16
     924:	81 81       	ldd	r24, Z+1	; 0x01
     926:	f7 01       	movw	r30, r14
     928:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     92a:	b0 fe       	sbrs	r11, 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
     92e:	f8 01       	movw	r30, r16
     930:	86 81       	ldd	r24, Z+6	; 0x06
     932:	f7 01       	movw	r30, r14
	}
	adc_disable_clock(adc);
     934:	83 83       	std	Z+3, r24	; 0x03
     936:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     938:	a7 dc       	rcall	.-1714   	; 0x288 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     93a:	af be       	out	0x3f, r10	; 63
     93c:	0f 90       	pop	r0
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	1f 91       	pop	r17
     944:	0f 91       	pop	r16
     946:	ff 90       	pop	r15
     948:	ef 90       	pop	r14
     94a:	df 90       	pop	r13
     94c:	cf 90       	pop	r12
     94e:	bf 90       	pop	r11
     950:	af 90       	pop	r10
     952:	08 95       	ret

00000954 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	1f 92       	push	r1
     95a:	cd b7       	in	r28, 0x3d	; 61
     95c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     95e:	9f b7       	in	r25, 0x3f	; 63
     960:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     962:	f8 94       	cli
	return flags;
     964:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     966:	e8 2f       	mov	r30, r24
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	e0 59       	subi	r30, 0x90	; 144
     96c:	ff 4f       	sbci	r31, 0xFF	; 255
     96e:	60 95       	com	r22
     970:	80 81       	ld	r24, Z
     972:	68 23       	and	r22, r24
     974:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     976:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     978:	0f 90       	pop	r0
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	08 95       	ret

00000980 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
     984:	1f 92       	push	r1
     986:	cd b7       	in	r28, 0x3d	; 61
     988:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     98a:	9f b7       	in	r25, 0x3f	; 63
     98c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     98e:	f8 94       	cli
	return flags;
     990:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
     992:	e8 2f       	mov	r30, r24
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	e0 59       	subi	r30, 0x90	; 144
     998:	ff 4f       	sbci	r31, 0xFF	; 255
     99a:	80 81       	ld	r24, Z
     99c:	68 2b       	or	r22, r24
     99e:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     9a0:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     9a2:	0f 90       	pop	r0
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	08 95       	ret

000009aa <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     9aa:	cf 93       	push	r28
     9ac:	df 93       	push	r29
     9ae:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     9b4:	c6 2f       	mov	r28, r22
     9b6:	d0 e0       	ldi	r29, 0x00	; 0
     9b8:	de 01       	movw	r26, r28
     9ba:	02 2e       	mov	r0, r18
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <ioport_configure_port_pin+0x18>
     9be:	b5 95       	asr	r27
     9c0:	a7 95       	ror	r26
     9c2:	0a 94       	dec	r0
     9c4:	e2 f7       	brpl	.-8      	; 0x9be <ioport_configure_port_pin+0x14>
     9c6:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     9c8:	50 8b       	std	Z+16, r21	; 0x10
     9ca:	2f 5f       	subi	r18, 0xFF	; 255
     9cc:	3f 4f       	sbci	r19, 0xFF	; 255
     9ce:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     9d0:	28 30       	cpi	r18, 0x08	; 8
     9d2:	31 05       	cpc	r19, r1
     9d4:	89 f7       	brne	.-30     	; 0x9b8 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     9d6:	40 ff       	sbrs	r20, 0
     9d8:	0a c0       	rjmp	.+20     	; 0x9ee <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
     9da:	41 ff       	sbrs	r20, 1
     9dc:	03 c0       	rjmp	.+6      	; 0x9e4 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     9de:	fc 01       	movw	r30, r24
     9e0:	65 83       	std	Z+5, r22	; 0x05
     9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     9e4:	fc 01       	movw	r30, r24
     9e6:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     9e8:	fc 01       	movw	r30, r24
     9ea:	61 83       	std	Z+1, r22	; 0x01
     9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     9ee:	fc 01       	movw	r30, r24
     9f0:	62 83       	std	Z+2, r22	; 0x02
	}
}
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	08 95       	ret

000009f8 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     9f8:	43 e0       	ldi	r20, 0x03	; 3
     9fa:	50 e0       	ldi	r21, 0x00	; 0
     9fc:	68 e0       	ldi	r22, 0x08	; 8
     9fe:	80 ec       	ldi	r24, 0xC0	; 192
     a00:	97 e0       	ldi	r25, 0x07	; 7
     a02:	d3 df       	rcall	.-90     	; 0x9aa <ioport_configure_port_pin>
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	58 e1       	ldi	r21, 0x18	; 24
     a08:	64 e0       	ldi	r22, 0x04	; 4
     a0a:	80 ec       	ldi	r24, 0xC0	; 192
     a0c:	97 e0       	ldi	r25, 0x07	; 7
     a0e:	cd df       	rcall	.-102    	; 0x9aa <ioport_configure_port_pin>
     a10:	43 e0       	ldi	r20, 0x03	; 3
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	68 e0       	ldi	r22, 0x08	; 8
     a16:	80 e8       	ldi	r24, 0x80	; 128
     a18:	96 e0       	ldi	r25, 0x06	; 6
     a1a:	c7 df       	rcall	.-114    	; 0x9aa <ioport_configure_port_pin>
     a1c:	40 e0       	ldi	r20, 0x00	; 0
     a1e:	50 e0       	ldi	r21, 0x00	; 0
     a20:	64 e0       	ldi	r22, 0x04	; 4
     a22:	80 e8       	ldi	r24, 0x80	; 128
     a24:	96 e0       	ldi	r25, 0x06	; 6
     a26:	c1 df       	rcall	.-126    	; 0x9aa <ioport_configure_port_pin>
     a28:	43 e0       	ldi	r20, 0x03	; 3
     a2a:	50 e0       	ldi	r21, 0x00	; 0
     a2c:	68 e0       	ldi	r22, 0x08	; 8
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	96 e0       	ldi	r25, 0x06	; 6
     a32:	bb df       	rcall	.-138    	; 0x9aa <ioport_configure_port_pin>
     a34:	40 e0       	ldi	r20, 0x00	; 0
     a36:	50 e0       	ldi	r21, 0x00	; 0
     a38:	64 e0       	ldi	r22, 0x04	; 4
     a3a:	80 e4       	ldi	r24, 0x40	; 64
     a3c:	96 e0       	ldi	r25, 0x06	; 6
     a3e:	b5 cf       	rjmp	.-150    	; 0x9aa <ioport_configure_port_pin>
     a40:	08 95       	ret

00000a42 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
     a42:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
     a46:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
     a48:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
     a4a:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
     a4e:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
     a50:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
     a54:	08 95       	ret

00000a56 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     a56:	fc 01       	movw	r30, r24
     a58:	91 81       	ldd	r25, Z+1	; 0x01
     a5a:	95 ff       	sbrs	r25, 5
     a5c:	fd cf       	rjmp	.-6      	; 0xa58 <usart_putchar+0x2>
     a5e:	60 83       	st	Z, r22
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	08 95       	ret

00000a66 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     a66:	4f 92       	push	r4
     a68:	5f 92       	push	r5
     a6a:	6f 92       	push	r6
     a6c:	7f 92       	push	r7
     a6e:	8f 92       	push	r8
     a70:	9f 92       	push	r9
     a72:	af 92       	push	r10
     a74:	bf 92       	push	r11
     a76:	ef 92       	push	r14
     a78:	ff 92       	push	r15
     a7a:	0f 93       	push	r16
     a7c:	1f 93       	push	r17
     a7e:	cf 93       	push	r28
     a80:	7c 01       	movw	r14, r24
     a82:	4a 01       	movw	r8, r20
     a84:	5b 01       	movw	r10, r22
     a86:	28 01       	movw	r4, r16
     a88:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     a8a:	fc 01       	movw	r30, r24
     a8c:	84 81       	ldd	r24, Z+4	; 0x04
     a8e:	82 ff       	sbrs	r24, 2
     a90:	16 c0       	rjmp	.+44     	; 0xabe <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     a92:	d9 01       	movw	r26, r18
     a94:	c8 01       	movw	r24, r16
     a96:	68 94       	set
     a98:	12 f8       	bld	r1, 2
     a9a:	b6 95       	lsr	r27
     a9c:	a7 95       	ror	r26
     a9e:	97 95       	ror	r25
     aa0:	87 95       	ror	r24
     aa2:	16 94       	lsr	r1
     aa4:	d1 f7       	brne	.-12     	; 0xa9a <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     aa6:	b9 01       	movw	r22, r18
     aa8:	a8 01       	movw	r20, r16
     aaa:	03 2e       	mov	r0, r19
     aac:	36 e1       	ldi	r19, 0x16	; 22
     aae:	76 95       	lsr	r23
     ab0:	67 95       	ror	r22
     ab2:	57 95       	ror	r21
     ab4:	47 95       	ror	r20
     ab6:	3a 95       	dec	r19
     ab8:	d1 f7       	brne	.-12     	; 0xaae <usart_set_baudrate+0x48>
     aba:	30 2d       	mov	r19, r0
     abc:	15 c0       	rjmp	.+42     	; 0xae8 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     abe:	d9 01       	movw	r26, r18
     ac0:	c8 01       	movw	r24, r16
     ac2:	68 94       	set
     ac4:	13 f8       	bld	r1, 3
     ac6:	b6 95       	lsr	r27
     ac8:	a7 95       	ror	r26
     aca:	97 95       	ror	r25
     acc:	87 95       	ror	r24
     ace:	16 94       	lsr	r1
     ad0:	d1 f7       	brne	.-12     	; 0xac6 <usart_set_baudrate+0x60>
		min_rate /= 2;
     ad2:	b9 01       	movw	r22, r18
     ad4:	a8 01       	movw	r20, r16
     ad6:	03 2e       	mov	r0, r19
     ad8:	37 e1       	ldi	r19, 0x17	; 23
     ada:	76 95       	lsr	r23
     adc:	67 95       	ror	r22
     ade:	57 95       	ror	r21
     ae0:	47 95       	ror	r20
     ae2:	3a 95       	dec	r19
     ae4:	d1 f7       	brne	.-12     	; 0xada <usart_set_baudrate+0x74>
     ae6:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     ae8:	88 15       	cp	r24, r8
     aea:	99 05       	cpc	r25, r9
     aec:	aa 05       	cpc	r26, r10
     aee:	bb 05       	cpc	r27, r11
     af0:	08 f4       	brcc	.+2      	; 0xaf4 <usart_set_baudrate+0x8e>
     af2:	a2 c0       	rjmp	.+324    	; 0xc38 <usart_set_baudrate+0x1d2>
     af4:	84 16       	cp	r8, r20
     af6:	95 06       	cpc	r9, r21
     af8:	a6 06       	cpc	r10, r22
     afa:	b7 06       	cpc	r11, r23
     afc:	08 f4       	brcc	.+2      	; 0xb00 <usart_set_baudrate+0x9a>
     afe:	9e c0       	rjmp	.+316    	; 0xc3c <usart_set_baudrate+0x1d6>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     b00:	f7 01       	movw	r30, r14
     b02:	84 81       	ldd	r24, Z+4	; 0x04
     b04:	82 fd       	sbrc	r24, 2
     b06:	04 c0       	rjmp	.+8      	; 0xb10 <usart_set_baudrate+0xaa>
		baud *= 2;
     b08:	88 0c       	add	r8, r8
     b0a:	99 1c       	adc	r9, r9
     b0c:	aa 1c       	adc	r10, r10
     b0e:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     b10:	c3 01       	movw	r24, r6
     b12:	b2 01       	movw	r22, r4
     b14:	a5 01       	movw	r20, r10
     b16:	94 01       	movw	r18, r8
     b18:	cc d5       	rcall	.+2968   	; 0x16b2 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     b1a:	2f 3f       	cpi	r18, 0xFF	; 255
     b1c:	31 05       	cpc	r19, r1
     b1e:	41 05       	cpc	r20, r1
     b20:	51 05       	cpc	r21, r1
     b22:	08 f4       	brcc	.+2      	; 0xb26 <usart_set_baudrate+0xc0>
     b24:	8d c0       	rjmp	.+282    	; 0xc40 <usart_set_baudrate+0x1da>
     b26:	8f ef       	ldi	r24, 0xFF	; 255
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	c9 ef       	ldi	r28, 0xF9	; 249
     b30:	05 c0       	rjmp	.+10     	; 0xb3c <usart_set_baudrate+0xd6>
     b32:	28 17       	cp	r18, r24
     b34:	39 07       	cpc	r19, r25
     b36:	4a 07       	cpc	r20, r26
     b38:	5b 07       	cpc	r21, r27
     b3a:	58 f0       	brcs	.+22     	; 0xb52 <usart_set_baudrate+0xec>
			break;
		}

		limit <<= 1;
     b3c:	88 0f       	add	r24, r24
     b3e:	99 1f       	adc	r25, r25
     b40:	aa 1f       	adc	r26, r26
     b42:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     b44:	cd 3f       	cpi	r28, 0xFD	; 253
     b46:	0c f4       	brge	.+2      	; 0xb4a <usart_set_baudrate+0xe4>
			limit |= 1;
     b48:	81 60       	ori	r24, 0x01	; 1
     b4a:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     b4c:	c7 30       	cpi	r28, 0x07	; 7
     b4e:	89 f7       	brne	.-30     	; 0xb32 <usart_set_baudrate+0xcc>
     b50:	4d c0       	rjmp	.+154    	; 0xbec <usart_set_baudrate+0x186>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     b52:	cc 23       	and	r28, r28
     b54:	0c f0       	brlt	.+2      	; 0xb58 <usart_set_baudrate+0xf2>
     b56:	4a c0       	rjmp	.+148    	; 0xbec <usart_set_baudrate+0x186>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     b58:	d5 01       	movw	r26, r10
     b5a:	c4 01       	movw	r24, r8
     b5c:	88 0f       	add	r24, r24
     b5e:	99 1f       	adc	r25, r25
     b60:	aa 1f       	adc	r26, r26
     b62:	bb 1f       	adc	r27, r27
     b64:	88 0f       	add	r24, r24
     b66:	99 1f       	adc	r25, r25
     b68:	aa 1f       	adc	r26, r26
     b6a:	bb 1f       	adc	r27, r27
     b6c:	88 0f       	add	r24, r24
     b6e:	99 1f       	adc	r25, r25
     b70:	aa 1f       	adc	r26, r26
     b72:	bb 1f       	adc	r27, r27
     b74:	48 1a       	sub	r4, r24
     b76:	59 0a       	sbc	r5, r25
     b78:	6a 0a       	sbc	r6, r26
     b7a:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     b7c:	ce 3f       	cpi	r28, 0xFE	; 254
     b7e:	ec f4       	brge	.+58     	; 0xbba <usart_set_baudrate+0x154>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     b80:	8d ef       	ldi	r24, 0xFD	; 253
     b82:	9f ef       	ldi	r25, 0xFF	; 255
     b84:	8c 1b       	sub	r24, r28
     b86:	91 09       	sbc	r25, r1
     b88:	c7 fd       	sbrc	r28, 7
     b8a:	93 95       	inc	r25
     b8c:	04 c0       	rjmp	.+8      	; 0xb96 <usart_set_baudrate+0x130>
     b8e:	44 0c       	add	r4, r4
     b90:	55 1c       	adc	r5, r5
     b92:	66 1c       	adc	r6, r6
     b94:	77 1c       	adc	r7, r7
     b96:	8a 95       	dec	r24
     b98:	d2 f7       	brpl	.-12     	; 0xb8e <usart_set_baudrate+0x128>
     b9a:	d5 01       	movw	r26, r10
     b9c:	c4 01       	movw	r24, r8
     b9e:	b6 95       	lsr	r27
     ba0:	a7 95       	ror	r26
     ba2:	97 95       	ror	r25
     ba4:	87 95       	ror	r24
     ba6:	bc 01       	movw	r22, r24
     ba8:	cd 01       	movw	r24, r26
     baa:	64 0d       	add	r22, r4
     bac:	75 1d       	adc	r23, r5
     bae:	86 1d       	adc	r24, r6
     bb0:	97 1d       	adc	r25, r7
     bb2:	a5 01       	movw	r20, r10
     bb4:	94 01       	movw	r18, r8
     bb6:	7d d5       	rcall	.+2810   	; 0x16b2 <__udivmodsi4>
     bb8:	35 c0       	rjmp	.+106    	; 0xc24 <usart_set_baudrate+0x1be>
		} else {
			baud <<= exp + 3;
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 0f       	add	r24, r28
     bbe:	a5 01       	movw	r20, r10
     bc0:	94 01       	movw	r18, r8
     bc2:	04 c0       	rjmp	.+8      	; 0xbcc <usart_set_baudrate+0x166>
     bc4:	22 0f       	add	r18, r18
     bc6:	33 1f       	adc	r19, r19
     bc8:	44 1f       	adc	r20, r20
     bca:	55 1f       	adc	r21, r21
     bcc:	8a 95       	dec	r24
     bce:	d2 f7       	brpl	.-12     	; 0xbc4 <usart_set_baudrate+0x15e>
			div = (cpu_hz + baud / 2) / baud;
     bd0:	da 01       	movw	r26, r20
     bd2:	c9 01       	movw	r24, r18
     bd4:	b6 95       	lsr	r27
     bd6:	a7 95       	ror	r26
     bd8:	97 95       	ror	r25
     bda:	87 95       	ror	r24
     bdc:	bc 01       	movw	r22, r24
     bde:	cd 01       	movw	r24, r26
     be0:	64 0d       	add	r22, r4
     be2:	75 1d       	adc	r23, r5
     be4:	86 1d       	adc	r24, r6
     be6:	97 1d       	adc	r25, r7
     be8:	64 d5       	rcall	.+2760   	; 0x16b2 <__udivmodsi4>
     bea:	1c c0       	rjmp	.+56     	; 0xc24 <usart_set_baudrate+0x1be>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     bec:	83 e0       	ldi	r24, 0x03	; 3
     bee:	8c 0f       	add	r24, r28
     bf0:	a5 01       	movw	r20, r10
     bf2:	94 01       	movw	r18, r8
     bf4:	04 c0       	rjmp	.+8      	; 0xbfe <usart_set_baudrate+0x198>
     bf6:	22 0f       	add	r18, r18
     bf8:	33 1f       	adc	r19, r19
     bfa:	44 1f       	adc	r20, r20
     bfc:	55 1f       	adc	r21, r21
     bfe:	8a 95       	dec	r24
     c00:	d2 f7       	brpl	.-12     	; 0xbf6 <usart_set_baudrate+0x190>
		div = (cpu_hz + baud / 2) / baud - 1;
     c02:	da 01       	movw	r26, r20
     c04:	c9 01       	movw	r24, r18
     c06:	b6 95       	lsr	r27
     c08:	a7 95       	ror	r26
     c0a:	97 95       	ror	r25
     c0c:	87 95       	ror	r24
     c0e:	bc 01       	movw	r22, r24
     c10:	cd 01       	movw	r24, r26
     c12:	64 0d       	add	r22, r4
     c14:	75 1d       	adc	r23, r5
     c16:	86 1d       	adc	r24, r6
     c18:	97 1d       	adc	r25, r7
     c1a:	4b d5       	rcall	.+2710   	; 0x16b2 <__udivmodsi4>
     c1c:	21 50       	subi	r18, 0x01	; 1
     c1e:	31 09       	sbc	r19, r1
     c20:	41 09       	sbc	r20, r1
     c22:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     c24:	83 2f       	mov	r24, r19
     c26:	8f 70       	andi	r24, 0x0F	; 15
     c28:	c2 95       	swap	r28
     c2a:	c0 7f       	andi	r28, 0xF0	; 240
     c2c:	c8 2b       	or	r28, r24
     c2e:	f7 01       	movw	r30, r14
     c30:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     c32:	26 83       	std	Z+6, r18	; 0x06

	return true;
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	18 c0       	rjmp	.+48     	; 0xc68 <usart_set_baudrate+0x202>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	16 c0       	rjmp	.+44     	; 0xc68 <usart_set_baudrate+0x202>
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	14 c0       	rjmp	.+40     	; 0xc68 <usart_set_baudrate+0x202>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     c40:	d5 01       	movw	r26, r10
     c42:	c4 01       	movw	r24, r8
     c44:	88 0f       	add	r24, r24
     c46:	99 1f       	adc	r25, r25
     c48:	aa 1f       	adc	r26, r26
     c4a:	bb 1f       	adc	r27, r27
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	aa 1f       	adc	r26, r26
     c52:	bb 1f       	adc	r27, r27
     c54:	88 0f       	add	r24, r24
     c56:	99 1f       	adc	r25, r25
     c58:	aa 1f       	adc	r26, r26
     c5a:	bb 1f       	adc	r27, r27
     c5c:	48 1a       	sub	r4, r24
     c5e:	59 0a       	sbc	r5, r25
     c60:	6a 0a       	sbc	r6, r26
     c62:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     c64:	c9 ef       	ldi	r28, 0xF9	; 249
     c66:	8c cf       	rjmp	.-232    	; 0xb80 <usart_set_baudrate+0x11a>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     c68:	cf 91       	pop	r28
     c6a:	1f 91       	pop	r17
     c6c:	0f 91       	pop	r16
     c6e:	ff 90       	pop	r15
     c70:	ef 90       	pop	r14
     c72:	bf 90       	pop	r11
     c74:	af 90       	pop	r10
     c76:	9f 90       	pop	r9
     c78:	8f 90       	pop	r8
     c7a:	7f 90       	pop	r7
     c7c:	6f 90       	pop	r6
     c7e:	5f 90       	pop	r5
     c80:	4f 90       	pop	r4
     c82:	08 95       	ret

00000c84 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     c84:	0f 93       	push	r16
     c86:	1f 93       	push	r17
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	ec 01       	movw	r28, r24
     c8e:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     c90:	00 97       	sbiw	r24, 0x00	; 0
     c92:	09 f4       	brne	.+2      	; 0xc96 <usart_init_rs232+0x12>
     c94:	36 c1       	rjmp	.+620    	; 0xf02 <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     c96:	80 3c       	cpi	r24, 0xC0	; 192
     c98:	91 05       	cpc	r25, r1
     c9a:	21 f4       	brne	.+8      	; 0xca4 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     c9c:	60 e1       	ldi	r22, 0x10	; 16
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	59 de       	rcall	.-846    	; 0x954 <sysclk_enable_module>
     ca2:	2f c1       	rjmp	.+606    	; 0xf02 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
     ca4:	c0 34       	cpi	r28, 0x40	; 64
     ca6:	84 e0       	ldi	r24, 0x04	; 4
     ca8:	d8 07       	cpc	r29, r24
     caa:	21 f4       	brne	.+8      	; 0xcb4 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
     cac:	68 e0       	ldi	r22, 0x08	; 8
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	51 de       	rcall	.-862    	; 0x954 <sysclk_enable_module>
     cb2:	27 c1       	rjmp	.+590    	; 0xf02 <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     cb4:	c1 15       	cp	r28, r1
     cb6:	e4 e0       	ldi	r30, 0x04	; 4
     cb8:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     cba:	21 f4       	brne	.+8      	; 0xcc4 <usart_init_rs232+0x40>
     cbc:	64 e0       	ldi	r22, 0x04	; 4
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	49 de       	rcall	.-878    	; 0x954 <sysclk_enable_module>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     cc2:	1f c1       	rjmp	.+574    	; 0xf02 <usart_init_rs232+0x27e>
     cc4:	c0 38       	cpi	r28, 0x80	; 128
     cc6:	f1 e0       	ldi	r31, 0x01	; 1
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     cc8:	df 07       	cpc	r29, r31
     cca:	21 f4       	brne	.+8      	; 0xcd4 <usart_init_rs232+0x50>
     ccc:	62 e0       	ldi	r22, 0x02	; 2
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	41 de       	rcall	.-894    	; 0x954 <sysclk_enable_module>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     cd2:	17 c1       	rjmp	.+558    	; 0xf02 <usart_init_rs232+0x27e>
     cd4:	c1 15       	cp	r28, r1
     cd6:	81 e0       	ldi	r24, 0x01	; 1
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     cd8:	d8 07       	cpc	r29, r24
     cda:	21 f4       	brne	.+8      	; 0xce4 <usart_init_rs232+0x60>
     cdc:	61 e0       	ldi	r22, 0x01	; 1
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	39 de       	rcall	.-910    	; 0x954 <sysclk_enable_module>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     ce2:	0f c1       	rjmp	.+542    	; 0xf02 <usart_init_rs232+0x27e>
     ce4:	c0 38       	cpi	r28, 0x80	; 128
     ce6:	e3 e0       	ldi	r30, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     ce8:	de 07       	cpc	r29, r30
     cea:	21 f4       	brne	.+8      	; 0xcf4 <usart_init_rs232+0x70>
     cec:	61 e0       	ldi	r22, 0x01	; 1
     cee:	81 e0       	ldi	r24, 0x01	; 1
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     cf0:	31 de       	rcall	.-926    	; 0x954 <sysclk_enable_module>
     cf2:	07 c1       	rjmp	.+526    	; 0xf02 <usart_init_rs232+0x27e>
     cf4:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     cf6:	f3 e0       	ldi	r31, 0x03	; 3
     cf8:	df 07       	cpc	r29, r31
     cfa:	21 f4       	brne	.+8      	; 0xd04 <usart_init_rs232+0x80>
     cfc:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     cfe:	82 e0       	ldi	r24, 0x02	; 2
     d00:	29 de       	rcall	.-942    	; 0x954 <sysclk_enable_module>
     d02:	ff c0       	rjmp	.+510    	; 0xf02 <usart_init_rs232+0x27e>
     d04:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     d06:	82 e0       	ldi	r24, 0x02	; 2
     d08:	d8 07       	cpc	r29, r24
     d0a:	21 f4       	brne	.+8      	; 0xd14 <usart_init_rs232+0x90>
     d0c:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	21 de       	rcall	.-958    	; 0x954 <sysclk_enable_module>
     d12:	f7 c0       	rjmp	.+494    	; 0xf02 <usart_init_rs232+0x27e>
     d14:	c0 34       	cpi	r28, 0x40	; 64
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     d16:	e2 e0       	ldi	r30, 0x02	; 2
     d18:	de 07       	cpc	r29, r30
     d1a:	21 f4       	brne	.+8      	; 0xd24 <usart_init_rs232+0xa0>
     d1c:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
     d1e:	82 e0       	ldi	r24, 0x02	; 2
     d20:	19 de       	rcall	.-974    	; 0x954 <sysclk_enable_module>
     d22:	ef c0       	rjmp	.+478    	; 0xf02 <usart_init_rs232+0x27e>
     d24:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
     d26:	f3 e0       	ldi	r31, 0x03	; 3
     d28:	df 07       	cpc	r29, r31
     d2a:	21 f4       	brne	.+8      	; 0xd34 <usart_init_rs232+0xb0>
     d2c:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	11 de       	rcall	.-990    	; 0x954 <sysclk_enable_module>
     d32:	e7 c0       	rjmp	.+462    	; 0xf02 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     d34:	c0 32       	cpi	r28, 0x20	; 32
     d36:	83 e0       	ldi	r24, 0x03	; 3
     d38:	d8 07       	cpc	r29, r24
     d3a:	21 f4       	brne	.+8      	; 0xd44 <usart_init_rs232+0xc0>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     d3c:	64 e0       	ldi	r22, 0x04	; 4
     d3e:	82 e0       	ldi	r24, 0x02	; 2
     d40:	09 de       	rcall	.-1006   	; 0x954 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     d42:	df c0       	rjmp	.+446    	; 0xf02 <usart_init_rs232+0x27e>
     d44:	c1 15       	cp	r28, r1
     d46:	e8 e0       	ldi	r30, 0x08	; 8
     d48:	de 07       	cpc	r29, r30
     d4a:	21 f4       	brne	.+8      	; 0xd54 <usart_init_rs232+0xd0>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     d4c:	61 e0       	ldi	r22, 0x01	; 1
     d4e:	83 e0       	ldi	r24, 0x03	; 3
     d50:	01 de       	rcall	.-1022   	; 0x954 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     d52:	d7 c0       	rjmp	.+430    	; 0xf02 <usart_init_rs232+0x27e>
     d54:	c1 15       	cp	r28, r1
     d56:	f9 e0       	ldi	r31, 0x09	; 9
     d58:	df 07       	cpc	r29, r31
     d5a:	21 f4       	brne	.+8      	; 0xd64 <usart_init_rs232+0xe0>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     d5c:	61 e0       	ldi	r22, 0x01	; 1
     d5e:	84 e0       	ldi	r24, 0x04	; 4
     d60:	f9 dd       	rcall	.-1038   	; 0x954 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     d62:	cf c0       	rjmp	.+414    	; 0xf02 <usart_init_rs232+0x27e>
     d64:	c1 15       	cp	r28, r1
     d66:	8a e0       	ldi	r24, 0x0A	; 10
     d68:	d8 07       	cpc	r29, r24
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     d6a:	21 f4       	brne	.+8      	; 0xd74 <usart_init_rs232+0xf0>
     d6c:	61 e0       	ldi	r22, 0x01	; 1
     d6e:	85 e0       	ldi	r24, 0x05	; 5
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     d70:	f1 dd       	rcall	.-1054   	; 0x954 <sysclk_enable_module>
     d72:	c7 c0       	rjmp	.+398    	; 0xf02 <usart_init_rs232+0x27e>
     d74:	c1 15       	cp	r28, r1
     d76:	eb e0       	ldi	r30, 0x0B	; 11
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     d78:	de 07       	cpc	r29, r30
     d7a:	21 f4       	brne	.+8      	; 0xd84 <usart_init_rs232+0x100>
     d7c:	61 e0       	ldi	r22, 0x01	; 1
     d7e:	86 e0       	ldi	r24, 0x06	; 6
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     d80:	e9 dd       	rcall	.-1070   	; 0x954 <sysclk_enable_module>
     d82:	bf c0       	rjmp	.+382    	; 0xf02 <usart_init_rs232+0x27e>
     d84:	c0 34       	cpi	r28, 0x40	; 64
     d86:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     d88:	df 07       	cpc	r29, r31
     d8a:	21 f4       	brne	.+8      	; 0xd94 <usart_init_rs232+0x110>
     d8c:	62 e0       	ldi	r22, 0x02	; 2
     d8e:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     d90:	e1 dd       	rcall	.-1086   	; 0x954 <sysclk_enable_module>
     d92:	b7 c0       	rjmp	.+366    	; 0xf02 <usart_init_rs232+0x27e>
     d94:	c0 34       	cpi	r28, 0x40	; 64
     d96:	89 e0       	ldi	r24, 0x09	; 9
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     d98:	d8 07       	cpc	r29, r24
     d9a:	21 f4       	brne	.+8      	; 0xda4 <usart_init_rs232+0x120>
     d9c:	62 e0       	ldi	r22, 0x02	; 2
     d9e:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     da0:	d9 dd       	rcall	.-1102   	; 0x954 <sysclk_enable_module>
     da2:	af c0       	rjmp	.+350    	; 0xf02 <usart_init_rs232+0x27e>
     da4:	c0 34       	cpi	r28, 0x40	; 64
     da6:	ea e0       	ldi	r30, 0x0A	; 10
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
     da8:	de 07       	cpc	r29, r30
     daa:	21 f4       	brne	.+8      	; 0xdb4 <usart_init_rs232+0x130>
     dac:	62 e0       	ldi	r22, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
     dae:	85 e0       	ldi	r24, 0x05	; 5
     db0:	d1 dd       	rcall	.-1118   	; 0x954 <sysclk_enable_module>
     db2:	a7 c0       	rjmp	.+334    	; 0xf02 <usart_init_rs232+0x27e>
     db4:	c0 34       	cpi	r28, 0x40	; 64
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     db6:	fb e0       	ldi	r31, 0x0B	; 11
     db8:	df 07       	cpc	r29, r31
     dba:	21 f4       	brne	.+8      	; 0xdc4 <usart_init_rs232+0x140>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     dbc:	62 e0       	ldi	r22, 0x02	; 2
     dbe:	86 e0       	ldi	r24, 0x06	; 6
     dc0:	c9 dd       	rcall	.-1134   	; 0x954 <sysclk_enable_module>
     dc2:	9f c0       	rjmp	.+318    	; 0xf02 <usart_init_rs232+0x27e>
     dc4:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     dc6:	88 e0       	ldi	r24, 0x08	; 8
     dc8:	d8 07       	cpc	r29, r24
     dca:	21 f4       	brne	.+8      	; 0xdd4 <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     dcc:	64 e0       	ldi	r22, 0x04	; 4
     dce:	83 e0       	ldi	r24, 0x03	; 3
     dd0:	c1 dd       	rcall	.-1150   	; 0x954 <sysclk_enable_module>
     dd2:	97 c0       	rjmp	.+302    	; 0xf02 <usart_init_rs232+0x27e>
     dd4:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     dd6:	e9 e0       	ldi	r30, 0x09	; 9
     dd8:	de 07       	cpc	r29, r30
     dda:	21 f4       	brne	.+8      	; 0xde4 <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     ddc:	64 e0       	ldi	r22, 0x04	; 4
     dde:	84 e0       	ldi	r24, 0x04	; 4
     de0:	b9 dd       	rcall	.-1166   	; 0x954 <sysclk_enable_module>
     de2:	8f c0       	rjmp	.+286    	; 0xf02 <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     de4:	c0 39       	cpi	r28, 0x90	; 144
     de6:	fa e0       	ldi	r31, 0x0A	; 10
     de8:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     dea:	21 f4       	brne	.+8      	; 0xdf4 <usart_init_rs232+0x170>
     dec:	64 e0       	ldi	r22, 0x04	; 4
     dee:	85 e0       	ldi	r24, 0x05	; 5
     df0:	b1 dd       	rcall	.-1182   	; 0x954 <sysclk_enable_module>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     df2:	87 c0       	rjmp	.+270    	; 0xf02 <usart_init_rs232+0x27e>
     df4:	c0 39       	cpi	r28, 0x90	; 144
     df6:	8b e0       	ldi	r24, 0x0B	; 11
     df8:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     dfa:	21 f4       	brne	.+8      	; 0xe04 <usart_init_rs232+0x180>
     dfc:	64 e0       	ldi	r22, 0x04	; 4
     dfe:	86 e0       	ldi	r24, 0x06	; 6
     e00:	a9 dd       	rcall	.-1198   	; 0x954 <sysclk_enable_module>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     e02:	7f c0       	rjmp	.+254    	; 0xf02 <usart_init_rs232+0x27e>
     e04:	c0 3c       	cpi	r28, 0xC0	; 192
     e06:	e8 e0       	ldi	r30, 0x08	; 8
     e08:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     e0a:	21 f4       	brne	.+8      	; 0xe14 <usart_init_rs232+0x190>
     e0c:	68 e0       	ldi	r22, 0x08	; 8
     e0e:	83 e0       	ldi	r24, 0x03	; 3
     e10:	a1 dd       	rcall	.-1214   	; 0x954 <sysclk_enable_module>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
     e12:	77 c0       	rjmp	.+238    	; 0xf02 <usart_init_rs232+0x27e>
     e14:	c0 3c       	cpi	r28, 0xC0	; 192
     e16:	f9 e0       	ldi	r31, 0x09	; 9
     e18:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
     e1a:	21 f4       	brne	.+8      	; 0xe24 <usart_init_rs232+0x1a0>
     e1c:	68 e0       	ldi	r22, 0x08	; 8
     e1e:	84 e0       	ldi	r24, 0x04	; 4
     e20:	99 dd       	rcall	.-1230   	; 0x954 <sysclk_enable_module>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
     e22:	6f c0       	rjmp	.+222    	; 0xf02 <usart_init_rs232+0x27e>
     e24:	c0 3c       	cpi	r28, 0xC0	; 192
     e26:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
     e28:	d8 07       	cpc	r29, r24
     e2a:	21 f4       	brne	.+8      	; 0xe34 <usart_init_rs232+0x1b0>
     e2c:	68 e0       	ldi	r22, 0x08	; 8
     e2e:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     e30:	91 dd       	rcall	.-1246   	; 0x954 <sysclk_enable_module>
     e32:	67 c0       	rjmp	.+206    	; 0xf02 <usart_init_rs232+0x27e>
     e34:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     e36:	eb e0       	ldi	r30, 0x0B	; 11
     e38:	de 07       	cpc	r29, r30
     e3a:	21 f4       	brne	.+8      	; 0xe44 <usart_init_rs232+0x1c0>
     e3c:	68 e0       	ldi	r22, 0x08	; 8
     e3e:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     e40:	89 dd       	rcall	.-1262   	; 0x954 <sysclk_enable_module>
     e42:	5f c0       	rjmp	.+190    	; 0xf02 <usart_init_rs232+0x27e>
     e44:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     e46:	f8 e0       	ldi	r31, 0x08	; 8
     e48:	df 07       	cpc	r29, r31
     e4a:	21 f4       	brne	.+8      	; 0xe54 <usart_init_rs232+0x1d0>
     e4c:	60 e1       	ldi	r22, 0x10	; 16
     e4e:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     e50:	81 dd       	rcall	.-1278   	; 0x954 <sysclk_enable_module>
     e52:	57 c0       	rjmp	.+174    	; 0xf02 <usart_init_rs232+0x27e>
     e54:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     e56:	89 e0       	ldi	r24, 0x09	; 9
     e58:	d8 07       	cpc	r29, r24
     e5a:	21 f4       	brne	.+8      	; 0xe64 <usart_init_rs232+0x1e0>
     e5c:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     e5e:	84 e0       	ldi	r24, 0x04	; 4
     e60:	79 dd       	rcall	.-1294   	; 0x954 <sysclk_enable_module>
     e62:	4f c0       	rjmp	.+158    	; 0xf02 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     e64:	c0 3a       	cpi	r28, 0xA0	; 160
     e66:	ea e0       	ldi	r30, 0x0A	; 10
     e68:	de 07       	cpc	r29, r30
     e6a:	21 f4       	brne	.+8      	; 0xe74 <usart_init_rs232+0x1f0>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     e6c:	60 e1       	ldi	r22, 0x10	; 16
     e6e:	85 e0       	ldi	r24, 0x05	; 5
     e70:	71 dd       	rcall	.-1310   	; 0x954 <sysclk_enable_module>
     e72:	47 c0       	rjmp	.+142    	; 0xf02 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     e74:	c0 3a       	cpi	r28, 0xA0	; 160
     e76:	fb e0       	ldi	r31, 0x0B	; 11
     e78:	df 07       	cpc	r29, r31
     e7a:	21 f4       	brne	.+8      	; 0xe84 <usart_init_rs232+0x200>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     e7c:	60 e1       	ldi	r22, 0x10	; 16
     e7e:	86 e0       	ldi	r24, 0x06	; 6
     e80:	69 dd       	rcall	.-1326   	; 0x954 <sysclk_enable_module>
     e82:	3f c0       	rjmp	.+126    	; 0xf02 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     e84:	c0 3b       	cpi	r28, 0xB0	; 176
     e86:	88 e0       	ldi	r24, 0x08	; 8
     e88:	d8 07       	cpc	r29, r24
     e8a:	21 f4       	brne	.+8      	; 0xe94 <usart_init_rs232+0x210>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
     e8c:	60 e2       	ldi	r22, 0x20	; 32
     e8e:	83 e0       	ldi	r24, 0x03	; 3
     e90:	61 dd       	rcall	.-1342   	; 0x954 <sysclk_enable_module>
     e92:	37 c0       	rjmp	.+110    	; 0xf02 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
     e94:	c0 3b       	cpi	r28, 0xB0	; 176
     e96:	e9 e0       	ldi	r30, 0x09	; 9
     e98:	de 07       	cpc	r29, r30
     e9a:	21 f4       	brne	.+8      	; 0xea4 <usart_init_rs232+0x220>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
     e9c:	60 e2       	ldi	r22, 0x20	; 32
     e9e:	84 e0       	ldi	r24, 0x04	; 4
     ea0:	59 dd       	rcall	.-1358   	; 0x954 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
     ea2:	2f c0       	rjmp	.+94     	; 0xf02 <usart_init_rs232+0x27e>
     ea4:	c0 3b       	cpi	r28, 0xB0	; 176
     ea6:	fa e0       	ldi	r31, 0x0A	; 10
     ea8:	df 07       	cpc	r29, r31
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     eaa:	21 f4       	brne	.+8      	; 0xeb4 <usart_init_rs232+0x230>
     eac:	60 e2       	ldi	r22, 0x20	; 32
     eae:	85 e0       	ldi	r24, 0x05	; 5
     eb0:	51 dd       	rcall	.-1374   	; 0x954 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     eb2:	27 c0       	rjmp	.+78     	; 0xf02 <usart_init_rs232+0x27e>
     eb4:	c0 3b       	cpi	r28, 0xB0	; 176
     eb6:	8b e0       	ldi	r24, 0x0B	; 11
     eb8:	d8 07       	cpc	r29, r24
     eba:	21 f4       	brne	.+8      	; 0xec4 <usart_init_rs232+0x240>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
     ebc:	60 e2       	ldi	r22, 0x20	; 32
     ebe:	86 e0       	ldi	r24, 0x06	; 6
     ec0:	49 dd       	rcall	.-1390   	; 0x954 <sysclk_enable_module>
     ec2:	1f c0       	rjmp	.+62     	; 0xf02 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
     ec4:	c0 38       	cpi	r28, 0x80	; 128
     ec6:	e4 e0       	ldi	r30, 0x04	; 4
     ec8:	de 07       	cpc	r29, r30
     eca:	21 f4       	brne	.+8      	; 0xed4 <usart_init_rs232+0x250>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     ecc:	60 e4       	ldi	r22, 0x40	; 64
     ece:	83 e0       	ldi	r24, 0x03	; 3
     ed0:	41 dd       	rcall	.-1406   	; 0x954 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     ed2:	17 c0       	rjmp	.+46     	; 0xf02 <usart_init_rs232+0x27e>
     ed4:	c0 39       	cpi	r28, 0x90	; 144
     ed6:	f4 e0       	ldi	r31, 0x04	; 4
     ed8:	df 07       	cpc	r29, r31
     eda:	21 f4       	brne	.+8      	; 0xee4 <usart_init_rs232+0x260>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
     edc:	60 e4       	ldi	r22, 0x40	; 64
     ede:	84 e0       	ldi	r24, 0x04	; 4
     ee0:	39 dd       	rcall	.-1422   	; 0x954 <sysclk_enable_module>
     ee2:	0f c0       	rjmp	.+30     	; 0xf02 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
     ee4:	c0 3a       	cpi	r28, 0xA0	; 160
     ee6:	84 e0       	ldi	r24, 0x04	; 4
     ee8:	d8 07       	cpc	r29, r24
     eea:	21 f4       	brne	.+8      	; 0xef4 <usart_init_rs232+0x270>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     eec:	60 e4       	ldi	r22, 0x40	; 64
     eee:	85 e0       	ldi	r24, 0x05	; 5
     ef0:	31 dd       	rcall	.-1438   	; 0x954 <sysclk_enable_module>
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     ef2:	07 c0       	rjmp	.+14     	; 0xf02 <usart_init_rs232+0x27e>
     ef4:	c0 3b       	cpi	r28, 0xB0	; 176
     ef6:	e4 e0       	ldi	r30, 0x04	; 4
     ef8:	de 07       	cpc	r29, r30
     efa:	19 f4       	brne	.+6      	; 0xf02 <usart_init_rs232+0x27e>
     efc:	60 e4       	ldi	r22, 0x40	; 64
     efe:	86 e0       	ldi	r24, 0x06	; 6
     f00:	29 dd       	rcall	.-1454   	; 0x954 <sysclk_enable_module>
     f02:	8d 81       	ldd	r24, Y+5	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     f04:	8f 73       	andi	r24, 0x3F	; 63
     f06:	8d 83       	std	Y+5, r24	; 0x05
     f08:	f8 01       	movw	r30, r16
     f0a:	95 81       	ldd	r25, Z+5	; 0x05
     f0c:	84 81       	ldd	r24, Z+4	; 0x04
     f0e:	89 2b       	or	r24, r25
     f10:	96 81       	ldd	r25, Z+6	; 0x06
     f12:	91 11       	cpse	r25, r1
     f14:	98 e0       	ldi	r25, 0x08	; 8
     f16:	89 2b       	or	r24, r25
     f18:	8d 83       	std	Y+5, r24	; 0x05
     f1a:	f8 01       	movw	r30, r16
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     f1c:	40 81       	ld	r20, Z
     f1e:	51 81       	ldd	r21, Z+1	; 0x01
     f20:	62 81       	ldd	r22, Z+2	; 0x02
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     f22:	73 81       	ldd	r23, Z+3	; 0x03
     f24:	00 e8       	ldi	r16, 0x80	; 128
     f26:	14 e8       	ldi	r17, 0x84	; 132
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     f28:	2e e1       	ldi	r18, 0x1E	; 30
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	ce 01       	movw	r24, r28
     f2e:	9b dd       	rcall	.-1226   	; 0xa66 <usart_set_baudrate>
     f30:	9c 81       	ldd	r25, Y+4	; 0x04
     f32:	98 60       	ori	r25, 0x08	; 8
     f34:	9c 83       	std	Y+4, r25	; 0x04
     f36:	9c 81       	ldd	r25, Y+4	; 0x04
     f38:	90 61       	ori	r25, 0x10	; 16
     f3a:	9c 83       	std	Y+4, r25	; 0x04
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	1f 91       	pop	r17
     f42:	0f 91       	pop	r16
     f44:	08 95       	ret

00000f46 <__portable_avr_delay_cycles>:
uint16_t controller_calc_avg(uint32_t data, uint16_t cnt) {
	 uint16_t avg = 0;
	 
	 avg = data/cnt;
	 return avg;
}
     f46:	04 c0       	rjmp	.+8      	; 0xf50 <__portable_avr_delay_cycles+0xa>
     f48:	61 50       	subi	r22, 0x01	; 1
     f4a:	71 09       	sbc	r23, r1
     f4c:	81 09       	sbc	r24, r1
     f4e:	91 09       	sbc	r25, r1
     f50:	61 15       	cp	r22, r1
     f52:	71 05       	cpc	r23, r1
     f54:	81 05       	cpc	r24, r1
     f56:	91 05       	cpc	r25, r1
     f58:	b9 f7       	brne	.-18     	; 0xf48 <__portable_avr_delay_cycles+0x2>
     f5a:	08 95       	ret

00000f5c <usart_tx_at>:
     f5c:	0f 93       	push	r16
     f5e:	1f 93       	push	r17
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	eb 01       	movw	r28, r22
     f66:	68 81       	ld	r22, Y
     f68:	66 23       	and	r22, r22
     f6a:	39 f0       	breq	.+14     	; 0xf7a <usart_tx_at+0x1e>
     f6c:	8c 01       	movw	r16, r24
     f6e:	21 96       	adiw	r28, 0x01	; 1
     f70:	c8 01       	movw	r24, r16
     f72:	71 dd       	rcall	.-1310   	; 0xa56 <usart_putchar>
     f74:	69 91       	ld	r22, Y+
     f76:	61 11       	cpse	r22, r1
     f78:	fb cf       	rjmp	.-10     	; 0xf70 <usart_tx_at+0x14>
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	1f 91       	pop	r17
     f80:	0f 91       	pop	r16
     f82:	08 95       	ret

00000f84 <at_timeout_start>:
     f84:	e0 e0       	ldi	r30, 0x00	; 0
     f86:	f8 e0       	ldi	r31, 0x08	; 8
     f88:	84 85       	ldd	r24, Z+12	; 0x0c
     f8a:	81 60       	ori	r24, 0x01	; 1
     f8c:	84 87       	std	Z+12, r24	; 0x0c
     f8e:	10 a2       	std	Z+32, r1	; 0x20
     f90:	11 a2       	std	Z+33, r1	; 0x21
     f92:	78 94       	sei
     f94:	08 95       	ret

00000f96 <at_timeout_stop>:
     f96:	f8 94       	cli
     f98:	e0 e0       	ldi	r30, 0x00	; 0
     f9a:	f8 e0       	ldi	r31, 0x08	; 8
     f9c:	84 85       	ldd	r24, Z+12	; 0x0c
     f9e:	81 60       	ori	r24, 0x01	; 1
     fa0:	84 87       	std	Z+12, r24	; 0x0c
     fa2:	08 95       	ret

00000fa4 <usart_rx_at>:
     fa4:	cf 93       	push	r28
     fa6:	df 93       	push	r29
     fa8:	ec 01       	movw	r28, r24
     faa:	ec df       	rcall	.-40     	; 0xf84 <at_timeout_start>
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	90 91 30 21 	lds	r25, 0x2130	; 0x802130 <status_at_timeout>
     fb2:	88 23       	and	r24, r24
     fb4:	2c f0       	brlt	.+10     	; 0xfc0 <usart_rx_at+0x1c>
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	91 11       	cpse	r25, r1
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	81 11       	cpse	r24, r1
     fbe:	f6 cf       	rjmp	.-20     	; 0xfac <usart_rx_at+0x8>
     fc0:	ea df       	rcall	.-44     	; 0xf96 <at_timeout_stop>
     fc2:	88 81       	ld	r24, Y
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	08 95       	ret

00000fca <at_response>:
     fca:	cf 92       	push	r12
     fcc:	df 92       	push	r13
     fce:	ff 92       	push	r15
     fd0:	0f 93       	push	r16
     fd2:	1f 93       	push	r17
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	e2 97       	sbiw	r28, 0x32	; 50
     fde:	cd bf       	out	0x3d, r28	; 61
     fe0:	de bf       	out	0x3e, r29	; 62
     fe2:	6c 01       	movw	r12, r24
     fe4:	10 92 30 21 	sts	0x2130, r1	; 0x802130 <status_at_timeout>
     fe8:	80 91 30 21 	lds	r24, 0x2130	; 0x802130 <status_at_timeout>
     fec:	81 11       	cpse	r24, r1
     fee:	50 c0       	rjmp	.+160    	; 0x1090 <at_response+0xc6>
     ff0:	f1 2c       	mov	r15, r1
     ff2:	0f 2d       	mov	r16, r15
     ff4:	10 e0       	ldi	r17, 0x00	; 0
     ff6:	c6 01       	movw	r24, r12
     ff8:	d5 df       	rcall	.-86     	; 0xfa4 <usart_rx_at>
     ffa:	98 01       	movw	r18, r16
     ffc:	e1 e0       	ldi	r30, 0x01	; 1
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	ec 0f       	add	r30, r28
    1002:	fd 1f       	adc	r31, r29
    1004:	e2 0f       	add	r30, r18
    1006:	f3 1f       	adc	r31, r19
    1008:	80 83       	st	Z, r24
    100a:	fe 01       	movw	r30, r28
    100c:	e2 0f       	add	r30, r18
    100e:	f3 1f       	adc	r31, r19
    1010:	91 e0       	ldi	r25, 0x01	; 1
    1012:	20 81       	ld	r18, Z
    1014:	2f 34       	cpi	r18, 0x4F	; 79
    1016:	09 f0       	breq	.+2      	; 0x101a <at_response+0x50>
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	99 23       	and	r25, r25
    101c:	41 f0       	breq	.+16     	; 0x102e <at_response+0x64>
    101e:	91 e0       	ldi	r25, 0x01	; 1
    1020:	8b 34       	cpi	r24, 0x4B	; 75
    1022:	09 f0       	breq	.+2      	; 0x1026 <at_response+0x5c>
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	99 23       	and	r25, r25
    1028:	11 f0       	breq	.+4      	; 0x102e <at_response+0x64>
    102a:	f3 94       	inc	r15
    102c:	05 c0       	rjmp	.+10     	; 0x1038 <at_response+0x6e>
    102e:	f3 94       	inc	r15
    1030:	80 91 30 21 	lds	r24, 0x2130	; 0x802130 <status_at_timeout>
    1034:	88 23       	and	r24, r24
    1036:	e9 f2       	breq	.-70     	; 0xff2 <at_response+0x28>
    1038:	6b e6       	ldi	r22, 0x6B	; 107
    103a:	70 e2       	ldi	r23, 0x20	; 32
    103c:	80 ea       	ldi	r24, 0xA0	; 160
    103e:	9a e0       	ldi	r25, 0x0A	; 10
    1040:	8d df       	rcall	.-230    	; 0xf5c <usart_tx_at>
    1042:	62 e4       	ldi	r22, 0x42	; 66
    1044:	70 e2       	ldi	r23, 0x20	; 32
    1046:	80 ea       	ldi	r24, 0xA0	; 160
    1048:	9a e0       	ldi	r25, 0x0A	; 10
    104a:	88 df       	rcall	.-240    	; 0xf5c <usart_tx_at>
    104c:	ff 20       	and	r15, r15
    104e:	99 f0       	breq	.+38     	; 0x1076 <at_response+0xac>
    1050:	ce 01       	movw	r24, r28
    1052:	01 96       	adiw	r24, 0x01	; 1
    1054:	6c 01       	movw	r12, r24
    1056:	fa 94       	dec	r15
    1058:	0f 2d       	mov	r16, r15
    105a:	10 e0       	ldi	r17, 0x00	; 0
    105c:	0f 5f       	subi	r16, 0xFF	; 255
    105e:	1f 4f       	sbci	r17, 0xFF	; 255
    1060:	08 0f       	add	r16, r24
    1062:	19 1f       	adc	r17, r25
    1064:	f6 01       	movw	r30, r12
    1066:	61 91       	ld	r22, Z+
    1068:	6f 01       	movw	r12, r30
    106a:	80 ea       	ldi	r24, 0xA0	; 160
    106c:	9a e0       	ldi	r25, 0x0A	; 10
    106e:	f3 dc       	rcall	.-1562   	; 0xa56 <usart_putchar>
    1070:	c0 16       	cp	r12, r16
    1072:	d1 06       	cpc	r13, r17
    1074:	b9 f7       	brne	.-18     	; 0x1064 <at_response+0x9a>
    1076:	6b e6       	ldi	r22, 0x6B	; 107
    1078:	70 e2       	ldi	r23, 0x20	; 32
    107a:	80 ea       	ldi	r24, 0xA0	; 160
    107c:	9a e0       	ldi	r25, 0x0A	; 10
    107e:	6e df       	rcall	.-292    	; 0xf5c <usart_tx_at>
    1080:	62 e4       	ldi	r22, 0x42	; 66
    1082:	70 e2       	ldi	r23, 0x20	; 32
    1084:	80 ea       	ldi	r24, 0xA0	; 160
    1086:	9a e0       	ldi	r25, 0x0A	; 10
    1088:	69 df       	rcall	.-302    	; 0xf5c <usart_tx_at>
    108a:	80 91 30 21 	lds	r24, 0x2130	; 0x802130 <status_at_timeout>
    108e:	0b c0       	rjmp	.+22     	; 0x10a6 <at_response+0xdc>
    1090:	6b e6       	ldi	r22, 0x6B	; 107
    1092:	70 e2       	ldi	r23, 0x20	; 32
    1094:	80 ea       	ldi	r24, 0xA0	; 160
    1096:	9a e0       	ldi	r25, 0x0A	; 10
    1098:	61 df       	rcall	.-318    	; 0xf5c <usart_tx_at>
    109a:	62 e4       	ldi	r22, 0x42	; 66
    109c:	70 e2       	ldi	r23, 0x20	; 32
    109e:	80 ea       	ldi	r24, 0xA0	; 160
    10a0:	9a e0       	ldi	r25, 0x0A	; 10
    10a2:	5c df       	rcall	.-328    	; 0xf5c <usart_tx_at>
    10a4:	e8 cf       	rjmp	.-48     	; 0x1076 <at_response+0xac>
    10a6:	e2 96       	adiw	r28, 0x32	; 50
    10a8:	cd bf       	out	0x3d, r28	; 61
    10aa:	de bf       	out	0x3e, r29	; 62
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	1f 91       	pop	r17
    10b2:	0f 91       	pop	r16
    10b4:	ff 90       	pop	r15
    10b6:	df 90       	pop	r13
    10b8:	cf 90       	pop	r12
    10ba:	08 95       	ret

000010bc <at_command_timeout_setup>:
    10bc:	e0 e0       	ldi	r30, 0x00	; 0
    10be:	f8 e0       	ldi	r31, 0x08	; 8
    10c0:	86 81       	ldd	r24, Z+6	; 0x06
    10c2:	81 60       	ori	r24, 0x01	; 1
    10c4:	86 83       	std	Z+6, r24	; 0x06
    10c6:	87 e0       	ldi	r24, 0x07	; 7
    10c8:	80 83       	st	Z, r24
    10ca:	81 81       	ldd	r24, Z+1	; 0x01
    10cc:	81 83       	std	Z+1, r24	; 0x01
    10ce:	80 e4       	ldi	r24, 0x40	; 64
    10d0:	9f e1       	ldi	r25, 0x1F	; 31
    10d2:	86 a3       	std	Z+38, r24	; 0x26
    10d4:	97 a3       	std	Z+39, r25	; 0x27
    10d6:	08 95       	ret

000010d8 <adc_result_average>:
    10d8:	cf 92       	push	r12
    10da:	df 92       	push	r13
    10dc:	ef 92       	push	r14
    10de:	ff 92       	push	r15
    10e0:	0f 93       	push	r16
    10e2:	1f 93       	push	r17
    10e4:	cf 93       	push	r28
    10e6:	df 93       	push	r29
    10e8:	1f 92       	push	r1
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
    10ee:	28 2f       	mov	r18, r24
    10f0:	0d b7       	in	r16, 0x3d	; 61
    10f2:	1e b7       	in	r17, 0x3e	; 62
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	4d b7       	in	r20, 0x3d	; 61
    10fc:	5e b7       	in	r21, 0x3e	; 62
    10fe:	48 1b       	sub	r20, r24
    1100:	59 0b       	sbc	r21, r25
    1102:	4d bf       	out	0x3d, r20	; 61
    1104:	5e bf       	out	0x3e, r21	; 62
    1106:	ad b7       	in	r26, 0x3d	; 61
    1108:	be b7       	in	r27, 0x3e	; 62
    110a:	11 96       	adiw	r26, 0x01	; 1
    110c:	22 23       	and	r18, r18
    110e:	f9 f0       	breq	.+62     	; 0x114e <adc_result_average+0x76>
    1110:	c1 2c       	mov	r12, r1
    1112:	d1 2c       	mov	r13, r1
    1114:	76 01       	movw	r14, r12
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	e0 e0       	ldi	r30, 0x00	; 0
    111a:	f2 e0       	ldi	r31, 0x02	; 2
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	9f b7       	in	r25, 0x3f	; 63
    1120:	99 83       	std	Y+1, r25	; 0x01
    1122:	f8 94       	cli
    1124:	49 81       	ldd	r20, Y+1	; 0x01
    1126:	90 81       	ld	r25, Z
    1128:	94 60       	ori	r25, 0x04	; 4
    112a:	90 83       	st	Z, r25
    112c:	4f bf       	out	0x3f, r20	; 63
    112e:	96 81       	ldd	r25, Z+6	; 0x06
    1130:	90 ff       	sbrs	r25, 0
    1132:	fd cf       	rjmp	.-6      	; 0x112e <adc_result_average+0x56>
    1134:	86 83       	std	Z+6, r24	; 0x06
    1136:	44 a1       	ldd	r20, Z+36	; 0x24
    1138:	55 a1       	ldd	r21, Z+37	; 0x25
    113a:	4d 93       	st	X+, r20
    113c:	5d 93       	st	X+, r21
    113e:	c4 0e       	add	r12, r20
    1140:	d5 1e       	adc	r13, r21
    1142:	e1 1c       	adc	r14, r1
    1144:	f1 1c       	adc	r15, r1
    1146:	3f 5f       	subi	r19, 0xFF	; 255
    1148:	23 13       	cpse	r18, r19
    114a:	e9 cf       	rjmp	.-46     	; 0x111e <adc_result_average+0x46>
    114c:	03 c0       	rjmp	.+6      	; 0x1154 <adc_result_average+0x7c>
    114e:	c1 2c       	mov	r12, r1
    1150:	d1 2c       	mov	r13, r1
    1152:	76 01       	movw	r14, r12
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	40 e0       	ldi	r20, 0x00	; 0
    1158:	50 e0       	ldi	r21, 0x00	; 0
    115a:	c7 01       	movw	r24, r14
    115c:	b6 01       	movw	r22, r12
    115e:	a9 d2       	rcall	.+1362   	; 0x16b2 <__udivmodsi4>
    1160:	c9 01       	movw	r24, r18
    1162:	0d bf       	out	0x3d, r16	; 61
    1164:	1e bf       	out	0x3e, r17	; 62
    1166:	0f 90       	pop	r0
    1168:	df 91       	pop	r29
    116a:	cf 91       	pop	r28
    116c:	1f 91       	pop	r17
    116e:	0f 91       	pop	r16
    1170:	ff 90       	pop	r15
    1172:	ef 90       	pop	r14
    1174:	df 90       	pop	r13
    1176:	cf 90       	pop	r12
    1178:	08 95       	ret

0000117a <controller_measure>:
    117a:	0f 93       	push	r16
    117c:	1f 93       	push	r17
    117e:	cf 93       	push	r28
    1180:	df 93       	push	r29
    1182:	8b 01       	movw	r16, r22
    1184:	a9 df       	rcall	.-174    	; 0x10d8 <adc_result_average>
    1186:	ec 01       	movw	r28, r24
    1188:	df 93       	push	r29
    118a:	8f 93       	push	r24
    118c:	84 e4       	ldi	r24, 0x44	; 68
    118e:	90 e2       	ldi	r25, 0x20	; 32
    1190:	9f 93       	push	r25
    1192:	8f 93       	push	r24
    1194:	84 ec       	ldi	r24, 0xC4	; 196
    1196:	90 e2       	ldi	r25, 0x20	; 32
    1198:	9f 93       	push	r25
    119a:	8f 93       	push	r24
    119c:	e1 d2       	rcall	.+1474   	; 0x1760 <sprintf>
    119e:	64 ec       	ldi	r22, 0xC4	; 196
    11a0:	70 e2       	ldi	r23, 0x20	; 32
    11a2:	80 ea       	ldi	r24, 0xA0	; 160
    11a4:	9a e0       	ldi	r25, 0x0A	; 10
    11a6:	da de       	rcall	.-588    	; 0xf5c <usart_tx_at>
    11a8:	f8 01       	movw	r30, r16
    11aa:	80 81       	ld	r24, Z
    11ac:	91 81       	ldd	r25, Z+1	; 0x01
    11ae:	9e 01       	movw	r18, r28
    11b0:	28 1b       	sub	r18, r24
    11b2:	39 0b       	sbc	r19, r25
    11b4:	c9 01       	movw	r24, r18
    11b6:	b9 01       	movw	r22, r18
    11b8:	99 23       	and	r25, r25
    11ba:	24 f4       	brge	.+8      	; 0x11c4 <controller_measure+0x4a>
    11bc:	66 27       	eor	r22, r22
    11be:	77 27       	eor	r23, r23
    11c0:	62 1b       	sub	r22, r18
    11c2:	73 0b       	sbc	r23, r19
    11c4:	f8 01       	movw	r30, r16
    11c6:	24 81       	ldd	r18, Z+4	; 0x04
    11c8:	35 81       	ldd	r19, Z+5	; 0x05
    11ca:	33 23       	and	r19, r19
    11cc:	1c f4       	brge	.+6      	; 0x11d4 <controller_measure+0x5a>
    11ce:	31 95       	neg	r19
    11d0:	21 95       	neg	r18
    11d2:	31 09       	sbc	r19, r1
    11d4:	41 e0       	ldi	r20, 0x01	; 1
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	26 17       	cp	r18, r22
    11e4:	37 07       	cpc	r19, r23
    11e6:	0c f0       	brlt	.+2      	; 0x11ea <controller_measure+0x70>
    11e8:	40 e0       	ldi	r20, 0x00	; 0
    11ea:	44 23       	and	r20, r20
    11ec:	61 f0       	breq	.+24     	; 0x1206 <controller_measure+0x8c>
    11ee:	21 e0       	ldi	r18, 0x01	; 1
    11f0:	f8 01       	movw	r30, r16
    11f2:	46 85       	ldd	r20, Z+14	; 0x0e
    11f4:	57 85       	ldd	r21, Z+15	; 0x0f
    11f6:	45 2b       	or	r20, r21
    11f8:	09 f4       	brne	.+2      	; 0x11fc <controller_measure+0x82>
    11fa:	20 e0       	ldi	r18, 0x00	; 0
    11fc:	22 23       	and	r18, r18
    11fe:	19 f0       	breq	.+6      	; 0x1206 <controller_measure+0x8c>
    1200:	f8 01       	movw	r30, r16
    1202:	84 83       	std	Z+4, r24	; 0x04
    1204:	95 83       	std	Z+5, r25	; 0x05
    1206:	f8 01       	movw	r30, r16
    1208:	c0 83       	st	Z, r28
    120a:	d1 83       	std	Z+1, r29	; 0x01
    120c:	80 85       	ldd	r24, Z+8	; 0x08
    120e:	91 85       	ldd	r25, Z+9	; 0x09
    1210:	c8 17       	cp	r28, r24
    1212:	d9 07       	cpc	r29, r25
    1214:	10 f4       	brcc	.+4      	; 0x121a <controller_measure+0xa0>
    1216:	c0 87       	std	Z+8, r28	; 0x08
    1218:	d1 87       	std	Z+9, r29	; 0x09
    121a:	f8 01       	movw	r30, r16
    121c:	82 85       	ldd	r24, Z+10	; 0x0a
    121e:	93 85       	ldd	r25, Z+11	; 0x0b
    1220:	8c 17       	cp	r24, r28
    1222:	9d 07       	cpc	r25, r29
    1224:	10 f4       	brcc	.+4      	; 0x122a <controller_measure+0xb0>
    1226:	c2 87       	std	Z+10, r28	; 0x0a
    1228:	d3 87       	std	Z+11, r29	; 0x0b
    122a:	ce 01       	movw	r24, r28
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	08 95       	ret

00001236 <controller_tx>:

void controller_tx(uint16_t array[TX_DATA_SIZE]) {
    1236:	0f 93       	push	r16
    1238:	1f 93       	push	r17
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    123e:	ec 01       	movw	r28, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1240:	4a e0       	ldi	r20, 0x0A	; 10
    1242:	6b e2       	ldi	r22, 0x2B	; 43
    1244:	71 e2       	ldi	r23, 0x21	; 33
    1246:	8e 81       	ldd	r24, Y+6	; 0x06
    1248:	9f 81       	ldd	r25, Y+7	; 0x07
    124a:	67 d2       	rcall	.+1230   	; 0x171a <__itoa_ncheck>
    124c:	4a e0       	ldi	r20, 0x0A	; 10
    124e:	66 e2       	ldi	r22, 0x26	; 38
    1250:	71 e2       	ldi	r23, 0x21	; 33
    1252:	88 85       	ldd	r24, Y+8	; 0x08
    1254:	99 85       	ldd	r25, Y+9	; 0x09
    1256:	61 d2       	rcall	.+1218   	; 0x171a <__itoa_ncheck>
    1258:	4a e0       	ldi	r20, 0x0A	; 10
    125a:	61 e2       	ldi	r22, 0x21	; 33
    125c:	71 e2       	ldi	r23, 0x21	; 33
    125e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1260:	9b 85       	ldd	r25, Y+11	; 0x0b
    1262:	5b d2       	rcall	.+1206   	; 0x171a <__itoa_ncheck>
    1264:	4a e0       	ldi	r20, 0x0A	; 10
    1266:	6c e1       	ldi	r22, 0x1C	; 28
    1268:	71 e2       	ldi	r23, 0x21	; 33
    126a:	8c 81       	ldd	r24, Y+4	; 0x04
    126c:	9d 81       	ldd	r25, Y+5	; 0x05
    126e:	55 d2       	rcall	.+1194   	; 0x171a <__itoa_ncheck>
    itoa(array[POSITION_MIN], loadcell_adc_result_min_ascii, 10); //convert to hex to lower transferred bytes.
    itoa(array[POSITION_MAX], loadcell_adc_result_max_ascii, 10); //convert to hex to lower transferred bytes.
    itoa(array[POSITION_TRAN_MAX], loadcell_adc_result_tran_ascii, 10); //convert to hex to lower transferred bytes.
    
	//reset parameters
	array[0] = 0;
    1270:	18 82       	st	Y, r1
    1272:	19 82       	std	Y+1, r1	; 0x01
	array[1] = 0;
    1274:	1a 82       	std	Y+2, r1	; 0x02
    1276:	1b 82       	std	Y+3, r1	; 0x03
	array[2] = 0;
    1278:	1c 82       	std	Y+4, r1	; 0x04
    127a:	1d 82       	std	Y+5, r1	; 0x05
	array[3] = 0;
    127c:	1e 82       	std	Y+6, r1	; 0x06
    127e:	1f 82       	std	Y+7, r1	; 0x07
	array[4] = 0;
    1280:	18 86       	std	Y+8, r1	; 0x08
    1282:	19 86       	std	Y+9, r1	; 0x09
	array[5] = 0;
    1284:	1a 86       	std	Y+10, r1	; 0x0a
    1286:	1b 86       	std	Y+11, r1	; 0x0b
           
                 
    year = 17;
    1288:	81 e1       	ldi	r24, 0x11	; 17
    128a:	80 93 1b 21 	sts	0x211B, r24	; 0x80211b <year>
    128e:	40 e1       	ldi	r20, 0x10	; 16
    1290:	63 e1       	ldi	r22, 0x13	; 19
    1292:	71 e2       	ldi	r23, 0x21	; 33
    1294:	81 e1       	ldi	r24, 0x11	; 17
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	40 d2       	rcall	.+1152   	; 0x171a <__itoa_ncheck>
    itoa(year, year_ascii,16);
    month = 6;
    129a:	86 e0       	ldi	r24, 0x06	; 6
    129c:	80 93 1a 21 	sts	0x211A, r24	; 0x80211a <month>
    12a0:	40 e1       	ldi	r20, 0x10	; 16
    12a2:	60 e1       	ldi	r22, 0x10	; 16
    12a4:	71 e2       	ldi	r23, 0x21	; 33
    12a6:	86 e0       	ldi	r24, 0x06	; 6
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    itoa(month, month_ascii,16);
    day = 7;
    12aa:	37 d2       	rcall	.+1134   	; 0x171a <__itoa_ncheck>
    12ac:	87 e0       	ldi	r24, 0x07	; 7
    12ae:	80 93 19 21 	sts	0x2119, r24	; 0x802119 <day>
    12b2:	40 e1       	ldi	r20, 0x10	; 16
    12b4:	6d e0       	ldi	r22, 0x0D	; 13
    12b6:	71 e2       	ldi	r23, 0x21	; 33
    12b8:	87 e0       	ldi	r24, 0x07	; 7
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    itoa(day, day_ascii,16);
    hour = 13;
    12bc:	2e d2       	rcall	.+1116   	; 0x171a <__itoa_ncheck>
    12be:	8d e0       	ldi	r24, 0x0D	; 13
    12c0:	80 93 18 21 	sts	0x2118, r24	; 0x802118 <hour>
    12c4:	40 e1       	ldi	r20, 0x10	; 16
    12c6:	6a e0       	ldi	r22, 0x0A	; 10
    12c8:	71 e2       	ldi	r23, 0x21	; 33
    12ca:	8d e0       	ldi	r24, 0x0D	; 13
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    itoa(hour, hour_ascii,16);
    minute++;
    12ce:	25 d2       	rcall	.+1098   	; 0x171a <__itoa_ncheck>
    12d0:	80 91 17 21 	lds	r24, 0x2117	; 0x802117 <minute>
    12d4:	8f 5f       	subi	r24, 0xFF	; 255
    12d6:	80 93 17 21 	sts	0x2117, r24	; 0x802117 <minute>
    12da:	40 e1       	ldi	r20, 0x10	; 16
    12dc:	67 e0       	ldi	r22, 0x07	; 7
    12de:	71 e2       	ldi	r23, 0x21	; 33
    itoa(minute, minute_ascii, 16);
    second = 0;
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	1b d2       	rcall	.+1078   	; 0x171a <__itoa_ncheck>
    12e4:	10 92 16 21 	sts	0x2116, r1	; 0x802116 <second>
    12e8:	40 e1       	ldi	r20, 0x10	; 16
    12ea:	64 e0       	ldi	r22, 0x04	; 4
    12ec:	71 e2       	ldi	r23, 0x21	; 33
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    itoa(second, second_ascii,16);
                 
    strcpy(transfer_data, loadcell_adc_result_ascii);
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	13 d2       	rcall	.+1062   	; 0x171a <__itoa_ncheck>
    12f4:	6b e2       	ldi	r22, 0x2B	; 43
    12f6:	71 e2       	ldi	r23, 0x21	; 33
    12f8:	84 ec       	ldi	r24, 0xC4	; 196
    12fa:	90 e2       	ldi	r25, 0x20	; 32
    strcat(transfer_data, ",");
    12fc:	07 d2       	rcall	.+1038   	; 0x170c <strcpy>
    12fe:	c4 ec       	ldi	r28, 0xC4	; 196
    1300:	d0 e2       	ldi	r29, 0x20	; 32
    1302:	fe 01       	movw	r30, r28
    1304:	01 90       	ld	r0, Z+
    1306:	00 20       	and	r0, r0
    1308:	e9 f7       	brne	.-6      	; 0x1304 <controller_tx+0xce>
    130a:	31 97       	sbiw	r30, 0x01	; 1
    130c:	0c e2       	ldi	r16, 0x2C	; 44
    130e:	10 e0       	ldi	r17, 0x00	; 0
    strcat(transfer_data, loadcell_adc_result_min_ascii);
    1310:	00 83       	st	Z, r16
    1312:	11 83       	std	Z+1, r17	; 0x01
    1314:	66 e2       	ldi	r22, 0x26	; 38
    1316:	71 e2       	ldi	r23, 0x21	; 33
    strcat(transfer_data, ",");
    1318:	ce 01       	movw	r24, r28
    131a:	ed d1       	rcall	.+986    	; 0x16f6 <strcat>
    131c:	fe 01       	movw	r30, r28
    131e:	01 90       	ld	r0, Z+
    1320:	00 20       	and	r0, r0
    1322:	e9 f7       	brne	.-6      	; 0x131e <controller_tx+0xe8>
    1324:	31 97       	sbiw	r30, 0x01	; 1
    strcat(transfer_data, loadcell_adc_result_max_ascii);
    1326:	00 83       	st	Z, r16
    1328:	11 83       	std	Z+1, r17	; 0x01
    132a:	61 e2       	ldi	r22, 0x21	; 33
    132c:	71 e2       	ldi	r23, 0x21	; 33
    strcat(transfer_data, ",");
    132e:	ce 01       	movw	r24, r28
    1330:	e2 d1       	rcall	.+964    	; 0x16f6 <strcat>
    1332:	fe 01       	movw	r30, r28
    1334:	01 90       	ld	r0, Z+
    1336:	00 20       	and	r0, r0
    1338:	e9 f7       	brne	.-6      	; 0x1334 <controller_tx+0xfe>
    133a:	31 97       	sbiw	r30, 0x01	; 1
    strcat(transfer_data, loadcell_adc_result_tran_ascii);
    133c:	00 83       	st	Z, r16
    133e:	11 83       	std	Z+1, r17	; 0x01
    1340:	6c e1       	ldi	r22, 0x1C	; 28
    1342:	71 e2       	ldi	r23, 0x21	; 33
	strcat(transfer_data, ",");
    1344:	ce 01       	movw	r24, r28
    1346:	d7 d1       	rcall	.+942    	; 0x16f6 <strcat>
    1348:	fe 01       	movw	r30, r28
    134a:	01 90       	ld	r0, Z+
    134c:	00 20       	and	r0, r0
    134e:	e9 f7       	brne	.-6      	; 0x134a <controller_tx+0x114>
    strcat(transfer_data, hour_ascii);
    strcat(transfer_data, minute_ascii);
    strcat(transfer_data, second_ascii);
    */

    usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_HEADER);
    1350:	31 97       	sbiw	r30, 0x01	; 1
    1352:	00 83       	st	Z, r16
    1354:	11 83       	std	Z+1, r17	; 0x01
    1356:	61 e4       	ldi	r22, 0x41	; 65
    1358:	70 e2       	ldi	r23, 0x20	; 32
	int i=0;
	while(transfer_data[i] != 0x00) {
    135a:	80 ea       	ldi	r24, 0xA0	; 160
    135c:	9a e0       	ldi	r25, 0x0A	; 10
    135e:	fe dd       	rcall	.-1028   	; 0xf5c <usart_tx_at>
    1360:	68 81       	ld	r22, Y
		usart_putchar(USART_SERIAL_EXAMPLE, transfer_data[i]);
    1362:	66 23       	and	r22, r22
    1364:	41 f0       	breq	.+16     	; 0x1376 <controller_tx+0x140>
    1366:	c5 ec       	ldi	r28, 0xC5	; 197
    1368:	d0 e2       	ldi	r29, 0x20	; 32
    strcat(transfer_data, second_ascii);
    */

    usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_HEADER);
	int i=0;
	while(transfer_data[i] != 0x00) {
    136a:	80 ea       	ldi	r24, 0xA0	; 160
    136c:	9a e0       	ldi	r25, 0x0A	; 10
    136e:	73 db       	rcall	.-2330   	; 0xa56 <usart_putchar>
		usart_putchar(USART_SERIAL_EXAMPLE, transfer_data[i]);
		i++;
	}
    //usart_tx_at(USART_SERIAL_EXAMPLE, transfer_data);
    usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_HEADER);
    1370:	69 91       	ld	r22, Y+
    1372:	61 11       	cpse	r22, r1
    1374:	fa cf       	rjmp	.-12     	; 0x136a <controller_tx+0x134>
    1376:	61 e4       	ldi	r22, 0x41	; 65
    1378:	70 e2       	ldi	r23, 0x20	; 32
    137a:	80 ea       	ldi	r24, 0xA0	; 160
                
}
    137c:	9a e0       	ldi	r25, 0x0A	; 10
    137e:	ee dd       	rcall	.-1060   	; 0xf5c <usart_tx_at>
    1380:	df 91       	pop	r29
    1382:	cf 91       	pop	r28
    1384:	1f 91       	pop	r17
    1386:	0f 91       	pop	r16
    1388:	08 95       	ret

0000138a <reset_tx_data>:

void reset_tx_data(uint16_t array[TX_DATA_SIZE]) {
    138a:	fc 01       	movw	r30, r24
	array[POSITION_PREV] = 0;
    138c:	10 82       	st	Z, r1
    138e:	11 82       	std	Z+1, r1	; 0x01
	array[POSITION_TRAN_PREV] = 0;
    1390:	12 82       	std	Z+2, r1	; 0x02
    1392:	13 82       	std	Z+3, r1	; 0x03
	array[POSITION_TRAN_MAX] = 0;
    1394:	14 82       	std	Z+4, r1	; 0x04
    1396:	15 82       	std	Z+5, r1	; 0x05
	array[POSITION_AVG] = 0;
    1398:	16 82       	std	Z+6, r1	; 0x06
    139a:	17 82       	std	Z+7, r1	; 0x07
	array[POSITION_MIN] = MIN_DATA_RESET;
    139c:	8f ef       	ldi	r24, 0xFF	; 255
    139e:	9f ef       	ldi	r25, 0xFF	; 255
    13a0:	80 87       	std	Z+8, r24	; 0x08
    13a2:	91 87       	std	Z+9, r25	; 0x09
	array[POSITION_MAX] = 0;
    13a4:	12 86       	std	Z+10, r1	; 0x0a
    13a6:	13 86       	std	Z+11, r1	; 0x0b
	array[POSITION_ACCU_CNT] = 0;
    13a8:	16 86       	std	Z+14, r1	; 0x0e
    13aa:	17 86       	std	Z+15, r1	; 0x0f
    13ac:	08 95       	ret

000013ae <__vector_14>:
	
}

ISR(TCC0_OVF_vect) {
    13ae:	1f 92       	push	r1
    13b0:	0f 92       	push	r0
    13b2:	0f b6       	in	r0, 0x3f	; 63
    13b4:	0f 92       	push	r0
    13b6:	11 24       	eor	r1, r1
    13b8:	08 b6       	in	r0, 0x38	; 56
    13ba:	0f 92       	push	r0
    13bc:	18 be       	out	0x38, r1	; 56
    13be:	09 b6       	in	r0, 0x39	; 57
    13c0:	0f 92       	push	r0
    13c2:	19 be       	out	0x39, r1	; 57
    13c4:	0b b6       	in	r0, 0x3b	; 59
    13c6:	0f 92       	push	r0
    13c8:	1b be       	out	0x3b, r1	; 59
    13ca:	2f 93       	push	r18
    13cc:	3f 93       	push	r19
    13ce:	4f 93       	push	r20
    13d0:	5f 93       	push	r21
    13d2:	6f 93       	push	r22
    13d4:	7f 93       	push	r23
    13d6:	8f 93       	push	r24
    13d8:	9f 93       	push	r25
    13da:	af 93       	push	r26
    13dc:	bf 93       	push	r27
    13de:	ef 93       	push	r30
	at_timeout_stop();
    13e0:	ff 93       	push	r31
	status_at_timeout = 1;
    13e2:	d9 dd       	rcall	.-1102   	; 0xf96 <at_timeout_stop>
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	80 93 30 21 	sts	0x2130, r24	; 0x802130 <status_at_timeout>
}
    13ea:	ff 91       	pop	r31
    13ec:	ef 91       	pop	r30
    13ee:	bf 91       	pop	r27
    13f0:	af 91       	pop	r26
    13f2:	9f 91       	pop	r25
    13f4:	8f 91       	pop	r24
    13f6:	7f 91       	pop	r23
    13f8:	6f 91       	pop	r22
    13fa:	5f 91       	pop	r21
    13fc:	4f 91       	pop	r20
    13fe:	3f 91       	pop	r19
    1400:	2f 91       	pop	r18
    1402:	0f 90       	pop	r0
    1404:	0b be       	out	0x3b, r0	; 59
    1406:	0f 90       	pop	r0
    1408:	09 be       	out	0x39, r0	; 57
    140a:	0f 90       	pop	r0
    140c:	08 be       	out	0x38, r0	; 56
    140e:	0f 90       	pop	r0
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	0f 90       	pop	r0
    1414:	1f 90       	pop	r1
    1416:	18 95       	reti

00001418 <__vector_10>:


ISR(RTC_OVF_vect)
{
    1418:	1f 92       	push	r1
    141a:	0f 92       	push	r0
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	0f 92       	push	r0
    1420:	11 24       	eor	r1, r1
    1422:	08 b6       	in	r0, 0x38	; 56
    1424:	0f 92       	push	r0
    1426:	18 be       	out	0x38, r1	; 56
    1428:	09 b6       	in	r0, 0x39	; 57
    142a:	0f 92       	push	r0
    142c:	19 be       	out	0x39, r1	; 57
    142e:	0a b6       	in	r0, 0x3a	; 58
    1430:	0f 92       	push	r0
    1432:	1a be       	out	0x3a, r1	; 58
    1434:	0b b6       	in	r0, 0x3b	; 59
    1436:	0f 92       	push	r0
    1438:	1b be       	out	0x3b, r1	; 59
    143a:	2f 93       	push	r18
    143c:	3f 93       	push	r19
    143e:	4f 93       	push	r20
    1440:	5f 93       	push	r21
    1442:	6f 93       	push	r22
    1444:	7f 93       	push	r23
    1446:	8f 93       	push	r24
    1448:	9f 93       	push	r25
    144a:	af 93       	push	r26
    144c:	bf 93       	push	r27
    144e:	cf 93       	push	r28
    1450:	df 93       	push	r29
    1452:	ef 93       	push	r30
    1454:	ff 93       	push	r31
	cli(); //disable interrupts. Other way of disabling and resetting?
    1456:	f8 94       	cli
	//rtc_data.counter_high++;
	
	//led_blink(1);
	
	
	if (controller_state == MEASURE)
    1458:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <controller_state>
    145c:	81 30       	cpi	r24, 0x01	; 1
    145e:	c1 f4       	brne	.+48     	; 0x1490 <__vector_10+0x78>
	{
		accu_data += controller_measure(9, &tx_data); //measure with averaging, and accumulate.
    1460:	65 e4       	ldi	r22, 0x45	; 69
    1462:	71 e2       	ldi	r23, 0x21	; 33
    1464:	89 e0       	ldi	r24, 0x09	; 9
    1466:	89 de       	rcall	.-750    	; 0x117a <controller_measure>
    1468:	40 91 31 21 	lds	r20, 0x2131	; 0x802131 <accu_data>
    146c:	50 91 32 21 	lds	r21, 0x2132	; 0x802132 <accu_data+0x1>
    1470:	60 91 33 21 	lds	r22, 0x2133	; 0x802133 <accu_data+0x2>
    1474:	70 91 34 21 	lds	r23, 0x2134	; 0x802134 <accu_data+0x3>
    1478:	48 0f       	add	r20, r24
    147a:	59 1f       	adc	r21, r25
    147c:	61 1d       	adc	r22, r1
    147e:	71 1d       	adc	r23, r1
    1480:	40 93 31 21 	sts	0x2131, r20	; 0x802131 <accu_data>
    1484:	50 93 32 21 	sts	0x2132, r21	; 0x802132 <accu_data+0x1>
    1488:	60 93 33 21 	sts	0x2133, r22	; 0x802133 <accu_data+0x2>
    148c:	70 93 34 21 	sts	0x2134, r23	; 0x802134 <accu_data+0x3>
	}
	
	tx_data[POSITION_ACCU_CNT]++; //increase accumulation counter.
    1490:	e5 e4       	ldi	r30, 0x45	; 69
    1492:	f1 e2       	ldi	r31, 0x21	; 33
    1494:	26 85       	ldd	r18, Z+14	; 0x0e
    1496:	37 85       	ldd	r19, Z+15	; 0x0f
    1498:	2f 5f       	subi	r18, 0xFF	; 255
    149a:	3f 4f       	sbci	r19, 0xFF	; 255
    149c:	26 87       	std	Z+14, r18	; 0x0e
    149e:	37 87       	std	Z+15, r19	; 0x0f
				
	if (tx_data[POSITION_ACCU_CNT] > (TAVG/TS)) //if accumulation limit is reached.
    14a0:	25 30       	cpi	r18, 0x05	; 5
    14a2:	31 05       	cpc	r19, r1
    14a4:	e0 f0       	brcs	.+56     	; 0x14de <__vector_10+0xc6>
	{
		tx_data[POSITION_AVG] = controller_calc_avg(accu_data, tx_data[POSITION_ACCU_CNT]); //calc and store average.
    14a6:	ef 01       	movw	r28, r30
    14a8:	40 e0       	ldi	r20, 0x00	; 0
    14aa:	50 e0       	ldi	r21, 0x00	; 0
    14ac:	60 91 31 21 	lds	r22, 0x2131	; 0x802131 <accu_data>
    14b0:	70 91 32 21 	lds	r23, 0x2132	; 0x802132 <accu_data+0x1>
    14b4:	80 91 33 21 	lds	r24, 0x2133	; 0x802133 <accu_data+0x2>
    14b8:	90 91 34 21 	lds	r25, 0x2134	; 0x802134 <accu_data+0x3>
    14bc:	fa d0       	rcall	.+500    	; 0x16b2 <__udivmodsi4>
    14be:	2e 83       	std	Y+6, r18	; 0x06
    14c0:	3f 83       	std	Y+7, r19	; 0x07
				
		//reset parameters
		accu_data = 0;
    14c2:	10 92 31 21 	sts	0x2131, r1	; 0x802131 <accu_data>
    14c6:	10 92 32 21 	sts	0x2132, r1	; 0x802132 <accu_data+0x1>
    14ca:	10 92 33 21 	sts	0x2133, r1	; 0x802133 <accu_data+0x2>
    14ce:	10 92 34 21 	sts	0x2134, r1	; 0x802134 <accu_data+0x3>
		tx_data[POSITION_ACCU_CNT] = 0;
    14d2:	1e 86       	std	Y+14, r1	; 0x0e
    14d4:	1f 86       	std	Y+15, r1	; 0x0f
		
		controller_state = TX_DATA;
    14d6:	84 e0       	ldi	r24, 0x04	; 4
    14d8:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <controller_state>
    14dc:	04 c0       	rjmp	.+8      	; 0x14e6 <__vector_10+0xce>
		usart_tx_at(USART_SERIAL_EXAMPLE, transfer_data);
		usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_HEADER);
		*/
	}
	
	if (controller_state == TX_DATA)
    14de:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <controller_state>
    14e2:	84 30       	cpi	r24, 0x04	; 4
	{
		controller_tx(&tx_data);
    14e4:	49 f4       	brne	.+18     	; 0x14f8 <__vector_10+0xe0>
    14e6:	85 e4       	ldi	r24, 0x45	; 69
		reset_tx_data(&tx_data);
    14e8:	91 e2       	ldi	r25, 0x21	; 33
    14ea:	a5 de       	rcall	.-694    	; 0x1236 <controller_tx>
    14ec:	85 e4       	ldi	r24, 0x45	; 69
    14ee:	91 e2       	ldi	r25, 0x21	; 33
		
		controller_state = MEASURE;
    14f0:	4c df       	rcall	.-360    	; 0x138a <reset_tx_data>
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <controller_state>
		
	}
	
	//usart_putchar(USART_SERIAL_EXAMPLE, 0x30+accu_data_cnt);
	//WRITE RTC value = 0!
	RTC.CNT = 0;
    14f8:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    14fc:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
	sei(); //enable interrupt, go to sleep
}
    1500:	78 94       	sei
    1502:	ff 91       	pop	r31
    1504:	ef 91       	pop	r30
    1506:	df 91       	pop	r29
    1508:	cf 91       	pop	r28
    150a:	bf 91       	pop	r27
    150c:	af 91       	pop	r26
    150e:	9f 91       	pop	r25
    1510:	8f 91       	pop	r24
    1512:	7f 91       	pop	r23
    1514:	6f 91       	pop	r22
    1516:	5f 91       	pop	r21
    1518:	4f 91       	pop	r20
    151a:	3f 91       	pop	r19
    151c:	2f 91       	pop	r18
    151e:	0f 90       	pop	r0
    1520:	0b be       	out	0x3b, r0	; 59
    1522:	0f 90       	pop	r0
    1524:	0a be       	out	0x3a, r0	; 58
    1526:	0f 90       	pop	r0
    1528:	09 be       	out	0x39, r0	; 57
    152a:	0f 90       	pop	r0
    152c:	08 be       	out	0x38, r0	; 56
    152e:	0f 90       	pop	r0
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	0f 90       	pop	r0
    1534:	1f 90       	pop	r1
    1536:	18 95       	reti

00001538 <main>:


/*! \brief Main function.
 */
int main(void)
{
    1538:	cf 93       	push	r28
    153a:	df 93       	push	r29
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	2b 97       	sbiw	r28, 0x0b	; 11
    1542:	cd bf       	out	0x3d, r28	; 61
    1544:	de bf       	out	0x3e, r29	; 62
		
	/* Initialize the board.
	 * The board-specific conf_board.h file contains the configuration of
	 * the board initialization.
	 */
	board_init();
    1546:	f8 94       	cli
	//pmic_init(); //needed for TC ASF code. Check if needed in real implementation.
	PMIC.CTRL = 0x01; //low level interrupt
    1548:	57 da       	rcall	.-2898   	; 0x9f8 <board_init>
    154a:	11 e0       	ldi	r17, 0x01	; 1
    154c:	10 93 a2 00 	sts	0x00A2, r17	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	//sysclk_init(); //fucks up the at_response....AHGHHHHHHHHHHHHH
	
	//LED setup
	PORTQ.DIR |= (1<<3);
    1550:	e0 ec       	ldi	r30, 0xC0	; 192
    1552:	f7 e0       	ldi	r31, 0x07	; 7
    1554:	80 81       	ld	r24, Z
    1556:	88 60       	ori	r24, 0x08	; 8
	PORTQ.OUT |= (1<<3);
    1558:	80 83       	st	Z, r24
    155a:	84 81       	ldd	r24, Z+4	; 0x04
    155c:	88 60       	ori	r24, 0x08	; 8

static void adc_init(void)
{
	struct adc_config adc_conf;
	struct adc_channel_config adcch_conf;
	adc_read_configuration(&ADC_LC, &adc_conf);
    155e:	84 83       	std	Z+4, r24	; 0x04
    1560:	be 01       	movw	r22, r28
    1562:	6f 5f       	subi	r22, 0xFF	; 255
    1564:	7f 4f       	sbci	r23, 0xFF	; 255
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_LC, ADC_LC_CH, &adcch_conf);
    156a:	25 d9       	rcall	.-3510   	; 0x7b6 <adc_read_configuration>
    156c:	ae 01       	movw	r20, r28
    156e:	48 5f       	subi	r20, 0xF8	; 248
    1570:	5f 4f       	sbci	r21, 0xFF	; 255
    1572:	61 e0       	ldi	r22, 0x01	; 1
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	92 e0       	ldi	r25, 0x02	; 2
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    1578:	a2 d9       	rcall	.-3260   	; 0x8be <adcch_read_configuration>
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
	conf->refctrl |= ref;
    157a:	9a 81       	ldd	r25, Y+2	; 0x02
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	8f 78       	andi	r24, 0x8F	; 143
    1580:	80 61       	ori	r24, 0x10	; 16
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    1582:	8b 83       	std	Y+3, r24	; 0x03
    1584:	89 2f       	mov	r24, r25
    1586:	81 7e       	andi	r24, 0xE1	; 225
		conf->evctrl = ADC_EVACT_NONE_gc;
    1588:	8a 83       	std	Y+2, r24	; 0x02
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    158a:	1c 82       	std	Y+4, r1	; 0x04
    158c:	82 e0       	ldi	r24, 0x02	; 2
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    158e:	8d 83       	std	Y+5, r24	; 0x05
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    1590:	18 87       	std	Y+8, r17	; 0x08
	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_OFF, ADC_RES_12, ADC_REF_VCC); //vdd/1,6 ~ 2V @ 3,3V.
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
	adc_set_clock_rate(&adc_conf, 200000UL);
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN0, ADCCH_NEG_NONE, 1);
	//adcch_set_input(&adcch_conf, ADCCH_POS_SCALED_VCC, ADCCH_NEG_NONE, 1);
	adc_write_configuration(&ADC_LC, &adc_conf);
    1592:	19 86       	std	Y+9, r1	; 0x09
    1594:	be 01       	movw	r22, r28
    1596:	6f 5f       	subi	r22, 0xFF	; 255
    1598:	7f 4f       	sbci	r23, 0xFF	; 255
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_LC, ADC_LC_CH, &adcch_conf);
    159e:	a5 d8       	rcall	.-3766   	; 0x6ea <adc_write_configuration>
    15a0:	ae 01       	movw	r20, r28
    15a2:	48 5f       	subi	r20, 0xF8	; 248
    15a4:	5f 4f       	sbci	r21, 0xFF	; 255
    15a6:	61 e0       	ldi	r22, 0x01	; 1
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	92 e0       	ldi	r25, 0x02	; 2
	PORTQ.DIR |= (1<<3);
	PORTQ.OUT |= (1<<3);
	
	//ADC setup
	adc_init();
	adc_enable(&ADC_LC); //Later??? By interrupt?
    15ac:	3d d9       	rcall	.-3462   	; 0x828 <adcch_write_configuration>
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	92 e0       	ldi	r25, 0x02	; 2
		.stopbits = USART_SERIAL_STOP_BIT
	};
	
	///////////////////////////////
	
	usart_init_rs232(USART_SERIAL_EXAMPLE, &USART_SERIAL_OPTIONS);
    15b2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <adc_enable>
    15b6:	60 e0       	ldi	r22, 0x00	; 0
    15b8:	70 e2       	ldi	r23, 0x20	; 32
	usart_init_rs232(USART_SERIAL_SIM900, &USART_SERIAL_OPTIONS);
    15ba:	80 ea       	ldi	r24, 0xA0	; 160
    15bc:	9a e0       	ldi	r25, 0x0A	; 10
    15be:	62 db       	rcall	.-2364   	; 0xc84 <usart_init_rs232>
    15c0:	60 e0       	ldi	r22, 0x00	; 0
    15c2:	70 e2       	ldi	r23, 0x20	; 32
	
	at_command_timeout_setup();
    15c4:	80 ea       	ldi	r24, 0xA0	; 160
	
	//WDT setup
	
	
	//reset data
	reset_tx_data(&tx_data);
    15c6:	98 e0       	ldi	r25, 0x08	; 8
    15c8:	5d db       	rcall	.-2374   	; 0xc84 <usart_init_rs232>
    15ca:	78 dd       	rcall	.-1296   	; 0x10bc <at_command_timeout_setup>
	
	//DEBUG M95
	sei();
	#define  AT_ATI  "AT\r"
	
	usart_tx_at(USART_SERIAL_EXAMPLE, AT_ATI);
    15cc:	85 e4       	ldi	r24, 0x45	; 69
    15ce:	91 e2       	ldi	r25, 0x21	; 33
    15d0:	dc de       	rcall	.-584    	; 0x138a <reset_tx_data>
    15d2:	78 94       	sei
	
	
	usart_tx_at(USART_SERIAL_SIM900, AT_ATI);
    15d4:	67 e4       	ldi	r22, 0x47	; 71
    15d6:	70 e2       	ldi	r23, 0x20	; 32
    15d8:	80 ea       	ldi	r24, 0xA0	; 160
    15da:	9a e0       	ldi	r25, 0x0A	; 10
    15dc:	bf dc       	rcall	.-1666   	; 0xf5c <usart_tx_at>
	if (at_response(USART_SERIAL_SIM900)) //if timeout
    15de:	67 e4       	ldi	r22, 0x47	; 71
    15e0:	70 e2       	ldi	r23, 0x20	; 32
    15e2:	80 ea       	ldi	r24, 0xA0	; 160
    15e4:	98 e0       	ldi	r25, 0x08	; 8
    15e6:	ba dc       	rcall	.-1676   	; 0xf5c <usart_tx_at>
				{
					usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);
    15e8:	80 ea       	ldi	r24, 0xA0	; 160
    15ea:	98 e0       	ldi	r25, 0x08	; 8
    15ec:	ee dc       	rcall	.-1572   	; 0xfca <at_response>
    15ee:	88 23       	and	r24, r24
				}
	usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_HEADER);
    15f0:	29 f0       	breq	.+10     	; 0x15fc <main+0xc4>
    15f2:	62 e3       	ldi	r22, 0x32	; 50
    15f4:	70 e2       	ldi	r23, 0x20	; 32
    15f6:	80 ea       	ldi	r24, 0xA0	; 160
    15f8:	9a e0       	ldi	r25, 0x0A	; 10
	
	usart_tx_at(USART_SERIAL_SIM900, AT_CMGF);
    15fa:	b0 dc       	rcall	.-1696   	; 0xf5c <usart_tx_at>
    15fc:	61 e4       	ldi	r22, 0x41	; 65
    15fe:	70 e2       	ldi	r23, 0x20	; 32
    1600:	80 ea       	ldi	r24, 0xA0	; 160
	if (at_response(USART_SERIAL_SIM900)) //if timeout
    1602:	9a e0       	ldi	r25, 0x0A	; 10
    1604:	ab dc       	rcall	.-1706   	; 0xf5c <usart_tx_at>
    1606:	6b e4       	ldi	r22, 0x4B	; 75
    1608:	70 e2       	ldi	r23, 0x20	; 32
    160a:	80 ea       	ldi	r24, 0xA0	; 160
				{
					usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);
    160c:	98 e0       	ldi	r25, 0x08	; 8
    160e:	a6 dc       	rcall	.-1716   	; 0xf5c <usart_tx_at>
    1610:	80 ea       	ldi	r24, 0xA0	; 160
    1612:	98 e0       	ldi	r25, 0x08	; 8
    1614:	da dc       	rcall	.-1612   	; 0xfca <at_response>
				}
	usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_HEADER);
    1616:	88 23       	and	r24, r24
    1618:	29 f0       	breq	.+10     	; 0x1624 <main+0xec>
    161a:	62 e3       	ldi	r22, 0x32	; 50
    161c:	70 e2       	ldi	r23, 0x20	; 32
    161e:	80 ea       	ldi	r24, 0xA0	; 160
	
	usart_tx_at(USART_SERIAL_SIM900, AT_CMGS);
    1620:	9a e0       	ldi	r25, 0x0A	; 10
    1622:	9c dc       	rcall	.-1736   	; 0xf5c <usart_tx_at>
    1624:	61 e4       	ldi	r22, 0x41	; 65
    1626:	70 e2       	ldi	r23, 0x20	; 32
	if (at_response(USART_SERIAL_SIM900)) //if timeout
    1628:	80 ea       	ldi	r24, 0xA0	; 160
    162a:	9a e0       	ldi	r25, 0x0A	; 10
    162c:	97 dc       	rcall	.-1746   	; 0xf5c <usart_tx_at>
    162e:	66 e5       	ldi	r22, 0x56	; 86
				{
					usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);
    1630:	70 e2       	ldi	r23, 0x20	; 32
    1632:	80 ea       	ldi	r24, 0xA0	; 160
    1634:	98 e0       	ldi	r25, 0x08	; 8
    1636:	92 dc       	rcall	.-1756   	; 0xf5c <usart_tx_at>
    1638:	80 ea       	ldi	r24, 0xA0	; 160
				}
	usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_HEADER);
    163a:	98 e0       	ldi	r25, 0x08	; 8
    163c:	c6 dc       	rcall	.-1652   	; 0xfca <at_response>
    163e:	88 23       	and	r24, r24
    1640:	29 f0       	breq	.+10     	; 0x164c <main+0x114>
    1642:	62 e3       	ldi	r22, 0x32	; 50
	
	usart_tx_at(USART_SERIAL_SIM900, AT_MESSAGE);
    1644:	70 e2       	ldi	r23, 0x20	; 32
    1646:	80 ea       	ldi	r24, 0xA0	; 160
    1648:	9a e0       	ldi	r25, 0x0A	; 10
    164a:	88 dc       	rcall	.-1776   	; 0xf5c <usart_tx_at>
	if (at_response(USART_SERIAL_SIM900)) //if timeout
    164c:	61 e4       	ldi	r22, 0x41	; 65
    164e:	70 e2       	ldi	r23, 0x20	; 32
    1650:	80 ea       	ldi	r24, 0xA0	; 160
    1652:	9a e0       	ldi	r25, 0x0A	; 10
    1654:	83 dc       	rcall	.-1786   	; 0xf5c <usart_tx_at>
				{
					usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);
    1656:	6d e6       	ldi	r22, 0x6D	; 109
    1658:	70 e2       	ldi	r23, 0x20	; 32
    165a:	80 ea       	ldi	r24, 0xA0	; 160
    165c:	98 e0       	ldi	r25, 0x08	; 8
				}
	usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_HEADER);
    165e:	7e dc       	rcall	.-1796   	; 0xf5c <usart_tx_at>
    1660:	80 ea       	ldi	r24, 0xA0	; 160
    1662:	98 e0       	ldi	r25, 0x08	; 8
    1664:	b2 dc       	rcall	.-1692   	; 0xfca <at_response>
    1666:	88 23       	and	r24, r24
	
	usart_tx_at(USART_SERIAL_SIM900, CTRL_Z);
    1668:	29 f0       	breq	.+10     	; 0x1674 <main+0x13c>
    166a:	62 e3       	ldi	r22, 0x32	; 50
    166c:	70 e2       	ldi	r23, 0x20	; 32
    166e:	80 ea       	ldi	r24, 0xA0	; 160
    1670:	9a e0       	ldi	r25, 0x0A	; 10
    1672:	74 dc       	rcall	.-1816   	; 0xf5c <usart_tx_at>
	if (at_response(USART_SERIAL_SIM900)) //if timeout
    1674:	61 e4       	ldi	r22, 0x41	; 65
    1676:	70 e2       	ldi	r23, 0x20	; 32
    1678:	80 ea       	ldi	r24, 0xA0	; 160
    167a:	9a e0       	ldi	r25, 0x0A	; 10
    167c:	6f dc       	rcall	.-1826   	; 0xf5c <usart_tx_at>
    167e:	6f e7       	ldi	r22, 0x7F	; 127
				{
					usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_ERROR);
    1680:	70 e2       	ldi	r23, 0x20	; 32
    1682:	80 ea       	ldi	r24, 0xA0	; 160
    1684:	98 e0       	ldi	r25, 0x08	; 8
    1686:	6a dc       	rcall	.-1836   	; 0xf5c <usart_tx_at>
    1688:	80 ea       	ldi	r24, 0xA0	; 160
    168a:	98 e0       	ldi	r25, 0x08	; 8
				}
	usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_HEADER);
    168c:	9e dc       	rcall	.-1732   	; 0xfca <at_response>
    168e:	88 23       	and	r24, r24
    1690:	29 f0       	breq	.+10     	; 0x169c <main+0x164>
    1692:	62 e3       	ldi	r22, 0x32	; 50
    1694:	70 e2       	ldi	r23, 0x20	; 32
    1696:	80 ea       	ldi	r24, 0xA0	; 160
	
	
	while (1)
	{
		delay_s(10);
    1698:	9a e0       	ldi	r25, 0x0A	; 10
    169a:	60 dc       	rcall	.-1856   	; 0xf5c <usart_tx_at>
    169c:	61 e4       	ldi	r22, 0x41	; 65
    169e:	70 e2       	ldi	r23, 0x20	; 32
    16a0:	80 ea       	ldi	r24, 0xA0	; 160
    16a2:	9a e0       	ldi	r25, 0x0A	; 10
    16a4:	5b dc       	rcall	.-1866   	; 0xf5c <usart_tx_at>
    16a6:	66 ed       	ldi	r22, 0xD6	; 214
    16a8:	7c ed       	ldi	r23, 0xDC	; 220
    16aa:	82 e3       	ldi	r24, 0x32	; 50
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	4b dc       	rcall	.-1898   	; 0xf46 <__portable_avr_delay_cycles>
    16b0:	fa cf       	rjmp	.-12     	; 0x16a6 <main+0x16e>

000016b2 <__udivmodsi4>:
    16b2:	a1 e2       	ldi	r26, 0x21	; 33
    16b4:	1a 2e       	mov	r1, r26
    16b6:	aa 1b       	sub	r26, r26
    16b8:	bb 1b       	sub	r27, r27
    16ba:	fd 01       	movw	r30, r26
    16bc:	0d c0       	rjmp	.+26     	; 0x16d8 <__udivmodsi4_ep>

000016be <__udivmodsi4_loop>:
    16be:	aa 1f       	adc	r26, r26
    16c0:	bb 1f       	adc	r27, r27
    16c2:	ee 1f       	adc	r30, r30
    16c4:	ff 1f       	adc	r31, r31
    16c6:	a2 17       	cp	r26, r18
    16c8:	b3 07       	cpc	r27, r19
    16ca:	e4 07       	cpc	r30, r20
    16cc:	f5 07       	cpc	r31, r21
    16ce:	20 f0       	brcs	.+8      	; 0x16d8 <__udivmodsi4_ep>
    16d0:	a2 1b       	sub	r26, r18
    16d2:	b3 0b       	sbc	r27, r19
    16d4:	e4 0b       	sbc	r30, r20
    16d6:	f5 0b       	sbc	r31, r21

000016d8 <__udivmodsi4_ep>:
    16d8:	66 1f       	adc	r22, r22
    16da:	77 1f       	adc	r23, r23
    16dc:	88 1f       	adc	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	1a 94       	dec	r1
    16e2:	69 f7       	brne	.-38     	; 0x16be <__udivmodsi4_loop>
    16e4:	60 95       	com	r22
    16e6:	70 95       	com	r23
    16e8:	80 95       	com	r24
    16ea:	90 95       	com	r25
    16ec:	9b 01       	movw	r18, r22
    16ee:	ac 01       	movw	r20, r24
    16f0:	bd 01       	movw	r22, r26
    16f2:	cf 01       	movw	r24, r30
    16f4:	08 95       	ret

000016f6 <strcat>:
    16f6:	fb 01       	movw	r30, r22
    16f8:	dc 01       	movw	r26, r24
    16fa:	0d 90       	ld	r0, X+
    16fc:	00 20       	and	r0, r0
    16fe:	e9 f7       	brne	.-6      	; 0x16fa <strcat+0x4>
    1700:	11 97       	sbiw	r26, 0x01	; 1
    1702:	01 90       	ld	r0, Z+
    1704:	0d 92       	st	X+, r0
    1706:	00 20       	and	r0, r0
    1708:	e1 f7       	brne	.-8      	; 0x1702 <strcat+0xc>
    170a:	08 95       	ret

0000170c <strcpy>:
    170c:	fb 01       	movw	r30, r22
    170e:	dc 01       	movw	r26, r24
    1710:	01 90       	ld	r0, Z+
    1712:	0d 92       	st	X+, r0
    1714:	00 20       	and	r0, r0
    1716:	e1 f7       	brne	.-8      	; 0x1710 <strcpy+0x4>
    1718:	08 95       	ret

0000171a <__itoa_ncheck>:
    171a:	bb 27       	eor	r27, r27
    171c:	4a 30       	cpi	r20, 0x0A	; 10
    171e:	31 f4       	brne	.+12     	; 0x172c <__itoa_ncheck+0x12>
    1720:	99 23       	and	r25, r25
    1722:	22 f4       	brpl	.+8      	; 0x172c <__itoa_ncheck+0x12>
    1724:	bd e2       	ldi	r27, 0x2D	; 45
    1726:	90 95       	com	r25
    1728:	81 95       	neg	r24
    172a:	9f 4f       	sbci	r25, 0xFF	; 255
    172c:	01 c0       	rjmp	.+2      	; 0x1730 <__utoa_common>

0000172e <__utoa_ncheck>:
    172e:	bb 27       	eor	r27, r27

00001730 <__utoa_common>:
    1730:	fb 01       	movw	r30, r22
    1732:	55 27       	eor	r21, r21
    1734:	aa 27       	eor	r26, r26
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	aa 1f       	adc	r26, r26
    173c:	a4 17       	cp	r26, r20
    173e:	10 f0       	brcs	.+4      	; 0x1744 <__utoa_common+0x14>
    1740:	a4 1b       	sub	r26, r20
    1742:	83 95       	inc	r24
    1744:	50 51       	subi	r21, 0x10	; 16
    1746:	b9 f7       	brne	.-18     	; 0x1736 <__utoa_common+0x6>
    1748:	a0 5d       	subi	r26, 0xD0	; 208
    174a:	aa 33       	cpi	r26, 0x3A	; 58
    174c:	08 f0       	brcs	.+2      	; 0x1750 <__utoa_common+0x20>
    174e:	a9 5d       	subi	r26, 0xD9	; 217
    1750:	a1 93       	st	Z+, r26
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	79 f7       	brne	.-34     	; 0x1734 <__utoa_common+0x4>
    1756:	b1 11       	cpse	r27, r1
    1758:	b1 93       	st	Z+, r27
    175a:	11 92       	st	Z+, r1
    175c:	cb 01       	movw	r24, r22
    175e:	35 c2       	rjmp	.+1130   	; 0x1bca <strrev>

00001760 <sprintf>:
    1760:	0f 93       	push	r16
    1762:	1f 93       	push	r17
    1764:	cf 93       	push	r28
    1766:	df 93       	push	r29
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
    176c:	2e 97       	sbiw	r28, 0x0e	; 14
    176e:	cd bf       	out	0x3d, r28	; 61
    1770:	de bf       	out	0x3e, r29	; 62
    1772:	0e 89       	ldd	r16, Y+22	; 0x16
    1774:	1f 89       	ldd	r17, Y+23	; 0x17
    1776:	86 e0       	ldi	r24, 0x06	; 6
    1778:	8c 83       	std	Y+4, r24	; 0x04
    177a:	09 83       	std	Y+1, r16	; 0x01
    177c:	1a 83       	std	Y+2, r17	; 0x02
    177e:	8f ef       	ldi	r24, 0xFF	; 255
    1780:	9f e7       	ldi	r25, 0x7F	; 127
    1782:	8d 83       	std	Y+5, r24	; 0x05
    1784:	9e 83       	std	Y+6, r25	; 0x06
    1786:	ae 01       	movw	r20, r28
    1788:	46 5e       	subi	r20, 0xE6	; 230
    178a:	5f 4f       	sbci	r21, 0xFF	; 255
    178c:	68 8d       	ldd	r22, Y+24	; 0x18
    178e:	79 8d       	ldd	r23, Y+25	; 0x19
    1790:	ce 01       	movw	r24, r28
    1792:	01 96       	adiw	r24, 0x01	; 1
    1794:	0d d0       	rcall	.+26     	; 0x17b0 <vfprintf>
    1796:	ef 81       	ldd	r30, Y+7	; 0x07
    1798:	f8 85       	ldd	r31, Y+8	; 0x08
    179a:	e0 0f       	add	r30, r16
    179c:	f1 1f       	adc	r31, r17
    179e:	10 82       	st	Z, r1
    17a0:	2e 96       	adiw	r28, 0x0e	; 14
    17a2:	cd bf       	out	0x3d, r28	; 61
    17a4:	de bf       	out	0x3e, r29	; 62
    17a6:	df 91       	pop	r29
    17a8:	cf 91       	pop	r28
    17aa:	1f 91       	pop	r17
    17ac:	0f 91       	pop	r16
    17ae:	08 95       	ret

000017b0 <vfprintf>:
    17b0:	2f 92       	push	r2
    17b2:	3f 92       	push	r3
    17b4:	4f 92       	push	r4
    17b6:	5f 92       	push	r5
    17b8:	6f 92       	push	r6
    17ba:	7f 92       	push	r7
    17bc:	8f 92       	push	r8
    17be:	9f 92       	push	r9
    17c0:	af 92       	push	r10
    17c2:	bf 92       	push	r11
    17c4:	cf 92       	push	r12
    17c6:	df 92       	push	r13
    17c8:	ef 92       	push	r14
    17ca:	ff 92       	push	r15
    17cc:	0f 93       	push	r16
    17ce:	1f 93       	push	r17
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	2b 97       	sbiw	r28, 0x0b	; 11
    17da:	cd bf       	out	0x3d, r28	; 61
    17dc:	de bf       	out	0x3e, r29	; 62
    17de:	6c 01       	movw	r12, r24
    17e0:	7b 01       	movw	r14, r22
    17e2:	8a 01       	movw	r16, r20
    17e4:	fc 01       	movw	r30, r24
    17e6:	16 82       	std	Z+6, r1	; 0x06
    17e8:	17 82       	std	Z+7, r1	; 0x07
    17ea:	83 81       	ldd	r24, Z+3	; 0x03
    17ec:	81 ff       	sbrs	r24, 1
    17ee:	bf c1       	rjmp	.+894    	; 0x1b6e <vfprintf+0x3be>
    17f0:	ce 01       	movw	r24, r28
    17f2:	01 96       	adiw	r24, 0x01	; 1
    17f4:	3c 01       	movw	r6, r24
    17f6:	f6 01       	movw	r30, r12
    17f8:	93 81       	ldd	r25, Z+3	; 0x03
    17fa:	f7 01       	movw	r30, r14
    17fc:	93 fd       	sbrc	r25, 3
    17fe:	85 91       	lpm	r24, Z+
    1800:	93 ff       	sbrs	r25, 3
    1802:	81 91       	ld	r24, Z+
    1804:	7f 01       	movw	r14, r30
    1806:	88 23       	and	r24, r24
    1808:	09 f4       	brne	.+2      	; 0x180c <vfprintf+0x5c>
    180a:	ad c1       	rjmp	.+858    	; 0x1b66 <vfprintf+0x3b6>
    180c:	85 32       	cpi	r24, 0x25	; 37
    180e:	39 f4       	brne	.+14     	; 0x181e <vfprintf+0x6e>
    1810:	93 fd       	sbrc	r25, 3
    1812:	85 91       	lpm	r24, Z+
    1814:	93 ff       	sbrs	r25, 3
    1816:	81 91       	ld	r24, Z+
    1818:	7f 01       	movw	r14, r30
    181a:	85 32       	cpi	r24, 0x25	; 37
    181c:	21 f4       	brne	.+8      	; 0x1826 <vfprintf+0x76>
    181e:	b6 01       	movw	r22, r12
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	e3 d1       	rcall	.+966    	; 0x1bea <fputc>
    1824:	e8 cf       	rjmp	.-48     	; 0x17f6 <vfprintf+0x46>
    1826:	91 2c       	mov	r9, r1
    1828:	21 2c       	mov	r2, r1
    182a:	31 2c       	mov	r3, r1
    182c:	ff e1       	ldi	r31, 0x1F	; 31
    182e:	f3 15       	cp	r31, r3
    1830:	d8 f0       	brcs	.+54     	; 0x1868 <vfprintf+0xb8>
    1832:	8b 32       	cpi	r24, 0x2B	; 43
    1834:	79 f0       	breq	.+30     	; 0x1854 <vfprintf+0xa4>
    1836:	38 f4       	brcc	.+14     	; 0x1846 <vfprintf+0x96>
    1838:	80 32       	cpi	r24, 0x20	; 32
    183a:	79 f0       	breq	.+30     	; 0x185a <vfprintf+0xaa>
    183c:	83 32       	cpi	r24, 0x23	; 35
    183e:	a1 f4       	brne	.+40     	; 0x1868 <vfprintf+0xb8>
    1840:	23 2d       	mov	r18, r3
    1842:	20 61       	ori	r18, 0x10	; 16
    1844:	1d c0       	rjmp	.+58     	; 0x1880 <vfprintf+0xd0>
    1846:	8d 32       	cpi	r24, 0x2D	; 45
    1848:	61 f0       	breq	.+24     	; 0x1862 <vfprintf+0xb2>
    184a:	80 33       	cpi	r24, 0x30	; 48
    184c:	69 f4       	brne	.+26     	; 0x1868 <vfprintf+0xb8>
    184e:	23 2d       	mov	r18, r3
    1850:	21 60       	ori	r18, 0x01	; 1
    1852:	16 c0       	rjmp	.+44     	; 0x1880 <vfprintf+0xd0>
    1854:	83 2d       	mov	r24, r3
    1856:	82 60       	ori	r24, 0x02	; 2
    1858:	38 2e       	mov	r3, r24
    185a:	e3 2d       	mov	r30, r3
    185c:	e4 60       	ori	r30, 0x04	; 4
    185e:	3e 2e       	mov	r3, r30
    1860:	2a c0       	rjmp	.+84     	; 0x18b6 <vfprintf+0x106>
    1862:	f3 2d       	mov	r31, r3
    1864:	f8 60       	ori	r31, 0x08	; 8
    1866:	1d c0       	rjmp	.+58     	; 0x18a2 <vfprintf+0xf2>
    1868:	37 fc       	sbrc	r3, 7
    186a:	2d c0       	rjmp	.+90     	; 0x18c6 <vfprintf+0x116>
    186c:	20 ed       	ldi	r18, 0xD0	; 208
    186e:	28 0f       	add	r18, r24
    1870:	2a 30       	cpi	r18, 0x0A	; 10
    1872:	40 f0       	brcs	.+16     	; 0x1884 <vfprintf+0xd4>
    1874:	8e 32       	cpi	r24, 0x2E	; 46
    1876:	b9 f4       	brne	.+46     	; 0x18a6 <vfprintf+0xf6>
    1878:	36 fc       	sbrc	r3, 6
    187a:	75 c1       	rjmp	.+746    	; 0x1b66 <vfprintf+0x3b6>
    187c:	23 2d       	mov	r18, r3
    187e:	20 64       	ori	r18, 0x40	; 64
    1880:	32 2e       	mov	r3, r18
    1882:	19 c0       	rjmp	.+50     	; 0x18b6 <vfprintf+0x106>
    1884:	36 fe       	sbrs	r3, 6
    1886:	06 c0       	rjmp	.+12     	; 0x1894 <vfprintf+0xe4>
    1888:	8a e0       	ldi	r24, 0x0A	; 10
    188a:	98 9e       	mul	r9, r24
    188c:	20 0d       	add	r18, r0
    188e:	11 24       	eor	r1, r1
    1890:	92 2e       	mov	r9, r18
    1892:	11 c0       	rjmp	.+34     	; 0x18b6 <vfprintf+0x106>
    1894:	ea e0       	ldi	r30, 0x0A	; 10
    1896:	2e 9e       	mul	r2, r30
    1898:	20 0d       	add	r18, r0
    189a:	11 24       	eor	r1, r1
    189c:	22 2e       	mov	r2, r18
    189e:	f3 2d       	mov	r31, r3
    18a0:	f0 62       	ori	r31, 0x20	; 32
    18a2:	3f 2e       	mov	r3, r31
    18a4:	08 c0       	rjmp	.+16     	; 0x18b6 <vfprintf+0x106>
    18a6:	8c 36       	cpi	r24, 0x6C	; 108
    18a8:	21 f4       	brne	.+8      	; 0x18b2 <vfprintf+0x102>
    18aa:	83 2d       	mov	r24, r3
    18ac:	80 68       	ori	r24, 0x80	; 128
    18ae:	38 2e       	mov	r3, r24
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <vfprintf+0x106>
    18b2:	88 36       	cpi	r24, 0x68	; 104
    18b4:	41 f4       	brne	.+16     	; 0x18c6 <vfprintf+0x116>
    18b6:	f7 01       	movw	r30, r14
    18b8:	93 fd       	sbrc	r25, 3
    18ba:	85 91       	lpm	r24, Z+
    18bc:	93 ff       	sbrs	r25, 3
    18be:	81 91       	ld	r24, Z+
    18c0:	7f 01       	movw	r14, r30
    18c2:	81 11       	cpse	r24, r1
    18c4:	b3 cf       	rjmp	.-154    	; 0x182c <vfprintf+0x7c>
    18c6:	98 2f       	mov	r25, r24
    18c8:	9f 7d       	andi	r25, 0xDF	; 223
    18ca:	95 54       	subi	r25, 0x45	; 69
    18cc:	93 30       	cpi	r25, 0x03	; 3
    18ce:	28 f4       	brcc	.+10     	; 0x18da <vfprintf+0x12a>
    18d0:	0c 5f       	subi	r16, 0xFC	; 252
    18d2:	1f 4f       	sbci	r17, 0xFF	; 255
    18d4:	9f e3       	ldi	r25, 0x3F	; 63
    18d6:	99 83       	std	Y+1, r25	; 0x01
    18d8:	0d c0       	rjmp	.+26     	; 0x18f4 <vfprintf+0x144>
    18da:	83 36       	cpi	r24, 0x63	; 99
    18dc:	31 f0       	breq	.+12     	; 0x18ea <vfprintf+0x13a>
    18de:	83 37       	cpi	r24, 0x73	; 115
    18e0:	71 f0       	breq	.+28     	; 0x18fe <vfprintf+0x14e>
    18e2:	83 35       	cpi	r24, 0x53	; 83
    18e4:	09 f0       	breq	.+2      	; 0x18e8 <vfprintf+0x138>
    18e6:	55 c0       	rjmp	.+170    	; 0x1992 <vfprintf+0x1e2>
    18e8:	20 c0       	rjmp	.+64     	; 0x192a <vfprintf+0x17a>
    18ea:	f8 01       	movw	r30, r16
    18ec:	80 81       	ld	r24, Z
    18ee:	89 83       	std	Y+1, r24	; 0x01
    18f0:	0e 5f       	subi	r16, 0xFE	; 254
    18f2:	1f 4f       	sbci	r17, 0xFF	; 255
    18f4:	88 24       	eor	r8, r8
    18f6:	83 94       	inc	r8
    18f8:	91 2c       	mov	r9, r1
    18fa:	53 01       	movw	r10, r6
    18fc:	12 c0       	rjmp	.+36     	; 0x1922 <vfprintf+0x172>
    18fe:	28 01       	movw	r4, r16
    1900:	f2 e0       	ldi	r31, 0x02	; 2
    1902:	4f 0e       	add	r4, r31
    1904:	51 1c       	adc	r5, r1
    1906:	f8 01       	movw	r30, r16
    1908:	a0 80       	ld	r10, Z
    190a:	b1 80       	ldd	r11, Z+1	; 0x01
    190c:	36 fe       	sbrs	r3, 6
    190e:	03 c0       	rjmp	.+6      	; 0x1916 <vfprintf+0x166>
    1910:	69 2d       	mov	r22, r9
    1912:	70 e0       	ldi	r23, 0x00	; 0
    1914:	02 c0       	rjmp	.+4      	; 0x191a <vfprintf+0x16a>
    1916:	6f ef       	ldi	r22, 0xFF	; 255
    1918:	7f ef       	ldi	r23, 0xFF	; 255
    191a:	c5 01       	movw	r24, r10
    191c:	4b d1       	rcall	.+662    	; 0x1bb4 <strnlen>
    191e:	4c 01       	movw	r8, r24
    1920:	82 01       	movw	r16, r4
    1922:	f3 2d       	mov	r31, r3
    1924:	ff 77       	andi	r31, 0x7F	; 127
    1926:	3f 2e       	mov	r3, r31
    1928:	15 c0       	rjmp	.+42     	; 0x1954 <vfprintf+0x1a4>
    192a:	28 01       	movw	r4, r16
    192c:	22 e0       	ldi	r18, 0x02	; 2
    192e:	42 0e       	add	r4, r18
    1930:	51 1c       	adc	r5, r1
    1932:	f8 01       	movw	r30, r16
    1934:	a0 80       	ld	r10, Z
    1936:	b1 80       	ldd	r11, Z+1	; 0x01
    1938:	36 fe       	sbrs	r3, 6
    193a:	03 c0       	rjmp	.+6      	; 0x1942 <vfprintf+0x192>
    193c:	69 2d       	mov	r22, r9
    193e:	70 e0       	ldi	r23, 0x00	; 0
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <vfprintf+0x196>
    1942:	6f ef       	ldi	r22, 0xFF	; 255
    1944:	7f ef       	ldi	r23, 0xFF	; 255
    1946:	c5 01       	movw	r24, r10
    1948:	2a d1       	rcall	.+596    	; 0x1b9e <strnlen_P>
    194a:	4c 01       	movw	r8, r24
    194c:	f3 2d       	mov	r31, r3
    194e:	f0 68       	ori	r31, 0x80	; 128
    1950:	3f 2e       	mov	r3, r31
    1952:	82 01       	movw	r16, r4
    1954:	33 fc       	sbrc	r3, 3
    1956:	19 c0       	rjmp	.+50     	; 0x198a <vfprintf+0x1da>
    1958:	82 2d       	mov	r24, r2
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	88 16       	cp	r8, r24
    195e:	99 06       	cpc	r9, r25
    1960:	a0 f4       	brcc	.+40     	; 0x198a <vfprintf+0x1da>
    1962:	b6 01       	movw	r22, r12
    1964:	80 e2       	ldi	r24, 0x20	; 32
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	40 d1       	rcall	.+640    	; 0x1bea <fputc>
    196a:	2a 94       	dec	r2
    196c:	f5 cf       	rjmp	.-22     	; 0x1958 <vfprintf+0x1a8>
    196e:	f5 01       	movw	r30, r10
    1970:	37 fc       	sbrc	r3, 7
    1972:	85 91       	lpm	r24, Z+
    1974:	37 fe       	sbrs	r3, 7
    1976:	81 91       	ld	r24, Z+
    1978:	5f 01       	movw	r10, r30
    197a:	b6 01       	movw	r22, r12
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	35 d1       	rcall	.+618    	; 0x1bea <fputc>
    1980:	21 10       	cpse	r2, r1
    1982:	2a 94       	dec	r2
    1984:	21 e0       	ldi	r18, 0x01	; 1
    1986:	82 1a       	sub	r8, r18
    1988:	91 08       	sbc	r9, r1
    198a:	81 14       	cp	r8, r1
    198c:	91 04       	cpc	r9, r1
    198e:	79 f7       	brne	.-34     	; 0x196e <vfprintf+0x1be>
    1990:	e1 c0       	rjmp	.+450    	; 0x1b54 <vfprintf+0x3a4>
    1992:	84 36       	cpi	r24, 0x64	; 100
    1994:	11 f0       	breq	.+4      	; 0x199a <vfprintf+0x1ea>
    1996:	89 36       	cpi	r24, 0x69	; 105
    1998:	39 f5       	brne	.+78     	; 0x19e8 <vfprintf+0x238>
    199a:	f8 01       	movw	r30, r16
    199c:	37 fe       	sbrs	r3, 7
    199e:	07 c0       	rjmp	.+14     	; 0x19ae <vfprintf+0x1fe>
    19a0:	60 81       	ld	r22, Z
    19a2:	71 81       	ldd	r23, Z+1	; 0x01
    19a4:	82 81       	ldd	r24, Z+2	; 0x02
    19a6:	93 81       	ldd	r25, Z+3	; 0x03
    19a8:	0c 5f       	subi	r16, 0xFC	; 252
    19aa:	1f 4f       	sbci	r17, 0xFF	; 255
    19ac:	08 c0       	rjmp	.+16     	; 0x19be <vfprintf+0x20e>
    19ae:	60 81       	ld	r22, Z
    19b0:	71 81       	ldd	r23, Z+1	; 0x01
    19b2:	07 2e       	mov	r0, r23
    19b4:	00 0c       	add	r0, r0
    19b6:	88 0b       	sbc	r24, r24
    19b8:	99 0b       	sbc	r25, r25
    19ba:	0e 5f       	subi	r16, 0xFE	; 254
    19bc:	1f 4f       	sbci	r17, 0xFF	; 255
    19be:	f3 2d       	mov	r31, r3
    19c0:	ff 76       	andi	r31, 0x6F	; 111
    19c2:	3f 2e       	mov	r3, r31
    19c4:	97 ff       	sbrs	r25, 7
    19c6:	09 c0       	rjmp	.+18     	; 0x19da <vfprintf+0x22a>
    19c8:	90 95       	com	r25
    19ca:	80 95       	com	r24
    19cc:	70 95       	com	r23
    19ce:	61 95       	neg	r22
    19d0:	7f 4f       	sbci	r23, 0xFF	; 255
    19d2:	8f 4f       	sbci	r24, 0xFF	; 255
    19d4:	9f 4f       	sbci	r25, 0xFF	; 255
    19d6:	f0 68       	ori	r31, 0x80	; 128
    19d8:	3f 2e       	mov	r3, r31
    19da:	2a e0       	ldi	r18, 0x0A	; 10
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	a3 01       	movw	r20, r6
    19e0:	40 d1       	rcall	.+640    	; 0x1c62 <__ultoa_invert>
    19e2:	88 2e       	mov	r8, r24
    19e4:	86 18       	sub	r8, r6
    19e6:	44 c0       	rjmp	.+136    	; 0x1a70 <vfprintf+0x2c0>
    19e8:	85 37       	cpi	r24, 0x75	; 117
    19ea:	31 f4       	brne	.+12     	; 0x19f8 <vfprintf+0x248>
    19ec:	23 2d       	mov	r18, r3
    19ee:	2f 7e       	andi	r18, 0xEF	; 239
    19f0:	b2 2e       	mov	r11, r18
    19f2:	2a e0       	ldi	r18, 0x0A	; 10
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	25 c0       	rjmp	.+74     	; 0x1a42 <vfprintf+0x292>
    19f8:	93 2d       	mov	r25, r3
    19fa:	99 7f       	andi	r25, 0xF9	; 249
    19fc:	b9 2e       	mov	r11, r25
    19fe:	8f 36       	cpi	r24, 0x6F	; 111
    1a00:	c1 f0       	breq	.+48     	; 0x1a32 <vfprintf+0x282>
    1a02:	18 f4       	brcc	.+6      	; 0x1a0a <vfprintf+0x25a>
    1a04:	88 35       	cpi	r24, 0x58	; 88
    1a06:	79 f0       	breq	.+30     	; 0x1a26 <vfprintf+0x276>
    1a08:	ae c0       	rjmp	.+348    	; 0x1b66 <vfprintf+0x3b6>
    1a0a:	80 37       	cpi	r24, 0x70	; 112
    1a0c:	19 f0       	breq	.+6      	; 0x1a14 <vfprintf+0x264>
    1a0e:	88 37       	cpi	r24, 0x78	; 120
    1a10:	21 f0       	breq	.+8      	; 0x1a1a <vfprintf+0x26a>
    1a12:	a9 c0       	rjmp	.+338    	; 0x1b66 <vfprintf+0x3b6>
    1a14:	e9 2f       	mov	r30, r25
    1a16:	e0 61       	ori	r30, 0x10	; 16
    1a18:	be 2e       	mov	r11, r30
    1a1a:	b4 fe       	sbrs	r11, 4
    1a1c:	0d c0       	rjmp	.+26     	; 0x1a38 <vfprintf+0x288>
    1a1e:	fb 2d       	mov	r31, r11
    1a20:	f4 60       	ori	r31, 0x04	; 4
    1a22:	bf 2e       	mov	r11, r31
    1a24:	09 c0       	rjmp	.+18     	; 0x1a38 <vfprintf+0x288>
    1a26:	34 fe       	sbrs	r3, 4
    1a28:	0a c0       	rjmp	.+20     	; 0x1a3e <vfprintf+0x28e>
    1a2a:	29 2f       	mov	r18, r25
    1a2c:	26 60       	ori	r18, 0x06	; 6
    1a2e:	b2 2e       	mov	r11, r18
    1a30:	06 c0       	rjmp	.+12     	; 0x1a3e <vfprintf+0x28e>
    1a32:	28 e0       	ldi	r18, 0x08	; 8
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	05 c0       	rjmp	.+10     	; 0x1a42 <vfprintf+0x292>
    1a38:	20 e1       	ldi	r18, 0x10	; 16
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <vfprintf+0x292>
    1a3e:	20 e1       	ldi	r18, 0x10	; 16
    1a40:	32 e0       	ldi	r19, 0x02	; 2
    1a42:	f8 01       	movw	r30, r16
    1a44:	b7 fe       	sbrs	r11, 7
    1a46:	07 c0       	rjmp	.+14     	; 0x1a56 <vfprintf+0x2a6>
    1a48:	60 81       	ld	r22, Z
    1a4a:	71 81       	ldd	r23, Z+1	; 0x01
    1a4c:	82 81       	ldd	r24, Z+2	; 0x02
    1a4e:	93 81       	ldd	r25, Z+3	; 0x03
    1a50:	0c 5f       	subi	r16, 0xFC	; 252
    1a52:	1f 4f       	sbci	r17, 0xFF	; 255
    1a54:	06 c0       	rjmp	.+12     	; 0x1a62 <vfprintf+0x2b2>
    1a56:	60 81       	ld	r22, Z
    1a58:	71 81       	ldd	r23, Z+1	; 0x01
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	0e 5f       	subi	r16, 0xFE	; 254
    1a60:	1f 4f       	sbci	r17, 0xFF	; 255
    1a62:	a3 01       	movw	r20, r6
    1a64:	fe d0       	rcall	.+508    	; 0x1c62 <__ultoa_invert>
    1a66:	88 2e       	mov	r8, r24
    1a68:	86 18       	sub	r8, r6
    1a6a:	fb 2d       	mov	r31, r11
    1a6c:	ff 77       	andi	r31, 0x7F	; 127
    1a6e:	3f 2e       	mov	r3, r31
    1a70:	36 fe       	sbrs	r3, 6
    1a72:	0d c0       	rjmp	.+26     	; 0x1a8e <vfprintf+0x2de>
    1a74:	23 2d       	mov	r18, r3
    1a76:	2e 7f       	andi	r18, 0xFE	; 254
    1a78:	a2 2e       	mov	r10, r18
    1a7a:	89 14       	cp	r8, r9
    1a7c:	58 f4       	brcc	.+22     	; 0x1a94 <vfprintf+0x2e4>
    1a7e:	34 fe       	sbrs	r3, 4
    1a80:	0b c0       	rjmp	.+22     	; 0x1a98 <vfprintf+0x2e8>
    1a82:	32 fc       	sbrc	r3, 2
    1a84:	09 c0       	rjmp	.+18     	; 0x1a98 <vfprintf+0x2e8>
    1a86:	83 2d       	mov	r24, r3
    1a88:	8e 7e       	andi	r24, 0xEE	; 238
    1a8a:	a8 2e       	mov	r10, r24
    1a8c:	05 c0       	rjmp	.+10     	; 0x1a98 <vfprintf+0x2e8>
    1a8e:	b8 2c       	mov	r11, r8
    1a90:	a3 2c       	mov	r10, r3
    1a92:	03 c0       	rjmp	.+6      	; 0x1a9a <vfprintf+0x2ea>
    1a94:	b8 2c       	mov	r11, r8
    1a96:	01 c0       	rjmp	.+2      	; 0x1a9a <vfprintf+0x2ea>
    1a98:	b9 2c       	mov	r11, r9
    1a9a:	a4 fe       	sbrs	r10, 4
    1a9c:	0f c0       	rjmp	.+30     	; 0x1abc <vfprintf+0x30c>
    1a9e:	fe 01       	movw	r30, r28
    1aa0:	e8 0d       	add	r30, r8
    1aa2:	f1 1d       	adc	r31, r1
    1aa4:	80 81       	ld	r24, Z
    1aa6:	80 33       	cpi	r24, 0x30	; 48
    1aa8:	21 f4       	brne	.+8      	; 0x1ab2 <vfprintf+0x302>
    1aaa:	9a 2d       	mov	r25, r10
    1aac:	99 7e       	andi	r25, 0xE9	; 233
    1aae:	a9 2e       	mov	r10, r25
    1ab0:	09 c0       	rjmp	.+18     	; 0x1ac4 <vfprintf+0x314>
    1ab2:	a2 fe       	sbrs	r10, 2
    1ab4:	06 c0       	rjmp	.+12     	; 0x1ac2 <vfprintf+0x312>
    1ab6:	b3 94       	inc	r11
    1ab8:	b3 94       	inc	r11
    1aba:	04 c0       	rjmp	.+8      	; 0x1ac4 <vfprintf+0x314>
    1abc:	8a 2d       	mov	r24, r10
    1abe:	86 78       	andi	r24, 0x86	; 134
    1ac0:	09 f0       	breq	.+2      	; 0x1ac4 <vfprintf+0x314>
    1ac2:	b3 94       	inc	r11
    1ac4:	a3 fc       	sbrc	r10, 3
    1ac6:	10 c0       	rjmp	.+32     	; 0x1ae8 <vfprintf+0x338>
    1ac8:	a0 fe       	sbrs	r10, 0
    1aca:	06 c0       	rjmp	.+12     	; 0x1ad8 <vfprintf+0x328>
    1acc:	b2 14       	cp	r11, r2
    1ace:	80 f4       	brcc	.+32     	; 0x1af0 <vfprintf+0x340>
    1ad0:	28 0c       	add	r2, r8
    1ad2:	92 2c       	mov	r9, r2
    1ad4:	9b 18       	sub	r9, r11
    1ad6:	0d c0       	rjmp	.+26     	; 0x1af2 <vfprintf+0x342>
    1ad8:	b2 14       	cp	r11, r2
    1ada:	58 f4       	brcc	.+22     	; 0x1af2 <vfprintf+0x342>
    1adc:	b6 01       	movw	r22, r12
    1ade:	80 e2       	ldi	r24, 0x20	; 32
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	83 d0       	rcall	.+262    	; 0x1bea <fputc>
    1ae4:	b3 94       	inc	r11
    1ae6:	f8 cf       	rjmp	.-16     	; 0x1ad8 <vfprintf+0x328>
    1ae8:	b2 14       	cp	r11, r2
    1aea:	18 f4       	brcc	.+6      	; 0x1af2 <vfprintf+0x342>
    1aec:	2b 18       	sub	r2, r11
    1aee:	02 c0       	rjmp	.+4      	; 0x1af4 <vfprintf+0x344>
    1af0:	98 2c       	mov	r9, r8
    1af2:	21 2c       	mov	r2, r1
    1af4:	a4 fe       	sbrs	r10, 4
    1af6:	0f c0       	rjmp	.+30     	; 0x1b16 <vfprintf+0x366>
    1af8:	b6 01       	movw	r22, r12
    1afa:	80 e3       	ldi	r24, 0x30	; 48
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	75 d0       	rcall	.+234    	; 0x1bea <fputc>
    1b00:	a2 fe       	sbrs	r10, 2
    1b02:	16 c0       	rjmp	.+44     	; 0x1b30 <vfprintf+0x380>
    1b04:	a1 fc       	sbrc	r10, 1
    1b06:	03 c0       	rjmp	.+6      	; 0x1b0e <vfprintf+0x35e>
    1b08:	88 e7       	ldi	r24, 0x78	; 120
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	02 c0       	rjmp	.+4      	; 0x1b12 <vfprintf+0x362>
    1b0e:	88 e5       	ldi	r24, 0x58	; 88
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	b6 01       	movw	r22, r12
    1b14:	0c c0       	rjmp	.+24     	; 0x1b2e <vfprintf+0x37e>
    1b16:	8a 2d       	mov	r24, r10
    1b18:	86 78       	andi	r24, 0x86	; 134
    1b1a:	51 f0       	breq	.+20     	; 0x1b30 <vfprintf+0x380>
    1b1c:	a1 fe       	sbrs	r10, 1
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <vfprintf+0x374>
    1b20:	8b e2       	ldi	r24, 0x2B	; 43
    1b22:	01 c0       	rjmp	.+2      	; 0x1b26 <vfprintf+0x376>
    1b24:	80 e2       	ldi	r24, 0x20	; 32
    1b26:	a7 fc       	sbrc	r10, 7
    1b28:	8d e2       	ldi	r24, 0x2D	; 45
    1b2a:	b6 01       	movw	r22, r12
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	5d d0       	rcall	.+186    	; 0x1bea <fputc>
    1b30:	89 14       	cp	r8, r9
    1b32:	30 f4       	brcc	.+12     	; 0x1b40 <vfprintf+0x390>
    1b34:	b6 01       	movw	r22, r12
    1b36:	80 e3       	ldi	r24, 0x30	; 48
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	57 d0       	rcall	.+174    	; 0x1bea <fputc>
    1b3c:	9a 94       	dec	r9
    1b3e:	f8 cf       	rjmp	.-16     	; 0x1b30 <vfprintf+0x380>
    1b40:	8a 94       	dec	r8
    1b42:	f3 01       	movw	r30, r6
    1b44:	e8 0d       	add	r30, r8
    1b46:	f1 1d       	adc	r31, r1
    1b48:	80 81       	ld	r24, Z
    1b4a:	b6 01       	movw	r22, r12
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	4d d0       	rcall	.+154    	; 0x1bea <fputc>
    1b50:	81 10       	cpse	r8, r1
    1b52:	f6 cf       	rjmp	.-20     	; 0x1b40 <vfprintf+0x390>
    1b54:	22 20       	and	r2, r2
    1b56:	09 f4       	brne	.+2      	; 0x1b5a <vfprintf+0x3aa>
    1b58:	4e ce       	rjmp	.-868    	; 0x17f6 <vfprintf+0x46>
    1b5a:	b6 01       	movw	r22, r12
    1b5c:	80 e2       	ldi	r24, 0x20	; 32
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	44 d0       	rcall	.+136    	; 0x1bea <fputc>
    1b62:	2a 94       	dec	r2
    1b64:	f7 cf       	rjmp	.-18     	; 0x1b54 <vfprintf+0x3a4>
    1b66:	f6 01       	movw	r30, r12
    1b68:	86 81       	ldd	r24, Z+6	; 0x06
    1b6a:	97 81       	ldd	r25, Z+7	; 0x07
    1b6c:	02 c0       	rjmp	.+4      	; 0x1b72 <vfprintf+0x3c2>
    1b6e:	8f ef       	ldi	r24, 0xFF	; 255
    1b70:	9f ef       	ldi	r25, 0xFF	; 255
    1b72:	2b 96       	adiw	r28, 0x0b	; 11
    1b74:	cd bf       	out	0x3d, r28	; 61
    1b76:	de bf       	out	0x3e, r29	; 62
    1b78:	df 91       	pop	r29
    1b7a:	cf 91       	pop	r28
    1b7c:	1f 91       	pop	r17
    1b7e:	0f 91       	pop	r16
    1b80:	ff 90       	pop	r15
    1b82:	ef 90       	pop	r14
    1b84:	df 90       	pop	r13
    1b86:	cf 90       	pop	r12
    1b88:	bf 90       	pop	r11
    1b8a:	af 90       	pop	r10
    1b8c:	9f 90       	pop	r9
    1b8e:	8f 90       	pop	r8
    1b90:	7f 90       	pop	r7
    1b92:	6f 90       	pop	r6
    1b94:	5f 90       	pop	r5
    1b96:	4f 90       	pop	r4
    1b98:	3f 90       	pop	r3
    1b9a:	2f 90       	pop	r2
    1b9c:	08 95       	ret

00001b9e <strnlen_P>:
    1b9e:	fc 01       	movw	r30, r24
    1ba0:	05 90       	lpm	r0, Z+
    1ba2:	61 50       	subi	r22, 0x01	; 1
    1ba4:	70 40       	sbci	r23, 0x00	; 0
    1ba6:	01 10       	cpse	r0, r1
    1ba8:	d8 f7       	brcc	.-10     	; 0x1ba0 <strnlen_P+0x2>
    1baa:	80 95       	com	r24
    1bac:	90 95       	com	r25
    1bae:	8e 0f       	add	r24, r30
    1bb0:	9f 1f       	adc	r25, r31
    1bb2:	08 95       	ret

00001bb4 <strnlen>:
    1bb4:	fc 01       	movw	r30, r24
    1bb6:	61 50       	subi	r22, 0x01	; 1
    1bb8:	70 40       	sbci	r23, 0x00	; 0
    1bba:	01 90       	ld	r0, Z+
    1bbc:	01 10       	cpse	r0, r1
    1bbe:	d8 f7       	brcc	.-10     	; 0x1bb6 <strnlen+0x2>
    1bc0:	80 95       	com	r24
    1bc2:	90 95       	com	r25
    1bc4:	8e 0f       	add	r24, r30
    1bc6:	9f 1f       	adc	r25, r31
    1bc8:	08 95       	ret

00001bca <strrev>:
    1bca:	dc 01       	movw	r26, r24
    1bcc:	fc 01       	movw	r30, r24
    1bce:	67 2f       	mov	r22, r23
    1bd0:	71 91       	ld	r23, Z+
    1bd2:	77 23       	and	r23, r23
    1bd4:	e1 f7       	brne	.-8      	; 0x1bce <strrev+0x4>
    1bd6:	32 97       	sbiw	r30, 0x02	; 2
    1bd8:	04 c0       	rjmp	.+8      	; 0x1be2 <strrev+0x18>
    1bda:	7c 91       	ld	r23, X
    1bdc:	6d 93       	st	X+, r22
    1bde:	70 83       	st	Z, r23
    1be0:	62 91       	ld	r22, -Z
    1be2:	ae 17       	cp	r26, r30
    1be4:	bf 07       	cpc	r27, r31
    1be6:	c8 f3       	brcs	.-14     	; 0x1bda <strrev+0x10>
    1be8:	08 95       	ret

00001bea <fputc>:
    1bea:	0f 93       	push	r16
    1bec:	1f 93       	push	r17
    1bee:	cf 93       	push	r28
    1bf0:	df 93       	push	r29
    1bf2:	fb 01       	movw	r30, r22
    1bf4:	23 81       	ldd	r18, Z+3	; 0x03
    1bf6:	21 fd       	sbrc	r18, 1
    1bf8:	03 c0       	rjmp	.+6      	; 0x1c00 <fputc+0x16>
    1bfa:	8f ef       	ldi	r24, 0xFF	; 255
    1bfc:	9f ef       	ldi	r25, 0xFF	; 255
    1bfe:	2c c0       	rjmp	.+88     	; 0x1c58 <fputc+0x6e>
    1c00:	22 ff       	sbrs	r18, 2
    1c02:	16 c0       	rjmp	.+44     	; 0x1c30 <fputc+0x46>
    1c04:	46 81       	ldd	r20, Z+6	; 0x06
    1c06:	57 81       	ldd	r21, Z+7	; 0x07
    1c08:	24 81       	ldd	r18, Z+4	; 0x04
    1c0a:	35 81       	ldd	r19, Z+5	; 0x05
    1c0c:	42 17       	cp	r20, r18
    1c0e:	53 07       	cpc	r21, r19
    1c10:	44 f4       	brge	.+16     	; 0x1c22 <fputc+0x38>
    1c12:	a0 81       	ld	r26, Z
    1c14:	b1 81       	ldd	r27, Z+1	; 0x01
    1c16:	9d 01       	movw	r18, r26
    1c18:	2f 5f       	subi	r18, 0xFF	; 255
    1c1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c1c:	20 83       	st	Z, r18
    1c1e:	31 83       	std	Z+1, r19	; 0x01
    1c20:	8c 93       	st	X, r24
    1c22:	26 81       	ldd	r18, Z+6	; 0x06
    1c24:	37 81       	ldd	r19, Z+7	; 0x07
    1c26:	2f 5f       	subi	r18, 0xFF	; 255
    1c28:	3f 4f       	sbci	r19, 0xFF	; 255
    1c2a:	26 83       	std	Z+6, r18	; 0x06
    1c2c:	37 83       	std	Z+7, r19	; 0x07
    1c2e:	14 c0       	rjmp	.+40     	; 0x1c58 <fputc+0x6e>
    1c30:	8b 01       	movw	r16, r22
    1c32:	ec 01       	movw	r28, r24
    1c34:	fb 01       	movw	r30, r22
    1c36:	00 84       	ldd	r0, Z+8	; 0x08
    1c38:	f1 85       	ldd	r31, Z+9	; 0x09
    1c3a:	e0 2d       	mov	r30, r0
    1c3c:	19 95       	eicall
    1c3e:	89 2b       	or	r24, r25
    1c40:	e1 f6       	brne	.-72     	; 0x1bfa <fputc+0x10>
    1c42:	d8 01       	movw	r26, r16
    1c44:	16 96       	adiw	r26, 0x06	; 6
    1c46:	8d 91       	ld	r24, X+
    1c48:	9c 91       	ld	r25, X
    1c4a:	17 97       	sbiw	r26, 0x07	; 7
    1c4c:	01 96       	adiw	r24, 0x01	; 1
    1c4e:	16 96       	adiw	r26, 0x06	; 6
    1c50:	8d 93       	st	X+, r24
    1c52:	9c 93       	st	X, r25
    1c54:	17 97       	sbiw	r26, 0x07	; 7
    1c56:	ce 01       	movw	r24, r28
    1c58:	df 91       	pop	r29
    1c5a:	cf 91       	pop	r28
    1c5c:	1f 91       	pop	r17
    1c5e:	0f 91       	pop	r16
    1c60:	08 95       	ret

00001c62 <__ultoa_invert>:
    1c62:	fa 01       	movw	r30, r20
    1c64:	aa 27       	eor	r26, r26
    1c66:	28 30       	cpi	r18, 0x08	; 8
    1c68:	51 f1       	breq	.+84     	; 0x1cbe <__ultoa_invert+0x5c>
    1c6a:	20 31       	cpi	r18, 0x10	; 16
    1c6c:	81 f1       	breq	.+96     	; 0x1cce <__ultoa_invert+0x6c>
    1c6e:	e8 94       	clt
    1c70:	6f 93       	push	r22
    1c72:	6e 7f       	andi	r22, 0xFE	; 254
    1c74:	6e 5f       	subi	r22, 0xFE	; 254
    1c76:	7f 4f       	sbci	r23, 0xFF	; 255
    1c78:	8f 4f       	sbci	r24, 0xFF	; 255
    1c7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7c:	af 4f       	sbci	r26, 0xFF	; 255
    1c7e:	b1 e0       	ldi	r27, 0x01	; 1
    1c80:	3e d0       	rcall	.+124    	; 0x1cfe <__ultoa_invert+0x9c>
    1c82:	b4 e0       	ldi	r27, 0x04	; 4
    1c84:	3c d0       	rcall	.+120    	; 0x1cfe <__ultoa_invert+0x9c>
    1c86:	67 0f       	add	r22, r23
    1c88:	78 1f       	adc	r23, r24
    1c8a:	89 1f       	adc	r24, r25
    1c8c:	9a 1f       	adc	r25, r26
    1c8e:	a1 1d       	adc	r26, r1
    1c90:	68 0f       	add	r22, r24
    1c92:	79 1f       	adc	r23, r25
    1c94:	8a 1f       	adc	r24, r26
    1c96:	91 1d       	adc	r25, r1
    1c98:	a1 1d       	adc	r26, r1
    1c9a:	6a 0f       	add	r22, r26
    1c9c:	71 1d       	adc	r23, r1
    1c9e:	81 1d       	adc	r24, r1
    1ca0:	91 1d       	adc	r25, r1
    1ca2:	a1 1d       	adc	r26, r1
    1ca4:	20 d0       	rcall	.+64     	; 0x1ce6 <__ultoa_invert+0x84>
    1ca6:	09 f4       	brne	.+2      	; 0x1caa <__ultoa_invert+0x48>
    1ca8:	68 94       	set
    1caa:	3f 91       	pop	r19
    1cac:	2a e0       	ldi	r18, 0x0A	; 10
    1cae:	26 9f       	mul	r18, r22
    1cb0:	11 24       	eor	r1, r1
    1cb2:	30 19       	sub	r19, r0
    1cb4:	30 5d       	subi	r19, 0xD0	; 208
    1cb6:	31 93       	st	Z+, r19
    1cb8:	de f6       	brtc	.-74     	; 0x1c70 <__ultoa_invert+0xe>
    1cba:	cf 01       	movw	r24, r30
    1cbc:	08 95       	ret
    1cbe:	46 2f       	mov	r20, r22
    1cc0:	47 70       	andi	r20, 0x07	; 7
    1cc2:	40 5d       	subi	r20, 0xD0	; 208
    1cc4:	41 93       	st	Z+, r20
    1cc6:	b3 e0       	ldi	r27, 0x03	; 3
    1cc8:	0f d0       	rcall	.+30     	; 0x1ce8 <__ultoa_invert+0x86>
    1cca:	c9 f7       	brne	.-14     	; 0x1cbe <__ultoa_invert+0x5c>
    1ccc:	f6 cf       	rjmp	.-20     	; 0x1cba <__ultoa_invert+0x58>
    1cce:	46 2f       	mov	r20, r22
    1cd0:	4f 70       	andi	r20, 0x0F	; 15
    1cd2:	40 5d       	subi	r20, 0xD0	; 208
    1cd4:	4a 33       	cpi	r20, 0x3A	; 58
    1cd6:	18 f0       	brcs	.+6      	; 0x1cde <__ultoa_invert+0x7c>
    1cd8:	49 5d       	subi	r20, 0xD9	; 217
    1cda:	31 fd       	sbrc	r19, 1
    1cdc:	40 52       	subi	r20, 0x20	; 32
    1cde:	41 93       	st	Z+, r20
    1ce0:	02 d0       	rcall	.+4      	; 0x1ce6 <__ultoa_invert+0x84>
    1ce2:	a9 f7       	brne	.-22     	; 0x1cce <__ultoa_invert+0x6c>
    1ce4:	ea cf       	rjmp	.-44     	; 0x1cba <__ultoa_invert+0x58>
    1ce6:	b4 e0       	ldi	r27, 0x04	; 4
    1ce8:	a6 95       	lsr	r26
    1cea:	97 95       	ror	r25
    1cec:	87 95       	ror	r24
    1cee:	77 95       	ror	r23
    1cf0:	67 95       	ror	r22
    1cf2:	ba 95       	dec	r27
    1cf4:	c9 f7       	brne	.-14     	; 0x1ce8 <__ultoa_invert+0x86>
    1cf6:	00 97       	sbiw	r24, 0x00	; 0
    1cf8:	61 05       	cpc	r22, r1
    1cfa:	71 05       	cpc	r23, r1
    1cfc:	08 95       	ret
    1cfe:	9b 01       	movw	r18, r22
    1d00:	ac 01       	movw	r20, r24
    1d02:	0a 2e       	mov	r0, r26
    1d04:	06 94       	lsr	r0
    1d06:	57 95       	ror	r21
    1d08:	47 95       	ror	r20
    1d0a:	37 95       	ror	r19
    1d0c:	27 95       	ror	r18
    1d0e:	ba 95       	dec	r27
    1d10:	c9 f7       	brne	.-14     	; 0x1d04 <__ultoa_invert+0xa2>
    1d12:	62 0f       	add	r22, r18
    1d14:	73 1f       	adc	r23, r19
    1d16:	84 1f       	adc	r24, r20
    1d18:	95 1f       	adc	r25, r21
    1d1a:	a0 1d       	adc	r26, r0
    1d1c:	08 95       	ret

00001d1e <_exit>:
    1d1e:	f8 94       	cli

00001d20 <__stop_program>:
    1d20:	ff cf       	rjmp	.-2      	; 0x1d20 <__stop_program>
