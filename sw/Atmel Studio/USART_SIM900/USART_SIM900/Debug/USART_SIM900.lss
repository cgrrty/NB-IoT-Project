
USART_SIM900.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ad8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001b0  00802000  00003ad8  00003b6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000014e  008021b0  008021b0  00003d1c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003d1c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003d78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000438  00000000  00000000  00003db8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000f6c0  00000000  00000000  000041f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000051de  00000000  00000000  000138b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005d76  00000000  00000000  00018a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000018a4  00000000  00000000  0001e804  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00035ed2  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000058d7  00000000  00000000  00055f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000480  00000000  00000000  0005b858  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c25a  00000000  00000000  0005bcd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	21 c1       	rjmp	.+578    	; 0x248 <__bad_interrupt>
       6:	00 00       	nop
       8:	1f c1       	rjmp	.+574    	; 0x248 <__bad_interrupt>
       a:	00 00       	nop
       c:	1d c1       	rjmp	.+570    	; 0x248 <__bad_interrupt>
       e:	00 00       	nop
      10:	1b c1       	rjmp	.+566    	; 0x248 <__bad_interrupt>
      12:	00 00       	nop
      14:	19 c1       	rjmp	.+562    	; 0x248 <__bad_interrupt>
      16:	00 00       	nop
      18:	17 c1       	rjmp	.+558    	; 0x248 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	15 c1       	rjmp	.+554    	; 0x248 <__bad_interrupt>
      1e:	00 00       	nop
      20:	13 c1       	rjmp	.+550    	; 0x248 <__bad_interrupt>
      22:	00 00       	nop
      24:	11 c1       	rjmp	.+546    	; 0x248 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 6c 16 	jmp	0x2cd8	; 0x2cd8 <__vector_10>
      2c:	0d c1       	rjmp	.+538    	; 0x248 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0b c1       	rjmp	.+534    	; 0x248 <__bad_interrupt>
      32:	00 00       	nop
      34:	09 c1       	rjmp	.+530    	; 0x248 <__bad_interrupt>
      36:	00 00       	nop
      38:	07 c1       	rjmp	.+526    	; 0x248 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	93 c4       	rjmp	.+2342   	; 0x964 <__vector_15>
      3e:	00 00       	nop
      40:	c9 c4       	rjmp	.+2450   	; 0x9d4 <__vector_16>
      42:	00 00       	nop
      44:	ff c4       	rjmp	.+2558   	; 0xa44 <__vector_17>
      46:	00 00       	nop
      48:	35 c5       	rjmp	.+2666   	; 0xab4 <__vector_18>
      4a:	00 00       	nop
      4c:	6b c5       	rjmp	.+2774   	; 0xb24 <__vector_19>
      4e:	00 00       	nop
      50:	a1 c5       	rjmp	.+2882   	; 0xb94 <__vector_20>
      52:	00 00       	nop
      54:	d7 c5       	rjmp	.+2990   	; 0xc04 <__vector_21>
      56:	00 00       	nop
      58:	0d c6       	rjmp	.+3098   	; 0xc74 <__vector_22>
      5a:	00 00       	nop
      5c:	43 c6       	rjmp	.+3206   	; 0xce4 <__vector_23>
      5e:	00 00       	nop
      60:	f3 c0       	rjmp	.+486    	; 0x248 <__bad_interrupt>
      62:	00 00       	nop
      64:	f1 c0       	rjmp	.+482    	; 0x248 <__bad_interrupt>
      66:	00 00       	nop
      68:	ef c0       	rjmp	.+478    	; 0x248 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ed c0       	rjmp	.+474    	; 0x248 <__bad_interrupt>
      6e:	00 00       	nop
      70:	eb c0       	rjmp	.+470    	; 0x248 <__bad_interrupt>
      72:	00 00       	nop
      74:	e9 c0       	rjmp	.+466    	; 0x248 <__bad_interrupt>
      76:	00 00       	nop
      78:	e7 c0       	rjmp	.+462    	; 0x248 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e5 c0       	rjmp	.+458    	; 0x248 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e3 c0       	rjmp	.+454    	; 0x248 <__bad_interrupt>
      82:	00 00       	nop
      84:	e1 c0       	rjmp	.+450    	; 0x248 <__bad_interrupt>
      86:	00 00       	nop
      88:	df c0       	rjmp	.+446    	; 0x248 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dd c0       	rjmp	.+442    	; 0x248 <__bad_interrupt>
      8e:	00 00       	nop
      90:	db c0       	rjmp	.+438    	; 0x248 <__bad_interrupt>
      92:	00 00       	nop
      94:	d9 c0       	rjmp	.+434    	; 0x248 <__bad_interrupt>
      96:	00 00       	nop
      98:	d7 c0       	rjmp	.+430    	; 0x248 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	36 c2       	rjmp	.+1132   	; 0x50a <__vector_39>
      9e:	00 00       	nop
      a0:	71 c2       	rjmp	.+1250   	; 0x584 <__vector_40>
      a2:	00 00       	nop
      a4:	ac c2       	rjmp	.+1368   	; 0x5fe <__vector_41>
      a6:	00 00       	nop
      a8:	e7 c2       	rjmp	.+1486   	; 0x678 <__vector_42>
      aa:	00 00       	nop
      ac:	cd c0       	rjmp	.+410    	; 0x248 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cb c0       	rjmp	.+406    	; 0x248 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c9 c0       	rjmp	.+402    	; 0x248 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c7 c0       	rjmp	.+398    	; 0x248 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__vector_47>
      c0:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__vector_48>
      c4:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <__vector_49>
      c8:	0c 94 82 09 	jmp	0x1304	; 0x1304 <__vector_50>
      cc:	0c 94 ba 09 	jmp	0x1374	; 0x1374 <__vector_51>
      d0:	0c 94 f2 09 	jmp	0x13e4	; 0x13e4 <__vector_52>
      d4:	0c 94 2a 0a 	jmp	0x1454	; 0x1454 <__vector_53>
      d8:	0c 94 62 0a 	jmp	0x14c4	; 0x14c4 <__vector_54>
      dc:	0c 94 9a 0a 	jmp	0x1534	; 0x1534 <__vector_55>
      e0:	0c 94 d2 0a 	jmp	0x15a4	; 0x15a4 <__vector_56>
      e4:	b1 c0       	rjmp	.+354    	; 0x248 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	af c0       	rjmp	.+350    	; 0x248 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ad c0       	rjmp	.+346    	; 0x248 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ab c0       	rjmp	.+342    	; 0x248 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a9 c0       	rjmp	.+338    	; 0x248 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a7 c0       	rjmp	.+334    	; 0x248 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a5 c0       	rjmp	.+330    	; 0x248 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a3 c0       	rjmp	.+326    	; 0x248 <__bad_interrupt>
     102:	00 00       	nop
     104:	a1 c0       	rjmp	.+322    	; 0x248 <__bad_interrupt>
     106:	00 00       	nop
     108:	9f c0       	rjmp	.+318    	; 0x248 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9d c0       	rjmp	.+314    	; 0x248 <__bad_interrupt>
     10e:	00 00       	nop
     110:	9b c0       	rjmp	.+310    	; 0x248 <__bad_interrupt>
     112:	00 00       	nop
     114:	99 c0       	rjmp	.+306    	; 0x248 <__bad_interrupt>
     116:	00 00       	nop
     118:	97 c0       	rjmp	.+302    	; 0x248 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	02 c1       	rjmp	.+516    	; 0x322 <__vector_71>
     11e:	00 00       	nop
     120:	3d c1       	rjmp	.+634    	; 0x39c <__vector_72>
     122:	00 00       	nop
     124:	78 c1       	rjmp	.+752    	; 0x416 <__vector_73>
     126:	00 00       	nop
     128:	b3 c1       	rjmp	.+870    	; 0x490 <__vector_74>
     12a:	00 00       	nop
     12c:	8d c0       	rjmp	.+282    	; 0x248 <__bad_interrupt>
     12e:	00 00       	nop
     130:	8b c0       	rjmp	.+278    	; 0x248 <__bad_interrupt>
     132:	00 00       	nop
     134:	0f c6       	rjmp	.+3102   	; 0xd54 <__vector_77>
     136:	00 00       	nop
     138:	45 c6       	rjmp	.+3210   	; 0xdc4 <__vector_78>
     13a:	00 00       	nop
     13c:	7b c6       	rjmp	.+3318   	; 0xe34 <__vector_79>
     13e:	00 00       	nop
     140:	b1 c6       	rjmp	.+3426   	; 0xea4 <__vector_80>
     142:	00 00       	nop
     144:	e7 c6       	rjmp	.+3534   	; 0xf14 <__vector_81>
     146:	00 00       	nop
     148:	1d c7       	rjmp	.+3642   	; 0xf84 <__vector_82>
     14a:	00 00       	nop
     14c:	53 c7       	rjmp	.+3750   	; 0xff4 <__vector_83>
     14e:	00 00       	nop
     150:	89 c7       	rjmp	.+3858   	; 0x1064 <__vector_84>
     152:	00 00       	nop
     154:	bf c7       	rjmp	.+3966   	; 0x10d4 <__vector_85>
     156:	00 00       	nop
     158:	f5 c7       	rjmp	.+4074   	; 0x1144 <__vector_86>
     15a:	00 00       	nop
     15c:	75 c0       	rjmp	.+234    	; 0x248 <__bad_interrupt>
     15e:	00 00       	nop
     160:	73 c0       	rjmp	.+230    	; 0x248 <__bad_interrupt>
     162:	00 00       	nop
     164:	71 c0       	rjmp	.+226    	; 0x248 <__bad_interrupt>
     166:	00 00       	nop
     168:	6f c0       	rjmp	.+222    	; 0x248 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6d c0       	rjmp	.+218    	; 0x248 <__bad_interrupt>
     16e:	00 00       	nop
     170:	6b c0       	rjmp	.+214    	; 0x248 <__bad_interrupt>
     172:	00 00       	nop
     174:	69 c0       	rjmp	.+210    	; 0x248 <__bad_interrupt>
     176:	00 00       	nop
     178:	67 c0       	rjmp	.+206    	; 0x248 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	65 c0       	rjmp	.+202    	; 0x248 <__bad_interrupt>
     17e:	00 00       	nop
     180:	63 c0       	rjmp	.+198    	; 0x248 <__bad_interrupt>
     182:	00 00       	nop
     184:	61 c0       	rjmp	.+194    	; 0x248 <__bad_interrupt>
     186:	00 00       	nop
     188:	5f c0       	rjmp	.+190    	; 0x248 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5d c0       	rjmp	.+186    	; 0x248 <__bad_interrupt>
     18e:	00 00       	nop
     190:	5b c0       	rjmp	.+182    	; 0x248 <__bad_interrupt>
     192:	00 00       	nop
     194:	59 c0       	rjmp	.+178    	; 0x248 <__bad_interrupt>
     196:	00 00       	nop
     198:	57 c0       	rjmp	.+174    	; 0x248 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	55 c0       	rjmp	.+170    	; 0x248 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	53 c0       	rjmp	.+166    	; 0x248 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	51 c0       	rjmp	.+162    	; 0x248 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4f c0       	rjmp	.+158    	; 0x248 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4d c0       	rjmp	.+154    	; 0x248 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 0a 0b 	jmp	0x1614	; 0x1614 <__vector_108>
     1b4:	0c 94 42 0b 	jmp	0x1684	; 0x1684 <__vector_109>
     1b8:	0c 94 7a 0b 	jmp	0x16f4	; 0x16f4 <__vector_110>
     1bc:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <__vector_111>
     1c0:	0c 94 ea 0b 	jmp	0x17d4	; 0x17d4 <__vector_112>
     1c4:	0c 94 22 0c 	jmp	0x1844	; 0x1844 <__vector_113>
     1c8:	0c 94 5a 0c 	jmp	0x18b4	; 0x18b4 <__vector_114>
     1cc:	0c 94 92 0c 	jmp	0x1924	; 0x1924 <__vector_115>
     1d0:	0c 94 ca 0c 	jmp	0x1994	; 0x1994 <__vector_116>
     1d4:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__vector_117>
     1d8:	37 c0       	rjmp	.+110    	; 0x248 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	35 c0       	rjmp	.+106    	; 0x248 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	33 c0       	rjmp	.+102    	; 0x248 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	31 c0       	rjmp	.+98     	; 0x248 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2f c0       	rjmp	.+94     	; 0x248 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2d c0       	rjmp	.+90     	; 0x248 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2b c0       	rjmp	.+86     	; 0x248 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	29 c0       	rjmp	.+82     	; 0x248 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	27 c0       	rjmp	.+78     	; 0x248 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	11 e2       	ldi	r17, 0x21	; 33
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	e8 ed       	ldi	r30, 0xD8	; 216
     21c:	fa e3       	ldi	r31, 0x3A	; 58
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a0 3b       	cpi	r26, 0xB0	; 176
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	22 e2       	ldi	r18, 0x22	; 34
     232:	a0 eb       	ldi	r26, 0xB0	; 176
     234:	b1 e2       	ldi	r27, 0x21	; 33
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	ae 3f       	cpi	r26, 0xFE	; 254
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <main>
     244:	0c 94 6a 1d 	jmp	0x3ad4	; 0x3ad4 <_exit>

00000248 <__bad_interrupt>:
     248:	db ce       	rjmp	.-586    	; 0x0 <__vectors>

0000024a <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     24a:	81 15       	cp	r24, r1
     24c:	22 e0       	ldi	r18, 0x02	; 2
     24e:	92 07       	cpc	r25, r18
     250:	69 f4       	brne	.+26     	; 0x26c <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     252:	80 91 b1 21 	lds	r24, 0x21B1	; 0x8021b1 <adca_enable_count>
     256:	91 e0       	ldi	r25, 0x01	; 1
     258:	98 0f       	add	r25, r24
     25a:	90 93 b1 21 	sts	0x21B1, r25	; 0x8021b1 <adca_enable_count>
     25e:	81 11       	cpse	r24, r1
     260:	14 c0       	rjmp	.+40     	; 0x28a <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     262:	62 e0       	ldi	r22, 0x02	; 2
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <sysclk_enable_module>
     26a:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     26c:	80 34       	cpi	r24, 0x40	; 64
     26e:	92 40       	sbci	r25, 0x02	; 2
     270:	61 f4       	brne	.+24     	; 0x28a <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     272:	80 91 b0 21 	lds	r24, 0x21B0	; 0x8021b0 <__data_end>
     276:	91 e0       	ldi	r25, 0x01	; 1
     278:	98 0f       	add	r25, r24
     27a:	90 93 b0 21 	sts	0x21B0, r25	; 0x8021b0 <__data_end>
     27e:	81 11       	cpse	r24, r1
     280:	04 c0       	rjmp	.+8      	; 0x28a <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     282:	62 e0       	ldi	r22, 0x02	; 2
     284:	82 e0       	ldi	r24, 0x02	; 2
     286:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <sysclk_enable_module>
     28a:	08 95       	ret

0000028c <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     28c:	81 15       	cp	r24, r1
     28e:	22 e0       	ldi	r18, 0x02	; 2
     290:	92 07       	cpc	r25, r18
     292:	61 f4       	brne	.+24     	; 0x2ac <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     294:	80 91 b1 21 	lds	r24, 0x21B1	; 0x8021b1 <adca_enable_count>
     298:	81 50       	subi	r24, 0x01	; 1
     29a:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <adca_enable_count>
     29e:	81 11       	cpse	r24, r1
     2a0:	13 c0       	rjmp	.+38     	; 0x2c8 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     2a2:	62 e0       	ldi	r22, 0x02	; 2
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <sysclk_disable_module>
     2aa:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     2ac:	80 34       	cpi	r24, 0x40	; 64
     2ae:	92 40       	sbci	r25, 0x02	; 2
     2b0:	59 f4       	brne	.+22     	; 0x2c8 <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     2b2:	80 91 b0 21 	lds	r24, 0x21B0	; 0x8021b0 <__data_end>
     2b6:	81 50       	subi	r24, 0x01	; 1
     2b8:	80 93 b0 21 	sts	0x21B0, r24	; 0x8021b0 <__data_end>
     2bc:	81 11       	cpse	r24, r1
     2be:	04 c0       	rjmp	.+8      	; 0x2c8 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     2c0:	62 e0       	ldi	r22, 0x02	; 2
     2c2:	82 e0       	ldi	r24, 0x02	; 2
     2c4:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <sysclk_disable_module>
     2c8:	08 95       	ret

000002ca <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     2ca:	ef 92       	push	r14
     2cc:	ff 92       	push	r15
     2ce:	1f 93       	push	r17
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	1f 92       	push	r1
     2d6:	1f 92       	push	r1
     2d8:	cd b7       	in	r28, 0x3d	; 61
     2da:	de b7       	in	r29, 0x3e	; 62
     2dc:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     2de:	8f b7       	in	r24, 0x3f	; 63
     2e0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     2e2:	f8 94       	cli
	return flags;
     2e4:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     2e6:	c7 01       	movw	r24, r14
     2e8:	b0 df       	rcall	.-160    	; 0x24a <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     2ea:	f7 01       	movw	r30, r14
     2ec:	80 81       	ld	r24, Z
     2ee:	81 60       	ori	r24, 0x01	; 1
     2f0:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     2f2:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     2f4:	80 91 76 22 	lds	r24, 0x2276	; 0x802276 <sleepmgr_locks+0x1>
     2f8:	8f 3f       	cpi	r24, 0xFF	; 255
     2fa:	09 f4       	brne	.+2      	; 0x2fe <adc_enable+0x34>
     2fc:	ff cf       	rjmp	.-2      	; 0x2fc <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     2fe:	8f b7       	in	r24, 0x3f	; 63
     300:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     302:	f8 94       	cli
	return flags;
     304:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     306:	e5 e7       	ldi	r30, 0x75	; 117
     308:	f2 e2       	ldi	r31, 0x22	; 34
     30a:	81 81       	ldd	r24, Z+1	; 0x01
     30c:	8f 5f       	subi	r24, 0xFF	; 255
     30e:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     310:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     312:	0f 90       	pop	r0
     314:	0f 90       	pop	r0
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	1f 91       	pop	r17
     31c:	ff 90       	pop	r15
     31e:	ef 90       	pop	r14
     320:	08 95       	ret

00000322 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     322:	1f 92       	push	r1
     324:	0f 92       	push	r0
     326:	0f b6       	in	r0, 0x3f	; 63
     328:	0f 92       	push	r0
     32a:	11 24       	eor	r1, r1
     32c:	08 b6       	in	r0, 0x38	; 56
     32e:	0f 92       	push	r0
     330:	18 be       	out	0x38, r1	; 56
     332:	09 b6       	in	r0, 0x39	; 57
     334:	0f 92       	push	r0
     336:	19 be       	out	0x39, r1	; 57
     338:	0b b6       	in	r0, 0x3b	; 59
     33a:	0f 92       	push	r0
     33c:	1b be       	out	0x3b, r1	; 59
     33e:	2f 93       	push	r18
     340:	3f 93       	push	r19
     342:	4f 93       	push	r20
     344:	5f 93       	push	r21
     346:	6f 93       	push	r22
     348:	7f 93       	push	r23
     34a:	8f 93       	push	r24
     34c:	9f 93       	push	r25
     34e:	af 93       	push	r26
     350:	bf 93       	push	r27
     352:	ef 93       	push	r30
     354:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     356:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     35a:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     35e:	e0 91 7d 22 	lds	r30, 0x227D	; 0x80227d <adca_callback>
     362:	f0 91 7e 22 	lds	r31, 0x227E	; 0x80227e <adca_callback+0x1>
     366:	61 e0       	ldi	r22, 0x01	; 1
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	92 e0       	ldi	r25, 0x02	; 2
     36c:	19 95       	eicall
}
     36e:	ff 91       	pop	r31
     370:	ef 91       	pop	r30
     372:	bf 91       	pop	r27
     374:	af 91       	pop	r26
     376:	9f 91       	pop	r25
     378:	8f 91       	pop	r24
     37a:	7f 91       	pop	r23
     37c:	6f 91       	pop	r22
     37e:	5f 91       	pop	r21
     380:	4f 91       	pop	r20
     382:	3f 91       	pop	r19
     384:	2f 91       	pop	r18
     386:	0f 90       	pop	r0
     388:	0b be       	out	0x3b, r0	; 59
     38a:	0f 90       	pop	r0
     38c:	09 be       	out	0x39, r0	; 57
     38e:	0f 90       	pop	r0
     390:	08 be       	out	0x38, r0	; 56
     392:	0f 90       	pop	r0
     394:	0f be       	out	0x3f, r0	; 63
     396:	0f 90       	pop	r0
     398:	1f 90       	pop	r1
     39a:	18 95       	reti

0000039c <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     39c:	1f 92       	push	r1
     39e:	0f 92       	push	r0
     3a0:	0f b6       	in	r0, 0x3f	; 63
     3a2:	0f 92       	push	r0
     3a4:	11 24       	eor	r1, r1
     3a6:	08 b6       	in	r0, 0x38	; 56
     3a8:	0f 92       	push	r0
     3aa:	18 be       	out	0x38, r1	; 56
     3ac:	09 b6       	in	r0, 0x39	; 57
     3ae:	0f 92       	push	r0
     3b0:	19 be       	out	0x39, r1	; 57
     3b2:	0b b6       	in	r0, 0x3b	; 59
     3b4:	0f 92       	push	r0
     3b6:	1b be       	out	0x3b, r1	; 59
     3b8:	2f 93       	push	r18
     3ba:	3f 93       	push	r19
     3bc:	4f 93       	push	r20
     3be:	5f 93       	push	r21
     3c0:	6f 93       	push	r22
     3c2:	7f 93       	push	r23
     3c4:	8f 93       	push	r24
     3c6:	9f 93       	push	r25
     3c8:	af 93       	push	r26
     3ca:	bf 93       	push	r27
     3cc:	ef 93       	push	r30
     3ce:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     3d0:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     3d4:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     3d8:	e0 91 7d 22 	lds	r30, 0x227D	; 0x80227d <adca_callback>
     3dc:	f0 91 7e 22 	lds	r31, 0x227E	; 0x80227e <adca_callback+0x1>
     3e0:	62 e0       	ldi	r22, 0x02	; 2
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	92 e0       	ldi	r25, 0x02	; 2
     3e6:	19 95       	eicall
}
     3e8:	ff 91       	pop	r31
     3ea:	ef 91       	pop	r30
     3ec:	bf 91       	pop	r27
     3ee:	af 91       	pop	r26
     3f0:	9f 91       	pop	r25
     3f2:	8f 91       	pop	r24
     3f4:	7f 91       	pop	r23
     3f6:	6f 91       	pop	r22
     3f8:	5f 91       	pop	r21
     3fa:	4f 91       	pop	r20
     3fc:	3f 91       	pop	r19
     3fe:	2f 91       	pop	r18
     400:	0f 90       	pop	r0
     402:	0b be       	out	0x3b, r0	; 59
     404:	0f 90       	pop	r0
     406:	09 be       	out	0x39, r0	; 57
     408:	0f 90       	pop	r0
     40a:	08 be       	out	0x38, r0	; 56
     40c:	0f 90       	pop	r0
     40e:	0f be       	out	0x3f, r0	; 63
     410:	0f 90       	pop	r0
     412:	1f 90       	pop	r1
     414:	18 95       	reti

00000416 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     416:	1f 92       	push	r1
     418:	0f 92       	push	r0
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	0f 92       	push	r0
     41e:	11 24       	eor	r1, r1
     420:	08 b6       	in	r0, 0x38	; 56
     422:	0f 92       	push	r0
     424:	18 be       	out	0x38, r1	; 56
     426:	09 b6       	in	r0, 0x39	; 57
     428:	0f 92       	push	r0
     42a:	19 be       	out	0x39, r1	; 57
     42c:	0b b6       	in	r0, 0x3b	; 59
     42e:	0f 92       	push	r0
     430:	1b be       	out	0x3b, r1	; 59
     432:	2f 93       	push	r18
     434:	3f 93       	push	r19
     436:	4f 93       	push	r20
     438:	5f 93       	push	r21
     43a:	6f 93       	push	r22
     43c:	7f 93       	push	r23
     43e:	8f 93       	push	r24
     440:	9f 93       	push	r25
     442:	af 93       	push	r26
     444:	bf 93       	push	r27
     446:	ef 93       	push	r30
     448:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     44a:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     44e:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     452:	e0 91 7d 22 	lds	r30, 0x227D	; 0x80227d <adca_callback>
     456:	f0 91 7e 22 	lds	r31, 0x227E	; 0x80227e <adca_callback+0x1>
     45a:	64 e0       	ldi	r22, 0x04	; 4
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	92 e0       	ldi	r25, 0x02	; 2
     460:	19 95       	eicall
}
     462:	ff 91       	pop	r31
     464:	ef 91       	pop	r30
     466:	bf 91       	pop	r27
     468:	af 91       	pop	r26
     46a:	9f 91       	pop	r25
     46c:	8f 91       	pop	r24
     46e:	7f 91       	pop	r23
     470:	6f 91       	pop	r22
     472:	5f 91       	pop	r21
     474:	4f 91       	pop	r20
     476:	3f 91       	pop	r19
     478:	2f 91       	pop	r18
     47a:	0f 90       	pop	r0
     47c:	0b be       	out	0x3b, r0	; 59
     47e:	0f 90       	pop	r0
     480:	09 be       	out	0x39, r0	; 57
     482:	0f 90       	pop	r0
     484:	08 be       	out	0x38, r0	; 56
     486:	0f 90       	pop	r0
     488:	0f be       	out	0x3f, r0	; 63
     48a:	0f 90       	pop	r0
     48c:	1f 90       	pop	r1
     48e:	18 95       	reti

00000490 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     490:	1f 92       	push	r1
     492:	0f 92       	push	r0
     494:	0f b6       	in	r0, 0x3f	; 63
     496:	0f 92       	push	r0
     498:	11 24       	eor	r1, r1
     49a:	08 b6       	in	r0, 0x38	; 56
     49c:	0f 92       	push	r0
     49e:	18 be       	out	0x38, r1	; 56
     4a0:	09 b6       	in	r0, 0x39	; 57
     4a2:	0f 92       	push	r0
     4a4:	19 be       	out	0x39, r1	; 57
     4a6:	0b b6       	in	r0, 0x3b	; 59
     4a8:	0f 92       	push	r0
     4aa:	1b be       	out	0x3b, r1	; 59
     4ac:	2f 93       	push	r18
     4ae:	3f 93       	push	r19
     4b0:	4f 93       	push	r20
     4b2:	5f 93       	push	r21
     4b4:	6f 93       	push	r22
     4b6:	7f 93       	push	r23
     4b8:	8f 93       	push	r24
     4ba:	9f 93       	push	r25
     4bc:	af 93       	push	r26
     4be:	bf 93       	push	r27
     4c0:	ef 93       	push	r30
     4c2:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     4c4:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     4c8:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     4cc:	e0 91 7d 22 	lds	r30, 0x227D	; 0x80227d <adca_callback>
     4d0:	f0 91 7e 22 	lds	r31, 0x227E	; 0x80227e <adca_callback+0x1>
     4d4:	68 e0       	ldi	r22, 0x08	; 8
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	92 e0       	ldi	r25, 0x02	; 2
     4da:	19 95       	eicall
}
     4dc:	ff 91       	pop	r31
     4de:	ef 91       	pop	r30
     4e0:	bf 91       	pop	r27
     4e2:	af 91       	pop	r26
     4e4:	9f 91       	pop	r25
     4e6:	8f 91       	pop	r24
     4e8:	7f 91       	pop	r23
     4ea:	6f 91       	pop	r22
     4ec:	5f 91       	pop	r21
     4ee:	4f 91       	pop	r20
     4f0:	3f 91       	pop	r19
     4f2:	2f 91       	pop	r18
     4f4:	0f 90       	pop	r0
     4f6:	0b be       	out	0x3b, r0	; 59
     4f8:	0f 90       	pop	r0
     4fa:	09 be       	out	0x39, r0	; 57
     4fc:	0f 90       	pop	r0
     4fe:	08 be       	out	0x38, r0	; 56
     500:	0f 90       	pop	r0
     502:	0f be       	out	0x3f, r0	; 63
     504:	0f 90       	pop	r0
     506:	1f 90       	pop	r1
     508:	18 95       	reti

0000050a <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     50a:	1f 92       	push	r1
     50c:	0f 92       	push	r0
     50e:	0f b6       	in	r0, 0x3f	; 63
     510:	0f 92       	push	r0
     512:	11 24       	eor	r1, r1
     514:	08 b6       	in	r0, 0x38	; 56
     516:	0f 92       	push	r0
     518:	18 be       	out	0x38, r1	; 56
     51a:	09 b6       	in	r0, 0x39	; 57
     51c:	0f 92       	push	r0
     51e:	19 be       	out	0x39, r1	; 57
     520:	0b b6       	in	r0, 0x3b	; 59
     522:	0f 92       	push	r0
     524:	1b be       	out	0x3b, r1	; 59
     526:	2f 93       	push	r18
     528:	3f 93       	push	r19
     52a:	4f 93       	push	r20
     52c:	5f 93       	push	r21
     52e:	6f 93       	push	r22
     530:	7f 93       	push	r23
     532:	8f 93       	push	r24
     534:	9f 93       	push	r25
     536:	af 93       	push	r26
     538:	bf 93       	push	r27
     53a:	ef 93       	push	r30
     53c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     53e:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     542:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     546:	e0 91 7b 22 	lds	r30, 0x227B	; 0x80227b <adcb_callback>
     54a:	f0 91 7c 22 	lds	r31, 0x227C	; 0x80227c <adcb_callback+0x1>
     54e:	61 e0       	ldi	r22, 0x01	; 1
     550:	80 e4       	ldi	r24, 0x40	; 64
     552:	92 e0       	ldi	r25, 0x02	; 2
     554:	19 95       	eicall
}
     556:	ff 91       	pop	r31
     558:	ef 91       	pop	r30
     55a:	bf 91       	pop	r27
     55c:	af 91       	pop	r26
     55e:	9f 91       	pop	r25
     560:	8f 91       	pop	r24
     562:	7f 91       	pop	r23
     564:	6f 91       	pop	r22
     566:	5f 91       	pop	r21
     568:	4f 91       	pop	r20
     56a:	3f 91       	pop	r19
     56c:	2f 91       	pop	r18
     56e:	0f 90       	pop	r0
     570:	0b be       	out	0x3b, r0	; 59
     572:	0f 90       	pop	r0
     574:	09 be       	out	0x39, r0	; 57
     576:	0f 90       	pop	r0
     578:	08 be       	out	0x38, r0	; 56
     57a:	0f 90       	pop	r0
     57c:	0f be       	out	0x3f, r0	; 63
     57e:	0f 90       	pop	r0
     580:	1f 90       	pop	r1
     582:	18 95       	reti

00000584 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     584:	1f 92       	push	r1
     586:	0f 92       	push	r0
     588:	0f b6       	in	r0, 0x3f	; 63
     58a:	0f 92       	push	r0
     58c:	11 24       	eor	r1, r1
     58e:	08 b6       	in	r0, 0x38	; 56
     590:	0f 92       	push	r0
     592:	18 be       	out	0x38, r1	; 56
     594:	09 b6       	in	r0, 0x39	; 57
     596:	0f 92       	push	r0
     598:	19 be       	out	0x39, r1	; 57
     59a:	0b b6       	in	r0, 0x3b	; 59
     59c:	0f 92       	push	r0
     59e:	1b be       	out	0x3b, r1	; 59
     5a0:	2f 93       	push	r18
     5a2:	3f 93       	push	r19
     5a4:	4f 93       	push	r20
     5a6:	5f 93       	push	r21
     5a8:	6f 93       	push	r22
     5aa:	7f 93       	push	r23
     5ac:	8f 93       	push	r24
     5ae:	9f 93       	push	r25
     5b0:	af 93       	push	r26
     5b2:	bf 93       	push	r27
     5b4:	ef 93       	push	r30
     5b6:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     5b8:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     5bc:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     5c0:	e0 91 7b 22 	lds	r30, 0x227B	; 0x80227b <adcb_callback>
     5c4:	f0 91 7c 22 	lds	r31, 0x227C	; 0x80227c <adcb_callback+0x1>
     5c8:	62 e0       	ldi	r22, 0x02	; 2
     5ca:	80 e4       	ldi	r24, 0x40	; 64
     5cc:	92 e0       	ldi	r25, 0x02	; 2
     5ce:	19 95       	eicall
}
     5d0:	ff 91       	pop	r31
     5d2:	ef 91       	pop	r30
     5d4:	bf 91       	pop	r27
     5d6:	af 91       	pop	r26
     5d8:	9f 91       	pop	r25
     5da:	8f 91       	pop	r24
     5dc:	7f 91       	pop	r23
     5de:	6f 91       	pop	r22
     5e0:	5f 91       	pop	r21
     5e2:	4f 91       	pop	r20
     5e4:	3f 91       	pop	r19
     5e6:	2f 91       	pop	r18
     5e8:	0f 90       	pop	r0
     5ea:	0b be       	out	0x3b, r0	; 59
     5ec:	0f 90       	pop	r0
     5ee:	09 be       	out	0x39, r0	; 57
     5f0:	0f 90       	pop	r0
     5f2:	08 be       	out	0x38, r0	; 56
     5f4:	0f 90       	pop	r0
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	0f 90       	pop	r0
     5fa:	1f 90       	pop	r1
     5fc:	18 95       	reti

000005fe <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     5fe:	1f 92       	push	r1
     600:	0f 92       	push	r0
     602:	0f b6       	in	r0, 0x3f	; 63
     604:	0f 92       	push	r0
     606:	11 24       	eor	r1, r1
     608:	08 b6       	in	r0, 0x38	; 56
     60a:	0f 92       	push	r0
     60c:	18 be       	out	0x38, r1	; 56
     60e:	09 b6       	in	r0, 0x39	; 57
     610:	0f 92       	push	r0
     612:	19 be       	out	0x39, r1	; 57
     614:	0b b6       	in	r0, 0x3b	; 59
     616:	0f 92       	push	r0
     618:	1b be       	out	0x3b, r1	; 59
     61a:	2f 93       	push	r18
     61c:	3f 93       	push	r19
     61e:	4f 93       	push	r20
     620:	5f 93       	push	r21
     622:	6f 93       	push	r22
     624:	7f 93       	push	r23
     626:	8f 93       	push	r24
     628:	9f 93       	push	r25
     62a:	af 93       	push	r26
     62c:	bf 93       	push	r27
     62e:	ef 93       	push	r30
     630:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     632:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     636:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     63a:	e0 91 7b 22 	lds	r30, 0x227B	; 0x80227b <adcb_callback>
     63e:	f0 91 7c 22 	lds	r31, 0x227C	; 0x80227c <adcb_callback+0x1>
     642:	64 e0       	ldi	r22, 0x04	; 4
     644:	80 e4       	ldi	r24, 0x40	; 64
     646:	92 e0       	ldi	r25, 0x02	; 2
     648:	19 95       	eicall
}
     64a:	ff 91       	pop	r31
     64c:	ef 91       	pop	r30
     64e:	bf 91       	pop	r27
     650:	af 91       	pop	r26
     652:	9f 91       	pop	r25
     654:	8f 91       	pop	r24
     656:	7f 91       	pop	r23
     658:	6f 91       	pop	r22
     65a:	5f 91       	pop	r21
     65c:	4f 91       	pop	r20
     65e:	3f 91       	pop	r19
     660:	2f 91       	pop	r18
     662:	0f 90       	pop	r0
     664:	0b be       	out	0x3b, r0	; 59
     666:	0f 90       	pop	r0
     668:	09 be       	out	0x39, r0	; 57
     66a:	0f 90       	pop	r0
     66c:	08 be       	out	0x38, r0	; 56
     66e:	0f 90       	pop	r0
     670:	0f be       	out	0x3f, r0	; 63
     672:	0f 90       	pop	r0
     674:	1f 90       	pop	r1
     676:	18 95       	reti

00000678 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     678:	1f 92       	push	r1
     67a:	0f 92       	push	r0
     67c:	0f b6       	in	r0, 0x3f	; 63
     67e:	0f 92       	push	r0
     680:	11 24       	eor	r1, r1
     682:	08 b6       	in	r0, 0x38	; 56
     684:	0f 92       	push	r0
     686:	18 be       	out	0x38, r1	; 56
     688:	09 b6       	in	r0, 0x39	; 57
     68a:	0f 92       	push	r0
     68c:	19 be       	out	0x39, r1	; 57
     68e:	0b b6       	in	r0, 0x3b	; 59
     690:	0f 92       	push	r0
     692:	1b be       	out	0x3b, r1	; 59
     694:	2f 93       	push	r18
     696:	3f 93       	push	r19
     698:	4f 93       	push	r20
     69a:	5f 93       	push	r21
     69c:	6f 93       	push	r22
     69e:	7f 93       	push	r23
     6a0:	8f 93       	push	r24
     6a2:	9f 93       	push	r25
     6a4:	af 93       	push	r26
     6a6:	bf 93       	push	r27
     6a8:	ef 93       	push	r30
     6aa:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     6ac:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     6b0:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     6b4:	e0 91 7b 22 	lds	r30, 0x227B	; 0x80227b <adcb_callback>
     6b8:	f0 91 7c 22 	lds	r31, 0x227C	; 0x80227c <adcb_callback+0x1>
     6bc:	68 e0       	ldi	r22, 0x08	; 8
     6be:	80 e4       	ldi	r24, 0x40	; 64
     6c0:	92 e0       	ldi	r25, 0x02	; 2
     6c2:	19 95       	eicall
}
     6c4:	ff 91       	pop	r31
     6c6:	ef 91       	pop	r30
     6c8:	bf 91       	pop	r27
     6ca:	af 91       	pop	r26
     6cc:	9f 91       	pop	r25
     6ce:	8f 91       	pop	r24
     6d0:	7f 91       	pop	r23
     6d2:	6f 91       	pop	r22
     6d4:	5f 91       	pop	r21
     6d6:	4f 91       	pop	r20
     6d8:	3f 91       	pop	r19
     6da:	2f 91       	pop	r18
     6dc:	0f 90       	pop	r0
     6de:	0b be       	out	0x3b, r0	; 59
     6e0:	0f 90       	pop	r0
     6e2:	09 be       	out	0x39, r0	; 57
     6e4:	0f 90       	pop	r0
     6e6:	08 be       	out	0x38, r0	; 56
     6e8:	0f 90       	pop	r0
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	0f 90       	pop	r0
     6ee:	1f 90       	pop	r1
     6f0:	18 95       	reti

000006f2 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
     6f2:	bf 92       	push	r11
     6f4:	cf 92       	push	r12
     6f6:	df 92       	push	r13
     6f8:	ef 92       	push	r14
     6fa:	ff 92       	push	r15
     6fc:	0f 93       	push	r16
     6fe:	1f 93       	push	r17
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	1f 92       	push	r1
     706:	cd b7       	in	r28, 0x3d	; 61
     708:	de b7       	in	r29, 0x3e	; 62
     70a:	8c 01       	movw	r16, r24
     70c:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     70e:	81 15       	cp	r24, r1
     710:	22 e0       	ldi	r18, 0x02	; 2
     712:	92 07       	cpc	r25, r18
     714:	81 f4       	brne	.+32     	; 0x736 <adc_write_configuration+0x44>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     716:	61 e2       	ldi	r22, 0x21	; 33
     718:	70 e0       	ldi	r23, 0x00	; 0
     71a:	82 e0       	ldi	r24, 0x02	; 2
     71c:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     720:	c8 2e       	mov	r12, r24
     722:	d1 2c       	mov	r13, r1
     724:	60 e2       	ldi	r22, 0x20	; 32
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	82 e0       	ldi	r24, 0x02	; 2
     72a:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
     72e:	dc 2c       	mov	r13, r12
     730:	cc 24       	eor	r12, r12
     732:	c8 2a       	or	r12, r24
     734:	12 c0       	rjmp	.+36     	; 0x75a <adc_write_configuration+0x68>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     736:	80 34       	cpi	r24, 0x40	; 64
     738:	92 40       	sbci	r25, 0x02	; 2
     73a:	d1 f5       	brne	.+116    	; 0x7b0 <adc_write_configuration+0xbe>
     73c:	65 e2       	ldi	r22, 0x25	; 37
     73e:	70 e0       	ldi	r23, 0x00	; 0
     740:	82 e0       	ldi	r24, 0x02	; 2
     742:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
     746:	c8 2e       	mov	r12, r24
     748:	d1 2c       	mov	r13, r1
     74a:	64 e2       	ldi	r22, 0x24	; 36
     74c:	70 e0       	ldi	r23, 0x00	; 0
     74e:	82 e0       	ldi	r24, 0x02	; 2
     750:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
     754:	dc 2c       	mov	r13, r12
     756:	cc 24       	eor	r12, r12
     758:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     75a:	8f b7       	in	r24, 0x3f	; 63
     75c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     75e:	f8 94       	cli
	return flags;
     760:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
     762:	c8 01       	movw	r24, r16
     764:	72 dd       	rcall	.-1308   	; 0x24a <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
     766:	f8 01       	movw	r30, r16
     768:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
     76a:	92 e0       	ldi	r25, 0x02	; 2
     76c:	90 83       	st	Z, r25
	adc->CAL = cal;
     76e:	c4 86       	std	Z+12, r12	; 0x0c
     770:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
     772:	f7 01       	movw	r30, r14
     774:	25 81       	ldd	r18, Z+5	; 0x05
     776:	36 81       	ldd	r19, Z+6	; 0x06
     778:	f8 01       	movw	r30, r16
     77a:	20 8f       	std	Z+24, r18	; 0x18
     77c:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
     77e:	f7 01       	movw	r30, r14
     780:	92 81       	ldd	r25, Z+2	; 0x02
     782:	f8 01       	movw	r30, r16
     784:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
     786:	f7 01       	movw	r30, r14
     788:	94 81       	ldd	r25, Z+4	; 0x04
     78a:	f8 01       	movw	r30, r16
     78c:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
     78e:	f7 01       	movw	r30, r14
     790:	93 81       	ldd	r25, Z+3	; 0x03
     792:	f8 01       	movw	r30, r16
     794:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
     796:	f7 01       	movw	r30, r14
     798:	91 81       	ldd	r25, Z+1	; 0x01
     79a:	f8 01       	movw	r30, r16
     79c:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
     79e:	81 70       	andi	r24, 0x01	; 1
     7a0:	f7 01       	movw	r30, r14
     7a2:	90 81       	ld	r25, Z
     7a4:	89 2b       	or	r24, r25
     7a6:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
     7a8:	80 83       	st	Z, r24
     7aa:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7ac:	6f dd       	rcall	.-1314   	; 0x28c <adc_disable_clock>

	cpu_irq_restore(flags);
}
     7ae:	bf be       	out	0x3f, r11	; 63
     7b0:	0f 90       	pop	r0
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	1f 91       	pop	r17
     7b8:	0f 91       	pop	r16
     7ba:	ff 90       	pop	r15
     7bc:	ef 90       	pop	r14
     7be:	df 90       	pop	r13
     7c0:	cf 90       	pop	r12
     7c2:	bf 90       	pop	r11
     7c4:	08 95       	ret

000007c6 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
     7c6:	df 92       	push	r13
     7c8:	ef 92       	push	r14
     7ca:	ff 92       	push	r15
     7cc:	0f 93       	push	r16
     7ce:	1f 93       	push	r17
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
     7d4:	1f 92       	push	r1
     7d6:	cd b7       	in	r28, 0x3d	; 61
     7d8:	de b7       	in	r29, 0x3e	; 62
     7da:	8c 01       	movw	r16, r24
     7dc:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     7de:	8f b7       	in	r24, 0x3f	; 63
     7e0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     7e2:	f8 94       	cli
	return flags;
     7e4:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
     7e6:	c8 01       	movw	r24, r16
     7e8:	30 dd       	rcall	.-1440   	; 0x24a <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
     7ea:	f8 01       	movw	r30, r16
     7ec:	80 81       	ld	r24, Z
     7ee:	80 7c       	andi	r24, 0xC0	; 192
     7f0:	f7 01       	movw	r30, r14
     7f2:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
     7f4:	f8 01       	movw	r30, r16
     7f6:	80 8d       	ldd	r24, Z+24	; 0x18
     7f8:	91 8d       	ldd	r25, Z+25	; 0x19
     7fa:	f7 01       	movw	r30, r14
     7fc:	85 83       	std	Z+5, r24	; 0x05
     7fe:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
     800:	f8 01       	movw	r30, r16
     802:	82 81       	ldd	r24, Z+2	; 0x02
     804:	f7 01       	movw	r30, r14
     806:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
     808:	f8 01       	movw	r30, r16
     80a:	84 81       	ldd	r24, Z+4	; 0x04
     80c:	f7 01       	movw	r30, r14
     80e:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
     810:	f8 01       	movw	r30, r16
     812:	83 81       	ldd	r24, Z+3	; 0x03
     814:	f7 01       	movw	r30, r14
     816:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
     818:	f8 01       	movw	r30, r16
     81a:	81 81       	ldd	r24, Z+1	; 0x01
     81c:	f7 01       	movw	r30, r14

	adc_disable_clock(adc);
     81e:	81 83       	std	Z+1, r24	; 0x01
     820:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     822:	34 dd       	rcall	.-1432   	; 0x28c <adc_disable_clock>

	cpu_irq_restore(flags);
}
     824:	df be       	out	0x3f, r13	; 63
     826:	0f 90       	pop	r0
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	1f 91       	pop	r17
     82e:	0f 91       	pop	r16
     830:	ff 90       	pop	r15
     832:	ef 90       	pop	r14
     834:	df 90       	pop	r13
     836:	08 95       	ret

00000838 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
     838:	af 92       	push	r10
     83a:	bf 92       	push	r11
     83c:	cf 92       	push	r12
     83e:	df 92       	push	r13
     840:	ef 92       	push	r14
     842:	ff 92       	push	r15
     844:	0f 93       	push	r16
     846:	1f 93       	push	r17
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	1f 92       	push	r1
     84e:	cd b7       	in	r28, 0x3d	; 61
     850:	de b7       	in	r29, 0x3e	; 62
     852:	6c 01       	movw	r12, r24
     854:	b6 2e       	mov	r11, r22
     856:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     858:	86 2f       	mov	r24, r22
     85a:	83 70       	andi	r24, 0x03	; 3
     85c:	29 f4       	brne	.+10     	; 0x868 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     85e:	96 2f       	mov	r25, r22
     860:	96 95       	lsr	r25
     862:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     864:	82 e0       	ldi	r24, 0x02	; 2
     866:	02 c0       	rjmp	.+4      	; 0x86c <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     868:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     86a:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     86c:	90 ff       	sbrs	r25, 0
		index++;
     86e:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     870:	86 01       	movw	r16, r12
     872:	00 5e       	subi	r16, 0xE0	; 224
     874:	1f 4f       	sbci	r17, 0xFF	; 255
     876:	98 e0       	ldi	r25, 0x08	; 8
     878:	89 9f       	mul	r24, r25
     87a:	00 0d       	add	r16, r0
     87c:	11 1d       	adc	r17, r1
     87e:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     880:	8f b7       	in	r24, 0x3f	; 63
     882:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     884:	f8 94       	cli
	return flags;
     886:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
     888:	c6 01       	movw	r24, r12
     88a:	df dc       	rcall	.-1602   	; 0x24a <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
     88c:	f7 01       	movw	r30, r14
     88e:	80 81       	ld	r24, Z
     890:	f8 01       	movw	r30, r16
     892:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
     894:	f7 01       	movw	r30, r14
     896:	82 81       	ldd	r24, Z+2	; 0x02
     898:	f8 01       	movw	r30, r16
     89a:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
     89c:	f7 01       	movw	r30, r14
     89e:	81 81       	ldd	r24, Z+1	; 0x01
     8a0:	f8 01       	movw	r30, r16
     8a2:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     8a4:	b0 fe       	sbrs	r11, 0
     8a6:	04 c0       	rjmp	.+8      	; 0x8b0 <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
     8a8:	f7 01       	movw	r30, r14
     8aa:	83 81       	ldd	r24, Z+3	; 0x03
     8ac:	f8 01       	movw	r30, r16
	}
	adc_disable_clock(adc);
     8ae:	86 83       	std	Z+6, r24	; 0x06
     8b0:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     8b2:	ec dc       	rcall	.-1576   	; 0x28c <adc_disable_clock>

	cpu_irq_restore(flags);
}
     8b4:	af be       	out	0x3f, r10	; 63
     8b6:	0f 90       	pop	r0
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	1f 91       	pop	r17
     8be:	0f 91       	pop	r16
     8c0:	ff 90       	pop	r15
     8c2:	ef 90       	pop	r14
     8c4:	df 90       	pop	r13
     8c6:	cf 90       	pop	r12
     8c8:	bf 90       	pop	r11
     8ca:	af 90       	pop	r10
     8cc:	08 95       	ret

000008ce <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
     8ce:	af 92       	push	r10
     8d0:	bf 92       	push	r11
     8d2:	cf 92       	push	r12
     8d4:	df 92       	push	r13
     8d6:	ef 92       	push	r14
     8d8:	ff 92       	push	r15
     8da:	0f 93       	push	r16
     8dc:	1f 93       	push	r17
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	1f 92       	push	r1
     8e4:	cd b7       	in	r28, 0x3d	; 61
     8e6:	de b7       	in	r29, 0x3e	; 62
     8e8:	6c 01       	movw	r12, r24
     8ea:	b6 2e       	mov	r11, r22
     8ec:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     8ee:	86 2f       	mov	r24, r22
     8f0:	83 70       	andi	r24, 0x03	; 3
     8f2:	29 f4       	brne	.+10     	; 0x8fe <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     8f4:	96 2f       	mov	r25, r22
     8f6:	96 95       	lsr	r25
     8f8:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     8fa:	82 e0       	ldi	r24, 0x02	; 2
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     8fe:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     900:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     902:	90 ff       	sbrs	r25, 0
		index++;
     904:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     906:	86 01       	movw	r16, r12
     908:	00 5e       	subi	r16, 0xE0	; 224
     90a:	1f 4f       	sbci	r17, 0xFF	; 255
     90c:	98 e0       	ldi	r25, 0x08	; 8
     90e:	89 9f       	mul	r24, r25
     910:	00 0d       	add	r16, r0
     912:	11 1d       	adc	r17, r1
     914:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     916:	8f b7       	in	r24, 0x3f	; 63
     918:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     91a:	f8 94       	cli
	return flags;
     91c:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
     91e:	c6 01       	movw	r24, r12
     920:	94 dc       	rcall	.-1752   	; 0x24a <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
     922:	f8 01       	movw	r30, r16
     924:	80 81       	ld	r24, Z
     926:	f7 01       	movw	r30, r14
     928:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
     92a:	f8 01       	movw	r30, r16
     92c:	82 81       	ldd	r24, Z+2	; 0x02
     92e:	f7 01       	movw	r30, r14
     930:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
     932:	f8 01       	movw	r30, r16
     934:	81 81       	ldd	r24, Z+1	; 0x01
     936:	f7 01       	movw	r30, r14
     938:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     93a:	b0 fe       	sbrs	r11, 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
     93e:	f8 01       	movw	r30, r16
     940:	86 81       	ldd	r24, Z+6	; 0x06
     942:	f7 01       	movw	r30, r14
	}
	adc_disable_clock(adc);
     944:	83 83       	std	Z+3, r24	; 0x03
     946:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     948:	a1 dc       	rcall	.-1726   	; 0x28c <adc_disable_clock>

	cpu_irq_restore(flags);
}
     94a:	af be       	out	0x3f, r10	; 63
     94c:	0f 90       	pop	r0
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	1f 91       	pop	r17
     954:	0f 91       	pop	r16
     956:	ff 90       	pop	r15
     958:	ef 90       	pop	r14
     95a:	df 90       	pop	r13
     95c:	cf 90       	pop	r12
     95e:	bf 90       	pop	r11
     960:	af 90       	pop	r10
     962:	08 95       	ret

00000964 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     964:	1f 92       	push	r1
     966:	0f 92       	push	r0
     968:	0f b6       	in	r0, 0x3f	; 63
     96a:	0f 92       	push	r0
     96c:	11 24       	eor	r1, r1
     96e:	08 b6       	in	r0, 0x38	; 56
     970:	0f 92       	push	r0
     972:	18 be       	out	0x38, r1	; 56
     974:	09 b6       	in	r0, 0x39	; 57
     976:	0f 92       	push	r0
     978:	19 be       	out	0x39, r1	; 57
     97a:	0b b6       	in	r0, 0x3b	; 59
     97c:	0f 92       	push	r0
     97e:	1b be       	out	0x3b, r1	; 59
     980:	2f 93       	push	r18
     982:	3f 93       	push	r19
     984:	4f 93       	push	r20
     986:	5f 93       	push	r21
     988:	6f 93       	push	r22
     98a:	7f 93       	push	r23
     98c:	8f 93       	push	r24
     98e:	9f 93       	push	r25
     990:	af 93       	push	r26
     992:	bf 93       	push	r27
     994:	ef 93       	push	r30
     996:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     998:	e0 91 fe 21 	lds	r30, 0x21FE	; 0x8021fe <tc_tcc0_err_callback>
     99c:	f0 91 ff 21 	lds	r31, 0x21FF	; 0x8021ff <tc_tcc0_err_callback+0x1>
     9a0:	30 97       	sbiw	r30, 0x00	; 0
     9a2:	09 f0       	breq	.+2      	; 0x9a6 <__vector_15+0x42>
		tc_tcc0_err_callback();
     9a4:	19 95       	eicall
	}
}
     9a6:	ff 91       	pop	r31
     9a8:	ef 91       	pop	r30
     9aa:	bf 91       	pop	r27
     9ac:	af 91       	pop	r26
     9ae:	9f 91       	pop	r25
     9b0:	8f 91       	pop	r24
     9b2:	7f 91       	pop	r23
     9b4:	6f 91       	pop	r22
     9b6:	5f 91       	pop	r21
     9b8:	4f 91       	pop	r20
     9ba:	3f 91       	pop	r19
     9bc:	2f 91       	pop	r18
     9be:	0f 90       	pop	r0
     9c0:	0b be       	out	0x3b, r0	; 59
     9c2:	0f 90       	pop	r0
     9c4:	09 be       	out	0x39, r0	; 57
     9c6:	0f 90       	pop	r0
     9c8:	08 be       	out	0x38, r0	; 56
     9ca:	0f 90       	pop	r0
     9cc:	0f be       	out	0x3f, r0	; 63
     9ce:	0f 90       	pop	r0
     9d0:	1f 90       	pop	r1
     9d2:	18 95       	reti

000009d4 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     9d4:	1f 92       	push	r1
     9d6:	0f 92       	push	r0
     9d8:	0f b6       	in	r0, 0x3f	; 63
     9da:	0f 92       	push	r0
     9dc:	11 24       	eor	r1, r1
     9de:	08 b6       	in	r0, 0x38	; 56
     9e0:	0f 92       	push	r0
     9e2:	18 be       	out	0x38, r1	; 56
     9e4:	09 b6       	in	r0, 0x39	; 57
     9e6:	0f 92       	push	r0
     9e8:	19 be       	out	0x39, r1	; 57
     9ea:	0b b6       	in	r0, 0x3b	; 59
     9ec:	0f 92       	push	r0
     9ee:	1b be       	out	0x3b, r1	; 59
     9f0:	2f 93       	push	r18
     9f2:	3f 93       	push	r19
     9f4:	4f 93       	push	r20
     9f6:	5f 93       	push	r21
     9f8:	6f 93       	push	r22
     9fa:	7f 93       	push	r23
     9fc:	8f 93       	push	r24
     9fe:	9f 93       	push	r25
     a00:	af 93       	push	r26
     a02:	bf 93       	push	r27
     a04:	ef 93       	push	r30
     a06:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     a08:	e0 91 fc 21 	lds	r30, 0x21FC	; 0x8021fc <tc_tcc0_cca_callback>
     a0c:	f0 91 fd 21 	lds	r31, 0x21FD	; 0x8021fd <tc_tcc0_cca_callback+0x1>
     a10:	30 97       	sbiw	r30, 0x00	; 0
     a12:	09 f0       	breq	.+2      	; 0xa16 <__vector_16+0x42>
		tc_tcc0_cca_callback();
     a14:	19 95       	eicall
	}
}
     a16:	ff 91       	pop	r31
     a18:	ef 91       	pop	r30
     a1a:	bf 91       	pop	r27
     a1c:	af 91       	pop	r26
     a1e:	9f 91       	pop	r25
     a20:	8f 91       	pop	r24
     a22:	7f 91       	pop	r23
     a24:	6f 91       	pop	r22
     a26:	5f 91       	pop	r21
     a28:	4f 91       	pop	r20
     a2a:	3f 91       	pop	r19
     a2c:	2f 91       	pop	r18
     a2e:	0f 90       	pop	r0
     a30:	0b be       	out	0x3b, r0	; 59
     a32:	0f 90       	pop	r0
     a34:	09 be       	out	0x39, r0	; 57
     a36:	0f 90       	pop	r0
     a38:	08 be       	out	0x38, r0	; 56
     a3a:	0f 90       	pop	r0
     a3c:	0f be       	out	0x3f, r0	; 63
     a3e:	0f 90       	pop	r0
     a40:	1f 90       	pop	r1
     a42:	18 95       	reti

00000a44 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     a44:	1f 92       	push	r1
     a46:	0f 92       	push	r0
     a48:	0f b6       	in	r0, 0x3f	; 63
     a4a:	0f 92       	push	r0
     a4c:	11 24       	eor	r1, r1
     a4e:	08 b6       	in	r0, 0x38	; 56
     a50:	0f 92       	push	r0
     a52:	18 be       	out	0x38, r1	; 56
     a54:	09 b6       	in	r0, 0x39	; 57
     a56:	0f 92       	push	r0
     a58:	19 be       	out	0x39, r1	; 57
     a5a:	0b b6       	in	r0, 0x3b	; 59
     a5c:	0f 92       	push	r0
     a5e:	1b be       	out	0x3b, r1	; 59
     a60:	2f 93       	push	r18
     a62:	3f 93       	push	r19
     a64:	4f 93       	push	r20
     a66:	5f 93       	push	r21
     a68:	6f 93       	push	r22
     a6a:	7f 93       	push	r23
     a6c:	8f 93       	push	r24
     a6e:	9f 93       	push	r25
     a70:	af 93       	push	r26
     a72:	bf 93       	push	r27
     a74:	ef 93       	push	r30
     a76:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     a78:	e0 91 fa 21 	lds	r30, 0x21FA	; 0x8021fa <tc_tcc0_ccb_callback>
     a7c:	f0 91 fb 21 	lds	r31, 0x21FB	; 0x8021fb <tc_tcc0_ccb_callback+0x1>
     a80:	30 97       	sbiw	r30, 0x00	; 0
     a82:	09 f0       	breq	.+2      	; 0xa86 <__vector_17+0x42>
		tc_tcc0_ccb_callback();
     a84:	19 95       	eicall
	}
}
     a86:	ff 91       	pop	r31
     a88:	ef 91       	pop	r30
     a8a:	bf 91       	pop	r27
     a8c:	af 91       	pop	r26
     a8e:	9f 91       	pop	r25
     a90:	8f 91       	pop	r24
     a92:	7f 91       	pop	r23
     a94:	6f 91       	pop	r22
     a96:	5f 91       	pop	r21
     a98:	4f 91       	pop	r20
     a9a:	3f 91       	pop	r19
     a9c:	2f 91       	pop	r18
     a9e:	0f 90       	pop	r0
     aa0:	0b be       	out	0x3b, r0	; 59
     aa2:	0f 90       	pop	r0
     aa4:	09 be       	out	0x39, r0	; 57
     aa6:	0f 90       	pop	r0
     aa8:	08 be       	out	0x38, r0	; 56
     aaa:	0f 90       	pop	r0
     aac:	0f be       	out	0x3f, r0	; 63
     aae:	0f 90       	pop	r0
     ab0:	1f 90       	pop	r1
     ab2:	18 95       	reti

00000ab4 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     ab4:	1f 92       	push	r1
     ab6:	0f 92       	push	r0
     ab8:	0f b6       	in	r0, 0x3f	; 63
     aba:	0f 92       	push	r0
     abc:	11 24       	eor	r1, r1
     abe:	08 b6       	in	r0, 0x38	; 56
     ac0:	0f 92       	push	r0
     ac2:	18 be       	out	0x38, r1	; 56
     ac4:	09 b6       	in	r0, 0x39	; 57
     ac6:	0f 92       	push	r0
     ac8:	19 be       	out	0x39, r1	; 57
     aca:	0b b6       	in	r0, 0x3b	; 59
     acc:	0f 92       	push	r0
     ace:	1b be       	out	0x3b, r1	; 59
     ad0:	2f 93       	push	r18
     ad2:	3f 93       	push	r19
     ad4:	4f 93       	push	r20
     ad6:	5f 93       	push	r21
     ad8:	6f 93       	push	r22
     ada:	7f 93       	push	r23
     adc:	8f 93       	push	r24
     ade:	9f 93       	push	r25
     ae0:	af 93       	push	r26
     ae2:	bf 93       	push	r27
     ae4:	ef 93       	push	r30
     ae6:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     ae8:	e0 91 f8 21 	lds	r30, 0x21F8	; 0x8021f8 <tc_tcc0_ccc_callback>
     aec:	f0 91 f9 21 	lds	r31, 0x21F9	; 0x8021f9 <tc_tcc0_ccc_callback+0x1>
     af0:	30 97       	sbiw	r30, 0x00	; 0
     af2:	09 f0       	breq	.+2      	; 0xaf6 <__vector_18+0x42>
		tc_tcc0_ccc_callback();
     af4:	19 95       	eicall
	}
}
     af6:	ff 91       	pop	r31
     af8:	ef 91       	pop	r30
     afa:	bf 91       	pop	r27
     afc:	af 91       	pop	r26
     afe:	9f 91       	pop	r25
     b00:	8f 91       	pop	r24
     b02:	7f 91       	pop	r23
     b04:	6f 91       	pop	r22
     b06:	5f 91       	pop	r21
     b08:	4f 91       	pop	r20
     b0a:	3f 91       	pop	r19
     b0c:	2f 91       	pop	r18
     b0e:	0f 90       	pop	r0
     b10:	0b be       	out	0x3b, r0	; 59
     b12:	0f 90       	pop	r0
     b14:	09 be       	out	0x39, r0	; 57
     b16:	0f 90       	pop	r0
     b18:	08 be       	out	0x38, r0	; 56
     b1a:	0f 90       	pop	r0
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	0f 90       	pop	r0
     b20:	1f 90       	pop	r1
     b22:	18 95       	reti

00000b24 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     b24:	1f 92       	push	r1
     b26:	0f 92       	push	r0
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	0f 92       	push	r0
     b2c:	11 24       	eor	r1, r1
     b2e:	08 b6       	in	r0, 0x38	; 56
     b30:	0f 92       	push	r0
     b32:	18 be       	out	0x38, r1	; 56
     b34:	09 b6       	in	r0, 0x39	; 57
     b36:	0f 92       	push	r0
     b38:	19 be       	out	0x39, r1	; 57
     b3a:	0b b6       	in	r0, 0x3b	; 59
     b3c:	0f 92       	push	r0
     b3e:	1b be       	out	0x3b, r1	; 59
     b40:	2f 93       	push	r18
     b42:	3f 93       	push	r19
     b44:	4f 93       	push	r20
     b46:	5f 93       	push	r21
     b48:	6f 93       	push	r22
     b4a:	7f 93       	push	r23
     b4c:	8f 93       	push	r24
     b4e:	9f 93       	push	r25
     b50:	af 93       	push	r26
     b52:	bf 93       	push	r27
     b54:	ef 93       	push	r30
     b56:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     b58:	e0 91 f6 21 	lds	r30, 0x21F6	; 0x8021f6 <tc_tcc0_ccd_callback>
     b5c:	f0 91 f7 21 	lds	r31, 0x21F7	; 0x8021f7 <tc_tcc0_ccd_callback+0x1>
     b60:	30 97       	sbiw	r30, 0x00	; 0
     b62:	09 f0       	breq	.+2      	; 0xb66 <__vector_19+0x42>
		tc_tcc0_ccd_callback();
     b64:	19 95       	eicall
	}
}
     b66:	ff 91       	pop	r31
     b68:	ef 91       	pop	r30
     b6a:	bf 91       	pop	r27
     b6c:	af 91       	pop	r26
     b6e:	9f 91       	pop	r25
     b70:	8f 91       	pop	r24
     b72:	7f 91       	pop	r23
     b74:	6f 91       	pop	r22
     b76:	5f 91       	pop	r21
     b78:	4f 91       	pop	r20
     b7a:	3f 91       	pop	r19
     b7c:	2f 91       	pop	r18
     b7e:	0f 90       	pop	r0
     b80:	0b be       	out	0x3b, r0	; 59
     b82:	0f 90       	pop	r0
     b84:	09 be       	out	0x39, r0	; 57
     b86:	0f 90       	pop	r0
     b88:	08 be       	out	0x38, r0	; 56
     b8a:	0f 90       	pop	r0
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	0f 90       	pop	r0
     b90:	1f 90       	pop	r1
     b92:	18 95       	reti

00000b94 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     b94:	1f 92       	push	r1
     b96:	0f 92       	push	r0
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	0f 92       	push	r0
     b9c:	11 24       	eor	r1, r1
     b9e:	08 b6       	in	r0, 0x38	; 56
     ba0:	0f 92       	push	r0
     ba2:	18 be       	out	0x38, r1	; 56
     ba4:	09 b6       	in	r0, 0x39	; 57
     ba6:	0f 92       	push	r0
     ba8:	19 be       	out	0x39, r1	; 57
     baa:	0b b6       	in	r0, 0x3b	; 59
     bac:	0f 92       	push	r0
     bae:	1b be       	out	0x3b, r1	; 59
     bb0:	2f 93       	push	r18
     bb2:	3f 93       	push	r19
     bb4:	4f 93       	push	r20
     bb6:	5f 93       	push	r21
     bb8:	6f 93       	push	r22
     bba:	7f 93       	push	r23
     bbc:	8f 93       	push	r24
     bbe:	9f 93       	push	r25
     bc0:	af 93       	push	r26
     bc2:	bf 93       	push	r27
     bc4:	ef 93       	push	r30
     bc6:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     bc8:	e0 91 f4 21 	lds	r30, 0x21F4	; 0x8021f4 <tc_tcc1_ovf_callback>
     bcc:	f0 91 f5 21 	lds	r31, 0x21F5	; 0x8021f5 <tc_tcc1_ovf_callback+0x1>
     bd0:	30 97       	sbiw	r30, 0x00	; 0
     bd2:	09 f0       	breq	.+2      	; 0xbd6 <__vector_20+0x42>
		tc_tcc1_ovf_callback();
     bd4:	19 95       	eicall
	}
}
     bd6:	ff 91       	pop	r31
     bd8:	ef 91       	pop	r30
     bda:	bf 91       	pop	r27
     bdc:	af 91       	pop	r26
     bde:	9f 91       	pop	r25
     be0:	8f 91       	pop	r24
     be2:	7f 91       	pop	r23
     be4:	6f 91       	pop	r22
     be6:	5f 91       	pop	r21
     be8:	4f 91       	pop	r20
     bea:	3f 91       	pop	r19
     bec:	2f 91       	pop	r18
     bee:	0f 90       	pop	r0
     bf0:	0b be       	out	0x3b, r0	; 59
     bf2:	0f 90       	pop	r0
     bf4:	09 be       	out	0x39, r0	; 57
     bf6:	0f 90       	pop	r0
     bf8:	08 be       	out	0x38, r0	; 56
     bfa:	0f 90       	pop	r0
     bfc:	0f be       	out	0x3f, r0	; 63
     bfe:	0f 90       	pop	r0
     c00:	1f 90       	pop	r1
     c02:	18 95       	reti

00000c04 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     c04:	1f 92       	push	r1
     c06:	0f 92       	push	r0
     c08:	0f b6       	in	r0, 0x3f	; 63
     c0a:	0f 92       	push	r0
     c0c:	11 24       	eor	r1, r1
     c0e:	08 b6       	in	r0, 0x38	; 56
     c10:	0f 92       	push	r0
     c12:	18 be       	out	0x38, r1	; 56
     c14:	09 b6       	in	r0, 0x39	; 57
     c16:	0f 92       	push	r0
     c18:	19 be       	out	0x39, r1	; 57
     c1a:	0b b6       	in	r0, 0x3b	; 59
     c1c:	0f 92       	push	r0
     c1e:	1b be       	out	0x3b, r1	; 59
     c20:	2f 93       	push	r18
     c22:	3f 93       	push	r19
     c24:	4f 93       	push	r20
     c26:	5f 93       	push	r21
     c28:	6f 93       	push	r22
     c2a:	7f 93       	push	r23
     c2c:	8f 93       	push	r24
     c2e:	9f 93       	push	r25
     c30:	af 93       	push	r26
     c32:	bf 93       	push	r27
     c34:	ef 93       	push	r30
     c36:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     c38:	e0 91 f2 21 	lds	r30, 0x21F2	; 0x8021f2 <tc_tcc1_err_callback>
     c3c:	f0 91 f3 21 	lds	r31, 0x21F3	; 0x8021f3 <tc_tcc1_err_callback+0x1>
     c40:	30 97       	sbiw	r30, 0x00	; 0
     c42:	09 f0       	breq	.+2      	; 0xc46 <__vector_21+0x42>
		tc_tcc1_err_callback();
     c44:	19 95       	eicall
	}
}
     c46:	ff 91       	pop	r31
     c48:	ef 91       	pop	r30
     c4a:	bf 91       	pop	r27
     c4c:	af 91       	pop	r26
     c4e:	9f 91       	pop	r25
     c50:	8f 91       	pop	r24
     c52:	7f 91       	pop	r23
     c54:	6f 91       	pop	r22
     c56:	5f 91       	pop	r21
     c58:	4f 91       	pop	r20
     c5a:	3f 91       	pop	r19
     c5c:	2f 91       	pop	r18
     c5e:	0f 90       	pop	r0
     c60:	0b be       	out	0x3b, r0	; 59
     c62:	0f 90       	pop	r0
     c64:	09 be       	out	0x39, r0	; 57
     c66:	0f 90       	pop	r0
     c68:	08 be       	out	0x38, r0	; 56
     c6a:	0f 90       	pop	r0
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	0f 90       	pop	r0
     c70:	1f 90       	pop	r1
     c72:	18 95       	reti

00000c74 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     c74:	1f 92       	push	r1
     c76:	0f 92       	push	r0
     c78:	0f b6       	in	r0, 0x3f	; 63
     c7a:	0f 92       	push	r0
     c7c:	11 24       	eor	r1, r1
     c7e:	08 b6       	in	r0, 0x38	; 56
     c80:	0f 92       	push	r0
     c82:	18 be       	out	0x38, r1	; 56
     c84:	09 b6       	in	r0, 0x39	; 57
     c86:	0f 92       	push	r0
     c88:	19 be       	out	0x39, r1	; 57
     c8a:	0b b6       	in	r0, 0x3b	; 59
     c8c:	0f 92       	push	r0
     c8e:	1b be       	out	0x3b, r1	; 59
     c90:	2f 93       	push	r18
     c92:	3f 93       	push	r19
     c94:	4f 93       	push	r20
     c96:	5f 93       	push	r21
     c98:	6f 93       	push	r22
     c9a:	7f 93       	push	r23
     c9c:	8f 93       	push	r24
     c9e:	9f 93       	push	r25
     ca0:	af 93       	push	r26
     ca2:	bf 93       	push	r27
     ca4:	ef 93       	push	r30
     ca6:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     ca8:	e0 91 f0 21 	lds	r30, 0x21F0	; 0x8021f0 <tc_tcc1_cca_callback>
     cac:	f0 91 f1 21 	lds	r31, 0x21F1	; 0x8021f1 <tc_tcc1_cca_callback+0x1>
     cb0:	30 97       	sbiw	r30, 0x00	; 0
     cb2:	09 f0       	breq	.+2      	; 0xcb6 <__vector_22+0x42>
		tc_tcc1_cca_callback();
     cb4:	19 95       	eicall
	}
}
     cb6:	ff 91       	pop	r31
     cb8:	ef 91       	pop	r30
     cba:	bf 91       	pop	r27
     cbc:	af 91       	pop	r26
     cbe:	9f 91       	pop	r25
     cc0:	8f 91       	pop	r24
     cc2:	7f 91       	pop	r23
     cc4:	6f 91       	pop	r22
     cc6:	5f 91       	pop	r21
     cc8:	4f 91       	pop	r20
     cca:	3f 91       	pop	r19
     ccc:	2f 91       	pop	r18
     cce:	0f 90       	pop	r0
     cd0:	0b be       	out	0x3b, r0	; 59
     cd2:	0f 90       	pop	r0
     cd4:	09 be       	out	0x39, r0	; 57
     cd6:	0f 90       	pop	r0
     cd8:	08 be       	out	0x38, r0	; 56
     cda:	0f 90       	pop	r0
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	0f 90       	pop	r0
     ce0:	1f 90       	pop	r1
     ce2:	18 95       	reti

00000ce4 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     ce4:	1f 92       	push	r1
     ce6:	0f 92       	push	r0
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	0f 92       	push	r0
     cec:	11 24       	eor	r1, r1
     cee:	08 b6       	in	r0, 0x38	; 56
     cf0:	0f 92       	push	r0
     cf2:	18 be       	out	0x38, r1	; 56
     cf4:	09 b6       	in	r0, 0x39	; 57
     cf6:	0f 92       	push	r0
     cf8:	19 be       	out	0x39, r1	; 57
     cfa:	0b b6       	in	r0, 0x3b	; 59
     cfc:	0f 92       	push	r0
     cfe:	1b be       	out	0x3b, r1	; 59
     d00:	2f 93       	push	r18
     d02:	3f 93       	push	r19
     d04:	4f 93       	push	r20
     d06:	5f 93       	push	r21
     d08:	6f 93       	push	r22
     d0a:	7f 93       	push	r23
     d0c:	8f 93       	push	r24
     d0e:	9f 93       	push	r25
     d10:	af 93       	push	r26
     d12:	bf 93       	push	r27
     d14:	ef 93       	push	r30
     d16:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     d18:	e0 91 ee 21 	lds	r30, 0x21EE	; 0x8021ee <tc_tcc1_ccb_callback>
     d1c:	f0 91 ef 21 	lds	r31, 0x21EF	; 0x8021ef <tc_tcc1_ccb_callback+0x1>
     d20:	30 97       	sbiw	r30, 0x00	; 0
     d22:	09 f0       	breq	.+2      	; 0xd26 <__vector_23+0x42>
		tc_tcc1_ccb_callback();
     d24:	19 95       	eicall
	}
}
     d26:	ff 91       	pop	r31
     d28:	ef 91       	pop	r30
     d2a:	bf 91       	pop	r27
     d2c:	af 91       	pop	r26
     d2e:	9f 91       	pop	r25
     d30:	8f 91       	pop	r24
     d32:	7f 91       	pop	r23
     d34:	6f 91       	pop	r22
     d36:	5f 91       	pop	r21
     d38:	4f 91       	pop	r20
     d3a:	3f 91       	pop	r19
     d3c:	2f 91       	pop	r18
     d3e:	0f 90       	pop	r0
     d40:	0b be       	out	0x3b, r0	; 59
     d42:	0f 90       	pop	r0
     d44:	09 be       	out	0x39, r0	; 57
     d46:	0f 90       	pop	r0
     d48:	08 be       	out	0x38, r0	; 56
     d4a:	0f 90       	pop	r0
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	0f 90       	pop	r0
     d50:	1f 90       	pop	r1
     d52:	18 95       	reti

00000d54 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     d54:	1f 92       	push	r1
     d56:	0f 92       	push	r0
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	0f 92       	push	r0
     d5c:	11 24       	eor	r1, r1
     d5e:	08 b6       	in	r0, 0x38	; 56
     d60:	0f 92       	push	r0
     d62:	18 be       	out	0x38, r1	; 56
     d64:	09 b6       	in	r0, 0x39	; 57
     d66:	0f 92       	push	r0
     d68:	19 be       	out	0x39, r1	; 57
     d6a:	0b b6       	in	r0, 0x3b	; 59
     d6c:	0f 92       	push	r0
     d6e:	1b be       	out	0x3b, r1	; 59
     d70:	2f 93       	push	r18
     d72:	3f 93       	push	r19
     d74:	4f 93       	push	r20
     d76:	5f 93       	push	r21
     d78:	6f 93       	push	r22
     d7a:	7f 93       	push	r23
     d7c:	8f 93       	push	r24
     d7e:	9f 93       	push	r25
     d80:	af 93       	push	r26
     d82:	bf 93       	push	r27
     d84:	ef 93       	push	r30
     d86:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     d88:	e0 91 ec 21 	lds	r30, 0x21EC	; 0x8021ec <tc_tcd0_ovf_callback>
     d8c:	f0 91 ed 21 	lds	r31, 0x21ED	; 0x8021ed <tc_tcd0_ovf_callback+0x1>
     d90:	30 97       	sbiw	r30, 0x00	; 0
     d92:	09 f0       	breq	.+2      	; 0xd96 <__vector_77+0x42>
		tc_tcd0_ovf_callback();
     d94:	19 95       	eicall
	}
}
     d96:	ff 91       	pop	r31
     d98:	ef 91       	pop	r30
     d9a:	bf 91       	pop	r27
     d9c:	af 91       	pop	r26
     d9e:	9f 91       	pop	r25
     da0:	8f 91       	pop	r24
     da2:	7f 91       	pop	r23
     da4:	6f 91       	pop	r22
     da6:	5f 91       	pop	r21
     da8:	4f 91       	pop	r20
     daa:	3f 91       	pop	r19
     dac:	2f 91       	pop	r18
     dae:	0f 90       	pop	r0
     db0:	0b be       	out	0x3b, r0	; 59
     db2:	0f 90       	pop	r0
     db4:	09 be       	out	0x39, r0	; 57
     db6:	0f 90       	pop	r0
     db8:	08 be       	out	0x38, r0	; 56
     dba:	0f 90       	pop	r0
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	0f 90       	pop	r0
     dc0:	1f 90       	pop	r1
     dc2:	18 95       	reti

00000dc4 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     dc4:	1f 92       	push	r1
     dc6:	0f 92       	push	r0
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	0f 92       	push	r0
     dcc:	11 24       	eor	r1, r1
     dce:	08 b6       	in	r0, 0x38	; 56
     dd0:	0f 92       	push	r0
     dd2:	18 be       	out	0x38, r1	; 56
     dd4:	09 b6       	in	r0, 0x39	; 57
     dd6:	0f 92       	push	r0
     dd8:	19 be       	out	0x39, r1	; 57
     dda:	0b b6       	in	r0, 0x3b	; 59
     ddc:	0f 92       	push	r0
     dde:	1b be       	out	0x3b, r1	; 59
     de0:	2f 93       	push	r18
     de2:	3f 93       	push	r19
     de4:	4f 93       	push	r20
     de6:	5f 93       	push	r21
     de8:	6f 93       	push	r22
     dea:	7f 93       	push	r23
     dec:	8f 93       	push	r24
     dee:	9f 93       	push	r25
     df0:	af 93       	push	r26
     df2:	bf 93       	push	r27
     df4:	ef 93       	push	r30
     df6:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     df8:	e0 91 ea 21 	lds	r30, 0x21EA	; 0x8021ea <tc_tcd0_err_callback>
     dfc:	f0 91 eb 21 	lds	r31, 0x21EB	; 0x8021eb <tc_tcd0_err_callback+0x1>
     e00:	30 97       	sbiw	r30, 0x00	; 0
     e02:	09 f0       	breq	.+2      	; 0xe06 <__vector_78+0x42>
		tc_tcd0_err_callback();
     e04:	19 95       	eicall
	}
}
     e06:	ff 91       	pop	r31
     e08:	ef 91       	pop	r30
     e0a:	bf 91       	pop	r27
     e0c:	af 91       	pop	r26
     e0e:	9f 91       	pop	r25
     e10:	8f 91       	pop	r24
     e12:	7f 91       	pop	r23
     e14:	6f 91       	pop	r22
     e16:	5f 91       	pop	r21
     e18:	4f 91       	pop	r20
     e1a:	3f 91       	pop	r19
     e1c:	2f 91       	pop	r18
     e1e:	0f 90       	pop	r0
     e20:	0b be       	out	0x3b, r0	; 59
     e22:	0f 90       	pop	r0
     e24:	09 be       	out	0x39, r0	; 57
     e26:	0f 90       	pop	r0
     e28:	08 be       	out	0x38, r0	; 56
     e2a:	0f 90       	pop	r0
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	0f 90       	pop	r0
     e30:	1f 90       	pop	r1
     e32:	18 95       	reti

00000e34 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     e34:	1f 92       	push	r1
     e36:	0f 92       	push	r0
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	0f 92       	push	r0
     e3c:	11 24       	eor	r1, r1
     e3e:	08 b6       	in	r0, 0x38	; 56
     e40:	0f 92       	push	r0
     e42:	18 be       	out	0x38, r1	; 56
     e44:	09 b6       	in	r0, 0x39	; 57
     e46:	0f 92       	push	r0
     e48:	19 be       	out	0x39, r1	; 57
     e4a:	0b b6       	in	r0, 0x3b	; 59
     e4c:	0f 92       	push	r0
     e4e:	1b be       	out	0x3b, r1	; 59
     e50:	2f 93       	push	r18
     e52:	3f 93       	push	r19
     e54:	4f 93       	push	r20
     e56:	5f 93       	push	r21
     e58:	6f 93       	push	r22
     e5a:	7f 93       	push	r23
     e5c:	8f 93       	push	r24
     e5e:	9f 93       	push	r25
     e60:	af 93       	push	r26
     e62:	bf 93       	push	r27
     e64:	ef 93       	push	r30
     e66:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     e68:	e0 91 e8 21 	lds	r30, 0x21E8	; 0x8021e8 <tc_tcd0_cca_callback>
     e6c:	f0 91 e9 21 	lds	r31, 0x21E9	; 0x8021e9 <tc_tcd0_cca_callback+0x1>
     e70:	30 97       	sbiw	r30, 0x00	; 0
     e72:	09 f0       	breq	.+2      	; 0xe76 <__vector_79+0x42>
		tc_tcd0_cca_callback();
     e74:	19 95       	eicall
	}
}
     e76:	ff 91       	pop	r31
     e78:	ef 91       	pop	r30
     e7a:	bf 91       	pop	r27
     e7c:	af 91       	pop	r26
     e7e:	9f 91       	pop	r25
     e80:	8f 91       	pop	r24
     e82:	7f 91       	pop	r23
     e84:	6f 91       	pop	r22
     e86:	5f 91       	pop	r21
     e88:	4f 91       	pop	r20
     e8a:	3f 91       	pop	r19
     e8c:	2f 91       	pop	r18
     e8e:	0f 90       	pop	r0
     e90:	0b be       	out	0x3b, r0	; 59
     e92:	0f 90       	pop	r0
     e94:	09 be       	out	0x39, r0	; 57
     e96:	0f 90       	pop	r0
     e98:	08 be       	out	0x38, r0	; 56
     e9a:	0f 90       	pop	r0
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	0f 90       	pop	r0
     ea0:	1f 90       	pop	r1
     ea2:	18 95       	reti

00000ea4 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     ea4:	1f 92       	push	r1
     ea6:	0f 92       	push	r0
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	0f 92       	push	r0
     eac:	11 24       	eor	r1, r1
     eae:	08 b6       	in	r0, 0x38	; 56
     eb0:	0f 92       	push	r0
     eb2:	18 be       	out	0x38, r1	; 56
     eb4:	09 b6       	in	r0, 0x39	; 57
     eb6:	0f 92       	push	r0
     eb8:	19 be       	out	0x39, r1	; 57
     eba:	0b b6       	in	r0, 0x3b	; 59
     ebc:	0f 92       	push	r0
     ebe:	1b be       	out	0x3b, r1	; 59
     ec0:	2f 93       	push	r18
     ec2:	3f 93       	push	r19
     ec4:	4f 93       	push	r20
     ec6:	5f 93       	push	r21
     ec8:	6f 93       	push	r22
     eca:	7f 93       	push	r23
     ecc:	8f 93       	push	r24
     ece:	9f 93       	push	r25
     ed0:	af 93       	push	r26
     ed2:	bf 93       	push	r27
     ed4:	ef 93       	push	r30
     ed6:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     ed8:	e0 91 e6 21 	lds	r30, 0x21E6	; 0x8021e6 <tc_tcd0_ccb_callback>
     edc:	f0 91 e7 21 	lds	r31, 0x21E7	; 0x8021e7 <tc_tcd0_ccb_callback+0x1>
     ee0:	30 97       	sbiw	r30, 0x00	; 0
     ee2:	09 f0       	breq	.+2      	; 0xee6 <__vector_80+0x42>
		tc_tcd0_ccb_callback();
     ee4:	19 95       	eicall
	}
}
     ee6:	ff 91       	pop	r31
     ee8:	ef 91       	pop	r30
     eea:	bf 91       	pop	r27
     eec:	af 91       	pop	r26
     eee:	9f 91       	pop	r25
     ef0:	8f 91       	pop	r24
     ef2:	7f 91       	pop	r23
     ef4:	6f 91       	pop	r22
     ef6:	5f 91       	pop	r21
     ef8:	4f 91       	pop	r20
     efa:	3f 91       	pop	r19
     efc:	2f 91       	pop	r18
     efe:	0f 90       	pop	r0
     f00:	0b be       	out	0x3b, r0	; 59
     f02:	0f 90       	pop	r0
     f04:	09 be       	out	0x39, r0	; 57
     f06:	0f 90       	pop	r0
     f08:	08 be       	out	0x38, r0	; 56
     f0a:	0f 90       	pop	r0
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	0f 90       	pop	r0
     f10:	1f 90       	pop	r1
     f12:	18 95       	reti

00000f14 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     f14:	1f 92       	push	r1
     f16:	0f 92       	push	r0
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	0f 92       	push	r0
     f1c:	11 24       	eor	r1, r1
     f1e:	08 b6       	in	r0, 0x38	; 56
     f20:	0f 92       	push	r0
     f22:	18 be       	out	0x38, r1	; 56
     f24:	09 b6       	in	r0, 0x39	; 57
     f26:	0f 92       	push	r0
     f28:	19 be       	out	0x39, r1	; 57
     f2a:	0b b6       	in	r0, 0x3b	; 59
     f2c:	0f 92       	push	r0
     f2e:	1b be       	out	0x3b, r1	; 59
     f30:	2f 93       	push	r18
     f32:	3f 93       	push	r19
     f34:	4f 93       	push	r20
     f36:	5f 93       	push	r21
     f38:	6f 93       	push	r22
     f3a:	7f 93       	push	r23
     f3c:	8f 93       	push	r24
     f3e:	9f 93       	push	r25
     f40:	af 93       	push	r26
     f42:	bf 93       	push	r27
     f44:	ef 93       	push	r30
     f46:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     f48:	e0 91 e4 21 	lds	r30, 0x21E4	; 0x8021e4 <tc_tcd0_ccc_callback>
     f4c:	f0 91 e5 21 	lds	r31, 0x21E5	; 0x8021e5 <tc_tcd0_ccc_callback+0x1>
     f50:	30 97       	sbiw	r30, 0x00	; 0
     f52:	09 f0       	breq	.+2      	; 0xf56 <__vector_81+0x42>
		tc_tcd0_ccc_callback();
     f54:	19 95       	eicall
	}
}
     f56:	ff 91       	pop	r31
     f58:	ef 91       	pop	r30
     f5a:	bf 91       	pop	r27
     f5c:	af 91       	pop	r26
     f5e:	9f 91       	pop	r25
     f60:	8f 91       	pop	r24
     f62:	7f 91       	pop	r23
     f64:	6f 91       	pop	r22
     f66:	5f 91       	pop	r21
     f68:	4f 91       	pop	r20
     f6a:	3f 91       	pop	r19
     f6c:	2f 91       	pop	r18
     f6e:	0f 90       	pop	r0
     f70:	0b be       	out	0x3b, r0	; 59
     f72:	0f 90       	pop	r0
     f74:	09 be       	out	0x39, r0	; 57
     f76:	0f 90       	pop	r0
     f78:	08 be       	out	0x38, r0	; 56
     f7a:	0f 90       	pop	r0
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	0f 90       	pop	r0
     f80:	1f 90       	pop	r1
     f82:	18 95       	reti

00000f84 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     f84:	1f 92       	push	r1
     f86:	0f 92       	push	r0
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	0f 92       	push	r0
     f8c:	11 24       	eor	r1, r1
     f8e:	08 b6       	in	r0, 0x38	; 56
     f90:	0f 92       	push	r0
     f92:	18 be       	out	0x38, r1	; 56
     f94:	09 b6       	in	r0, 0x39	; 57
     f96:	0f 92       	push	r0
     f98:	19 be       	out	0x39, r1	; 57
     f9a:	0b b6       	in	r0, 0x3b	; 59
     f9c:	0f 92       	push	r0
     f9e:	1b be       	out	0x3b, r1	; 59
     fa0:	2f 93       	push	r18
     fa2:	3f 93       	push	r19
     fa4:	4f 93       	push	r20
     fa6:	5f 93       	push	r21
     fa8:	6f 93       	push	r22
     faa:	7f 93       	push	r23
     fac:	8f 93       	push	r24
     fae:	9f 93       	push	r25
     fb0:	af 93       	push	r26
     fb2:	bf 93       	push	r27
     fb4:	ef 93       	push	r30
     fb6:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     fb8:	e0 91 e2 21 	lds	r30, 0x21E2	; 0x8021e2 <tc_tcd0_ccd_callback>
     fbc:	f0 91 e3 21 	lds	r31, 0x21E3	; 0x8021e3 <tc_tcd0_ccd_callback+0x1>
     fc0:	30 97       	sbiw	r30, 0x00	; 0
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <__vector_82+0x42>
		tc_tcd0_ccd_callback();
     fc4:	19 95       	eicall
	}
}
     fc6:	ff 91       	pop	r31
     fc8:	ef 91       	pop	r30
     fca:	bf 91       	pop	r27
     fcc:	af 91       	pop	r26
     fce:	9f 91       	pop	r25
     fd0:	8f 91       	pop	r24
     fd2:	7f 91       	pop	r23
     fd4:	6f 91       	pop	r22
     fd6:	5f 91       	pop	r21
     fd8:	4f 91       	pop	r20
     fda:	3f 91       	pop	r19
     fdc:	2f 91       	pop	r18
     fde:	0f 90       	pop	r0
     fe0:	0b be       	out	0x3b, r0	; 59
     fe2:	0f 90       	pop	r0
     fe4:	09 be       	out	0x39, r0	; 57
     fe6:	0f 90       	pop	r0
     fe8:	08 be       	out	0x38, r0	; 56
     fea:	0f 90       	pop	r0
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	0f 90       	pop	r0
     ff0:	1f 90       	pop	r1
     ff2:	18 95       	reti

00000ff4 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     ff4:	1f 92       	push	r1
     ff6:	0f 92       	push	r0
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	0f 92       	push	r0
     ffc:	11 24       	eor	r1, r1
     ffe:	08 b6       	in	r0, 0x38	; 56
    1000:	0f 92       	push	r0
    1002:	18 be       	out	0x38, r1	; 56
    1004:	09 b6       	in	r0, 0x39	; 57
    1006:	0f 92       	push	r0
    1008:	19 be       	out	0x39, r1	; 57
    100a:	0b b6       	in	r0, 0x3b	; 59
    100c:	0f 92       	push	r0
    100e:	1b be       	out	0x3b, r1	; 59
    1010:	2f 93       	push	r18
    1012:	3f 93       	push	r19
    1014:	4f 93       	push	r20
    1016:	5f 93       	push	r21
    1018:	6f 93       	push	r22
    101a:	7f 93       	push	r23
    101c:	8f 93       	push	r24
    101e:	9f 93       	push	r25
    1020:	af 93       	push	r26
    1022:	bf 93       	push	r27
    1024:	ef 93       	push	r30
    1026:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    1028:	e0 91 e0 21 	lds	r30, 0x21E0	; 0x8021e0 <tc_tcd1_ovf_callback>
    102c:	f0 91 e1 21 	lds	r31, 0x21E1	; 0x8021e1 <tc_tcd1_ovf_callback+0x1>
    1030:	30 97       	sbiw	r30, 0x00	; 0
    1032:	09 f0       	breq	.+2      	; 0x1036 <__vector_83+0x42>
		tc_tcd1_ovf_callback();
    1034:	19 95       	eicall
	}
}
    1036:	ff 91       	pop	r31
    1038:	ef 91       	pop	r30
    103a:	bf 91       	pop	r27
    103c:	af 91       	pop	r26
    103e:	9f 91       	pop	r25
    1040:	8f 91       	pop	r24
    1042:	7f 91       	pop	r23
    1044:	6f 91       	pop	r22
    1046:	5f 91       	pop	r21
    1048:	4f 91       	pop	r20
    104a:	3f 91       	pop	r19
    104c:	2f 91       	pop	r18
    104e:	0f 90       	pop	r0
    1050:	0b be       	out	0x3b, r0	; 59
    1052:	0f 90       	pop	r0
    1054:	09 be       	out	0x39, r0	; 57
    1056:	0f 90       	pop	r0
    1058:	08 be       	out	0x38, r0	; 56
    105a:	0f 90       	pop	r0
    105c:	0f be       	out	0x3f, r0	; 63
    105e:	0f 90       	pop	r0
    1060:	1f 90       	pop	r1
    1062:	18 95       	reti

00001064 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    1064:	1f 92       	push	r1
    1066:	0f 92       	push	r0
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	0f 92       	push	r0
    106c:	11 24       	eor	r1, r1
    106e:	08 b6       	in	r0, 0x38	; 56
    1070:	0f 92       	push	r0
    1072:	18 be       	out	0x38, r1	; 56
    1074:	09 b6       	in	r0, 0x39	; 57
    1076:	0f 92       	push	r0
    1078:	19 be       	out	0x39, r1	; 57
    107a:	0b b6       	in	r0, 0x3b	; 59
    107c:	0f 92       	push	r0
    107e:	1b be       	out	0x3b, r1	; 59
    1080:	2f 93       	push	r18
    1082:	3f 93       	push	r19
    1084:	4f 93       	push	r20
    1086:	5f 93       	push	r21
    1088:	6f 93       	push	r22
    108a:	7f 93       	push	r23
    108c:	8f 93       	push	r24
    108e:	9f 93       	push	r25
    1090:	af 93       	push	r26
    1092:	bf 93       	push	r27
    1094:	ef 93       	push	r30
    1096:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    1098:	e0 91 de 21 	lds	r30, 0x21DE	; 0x8021de <tc_tcd1_err_callback>
    109c:	f0 91 df 21 	lds	r31, 0x21DF	; 0x8021df <tc_tcd1_err_callback+0x1>
    10a0:	30 97       	sbiw	r30, 0x00	; 0
    10a2:	09 f0       	breq	.+2      	; 0x10a6 <__vector_84+0x42>
		tc_tcd1_err_callback();
    10a4:	19 95       	eicall
	}
}
    10a6:	ff 91       	pop	r31
    10a8:	ef 91       	pop	r30
    10aa:	bf 91       	pop	r27
    10ac:	af 91       	pop	r26
    10ae:	9f 91       	pop	r25
    10b0:	8f 91       	pop	r24
    10b2:	7f 91       	pop	r23
    10b4:	6f 91       	pop	r22
    10b6:	5f 91       	pop	r21
    10b8:	4f 91       	pop	r20
    10ba:	3f 91       	pop	r19
    10bc:	2f 91       	pop	r18
    10be:	0f 90       	pop	r0
    10c0:	0b be       	out	0x3b, r0	; 59
    10c2:	0f 90       	pop	r0
    10c4:	09 be       	out	0x39, r0	; 57
    10c6:	0f 90       	pop	r0
    10c8:	08 be       	out	0x38, r0	; 56
    10ca:	0f 90       	pop	r0
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	0f 90       	pop	r0
    10d0:	1f 90       	pop	r1
    10d2:	18 95       	reti

000010d4 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    10d4:	1f 92       	push	r1
    10d6:	0f 92       	push	r0
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	0f 92       	push	r0
    10dc:	11 24       	eor	r1, r1
    10de:	08 b6       	in	r0, 0x38	; 56
    10e0:	0f 92       	push	r0
    10e2:	18 be       	out	0x38, r1	; 56
    10e4:	09 b6       	in	r0, 0x39	; 57
    10e6:	0f 92       	push	r0
    10e8:	19 be       	out	0x39, r1	; 57
    10ea:	0b b6       	in	r0, 0x3b	; 59
    10ec:	0f 92       	push	r0
    10ee:	1b be       	out	0x3b, r1	; 59
    10f0:	2f 93       	push	r18
    10f2:	3f 93       	push	r19
    10f4:	4f 93       	push	r20
    10f6:	5f 93       	push	r21
    10f8:	6f 93       	push	r22
    10fa:	7f 93       	push	r23
    10fc:	8f 93       	push	r24
    10fe:	9f 93       	push	r25
    1100:	af 93       	push	r26
    1102:	bf 93       	push	r27
    1104:	ef 93       	push	r30
    1106:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    1108:	e0 91 dc 21 	lds	r30, 0x21DC	; 0x8021dc <tc_tcd1_cca_callback>
    110c:	f0 91 dd 21 	lds	r31, 0x21DD	; 0x8021dd <tc_tcd1_cca_callback+0x1>
    1110:	30 97       	sbiw	r30, 0x00	; 0
    1112:	09 f0       	breq	.+2      	; 0x1116 <__vector_85+0x42>
		tc_tcd1_cca_callback();
    1114:	19 95       	eicall
	}
}
    1116:	ff 91       	pop	r31
    1118:	ef 91       	pop	r30
    111a:	bf 91       	pop	r27
    111c:	af 91       	pop	r26
    111e:	9f 91       	pop	r25
    1120:	8f 91       	pop	r24
    1122:	7f 91       	pop	r23
    1124:	6f 91       	pop	r22
    1126:	5f 91       	pop	r21
    1128:	4f 91       	pop	r20
    112a:	3f 91       	pop	r19
    112c:	2f 91       	pop	r18
    112e:	0f 90       	pop	r0
    1130:	0b be       	out	0x3b, r0	; 59
    1132:	0f 90       	pop	r0
    1134:	09 be       	out	0x39, r0	; 57
    1136:	0f 90       	pop	r0
    1138:	08 be       	out	0x38, r0	; 56
    113a:	0f 90       	pop	r0
    113c:	0f be       	out	0x3f, r0	; 63
    113e:	0f 90       	pop	r0
    1140:	1f 90       	pop	r1
    1142:	18 95       	reti

00001144 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    1144:	1f 92       	push	r1
    1146:	0f 92       	push	r0
    1148:	0f b6       	in	r0, 0x3f	; 63
    114a:	0f 92       	push	r0
    114c:	11 24       	eor	r1, r1
    114e:	08 b6       	in	r0, 0x38	; 56
    1150:	0f 92       	push	r0
    1152:	18 be       	out	0x38, r1	; 56
    1154:	09 b6       	in	r0, 0x39	; 57
    1156:	0f 92       	push	r0
    1158:	19 be       	out	0x39, r1	; 57
    115a:	0b b6       	in	r0, 0x3b	; 59
    115c:	0f 92       	push	r0
    115e:	1b be       	out	0x3b, r1	; 59
    1160:	2f 93       	push	r18
    1162:	3f 93       	push	r19
    1164:	4f 93       	push	r20
    1166:	5f 93       	push	r21
    1168:	6f 93       	push	r22
    116a:	7f 93       	push	r23
    116c:	8f 93       	push	r24
    116e:	9f 93       	push	r25
    1170:	af 93       	push	r26
    1172:	bf 93       	push	r27
    1174:	ef 93       	push	r30
    1176:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    1178:	e0 91 da 21 	lds	r30, 0x21DA	; 0x8021da <tc_tcd1_ccb_callback>
    117c:	f0 91 db 21 	lds	r31, 0x21DB	; 0x8021db <tc_tcd1_ccb_callback+0x1>
    1180:	30 97       	sbiw	r30, 0x00	; 0
    1182:	09 f0       	breq	.+2      	; 0x1186 <__vector_86+0x42>
		tc_tcd1_ccb_callback();
    1184:	19 95       	eicall
	}
}
    1186:	ff 91       	pop	r31
    1188:	ef 91       	pop	r30
    118a:	bf 91       	pop	r27
    118c:	af 91       	pop	r26
    118e:	9f 91       	pop	r25
    1190:	8f 91       	pop	r24
    1192:	7f 91       	pop	r23
    1194:	6f 91       	pop	r22
    1196:	5f 91       	pop	r21
    1198:	4f 91       	pop	r20
    119a:	3f 91       	pop	r19
    119c:	2f 91       	pop	r18
    119e:	0f 90       	pop	r0
    11a0:	0b be       	out	0x3b, r0	; 59
    11a2:	0f 90       	pop	r0
    11a4:	09 be       	out	0x39, r0	; 57
    11a6:	0f 90       	pop	r0
    11a8:	08 be       	out	0x38, r0	; 56
    11aa:	0f 90       	pop	r0
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	0f 90       	pop	r0
    11b0:	1f 90       	pop	r1
    11b2:	18 95       	reti

000011b4 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    11b4:	1f 92       	push	r1
    11b6:	0f 92       	push	r0
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	0f 92       	push	r0
    11bc:	11 24       	eor	r1, r1
    11be:	08 b6       	in	r0, 0x38	; 56
    11c0:	0f 92       	push	r0
    11c2:	18 be       	out	0x38, r1	; 56
    11c4:	09 b6       	in	r0, 0x39	; 57
    11c6:	0f 92       	push	r0
    11c8:	19 be       	out	0x39, r1	; 57
    11ca:	0b b6       	in	r0, 0x3b	; 59
    11cc:	0f 92       	push	r0
    11ce:	1b be       	out	0x3b, r1	; 59
    11d0:	2f 93       	push	r18
    11d2:	3f 93       	push	r19
    11d4:	4f 93       	push	r20
    11d6:	5f 93       	push	r21
    11d8:	6f 93       	push	r22
    11da:	7f 93       	push	r23
    11dc:	8f 93       	push	r24
    11de:	9f 93       	push	r25
    11e0:	af 93       	push	r26
    11e2:	bf 93       	push	r27
    11e4:	ef 93       	push	r30
    11e6:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    11e8:	e0 91 d8 21 	lds	r30, 0x21D8	; 0x8021d8 <tc_tce0_ovf_callback>
    11ec:	f0 91 d9 21 	lds	r31, 0x21D9	; 0x8021d9 <tc_tce0_ovf_callback+0x1>
    11f0:	30 97       	sbiw	r30, 0x00	; 0
    11f2:	09 f0       	breq	.+2      	; 0x11f6 <__vector_47+0x42>
		tc_tce0_ovf_callback();
    11f4:	19 95       	eicall
	}
}
    11f6:	ff 91       	pop	r31
    11f8:	ef 91       	pop	r30
    11fa:	bf 91       	pop	r27
    11fc:	af 91       	pop	r26
    11fe:	9f 91       	pop	r25
    1200:	8f 91       	pop	r24
    1202:	7f 91       	pop	r23
    1204:	6f 91       	pop	r22
    1206:	5f 91       	pop	r21
    1208:	4f 91       	pop	r20
    120a:	3f 91       	pop	r19
    120c:	2f 91       	pop	r18
    120e:	0f 90       	pop	r0
    1210:	0b be       	out	0x3b, r0	; 59
    1212:	0f 90       	pop	r0
    1214:	09 be       	out	0x39, r0	; 57
    1216:	0f 90       	pop	r0
    1218:	08 be       	out	0x38, r0	; 56
    121a:	0f 90       	pop	r0
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	0f 90       	pop	r0
    1220:	1f 90       	pop	r1
    1222:	18 95       	reti

00001224 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    1224:	1f 92       	push	r1
    1226:	0f 92       	push	r0
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	0f 92       	push	r0
    122c:	11 24       	eor	r1, r1
    122e:	08 b6       	in	r0, 0x38	; 56
    1230:	0f 92       	push	r0
    1232:	18 be       	out	0x38, r1	; 56
    1234:	09 b6       	in	r0, 0x39	; 57
    1236:	0f 92       	push	r0
    1238:	19 be       	out	0x39, r1	; 57
    123a:	0b b6       	in	r0, 0x3b	; 59
    123c:	0f 92       	push	r0
    123e:	1b be       	out	0x3b, r1	; 59
    1240:	2f 93       	push	r18
    1242:	3f 93       	push	r19
    1244:	4f 93       	push	r20
    1246:	5f 93       	push	r21
    1248:	6f 93       	push	r22
    124a:	7f 93       	push	r23
    124c:	8f 93       	push	r24
    124e:	9f 93       	push	r25
    1250:	af 93       	push	r26
    1252:	bf 93       	push	r27
    1254:	ef 93       	push	r30
    1256:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    1258:	e0 91 d6 21 	lds	r30, 0x21D6	; 0x8021d6 <tc_tce0_err_callback>
    125c:	f0 91 d7 21 	lds	r31, 0x21D7	; 0x8021d7 <tc_tce0_err_callback+0x1>
    1260:	30 97       	sbiw	r30, 0x00	; 0
    1262:	09 f0       	breq	.+2      	; 0x1266 <__vector_48+0x42>
		tc_tce0_err_callback();
    1264:	19 95       	eicall
	}
}
    1266:	ff 91       	pop	r31
    1268:	ef 91       	pop	r30
    126a:	bf 91       	pop	r27
    126c:	af 91       	pop	r26
    126e:	9f 91       	pop	r25
    1270:	8f 91       	pop	r24
    1272:	7f 91       	pop	r23
    1274:	6f 91       	pop	r22
    1276:	5f 91       	pop	r21
    1278:	4f 91       	pop	r20
    127a:	3f 91       	pop	r19
    127c:	2f 91       	pop	r18
    127e:	0f 90       	pop	r0
    1280:	0b be       	out	0x3b, r0	; 59
    1282:	0f 90       	pop	r0
    1284:	09 be       	out	0x39, r0	; 57
    1286:	0f 90       	pop	r0
    1288:	08 be       	out	0x38, r0	; 56
    128a:	0f 90       	pop	r0
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	0f 90       	pop	r0
    1290:	1f 90       	pop	r1
    1292:	18 95       	reti

00001294 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    1294:	1f 92       	push	r1
    1296:	0f 92       	push	r0
    1298:	0f b6       	in	r0, 0x3f	; 63
    129a:	0f 92       	push	r0
    129c:	11 24       	eor	r1, r1
    129e:	08 b6       	in	r0, 0x38	; 56
    12a0:	0f 92       	push	r0
    12a2:	18 be       	out	0x38, r1	; 56
    12a4:	09 b6       	in	r0, 0x39	; 57
    12a6:	0f 92       	push	r0
    12a8:	19 be       	out	0x39, r1	; 57
    12aa:	0b b6       	in	r0, 0x3b	; 59
    12ac:	0f 92       	push	r0
    12ae:	1b be       	out	0x3b, r1	; 59
    12b0:	2f 93       	push	r18
    12b2:	3f 93       	push	r19
    12b4:	4f 93       	push	r20
    12b6:	5f 93       	push	r21
    12b8:	6f 93       	push	r22
    12ba:	7f 93       	push	r23
    12bc:	8f 93       	push	r24
    12be:	9f 93       	push	r25
    12c0:	af 93       	push	r26
    12c2:	bf 93       	push	r27
    12c4:	ef 93       	push	r30
    12c6:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    12c8:	e0 91 d4 21 	lds	r30, 0x21D4	; 0x8021d4 <tc_tce0_cca_callback>
    12cc:	f0 91 d5 21 	lds	r31, 0x21D5	; 0x8021d5 <tc_tce0_cca_callback+0x1>
    12d0:	30 97       	sbiw	r30, 0x00	; 0
    12d2:	09 f0       	breq	.+2      	; 0x12d6 <__vector_49+0x42>
		tc_tce0_cca_callback();
    12d4:	19 95       	eicall
	}
}
    12d6:	ff 91       	pop	r31
    12d8:	ef 91       	pop	r30
    12da:	bf 91       	pop	r27
    12dc:	af 91       	pop	r26
    12de:	9f 91       	pop	r25
    12e0:	8f 91       	pop	r24
    12e2:	7f 91       	pop	r23
    12e4:	6f 91       	pop	r22
    12e6:	5f 91       	pop	r21
    12e8:	4f 91       	pop	r20
    12ea:	3f 91       	pop	r19
    12ec:	2f 91       	pop	r18
    12ee:	0f 90       	pop	r0
    12f0:	0b be       	out	0x3b, r0	; 59
    12f2:	0f 90       	pop	r0
    12f4:	09 be       	out	0x39, r0	; 57
    12f6:	0f 90       	pop	r0
    12f8:	08 be       	out	0x38, r0	; 56
    12fa:	0f 90       	pop	r0
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	0f 90       	pop	r0
    1300:	1f 90       	pop	r1
    1302:	18 95       	reti

00001304 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    1304:	1f 92       	push	r1
    1306:	0f 92       	push	r0
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	0f 92       	push	r0
    130c:	11 24       	eor	r1, r1
    130e:	08 b6       	in	r0, 0x38	; 56
    1310:	0f 92       	push	r0
    1312:	18 be       	out	0x38, r1	; 56
    1314:	09 b6       	in	r0, 0x39	; 57
    1316:	0f 92       	push	r0
    1318:	19 be       	out	0x39, r1	; 57
    131a:	0b b6       	in	r0, 0x3b	; 59
    131c:	0f 92       	push	r0
    131e:	1b be       	out	0x3b, r1	; 59
    1320:	2f 93       	push	r18
    1322:	3f 93       	push	r19
    1324:	4f 93       	push	r20
    1326:	5f 93       	push	r21
    1328:	6f 93       	push	r22
    132a:	7f 93       	push	r23
    132c:	8f 93       	push	r24
    132e:	9f 93       	push	r25
    1330:	af 93       	push	r26
    1332:	bf 93       	push	r27
    1334:	ef 93       	push	r30
    1336:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    1338:	e0 91 d2 21 	lds	r30, 0x21D2	; 0x8021d2 <tc_tce0_ccb_callback>
    133c:	f0 91 d3 21 	lds	r31, 0x21D3	; 0x8021d3 <tc_tce0_ccb_callback+0x1>
    1340:	30 97       	sbiw	r30, 0x00	; 0
    1342:	09 f0       	breq	.+2      	; 0x1346 <__vector_50+0x42>
		tc_tce0_ccb_callback();
    1344:	19 95       	eicall
	}
}
    1346:	ff 91       	pop	r31
    1348:	ef 91       	pop	r30
    134a:	bf 91       	pop	r27
    134c:	af 91       	pop	r26
    134e:	9f 91       	pop	r25
    1350:	8f 91       	pop	r24
    1352:	7f 91       	pop	r23
    1354:	6f 91       	pop	r22
    1356:	5f 91       	pop	r21
    1358:	4f 91       	pop	r20
    135a:	3f 91       	pop	r19
    135c:	2f 91       	pop	r18
    135e:	0f 90       	pop	r0
    1360:	0b be       	out	0x3b, r0	; 59
    1362:	0f 90       	pop	r0
    1364:	09 be       	out	0x39, r0	; 57
    1366:	0f 90       	pop	r0
    1368:	08 be       	out	0x38, r0	; 56
    136a:	0f 90       	pop	r0
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	0f 90       	pop	r0
    1370:	1f 90       	pop	r1
    1372:	18 95       	reti

00001374 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    1374:	1f 92       	push	r1
    1376:	0f 92       	push	r0
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	0f 92       	push	r0
    137c:	11 24       	eor	r1, r1
    137e:	08 b6       	in	r0, 0x38	; 56
    1380:	0f 92       	push	r0
    1382:	18 be       	out	0x38, r1	; 56
    1384:	09 b6       	in	r0, 0x39	; 57
    1386:	0f 92       	push	r0
    1388:	19 be       	out	0x39, r1	; 57
    138a:	0b b6       	in	r0, 0x3b	; 59
    138c:	0f 92       	push	r0
    138e:	1b be       	out	0x3b, r1	; 59
    1390:	2f 93       	push	r18
    1392:	3f 93       	push	r19
    1394:	4f 93       	push	r20
    1396:	5f 93       	push	r21
    1398:	6f 93       	push	r22
    139a:	7f 93       	push	r23
    139c:	8f 93       	push	r24
    139e:	9f 93       	push	r25
    13a0:	af 93       	push	r26
    13a2:	bf 93       	push	r27
    13a4:	ef 93       	push	r30
    13a6:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    13a8:	e0 91 d0 21 	lds	r30, 0x21D0	; 0x8021d0 <tc_tce0_ccc_callback>
    13ac:	f0 91 d1 21 	lds	r31, 0x21D1	; 0x8021d1 <tc_tce0_ccc_callback+0x1>
    13b0:	30 97       	sbiw	r30, 0x00	; 0
    13b2:	09 f0       	breq	.+2      	; 0x13b6 <__vector_51+0x42>
		tc_tce0_ccc_callback();
    13b4:	19 95       	eicall
	}
}
    13b6:	ff 91       	pop	r31
    13b8:	ef 91       	pop	r30
    13ba:	bf 91       	pop	r27
    13bc:	af 91       	pop	r26
    13be:	9f 91       	pop	r25
    13c0:	8f 91       	pop	r24
    13c2:	7f 91       	pop	r23
    13c4:	6f 91       	pop	r22
    13c6:	5f 91       	pop	r21
    13c8:	4f 91       	pop	r20
    13ca:	3f 91       	pop	r19
    13cc:	2f 91       	pop	r18
    13ce:	0f 90       	pop	r0
    13d0:	0b be       	out	0x3b, r0	; 59
    13d2:	0f 90       	pop	r0
    13d4:	09 be       	out	0x39, r0	; 57
    13d6:	0f 90       	pop	r0
    13d8:	08 be       	out	0x38, r0	; 56
    13da:	0f 90       	pop	r0
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	0f 90       	pop	r0
    13e0:	1f 90       	pop	r1
    13e2:	18 95       	reti

000013e4 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    13e4:	1f 92       	push	r1
    13e6:	0f 92       	push	r0
    13e8:	0f b6       	in	r0, 0x3f	; 63
    13ea:	0f 92       	push	r0
    13ec:	11 24       	eor	r1, r1
    13ee:	08 b6       	in	r0, 0x38	; 56
    13f0:	0f 92       	push	r0
    13f2:	18 be       	out	0x38, r1	; 56
    13f4:	09 b6       	in	r0, 0x39	; 57
    13f6:	0f 92       	push	r0
    13f8:	19 be       	out	0x39, r1	; 57
    13fa:	0b b6       	in	r0, 0x3b	; 59
    13fc:	0f 92       	push	r0
    13fe:	1b be       	out	0x3b, r1	; 59
    1400:	2f 93       	push	r18
    1402:	3f 93       	push	r19
    1404:	4f 93       	push	r20
    1406:	5f 93       	push	r21
    1408:	6f 93       	push	r22
    140a:	7f 93       	push	r23
    140c:	8f 93       	push	r24
    140e:	9f 93       	push	r25
    1410:	af 93       	push	r26
    1412:	bf 93       	push	r27
    1414:	ef 93       	push	r30
    1416:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    1418:	e0 91 ce 21 	lds	r30, 0x21CE	; 0x8021ce <tc_tce0_ccd_callback>
    141c:	f0 91 cf 21 	lds	r31, 0x21CF	; 0x8021cf <tc_tce0_ccd_callback+0x1>
    1420:	30 97       	sbiw	r30, 0x00	; 0
    1422:	09 f0       	breq	.+2      	; 0x1426 <__vector_52+0x42>
		tc_tce0_ccd_callback();
    1424:	19 95       	eicall
	}
}
    1426:	ff 91       	pop	r31
    1428:	ef 91       	pop	r30
    142a:	bf 91       	pop	r27
    142c:	af 91       	pop	r26
    142e:	9f 91       	pop	r25
    1430:	8f 91       	pop	r24
    1432:	7f 91       	pop	r23
    1434:	6f 91       	pop	r22
    1436:	5f 91       	pop	r21
    1438:	4f 91       	pop	r20
    143a:	3f 91       	pop	r19
    143c:	2f 91       	pop	r18
    143e:	0f 90       	pop	r0
    1440:	0b be       	out	0x3b, r0	; 59
    1442:	0f 90       	pop	r0
    1444:	09 be       	out	0x39, r0	; 57
    1446:	0f 90       	pop	r0
    1448:	08 be       	out	0x38, r0	; 56
    144a:	0f 90       	pop	r0
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	0f 90       	pop	r0
    1450:	1f 90       	pop	r1
    1452:	18 95       	reti

00001454 <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    1454:	1f 92       	push	r1
    1456:	0f 92       	push	r0
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	0f 92       	push	r0
    145c:	11 24       	eor	r1, r1
    145e:	08 b6       	in	r0, 0x38	; 56
    1460:	0f 92       	push	r0
    1462:	18 be       	out	0x38, r1	; 56
    1464:	09 b6       	in	r0, 0x39	; 57
    1466:	0f 92       	push	r0
    1468:	19 be       	out	0x39, r1	; 57
    146a:	0b b6       	in	r0, 0x3b	; 59
    146c:	0f 92       	push	r0
    146e:	1b be       	out	0x3b, r1	; 59
    1470:	2f 93       	push	r18
    1472:	3f 93       	push	r19
    1474:	4f 93       	push	r20
    1476:	5f 93       	push	r21
    1478:	6f 93       	push	r22
    147a:	7f 93       	push	r23
    147c:	8f 93       	push	r24
    147e:	9f 93       	push	r25
    1480:	af 93       	push	r26
    1482:	bf 93       	push	r27
    1484:	ef 93       	push	r30
    1486:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    1488:	e0 91 cc 21 	lds	r30, 0x21CC	; 0x8021cc <tc_tce1_ovf_callback>
    148c:	f0 91 cd 21 	lds	r31, 0x21CD	; 0x8021cd <tc_tce1_ovf_callback+0x1>
    1490:	30 97       	sbiw	r30, 0x00	; 0
    1492:	09 f0       	breq	.+2      	; 0x1496 <__vector_53+0x42>
		tc_tce1_ovf_callback();
    1494:	19 95       	eicall
	}
}
    1496:	ff 91       	pop	r31
    1498:	ef 91       	pop	r30
    149a:	bf 91       	pop	r27
    149c:	af 91       	pop	r26
    149e:	9f 91       	pop	r25
    14a0:	8f 91       	pop	r24
    14a2:	7f 91       	pop	r23
    14a4:	6f 91       	pop	r22
    14a6:	5f 91       	pop	r21
    14a8:	4f 91       	pop	r20
    14aa:	3f 91       	pop	r19
    14ac:	2f 91       	pop	r18
    14ae:	0f 90       	pop	r0
    14b0:	0b be       	out	0x3b, r0	; 59
    14b2:	0f 90       	pop	r0
    14b4:	09 be       	out	0x39, r0	; 57
    14b6:	0f 90       	pop	r0
    14b8:	08 be       	out	0x38, r0	; 56
    14ba:	0f 90       	pop	r0
    14bc:	0f be       	out	0x3f, r0	; 63
    14be:	0f 90       	pop	r0
    14c0:	1f 90       	pop	r1
    14c2:	18 95       	reti

000014c4 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    14c4:	1f 92       	push	r1
    14c6:	0f 92       	push	r0
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	0f 92       	push	r0
    14cc:	11 24       	eor	r1, r1
    14ce:	08 b6       	in	r0, 0x38	; 56
    14d0:	0f 92       	push	r0
    14d2:	18 be       	out	0x38, r1	; 56
    14d4:	09 b6       	in	r0, 0x39	; 57
    14d6:	0f 92       	push	r0
    14d8:	19 be       	out	0x39, r1	; 57
    14da:	0b b6       	in	r0, 0x3b	; 59
    14dc:	0f 92       	push	r0
    14de:	1b be       	out	0x3b, r1	; 59
    14e0:	2f 93       	push	r18
    14e2:	3f 93       	push	r19
    14e4:	4f 93       	push	r20
    14e6:	5f 93       	push	r21
    14e8:	6f 93       	push	r22
    14ea:	7f 93       	push	r23
    14ec:	8f 93       	push	r24
    14ee:	9f 93       	push	r25
    14f0:	af 93       	push	r26
    14f2:	bf 93       	push	r27
    14f4:	ef 93       	push	r30
    14f6:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    14f8:	e0 91 ca 21 	lds	r30, 0x21CA	; 0x8021ca <tc_tce1_err_callback>
    14fc:	f0 91 cb 21 	lds	r31, 0x21CB	; 0x8021cb <tc_tce1_err_callback+0x1>
    1500:	30 97       	sbiw	r30, 0x00	; 0
    1502:	09 f0       	breq	.+2      	; 0x1506 <__vector_54+0x42>
		tc_tce1_err_callback();
    1504:	19 95       	eicall
	}
}
    1506:	ff 91       	pop	r31
    1508:	ef 91       	pop	r30
    150a:	bf 91       	pop	r27
    150c:	af 91       	pop	r26
    150e:	9f 91       	pop	r25
    1510:	8f 91       	pop	r24
    1512:	7f 91       	pop	r23
    1514:	6f 91       	pop	r22
    1516:	5f 91       	pop	r21
    1518:	4f 91       	pop	r20
    151a:	3f 91       	pop	r19
    151c:	2f 91       	pop	r18
    151e:	0f 90       	pop	r0
    1520:	0b be       	out	0x3b, r0	; 59
    1522:	0f 90       	pop	r0
    1524:	09 be       	out	0x39, r0	; 57
    1526:	0f 90       	pop	r0
    1528:	08 be       	out	0x38, r0	; 56
    152a:	0f 90       	pop	r0
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	0f 90       	pop	r0
    1530:	1f 90       	pop	r1
    1532:	18 95       	reti

00001534 <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    1534:	1f 92       	push	r1
    1536:	0f 92       	push	r0
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	0f 92       	push	r0
    153c:	11 24       	eor	r1, r1
    153e:	08 b6       	in	r0, 0x38	; 56
    1540:	0f 92       	push	r0
    1542:	18 be       	out	0x38, r1	; 56
    1544:	09 b6       	in	r0, 0x39	; 57
    1546:	0f 92       	push	r0
    1548:	19 be       	out	0x39, r1	; 57
    154a:	0b b6       	in	r0, 0x3b	; 59
    154c:	0f 92       	push	r0
    154e:	1b be       	out	0x3b, r1	; 59
    1550:	2f 93       	push	r18
    1552:	3f 93       	push	r19
    1554:	4f 93       	push	r20
    1556:	5f 93       	push	r21
    1558:	6f 93       	push	r22
    155a:	7f 93       	push	r23
    155c:	8f 93       	push	r24
    155e:	9f 93       	push	r25
    1560:	af 93       	push	r26
    1562:	bf 93       	push	r27
    1564:	ef 93       	push	r30
    1566:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    1568:	e0 91 c8 21 	lds	r30, 0x21C8	; 0x8021c8 <tc_tce1_cca_callback>
    156c:	f0 91 c9 21 	lds	r31, 0x21C9	; 0x8021c9 <tc_tce1_cca_callback+0x1>
    1570:	30 97       	sbiw	r30, 0x00	; 0
    1572:	09 f0       	breq	.+2      	; 0x1576 <__vector_55+0x42>
		tc_tce1_cca_callback();
    1574:	19 95       	eicall
	}
}
    1576:	ff 91       	pop	r31
    1578:	ef 91       	pop	r30
    157a:	bf 91       	pop	r27
    157c:	af 91       	pop	r26
    157e:	9f 91       	pop	r25
    1580:	8f 91       	pop	r24
    1582:	7f 91       	pop	r23
    1584:	6f 91       	pop	r22
    1586:	5f 91       	pop	r21
    1588:	4f 91       	pop	r20
    158a:	3f 91       	pop	r19
    158c:	2f 91       	pop	r18
    158e:	0f 90       	pop	r0
    1590:	0b be       	out	0x3b, r0	; 59
    1592:	0f 90       	pop	r0
    1594:	09 be       	out	0x39, r0	; 57
    1596:	0f 90       	pop	r0
    1598:	08 be       	out	0x38, r0	; 56
    159a:	0f 90       	pop	r0
    159c:	0f be       	out	0x3f, r0	; 63
    159e:	0f 90       	pop	r0
    15a0:	1f 90       	pop	r1
    15a2:	18 95       	reti

000015a4 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    15a4:	1f 92       	push	r1
    15a6:	0f 92       	push	r0
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	0f 92       	push	r0
    15ac:	11 24       	eor	r1, r1
    15ae:	08 b6       	in	r0, 0x38	; 56
    15b0:	0f 92       	push	r0
    15b2:	18 be       	out	0x38, r1	; 56
    15b4:	09 b6       	in	r0, 0x39	; 57
    15b6:	0f 92       	push	r0
    15b8:	19 be       	out	0x39, r1	; 57
    15ba:	0b b6       	in	r0, 0x3b	; 59
    15bc:	0f 92       	push	r0
    15be:	1b be       	out	0x3b, r1	; 59
    15c0:	2f 93       	push	r18
    15c2:	3f 93       	push	r19
    15c4:	4f 93       	push	r20
    15c6:	5f 93       	push	r21
    15c8:	6f 93       	push	r22
    15ca:	7f 93       	push	r23
    15cc:	8f 93       	push	r24
    15ce:	9f 93       	push	r25
    15d0:	af 93       	push	r26
    15d2:	bf 93       	push	r27
    15d4:	ef 93       	push	r30
    15d6:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    15d8:	e0 91 c6 21 	lds	r30, 0x21C6	; 0x8021c6 <tc_tce1_ccb_callback>
    15dc:	f0 91 c7 21 	lds	r31, 0x21C7	; 0x8021c7 <tc_tce1_ccb_callback+0x1>
    15e0:	30 97       	sbiw	r30, 0x00	; 0
    15e2:	09 f0       	breq	.+2      	; 0x15e6 <__vector_56+0x42>
		tc_tce1_ccb_callback();
    15e4:	19 95       	eicall
	}
}
    15e6:	ff 91       	pop	r31
    15e8:	ef 91       	pop	r30
    15ea:	bf 91       	pop	r27
    15ec:	af 91       	pop	r26
    15ee:	9f 91       	pop	r25
    15f0:	8f 91       	pop	r24
    15f2:	7f 91       	pop	r23
    15f4:	6f 91       	pop	r22
    15f6:	5f 91       	pop	r21
    15f8:	4f 91       	pop	r20
    15fa:	3f 91       	pop	r19
    15fc:	2f 91       	pop	r18
    15fe:	0f 90       	pop	r0
    1600:	0b be       	out	0x3b, r0	; 59
    1602:	0f 90       	pop	r0
    1604:	09 be       	out	0x39, r0	; 57
    1606:	0f 90       	pop	r0
    1608:	08 be       	out	0x38, r0	; 56
    160a:	0f 90       	pop	r0
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	0f 90       	pop	r0
    1610:	1f 90       	pop	r1
    1612:	18 95       	reti

00001614 <__vector_108>:
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */

ISR(TCF0_OVF_vect)
{
    1614:	1f 92       	push	r1
    1616:	0f 92       	push	r0
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	0f 92       	push	r0
    161c:	11 24       	eor	r1, r1
    161e:	08 b6       	in	r0, 0x38	; 56
    1620:	0f 92       	push	r0
    1622:	18 be       	out	0x38, r1	; 56
    1624:	09 b6       	in	r0, 0x39	; 57
    1626:	0f 92       	push	r0
    1628:	19 be       	out	0x39, r1	; 57
    162a:	0b b6       	in	r0, 0x3b	; 59
    162c:	0f 92       	push	r0
    162e:	1b be       	out	0x3b, r1	; 59
    1630:	2f 93       	push	r18
    1632:	3f 93       	push	r19
    1634:	4f 93       	push	r20
    1636:	5f 93       	push	r21
    1638:	6f 93       	push	r22
    163a:	7f 93       	push	r23
    163c:	8f 93       	push	r24
    163e:	9f 93       	push	r25
    1640:	af 93       	push	r26
    1642:	bf 93       	push	r27
    1644:	ef 93       	push	r30
    1646:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    1648:	e0 91 c4 21 	lds	r30, 0x21C4	; 0x8021c4 <tc_tcf0_ovf_callback>
    164c:	f0 91 c5 21 	lds	r31, 0x21C5	; 0x8021c5 <tc_tcf0_ovf_callback+0x1>
    1650:	30 97       	sbiw	r30, 0x00	; 0
    1652:	09 f0       	breq	.+2      	; 0x1656 <__vector_108+0x42>
		tc_tcf0_ovf_callback();
    1654:	19 95       	eicall
	}
}
    1656:	ff 91       	pop	r31
    1658:	ef 91       	pop	r30
    165a:	bf 91       	pop	r27
    165c:	af 91       	pop	r26
    165e:	9f 91       	pop	r25
    1660:	8f 91       	pop	r24
    1662:	7f 91       	pop	r23
    1664:	6f 91       	pop	r22
    1666:	5f 91       	pop	r21
    1668:	4f 91       	pop	r20
    166a:	3f 91       	pop	r19
    166c:	2f 91       	pop	r18
    166e:	0f 90       	pop	r0
    1670:	0b be       	out	0x3b, r0	; 59
    1672:	0f 90       	pop	r0
    1674:	09 be       	out	0x39, r0	; 57
    1676:	0f 90       	pop	r0
    1678:	08 be       	out	0x38, r0	; 56
    167a:	0f 90       	pop	r0
    167c:	0f be       	out	0x3f, r0	; 63
    167e:	0f 90       	pop	r0
    1680:	1f 90       	pop	r1
    1682:	18 95       	reti

00001684 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    1684:	1f 92       	push	r1
    1686:	0f 92       	push	r0
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	0f 92       	push	r0
    168c:	11 24       	eor	r1, r1
    168e:	08 b6       	in	r0, 0x38	; 56
    1690:	0f 92       	push	r0
    1692:	18 be       	out	0x38, r1	; 56
    1694:	09 b6       	in	r0, 0x39	; 57
    1696:	0f 92       	push	r0
    1698:	19 be       	out	0x39, r1	; 57
    169a:	0b b6       	in	r0, 0x3b	; 59
    169c:	0f 92       	push	r0
    169e:	1b be       	out	0x3b, r1	; 59
    16a0:	2f 93       	push	r18
    16a2:	3f 93       	push	r19
    16a4:	4f 93       	push	r20
    16a6:	5f 93       	push	r21
    16a8:	6f 93       	push	r22
    16aa:	7f 93       	push	r23
    16ac:	8f 93       	push	r24
    16ae:	9f 93       	push	r25
    16b0:	af 93       	push	r26
    16b2:	bf 93       	push	r27
    16b4:	ef 93       	push	r30
    16b6:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    16b8:	e0 91 c2 21 	lds	r30, 0x21C2	; 0x8021c2 <tc_tcf0_err_callback>
    16bc:	f0 91 c3 21 	lds	r31, 0x21C3	; 0x8021c3 <tc_tcf0_err_callback+0x1>
    16c0:	30 97       	sbiw	r30, 0x00	; 0
    16c2:	09 f0       	breq	.+2      	; 0x16c6 <__vector_109+0x42>
		tc_tcf0_err_callback();
    16c4:	19 95       	eicall
	}
}
    16c6:	ff 91       	pop	r31
    16c8:	ef 91       	pop	r30
    16ca:	bf 91       	pop	r27
    16cc:	af 91       	pop	r26
    16ce:	9f 91       	pop	r25
    16d0:	8f 91       	pop	r24
    16d2:	7f 91       	pop	r23
    16d4:	6f 91       	pop	r22
    16d6:	5f 91       	pop	r21
    16d8:	4f 91       	pop	r20
    16da:	3f 91       	pop	r19
    16dc:	2f 91       	pop	r18
    16de:	0f 90       	pop	r0
    16e0:	0b be       	out	0x3b, r0	; 59
    16e2:	0f 90       	pop	r0
    16e4:	09 be       	out	0x39, r0	; 57
    16e6:	0f 90       	pop	r0
    16e8:	08 be       	out	0x38, r0	; 56
    16ea:	0f 90       	pop	r0
    16ec:	0f be       	out	0x3f, r0	; 63
    16ee:	0f 90       	pop	r0
    16f0:	1f 90       	pop	r1
    16f2:	18 95       	reti

000016f4 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    16f4:	1f 92       	push	r1
    16f6:	0f 92       	push	r0
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	0f 92       	push	r0
    16fc:	11 24       	eor	r1, r1
    16fe:	08 b6       	in	r0, 0x38	; 56
    1700:	0f 92       	push	r0
    1702:	18 be       	out	0x38, r1	; 56
    1704:	09 b6       	in	r0, 0x39	; 57
    1706:	0f 92       	push	r0
    1708:	19 be       	out	0x39, r1	; 57
    170a:	0b b6       	in	r0, 0x3b	; 59
    170c:	0f 92       	push	r0
    170e:	1b be       	out	0x3b, r1	; 59
    1710:	2f 93       	push	r18
    1712:	3f 93       	push	r19
    1714:	4f 93       	push	r20
    1716:	5f 93       	push	r21
    1718:	6f 93       	push	r22
    171a:	7f 93       	push	r23
    171c:	8f 93       	push	r24
    171e:	9f 93       	push	r25
    1720:	af 93       	push	r26
    1722:	bf 93       	push	r27
    1724:	ef 93       	push	r30
    1726:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    1728:	e0 91 c0 21 	lds	r30, 0x21C0	; 0x8021c0 <tc_tcf0_cca_callback>
    172c:	f0 91 c1 21 	lds	r31, 0x21C1	; 0x8021c1 <tc_tcf0_cca_callback+0x1>
    1730:	30 97       	sbiw	r30, 0x00	; 0
    1732:	09 f0       	breq	.+2      	; 0x1736 <__vector_110+0x42>
		tc_tcf0_cca_callback();
    1734:	19 95       	eicall
	}
}
    1736:	ff 91       	pop	r31
    1738:	ef 91       	pop	r30
    173a:	bf 91       	pop	r27
    173c:	af 91       	pop	r26
    173e:	9f 91       	pop	r25
    1740:	8f 91       	pop	r24
    1742:	7f 91       	pop	r23
    1744:	6f 91       	pop	r22
    1746:	5f 91       	pop	r21
    1748:	4f 91       	pop	r20
    174a:	3f 91       	pop	r19
    174c:	2f 91       	pop	r18
    174e:	0f 90       	pop	r0
    1750:	0b be       	out	0x3b, r0	; 59
    1752:	0f 90       	pop	r0
    1754:	09 be       	out	0x39, r0	; 57
    1756:	0f 90       	pop	r0
    1758:	08 be       	out	0x38, r0	; 56
    175a:	0f 90       	pop	r0
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	0f 90       	pop	r0
    1760:	1f 90       	pop	r1
    1762:	18 95       	reti

00001764 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    1764:	1f 92       	push	r1
    1766:	0f 92       	push	r0
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	0f 92       	push	r0
    176c:	11 24       	eor	r1, r1
    176e:	08 b6       	in	r0, 0x38	; 56
    1770:	0f 92       	push	r0
    1772:	18 be       	out	0x38, r1	; 56
    1774:	09 b6       	in	r0, 0x39	; 57
    1776:	0f 92       	push	r0
    1778:	19 be       	out	0x39, r1	; 57
    177a:	0b b6       	in	r0, 0x3b	; 59
    177c:	0f 92       	push	r0
    177e:	1b be       	out	0x3b, r1	; 59
    1780:	2f 93       	push	r18
    1782:	3f 93       	push	r19
    1784:	4f 93       	push	r20
    1786:	5f 93       	push	r21
    1788:	6f 93       	push	r22
    178a:	7f 93       	push	r23
    178c:	8f 93       	push	r24
    178e:	9f 93       	push	r25
    1790:	af 93       	push	r26
    1792:	bf 93       	push	r27
    1794:	ef 93       	push	r30
    1796:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    1798:	e0 91 be 21 	lds	r30, 0x21BE	; 0x8021be <tc_tcf0_ccb_callback>
    179c:	f0 91 bf 21 	lds	r31, 0x21BF	; 0x8021bf <tc_tcf0_ccb_callback+0x1>
    17a0:	30 97       	sbiw	r30, 0x00	; 0
    17a2:	09 f0       	breq	.+2      	; 0x17a6 <__vector_111+0x42>
		tc_tcf0_ccb_callback();
    17a4:	19 95       	eicall
	}
}
    17a6:	ff 91       	pop	r31
    17a8:	ef 91       	pop	r30
    17aa:	bf 91       	pop	r27
    17ac:	af 91       	pop	r26
    17ae:	9f 91       	pop	r25
    17b0:	8f 91       	pop	r24
    17b2:	7f 91       	pop	r23
    17b4:	6f 91       	pop	r22
    17b6:	5f 91       	pop	r21
    17b8:	4f 91       	pop	r20
    17ba:	3f 91       	pop	r19
    17bc:	2f 91       	pop	r18
    17be:	0f 90       	pop	r0
    17c0:	0b be       	out	0x3b, r0	; 59
    17c2:	0f 90       	pop	r0
    17c4:	09 be       	out	0x39, r0	; 57
    17c6:	0f 90       	pop	r0
    17c8:	08 be       	out	0x38, r0	; 56
    17ca:	0f 90       	pop	r0
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	0f 90       	pop	r0
    17d0:	1f 90       	pop	r1
    17d2:	18 95       	reti

000017d4 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    17d4:	1f 92       	push	r1
    17d6:	0f 92       	push	r0
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	0f 92       	push	r0
    17dc:	11 24       	eor	r1, r1
    17de:	08 b6       	in	r0, 0x38	; 56
    17e0:	0f 92       	push	r0
    17e2:	18 be       	out	0x38, r1	; 56
    17e4:	09 b6       	in	r0, 0x39	; 57
    17e6:	0f 92       	push	r0
    17e8:	19 be       	out	0x39, r1	; 57
    17ea:	0b b6       	in	r0, 0x3b	; 59
    17ec:	0f 92       	push	r0
    17ee:	1b be       	out	0x3b, r1	; 59
    17f0:	2f 93       	push	r18
    17f2:	3f 93       	push	r19
    17f4:	4f 93       	push	r20
    17f6:	5f 93       	push	r21
    17f8:	6f 93       	push	r22
    17fa:	7f 93       	push	r23
    17fc:	8f 93       	push	r24
    17fe:	9f 93       	push	r25
    1800:	af 93       	push	r26
    1802:	bf 93       	push	r27
    1804:	ef 93       	push	r30
    1806:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    1808:	e0 91 bc 21 	lds	r30, 0x21BC	; 0x8021bc <tc_tcf0_ccc_callback>
    180c:	f0 91 bd 21 	lds	r31, 0x21BD	; 0x8021bd <tc_tcf0_ccc_callback+0x1>
    1810:	30 97       	sbiw	r30, 0x00	; 0
    1812:	09 f0       	breq	.+2      	; 0x1816 <__vector_112+0x42>
		tc_tcf0_ccc_callback();
    1814:	19 95       	eicall
	}
}
    1816:	ff 91       	pop	r31
    1818:	ef 91       	pop	r30
    181a:	bf 91       	pop	r27
    181c:	af 91       	pop	r26
    181e:	9f 91       	pop	r25
    1820:	8f 91       	pop	r24
    1822:	7f 91       	pop	r23
    1824:	6f 91       	pop	r22
    1826:	5f 91       	pop	r21
    1828:	4f 91       	pop	r20
    182a:	3f 91       	pop	r19
    182c:	2f 91       	pop	r18
    182e:	0f 90       	pop	r0
    1830:	0b be       	out	0x3b, r0	; 59
    1832:	0f 90       	pop	r0
    1834:	09 be       	out	0x39, r0	; 57
    1836:	0f 90       	pop	r0
    1838:	08 be       	out	0x38, r0	; 56
    183a:	0f 90       	pop	r0
    183c:	0f be       	out	0x3f, r0	; 63
    183e:	0f 90       	pop	r0
    1840:	1f 90       	pop	r1
    1842:	18 95       	reti

00001844 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    1844:	1f 92       	push	r1
    1846:	0f 92       	push	r0
    1848:	0f b6       	in	r0, 0x3f	; 63
    184a:	0f 92       	push	r0
    184c:	11 24       	eor	r1, r1
    184e:	08 b6       	in	r0, 0x38	; 56
    1850:	0f 92       	push	r0
    1852:	18 be       	out	0x38, r1	; 56
    1854:	09 b6       	in	r0, 0x39	; 57
    1856:	0f 92       	push	r0
    1858:	19 be       	out	0x39, r1	; 57
    185a:	0b b6       	in	r0, 0x3b	; 59
    185c:	0f 92       	push	r0
    185e:	1b be       	out	0x3b, r1	; 59
    1860:	2f 93       	push	r18
    1862:	3f 93       	push	r19
    1864:	4f 93       	push	r20
    1866:	5f 93       	push	r21
    1868:	6f 93       	push	r22
    186a:	7f 93       	push	r23
    186c:	8f 93       	push	r24
    186e:	9f 93       	push	r25
    1870:	af 93       	push	r26
    1872:	bf 93       	push	r27
    1874:	ef 93       	push	r30
    1876:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    1878:	e0 91 ba 21 	lds	r30, 0x21BA	; 0x8021ba <tc_tcf0_ccd_callback>
    187c:	f0 91 bb 21 	lds	r31, 0x21BB	; 0x8021bb <tc_tcf0_ccd_callback+0x1>
    1880:	30 97       	sbiw	r30, 0x00	; 0
    1882:	09 f0       	breq	.+2      	; 0x1886 <__vector_113+0x42>
		tc_tcf0_ccd_callback();
    1884:	19 95       	eicall
	}
}
    1886:	ff 91       	pop	r31
    1888:	ef 91       	pop	r30
    188a:	bf 91       	pop	r27
    188c:	af 91       	pop	r26
    188e:	9f 91       	pop	r25
    1890:	8f 91       	pop	r24
    1892:	7f 91       	pop	r23
    1894:	6f 91       	pop	r22
    1896:	5f 91       	pop	r21
    1898:	4f 91       	pop	r20
    189a:	3f 91       	pop	r19
    189c:	2f 91       	pop	r18
    189e:	0f 90       	pop	r0
    18a0:	0b be       	out	0x3b, r0	; 59
    18a2:	0f 90       	pop	r0
    18a4:	09 be       	out	0x39, r0	; 57
    18a6:	0f 90       	pop	r0
    18a8:	08 be       	out	0x38, r0	; 56
    18aa:	0f 90       	pop	r0
    18ac:	0f be       	out	0x3f, r0	; 63
    18ae:	0f 90       	pop	r0
    18b0:	1f 90       	pop	r1
    18b2:	18 95       	reti

000018b4 <__vector_114>:
 *
 * This function will handle interrupt on Timer Counter F1 overflow and
 * call the callback function.
 */
ISR(TCF1_OVF_vect)
{
    18b4:	1f 92       	push	r1
    18b6:	0f 92       	push	r0
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	0f 92       	push	r0
    18bc:	11 24       	eor	r1, r1
    18be:	08 b6       	in	r0, 0x38	; 56
    18c0:	0f 92       	push	r0
    18c2:	18 be       	out	0x38, r1	; 56
    18c4:	09 b6       	in	r0, 0x39	; 57
    18c6:	0f 92       	push	r0
    18c8:	19 be       	out	0x39, r1	; 57
    18ca:	0b b6       	in	r0, 0x3b	; 59
    18cc:	0f 92       	push	r0
    18ce:	1b be       	out	0x3b, r1	; 59
    18d0:	2f 93       	push	r18
    18d2:	3f 93       	push	r19
    18d4:	4f 93       	push	r20
    18d6:	5f 93       	push	r21
    18d8:	6f 93       	push	r22
    18da:	7f 93       	push	r23
    18dc:	8f 93       	push	r24
    18de:	9f 93       	push	r25
    18e0:	af 93       	push	r26
    18e2:	bf 93       	push	r27
    18e4:	ef 93       	push	r30
    18e6:	ff 93       	push	r31
	if (tc_tcf1_ovf_callback) {
    18e8:	e0 91 b8 21 	lds	r30, 0x21B8	; 0x8021b8 <tc_tcf1_ovf_callback>
    18ec:	f0 91 b9 21 	lds	r31, 0x21B9	; 0x8021b9 <tc_tcf1_ovf_callback+0x1>
    18f0:	30 97       	sbiw	r30, 0x00	; 0
    18f2:	09 f0       	breq	.+2      	; 0x18f6 <__vector_114+0x42>
		tc_tcf1_ovf_callback();
    18f4:	19 95       	eicall
	}
}
    18f6:	ff 91       	pop	r31
    18f8:	ef 91       	pop	r30
    18fa:	bf 91       	pop	r27
    18fc:	af 91       	pop	r26
    18fe:	9f 91       	pop	r25
    1900:	8f 91       	pop	r24
    1902:	7f 91       	pop	r23
    1904:	6f 91       	pop	r22
    1906:	5f 91       	pop	r21
    1908:	4f 91       	pop	r20
    190a:	3f 91       	pop	r19
    190c:	2f 91       	pop	r18
    190e:	0f 90       	pop	r0
    1910:	0b be       	out	0x3b, r0	; 59
    1912:	0f 90       	pop	r0
    1914:	09 be       	out	0x39, r0	; 57
    1916:	0f 90       	pop	r0
    1918:	08 be       	out	0x38, r0	; 56
    191a:	0f 90       	pop	r0
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	0f 90       	pop	r0
    1920:	1f 90       	pop	r1
    1922:	18 95       	reti

00001924 <__vector_115>:
 *
 * This function will handle interrupt on Timer Counter F1 error and
 * call the callback function.
 */
ISR(TCF1_ERR_vect)
{
    1924:	1f 92       	push	r1
    1926:	0f 92       	push	r0
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	0f 92       	push	r0
    192c:	11 24       	eor	r1, r1
    192e:	08 b6       	in	r0, 0x38	; 56
    1930:	0f 92       	push	r0
    1932:	18 be       	out	0x38, r1	; 56
    1934:	09 b6       	in	r0, 0x39	; 57
    1936:	0f 92       	push	r0
    1938:	19 be       	out	0x39, r1	; 57
    193a:	0b b6       	in	r0, 0x3b	; 59
    193c:	0f 92       	push	r0
    193e:	1b be       	out	0x3b, r1	; 59
    1940:	2f 93       	push	r18
    1942:	3f 93       	push	r19
    1944:	4f 93       	push	r20
    1946:	5f 93       	push	r21
    1948:	6f 93       	push	r22
    194a:	7f 93       	push	r23
    194c:	8f 93       	push	r24
    194e:	9f 93       	push	r25
    1950:	af 93       	push	r26
    1952:	bf 93       	push	r27
    1954:	ef 93       	push	r30
    1956:	ff 93       	push	r31
	if (tc_tcf1_err_callback) {
    1958:	e0 91 b6 21 	lds	r30, 0x21B6	; 0x8021b6 <tc_tcf1_err_callback>
    195c:	f0 91 b7 21 	lds	r31, 0x21B7	; 0x8021b7 <tc_tcf1_err_callback+0x1>
    1960:	30 97       	sbiw	r30, 0x00	; 0
    1962:	09 f0       	breq	.+2      	; 0x1966 <__vector_115+0x42>
		tc_tcf1_err_callback();
    1964:	19 95       	eicall
	}
}
    1966:	ff 91       	pop	r31
    1968:	ef 91       	pop	r30
    196a:	bf 91       	pop	r27
    196c:	af 91       	pop	r26
    196e:	9f 91       	pop	r25
    1970:	8f 91       	pop	r24
    1972:	7f 91       	pop	r23
    1974:	6f 91       	pop	r22
    1976:	5f 91       	pop	r21
    1978:	4f 91       	pop	r20
    197a:	3f 91       	pop	r19
    197c:	2f 91       	pop	r18
    197e:	0f 90       	pop	r0
    1980:	0b be       	out	0x3b, r0	; 59
    1982:	0f 90       	pop	r0
    1984:	09 be       	out	0x39, r0	; 57
    1986:	0f 90       	pop	r0
    1988:	08 be       	out	0x38, r0	; 56
    198a:	0f 90       	pop	r0
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	0f 90       	pop	r0
    1990:	1f 90       	pop	r1
    1992:	18 95       	reti

00001994 <__vector_116>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF1_CCA_vect)
{
    1994:	1f 92       	push	r1
    1996:	0f 92       	push	r0
    1998:	0f b6       	in	r0, 0x3f	; 63
    199a:	0f 92       	push	r0
    199c:	11 24       	eor	r1, r1
    199e:	08 b6       	in	r0, 0x38	; 56
    19a0:	0f 92       	push	r0
    19a2:	18 be       	out	0x38, r1	; 56
    19a4:	09 b6       	in	r0, 0x39	; 57
    19a6:	0f 92       	push	r0
    19a8:	19 be       	out	0x39, r1	; 57
    19aa:	0b b6       	in	r0, 0x3b	; 59
    19ac:	0f 92       	push	r0
    19ae:	1b be       	out	0x3b, r1	; 59
    19b0:	2f 93       	push	r18
    19b2:	3f 93       	push	r19
    19b4:	4f 93       	push	r20
    19b6:	5f 93       	push	r21
    19b8:	6f 93       	push	r22
    19ba:	7f 93       	push	r23
    19bc:	8f 93       	push	r24
    19be:	9f 93       	push	r25
    19c0:	af 93       	push	r26
    19c2:	bf 93       	push	r27
    19c4:	ef 93       	push	r30
    19c6:	ff 93       	push	r31
	if (tc_tcf1_cca_callback) {
    19c8:	e0 91 b4 21 	lds	r30, 0x21B4	; 0x8021b4 <tc_tcf1_cca_callback>
    19cc:	f0 91 b5 21 	lds	r31, 0x21B5	; 0x8021b5 <tc_tcf1_cca_callback+0x1>
    19d0:	30 97       	sbiw	r30, 0x00	; 0
    19d2:	09 f0       	breq	.+2      	; 0x19d6 <__vector_116+0x42>
		tc_tcf1_cca_callback();
    19d4:	19 95       	eicall
	}
}
    19d6:	ff 91       	pop	r31
    19d8:	ef 91       	pop	r30
    19da:	bf 91       	pop	r27
    19dc:	af 91       	pop	r26
    19de:	9f 91       	pop	r25
    19e0:	8f 91       	pop	r24
    19e2:	7f 91       	pop	r23
    19e4:	6f 91       	pop	r22
    19e6:	5f 91       	pop	r21
    19e8:	4f 91       	pop	r20
    19ea:	3f 91       	pop	r19
    19ec:	2f 91       	pop	r18
    19ee:	0f 90       	pop	r0
    19f0:	0b be       	out	0x3b, r0	; 59
    19f2:	0f 90       	pop	r0
    19f4:	09 be       	out	0x39, r0	; 57
    19f6:	0f 90       	pop	r0
    19f8:	08 be       	out	0x38, r0	; 56
    19fa:	0f 90       	pop	r0
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	0f 90       	pop	r0
    1a00:	1f 90       	pop	r1
    1a02:	18 95       	reti

00001a04 <__vector_117>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF1_CCB_vect)
{
    1a04:	1f 92       	push	r1
    1a06:	0f 92       	push	r0
    1a08:	0f b6       	in	r0, 0x3f	; 63
    1a0a:	0f 92       	push	r0
    1a0c:	11 24       	eor	r1, r1
    1a0e:	08 b6       	in	r0, 0x38	; 56
    1a10:	0f 92       	push	r0
    1a12:	18 be       	out	0x38, r1	; 56
    1a14:	09 b6       	in	r0, 0x39	; 57
    1a16:	0f 92       	push	r0
    1a18:	19 be       	out	0x39, r1	; 57
    1a1a:	0b b6       	in	r0, 0x3b	; 59
    1a1c:	0f 92       	push	r0
    1a1e:	1b be       	out	0x3b, r1	; 59
    1a20:	2f 93       	push	r18
    1a22:	3f 93       	push	r19
    1a24:	4f 93       	push	r20
    1a26:	5f 93       	push	r21
    1a28:	6f 93       	push	r22
    1a2a:	7f 93       	push	r23
    1a2c:	8f 93       	push	r24
    1a2e:	9f 93       	push	r25
    1a30:	af 93       	push	r26
    1a32:	bf 93       	push	r27
    1a34:	ef 93       	push	r30
    1a36:	ff 93       	push	r31
	if (tc_tcf1_ccb_callback) {
    1a38:	e0 91 b2 21 	lds	r30, 0x21B2	; 0x8021b2 <tc_tcf1_ccb_callback>
    1a3c:	f0 91 b3 21 	lds	r31, 0x21B3	; 0x8021b3 <tc_tcf1_ccb_callback+0x1>
    1a40:	30 97       	sbiw	r30, 0x00	; 0
    1a42:	09 f0       	breq	.+2      	; 0x1a46 <__vector_117+0x42>
		tc_tcf1_ccb_callback();
    1a44:	19 95       	eicall
	}
}
    1a46:	ff 91       	pop	r31
    1a48:	ef 91       	pop	r30
    1a4a:	bf 91       	pop	r27
    1a4c:	af 91       	pop	r26
    1a4e:	9f 91       	pop	r25
    1a50:	8f 91       	pop	r24
    1a52:	7f 91       	pop	r23
    1a54:	6f 91       	pop	r22
    1a56:	5f 91       	pop	r21
    1a58:	4f 91       	pop	r20
    1a5a:	3f 91       	pop	r19
    1a5c:	2f 91       	pop	r18
    1a5e:	0f 90       	pop	r0
    1a60:	0b be       	out	0x3b, r0	; 59
    1a62:	0f 90       	pop	r0
    1a64:	09 be       	out	0x39, r0	; 57
    1a66:	0f 90       	pop	r0
    1a68:	08 be       	out	0x38, r0	; 56
    1a6a:	0f 90       	pop	r0
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	0f 90       	pop	r0
    1a70:	1f 90       	pop	r1
    1a72:	18 95       	reti

00001a74 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    1a74:	8f ef       	ldi	r24, 0xFF	; 255
    1a76:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    1a7a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    1a7e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    1a82:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    1a86:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    1a8a:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    1a8e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
    1a98:	08 95       	ret

00001a9a <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    1a9a:	cf 93       	push	r28
    1a9c:	df 93       	push	r29
    1a9e:	1f 92       	push	r1
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1aa4:	9f b7       	in	r25, 0x3f	; 63
    1aa6:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1aa8:	f8 94       	cli
	return flags;
    1aaa:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1aac:	e8 2f       	mov	r30, r24
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	e0 59       	subi	r30, 0x90	; 144
    1ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab4:	60 95       	com	r22
    1ab6:	80 81       	ld	r24, Z
    1ab8:	68 23       	and	r22, r24
    1aba:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1abc:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1abe:	0f 90       	pop	r0
    1ac0:	df 91       	pop	r29
    1ac2:	cf 91       	pop	r28
    1ac4:	08 95       	ret

00001ac6 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    1ac6:	cf 93       	push	r28
    1ac8:	df 93       	push	r29
    1aca:	1f 92       	push	r1
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1ad0:	9f b7       	in	r25, 0x3f	; 63
    1ad2:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1ad4:	f8 94       	cli
	return flags;
    1ad6:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    1ad8:	e8 2f       	mov	r30, r24
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	e0 59       	subi	r30, 0x90	; 144
    1ade:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae0:	80 81       	ld	r24, Z
    1ae2:	68 2b       	or	r22, r24
    1ae4:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1ae6:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1ae8:	0f 90       	pop	r0
    1aea:	df 91       	pop	r29
    1aec:	cf 91       	pop	r28
    1aee:	08 95       	ret

00001af0 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    1af0:	cf 93       	push	r28
    1af2:	df 93       	push	r29
    1af4:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    1afa:	c6 2f       	mov	r28, r22
    1afc:	d0 e0       	ldi	r29, 0x00	; 0
    1afe:	de 01       	movw	r26, r28
    1b00:	02 2e       	mov	r0, r18
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <ioport_configure_port_pin+0x18>
    1b04:	b5 95       	asr	r27
    1b06:	a7 95       	ror	r26
    1b08:	0a 94       	dec	r0
    1b0a:	e2 f7       	brpl	.-8      	; 0x1b04 <ioport_configure_port_pin+0x14>
    1b0c:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1b0e:	50 8b       	std	Z+16, r21	; 0x10
    1b10:	2f 5f       	subi	r18, 0xFF	; 255
    1b12:	3f 4f       	sbci	r19, 0xFF	; 255
    1b14:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    1b16:	28 30       	cpi	r18, 0x08	; 8
    1b18:	31 05       	cpc	r19, r1
    1b1a:	89 f7       	brne	.-30     	; 0x1afe <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    1b1c:	40 ff       	sbrs	r20, 0
    1b1e:	0a c0       	rjmp	.+20     	; 0x1b34 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    1b20:	41 ff       	sbrs	r20, 1
    1b22:	03 c0       	rjmp	.+6      	; 0x1b2a <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    1b24:	fc 01       	movw	r30, r24
    1b26:	65 83       	std	Z+5, r22	; 0x05
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    1b2e:	fc 01       	movw	r30, r24
    1b30:	61 83       	std	Z+1, r22	; 0x01
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    1b34:	fc 01       	movw	r30, r24
    1b36:	62 83       	std	Z+2, r22	; 0x02
	}
}
    1b38:	df 91       	pop	r29
    1b3a:	cf 91       	pop	r28
    1b3c:	08 95       	ret

00001b3e <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    1b3e:	43 e0       	ldi	r20, 0x03	; 3
    1b40:	50 e0       	ldi	r21, 0x00	; 0
    1b42:	68 e0       	ldi	r22, 0x08	; 8
    1b44:	80 ec       	ldi	r24, 0xC0	; 192
    1b46:	97 e0       	ldi	r25, 0x07	; 7
    1b48:	d3 df       	rcall	.-90     	; 0x1af0 <ioport_configure_port_pin>
    1b4a:	40 e0       	ldi	r20, 0x00	; 0
    1b4c:	58 e1       	ldi	r21, 0x18	; 24
    1b4e:	64 e0       	ldi	r22, 0x04	; 4
    1b50:	80 ec       	ldi	r24, 0xC0	; 192
    1b52:	97 e0       	ldi	r25, 0x07	; 7
    1b54:	cd df       	rcall	.-102    	; 0x1af0 <ioport_configure_port_pin>
    1b56:	43 e0       	ldi	r20, 0x03	; 3
    1b58:	50 e0       	ldi	r21, 0x00	; 0
    1b5a:	68 e0       	ldi	r22, 0x08	; 8
    1b5c:	80 e8       	ldi	r24, 0x80	; 128
    1b5e:	96 e0       	ldi	r25, 0x06	; 6
    1b60:	c7 df       	rcall	.-114    	; 0x1af0 <ioport_configure_port_pin>
    1b62:	40 e0       	ldi	r20, 0x00	; 0
    1b64:	50 e0       	ldi	r21, 0x00	; 0
    1b66:	64 e0       	ldi	r22, 0x04	; 4
    1b68:	80 e8       	ldi	r24, 0x80	; 128
    1b6a:	96 e0       	ldi	r25, 0x06	; 6
    1b6c:	c1 df       	rcall	.-126    	; 0x1af0 <ioport_configure_port_pin>
    1b6e:	43 e0       	ldi	r20, 0x03	; 3
    1b70:	50 e0       	ldi	r21, 0x00	; 0
    1b72:	68 e0       	ldi	r22, 0x08	; 8
    1b74:	80 e4       	ldi	r24, 0x40	; 64
    1b76:	96 e0       	ldi	r25, 0x06	; 6
    1b78:	bb df       	rcall	.-138    	; 0x1af0 <ioport_configure_port_pin>
    1b7a:	40 e0       	ldi	r20, 0x00	; 0
    1b7c:	50 e0       	ldi	r21, 0x00	; 0
    1b7e:	64 e0       	ldi	r22, 0x04	; 4
    1b80:	80 e4       	ldi	r24, 0x40	; 64
    1b82:	96 e0       	ldi	r25, 0x06	; 6
    1b84:	b5 cf       	rjmp	.-150    	; 0x1af0 <ioport_configure_port_pin>
    1b86:	08 95       	ret

00001b88 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1b88:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1b8c:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1b8e:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1b90:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1b94:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1b96:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1b9a:	08 95       	ret

00001b9c <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	91 81       	ldd	r25, Z+1	; 0x01
    1ba0:	95 ff       	sbrs	r25, 5
    1ba2:	fd cf       	rjmp	.-6      	; 0x1b9e <usart_putchar+0x2>
    1ba4:	60 83       	st	Z, r22
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	08 95       	ret

00001bac <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1bac:	4f 92       	push	r4
    1bae:	5f 92       	push	r5
    1bb0:	6f 92       	push	r6
    1bb2:	7f 92       	push	r7
    1bb4:	8f 92       	push	r8
    1bb6:	9f 92       	push	r9
    1bb8:	af 92       	push	r10
    1bba:	bf 92       	push	r11
    1bbc:	ef 92       	push	r14
    1bbe:	ff 92       	push	r15
    1bc0:	0f 93       	push	r16
    1bc2:	1f 93       	push	r17
    1bc4:	cf 93       	push	r28
    1bc6:	7c 01       	movw	r14, r24
    1bc8:	4a 01       	movw	r8, r20
    1bca:	5b 01       	movw	r10, r22
    1bcc:	28 01       	movw	r4, r16
    1bce:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1bd0:	fc 01       	movw	r30, r24
    1bd2:	84 81       	ldd	r24, Z+4	; 0x04
    1bd4:	82 ff       	sbrs	r24, 2
    1bd6:	16 c0       	rjmp	.+44     	; 0x1c04 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    1bd8:	d9 01       	movw	r26, r18
    1bda:	c8 01       	movw	r24, r16
    1bdc:	68 94       	set
    1bde:	12 f8       	bld	r1, 2
    1be0:	b6 95       	lsr	r27
    1be2:	a7 95       	ror	r26
    1be4:	97 95       	ror	r25
    1be6:	87 95       	ror	r24
    1be8:	16 94       	lsr	r1
    1bea:	d1 f7       	brne	.-12     	; 0x1be0 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    1bec:	b9 01       	movw	r22, r18
    1bee:	a8 01       	movw	r20, r16
    1bf0:	03 2e       	mov	r0, r19
    1bf2:	36 e1       	ldi	r19, 0x16	; 22
    1bf4:	76 95       	lsr	r23
    1bf6:	67 95       	ror	r22
    1bf8:	57 95       	ror	r21
    1bfa:	47 95       	ror	r20
    1bfc:	3a 95       	dec	r19
    1bfe:	d1 f7       	brne	.-12     	; 0x1bf4 <usart_set_baudrate+0x48>
    1c00:	30 2d       	mov	r19, r0
    1c02:	15 c0       	rjmp	.+42     	; 0x1c2e <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    1c04:	d9 01       	movw	r26, r18
    1c06:	c8 01       	movw	r24, r16
    1c08:	68 94       	set
    1c0a:	13 f8       	bld	r1, 3
    1c0c:	b6 95       	lsr	r27
    1c0e:	a7 95       	ror	r26
    1c10:	97 95       	ror	r25
    1c12:	87 95       	ror	r24
    1c14:	16 94       	lsr	r1
    1c16:	d1 f7       	brne	.-12     	; 0x1c0c <usart_set_baudrate+0x60>
		min_rate /= 2;
    1c18:	b9 01       	movw	r22, r18
    1c1a:	a8 01       	movw	r20, r16
    1c1c:	03 2e       	mov	r0, r19
    1c1e:	37 e1       	ldi	r19, 0x17	; 23
    1c20:	76 95       	lsr	r23
    1c22:	67 95       	ror	r22
    1c24:	57 95       	ror	r21
    1c26:	47 95       	ror	r20
    1c28:	3a 95       	dec	r19
    1c2a:	d1 f7       	brne	.-12     	; 0x1c20 <usart_set_baudrate+0x74>
    1c2c:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    1c2e:	88 15       	cp	r24, r8
    1c30:	99 05       	cpc	r25, r9
    1c32:	aa 05       	cpc	r26, r10
    1c34:	bb 05       	cpc	r27, r11
    1c36:	08 f4       	brcc	.+2      	; 0x1c3a <usart_set_baudrate+0x8e>
    1c38:	a6 c0       	rjmp	.+332    	; 0x1d86 <usart_set_baudrate+0x1da>
    1c3a:	84 16       	cp	r8, r20
    1c3c:	95 06       	cpc	r9, r21
    1c3e:	a6 06       	cpc	r10, r22
    1c40:	b7 06       	cpc	r11, r23
    1c42:	08 f4       	brcc	.+2      	; 0x1c46 <usart_set_baudrate+0x9a>
    1c44:	a2 c0       	rjmp	.+324    	; 0x1d8a <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1c46:	f7 01       	movw	r30, r14
    1c48:	84 81       	ldd	r24, Z+4	; 0x04
    1c4a:	82 fd       	sbrc	r24, 2
    1c4c:	04 c0       	rjmp	.+8      	; 0x1c56 <usart_set_baudrate+0xaa>
		baud *= 2;
    1c4e:	88 0c       	add	r8, r8
    1c50:	99 1c       	adc	r9, r9
    1c52:	aa 1c       	adc	r10, r10
    1c54:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    1c56:	c3 01       	movw	r24, r6
    1c58:	b2 01       	movw	r22, r4
    1c5a:	a5 01       	movw	r20, r10
    1c5c:	94 01       	movw	r18, r8
    1c5e:	0e 94 37 19 	call	0x326e	; 0x326e <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    1c62:	2f 3f       	cpi	r18, 0xFF	; 255
    1c64:	31 05       	cpc	r19, r1
    1c66:	41 05       	cpc	r20, r1
    1c68:	51 05       	cpc	r21, r1
    1c6a:	08 f4       	brcc	.+2      	; 0x1c6e <usart_set_baudrate+0xc2>
    1c6c:	90 c0       	rjmp	.+288    	; 0x1d8e <usart_set_baudrate+0x1e2>
    1c6e:	8f ef       	ldi	r24, 0xFF	; 255
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	a0 e0       	ldi	r26, 0x00	; 0
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	c9 ef       	ldi	r28, 0xF9	; 249
    1c78:	05 c0       	rjmp	.+10     	; 0x1c84 <usart_set_baudrate+0xd8>
    1c7a:	28 17       	cp	r18, r24
    1c7c:	39 07       	cpc	r19, r25
    1c7e:	4a 07       	cpc	r20, r26
    1c80:	5b 07       	cpc	r21, r27
    1c82:	58 f0       	brcs	.+22     	; 0x1c9a <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
    1c84:	88 0f       	add	r24, r24
    1c86:	99 1f       	adc	r25, r25
    1c88:	aa 1f       	adc	r26, r26
    1c8a:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    1c8c:	cd 3f       	cpi	r28, 0xFD	; 253
    1c8e:	0c f4       	brge	.+2      	; 0x1c92 <usart_set_baudrate+0xe6>
			limit |= 1;
    1c90:	81 60       	ori	r24, 0x01	; 1
    1c92:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1c94:	c7 30       	cpi	r28, 0x07	; 7
    1c96:	89 f7       	brne	.-30     	; 0x1c7a <usart_set_baudrate+0xce>
    1c98:	4f c0       	rjmp	.+158    	; 0x1d38 <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    1c9a:	cc 23       	and	r28, r28
    1c9c:	0c f0       	brlt	.+2      	; 0x1ca0 <usart_set_baudrate+0xf4>
    1c9e:	4c c0       	rjmp	.+152    	; 0x1d38 <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1ca0:	d5 01       	movw	r26, r10
    1ca2:	c4 01       	movw	r24, r8
    1ca4:	88 0f       	add	r24, r24
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	aa 1f       	adc	r26, r26
    1caa:	bb 1f       	adc	r27, r27
    1cac:	88 0f       	add	r24, r24
    1cae:	99 1f       	adc	r25, r25
    1cb0:	aa 1f       	adc	r26, r26
    1cb2:	bb 1f       	adc	r27, r27
    1cb4:	88 0f       	add	r24, r24
    1cb6:	99 1f       	adc	r25, r25
    1cb8:	aa 1f       	adc	r26, r26
    1cba:	bb 1f       	adc	r27, r27
    1cbc:	48 1a       	sub	r4, r24
    1cbe:	59 0a       	sbc	r5, r25
    1cc0:	6a 0a       	sbc	r6, r26
    1cc2:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    1cc4:	ce 3f       	cpi	r28, 0xFE	; 254
    1cc6:	f4 f4       	brge	.+60     	; 0x1d04 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    1cc8:	8d ef       	ldi	r24, 0xFD	; 253
    1cca:	9f ef       	ldi	r25, 0xFF	; 255
    1ccc:	8c 1b       	sub	r24, r28
    1cce:	91 09       	sbc	r25, r1
    1cd0:	c7 fd       	sbrc	r28, 7
    1cd2:	93 95       	inc	r25
    1cd4:	04 c0       	rjmp	.+8      	; 0x1cde <usart_set_baudrate+0x132>
    1cd6:	44 0c       	add	r4, r4
    1cd8:	55 1c       	adc	r5, r5
    1cda:	66 1c       	adc	r6, r6
    1cdc:	77 1c       	adc	r7, r7
    1cde:	8a 95       	dec	r24
    1ce0:	d2 f7       	brpl	.-12     	; 0x1cd6 <usart_set_baudrate+0x12a>
    1ce2:	d5 01       	movw	r26, r10
    1ce4:	c4 01       	movw	r24, r8
    1ce6:	b6 95       	lsr	r27
    1ce8:	a7 95       	ror	r26
    1cea:	97 95       	ror	r25
    1cec:	87 95       	ror	r24
    1cee:	bc 01       	movw	r22, r24
    1cf0:	cd 01       	movw	r24, r26
    1cf2:	64 0d       	add	r22, r4
    1cf4:	75 1d       	adc	r23, r5
    1cf6:	86 1d       	adc	r24, r6
    1cf8:	97 1d       	adc	r25, r7
    1cfa:	a5 01       	movw	r20, r10
    1cfc:	94 01       	movw	r18, r8
    1cfe:	0e 94 37 19 	call	0x326e	; 0x326e <__udivmodsi4>
    1d02:	37 c0       	rjmp	.+110    	; 0x1d72 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
    1d04:	83 e0       	ldi	r24, 0x03	; 3
    1d06:	8c 0f       	add	r24, r28
    1d08:	a5 01       	movw	r20, r10
    1d0a:	94 01       	movw	r18, r8
    1d0c:	04 c0       	rjmp	.+8      	; 0x1d16 <usart_set_baudrate+0x16a>
    1d0e:	22 0f       	add	r18, r18
    1d10:	33 1f       	adc	r19, r19
    1d12:	44 1f       	adc	r20, r20
    1d14:	55 1f       	adc	r21, r21
    1d16:	8a 95       	dec	r24
    1d18:	d2 f7       	brpl	.-12     	; 0x1d0e <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
    1d1a:	da 01       	movw	r26, r20
    1d1c:	c9 01       	movw	r24, r18
    1d1e:	b6 95       	lsr	r27
    1d20:	a7 95       	ror	r26
    1d22:	97 95       	ror	r25
    1d24:	87 95       	ror	r24
    1d26:	bc 01       	movw	r22, r24
    1d28:	cd 01       	movw	r24, r26
    1d2a:	64 0d       	add	r22, r4
    1d2c:	75 1d       	adc	r23, r5
    1d2e:	86 1d       	adc	r24, r6
    1d30:	97 1d       	adc	r25, r7
    1d32:	0e 94 37 19 	call	0x326e	; 0x326e <__udivmodsi4>
    1d36:	1d c0       	rjmp	.+58     	; 0x1d72 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    1d38:	83 e0       	ldi	r24, 0x03	; 3
    1d3a:	8c 0f       	add	r24, r28
    1d3c:	a5 01       	movw	r20, r10
    1d3e:	94 01       	movw	r18, r8
    1d40:	04 c0       	rjmp	.+8      	; 0x1d4a <usart_set_baudrate+0x19e>
    1d42:	22 0f       	add	r18, r18
    1d44:	33 1f       	adc	r19, r19
    1d46:	44 1f       	adc	r20, r20
    1d48:	55 1f       	adc	r21, r21
    1d4a:	8a 95       	dec	r24
    1d4c:	d2 f7       	brpl	.-12     	; 0x1d42 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
    1d4e:	da 01       	movw	r26, r20
    1d50:	c9 01       	movw	r24, r18
    1d52:	b6 95       	lsr	r27
    1d54:	a7 95       	ror	r26
    1d56:	97 95       	ror	r25
    1d58:	87 95       	ror	r24
    1d5a:	bc 01       	movw	r22, r24
    1d5c:	cd 01       	movw	r24, r26
    1d5e:	64 0d       	add	r22, r4
    1d60:	75 1d       	adc	r23, r5
    1d62:	86 1d       	adc	r24, r6
    1d64:	97 1d       	adc	r25, r7
    1d66:	0e 94 37 19 	call	0x326e	; 0x326e <__udivmodsi4>
    1d6a:	21 50       	subi	r18, 0x01	; 1
    1d6c:	31 09       	sbc	r19, r1
    1d6e:	41 09       	sbc	r20, r1
    1d70:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1d72:	83 2f       	mov	r24, r19
    1d74:	8f 70       	andi	r24, 0x0F	; 15
    1d76:	c2 95       	swap	r28
    1d78:	c0 7f       	andi	r28, 0xF0	; 240
    1d7a:	c8 2b       	or	r28, r24
    1d7c:	f7 01       	movw	r30, r14
    1d7e:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    1d80:	26 83       	std	Z+6, r18	; 0x06

	return true;
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	18 c0       	rjmp	.+48     	; 0x1db6 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	16 c0       	rjmp	.+44     	; 0x1db6 <usart_set_baudrate+0x20a>
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	14 c0       	rjmp	.+40     	; 0x1db6 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1d8e:	d5 01       	movw	r26, r10
    1d90:	c4 01       	movw	r24, r8
    1d92:	88 0f       	add	r24, r24
    1d94:	99 1f       	adc	r25, r25
    1d96:	aa 1f       	adc	r26, r26
    1d98:	bb 1f       	adc	r27, r27
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	aa 1f       	adc	r26, r26
    1da0:	bb 1f       	adc	r27, r27
    1da2:	88 0f       	add	r24, r24
    1da4:	99 1f       	adc	r25, r25
    1da6:	aa 1f       	adc	r26, r26
    1da8:	bb 1f       	adc	r27, r27
    1daa:	48 1a       	sub	r4, r24
    1dac:	59 0a       	sbc	r5, r25
    1dae:	6a 0a       	sbc	r6, r26
    1db0:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1db2:	c9 ef       	ldi	r28, 0xF9	; 249
    1db4:	89 cf       	rjmp	.-238    	; 0x1cc8 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    1db6:	cf 91       	pop	r28
    1db8:	1f 91       	pop	r17
    1dba:	0f 91       	pop	r16
    1dbc:	ff 90       	pop	r15
    1dbe:	ef 90       	pop	r14
    1dc0:	bf 90       	pop	r11
    1dc2:	af 90       	pop	r10
    1dc4:	9f 90       	pop	r9
    1dc6:	8f 90       	pop	r8
    1dc8:	7f 90       	pop	r7
    1dca:	6f 90       	pop	r6
    1dcc:	5f 90       	pop	r5
    1dce:	4f 90       	pop	r4
    1dd0:	08 95       	ret

00001dd2 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    1dd2:	0f 93       	push	r16
    1dd4:	1f 93       	push	r17
    1dd6:	cf 93       	push	r28
    1dd8:	df 93       	push	r29
    1dda:	ec 01       	movw	r28, r24
    1ddc:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1dde:	00 97       	sbiw	r24, 0x00	; 0
    1de0:	09 f4       	brne	.+2      	; 0x1de4 <usart_init_rs232+0x12>
    1de2:	36 c1       	rjmp	.+620    	; 0x2050 <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1de4:	80 3c       	cpi	r24, 0xC0	; 192
    1de6:	91 05       	cpc	r25, r1
    1de8:	21 f4       	brne	.+8      	; 0x1df2 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1dea:	60 e1       	ldi	r22, 0x10	; 16
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	55 de       	rcall	.-854    	; 0x1a9a <sysclk_enable_module>
    1df0:	2f c1       	rjmp	.+606    	; 0x2050 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    1df2:	c0 34       	cpi	r28, 0x40	; 64
    1df4:	84 e0       	ldi	r24, 0x04	; 4
    1df6:	d8 07       	cpc	r29, r24
    1df8:	21 f4       	brne	.+8      	; 0x1e02 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    1dfa:	68 e0       	ldi	r22, 0x08	; 8
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	4d de       	rcall	.-870    	; 0x1a9a <sysclk_enable_module>
    1e00:	27 c1       	rjmp	.+590    	; 0x2050 <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    1e02:	c1 15       	cp	r28, r1
    1e04:	e4 e0       	ldi	r30, 0x04	; 4
    1e06:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    1e08:	21 f4       	brne	.+8      	; 0x1e12 <usart_init_rs232+0x40>
    1e0a:	64 e0       	ldi	r22, 0x04	; 4
    1e0c:	80 e0       	ldi	r24, 0x00	; 0
    1e0e:	45 de       	rcall	.-886    	; 0x1a9a <sysclk_enable_module>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1e10:	1f c1       	rjmp	.+574    	; 0x2050 <usart_init_rs232+0x27e>
    1e12:	c0 38       	cpi	r28, 0x80	; 128
    1e14:	f1 e0       	ldi	r31, 0x01	; 1
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1e16:	df 07       	cpc	r29, r31
    1e18:	21 f4       	brne	.+8      	; 0x1e22 <usart_init_rs232+0x50>
    1e1a:	62 e0       	ldi	r22, 0x02	; 2
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	3d de       	rcall	.-902    	; 0x1a9a <sysclk_enable_module>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1e20:	17 c1       	rjmp	.+558    	; 0x2050 <usart_init_rs232+0x27e>
    1e22:	c1 15       	cp	r28, r1
    1e24:	81 e0       	ldi	r24, 0x01	; 1
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1e26:	d8 07       	cpc	r29, r24
    1e28:	21 f4       	brne	.+8      	; 0x1e32 <usart_init_rs232+0x60>
    1e2a:	61 e0       	ldi	r22, 0x01	; 1
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	35 de       	rcall	.-918    	; 0x1a9a <sysclk_enable_module>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1e30:	0f c1       	rjmp	.+542    	; 0x2050 <usart_init_rs232+0x27e>
    1e32:	c0 38       	cpi	r28, 0x80	; 128
    1e34:	e3 e0       	ldi	r30, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1e36:	de 07       	cpc	r29, r30
    1e38:	21 f4       	brne	.+8      	; 0x1e42 <usart_init_rs232+0x70>
    1e3a:	61 e0       	ldi	r22, 0x01	; 1
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1e3e:	2d de       	rcall	.-934    	; 0x1a9a <sysclk_enable_module>
    1e40:	07 c1       	rjmp	.+526    	; 0x2050 <usart_init_rs232+0x27e>
    1e42:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1e44:	f3 e0       	ldi	r31, 0x03	; 3
    1e46:	df 07       	cpc	r29, r31
    1e48:	21 f4       	brne	.+8      	; 0x1e52 <usart_init_rs232+0x80>
    1e4a:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1e4c:	82 e0       	ldi	r24, 0x02	; 2
    1e4e:	25 de       	rcall	.-950    	; 0x1a9a <sysclk_enable_module>
    1e50:	ff c0       	rjmp	.+510    	; 0x2050 <usart_init_rs232+0x27e>
    1e52:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1e54:	82 e0       	ldi	r24, 0x02	; 2
    1e56:	d8 07       	cpc	r29, r24
    1e58:	21 f4       	brne	.+8      	; 0x1e62 <usart_init_rs232+0x90>
    1e5a:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	1d de       	rcall	.-966    	; 0x1a9a <sysclk_enable_module>
    1e60:	f7 c0       	rjmp	.+494    	; 0x2050 <usart_init_rs232+0x27e>
    1e62:	c0 34       	cpi	r28, 0x40	; 64
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1e64:	e2 e0       	ldi	r30, 0x02	; 2
    1e66:	de 07       	cpc	r29, r30
    1e68:	21 f4       	brne	.+8      	; 0x1e72 <usart_init_rs232+0xa0>
    1e6a:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    1e6c:	82 e0       	ldi	r24, 0x02	; 2
    1e6e:	15 de       	rcall	.-982    	; 0x1a9a <sysclk_enable_module>
    1e70:	ef c0       	rjmp	.+478    	; 0x2050 <usart_init_rs232+0x27e>
    1e72:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    1e74:	f3 e0       	ldi	r31, 0x03	; 3
    1e76:	df 07       	cpc	r29, r31
    1e78:	21 f4       	brne	.+8      	; 0x1e82 <usart_init_rs232+0xb0>
    1e7a:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	0d de       	rcall	.-998    	; 0x1a9a <sysclk_enable_module>
    1e80:	e7 c0       	rjmp	.+462    	; 0x2050 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1e82:	c0 32       	cpi	r28, 0x20	; 32
    1e84:	83 e0       	ldi	r24, 0x03	; 3
    1e86:	d8 07       	cpc	r29, r24
    1e88:	21 f4       	brne	.+8      	; 0x1e92 <usart_init_rs232+0xc0>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1e8a:	64 e0       	ldi	r22, 0x04	; 4
    1e8c:	82 e0       	ldi	r24, 0x02	; 2
    1e8e:	05 de       	rcall	.-1014   	; 0x1a9a <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1e90:	df c0       	rjmp	.+446    	; 0x2050 <usart_init_rs232+0x27e>
    1e92:	c1 15       	cp	r28, r1
    1e94:	e8 e0       	ldi	r30, 0x08	; 8
    1e96:	de 07       	cpc	r29, r30
    1e98:	21 f4       	brne	.+8      	; 0x1ea2 <usart_init_rs232+0xd0>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1e9a:	61 e0       	ldi	r22, 0x01	; 1
    1e9c:	83 e0       	ldi	r24, 0x03	; 3
    1e9e:	fd dd       	rcall	.-1030   	; 0x1a9a <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1ea0:	d7 c0       	rjmp	.+430    	; 0x2050 <usart_init_rs232+0x27e>
    1ea2:	c1 15       	cp	r28, r1
    1ea4:	f9 e0       	ldi	r31, 0x09	; 9
    1ea6:	df 07       	cpc	r29, r31
    1ea8:	21 f4       	brne	.+8      	; 0x1eb2 <usart_init_rs232+0xe0>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1eaa:	61 e0       	ldi	r22, 0x01	; 1
    1eac:	84 e0       	ldi	r24, 0x04	; 4
    1eae:	f5 dd       	rcall	.-1046   	; 0x1a9a <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1eb0:	cf c0       	rjmp	.+414    	; 0x2050 <usart_init_rs232+0x27e>
    1eb2:	c1 15       	cp	r28, r1
    1eb4:	8a e0       	ldi	r24, 0x0A	; 10
    1eb6:	d8 07       	cpc	r29, r24
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1eb8:	21 f4       	brne	.+8      	; 0x1ec2 <usart_init_rs232+0xf0>
    1eba:	61 e0       	ldi	r22, 0x01	; 1
    1ebc:	85 e0       	ldi	r24, 0x05	; 5
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1ebe:	ed dd       	rcall	.-1062   	; 0x1a9a <sysclk_enable_module>
    1ec0:	c7 c0       	rjmp	.+398    	; 0x2050 <usart_init_rs232+0x27e>
    1ec2:	c1 15       	cp	r28, r1
    1ec4:	eb e0       	ldi	r30, 0x0B	; 11
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1ec6:	de 07       	cpc	r29, r30
    1ec8:	21 f4       	brne	.+8      	; 0x1ed2 <usart_init_rs232+0x100>
    1eca:	61 e0       	ldi	r22, 0x01	; 1
    1ecc:	86 e0       	ldi	r24, 0x06	; 6
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1ece:	e5 dd       	rcall	.-1078   	; 0x1a9a <sysclk_enable_module>
    1ed0:	bf c0       	rjmp	.+382    	; 0x2050 <usart_init_rs232+0x27e>
    1ed2:	c0 34       	cpi	r28, 0x40	; 64
    1ed4:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1ed6:	df 07       	cpc	r29, r31
    1ed8:	21 f4       	brne	.+8      	; 0x1ee2 <usart_init_rs232+0x110>
    1eda:	62 e0       	ldi	r22, 0x02	; 2
    1edc:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1ede:	dd dd       	rcall	.-1094   	; 0x1a9a <sysclk_enable_module>
    1ee0:	b7 c0       	rjmp	.+366    	; 0x2050 <usart_init_rs232+0x27e>
    1ee2:	c0 34       	cpi	r28, 0x40	; 64
    1ee4:	89 e0       	ldi	r24, 0x09	; 9
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1ee6:	d8 07       	cpc	r29, r24
    1ee8:	21 f4       	brne	.+8      	; 0x1ef2 <usart_init_rs232+0x120>
    1eea:	62 e0       	ldi	r22, 0x02	; 2
    1eec:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1eee:	d5 dd       	rcall	.-1110   	; 0x1a9a <sysclk_enable_module>
    1ef0:	af c0       	rjmp	.+350    	; 0x2050 <usart_init_rs232+0x27e>
    1ef2:	c0 34       	cpi	r28, 0x40	; 64
    1ef4:	ea e0       	ldi	r30, 0x0A	; 10
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    1ef6:	de 07       	cpc	r29, r30
    1ef8:	21 f4       	brne	.+8      	; 0x1f02 <usart_init_rs232+0x130>
    1efa:	62 e0       	ldi	r22, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    1efc:	85 e0       	ldi	r24, 0x05	; 5
    1efe:	cd dd       	rcall	.-1126   	; 0x1a9a <sysclk_enable_module>
    1f00:	a7 c0       	rjmp	.+334    	; 0x2050 <usart_init_rs232+0x27e>
    1f02:	c0 34       	cpi	r28, 0x40	; 64
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1f04:	fb e0       	ldi	r31, 0x0B	; 11
    1f06:	df 07       	cpc	r29, r31
    1f08:	21 f4       	brne	.+8      	; 0x1f12 <usart_init_rs232+0x140>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1f0a:	62 e0       	ldi	r22, 0x02	; 2
    1f0c:	86 e0       	ldi	r24, 0x06	; 6
    1f0e:	c5 dd       	rcall	.-1142   	; 0x1a9a <sysclk_enable_module>
    1f10:	9f c0       	rjmp	.+318    	; 0x2050 <usart_init_rs232+0x27e>
    1f12:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1f14:	88 e0       	ldi	r24, 0x08	; 8
    1f16:	d8 07       	cpc	r29, r24
    1f18:	21 f4       	brne	.+8      	; 0x1f22 <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1f1a:	64 e0       	ldi	r22, 0x04	; 4
    1f1c:	83 e0       	ldi	r24, 0x03	; 3
    1f1e:	bd dd       	rcall	.-1158   	; 0x1a9a <sysclk_enable_module>
    1f20:	97 c0       	rjmp	.+302    	; 0x2050 <usart_init_rs232+0x27e>
    1f22:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1f24:	e9 e0       	ldi	r30, 0x09	; 9
    1f26:	de 07       	cpc	r29, r30
    1f28:	21 f4       	brne	.+8      	; 0x1f32 <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1f2a:	64 e0       	ldi	r22, 0x04	; 4
    1f2c:	84 e0       	ldi	r24, 0x04	; 4
    1f2e:	b5 dd       	rcall	.-1174   	; 0x1a9a <sysclk_enable_module>
    1f30:	8f c0       	rjmp	.+286    	; 0x2050 <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1f32:	c0 39       	cpi	r28, 0x90	; 144
    1f34:	fa e0       	ldi	r31, 0x0A	; 10
    1f36:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1f38:	21 f4       	brne	.+8      	; 0x1f42 <usart_init_rs232+0x170>
    1f3a:	64 e0       	ldi	r22, 0x04	; 4
    1f3c:	85 e0       	ldi	r24, 0x05	; 5
    1f3e:	ad dd       	rcall	.-1190   	; 0x1a9a <sysclk_enable_module>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1f40:	87 c0       	rjmp	.+270    	; 0x2050 <usart_init_rs232+0x27e>
    1f42:	c0 39       	cpi	r28, 0x90	; 144
    1f44:	8b e0       	ldi	r24, 0x0B	; 11
    1f46:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1f48:	21 f4       	brne	.+8      	; 0x1f52 <usart_init_rs232+0x180>
    1f4a:	64 e0       	ldi	r22, 0x04	; 4
    1f4c:	86 e0       	ldi	r24, 0x06	; 6
    1f4e:	a5 dd       	rcall	.-1206   	; 0x1a9a <sysclk_enable_module>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1f50:	7f c0       	rjmp	.+254    	; 0x2050 <usart_init_rs232+0x27e>
    1f52:	c0 3c       	cpi	r28, 0xC0	; 192
    1f54:	e8 e0       	ldi	r30, 0x08	; 8
    1f56:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1f58:	21 f4       	brne	.+8      	; 0x1f62 <usart_init_rs232+0x190>
    1f5a:	68 e0       	ldi	r22, 0x08	; 8
    1f5c:	83 e0       	ldi	r24, 0x03	; 3
    1f5e:	9d dd       	rcall	.-1222   	; 0x1a9a <sysclk_enable_module>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    1f60:	77 c0       	rjmp	.+238    	; 0x2050 <usart_init_rs232+0x27e>
    1f62:	c0 3c       	cpi	r28, 0xC0	; 192
    1f64:	f9 e0       	ldi	r31, 0x09	; 9
    1f66:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    1f68:	21 f4       	brne	.+8      	; 0x1f72 <usart_init_rs232+0x1a0>
    1f6a:	68 e0       	ldi	r22, 0x08	; 8
    1f6c:	84 e0       	ldi	r24, 0x04	; 4
    1f6e:	95 dd       	rcall	.-1238   	; 0x1a9a <sysclk_enable_module>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    1f70:	6f c0       	rjmp	.+222    	; 0x2050 <usart_init_rs232+0x27e>
    1f72:	c0 3c       	cpi	r28, 0xC0	; 192
    1f74:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    1f76:	d8 07       	cpc	r29, r24
    1f78:	21 f4       	brne	.+8      	; 0x1f82 <usart_init_rs232+0x1b0>
    1f7a:	68 e0       	ldi	r22, 0x08	; 8
    1f7c:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1f7e:	8d dd       	rcall	.-1254   	; 0x1a9a <sysclk_enable_module>
    1f80:	67 c0       	rjmp	.+206    	; 0x2050 <usart_init_rs232+0x27e>
    1f82:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1f84:	eb e0       	ldi	r30, 0x0B	; 11
    1f86:	de 07       	cpc	r29, r30
    1f88:	21 f4       	brne	.+8      	; 0x1f92 <usart_init_rs232+0x1c0>
    1f8a:	68 e0       	ldi	r22, 0x08	; 8
    1f8c:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1f8e:	85 dd       	rcall	.-1270   	; 0x1a9a <sysclk_enable_module>
    1f90:	5f c0       	rjmp	.+190    	; 0x2050 <usart_init_rs232+0x27e>
    1f92:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1f94:	f8 e0       	ldi	r31, 0x08	; 8
    1f96:	df 07       	cpc	r29, r31
    1f98:	21 f4       	brne	.+8      	; 0x1fa2 <usart_init_rs232+0x1d0>
    1f9a:	60 e1       	ldi	r22, 0x10	; 16
    1f9c:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1f9e:	7d dd       	rcall	.-1286   	; 0x1a9a <sysclk_enable_module>
    1fa0:	57 c0       	rjmp	.+174    	; 0x2050 <usart_init_rs232+0x27e>
    1fa2:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1fa4:	89 e0       	ldi	r24, 0x09	; 9
    1fa6:	d8 07       	cpc	r29, r24
    1fa8:	21 f4       	brne	.+8      	; 0x1fb2 <usart_init_rs232+0x1e0>
    1faa:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1fac:	84 e0       	ldi	r24, 0x04	; 4
    1fae:	75 dd       	rcall	.-1302   	; 0x1a9a <sysclk_enable_module>
    1fb0:	4f c0       	rjmp	.+158    	; 0x2050 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1fb2:	c0 3a       	cpi	r28, 0xA0	; 160
    1fb4:	ea e0       	ldi	r30, 0x0A	; 10
    1fb6:	de 07       	cpc	r29, r30
    1fb8:	21 f4       	brne	.+8      	; 0x1fc2 <usart_init_rs232+0x1f0>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1fba:	60 e1       	ldi	r22, 0x10	; 16
    1fbc:	85 e0       	ldi	r24, 0x05	; 5
    1fbe:	6d dd       	rcall	.-1318   	; 0x1a9a <sysclk_enable_module>
    1fc0:	47 c0       	rjmp	.+142    	; 0x2050 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1fc2:	c0 3a       	cpi	r28, 0xA0	; 160
    1fc4:	fb e0       	ldi	r31, 0x0B	; 11
    1fc6:	df 07       	cpc	r29, r31
    1fc8:	21 f4       	brne	.+8      	; 0x1fd2 <usart_init_rs232+0x200>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1fca:	60 e1       	ldi	r22, 0x10	; 16
    1fcc:	86 e0       	ldi	r24, 0x06	; 6
    1fce:	65 dd       	rcall	.-1334   	; 0x1a9a <sysclk_enable_module>
    1fd0:	3f c0       	rjmp	.+126    	; 0x2050 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1fd2:	c0 3b       	cpi	r28, 0xB0	; 176
    1fd4:	88 e0       	ldi	r24, 0x08	; 8
    1fd6:	d8 07       	cpc	r29, r24
    1fd8:	21 f4       	brne	.+8      	; 0x1fe2 <usart_init_rs232+0x210>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    1fda:	60 e2       	ldi	r22, 0x20	; 32
    1fdc:	83 e0       	ldi	r24, 0x03	; 3
    1fde:	5d dd       	rcall	.-1350   	; 0x1a9a <sysclk_enable_module>
    1fe0:	37 c0       	rjmp	.+110    	; 0x2050 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    1fe2:	c0 3b       	cpi	r28, 0xB0	; 176
    1fe4:	e9 e0       	ldi	r30, 0x09	; 9
    1fe6:	de 07       	cpc	r29, r30
    1fe8:	21 f4       	brne	.+8      	; 0x1ff2 <usart_init_rs232+0x220>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    1fea:	60 e2       	ldi	r22, 0x20	; 32
    1fec:	84 e0       	ldi	r24, 0x04	; 4
    1fee:	55 dd       	rcall	.-1366   	; 0x1a9a <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    1ff0:	2f c0       	rjmp	.+94     	; 0x2050 <usart_init_rs232+0x27e>
    1ff2:	c0 3b       	cpi	r28, 0xB0	; 176
    1ff4:	fa e0       	ldi	r31, 0x0A	; 10
    1ff6:	df 07       	cpc	r29, r31
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1ff8:	21 f4       	brne	.+8      	; 0x2002 <usart_init_rs232+0x230>
    1ffa:	60 e2       	ldi	r22, 0x20	; 32
    1ffc:	85 e0       	ldi	r24, 0x05	; 5
    1ffe:	4d dd       	rcall	.-1382   	; 0x1a9a <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    2000:	27 c0       	rjmp	.+78     	; 0x2050 <usart_init_rs232+0x27e>
    2002:	c0 3b       	cpi	r28, 0xB0	; 176
    2004:	8b e0       	ldi	r24, 0x0B	; 11
    2006:	d8 07       	cpc	r29, r24
    2008:	21 f4       	brne	.+8      	; 0x2012 <usart_init_rs232+0x240>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    200a:	60 e2       	ldi	r22, 0x20	; 32
    200c:	86 e0       	ldi	r24, 0x06	; 6
    200e:	45 dd       	rcall	.-1398   	; 0x1a9a <sysclk_enable_module>
    2010:	1f c0       	rjmp	.+62     	; 0x2050 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    2012:	c0 38       	cpi	r28, 0x80	; 128
    2014:	e4 e0       	ldi	r30, 0x04	; 4
    2016:	de 07       	cpc	r29, r30
    2018:	21 f4       	brne	.+8      	; 0x2022 <usart_init_rs232+0x250>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    201a:	60 e4       	ldi	r22, 0x40	; 64
    201c:	83 e0       	ldi	r24, 0x03	; 3
    201e:	3d dd       	rcall	.-1414   	; 0x1a9a <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    2020:	17 c0       	rjmp	.+46     	; 0x2050 <usart_init_rs232+0x27e>
    2022:	c0 39       	cpi	r28, 0x90	; 144
    2024:	f4 e0       	ldi	r31, 0x04	; 4
    2026:	df 07       	cpc	r29, r31
    2028:	21 f4       	brne	.+8      	; 0x2032 <usart_init_rs232+0x260>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    202a:	60 e4       	ldi	r22, 0x40	; 64
    202c:	84 e0       	ldi	r24, 0x04	; 4
    202e:	35 dd       	rcall	.-1430   	; 0x1a9a <sysclk_enable_module>
    2030:	0f c0       	rjmp	.+30     	; 0x2050 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    2032:	c0 3a       	cpi	r28, 0xA0	; 160
    2034:	84 e0       	ldi	r24, 0x04	; 4
    2036:	d8 07       	cpc	r29, r24
    2038:	21 f4       	brne	.+8      	; 0x2042 <usart_init_rs232+0x270>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    203a:	60 e4       	ldi	r22, 0x40	; 64
    203c:	85 e0       	ldi	r24, 0x05	; 5
    203e:	2d dd       	rcall	.-1446   	; 0x1a9a <sysclk_enable_module>
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    2040:	07 c0       	rjmp	.+14     	; 0x2050 <usart_init_rs232+0x27e>
    2042:	c0 3b       	cpi	r28, 0xB0	; 176
    2044:	e4 e0       	ldi	r30, 0x04	; 4
    2046:	de 07       	cpc	r29, r30
    2048:	19 f4       	brne	.+6      	; 0x2050 <usart_init_rs232+0x27e>
    204a:	60 e4       	ldi	r22, 0x40	; 64
    204c:	86 e0       	ldi	r24, 0x06	; 6
    204e:	25 dd       	rcall	.-1462   	; 0x1a9a <sysclk_enable_module>
    2050:	8d 81       	ldd	r24, Y+5	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    2052:	8f 73       	andi	r24, 0x3F	; 63
    2054:	8d 83       	std	Y+5, r24	; 0x05
    2056:	f8 01       	movw	r30, r16
    2058:	95 81       	ldd	r25, Z+5	; 0x05
    205a:	84 81       	ldd	r24, Z+4	; 0x04
    205c:	89 2b       	or	r24, r25
    205e:	96 81       	ldd	r25, Z+6	; 0x06
    2060:	91 11       	cpse	r25, r1
    2062:	98 e0       	ldi	r25, 0x08	; 8
    2064:	89 2b       	or	r24, r25
    2066:	8d 83       	std	Y+5, r24	; 0x05
    2068:	f8 01       	movw	r30, r16
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    206a:	40 81       	ld	r20, Z
    206c:	51 81       	ldd	r21, Z+1	; 0x01
    206e:	62 81       	ldd	r22, Z+2	; 0x02
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    2070:	73 81       	ldd	r23, Z+3	; 0x03
    2072:	00 e8       	ldi	r16, 0x80	; 128
    2074:	14 e8       	ldi	r17, 0x84	; 132
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    2076:	2e e1       	ldi	r18, 0x1E	; 30
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	ce 01       	movw	r24, r28
    207c:	97 dd       	rcall	.-1234   	; 0x1bac <usart_set_baudrate>
    207e:	9c 81       	ldd	r25, Y+4	; 0x04
    2080:	98 60       	ori	r25, 0x08	; 8
    2082:	9c 83       	std	Y+4, r25	; 0x04
    2084:	9c 81       	ldd	r25, Y+4	; 0x04
    2086:	90 61       	ori	r25, 0x10	; 16
    2088:	9c 83       	std	Y+4, r25	; 0x04
    208a:	df 91       	pop	r29
    208c:	cf 91       	pop	r28
    208e:	1f 91       	pop	r17
    2090:	0f 91       	pop	r16
    2092:	08 95       	ret

00002094 <__portable_avr_delay_cycles>:
		case 5: port.PIN5CTRL |= PORT_OPC_PULLDOWN_gc;
		case 6: port.PIN6CTRL |= PORT_OPC_PULLDOWN_gc;
		case 7: port.PIN7CTRL |= PORT_OPC_PULLDOWN_gc;
		
	}
}
    2094:	04 c0       	rjmp	.+8      	; 0x209e <__portable_avr_delay_cycles+0xa>
    2096:	61 50       	subi	r22, 0x01	; 1
    2098:	71 09       	sbc	r23, r1
    209a:	81 09       	sbc	r24, r1
    209c:	91 09       	sbc	r25, r1
    209e:	61 15       	cp	r22, r1
    20a0:	71 05       	cpc	r23, r1
    20a2:	81 05       	cpc	r24, r1
    20a4:	91 05       	cpc	r25, r1
    20a6:	b9 f7       	brne	.-18     	; 0x2096 <__portable_avr_delay_cycles+0x2>
    20a8:	08 95       	ret

000020aa <usart_tx_at>:
    20aa:	0f 93       	push	r16
    20ac:	1f 93       	push	r17
    20ae:	cf 93       	push	r28
    20b0:	df 93       	push	r29
    20b2:	eb 01       	movw	r28, r22
    20b4:	68 81       	ld	r22, Y
    20b6:	66 23       	and	r22, r22
    20b8:	39 f0       	breq	.+14     	; 0x20c8 <usart_tx_at+0x1e>
    20ba:	8c 01       	movw	r16, r24
    20bc:	21 96       	adiw	r28, 0x01	; 1
    20be:	c8 01       	movw	r24, r16
    20c0:	6d dd       	rcall	.-1318   	; 0x1b9c <usart_putchar>
    20c2:	69 91       	ld	r22, Y+
    20c4:	61 11       	cpse	r22, r1
    20c6:	fb cf       	rjmp	.-10     	; 0x20be <usart_tx_at+0x14>
    20c8:	df 91       	pop	r29
    20ca:	cf 91       	pop	r28
    20cc:	1f 91       	pop	r17
    20ce:	0f 91       	pop	r16
    20d0:	08 95       	ret

000020d2 <usart_rx_at>:
    20d2:	fc 01       	movw	r30, r24
    20d4:	88 ee       	ldi	r24, 0xE8	; 232
    20d6:	93 e0       	ldi	r25, 0x03	; 3
    20d8:	68 9f       	mul	r22, r24
    20da:	a0 01       	movw	r20, r0
    20dc:	69 9f       	mul	r22, r25
    20de:	50 0d       	add	r21, r0
    20e0:	78 9f       	mul	r23, r24
    20e2:	50 0d       	add	r21, r0
    20e4:	11 24       	eor	r1, r1
    20e6:	60 e0       	ldi	r22, 0x00	; 0
    20e8:	70 e0       	ldi	r23, 0x00	; 0
    20ea:	81 81       	ldd	r24, Z+1	; 0x01
    20ec:	88 23       	and	r24, r24
    20ee:	cc f0       	brlt	.+50     	; 0x2122 <usart_rx_at+0x50>
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	41 15       	cp	r20, r1
    20f4:	51 05       	cpc	r21, r1
    20f6:	61 05       	cpc	r22, r1
    20f8:	71 05       	cpc	r23, r1
    20fa:	09 f4       	brne	.+2      	; 0x20fe <usart_rx_at+0x2c>
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	88 23       	and	r24, r24
    2100:	81 f0       	breq	.+32     	; 0x2122 <usart_rx_at+0x50>
    2102:	41 50       	subi	r20, 0x01	; 1
    2104:	51 09       	sbc	r21, r1
    2106:	61 09       	sbc	r22, r1
    2108:	71 09       	sbc	r23, r1
    210a:	91 81       	ldd	r25, Z+1	; 0x01
    210c:	99 23       	and	r25, r25
    210e:	4c f0       	brlt	.+18     	; 0x2122 <usart_rx_at+0x50>
    2110:	91 e0       	ldi	r25, 0x01	; 1
    2112:	41 15       	cp	r20, r1
    2114:	51 05       	cpc	r21, r1
    2116:	61 05       	cpc	r22, r1
    2118:	71 05       	cpc	r23, r1
    211a:	09 f4       	brne	.+2      	; 0x211e <usart_rx_at+0x4c>
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	91 11       	cpse	r25, r1
    2120:	f0 cf       	rjmp	.-32     	; 0x2102 <usart_rx_at+0x30>
    2122:	45 2b       	or	r20, r21
    2124:	46 2b       	or	r20, r22
    2126:	47 2b       	or	r20, r23
    2128:	19 f4       	brne	.+6      	; 0x2130 <usart_rx_at+0x5e>
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	80 93 70 22 	sts	0x2270, r24	; 0x802270 <status_at_timeout>
    2130:	80 81       	ld	r24, Z
    2132:	08 95       	ret

00002134 <at_response>:
    2134:	af 92       	push	r10
    2136:	bf 92       	push	r11
    2138:	cf 92       	push	r12
    213a:	df 92       	push	r13
    213c:	ef 92       	push	r14
    213e:	ff 92       	push	r15
    2140:	0f 93       	push	r16
    2142:	1f 93       	push	r17
    2144:	cf 93       	push	r28
    2146:	8c 01       	movw	r16, r24
    2148:	10 92 70 22 	sts	0x2270, r1	; 0x802270 <status_at_timeout>
    214c:	90 91 70 22 	lds	r25, 0x2270	; 0x802270 <status_at_timeout>
    2150:	91 11       	cpse	r25, r1
    2152:	19 c0       	rjmp	.+50     	; 0x2186 <at_response+0x52>
    2154:	6a 01       	movw	r12, r20
    2156:	7b 01       	movw	r14, r22
    2158:	c0 e0       	ldi	r28, 0x00	; 0
    215a:	56 01       	movw	r10, r12
    215c:	ac 0e       	add	r10, r28
    215e:	b1 1c       	adc	r11, r1
    2160:	b7 01       	movw	r22, r14
    2162:	c8 01       	movw	r24, r16
    2164:	b6 df       	rcall	.-148    	; 0x20d2 <usart_rx_at>
    2166:	f5 01       	movw	r30, r10
    2168:	80 83       	st	Z, r24
    216a:	cf 5f       	subi	r28, 0xFF	; 255
    216c:	20 91 70 22 	lds	r18, 0x2270	; 0x802270 <status_at_timeout>
    2170:	91 e0       	ldi	r25, 0x01	; 1
    2172:	21 11       	cpse	r18, r1
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	99 23       	and	r25, r25
    2178:	31 f0       	breq	.+12     	; 0x2186 <at_response+0x52>
    217a:	91 e0       	ldi	r25, 0x01	; 1
    217c:	c4 36       	cpi	r28, 0x64	; 100
    217e:	08 f0       	brcs	.+2      	; 0x2182 <at_response+0x4e>
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	91 11       	cpse	r25, r1
    2184:	ea cf       	rjmp	.-44     	; 0x215a <at_response+0x26>
    2186:	cf 91       	pop	r28
    2188:	1f 91       	pop	r17
    218a:	0f 91       	pop	r16
    218c:	ff 90       	pop	r15
    218e:	ef 90       	pop	r14
    2190:	df 90       	pop	r13
    2192:	cf 90       	pop	r12
    2194:	bf 90       	pop	r11
    2196:	af 90       	pop	r10
    2198:	08 95       	ret

0000219a <led_blink>:
    219a:	af 92       	push	r10
    219c:	bf 92       	push	r11
    219e:	cf 92       	push	r12
    21a0:	df 92       	push	r13
    21a2:	ef 92       	push	r14
    21a4:	ff 92       	push	r15
    21a6:	0f 93       	push	r16
    21a8:	1f 93       	push	r17
    21aa:	cf 93       	push	r28
    21ac:	df 93       	push	r29
    21ae:	e0 ec       	ldi	r30, 0xC0	; 192
    21b0:	f7 e0       	ldi	r31, 0x07	; 7
    21b2:	24 81       	ldd	r18, Z+4	; 0x04
    21b4:	27 7f       	andi	r18, 0xF7	; 247
    21b6:	24 83       	std	Z+4, r18	; 0x04
    21b8:	00 97       	sbiw	r24, 0x00	; 0
    21ba:	09 f4       	brne	.+2      	; 0x21be <led_blink+0x24>
    21bc:	45 c0       	rjmp	.+138    	; 0x2248 <led_blink+0xae>
    21be:	68 94       	set
    21c0:	aa 24       	eor	r10, r10
    21c2:	a7 f8       	bld	r10, 7
    21c4:	0f 2e       	mov	r0, r31
    21c6:	f4 e8       	ldi	r31, 0x84	; 132
    21c8:	bf 2e       	mov	r11, r31
    21ca:	f0 2d       	mov	r31, r0
    21cc:	0f 2e       	mov	r0, r31
    21ce:	fe e1       	ldi	r31, 0x1E	; 30
    21d0:	cf 2e       	mov	r12, r31
    21d2:	f0 2d       	mov	r31, r0
    21d4:	d1 2c       	mov	r13, r1
    21d6:	e1 2c       	mov	r14, r1
    21d8:	f1 2c       	mov	r15, r1
    21da:	00 e0       	ldi	r16, 0x00	; 0
    21dc:	10 e0       	ldi	r17, 0x00	; 0
    21de:	28 2f       	mov	r18, r24
    21e0:	39 2f       	mov	r19, r25
    21e2:	40 e0       	ldi	r20, 0x00	; 0
    21e4:	50 e0       	ldi	r21, 0x00	; 0
    21e6:	60 e0       	ldi	r22, 0x00	; 0
    21e8:	70 e0       	ldi	r23, 0x00	; 0
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	0e 94 59 19 	call	0x32b2	; 0x32b2 <__muldi3>
    21f2:	0f 2e       	mov	r0, r31
    21f4:	f6 e0       	ldi	r31, 0x06	; 6
    21f6:	af 2e       	mov	r10, r31
    21f8:	f0 2d       	mov	r31, r0
    21fa:	b1 2c       	mov	r11, r1
    21fc:	c1 2c       	mov	r12, r1
    21fe:	0e 94 ac 19 	call	0x3358	; 0x3358 <__udivdi3>
    2202:	29 51       	subi	r18, 0x19	; 25
    2204:	3c 4f       	sbci	r19, 0xFC	; 252
    2206:	4f 4f       	sbci	r20, 0xFF	; 255
    2208:	5f 4f       	sbci	r21, 0xFF	; 255
    220a:	6f 4f       	sbci	r22, 0xFF	; 255
    220c:	7f 4f       	sbci	r23, 0xFF	; 255
    220e:	8f 4f       	sbci	r24, 0xFF	; 255
    2210:	9f 4f       	sbci	r25, 0xFF	; 255
    2212:	7a d7       	rcall	.+3828   	; 0x3108 <__floatundisf>
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	4a e7       	ldi	r20, 0x7A	; 122
    221a:	54 e4       	ldi	r21, 0x44	; 68
    221c:	d3 d6       	rcall	.+3494   	; 0x2fc4 <__divsf3>
    221e:	3f d7       	rcall	.+3710   	; 0x309e <__fixunssfdi>
    2220:	02 2f       	mov	r16, r18
    2222:	13 2f       	mov	r17, r19
    2224:	d4 2f       	mov	r29, r20
    2226:	c5 2f       	mov	r28, r21
    2228:	62 2f       	mov	r22, r18
    222a:	71 2f       	mov	r23, r17
    222c:	8d 2f       	mov	r24, r29
    222e:	9c 2f       	mov	r25, r28
    2230:	31 df       	rcall	.-414    	; 0x2094 <__portable_avr_delay_cycles>
    2232:	e0 ec       	ldi	r30, 0xC0	; 192
    2234:	f7 e0       	ldi	r31, 0x07	; 7
    2236:	84 81       	ldd	r24, Z+4	; 0x04
    2238:	88 60       	ori	r24, 0x08	; 8
    223a:	84 83       	std	Z+4, r24	; 0x04
    223c:	60 2f       	mov	r22, r16
    223e:	71 2f       	mov	r23, r17
    2240:	8d 2f       	mov	r24, r29
    2242:	9c 2f       	mov	r25, r28
    2244:	27 df       	rcall	.-434    	; 0x2094 <__portable_avr_delay_cycles>
    2246:	0f c0       	rjmp	.+30     	; 0x2266 <led_blink+0xcc>
    2248:	61 e0       	ldi	r22, 0x01	; 1
    224a:	70 e0       	ldi	r23, 0x00	; 0
    224c:	80 e0       	ldi	r24, 0x00	; 0
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	21 df       	rcall	.-446    	; 0x2094 <__portable_avr_delay_cycles>
    2252:	e0 ec       	ldi	r30, 0xC0	; 192
    2254:	f7 e0       	ldi	r31, 0x07	; 7
    2256:	84 81       	ldd	r24, Z+4	; 0x04
    2258:	88 60       	ori	r24, 0x08	; 8
    225a:	84 83       	std	Z+4, r24	; 0x04
    225c:	61 e0       	ldi	r22, 0x01	; 1
    225e:	70 e0       	ldi	r23, 0x00	; 0
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	17 df       	rcall	.-466    	; 0x2094 <__portable_avr_delay_cycles>
    2266:	df 91       	pop	r29
    2268:	cf 91       	pop	r28
    226a:	1f 91       	pop	r17
    226c:	0f 91       	pop	r16
    226e:	ff 90       	pop	r15
    2270:	ef 90       	pop	r14
    2272:	df 90       	pop	r13
    2274:	cf 90       	pop	r12
    2276:	bf 90       	pop	r11
    2278:	af 90       	pop	r10
    227a:	08 95       	ret

0000227c <rtc_init_period>:
    227c:	0f 93       	push	r16
    227e:	1f 93       	push	r17
    2280:	cf 93       	push	r28
    2282:	df 93       	push	r29
    2284:	1f 92       	push	r1
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62
    228a:	8c 01       	movw	r16, r24
    228c:	64 e0       	ldi	r22, 0x04	; 4
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	04 dc       	rcall	.-2040   	; 0x1a9a <sysclk_enable_module>
    2292:	e0 e0       	ldi	r30, 0x00	; 0
    2294:	f4 e0       	ldi	r31, 0x04	; 4
    2296:	02 87       	std	Z+10, r16	; 0x0a
    2298:	13 87       	std	Z+11, r17	; 0x0b
    229a:	10 86       	std	Z+8, r1	; 0x08
    229c:	11 86       	std	Z+9, r1	; 0x09
    229e:	80 91 78 22 	lds	r24, 0x2278	; 0x802278 <sleepmgr_locks+0x3>
    22a2:	8f 3f       	cpi	r24, 0xFF	; 255
    22a4:	09 f4       	brne	.+2      	; 0x22a8 <rtc_init_period+0x2c>
    22a6:	ff cf       	rjmp	.-2      	; 0x22a6 <rtc_init_period+0x2a>
    22a8:	8f b7       	in	r24, 0x3f	; 63
    22aa:	89 83       	std	Y+1, r24	; 0x01
    22ac:	f8 94       	cli
    22ae:	99 81       	ldd	r25, Y+1	; 0x01
    22b0:	e5 e7       	ldi	r30, 0x75	; 117
    22b2:	f2 e2       	ldi	r31, 0x22	; 34
    22b4:	83 81       	ldd	r24, Z+3	; 0x03
    22b6:	8f 5f       	subi	r24, 0xFF	; 255
    22b8:	83 83       	std	Z+3, r24	; 0x03
    22ba:	9f bf       	out	0x3f, r25	; 63
    22bc:	e0 e0       	ldi	r30, 0x00	; 0
    22be:	f4 e0       	ldi	r31, 0x04	; 4
    22c0:	82 81       	ldd	r24, Z+2	; 0x02
    22c2:	81 60       	ori	r24, 0x01	; 1
    22c4:	82 83       	std	Z+2, r24	; 0x02
    22c6:	87 e0       	ldi	r24, 0x07	; 7
    22c8:	80 83       	st	Z, r24
    22ca:	0f 90       	pop	r0
    22cc:	df 91       	pop	r29
    22ce:	cf 91       	pop	r28
    22d0:	1f 91       	pop	r17
    22d2:	0f 91       	pop	r16
    22d4:	08 95       	ret

000022d6 <adc_result_single>:
    22d6:	cf 93       	push	r28
    22d8:	df 93       	push	r29
    22da:	1f 92       	push	r1
    22dc:	cd b7       	in	r28, 0x3d	; 61
    22de:	de b7       	in	r29, 0x3e	; 62
    22e0:	fc 01       	movw	r30, r24
    22e2:	8f b7       	in	r24, 0x3f	; 63
    22e4:	89 83       	std	Y+1, r24	; 0x01
    22e6:	f8 94       	cli
    22e8:	99 81       	ldd	r25, Y+1	; 0x01
    22ea:	80 81       	ld	r24, Z
    22ec:	26 2f       	mov	r18, r22
    22ee:	22 0f       	add	r18, r18
    22f0:	22 0f       	add	r18, r18
    22f2:	82 2b       	or	r24, r18
    22f4:	80 83       	st	Z, r24
    22f6:	9f bf       	out	0x3f, r25	; 63
    22f8:	96 81       	ldd	r25, Z+6	; 0x06
    22fa:	96 23       	and	r25, r22
    22fc:	69 13       	cpse	r22, r25
    22fe:	fc cf       	rjmp	.-8      	; 0x22f8 <adc_result_single+0x22>
    2300:	66 83       	std	Z+6, r22	; 0x06
    2302:	86 2f       	mov	r24, r22
    2304:	83 70       	andi	r24, 0x03	; 3
    2306:	21 f4       	brne	.+8      	; 0x2310 <adc_result_single+0x3a>
    2308:	66 95       	lsr	r22
    230a:	66 95       	lsr	r22
    230c:	82 e0       	ldi	r24, 0x02	; 2
    230e:	01 c0       	rjmp	.+2      	; 0x2312 <adc_result_single+0x3c>
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	60 ff       	sbrs	r22, 0
    2314:	8f 5f       	subi	r24, 0xFF	; 255
    2316:	b0 96       	adiw	r30, 0x20	; 32
    2318:	98 e0       	ldi	r25, 0x08	; 8
    231a:	89 9f       	mul	r24, r25
    231c:	e0 0d       	add	r30, r0
    231e:	f1 1d       	adc	r31, r1
    2320:	11 24       	eor	r1, r1
    2322:	84 81       	ldd	r24, Z+4	; 0x04
    2324:	95 81       	ldd	r25, Z+5	; 0x05
    2326:	0f 90       	pop	r0
    2328:	df 91       	pop	r29
    232a:	cf 91       	pop	r28
    232c:	08 95       	ret

0000232e <adc_result_average>:
    232e:	cf 92       	push	r12
    2330:	df 92       	push	r13
    2332:	ef 92       	push	r14
    2334:	ff 92       	push	r15
    2336:	0f 93       	push	r16
    2338:	1f 93       	push	r17
    233a:	cf 93       	push	r28
    233c:	df 93       	push	r29
    233e:	1f 92       	push	r1
    2340:	cd b7       	in	r28, 0x3d	; 61
    2342:	de b7       	in	r29, 0x3e	; 62
    2344:	28 2f       	mov	r18, r24
    2346:	0d b7       	in	r16, 0x3d	; 61
    2348:	1e b7       	in	r17, 0x3e	; 62
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	88 0f       	add	r24, r24
    234e:	99 1f       	adc	r25, r25
    2350:	4d b7       	in	r20, 0x3d	; 61
    2352:	5e b7       	in	r21, 0x3e	; 62
    2354:	48 1b       	sub	r20, r24
    2356:	59 0b       	sbc	r21, r25
    2358:	4d bf       	out	0x3d, r20	; 61
    235a:	5e bf       	out	0x3e, r21	; 62
    235c:	ad b7       	in	r26, 0x3d	; 61
    235e:	be b7       	in	r27, 0x3e	; 62
    2360:	11 96       	adiw	r26, 0x01	; 1
    2362:	22 23       	and	r18, r18
    2364:	f9 f0       	breq	.+62     	; 0x23a4 <adc_result_average+0x76>
    2366:	c1 2c       	mov	r12, r1
    2368:	d1 2c       	mov	r13, r1
    236a:	76 01       	movw	r14, r12
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	e0 e0       	ldi	r30, 0x00	; 0
    2370:	f2 e0       	ldi	r31, 0x02	; 2
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	9f b7       	in	r25, 0x3f	; 63
    2376:	99 83       	std	Y+1, r25	; 0x01
    2378:	f8 94       	cli
    237a:	49 81       	ldd	r20, Y+1	; 0x01
    237c:	90 81       	ld	r25, Z
    237e:	94 60       	ori	r25, 0x04	; 4
    2380:	90 83       	st	Z, r25
    2382:	4f bf       	out	0x3f, r20	; 63
    2384:	96 81       	ldd	r25, Z+6	; 0x06
    2386:	90 ff       	sbrs	r25, 0
    2388:	fd cf       	rjmp	.-6      	; 0x2384 <adc_result_average+0x56>
    238a:	86 83       	std	Z+6, r24	; 0x06
    238c:	44 a1       	ldd	r20, Z+36	; 0x24
    238e:	55 a1       	ldd	r21, Z+37	; 0x25
    2390:	4d 93       	st	X+, r20
    2392:	5d 93       	st	X+, r21
    2394:	c4 0e       	add	r12, r20
    2396:	d5 1e       	adc	r13, r21
    2398:	e1 1c       	adc	r14, r1
    239a:	f1 1c       	adc	r15, r1
    239c:	3f 5f       	subi	r19, 0xFF	; 255
    239e:	23 13       	cpse	r18, r19
    23a0:	e9 cf       	rjmp	.-46     	; 0x2374 <adc_result_average+0x46>
    23a2:	03 c0       	rjmp	.+6      	; 0x23aa <adc_result_average+0x7c>
    23a4:	c1 2c       	mov	r12, r1
    23a6:	d1 2c       	mov	r13, r1
    23a8:	76 01       	movw	r14, r12
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	40 e0       	ldi	r20, 0x00	; 0
    23ae:	50 e0       	ldi	r21, 0x00	; 0
    23b0:	c7 01       	movw	r24, r14
    23b2:	b6 01       	movw	r22, r12
    23b4:	5c d7       	rcall	.+3768   	; 0x326e <__udivmodsi4>
    23b6:	c9 01       	movw	r24, r18
    23b8:	0d bf       	out	0x3d, r16	; 61
    23ba:	1e bf       	out	0x3e, r17	; 62
    23bc:	0f 90       	pop	r0
    23be:	df 91       	pop	r29
    23c0:	cf 91       	pop	r28
    23c2:	1f 91       	pop	r17
    23c4:	0f 91       	pop	r16
    23c6:	ff 90       	pop	r15
    23c8:	ef 90       	pop	r14
    23ca:	df 90       	pop	r13
    23cc:	cf 90       	pop	r12
    23ce:	08 95       	ret

000023d0 <controller_measure>:
    23d0:	0f 93       	push	r16
    23d2:	1f 93       	push	r17
    23d4:	cf 93       	push	r28
    23d6:	df 93       	push	r29
    23d8:	8b 01       	movw	r16, r22
    23da:	a9 df       	rcall	.-174    	; 0x232e <adc_result_average>
    23dc:	ec 01       	movw	r28, r24
    23de:	df 93       	push	r29
    23e0:	8f 93       	push	r24
    23e2:	8e e2       	ldi	r24, 0x2E	; 46
    23e4:	90 e2       	ldi	r25, 0x20	; 32
    23e6:	9f 93       	push	r25
    23e8:	8f 93       	push	r24
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	92 e2       	ldi	r25, 0x22	; 34
    23ee:	9f 93       	push	r25
    23f0:	8f 93       	push	r24
    23f2:	0e 94 8b 1a 	call	0x3516	; 0x3516 <sprintf>
    23f6:	60 e0       	ldi	r22, 0x00	; 0
    23f8:	72 e2       	ldi	r23, 0x22	; 34
    23fa:	80 ea       	ldi	r24, 0xA0	; 160
    23fc:	9a e0       	ldi	r25, 0x0A	; 10
    23fe:	55 de       	rcall	.-854    	; 0x20aa <usart_tx_at>
    2400:	f8 01       	movw	r30, r16
    2402:	80 81       	ld	r24, Z
    2404:	91 81       	ldd	r25, Z+1	; 0x01
    2406:	9e 01       	movw	r18, r28
    2408:	28 1b       	sub	r18, r24
    240a:	39 0b       	sbc	r19, r25
    240c:	c9 01       	movw	r24, r18
    240e:	b9 01       	movw	r22, r18
    2410:	99 23       	and	r25, r25
    2412:	24 f4       	brge	.+8      	; 0x241c <controller_measure+0x4c>
    2414:	66 27       	eor	r22, r22
    2416:	77 27       	eor	r23, r23
    2418:	62 1b       	sub	r22, r18
    241a:	73 0b       	sbc	r23, r19
    241c:	f8 01       	movw	r30, r16
    241e:	24 81       	ldd	r18, Z+4	; 0x04
    2420:	35 81       	ldd	r19, Z+5	; 0x05
    2422:	33 23       	and	r19, r19
    2424:	1c f4       	brge	.+6      	; 0x242c <controller_measure+0x5c>
    2426:	31 95       	neg	r19
    2428:	21 95       	neg	r18
    242a:	31 09       	sbc	r19, r1
    242c:	41 e0       	ldi	r20, 0x01	; 1
    242e:	0f 90       	pop	r0
    2430:	0f 90       	pop	r0
    2432:	0f 90       	pop	r0
    2434:	0f 90       	pop	r0
    2436:	0f 90       	pop	r0
    2438:	0f 90       	pop	r0
    243a:	26 17       	cp	r18, r22
    243c:	37 07       	cpc	r19, r23
    243e:	0c f0       	brlt	.+2      	; 0x2442 <controller_measure+0x72>
    2440:	40 e0       	ldi	r20, 0x00	; 0
    2442:	44 23       	and	r20, r20
    2444:	61 f0       	breq	.+24     	; 0x245e <controller_measure+0x8e>
    2446:	21 e0       	ldi	r18, 0x01	; 1
    2448:	f8 01       	movw	r30, r16
    244a:	46 85       	ldd	r20, Z+14	; 0x0e
    244c:	57 85       	ldd	r21, Z+15	; 0x0f
    244e:	45 2b       	or	r20, r21
    2450:	09 f4       	brne	.+2      	; 0x2454 <controller_measure+0x84>
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	22 23       	and	r18, r18
    2456:	19 f0       	breq	.+6      	; 0x245e <controller_measure+0x8e>
    2458:	f8 01       	movw	r30, r16
    245a:	84 83       	std	Z+4, r24	; 0x04
    245c:	95 83       	std	Z+5, r25	; 0x05
    245e:	f8 01       	movw	r30, r16
    2460:	c0 83       	st	Z, r28
    2462:	d1 83       	std	Z+1, r29	; 0x01
    2464:	80 85       	ldd	r24, Z+8	; 0x08
    2466:	91 85       	ldd	r25, Z+9	; 0x09
    2468:	c8 17       	cp	r28, r24
    246a:	d9 07       	cpc	r29, r25
    246c:	10 f4       	brcc	.+4      	; 0x2472 <controller_measure+0xa2>
    246e:	c0 87       	std	Z+8, r28	; 0x08
    2470:	d1 87       	std	Z+9, r29	; 0x09
    2472:	f8 01       	movw	r30, r16
    2474:	82 85       	ldd	r24, Z+10	; 0x0a
    2476:	93 85       	ldd	r25, Z+11	; 0x0b
    2478:	8c 17       	cp	r24, r28
    247a:	9d 07       	cpc	r25, r29
    247c:	10 f4       	brcc	.+4      	; 0x2482 <controller_measure+0xb2>
    247e:	c2 87       	std	Z+10, r28	; 0x0a
    2480:	d3 87       	std	Z+11, r29	; 0x0b
    2482:	ce 01       	movw	r24, r28
    2484:	df 91       	pop	r29
    2486:	cf 91       	pop	r28
    2488:	1f 91       	pop	r17
    248a:	0f 91       	pop	r16
    248c:	08 95       	ret

0000248e <reset_tx_data>:
    248e:	fc 01       	movw	r30, r24
    2490:	10 82       	st	Z, r1
    2492:	11 82       	std	Z+1, r1	; 0x01
    2494:	12 82       	std	Z+2, r1	; 0x02
    2496:	13 82       	std	Z+3, r1	; 0x03
    2498:	14 82       	std	Z+4, r1	; 0x04
    249a:	15 82       	std	Z+5, r1	; 0x05
    249c:	16 82       	std	Z+6, r1	; 0x06
    249e:	17 82       	std	Z+7, r1	; 0x07
    24a0:	8f ef       	ldi	r24, 0xFF	; 255
    24a2:	9f ef       	ldi	r25, 0xFF	; 255
    24a4:	80 87       	std	Z+8, r24	; 0x08
    24a6:	91 87       	std	Z+9, r25	; 0x09
    24a8:	12 86       	std	Z+10, r1	; 0x0a
    24aa:	13 86       	std	Z+11, r1	; 0x0b
    24ac:	14 86       	std	Z+12, r1	; 0x0c
    24ae:	15 86       	std	Z+13, r1	; 0x0d
    24b0:	16 86       	std	Z+14, r1	; 0x0e
    24b2:	17 86       	std	Z+15, r1	; 0x0f
    24b4:	08 95       	ret

000024b6 <reset_tx_date>:
    24b6:	fc 01       	movw	r30, r24
    24b8:	10 82       	st	Z, r1
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	81 83       	std	Z+1, r24	; 0x01
    24be:	82 83       	std	Z+2, r24	; 0x02
    24c0:	13 82       	std	Z+3, r1	; 0x03
    24c2:	14 82       	std	Z+4, r1	; 0x04
    24c4:	15 82       	std	Z+5, r1	; 0x05
    24c6:	08 95       	ret

000024c8 <radio_pins_init>:

void radio_pins_init(void) {
	
	//PWRKEY and startup sequence.
	PWRKEY_PORT.DIR |= (1<<PWRKEY_PIN); //reset pin
    24c8:	e0 e8       	ldi	r30, 0x80	; 128
    24ca:	f6 e0       	ldi	r31, 0x06	; 6
    24cc:	80 81       	ld	r24, Z
    24ce:	80 64       	ori	r24, 0x40	; 64
    24d0:	80 83       	st	Z, r24
	
	
	//STATUS, NOT NEEDED AS NETLIGHT IS REQUIRED BEFORE SENDING COMMANDS.
	STATUS_PORT.DIR &= ~(1<<STATUS_PIN); //input
    24d2:	80 81       	ld	r24, Z
    24d4:	8f 77       	andi	r24, 0x7F	; 127
    24d6:	80 83       	st	Z, r24
    24d8:	08 95       	ret

000024da <radio_power_on>:
	//NETLIGHT. NOT AVAILABLE ON DEVELOPMENT BOARD, HAVE TO USE SW CALL TO CHECK FOR CONNECTION STATUS.
	//NETLIGHT_PORT.DIR &= ~(1<<NETLIGHT_PIN); //input
	
}

void radio_power_on(void) {
    24da:	cf 93       	push	r28
    24dc:	df 93       	push	r29
	PWRKEY_PORT.OUT &= ~(1<<PWRKEY_PIN); //reset
    24de:	c0 e8       	ldi	r28, 0x80	; 128
    24e0:	d6 e0       	ldi	r29, 0x06	; 6
    24e2:	8c 81       	ldd	r24, Y+4	; 0x04
    24e4:	8f 7b       	andi	r24, 0xBF	; 191
    24e6:	8c 83       	std	Y+4, r24	; 0x04
	delay_ms(1); //wait for battery voltage to settle.
    24e8:	6e e4       	ldi	r22, 0x4E	; 78
    24ea:	71 e0       	ldi	r23, 0x01	; 1
    24ec:	80 e0       	ldi	r24, 0x00	; 0
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	d1 dd       	rcall	.-1118   	; 0x2094 <__portable_avr_delay_cycles>
	PWRKEY_PORT.OUT |= (1<<PWRKEY_PIN); //reset of radio
    24f2:	8c 81       	ldd	r24, Y+4	; 0x04
    24f4:	80 64       	ori	r24, 0x40	; 64
    24f6:	8c 83       	std	Y+4, r24	; 0x04
	delay_ms(100); //boot time, 100ms recommended for m95
    24f8:	66 e3       	ldi	r22, 0x36	; 54
    24fa:	72 e8       	ldi	r23, 0x82	; 130
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	c9 dd       	rcall	.-1134   	; 0x2094 <__portable_avr_delay_cycles>
	PWRKEY_PORT.OUT &= ~(1<<PWRKEY_PIN);
    2502:	8c 81       	ldd	r24, Y+4	; 0x04
    2504:	8f 7b       	andi	r24, 0xBF	; 191
    2506:	8c 83       	std	Y+4, r24	; 0x04
	delay_ms(800); //time before m95 is running. There exist a status bit that might be useful to monitor.
    2508:	6b ea       	ldi	r22, 0xAB	; 171
    250a:	71 e1       	ldi	r23, 0x11	; 17
    250c:	84 e0       	ldi	r24, 0x04	; 4
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	c1 dd       	rcall	.-1150   	; 0x2094 <__portable_avr_delay_cycles>
	delay_ms(400);
    2512:	66 ed       	ldi	r22, 0xD6	; 214
    2514:	78 e0       	ldi	r23, 0x08	; 8
    2516:	82 e0       	ldi	r24, 0x02	; 2
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	bc dd       	rcall	.-1160   	; 0x2094 <__portable_avr_delay_cycles>
	PWRKEY_PORT.OUT |= (1<<PWRKEY_PIN); //normal level for this pin
    251c:	8c 81       	ldd	r24, Y+4	; 0x04
    251e:	80 64       	ori	r24, 0x40	; 64
    2520:	8c 83       	std	Y+4, r24	; 0x04
	//////////////////////////////////////////////////////////////////////////////////////////////////////////
}
    2522:	df 91       	pop	r29
    2524:	cf 91       	pop	r28
    2526:	08 95       	ret

00002528 <radio_power_down>:

void radio_power_down(void) {
    2528:	cf 93       	push	r28
    252a:	df 93       	push	r29
	//power down
	PWRKEY_PORT.OUT &= ~(1<<PWRKEY_PIN);
    252c:	c0 e8       	ldi	r28, 0x80	; 128
    252e:	d6 e0       	ldi	r29, 0x06	; 6
    2530:	8c 81       	ldd	r24, Y+4	; 0x04
    2532:	8f 7b       	andi	r24, 0xBF	; 191
    2534:	8c 83       	std	Y+4, r24	; 0x04
	delay_s(1);
    2536:	66 e1       	ldi	r22, 0x16	; 22
    2538:	76 e1       	ldi	r23, 0x16	; 22
    253a:	85 e0       	ldi	r24, 0x05	; 5
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	aa dd       	rcall	.-1196   	; 0x2094 <__portable_avr_delay_cycles>
	PWRKEY_PORT.OUT |= (1<<PWRKEY_PIN); 
    2540:	8c 81       	ldd	r24, Y+4	; 0x04
    2542:	80 64       	ori	r24, 0x40	; 64
    2544:	8c 83       	std	Y+4, r24	; 0x04
	delay_s(1);
    2546:	66 e1       	ldi	r22, 0x16	; 22
    2548:	76 e1       	ldi	r23, 0x16	; 22
    254a:	85 e0       	ldi	r24, 0x05	; 5
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	a2 dd       	rcall	.-1212   	; 0x2094 <__portable_avr_delay_cycles>
	PWRKEY_PORT.OUT &= ~(1<<PWRKEY_PIN);
    2550:	8c 81       	ldd	r24, Y+4	; 0x04
    2552:	8f 7b       	andi	r24, 0xBF	; 191
    2554:	8c 83       	std	Y+4, r24	; 0x04
}
    2556:	df 91       	pop	r29
    2558:	cf 91       	pop	r28
    255a:	08 95       	ret

0000255c <reset_char_array>:

void reset_char_array(char *array_pointer , uint8_t size) {
	uint8_t i = 0;
	while (i < size)
    255c:	66 23       	and	r22, r22
    255e:	59 f0       	breq	.+22     	; 0x2576 <reset_char_array+0x1a>
    2560:	fc 01       	movw	r30, r24
    2562:	61 50       	subi	r22, 0x01	; 1
    2564:	70 e0       	ldi	r23, 0x00	; 0
    2566:	6f 5f       	subi	r22, 0xFF	; 255
    2568:	7f 4f       	sbci	r23, 0xFF	; 255
    256a:	86 0f       	add	r24, r22
    256c:	97 1f       	adc	r25, r23
	{
		*(array_pointer+i) = 0x00;
    256e:	11 92       	st	Z+, r1
	PWRKEY_PORT.OUT &= ~(1<<PWRKEY_PIN);
}

void reset_char_array(char *array_pointer , uint8_t size) {
	uint8_t i = 0;
	while (i < size)
    2570:	e8 17       	cp	r30, r24
    2572:	f9 07       	cpc	r31, r25
    2574:	e1 f7       	brne	.-8      	; 0x256e <reset_char_array+0x12>
    2576:	08 95       	ret

00002578 <tx>:
	}
}


//uint8_t tx(char data[TX_DATA_SIZE]) {
uint8_t tx(char *data) {
    2578:	cf 92       	push	r12
    257a:	df 92       	push	r13
    257c:	ef 92       	push	r14
    257e:	ff 92       	push	r15
    2580:	0f 93       	push	r16
    2582:	1f 93       	push	r17
    2584:	cf 93       	push	r28
    2586:	df 93       	push	r29
    2588:	7c 01       	movw	r14, r24
    258a:	c0 e0       	ldi	r28, 0x00	; 0
	
	
	ret = 0;
	while ( (ret == 0) & (tx_at_cnt < AT_REPEAT)) //9*300ms ~ 3s
	{
		reset_char_array(&response, RESPONSE_SIZE);
    258c:	64 e6       	ldi	r22, 0x64	; 100
    258e:	8f e7       	ldi	r24, 0x7F	; 127
    2590:	92 e2       	ldi	r25, 0x22	; 34
    2592:	e4 df       	rcall	.-56     	; 0x255c <reset_char_array>
		usart_tx_at(USART_SERIAL_SIM900, AT_QNSTATUS); //return +QNSTATUS: n, where 0 is ok.
    2594:	61 e3       	ldi	r22, 0x31	; 49
    2596:	70 e2       	ldi	r23, 0x20	; 32
    2598:	80 ea       	ldi	r24, 0xA0	; 160
    259a:	98 e0       	ldi	r25, 0x08	; 8
    259c:	86 dd       	rcall	.-1268   	; 0x20aa <usart_tx_at>
		at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M, &response);
    259e:	4f e7       	ldi	r20, 0x7F	; 127
    25a0:	52 e2       	ldi	r21, 0x22	; 34
    25a2:	6c eb       	ldi	r22, 0xBC	; 188
    25a4:	72 e0       	ldi	r23, 0x02	; 2
    25a6:	80 ea       	ldi	r24, 0xA0	; 160
    25a8:	98 e0       	ldi	r25, 0x08	; 8
    25aa:	c4 dd       	rcall	.-1144   	; 0x2134 <at_response>
		ret = strstr(response, "QNSTATUS: 0");
    25ac:	6e e3       	ldi	r22, 0x3E	; 62
    25ae:	70 e2       	ldi	r23, 0x20	; 32
    25b0:	8f e7       	ldi	r24, 0x7F	; 127
    25b2:	92 e2       	ldi	r25, 0x22	; 34
    25b4:	6b d7       	rcall	.+3798   	; 0x348c <strstr>
    25b6:	8c 01       	movw	r16, r24
		delay_ms(1000);
    25b8:	66 e1       	ldi	r22, 0x16	; 22
    25ba:	76 e1       	ldi	r23, 0x16	; 22
    25bc:	85 e0       	ldi	r24, 0x05	; 5
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	69 dd       	rcall	.-1326   	; 0x2094 <__portable_avr_delay_cycles>
		tx_at_cnt++;
    25c2:	cf 5f       	subi	r28, 0xFF	; 255
// 	#define ATV0 "ATV0\r" //response format is numbers
// 	#define ATV1 "ATV1\r" //response format is text
	
	
	ret = 0;
	while ( (ret == 0) & (tx_at_cnt < AT_REPEAT)) //9*300ms ~ 3s
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	01 2b       	or	r16, r17
    25c8:	09 f0       	breq	.+2      	; 0x25cc <tx+0x54>
    25ca:	80 e0       	ldi	r24, 0x00	; 0
    25cc:	88 23       	and	r24, r24
    25ce:	31 f0       	breq	.+12     	; 0x25dc <tx+0x64>
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	c9 30       	cpi	r28, 0x09	; 9
    25d4:	08 f0       	brcs	.+2      	; 0x25d8 <tx+0x60>
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	81 11       	cpse	r24, r1
    25da:	d8 cf       	rjmp	.-80     	; 0x258c <tx+0x14>
		at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M, &response);
		ret = strstr(response, "QNSTATUS: 0");
		delay_ms(1000);
		tx_at_cnt++;
	}
	if (tx_at_cnt == AT_REPEAT)
    25dc:	c9 30       	cpi	r28, 0x09	; 9
    25de:	09 f4       	brne	.+2      	; 0x25e2 <tx+0x6a>
	{
		return status = 1;
	}
	usart_tx_at(USART_SERIAL_EXAMPLE, response); //DEBUG
    25e0:	b2 c2       	rjmp	.+1380   	; 0x2b46 <tx+0x5ce>
    25e2:	6f e7       	ldi	r22, 0x7F	; 127
    25e4:	72 e2       	ldi	r23, 0x22	; 34
    25e6:	80 ea       	ldi	r24, 0xA0	; 160
	
	reset_char_array(&response, RESPONSE_SIZE);
    25e8:	9a e0       	ldi	r25, 0x0A	; 10
    25ea:	5f dd       	rcall	.-1346   	; 0x20aa <usart_tx_at>
    25ec:	64 e6       	ldi	r22, 0x64	; 100
    25ee:	8f e7       	ldi	r24, 0x7F	; 127
	usart_tx_at(USART_SERIAL_SIM900, AT_QIFGCNT); //return OK
    25f0:	92 e2       	ldi	r25, 0x22	; 34
    25f2:	b4 df       	rcall	.-152    	; 0x255c <reset_char_array>
    25f4:	6a e4       	ldi	r22, 0x4A	; 74
    25f6:	70 e2       	ldi	r23, 0x20	; 32
    25f8:	80 ea       	ldi	r24, 0xA0	; 160
	at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M, &response);
    25fa:	98 e0       	ldi	r25, 0x08	; 8
    25fc:	56 dd       	rcall	.-1364   	; 0x20aa <usart_tx_at>
    25fe:	4f e7       	ldi	r20, 0x7F	; 127
    2600:	52 e2       	ldi	r21, 0x22	; 34
    2602:	6c eb       	ldi	r22, 0xBC	; 188
    2604:	72 e0       	ldi	r23, 0x02	; 2
    2606:	80 ea       	ldi	r24, 0xA0	; 160
	if (!strstr(response, "OK"))
    2608:	98 e0       	ldi	r25, 0x08	; 8
    260a:	94 dd       	rcall	.-1240   	; 0x2134 <at_response>
    260c:	6f ee       	ldi	r22, 0xEF	; 239
    260e:	70 e2       	ldi	r23, 0x20	; 32
    2610:	8f e7       	ldi	r24, 0x7F	; 127
    2612:	92 e2       	ldi	r25, 0x22	; 34
    2614:	3b d7       	rcall	.+3702   	; 0x348c <strstr>
	{
		return status = 2;
	}
	usart_tx_at(USART_SERIAL_EXAMPLE, response);
    2616:	89 2b       	or	r24, r25
    2618:	09 f4       	brne	.+2      	; 0x261c <tx+0xa4>
    261a:	97 c2       	rjmp	.+1326   	; 0x2b4a <tx+0x5d2>
    261c:	6f e7       	ldi	r22, 0x7F	; 127
    261e:	72 e2       	ldi	r23, 0x22	; 34
	
	reset_char_array(&response, RESPONSE_SIZE);
    2620:	80 ea       	ldi	r24, 0xA0	; 160
    2622:	9a e0       	ldi	r25, 0x0A	; 10
    2624:	42 dd       	rcall	.-1404   	; 0x20aa <usart_tx_at>
    2626:	64 e6       	ldi	r22, 0x64	; 100
	usart_tx_at(USART_SERIAL_SIM900, AT_QICSGP); //return OK
    2628:	8f e7       	ldi	r24, 0x7F	; 127
    262a:	92 e2       	ldi	r25, 0x22	; 34
    262c:	97 df       	rcall	.-210    	; 0x255c <reset_char_array>
    262e:	68 e5       	ldi	r22, 0x58	; 88
	at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M, &response);
    2630:	70 e2       	ldi	r23, 0x20	; 32
    2632:	80 ea       	ldi	r24, 0xA0	; 160
    2634:	98 e0       	ldi	r25, 0x08	; 8
    2636:	39 dd       	rcall	.-1422   	; 0x20aa <usart_tx_at>
    2638:	4f e7       	ldi	r20, 0x7F	; 127
    263a:	52 e2       	ldi	r21, 0x22	; 34
    263c:	6c eb       	ldi	r22, 0xBC	; 188
	if (!strstr(response, "OK"))
    263e:	72 e0       	ldi	r23, 0x02	; 2
    2640:	80 ea       	ldi	r24, 0xA0	; 160
    2642:	98 e0       	ldi	r25, 0x08	; 8
    2644:	77 dd       	rcall	.-1298   	; 0x2134 <at_response>
    2646:	6f ee       	ldi	r22, 0xEF	; 239
    2648:	70 e2       	ldi	r23, 0x20	; 32
    264a:	8f e7       	ldi	r24, 0x7F	; 127
	{
		return status = 3;
	}
	usart_tx_at(USART_SERIAL_EXAMPLE, response);
    264c:	92 e2       	ldi	r25, 0x22	; 34
    264e:	1e d7       	rcall	.+3644   	; 0x348c <strstr>
    2650:	89 2b       	or	r24, r25
    2652:	09 f4       	brne	.+2      	; 0x2656 <tx+0xde>
    2654:	7c c2       	rjmp	.+1272   	; 0x2b4e <tx+0x5d6>
	
	reset_char_array(&response, RESPONSE_SIZE);
    2656:	6f e7       	ldi	r22, 0x7F	; 127
    2658:	72 e2       	ldi	r23, 0x22	; 34
    265a:	80 ea       	ldi	r24, 0xA0	; 160
	usart_tx_at(USART_SERIAL_SIM900, AT_QIMUX); //return OK
    265c:	9a e0       	ldi	r25, 0x0A	; 10
    265e:	25 dd       	rcall	.-1462   	; 0x20aa <usart_tx_at>
    2660:	64 e6       	ldi	r22, 0x64	; 100
    2662:	8f e7       	ldi	r24, 0x7F	; 127
    2664:	92 e2       	ldi	r25, 0x22	; 34
	at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M, &response);
    2666:	7a df       	rcall	.-268    	; 0x255c <reset_char_array>
    2668:	60 e8       	ldi	r22, 0x80	; 128
    266a:	70 e2       	ldi	r23, 0x20	; 32
    266c:	80 ea       	ldi	r24, 0xA0	; 160
    266e:	98 e0       	ldi	r25, 0x08	; 8
    2670:	1c dd       	rcall	.-1480   	; 0x20aa <usart_tx_at>
	if (!strstr(response, "OK"))
    2672:	4f e7       	ldi	r20, 0x7F	; 127
    2674:	52 e2       	ldi	r21, 0x22	; 34
    2676:	6c eb       	ldi	r22, 0xBC	; 188
    2678:	72 e0       	ldi	r23, 0x02	; 2
    267a:	80 ea       	ldi	r24, 0xA0	; 160
    267c:	98 e0       	ldi	r25, 0x08	; 8
    267e:	5a dd       	rcall	.-1356   	; 0x2134 <at_response>
    2680:	6f ee       	ldi	r22, 0xEF	; 239
	{
		return status = 4;
	}
	usart_tx_at(USART_SERIAL_EXAMPLE, response);
    2682:	70 e2       	ldi	r23, 0x20	; 32
    2684:	8f e7       	ldi	r24, 0x7F	; 127
    2686:	92 e2       	ldi	r25, 0x22	; 34
    2688:	01 d7       	rcall	.+3586   	; 0x348c <strstr>
	
	reset_char_array(&response, RESPONSE_SIZE);
    268a:	89 2b       	or	r24, r25
    268c:	09 f4       	brne	.+2      	; 0x2690 <tx+0x118>
    268e:	61 c2       	rjmp	.+1218   	; 0x2b52 <tx+0x5da>
    2690:	6f e7       	ldi	r22, 0x7F	; 127
	usart_tx_at(USART_SERIAL_SIM900, AT_QIMODE); //return OK
    2692:	72 e2       	ldi	r23, 0x22	; 34
    2694:	80 ea       	ldi	r24, 0xA0	; 160
    2696:	9a e0       	ldi	r25, 0x0A	; 10
    2698:	08 dd       	rcall	.-1520   	; 0x20aa <usart_tx_at>
    269a:	64 e6       	ldi	r22, 0x64	; 100
	at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M, &response);
    269c:	8f e7       	ldi	r24, 0x7F	; 127
    269e:	92 e2       	ldi	r25, 0x22	; 34
    26a0:	5d df       	rcall	.-326    	; 0x255c <reset_char_array>
    26a2:	6c e8       	ldi	r22, 0x8C	; 140
    26a4:	70 e2       	ldi	r23, 0x20	; 32
    26a6:	80 ea       	ldi	r24, 0xA0	; 160
	if (!strstr(response, "OK"))
    26a8:	98 e0       	ldi	r25, 0x08	; 8
    26aa:	ff dc       	rcall	.-1538   	; 0x20aa <usart_tx_at>
    26ac:	4f e7       	ldi	r20, 0x7F	; 127
    26ae:	52 e2       	ldi	r21, 0x22	; 34
    26b0:	6c eb       	ldi	r22, 0xBC	; 188
    26b2:	72 e0       	ldi	r23, 0x02	; 2
    26b4:	80 ea       	ldi	r24, 0xA0	; 160
    26b6:	98 e0       	ldi	r25, 0x08	; 8
	{
		return status = 5;
	}
	usart_tx_at(USART_SERIAL_EXAMPLE, response);
    26b8:	3d dd       	rcall	.-1414   	; 0x2134 <at_response>
    26ba:	6f ee       	ldi	r22, 0xEF	; 239
    26bc:	70 e2       	ldi	r23, 0x20	; 32
    26be:	8f e7       	ldi	r24, 0x7F	; 127
    26c0:	92 e2       	ldi	r25, 0x22	; 34
	
	reset_char_array(&response, RESPONSE_SIZE);
    26c2:	e4 d6       	rcall	.+3528   	; 0x348c <strstr>
    26c4:	89 2b       	or	r24, r25
    26c6:	09 f4       	brne	.+2      	; 0x26ca <tx+0x152>
    26c8:	46 c2       	rjmp	.+1164   	; 0x2b56 <tx+0x5de>
	usart_tx_at(USART_SERIAL_SIM900, AT_QIDNSIP); //return OK
    26ca:	6f e7       	ldi	r22, 0x7F	; 127
    26cc:	72 e2       	ldi	r23, 0x22	; 34
    26ce:	80 ea       	ldi	r24, 0xA0	; 160
    26d0:	9a e0       	ldi	r25, 0x0A	; 10
    26d2:	eb dc       	rcall	.-1578   	; 0x20aa <usart_tx_at>
	at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M, &response);
    26d4:	64 e6       	ldi	r22, 0x64	; 100
    26d6:	8f e7       	ldi	r24, 0x7F	; 127
    26d8:	92 e2       	ldi	r25, 0x22	; 34
    26da:	40 df       	rcall	.-384    	; 0x255c <reset_char_array>
    26dc:	69 e9       	ldi	r22, 0x99	; 153
    26de:	70 e2       	ldi	r23, 0x20	; 32
	if (!strstr(response, "OK"))
    26e0:	80 ea       	ldi	r24, 0xA0	; 160
    26e2:	98 e0       	ldi	r25, 0x08	; 8
    26e4:	e2 dc       	rcall	.-1596   	; 0x20aa <usart_tx_at>
    26e6:	4f e7       	ldi	r20, 0x7F	; 127
    26e8:	52 e2       	ldi	r21, 0x22	; 34
    26ea:	6c eb       	ldi	r22, 0xBC	; 188
    26ec:	72 e0       	ldi	r23, 0x02	; 2
	{
		return status = 6;
	}
	usart_tx_at(USART_SERIAL_EXAMPLE, response);
    26ee:	80 ea       	ldi	r24, 0xA0	; 160
    26f0:	98 e0       	ldi	r25, 0x08	; 8
    26f2:	20 dd       	rcall	.-1472   	; 0x2134 <at_response>
    26f4:	6f ee       	ldi	r22, 0xEF	; 239
    26f6:	70 e2       	ldi	r23, 0x20	; 32
	
	reset_char_array(&response, RESPONSE_SIZE);
    26f8:	8f e7       	ldi	r24, 0x7F	; 127
    26fa:	92 e2       	ldi	r25, 0x22	; 34
    26fc:	c7 d6       	rcall	.+3470   	; 0x348c <strstr>
    26fe:	89 2b       	or	r24, r25
	usart_tx_at(USART_SERIAL_SIM900, AT_QIREGAPP); //return OK
    2700:	09 f4       	brne	.+2      	; 0x2704 <tx+0x18c>
    2702:	2b c2       	rjmp	.+1110   	; 0x2b5a <tx+0x5e2>
    2704:	6f e7       	ldi	r22, 0x7F	; 127
    2706:	72 e2       	ldi	r23, 0x22	; 34
    2708:	80 ea       	ldi	r24, 0xA0	; 160
	at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M, &response);
    270a:	9a e0       	ldi	r25, 0x0A	; 10
    270c:	ce dc       	rcall	.-1636   	; 0x20aa <usart_tx_at>
    270e:	64 e6       	ldi	r22, 0x64	; 100
    2710:	8f e7       	ldi	r24, 0x7F	; 127
    2712:	92 e2       	ldi	r25, 0x22	; 34
    2714:	23 df       	rcall	.-442    	; 0x255c <reset_char_array>
    2716:	67 ea       	ldi	r22, 0xA7	; 167
	if (!strstr(response, "OK"))
    2718:	70 e2       	ldi	r23, 0x20	; 32
    271a:	80 ea       	ldi	r24, 0xA0	; 160
    271c:	98 e0       	ldi	r25, 0x08	; 8
    271e:	c5 dc       	rcall	.-1654   	; 0x20aa <usart_tx_at>
    2720:	4f e7       	ldi	r20, 0x7F	; 127
    2722:	52 e2       	ldi	r21, 0x22	; 34
    2724:	6c eb       	ldi	r22, 0xBC	; 188
	{
		return status = 7;
	}
	usart_tx_at(USART_SERIAL_EXAMPLE, response);
    2726:	72 e0       	ldi	r23, 0x02	; 2
    2728:	80 ea       	ldi	r24, 0xA0	; 160
    272a:	98 e0       	ldi	r25, 0x08	; 8
    272c:	03 dd       	rcall	.-1530   	; 0x2134 <at_response>
    272e:	6f ee       	ldi	r22, 0xEF	; 239
    2730:	70 e2       	ldi	r23, 0x20	; 32
    2732:	8f e7       	ldi	r24, 0x7F	; 127
	//CHECK IP STATUS
	ret = 0;
	tx_at_cnt = 0;
	while ( (ret == 0) & (tx_at_cnt < AT_REPEAT)) //9*300ms ~ 3s
	{
		reset_char_array(&response, RESPONSE_SIZE);
    2734:	92 e2       	ldi	r25, 0x22	; 34
    2736:	aa d6       	rcall	.+3412   	; 0x348c <strstr>
    2738:	89 2b       	or	r24, r25
    273a:	09 f4       	brne	.+2      	; 0x273e <tx+0x1c6>
    273c:	10 c2       	rjmp	.+1056   	; 0x2b5e <tx+0x5e6>
		usart_tx_at(USART_SERIAL_SIM900, AT_QISTAT); //return OK
    273e:	6f e7       	ldi	r22, 0x7F	; 127
    2740:	72 e2       	ldi	r23, 0x22	; 34
    2742:	80 ea       	ldi	r24, 0xA0	; 160
    2744:	9a e0       	ldi	r25, 0x0A	; 10
    2746:	b1 dc       	rcall	.-1694   	; 0x20aa <usart_tx_at>
    2748:	c0 e0       	ldi	r28, 0x00	; 0
		//tx_status = at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M);
		at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M, &response);
    274a:	64 e6       	ldi	r22, 0x64	; 100
    274c:	8f e7       	ldi	r24, 0x7F	; 127
    274e:	92 e2       	ldi	r25, 0x22	; 34
    2750:	05 df       	rcall	.-502    	; 0x255c <reset_char_array>
    2752:	64 eb       	ldi	r22, 0xB4	; 180
    2754:	70 e2       	ldi	r23, 0x20	; 32
		ret = strstr(response, "IP START");
    2756:	80 ea       	ldi	r24, 0xA0	; 160
    2758:	98 e0       	ldi	r25, 0x08	; 8
    275a:	a7 dc       	rcall	.-1714   	; 0x20aa <usart_tx_at>
    275c:	4f e7       	ldi	r20, 0x7F	; 127
    275e:	52 e2       	ldi	r21, 0x22	; 34
    2760:	6c eb       	ldi	r22, 0xBC	; 188
		delay_ms(300);
    2762:	72 e0       	ldi	r23, 0x02	; 2
    2764:	80 ea       	ldi	r24, 0xA0	; 160
    2766:	98 e0       	ldi	r25, 0x08	; 8
    2768:	e5 dc       	rcall	.-1590   	; 0x2134 <at_response>
    276a:	6f eb       	ldi	r22, 0xBF	; 191
	usart_tx_at(USART_SERIAL_EXAMPLE, response);
	
	//CHECK IP STATUS
	ret = 0;
	tx_at_cnt = 0;
	while ( (ret == 0) & (tx_at_cnt < AT_REPEAT)) //9*300ms ~ 3s
    276c:	70 e2       	ldi	r23, 0x20	; 32
    276e:	8f e7       	ldi	r24, 0x7F	; 127
    2770:	92 e2       	ldi	r25, 0x22	; 34
    2772:	8c d6       	rcall	.+3352   	; 0x348c <strstr>
    2774:	8c 01       	movw	r16, r24
    2776:	61 ea       	ldi	r22, 0xA1	; 161
    2778:	76 e8       	ldi	r23, 0x86	; 134
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	8a dc       	rcall	.-1772   	; 0x2094 <__portable_avr_delay_cycles>
		at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M, &response);
		ret = strstr(response, "IP START");
		delay_ms(300);
		tx_at_cnt++;
	}
	if (tx_at_cnt == AT_REPEAT)
    2780:	cf 5f       	subi	r28, 0xFF	; 255
    2782:	81 e0       	ldi	r24, 0x01	; 1
	{
		return status = 8;
	}
	usart_tx_at(USART_SERIAL_EXAMPLE, response);
    2784:	01 2b       	or	r16, r17
    2786:	09 f0       	breq	.+2      	; 0x278a <tx+0x212>
    2788:	80 e0       	ldi	r24, 0x00	; 0
    278a:	88 23       	and	r24, r24
    278c:	31 f0       	breq	.+12     	; 0x279a <tx+0x222>

	reset_char_array(&response, RESPONSE_SIZE);
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	c9 30       	cpi	r28, 0x09	; 9
    2792:	08 f0       	brcs	.+2      	; 0x2796 <tx+0x21e>
    2794:	80 e0       	ldi	r24, 0x00	; 0
	usart_tx_at(USART_SERIAL_SIM900, AT_QIACT); //return OK
    2796:	81 11       	cpse	r24, r1
    2798:	d8 cf       	rjmp	.-80     	; 0x274a <tx+0x1d2>
    279a:	c9 30       	cpi	r28, 0x09	; 9
    279c:	09 f4       	brne	.+2      	; 0x27a0 <tx+0x228>
    279e:	e1 c1       	rjmp	.+962    	; 0x2b62 <tx+0x5ea>
	at_response(USART_SERIAL_SIM900, RESPONSE_TIME_20S, &response);
    27a0:	6f e7       	ldi	r22, 0x7F	; 127
    27a2:	72 e2       	ldi	r23, 0x22	; 34
    27a4:	80 ea       	ldi	r24, 0xA0	; 160
    27a6:	9a e0       	ldi	r25, 0x0A	; 10
    27a8:	80 dc       	rcall	.-1792   	; 0x20aa <usart_tx_at>
    27aa:	64 e6       	ldi	r22, 0x64	; 100
    27ac:	8f e7       	ldi	r24, 0x7F	; 127
	if (!strstr(response, "QIACT"))
    27ae:	92 e2       	ldi	r25, 0x22	; 34
    27b0:	d5 de       	rcall	.-598    	; 0x255c <reset_char_array>
    27b2:	68 ec       	ldi	r22, 0xC8	; 200
    27b4:	70 e2       	ldi	r23, 0x20	; 32
    27b6:	80 ea       	ldi	r24, 0xA0	; 160
    27b8:	98 e0       	ldi	r25, 0x08	; 8
    27ba:	77 dc       	rcall	.-1810   	; 0x20aa <usart_tx_at>
	{
		usart_tx_at(USART_SERIAL_EXAMPLE, response);
    27bc:	4f e7       	ldi	r20, 0x7F	; 127
    27be:	52 e2       	ldi	r21, 0x22	; 34
    27c0:	60 e4       	ldi	r22, 0x40	; 64
    27c2:	7c e9       	ldi	r23, 0x9C	; 156
    27c4:	80 ea       	ldi	r24, 0xA0	; 160
    27c6:	98 e0       	ldi	r25, 0x08	; 8
		return status = 9;
    27c8:	b5 dc       	rcall	.-1686   	; 0x2134 <at_response>
    27ca:	62 ed       	ldi	r22, 0xD2	; 210
		
	}
	usart_tx_at(USART_SERIAL_EXAMPLE, response);
    27cc:	70 e2       	ldi	r23, 0x20	; 32
    27ce:	8f e7       	ldi	r24, 0x7F	; 127
    27d0:	92 e2       	ldi	r25, 0x22	; 34
    27d2:	5c d6       	rcall	.+3256   	; 0x348c <strstr>
    27d4:	89 2b       	or	r24, r25
    27d6:	39 f4       	brne	.+14     	; 0x27e6 <tx+0x26e>
	//Need local IP
	ret = 0;
	tx_at_cnt = 0;
	while ( (ret == 0) & (tx_at_cnt < AT_REPEAT)) //9*300ms ~ 3s
	{
		reset_char_array(&response, RESPONSE_SIZE);
    27d8:	6f e7       	ldi	r22, 0x7F	; 127
    27da:	72 e2       	ldi	r23, 0x22	; 34
    27dc:	80 ea       	ldi	r24, 0xA0	; 160
    27de:	9a e0       	ldi	r25, 0x0A	; 10
		usart_tx_at(USART_SERIAL_SIM900, AT_QILOCIP); //return OK //fix response
    27e0:	64 dc       	rcall	.-1848   	; 0x20aa <usart_tx_at>
    27e2:	89 e0       	ldi	r24, 0x09	; 9
    27e4:	dd c1       	rjmp	.+954    	; 0x2ba0 <tx+0x628>
    27e6:	6f e7       	ldi	r22, 0x7F	; 127
    27e8:	72 e2       	ldi	r23, 0x22	; 34
		at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M, &response);
    27ea:	80 ea       	ldi	r24, 0xA0	; 160
    27ec:	9a e0       	ldi	r25, 0x0A	; 10
    27ee:	5d dc       	rcall	.-1862   	; 0x20aa <usart_tx_at>
    27f0:	c0 e0       	ldi	r28, 0x00	; 0
    27f2:	64 e6       	ldi	r22, 0x64	; 100
    27f4:	8f e7       	ldi	r24, 0x7F	; 127
    27f6:	92 e2       	ldi	r25, 0x22	; 34
		ret = strstr(response, LOCAL_IP);
    27f8:	b1 de       	rcall	.-670    	; 0x255c <reset_char_array>
    27fa:	68 ed       	ldi	r22, 0xD8	; 216
    27fc:	70 e2       	ldi	r23, 0x20	; 32
    27fe:	80 ea       	ldi	r24, 0xA0	; 160
    2800:	98 e0       	ldi	r25, 0x08	; 8
    2802:	53 dc       	rcall	.-1882   	; 0x20aa <usart_tx_at>
		delay_ms(300);
    2804:	4f e7       	ldi	r20, 0x7F	; 127
    2806:	52 e2       	ldi	r21, 0x22	; 34
    2808:	6c eb       	ldi	r22, 0xBC	; 188
    280a:	72 e0       	ldi	r23, 0x02	; 2
    280c:	80 ea       	ldi	r24, 0xA0	; 160
		tx_at_cnt++;
    280e:	98 e0       	ldi	r25, 0x08	; 8
	usart_tx_at(USART_SERIAL_EXAMPLE, response);
	
	//Need local IP
	ret = 0;
	tx_at_cnt = 0;
	while ( (ret == 0) & (tx_at_cnt < AT_REPEAT)) //9*300ms ~ 3s
    2810:	91 dc       	rcall	.-1758   	; 0x2134 <at_response>
    2812:	64 ee       	ldi	r22, 0xE4	; 228
    2814:	70 e2       	ldi	r23, 0x20	; 32
    2816:	8f e7       	ldi	r24, 0x7F	; 127
    2818:	92 e2       	ldi	r25, 0x22	; 34
    281a:	38 d6       	rcall	.+3184   	; 0x348c <strstr>
    281c:	8c 01       	movw	r16, r24
    281e:	61 ea       	ldi	r22, 0xA1	; 161
    2820:	76 e8       	ldi	r23, 0x86	; 134
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	36 dc       	rcall	.-1940   	; 0x2094 <__portable_avr_delay_cycles>
	//CHECK IP STATUS
	ret = 0;
	tx_at_cnt = 0;
	while ( (ret == 0) & (tx_at_cnt < AT_REPEAT)) //9*300ms ~ 3s
	{
		reset_char_array(&response, RESPONSE_SIZE);
    2828:	cf 5f       	subi	r28, 0xFF	; 255
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	01 2b       	or	r16, r17
    282e:	09 f0       	breq	.+2      	; 0x2832 <tx+0x2ba>
    2830:	80 e0       	ldi	r24, 0x00	; 0
		usart_tx_at(USART_SERIAL_SIM900, AT_QISTAT); //return OK
    2832:	88 23       	and	r24, r24
    2834:	09 f4       	brne	.+2      	; 0x2838 <tx+0x2c0>
    2836:	aa c1       	rjmp	.+852    	; 0x2b8c <tx+0x614>
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	c9 30       	cpi	r28, 0x09	; 9
    283c:	08 f0       	brcs	.+2      	; 0x2840 <tx+0x2c8>
		//at_response_qnstatus(USART_SERIAL_SIM900, RESPONSE_TIME_300M);
		at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M, &response);
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	81 11       	cpse	r24, r1
    2842:	d7 cf       	rjmp	.-82     	; 0x27f2 <tx+0x27a>
    2844:	a3 c1       	rjmp	.+838    	; 0x2b8c <tx+0x614>
    2846:	64 e6       	ldi	r22, 0x64	; 100
    2848:	8f e7       	ldi	r24, 0x7F	; 127
    284a:	92 e2       	ldi	r25, 0x22	; 34
    284c:	87 de       	rcall	.-754    	; 0x255c <reset_char_array>
		ret = strstr(response, "CONNECT OK") || strstr(response, "IP INITIAL") || strstr(response, "IP STATUS") || strstr(response, "IP CLOSE");
    284e:	64 eb       	ldi	r22, 0xB4	; 180
    2850:	70 e2       	ldi	r23, 0x20	; 32
    2852:	80 ea       	ldi	r24, 0xA0	; 160
    2854:	98 e0       	ldi	r25, 0x08	; 8
    2856:	29 dc       	rcall	.-1966   	; 0x20aa <usart_tx_at>
    2858:	4f e7       	ldi	r20, 0x7F	; 127
    285a:	52 e2       	ldi	r21, 0x22	; 34
    285c:	6c eb       	ldi	r22, 0xBC	; 188
    285e:	72 e0       	ldi	r23, 0x02	; 2
    2860:	80 ea       	ldi	r24, 0xA0	; 160
    2862:	98 e0       	ldi	r25, 0x08	; 8
    2864:	67 dc       	rcall	.-1842   	; 0x2134 <at_response>
    2866:	67 ee       	ldi	r22, 0xE7	; 231
    2868:	70 e2       	ldi	r23, 0x20	; 32
    286a:	8f e7       	ldi	r24, 0x7F	; 127
    286c:	92 e2       	ldi	r25, 0x22	; 34
    286e:	0e d6       	rcall	.+3100   	; 0x348c <strstr>
    2870:	89 2b       	or	r24, r25
    2872:	09 f0       	breq	.+2      	; 0x2876 <tx+0x2fe>
    2874:	8e c1       	rjmp	.+796    	; 0x2b92 <tx+0x61a>
    2876:	62 ef       	ldi	r22, 0xF2	; 242
    2878:	70 e2       	ldi	r23, 0x20	; 32
    287a:	8f e7       	ldi	r24, 0x7F	; 127
    287c:	92 e2       	ldi	r25, 0x22	; 34
    287e:	06 d6       	rcall	.+3084   	; 0x348c <strstr>
    2880:	89 2b       	or	r24, r25
    2882:	09 f0       	breq	.+2      	; 0x2886 <tx+0x30e>
    2884:	86 c1       	rjmp	.+780    	; 0x2b92 <tx+0x61a>
		delay_ms(300);
    2886:	6d ef       	ldi	r22, 0xFD	; 253
    2888:	70 e2       	ldi	r23, 0x20	; 32
    288a:	8f e7       	ldi	r24, 0x7F	; 127
    288c:	92 e2       	ldi	r25, 0x22	; 34
		tx_at_cnt++;
    288e:	fe d5       	rcall	.+3068   	; 0x348c <strstr>
	usart_tx_at(USART_SERIAL_EXAMPLE, response);
		
	//CHECK IP STATUS
	ret = 0;
	tx_at_cnt = 0;
	while ( (ret == 0) & (tx_at_cnt < AT_REPEAT)) //9*300ms ~ 3s
    2890:	89 2b       	or	r24, r25
    2892:	09 f0       	breq	.+2      	; 0x2896 <tx+0x31e>
    2894:	7e c1       	rjmp	.+764    	; 0x2b92 <tx+0x61a>
    2896:	67 e0       	ldi	r22, 0x07	; 7
    2898:	71 e2       	ldi	r23, 0x21	; 33
    289a:	8f e7       	ldi	r24, 0x7F	; 127
    289c:	92 e2       	ldi	r25, 0x22	; 34
    289e:	f6 d5       	rcall	.+3052   	; 0x348c <strstr>
    28a0:	8c 01       	movw	r16, r24
    28a2:	61 ea       	ldi	r22, 0xA1	; 161
    28a4:	76 e8       	ldi	r23, 0x86	; 134
    28a6:	81 e0       	ldi	r24, 0x01	; 1
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	f4 db       	rcall	.-2072   	; 0x2094 <__portable_avr_delay_cycles>
    28ac:	cf 5f       	subi	r28, 0xFF	; 255
		at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M, &response);
		ret = strstr(response, "CONNECT OK") || strstr(response, "IP INITIAL") || strstr(response, "IP STATUS") || strstr(response, "IP CLOSE");
		delay_ms(300);
		tx_at_cnt++;
	}
	if (tx_at_cnt == AT_REPEAT)
    28ae:	21 e0       	ldi	r18, 0x01	; 1
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	01 2b       	or	r16, r17
	{
		return status = 11;
	}
	usart_tx_at(USART_SERIAL_EXAMPLE, response);
    28b4:	11 f4       	brne	.+4      	; 0x28ba <tx+0x342>
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	23 2b       	or	r18, r19

	reset_char_array(&response, RESPONSE_SIZE);
    28be:	09 f0       	breq	.+2      	; 0x28c2 <tx+0x34a>
    28c0:	80 e0       	ldi	r24, 0x00	; 0
    28c2:	88 23       	and	r24, r24
    28c4:	31 f0       	breq	.+12     	; 0x28d2 <tx+0x35a>
	usart_tx_at(USART_SERIAL_SIM900, AT_QIOPEN); //return OK
    28c6:	81 e0       	ldi	r24, 0x01	; 1
    28c8:	c9 30       	cpi	r28, 0x09	; 9
    28ca:	08 f0       	brcs	.+2      	; 0x28ce <tx+0x356>
    28cc:	80 e0       	ldi	r24, 0x00	; 0
    28ce:	81 11       	cpse	r24, r1
	at_response(USART_SERIAL_SIM900, RESPONSE_TIME_20S, &response);
    28d0:	ba cf       	rjmp	.-140    	; 0x2846 <tx+0x2ce>
    28d2:	c9 30       	cpi	r28, 0x09	; 9
    28d4:	09 f4       	brne	.+2      	; 0x28d8 <tx+0x360>
    28d6:	47 c1       	rjmp	.+654    	; 0x2b66 <tx+0x5ee>
    28d8:	6f e7       	ldi	r22, 0x7F	; 127
    28da:	72 e2       	ldi	r23, 0x22	; 34
	if (!strstr(response, "OK"))
    28dc:	80 ea       	ldi	r24, 0xA0	; 160
    28de:	9a e0       	ldi	r25, 0x0A	; 10
    28e0:	e4 db       	rcall	.-2104   	; 0x20aa <usart_tx_at>
    28e2:	64 e6       	ldi	r22, 0x64	; 100
    28e4:	8f e7       	ldi	r24, 0x7F	; 127
    28e6:	92 e2       	ldi	r25, 0x22	; 34
    28e8:	39 de       	rcall	.-910    	; 0x255c <reset_char_array>
    28ea:	60 e1       	ldi	r22, 0x10	; 16
	{
		return status = 12;
	}
	usart_tx_at(USART_SERIAL_EXAMPLE, response);
    28ec:	71 e2       	ldi	r23, 0x21	; 33
    28ee:	80 ea       	ldi	r24, 0xA0	; 160
    28f0:	98 e0       	ldi	r25, 0x08	; 8
    28f2:	db db       	rcall	.-2122   	; 0x20aa <usart_tx_at>
    28f4:	4f e7       	ldi	r20, 0x7F	; 127
    28f6:	52 e2       	ldi	r21, 0x22	; 34
	
	reset_char_array(&response, RESPONSE_SIZE);
    28f8:	60 e4       	ldi	r22, 0x40	; 64
    28fa:	7c e9       	ldi	r23, 0x9C	; 156
    28fc:	80 ea       	ldi	r24, 0xA0	; 160
    28fe:	98 e0       	ldi	r25, 0x08	; 8
    2900:	19 dc       	rcall	.-1998   	; 0x2134 <at_response>
	usart_tx_at(USART_SERIAL_SIM900, AT_QISRVC); //return OK
    2902:	6f ee       	ldi	r22, 0xEF	; 239
    2904:	70 e2       	ldi	r23, 0x20	; 32
    2906:	8f e7       	ldi	r24, 0x7F	; 127
    2908:	92 e2       	ldi	r25, 0x22	; 34
    290a:	c0 d5       	rcall	.+2944   	; 0x348c <strstr>
	at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M, &response);
    290c:	89 2b       	or	r24, r25
    290e:	09 f4       	brne	.+2      	; 0x2912 <tx+0x39a>
    2910:	2c c1       	rjmp	.+600    	; 0x2b6a <tx+0x5f2>
    2912:	6f e7       	ldi	r22, 0x7F	; 127
    2914:	72 e2       	ldi	r23, 0x22	; 34
    2916:	80 ea       	ldi	r24, 0xA0	; 160
	if (!strstr(response, "OK"))
    2918:	9a e0       	ldi	r25, 0x0A	; 10
    291a:	c7 db       	rcall	.-2162   	; 0x20aa <usart_tx_at>
    291c:	64 e6       	ldi	r22, 0x64	; 100
    291e:	8f e7       	ldi	r24, 0x7F	; 127
    2920:	92 e2       	ldi	r25, 0x22	; 34
    2922:	1c de       	rcall	.-968    	; 0x255c <reset_char_array>
    2924:	63 e3       	ldi	r22, 0x33	; 51
	{
		return status = 13;
	}
	usart_tx_at(USART_SERIAL_EXAMPLE, response);
    2926:	71 e2       	ldi	r23, 0x21	; 33
    2928:	80 ea       	ldi	r24, 0xA0	; 160
    292a:	98 e0       	ldi	r25, 0x08	; 8
    292c:	be db       	rcall	.-2180   	; 0x20aa <usart_tx_at>
    292e:	4f e7       	ldi	r20, 0x7F	; 127
    2930:	52 e2       	ldi	r21, 0x22	; 34
	//CHECK IP STATUS
	ret = 0;
	tx_at_cnt = 0;
	while ( (ret == 0) & (tx_at_cnt < AT_REPEAT)) //9*300ms ~ 3s
	{
		reset_char_array(&response, RESPONSE_SIZE);
    2932:	6c eb       	ldi	r22, 0xBC	; 188
    2934:	72 e0       	ldi	r23, 0x02	; 2
    2936:	80 ea       	ldi	r24, 0xA0	; 160
    2938:	98 e0       	ldi	r25, 0x08	; 8
		usart_tx_at(USART_SERIAL_SIM900, AT_QISTAT); //return OK
    293a:	fc db       	rcall	.-2056   	; 0x2134 <at_response>
    293c:	6f ee       	ldi	r22, 0xEF	; 239
    293e:	70 e2       	ldi	r23, 0x20	; 32
    2940:	8f e7       	ldi	r24, 0x7F	; 127
    2942:	92 e2       	ldi	r25, 0x22	; 34
		at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M, &response);
    2944:	a3 d5       	rcall	.+2886   	; 0x348c <strstr>
    2946:	89 2b       	or	r24, r25
    2948:	09 f4       	brne	.+2      	; 0x294c <tx+0x3d4>
    294a:	11 c1       	rjmp	.+546    	; 0x2b6e <tx+0x5f6>
    294c:	6f e7       	ldi	r22, 0x7F	; 127
    294e:	72 e2       	ldi	r23, 0x22	; 34
    2950:	80 ea       	ldi	r24, 0xA0	; 160
    2952:	9a e0       	ldi	r25, 0x0A	; 10
		ret = strstr(response, "CONNECT OK");
    2954:	aa db       	rcall	.-2220   	; 0x20aa <usart_tx_at>
    2956:	c0 e0       	ldi	r28, 0x00	; 0
    2958:	64 e6       	ldi	r22, 0x64	; 100
    295a:	8f e7       	ldi	r24, 0x7F	; 127
    295c:	92 e2       	ldi	r25, 0x22	; 34
    295e:	fe dd       	rcall	.-1028   	; 0x255c <reset_char_array>
    2960:	64 eb       	ldi	r22, 0xB4	; 180
		delay_ms(300);
    2962:	70 e2       	ldi	r23, 0x20	; 32
    2964:	80 ea       	ldi	r24, 0xA0	; 160
    2966:	98 e0       	ldi	r25, 0x08	; 8
    2968:	a0 db       	rcall	.-2240   	; 0x20aa <usart_tx_at>
    296a:	4f e7       	ldi	r20, 0x7F	; 127
		tx_at_cnt++;
    296c:	52 e2       	ldi	r21, 0x22	; 34
	usart_tx_at(USART_SERIAL_EXAMPLE, response);
	
	//CHECK IP STATUS
	ret = 0;
	tx_at_cnt = 0;
	while ( (ret == 0) & (tx_at_cnt < AT_REPEAT)) //9*300ms ~ 3s
    296e:	6c eb       	ldi	r22, 0xBC	; 188
    2970:	72 e0       	ldi	r23, 0x02	; 2
    2972:	80 ea       	ldi	r24, 0xA0	; 160
    2974:	98 e0       	ldi	r25, 0x08	; 8
    2976:	de db       	rcall	.-2116   	; 0x2134 <at_response>
    2978:	67 ee       	ldi	r22, 0xE7	; 231
    297a:	70 e2       	ldi	r23, 0x20	; 32
    297c:	8f e7       	ldi	r24, 0x7F	; 127
    297e:	92 e2       	ldi	r25, 0x22	; 34
    2980:	85 d5       	rcall	.+2826   	; 0x348c <strstr>
    2982:	8c 01       	movw	r16, r24
    2984:	61 ea       	ldi	r22, 0xA1	; 161
		at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M, &response);
		ret = strstr(response, "CONNECT OK");
		delay_ms(300);
		tx_at_cnt++;
	}
	if (tx_at_cnt == AT_REPEAT)
    2986:	76 e8       	ldi	r23, 0x86	; 134
    2988:	81 e0       	ldi	r24, 0x01	; 1
    298a:	90 e0       	ldi	r25, 0x00	; 0
	{
		return status = 14;
	}
	usart_tx_at(USART_SERIAL_EXAMPLE, response);
    298c:	83 db       	rcall	.-2298   	; 0x2094 <__portable_avr_delay_cycles>
    298e:	cf 5f       	subi	r28, 0xFF	; 255
    2990:	81 e0       	ldi	r24, 0x01	; 1
    2992:	01 2b       	or	r16, r17
    2994:	09 f0       	breq	.+2      	; 0x2998 <tx+0x420>
	
	//FETCH TIME FROM NETWORK HERE!!!!
	//IF NOT SEND TIMESTAMP
	ret = 0;
	tx_at_cnt = 0;
	while ( (tx_at_cnt < AT_REPEAT) & (*(ret+20) == 0x00) ) //9*300ms ~ 3s
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	88 23       	and	r24, r24
    299a:	31 f0       	breq	.+12     	; 0x29a8 <tx+0x430>
	{
		reset_char_array(&response, RESPONSE_SIZE);
    299c:	81 e0       	ldi	r24, 0x01	; 1
    299e:	c9 30       	cpi	r28, 0x09	; 9
    29a0:	08 f0       	brcs	.+2      	; 0x29a4 <tx+0x42c>
    29a2:	80 e0       	ldi	r24, 0x00	; 0
    29a4:	81 11       	cpse	r24, r1
		usart_tx_at(USART_SERIAL_SIM900, AT_QLTS); //return +QNSTATUS: n, where 0 is ok.
    29a6:	d8 cf       	rjmp	.-80     	; 0x2958 <tx+0x3e0>
    29a8:	c9 30       	cpi	r28, 0x09	; 9
    29aa:	09 f4       	brne	.+2      	; 0x29ae <tx+0x436>
    29ac:	e2 c0       	rjmp	.+452    	; 0x2b72 <tx+0x5fa>
    29ae:	6f e7       	ldi	r22, 0x7F	; 127
    29b0:	72 e2       	ldi	r23, 0x22	; 34
		at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M, &response);
    29b2:	80 ea       	ldi	r24, 0xA0	; 160
    29b4:	9a e0       	ldi	r25, 0x0A	; 10
    29b6:	79 db       	rcall	.-2318   	; 0x20aa <usart_tx_at>
    29b8:	84 b3       	in	r24, 0x14	; 20
    29ba:	81 11       	cpse	r24, r1
    29bc:	2c c0       	rjmp	.+88     	; 0x2a16 <tx+0x49e>
    29be:	10 e0       	ldi	r17, 0x00	; 0
		ret = strstr(response, "QLTS: ");
    29c0:	64 e6       	ldi	r22, 0x64	; 100
    29c2:	8f e7       	ldi	r24, 0x7F	; 127
    29c4:	92 e2       	ldi	r25, 0x22	; 34
    29c6:	ca dd       	rcall	.-1132   	; 0x255c <reset_char_array>
    29c8:	60 e4       	ldi	r22, 0x40	; 64
    29ca:	71 e2       	ldi	r23, 0x21	; 33
		delay_ms(300);
    29cc:	80 ea       	ldi	r24, 0xA0	; 160
    29ce:	98 e0       	ldi	r25, 0x08	; 8
    29d0:	6c db       	rcall	.-2344   	; 0x20aa <usart_tx_at>
    29d2:	4f e7       	ldi	r20, 0x7F	; 127
    29d4:	52 e2       	ldi	r21, 0x22	; 34
    29d6:	6c eb       	ldi	r22, 0xBC	; 188
		tx_at_cnt++;
    29d8:	72 e0       	ldi	r23, 0x02	; 2
	
	//FETCH TIME FROM NETWORK HERE!!!!
	//IF NOT SEND TIMESTAMP
	ret = 0;
	tx_at_cnt = 0;
	while ( (tx_at_cnt < AT_REPEAT) & (*(ret+20) == 0x00) ) //9*300ms ~ 3s
    29da:	80 ea       	ldi	r24, 0xA0	; 160
    29dc:	98 e0       	ldi	r25, 0x08	; 8
    29de:	aa db       	rcall	.-2220   	; 0x2134 <at_response>
    29e0:	69 e4       	ldi	r22, 0x49	; 73
    29e2:	71 e2       	ldi	r23, 0x21	; 33
    29e4:	8f e7       	ldi	r24, 0x7F	; 127
    29e6:	92 e2       	ldi	r25, 0x22	; 34
    29e8:	51 d5       	rcall	.+2722   	; 0x348c <strstr>
    29ea:	ec 01       	movw	r28, r24
    29ec:	61 ea       	ldi	r22, 0xA1	; 161
		at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M, &response);
		ret = strstr(response, "QLTS: ");
		delay_ms(300);
		tx_at_cnt++;
	}
	if (tx_at_cnt == AT_REPEAT)
    29ee:	76 e8       	ldi	r23, 0x86	; 134
    29f0:	81 e0       	ldi	r24, 0x01	; 1
    29f2:	90 e0       	ldi	r25, 0x00	; 0
	}
	usart_tx_at(USART_SERIAL_EXAMPLE, response);
	
	//FETCH TIME FROM NETWORK HERE!!!!
	//IF NOT SEND TIMESTAMP
	ret = 0;
    29f4:	4f db       	rcall	.-2402   	; 0x2094 <__portable_avr_delay_cycles>
    29f6:	1f 5f       	subi	r17, 0xFF	; 255
	}
	if (tx_at_cnt == AT_REPEAT)
	{
		return status = 15;
	}
	usart_tx_at(USART_SERIAL_EXAMPLE, response); //DEBUG
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	9c 89       	ldd	r25, Y+20	; 0x14
    29fc:	91 11       	cpse	r25, r1
    29fe:	80 e0       	ldi	r24, 0x00	; 0
    2a00:	88 23       	and	r24, r24
    2a02:	31 f0       	breq	.+12     	; 0x2a10 <tx+0x498>
	//Store time and date in registers, and also append to tx data.
	year_ascii[0] = *(ret+7);
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	19 30       	cpi	r17, 0x09	; 9
    2a08:	08 f0       	brcs	.+2      	; 0x2a0c <tx+0x494>
    2a0a:	80 e0       	ldi	r24, 0x00	; 0
	year_ascii[1] = *(ret+8);
    2a0c:	81 11       	cpse	r24, r1
	strcat(data, ",");
    2a0e:	d8 cf       	rjmp	.-80     	; 0x29c0 <tx+0x448>
    2a10:	19 30       	cpi	r17, 0x09	; 9
    2a12:	19 f4       	brne	.+6      	; 0x2a1a <tx+0x4a2>
    2a14:	b0 c0       	rjmp	.+352    	; 0x2b76 <tx+0x5fe>
    2a16:	c0 e0       	ldi	r28, 0x00	; 0
    2a18:	d0 e0       	ldi	r29, 0x00	; 0
    2a1a:	6f e7       	ldi	r22, 0x7F	; 127
    2a1c:	72 e2       	ldi	r23, 0x22	; 34
    2a1e:	80 ea       	ldi	r24, 0xA0	; 160
    2a20:	9a e0       	ldi	r25, 0x0A	; 10
	strcat(data, year_ascii);
    2a22:	43 db       	rcall	.-2426   	; 0x20aa <usart_tx_at>
    2a24:	ef e4       	ldi	r30, 0x4F	; 79
    2a26:	f2 e2       	ldi	r31, 0x22	; 34
    2a28:	8f 81       	ldd	r24, Y+7	; 0x07
    2a2a:	80 83       	st	Z, r24
	tx_date[POSITION_YEAR] = atoi(year_ascii);
    2a2c:	88 85       	ldd	r24, Y+8	; 0x08
    2a2e:	81 83       	std	Z+1, r24	; 0x01
    2a30:	f7 01       	movw	r30, r14
    2a32:	01 90       	ld	r0, Z+
    2a34:	00 20       	and	r0, r0
    2a36:	e9 f7       	brne	.-6      	; 0x2a32 <tx+0x4ba>
	month_ascii[0] = *(ret+10);
    2a38:	31 97       	sbiw	r30, 0x01	; 1
    2a3a:	0f 2e       	mov	r0, r31
    2a3c:	fc e2       	ldi	r31, 0x2C	; 44
	month_ascii[1] = *(ret+11);
    2a3e:	cf 2e       	mov	r12, r31
    2a40:	d1 2c       	mov	r13, r1
	strcat(data, ",");
    2a42:	f0 2d       	mov	r31, r0
    2a44:	c0 82       	st	Z, r12
    2a46:	d1 82       	std	Z+1, r13	; 0x01
    2a48:	6f e4       	ldi	r22, 0x4F	; 79
    2a4a:	72 e2       	ldi	r23, 0x22	; 34
    2a4c:	c7 01       	movw	r24, r14
    2a4e:	0c d5       	rcall	.+2584   	; 0x3468 <strcat>
	strcat(data, month_ascii);
    2a50:	8f e4       	ldi	r24, 0x4F	; 79
    2a52:	92 e2       	ldi	r25, 0x22	; 34
    2a54:	ec d4       	rcall	.+2520   	; 0x342e <atoi>
    2a56:	03 ee       	ldi	r16, 0xE3	; 227
    2a58:	12 e2       	ldi	r17, 0x22	; 34
	tx_date[POSITION_MONTH] = atoi(month_ascii);
    2a5a:	f8 01       	movw	r30, r16
    2a5c:	80 83       	st	Z, r24
    2a5e:	ec e4       	ldi	r30, 0x4C	; 76
    2a60:	f2 e2       	ldi	r31, 0x22	; 34
	day_ascii[0] = *(ret+13);
    2a62:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a64:	80 83       	st	Z, r24
    2a66:	8b 85       	ldd	r24, Y+11	; 0x0b
	day_ascii[1] = *(ret+14);
    2a68:	81 83       	std	Z+1, r24	; 0x01
	strcat(data, ",");
    2a6a:	f7 01       	movw	r30, r14
    2a6c:	01 90       	ld	r0, Z+
    2a6e:	00 20       	and	r0, r0
    2a70:	e9 f7       	brne	.-6      	; 0x2a6c <tx+0x4f4>
    2a72:	31 97       	sbiw	r30, 0x01	; 1
    2a74:	c0 82       	st	Z, r12
    2a76:	d1 82       	std	Z+1, r13	; 0x01
	strcat(data, day_ascii);
    2a78:	6c e4       	ldi	r22, 0x4C	; 76
    2a7a:	72 e2       	ldi	r23, 0x22	; 34
    2a7c:	c7 01       	movw	r24, r14
    2a7e:	f4 d4       	rcall	.+2536   	; 0x3468 <strcat>
    2a80:	8c e4       	ldi	r24, 0x4C	; 76
	tx_date[POSITION_DAY] = atoi(day_ascii);
    2a82:	92 e2       	ldi	r25, 0x22	; 34
    2a84:	d4 d4       	rcall	.+2472   	; 0x342e <atoi>
    2a86:	f8 01       	movw	r30, r16
    2a88:	81 83       	std	Z+1, r24	; 0x01
    2a8a:	e9 e4       	ldi	r30, 0x49	; 73
    2a8c:	f2 e2       	ldi	r31, 0x22	; 34
	hour_ascii[0] = *(ret+16);
    2a8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a90:	80 83       	st	Z, r24
    2a92:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a94:	81 83       	std	Z+1, r24	; 0x01
	hour_ascii[1] = *(ret+17);
    2a96:	f7 01       	movw	r30, r14
    2a98:	01 90       	ld	r0, Z+
	strcat(data, ",");
    2a9a:	00 20       	and	r0, r0
    2a9c:	e9 f7       	brne	.-6      	; 0x2a98 <tx+0x520>
    2a9e:	31 97       	sbiw	r30, 0x01	; 1
    2aa0:	c0 82       	st	Z, r12
    2aa2:	d1 82       	std	Z+1, r13	; 0x01
    2aa4:	69 e4       	ldi	r22, 0x49	; 73
    2aa6:	72 e2       	ldi	r23, 0x22	; 34
	strcat(data, hour_ascii);
    2aa8:	c7 01       	movw	r24, r14
    2aaa:	de d4       	rcall	.+2492   	; 0x3468 <strcat>
    2aac:	89 e4       	ldi	r24, 0x49	; 73
    2aae:	92 e2       	ldi	r25, 0x22	; 34
	tx_date[POSITION_HOUR] = atoi(hour_ascii);
    2ab0:	be d4       	rcall	.+2428   	; 0x342e <atoi>
    2ab2:	f8 01       	movw	r30, r16
    2ab4:	82 83       	std	Z+2, r24	; 0x02
    2ab6:	e6 e4       	ldi	r30, 0x46	; 70
    2ab8:	f2 e2       	ldi	r31, 0x22	; 34
    2aba:	88 89       	ldd	r24, Y+16	; 0x10
	minute_ascii[0] = *(ret+19);
    2abc:	80 83       	st	Z, r24
    2abe:	89 89       	ldd	r24, Y+17	; 0x11
    2ac0:	81 83       	std	Z+1, r24	; 0x01
	minute_ascii[1] = *(ret+20);
    2ac2:	f7 01       	movw	r30, r14
    2ac4:	01 90       	ld	r0, Z+
	strcat(data, ",");
    2ac6:	00 20       	and	r0, r0
    2ac8:	e9 f7       	brne	.-6      	; 0x2ac4 <tx+0x54c>
    2aca:	31 97       	sbiw	r30, 0x01	; 1
    2acc:	c0 82       	st	Z, r12
    2ace:	d1 82       	std	Z+1, r13	; 0x01
    2ad0:	66 e4       	ldi	r22, 0x46	; 70
    2ad2:	72 e2       	ldi	r23, 0x22	; 34
	strcat(data, minute_ascii);
    2ad4:	c7 01       	movw	r24, r14
    2ad6:	c8 d4       	rcall	.+2448   	; 0x3468 <strcat>
    2ad8:	86 e4       	ldi	r24, 0x46	; 70
    2ada:	92 e2       	ldi	r25, 0x22	; 34
    2adc:	a8 d4       	rcall	.+2384   	; 0x342e <atoi>
	tx_date[POSITION_MINUTE] = atoi(minute_ascii);
    2ade:	f8 01       	movw	r30, r16
    2ae0:	83 83       	std	Z+3, r24	; 0x03
    2ae2:	e3 e4       	ldi	r30, 0x43	; 67
    2ae4:	f2 e2       	ldi	r31, 0x22	; 34
    2ae6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ae8:	80 83       	st	Z, r24
	second_ascii[0] = *(ret+22);
    2aea:	8c 89       	ldd	r24, Y+20	; 0x14
    2aec:	81 83       	std	Z+1, r24	; 0x01
    2aee:	f7 01       	movw	r30, r14
    2af0:	01 90       	ld	r0, Z+
	second_ascii[1] = *(ret+23);
    2af2:	00 20       	and	r0, r0
    2af4:	e9 f7       	brne	.-6      	; 0x2af0 <tx+0x578>
	strcat(data, ",");
    2af6:	31 97       	sbiw	r30, 0x01	; 1
    2af8:	c0 82       	st	Z, r12
    2afa:	d1 82       	std	Z+1, r13	; 0x01
    2afc:	63 e4       	ldi	r22, 0x43	; 67
    2afe:	72 e2       	ldi	r23, 0x22	; 34
    2b00:	c7 01       	movw	r24, r14
    2b02:	b2 d4       	rcall	.+2404   	; 0x3468 <strcat>
	strcat(data, second_ascii);
    2b04:	83 e4       	ldi	r24, 0x43	; 67
    2b06:	92 e2       	ldi	r25, 0x22	; 34
    2b08:	92 d4       	rcall	.+2340   	; 0x342e <atoi>
    2b0a:	f8 01       	movw	r30, r16
    2b0c:	84 83       	std	Z+4, r24	; 0x04
	tx_date[POSITION_SECOND] = atoi(second_ascii);
    2b0e:	e0 e4       	ldi	r30, 0x40	; 64
    2b10:	f2 e2       	ldi	r31, 0x22	; 34
    2b12:	8e 89       	ldd	r24, Y+22	; 0x16
    2b14:	80 83       	st	Z, r24
    2b16:	8f 89       	ldd	r24, Y+23	; 0x17
    2b18:	81 83       	std	Z+1, r24	; 0x01
	usart_tx_at(USART_SERIAL_EXAMPLE, data); //DEBUG
    2b1a:	f7 01       	movw	r30, r14
    2b1c:	01 90       	ld	r0, Z+
    2b1e:	00 20       	and	r0, r0
    2b20:	e9 f7       	brne	.-6      	; 0x2b1c <tx+0x5a4>
    2b22:	31 97       	sbiw	r30, 0x01	; 1
	///////////////////////////////////////////////////////////////////////////////////////

	//COMMENT OUT IF SENDING TO SERVER IS ENABLED
	return status = 32;
    2b24:	c0 82       	st	Z, r12
    2b26:	d1 82       	std	Z+1, r13	; 0x01
		delay_ms(1000);
		tx_at_cnt++;
	}
	if (tx_at_cnt == AT_REPEAT)
	{
		return status = 1;
    2b28:	60 e4       	ldi	r22, 0x40	; 64
    2b2a:	72 e2       	ldi	r23, 0x22	; 34
	reset_char_array(&response, RESPONSE_SIZE);
	usart_tx_at(USART_SERIAL_SIM900, AT_QIFGCNT); //return OK
	at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M, &response);
	if (!strstr(response, "OK"))
	{
		return status = 2;
    2b2c:	c7 01       	movw	r24, r14
    2b2e:	9c d4       	rcall	.+2360   	; 0x3468 <strcat>
	reset_char_array(&response, RESPONSE_SIZE);
	usart_tx_at(USART_SERIAL_SIM900, AT_QICSGP); //return OK
	at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M, &response);
	if (!strstr(response, "OK"))
	{
		return status = 3;
    2b30:	80 e4       	ldi	r24, 0x40	; 64
    2b32:	92 e2       	ldi	r25, 0x22	; 34
	reset_char_array(&response, RESPONSE_SIZE);
	usart_tx_at(USART_SERIAL_SIM900, AT_QIMUX); //return OK
	at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M, &response);
	if (!strstr(response, "OK"))
	{
		return status = 4;
    2b34:	7c d4       	rcall	.+2296   	; 0x342e <atoi>
    2b36:	f8 01       	movw	r30, r16
	reset_char_array(&response, RESPONSE_SIZE);
	usart_tx_at(USART_SERIAL_SIM900, AT_QIMODE); //return OK
	at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M, &response);
	if (!strstr(response, "OK"))
	{
		return status = 5;
    2b38:	85 83       	std	Z+5, r24	; 0x05
    2b3a:	b7 01       	movw	r22, r14
	reset_char_array(&response, RESPONSE_SIZE);
	usart_tx_at(USART_SERIAL_SIM900, AT_QIDNSIP); //return OK
	at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M, &response);
	if (!strstr(response, "OK"))
	{
		return status = 6;
    2b3c:	80 ea       	ldi	r24, 0xA0	; 160
    2b3e:	9a e0       	ldi	r25, 0x0A	; 10
	reset_char_array(&response, RESPONSE_SIZE);
	usart_tx_at(USART_SERIAL_SIM900, AT_QIREGAPP); //return OK
	at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M, &response);
	if (!strstr(response, "OK"))
	{
		return status = 7;
    2b40:	b4 da       	rcall	.-2712   	; 0x20aa <usart_tx_at>
    2b42:	80 e2       	ldi	r24, 0x20	; 32
		delay_ms(300);
		tx_at_cnt++;
	}
	if (tx_at_cnt == AT_REPEAT)
	{
		return status = 8;
    2b44:	2d c0       	rjmp	.+90     	; 0x2ba0 <tx+0x628>
    2b46:	81 e0       	ldi	r24, 0x01	; 1
		delay_ms(300);
		tx_at_cnt++;
	}
	if (tx_at_cnt == AT_REPEAT)
	{
		return status = 11;
    2b48:	2b c0       	rjmp	.+86     	; 0x2ba0 <tx+0x628>
    2b4a:	82 e0       	ldi	r24, 0x02	; 2
	reset_char_array(&response, RESPONSE_SIZE);
	usart_tx_at(USART_SERIAL_SIM900, AT_QIOPEN); //return OK
	at_response(USART_SERIAL_SIM900, RESPONSE_TIME_20S, &response);
	if (!strstr(response, "OK"))
	{
		return status = 12;
    2b4c:	29 c0       	rjmp	.+82     	; 0x2ba0 <tx+0x628>
    2b4e:	83 e0       	ldi	r24, 0x03	; 3
	reset_char_array(&response, RESPONSE_SIZE);
	usart_tx_at(USART_SERIAL_SIM900, AT_QISRVC); //return OK
	at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M, &response);
	if (!strstr(response, "OK"))
	{
		return status = 13;
    2b50:	27 c0       	rjmp	.+78     	; 0x2ba0 <tx+0x628>
    2b52:	84 e0       	ldi	r24, 0x04	; 4
		delay_ms(300);
		tx_at_cnt++;
	}
	if (tx_at_cnt == AT_REPEAT)
	{
		return status = 14;
    2b54:	25 c0       	rjmp	.+74     	; 0x2ba0 <tx+0x628>
    2b56:	85 e0       	ldi	r24, 0x05	; 5
		delay_ms(300);
		tx_at_cnt++;
	}
	if (tx_at_cnt == AT_REPEAT)
	{
		return status = 15;
    2b58:	23 c0       	rjmp	.+70     	; 0x2ba0 <tx+0x628>
    2b5a:	86 e0       	ldi	r24, 0x06	; 6
		delay_ms(300);
		tx_at_cnt++;
	}
	if (tx_at_cnt == AT_REPEAT)
	{
		return status = 10;
    2b5c:	21 c0       	rjmp	.+66     	; 0x2ba0 <tx+0x628>
    2b5e:	87 e0       	ldi	r24, 0x07	; 7
	}
	usart_tx_at(USART_SERIAL_EXAMPLE, response);
    2b60:	1f c0       	rjmp	.+62     	; 0x2ba0 <tx+0x628>
    2b62:	88 e0       	ldi	r24, 0x08	; 8
    2b64:	1d c0       	rjmp	.+58     	; 0x2ba0 <tx+0x628>
    2b66:	8b e0       	ldi	r24, 0x0B	; 11
    2b68:	1b c0       	rjmp	.+54     	; 0x2ba0 <tx+0x628>
    2b6a:	8c e0       	ldi	r24, 0x0C	; 12
    2b6c:	19 c0       	rjmp	.+50     	; 0x2ba0 <tx+0x628>
    2b6e:	8d e0       	ldi	r24, 0x0D	; 13
		at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M, &response);
		ret = strstr(response, LOCAL_IP);
		delay_ms(300);
		tx_at_cnt++;
	}
	if (tx_at_cnt == AT_REPEAT)
    2b70:	17 c0       	rjmp	.+46     	; 0x2ba0 <tx+0x628>
    2b72:	8e e0       	ldi	r24, 0x0E	; 14
    2b74:	15 c0       	rjmp	.+42     	; 0x2ba0 <tx+0x628>
		reset_char_array(&response, RESPONSE_SIZE);
		usart_tx_at(USART_SERIAL_SIM900, AT_QISTAT); //return OK
		//at_response_qnstatus(USART_SERIAL_SIM900, RESPONSE_TIME_300M);
		at_response(USART_SERIAL_SIM900, RESPONSE_TIME_300M, &response);
		ret = strstr(response, "CONNECT OK") || strstr(response, "IP INITIAL") || strstr(response, "IP STATUS") || strstr(response, "IP CLOSE");
		delay_ms(300);
    2b76:	8f e0       	ldi	r24, 0x0F	; 15
    2b78:	13 c0       	rjmp	.+38     	; 0x2ba0 <tx+0x628>
    2b7a:	8a e0       	ldi	r24, 0x0A	; 10
    2b7c:	11 c0       	rjmp	.+34     	; 0x2ba0 <tx+0x628>
    2b7e:	6f e7       	ldi	r22, 0x7F	; 127
    2b80:	72 e2       	ldi	r23, 0x22	; 34
		tx_at_cnt++;
    2b82:	80 ea       	ldi	r24, 0xA0	; 160
    2b84:	9a e0       	ldi	r25, 0x0A	; 10
		return status = 19;
	}
	usart_tx_at(USART_SERIAL_EXAMPLE, response);
	
	return status;
}
    2b86:	91 da       	rcall	.-2782   	; 0x20aa <usart_tx_at>
    2b88:	c0 e0       	ldi	r28, 0x00	; 0
    2b8a:	5d ce       	rjmp	.-838    	; 0x2846 <tx+0x2ce>
    2b8c:	c9 30       	cpi	r28, 0x09	; 9
    2b8e:	a9 f3       	breq	.-22     	; 0x2b7a <tx+0x602>
    2b90:	f6 cf       	rjmp	.-20     	; 0x2b7e <tx+0x606>
    2b92:	61 ea       	ldi	r22, 0xA1	; 161
    2b94:	76 e8       	ldi	r23, 0x86	; 134
    2b96:	81 e0       	ldi	r24, 0x01	; 1
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	7c da       	rcall	.-2824   	; 0x2094 <__portable_avr_delay_cycles>
    2b9c:	cf 5f       	subi	r28, 0xFF	; 255
    2b9e:	99 ce       	rjmp	.-718    	; 0x28d2 <tx+0x35a>
    2ba0:	df 91       	pop	r29
    2ba2:	cf 91       	pop	r28
    2ba4:	1f 91       	pop	r17
    2ba6:	0f 91       	pop	r16
    2ba8:	ff 90       	pop	r15
    2baa:	ef 90       	pop	r14
    2bac:	df 90       	pop	r13
    2bae:	cf 90       	pop	r12
    2bb0:	08 95       	ret

00002bb2 <controller_tx>:
	 avg = data/cnt;
	 return avg;
}

//void controller_tx(uint16_t array[TX_DATA_SIZE]) {
void controller_tx(uint16_t *array_data, uint8_t *array_date) {
    2bb2:	0f 93       	push	r16
    2bb4:	1f 93       	push	r17
    2bb6:	cf 93       	push	r28
    2bb8:	df 93       	push	r29
    2bba:	ec 01       	movw	r28, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2bbc:	4a e0       	ldi	r20, 0x0A	; 10
    2bbe:	6b e6       	ldi	r22, 0x6B	; 107
    2bc0:	72 e2       	ldi	r23, 0x22	; 34
    2bc2:	8e 81       	ldd	r24, Y+6	; 0x06
    2bc4:	9f 81       	ldd	r25, Y+7	; 0x07
    2bc6:	7c d4       	rcall	.+2296   	; 0x34c0 <__itoa_ncheck>
    2bc8:	4a e0       	ldi	r20, 0x0A	; 10
    2bca:	66 e6       	ldi	r22, 0x66	; 102
    2bcc:	72 e2       	ldi	r23, 0x22	; 34
    2bce:	88 85       	ldd	r24, Y+8	; 0x08
    2bd0:	99 85       	ldd	r25, Y+9	; 0x09
    2bd2:	76 d4       	rcall	.+2284   	; 0x34c0 <__itoa_ncheck>
    2bd4:	4a e0       	ldi	r20, 0x0A	; 10
    2bd6:	61 e6       	ldi	r22, 0x61	; 97
    2bd8:	72 e2       	ldi	r23, 0x22	; 34
    2bda:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bdc:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bde:	70 d4       	rcall	.+2272   	; 0x34c0 <__itoa_ncheck>
    2be0:	4a e0       	ldi	r20, 0x0A	; 10
    2be2:	6c e5       	ldi	r22, 0x5C	; 92
    2be4:	72 e2       	ldi	r23, 0x22	; 34
    2be6:	8c 81       	ldd	r24, Y+4	; 0x04
    2be8:	9d 81       	ldd	r25, Y+5	; 0x05
    2bea:	6a d4       	rcall	.+2260   	; 0x34c0 <__itoa_ncheck>
    2bec:	4a e0       	ldi	r20, 0x0A	; 10
    2bee:	67 e5       	ldi	r22, 0x57	; 87
    2bf0:	72 e2       	ldi	r23, 0x22	; 34
    2bf2:	8c 85       	ldd	r24, Y+12	; 0x0c
    2bf4:	9d 85       	ldd	r25, Y+13	; 0x0d
    2bf6:	64 d4       	rcall	.+2248   	; 0x34c0 <__itoa_ncheck>
    2bf8:	4a e0       	ldi	r20, 0x0A	; 10
    2bfa:	62 e5       	ldi	r22, 0x52	; 82
    2bfc:	72 e2       	ldi	r23, 0x22	; 34
    2bfe:	88 89       	ldd	r24, Y+16	; 0x10
    2c00:	99 89       	ldd	r25, Y+17	; 0x11
	itoa(*(array_date+POSITION_DAY), day_ascii,10); //convert to hex to lower transferred bytes.
	itoa(*(array_date+POSITION_HOUR), hour_ascii,10); //convert to hex to lower transferred bytes.
	itoa(*(array_date+POSITION_MINUTE), minute_ascii,10); //convert to hex to lower transferred bytes.
	itoa(*(array_date+POSITION_SECOND), second_ascii,10); //convert to hex to lower transferred bytes.
	*/           
    strcpy(transfer_data, avg_ascii);
    2c02:	5e d4       	rcall	.+2236   	; 0x34c0 <__itoa_ncheck>
    2c04:	6b e6       	ldi	r22, 0x6B	; 107
    2c06:	72 e2       	ldi	r23, 0x22	; 34
    2c08:	80 e0       	ldi	r24, 0x00	; 0
    2c0a:	92 e2       	ldi	r25, 0x22	; 34
    2c0c:	38 d4       	rcall	.+2160   	; 0x347e <strcpy>
    strcat(transfer_data, ",");
    2c0e:	c0 e0       	ldi	r28, 0x00	; 0
    2c10:	d2 e2       	ldi	r29, 0x22	; 34
    2c12:	fe 01       	movw	r30, r28
    2c14:	01 90       	ld	r0, Z+
    2c16:	00 20       	and	r0, r0
    2c18:	e9 f7       	brne	.-6      	; 0x2c14 <controller_tx+0x62>
    2c1a:	31 97       	sbiw	r30, 0x01	; 1
    2c1c:	0c e2       	ldi	r16, 0x2C	; 44
    2c1e:	10 e0       	ldi	r17, 0x00	; 0
    2c20:	00 83       	st	Z, r16
    strcat(transfer_data, min_ascii);
    2c22:	11 83       	std	Z+1, r17	; 0x01
    2c24:	66 e6       	ldi	r22, 0x66	; 102
    2c26:	72 e2       	ldi	r23, 0x22	; 34
    2c28:	ce 01       	movw	r24, r28
    2c2a:	1e d4       	rcall	.+2108   	; 0x3468 <strcat>
    strcat(transfer_data, ",");
    2c2c:	fe 01       	movw	r30, r28
    2c2e:	01 90       	ld	r0, Z+
    2c30:	00 20       	and	r0, r0
    2c32:	e9 f7       	brne	.-6      	; 0x2c2e <controller_tx+0x7c>
    2c34:	31 97       	sbiw	r30, 0x01	; 1
    2c36:	00 83       	st	Z, r16
    strcat(transfer_data, max_ascii);
    2c38:	11 83       	std	Z+1, r17	; 0x01
    2c3a:	61 e6       	ldi	r22, 0x61	; 97
    2c3c:	72 e2       	ldi	r23, 0x22	; 34
    2c3e:	ce 01       	movw	r24, r28
    2c40:	13 d4       	rcall	.+2086   	; 0x3468 <strcat>
    strcat(transfer_data, ",");
    2c42:	fe 01       	movw	r30, r28
    2c44:	01 90       	ld	r0, Z+
    2c46:	00 20       	and	r0, r0
    2c48:	e9 f7       	brne	.-6      	; 0x2c44 <controller_tx+0x92>
    2c4a:	31 97       	sbiw	r30, 0x01	; 1
    2c4c:	00 83       	st	Z, r16
    strcat(transfer_data, tran_ascii);
    2c4e:	11 83       	std	Z+1, r17	; 0x01
    2c50:	6c e5       	ldi	r22, 0x5C	; 92
    2c52:	72 e2       	ldi	r23, 0x22	; 34
    2c54:	ce 01       	movw	r24, r28
	strcat(transfer_data, ",");
    2c56:	08 d4       	rcall	.+2064   	; 0x3468 <strcat>
    2c58:	fe 01       	movw	r30, r28
    2c5a:	01 90       	ld	r0, Z+
    2c5c:	00 20       	and	r0, r0
    2c5e:	e9 f7       	brne	.-6      	; 0x2c5a <controller_tx+0xa8>
    2c60:	31 97       	sbiw	r30, 0x01	; 1
	strcat(transfer_data, timestamp_ascii);
    2c62:	00 83       	st	Z, r16
    2c64:	11 83       	std	Z+1, r17	; 0x01
    2c66:	67 e5       	ldi	r22, 0x57	; 87
    2c68:	72 e2       	ldi	r23, 0x22	; 34
	strcat(transfer_data, ",");
    2c6a:	ce 01       	movw	r24, r28
    2c6c:	fd d3       	rcall	.+2042   	; 0x3468 <strcat>
    2c6e:	fe 01       	movw	r30, r28
    2c70:	01 90       	ld	r0, Z+
    2c72:	00 20       	and	r0, r0
    2c74:	e9 f7       	brne	.-6      	; 0x2c70 <controller_tx+0xbe>
	strcat(transfer_data, vdd_xmega_ascii);
    2c76:	31 97       	sbiw	r30, 0x01	; 1
    2c78:	00 83       	st	Z, r16
    2c7a:	11 83       	std	Z+1, r17	; 0x01
    2c7c:	62 e5       	ldi	r22, 0x52	; 82
    2c7e:	72 e2       	ldi	r23, 0x22	; 34
	
    usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_HEADER);
    2c80:	ce 01       	movw	r24, r28
    2c82:	f2 d3       	rcall	.+2020   	; 0x3468 <strcat>
    2c84:	60 e5       	ldi	r22, 0x50	; 80
    2c86:	71 e2       	ldi	r23, 0x21	; 33
    2c88:	80 ea       	ldi	r24, 0xA0	; 160
    2c8a:	9a e0       	ldi	r25, 0x0A	; 10
	int i=0;
	while(transfer_data[i] != 0x00) {
    2c8c:	0e da       	rcall	.-3044   	; 0x20aa <usart_tx_at>
    2c8e:	68 81       	ld	r22, Y
    2c90:	66 23       	and	r22, r22
    2c92:	49 f0       	breq	.+18     	; 0x2ca6 <controller_tx+0xf4>
		usart_putchar(USART_SERIAL_EXAMPLE, transfer_data[i]);
    2c94:	c1 e0       	ldi	r28, 0x01	; 1
    2c96:	d2 e2       	ldi	r29, 0x22	; 34
    2c98:	80 ea       	ldi	r24, 0xA0	; 160
	strcat(transfer_data, ",");
	strcat(transfer_data, vdd_xmega_ascii);
	
    usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_HEADER);
	int i=0;
	while(transfer_data[i] != 0x00) {
    2c9a:	9a e0       	ldi	r25, 0x0A	; 10
    2c9c:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <usart_putchar>
		usart_putchar(USART_SERIAL_EXAMPLE, transfer_data[i]);
		i++;
	}
	
	status = tx(&transfer_data);
    2ca0:	69 91       	ld	r22, Y+
    2ca2:	61 11       	cpse	r22, r1
    2ca4:	f9 cf       	rjmp	.-14     	; 0x2c98 <controller_tx+0xe6>
    2ca6:	80 e0       	ldi	r24, 0x00	; 0
    2ca8:	92 e2       	ldi	r25, 0x22	; 34
    usart_tx_at(USART_SERIAL_EXAMPLE, TX_STATEMENT);
    2caa:	66 dc       	rcall	.-1844   	; 0x2578 <tx>
    2cac:	c8 2f       	mov	r28, r24
    2cae:	63 e5       	ldi	r22, 0x53	; 83
    2cb0:	71 e2       	ldi	r23, 0x21	; 33
    2cb2:	80 ea       	ldi	r24, 0xA0	; 160
	usart_putchar(USART_SERIAL_EXAMPLE, status+0x30);
    2cb4:	9a e0       	ldi	r25, 0x0A	; 10
    2cb6:	f9 d9       	rcall	.-3086   	; 0x20aa <usart_tx_at>
    2cb8:	60 e3       	ldi	r22, 0x30	; 48
    2cba:	6c 0f       	add	r22, r28
    2cbc:	80 ea       	ldi	r24, 0xA0	; 160
    2cbe:	9a e0       	ldi	r25, 0x0A	; 10
    usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_HEADER);
    2cc0:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <usart_putchar>
    2cc4:	60 e5       	ldi	r22, 0x50	; 80
    2cc6:	71 e2       	ldi	r23, 0x21	; 33
    2cc8:	80 ea       	ldi	r24, 0xA0	; 160
    2cca:	9a e0       	ldi	r25, 0x0A	; 10
	
}
    2ccc:	ee d9       	rcall	.-3108   	; 0x20aa <usart_tx_at>
    2cce:	df 91       	pop	r29
    2cd0:	cf 91       	pop	r28
    2cd2:	1f 91       	pop	r17
    2cd4:	0f 91       	pop	r16
    2cd6:	08 95       	ret

00002cd8 <__vector_10>:
	status_at_timeout = 1;
}
*/

ISR(RTC_OVF_vect)
{
    2cd8:	1f 92       	push	r1
    2cda:	0f 92       	push	r0
    2cdc:	0f b6       	in	r0, 0x3f	; 63
    2cde:	0f 92       	push	r0
    2ce0:	11 24       	eor	r1, r1
    2ce2:	08 b6       	in	r0, 0x38	; 56
    2ce4:	0f 92       	push	r0
    2ce6:	18 be       	out	0x38, r1	; 56
    2ce8:	09 b6       	in	r0, 0x39	; 57
    2cea:	0f 92       	push	r0
    2cec:	19 be       	out	0x39, r1	; 57
    2cee:	0a b6       	in	r0, 0x3a	; 58
    2cf0:	0f 92       	push	r0
    2cf2:	1a be       	out	0x3a, r1	; 58
    2cf4:	0b b6       	in	r0, 0x3b	; 59
    2cf6:	0f 92       	push	r0
    2cf8:	1b be       	out	0x3b, r1	; 59
    2cfa:	2f 93       	push	r18
    2cfc:	3f 93       	push	r19
    2cfe:	4f 93       	push	r20
    2d00:	5f 93       	push	r21
    2d02:	6f 93       	push	r22
    2d04:	7f 93       	push	r23
    2d06:	8f 93       	push	r24
    2d08:	9f 93       	push	r25
    2d0a:	af 93       	push	r26
    2d0c:	bf 93       	push	r27
    2d0e:	cf 93       	push	r28
    2d10:	df 93       	push	r29
    2d12:	ef 93       	push	r30
    2d14:	ff 93       	push	r31
	cli(); //disable interrupts. Other way of disabling and resetting?
    2d16:	f8 94       	cli
		
	led_blink(50); //DEBUG
    2d18:	82 e3       	ldi	r24, 0x32	; 50
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	3e da       	rcall	.-2948   	; 0x219a <led_blink>
	
	
	if (controller_state == MEASURE)
    2d1e:	80 91 11 20 	lds	r24, 0x2011	; 0x802011 <controller_state>
    2d22:	81 30       	cpi	r24, 0x01	; 1
    2d24:	01 f5       	brne	.+64     	; 0x2d66 <__vector_10+0x8e>
	{
		accu_data += controller_measure(9, &tx_data); //measure with averaging, and accumulate.
    2d26:	6a ee       	ldi	r22, 0xEA	; 234
    2d28:	72 e2       	ldi	r23, 0x22	; 34
    2d2a:	89 e0       	ldi	r24, 0x09	; 9
    2d2c:	51 db       	rcall	.-2398   	; 0x23d0 <controller_measure>
    2d2e:	40 91 71 22 	lds	r20, 0x2271	; 0x802271 <accu_data>
    2d32:	50 91 72 22 	lds	r21, 0x2272	; 0x802272 <accu_data+0x1>
    2d36:	60 91 73 22 	lds	r22, 0x2273	; 0x802273 <accu_data+0x2>
    2d3a:	70 91 74 22 	lds	r23, 0x2274	; 0x802274 <accu_data+0x3>
    2d3e:	48 0f       	add	r20, r24
    2d40:	59 1f       	adc	r21, r25
    2d42:	61 1d       	adc	r22, r1
    2d44:	71 1d       	adc	r23, r1
    2d46:	40 93 71 22 	sts	0x2271, r20	; 0x802271 <accu_data>
    2d4a:	50 93 72 22 	sts	0x2272, r21	; 0x802272 <accu_data+0x1>
    2d4e:	60 93 73 22 	sts	0x2273, r22	; 0x802273 <accu_data+0x2>
    2d52:	70 93 74 22 	sts	0x2274, r23	; 0x802274 <accu_data+0x3>
		tx_data[POSITION_VDD_XMEGA] = adc_result_single(&ADC_LC, ADC_VDD_XMEGA_CH);
    2d56:	62 e0       	ldi	r22, 0x02	; 2
    2d58:	80 e0       	ldi	r24, 0x00	; 0
    2d5a:	92 e0       	ldi	r25, 0x02	; 2
    2d5c:	bc da       	rcall	.-2696   	; 0x22d6 <adc_result_single>
    2d5e:	80 93 fa 22 	sts	0x22FA, r24	; 0x8022fa <tx_data+0x10>
    2d62:	90 93 fb 22 	sts	0x22FB, r25	; 0x8022fb <tx_data+0x11>
	}
	
	tx_data[POSITION_TIMESTAMP]++; //increase timestamp counter.
    2d66:	ea ee       	ldi	r30, 0xEA	; 234
    2d68:	f2 e2       	ldi	r31, 0x22	; 34
    2d6a:	84 85       	ldd	r24, Z+12	; 0x0c
    2d6c:	95 85       	ldd	r25, Z+13	; 0x0d
    2d6e:	01 96       	adiw	r24, 0x01	; 1
    2d70:	84 87       	std	Z+12, r24	; 0x0c
    2d72:	95 87       	std	Z+13, r25	; 0x0d
	tx_data[POSITION_ACCU_CNT]++; //increase accumulation counter.
    2d74:	86 85       	ldd	r24, Z+14	; 0x0e
    2d76:	97 85       	ldd	r25, Z+15	; 0x0f
    2d78:	01 96       	adiw	r24, 0x01	; 1
    2d7a:	86 87       	std	Z+14, r24	; 0x0e
    2d7c:	97 87       	std	Z+15, r25	; 0x0f
				
	if (tx_data[POSITION_ACCU_CNT] > (TAVG/TS)) //if accumulation limit is reached.
    2d7e:	26 85       	ldd	r18, Z+14	; 0x0e
    2d80:	37 85       	ldd	r19, Z+15	; 0x0f
    2d82:	80 91 0d 20 	lds	r24, 0x200D	; 0x80200d <TAVG>
    2d86:	90 91 0e 20 	lds	r25, 0x200E	; 0x80200e <TAVG+0x1>
    2d8a:	60 91 0f 20 	lds	r22, 0x200F	; 0x80200f <TS>
    2d8e:	70 91 10 20 	lds	r23, 0x2010	; 0x802010 <TS+0x1>
    2d92:	59 d2       	rcall	.+1202   	; 0x3246 <__udivmodhi4>
    2d94:	62 17       	cp	r22, r18
    2d96:	73 07       	cpc	r23, r19
    2d98:	f0 f4       	brcc	.+60     	; 0x2dd6 <__vector_10+0xfe>
	{
		tx_data[POSITION_AVG] = controller_calc_avg(accu_data, tx_data[POSITION_ACCU_CNT]); //calc and store average.
    2d9a:	ef 01       	movw	r28, r30
    2d9c:	26 85       	ldd	r18, Z+14	; 0x0e
    2d9e:	37 85       	ldd	r19, Z+15	; 0x0f
}

uint16_t controller_calc_avg(uint32_t data, uint16_t cnt) {
	 uint16_t avg = 0;
	 
	 avg = data/cnt;
    2da0:	40 e0       	ldi	r20, 0x00	; 0
    2da2:	50 e0       	ldi	r21, 0x00	; 0
    2da4:	60 91 71 22 	lds	r22, 0x2271	; 0x802271 <accu_data>
    2da8:	70 91 72 22 	lds	r23, 0x2272	; 0x802272 <accu_data+0x1>
    2dac:	80 91 73 22 	lds	r24, 0x2273	; 0x802273 <accu_data+0x2>
    2db0:	90 91 74 22 	lds	r25, 0x2274	; 0x802274 <accu_data+0x3>
    2db4:	5c d2       	rcall	.+1208   	; 0x326e <__udivmodsi4>
	tx_data[POSITION_TIMESTAMP]++; //increase timestamp counter.
	tx_data[POSITION_ACCU_CNT]++; //increase accumulation counter.
				
	if (tx_data[POSITION_ACCU_CNT] > (TAVG/TS)) //if accumulation limit is reached.
	{
		tx_data[POSITION_AVG] = controller_calc_avg(accu_data, tx_data[POSITION_ACCU_CNT]); //calc and store average.
    2db6:	2e 83       	std	Y+6, r18	; 0x06
    2db8:	3f 83       	std	Y+7, r19	; 0x07
				
		//reset parameters
		accu_data = 0;
    2dba:	10 92 71 22 	sts	0x2271, r1	; 0x802271 <accu_data>
    2dbe:	10 92 72 22 	sts	0x2272, r1	; 0x802272 <accu_data+0x1>
    2dc2:	10 92 73 22 	sts	0x2273, r1	; 0x802273 <accu_data+0x2>
    2dc6:	10 92 74 22 	sts	0x2274, r1	; 0x802274 <accu_data+0x3>
		tx_data[POSITION_ACCU_CNT] = 0;
    2dca:	1e 86       	std	Y+14, r1	; 0x0e
    2dcc:	1f 86       	std	Y+15, r1	; 0x0f
		
		controller_state = TX_DATA;
    2dce:	84 e0       	ldi	r24, 0x04	; 4
    2dd0:	80 93 11 20 	sts	0x2011, r24	; 0x802011 <controller_state>

	}
	
	if (controller_state == TX_DATA)
    2dd4:	04 c0       	rjmp	.+8      	; 0x2dde <__vector_10+0x106>
    2dd6:	80 91 11 20 	lds	r24, 0x2011	; 0x802011 <controller_state>
    2dda:	84 30       	cpi	r24, 0x04	; 4
	{
		
		//Startup of radio
		radio_power_on();
    2ddc:	b9 f4       	brne	.+46     	; 0x2e0c <__vector_10+0x134>
    2dde:	7d db       	rcall	.-2310   	; 0x24da <radio_power_on>
		
		//wait for status
		while (!(STATUS_PORT.IN & (1<<STATUS_PIN)));
    2de0:	e0 e8       	ldi	r30, 0x80	; 128
    2de2:	f6 e0       	ldi	r31, 0x06	; 6
    2de4:	80 85       	ldd	r24, Z+8	; 0x08
    2de6:	88 23       	and	r24, r24
    2de8:	ec f7       	brge	.-6      	; 0x2de4 <__vector_10+0x10c>
		PORTQ.OUT |= (1<<3); //led off
    2dea:	e0 ec       	ldi	r30, 0xC0	; 192
    2dec:	f7 e0       	ldi	r31, 0x07	; 7
    2dee:	84 81       	ldd	r24, Z+4	; 0x04
    2df0:	88 60       	ori	r24, 0x08	; 8
		////////////////////////////////////////////////////////
		
		
		
		controller_tx(&tx_data, &tx_date);
    2df2:	84 83       	std	Z+4, r24	; 0x04
    2df4:	63 ee       	ldi	r22, 0xE3	; 227
    2df6:	72 e2       	ldi	r23, 0x22	; 34
    2df8:	8a ee       	ldi	r24, 0xEA	; 234
		reset_tx_data(&tx_data);
    2dfa:	92 e2       	ldi	r25, 0x22	; 34
    2dfc:	da de       	rcall	.-588    	; 0x2bb2 <controller_tx>
    2dfe:	8a ee       	ldi	r24, 0xEA	; 234
    2e00:	92 e2       	ldi	r25, 0x22	; 34

		//radio power down
		radio_power_down();
    2e02:	45 db       	rcall	.-2422   	; 0x248e <reset_tx_data>
    2e04:	91 db       	rcall	.-2270   	; 0x2528 <radio_power_down>
		
		controller_state = MEASURE;
    2e06:	81 e0       	ldi	r24, 0x01	; 1
    2e08:	80 93 11 20 	sts	0x2011, r24	; 0x802011 <controller_state>
		
	}
	
	RTC.CNT = 0;
    2e0c:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    2e10:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
	sei(); //enable interrupt, go to sleep
    2e14:	78 94       	sei
}
    2e16:	ff 91       	pop	r31
    2e18:	ef 91       	pop	r30
    2e1a:	df 91       	pop	r29
    2e1c:	cf 91       	pop	r28
    2e1e:	bf 91       	pop	r27
    2e20:	af 91       	pop	r26
    2e22:	9f 91       	pop	r25
    2e24:	8f 91       	pop	r24
    2e26:	7f 91       	pop	r23
    2e28:	6f 91       	pop	r22
    2e2a:	5f 91       	pop	r21
    2e2c:	4f 91       	pop	r20
    2e2e:	3f 91       	pop	r19
    2e30:	2f 91       	pop	r18
    2e32:	0f 90       	pop	r0
    2e34:	0b be       	out	0x3b, r0	; 59
    2e36:	0f 90       	pop	r0
    2e38:	0a be       	out	0x3a, r0	; 58
    2e3a:	0f 90       	pop	r0
    2e3c:	09 be       	out	0x39, r0	; 57
    2e3e:	0f 90       	pop	r0
    2e40:	08 be       	out	0x38, r0	; 56
    2e42:	0f 90       	pop	r0
    2e44:	0f be       	out	0x3f, r0	; 63
    2e46:	0f 90       	pop	r0
    2e48:	1f 90       	pop	r1
    2e4a:	18 95       	reti

00002e4c <main>:


/*! \brief Main function.
 */
int main(void)
{
    2e4c:	cf 93       	push	r28
    2e4e:	df 93       	push	r29
    2e50:	cd b7       	in	r28, 0x3d	; 61
    2e52:	de b7       	in	r29, 0x3e	; 62
    2e54:	2f 97       	sbiw	r28, 0x0f	; 15
    2e56:	cd bf       	out	0x3d, r28	; 61
    2e58:	de bf       	out	0x3e, r29	; 62
	cli();
    2e5a:	f8 94       	cli
		
	/* Initialize the board.
	 * The board-specific conf_board.h file contains the configuration of
	 * the board initialization.
	 */
	board_init();
    2e5c:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <board_init>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    2e60:	87 e0       	ldi	r24, 0x07	; 7
    2e62:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	pmic_init(); //needed for TC ASF code. Check if needed in real implementation.
	//PMIC.CTRL = 0x01; //low level interrupt
	sysclk_init(); //fucks up the at_response....AHGHHHHHHHHHHHHH
    2e66:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <sysclk_init>
	//CLK.CTRL = 0x01; //2M
		
	
	
	//LED setup
	PORTQ.DIR |= (1<<3);
    2e6a:	e0 ec       	ldi	r30, 0xC0	; 192
    2e6c:	f7 e0       	ldi	r31, 0x07	; 7
    2e6e:	80 81       	ld	r24, Z
    2e70:	88 60       	ori	r24, 0x08	; 8
    2e72:	80 83       	st	Z, r24
	PORTQ.OUT |= (1<<3);
    2e74:	84 81       	ldd	r24, Z+4	; 0x04
    2e76:	88 60       	ori	r24, 0x08	; 8
    2e78:	84 83       	std	Z+4, r24	; 0x04
{
	struct adc_config adc_conf;
	struct adc_channel_config adcch_conf;
	struct adc_channel_config adcch_vdd_xmega_conf;
	
	adc_read_configuration(&ADC_LC, &adc_conf);
    2e7a:	be 01       	movw	r22, r28
    2e7c:	6f 5f       	subi	r22, 0xFF	; 255
    2e7e:	7f 4f       	sbci	r23, 0xFF	; 255
    2e80:	80 e0       	ldi	r24, 0x00	; 0
    2e82:	92 e0       	ldi	r25, 0x02	; 2
    2e84:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <adc_read_configuration>
	
	adcch_read_configuration(&ADC_LC, ADC_LC_CH, &adcch_conf);
    2e88:	ae 01       	movw	r20, r28
    2e8a:	44 5f       	subi	r20, 0xF4	; 244
    2e8c:	5f 4f       	sbci	r21, 0xFF	; 255
    2e8e:	61 e0       	ldi	r22, 0x01	; 1
    2e90:	80 e0       	ldi	r24, 0x00	; 0
    2e92:	92 e0       	ldi	r25, 0x02	; 2
    2e94:	0e 94 67 04 	call	0x8ce	; 0x8ce <adcch_read_configuration>
	adcch_read_configuration(&ADC_LC, ADC_VDD_XMEGA_CH, &adcch_vdd_xmega_conf);
    2e98:	ae 01       	movw	r20, r28
    2e9a:	48 5f       	subi	r20, 0xF8	; 248
    2e9c:	5f 4f       	sbci	r21, 0xFF	; 255
    2e9e:	62 e0       	ldi	r22, 0x02	; 2
    2ea0:	80 e0       	ldi	r24, 0x00	; 0
    2ea2:	92 e0       	ldi	r25, 0x02	; 2
    2ea4:	0e 94 67 04 	call	0x8ce	; 0x8ce <adcch_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    2ea8:	9a 81       	ldd	r25, Y+2	; 0x02
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
	conf->refctrl |= ref;
    2eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    2eac:	8f 78       	andi	r24, 0x8F	; 143
    2eae:	80 61       	ori	r24, 0x10	; 16
    2eb0:	8b 83       	std	Y+3, r24	; 0x03
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    2eb2:	89 2f       	mov	r24, r25
    2eb4:	81 7e       	andi	r24, 0xE1	; 225
    2eb6:	8a 83       	std	Y+2, r24	; 0x02
		conf->evctrl = ADC_EVACT_NONE_gc;
    2eb8:	1c 82       	std	Y+4, r1	; 0x04
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    2eba:	82 e0       	ldi	r24, 0x02	; 2
    2ebc:	8d 83       	std	Y+5, r24	; 0x05
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    2ebe:	81 e0       	ldi	r24, 0x01	; 1
    2ec0:	8c 87       	std	Y+12, r24	; 0x0c
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    2ec2:	1d 86       	std	Y+13, r1	; 0x0d
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    2ec4:	88 87       	std	Y+8, r24	; 0x08
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    2ec6:	88 e0       	ldi	r24, 0x08	; 8
    2ec8:	89 87       	std	Y+9, r24	; 0x09
	adc_set_clock_rate(&adc_conf, 200000UL);
	
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN0, ADCCH_NEG_NONE, 1);
	adcch_set_input(&adcch_vdd_xmega_conf, ADCCH_POS_PIN1, ADCCH_NEG_NONE, 1);
	
	adc_write_configuration(&ADC_LC, &adc_conf);
    2eca:	be 01       	movw	r22, r28
    2ecc:	6f 5f       	subi	r22, 0xFF	; 255
    2ece:	7f 4f       	sbci	r23, 0xFF	; 255
    2ed0:	80 e0       	ldi	r24, 0x00	; 0
    2ed2:	92 e0       	ldi	r25, 0x02	; 2
    2ed4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <adc_write_configuration>
	
	adcch_write_configuration(&ADC_LC, ADC_LC_CH, &adcch_conf);
    2ed8:	ae 01       	movw	r20, r28
    2eda:	44 5f       	subi	r20, 0xF4	; 244
    2edc:	5f 4f       	sbci	r21, 0xFF	; 255
    2ede:	61 e0       	ldi	r22, 0x01	; 1
    2ee0:	80 e0       	ldi	r24, 0x00	; 0
    2ee2:	92 e0       	ldi	r25, 0x02	; 2
    2ee4:	0e 94 1c 04 	call	0x838	; 0x838 <adcch_write_configuration>
	adcch_write_configuration(&ADC_LC, ADC_VDD_XMEGA_CH, &adcch_vdd_xmega_conf);
    2ee8:	ae 01       	movw	r20, r28
    2eea:	48 5f       	subi	r20, 0xF8	; 248
    2eec:	5f 4f       	sbci	r21, 0xFF	; 255
    2eee:	62 e0       	ldi	r22, 0x02	; 2
    2ef0:	80 e0       	ldi	r24, 0x00	; 0
    2ef2:	92 e0       	ldi	r25, 0x02	; 2
    2ef4:	0e 94 1c 04 	call	0x838	; 0x838 <adcch_write_configuration>
	PORTQ.DIR |= (1<<3);
	PORTQ.OUT |= (1<<3);
	
	//ADC setup
	adc_init();
	adc_enable(&ADC_LC); //Later??? By interrupt?
    2ef8:	80 e0       	ldi	r24, 0x00	; 0
    2efa:	92 e0       	ldi	r25, 0x02	; 2
    2efc:	0e 94 65 01 	call	0x2ca	; 0x2ca <adc_enable>
	};
	
	///////////////////////////////
	

	usart_init_rs232(USART_SERIAL_EXAMPLE, &USART_SERIAL_OPTIONS);
    2f00:	66 e0       	ldi	r22, 0x06	; 6
    2f02:	70 e2       	ldi	r23, 0x20	; 32
    2f04:	80 ea       	ldi	r24, 0xA0	; 160
    2f06:	9a e0       	ldi	r25, 0x0A	; 10
    2f08:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <usart_init_rs232>
	usart_init_rs232(USART_SERIAL_SIM900, &USART_SERIAL_OPTIONS);
    2f0c:	66 e0       	ldi	r22, 0x06	; 6
    2f0e:	70 e2       	ldi	r23, 0x20	; 32
    2f10:	80 ea       	ldi	r24, 0xA0	; 160
    2f12:	98 e0       	ldi	r25, 0x08	; 8
    2f14:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <usart_init_rs232>
	sysclk_enable_module(SYSCLK_PORT_C, 4);
    2f18:	64 e0       	ldi	r22, 0x04	; 4
    2f1a:	83 e0       	ldi	r24, 0x03	; 3
    2f1c:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_E, 4);
    2f20:	64 e0       	ldi	r22, 0x04	; 4
    2f22:	85 e0       	ldi	r24, 0x05	; 5
    2f24:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <sysclk_enable_module>
	//PR.PRPE &= ~(1<<4); //enable the clock
	
	
	//Shut down radio if already awake
	radio_pins_init();
	delay_s(1);
    2f28:	cf da       	rcall	.-2658   	; 0x24c8 <radio_pins_init>
    2f2a:	66 e1       	ldi	r22, 0x16	; 22
    2f2c:	76 e1       	ldi	r23, 0x16	; 22
    2f2e:	85 e0       	ldi	r24, 0x05	; 5
    2f30:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t cnt_pwrdwn = 0;
	//check if status is off
	if (STATUS_PORT.IN & (1<<STATUS_PIN))
    2f32:	b0 d8       	rcall	.-3744   	; 0x2094 <__portable_avr_delay_cycles>
    2f34:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
	{
		radio_power_down();
    2f38:	88 23       	and	r24, r24
    2f3a:	1c f4       	brge	.+6      	; 0x2f42 <main+0xf6>
		while ((STATUS_PORT.IN & (1<<STATUS_PIN)) & cnt_pwrdwn < 27)
    2f3c:	f5 da       	rcall	.-2582   	; 0x2528 <radio_power_down>
    2f3e:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
	
	//WDT setup for interrupt
	
	
	//reset data
	reset_tx_data(&tx_data);
    2f42:	78 94       	sei
	reset_tx_date(&tx_date);
    2f44:	8a ee       	ldi	r24, 0xEA	; 234
    2f46:	92 e2       	ldi	r25, 0x22	; 34
    2f48:	a2 da       	rcall	.-2748   	; 0x248e <reset_tx_data>
    2f4a:	83 ee       	ldi	r24, 0xE3	; 227
	
	//RTC
	PR.PRGEN &= ~(1<<2); //enable the RTC clock
    2f4c:	92 e2       	ldi	r25, 0x22	; 34
    2f4e:	b3 da       	rcall	.-2714   	; 0x24b6 <reset_tx_date>
    2f50:	e0 e7       	ldi	r30, 0x70	; 112
    2f52:	f0 e0       	ldi	r31, 0x00	; 0
    2f54:	80 81       	ld	r24, Z
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    2f56:	8b 7f       	andi	r24, 0xFB	; 251
    2f58:	80 83       	st	Z, r24
    2f5a:	e5 e7       	ldi	r30, 0x75	; 117
    2f5c:	f2 e2       	ldi	r31, 0x22	; 34
    2f5e:	10 82       	st	Z, r1
    2f60:	11 82       	std	Z+1, r1	; 0x01
    2f62:	12 82       	std	Z+2, r1	; 0x02
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    2f64:	13 82       	std	Z+3, r1	; 0x03
	sleepmgr_init();
	rtc_init_period(TS); //using RTC as sampler timer.
    2f66:	14 82       	std	Z+4, r1	; 0x04
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	85 83       	std	Z+5, r24	; 0x05
    2f6c:	80 91 0f 20 	lds	r24, 0x200F	; 0x80200f <TS>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    2f70:	90 91 10 20 	lds	r25, 0x2010	; 0x802010 <TS+0x1>
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    2f74:	83 d9       	rcall	.-3322   	; 0x227c <rtc_init_period>
    2f76:	45 e7       	ldi	r20, 0x75	; 117
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    2f78:	52 e2       	ldi	r21, 0x22	; 34

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    2f7a:	28 e4       	ldi	r18, 0x48	; 72
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	f8 94       	cli
    2f80:	da 01       	movw	r26, r20
    2f82:	8c 91       	ld	r24, X
    2f84:	81 11       	cpse	r24, r1
    2f86:	09 c0       	rjmp	.+18     	; 0x2f9a <main+0x14e>
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    2f88:	a6 e7       	ldi	r26, 0x76	; 118

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    2f8a:	b2 e2       	ldi	r27, 0x22	; 34
    2f8c:	e0 e0       	ldi	r30, 0x00	; 0
    2f8e:	ef 5f       	subi	r30, 0xFF	; 255
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    2f90:	8d 91       	ld	r24, X+
    2f92:	88 23       	and	r24, r24
		cpu_irq_enable();
    2f94:	e1 f3       	breq	.-8      	; 0x2f8e <main+0x142>
    2f96:	e1 11       	cpse	r30, r1
    2f98:	02 c0       	rjmp	.+4      	; 0x2f9e <main+0x152>
    2f9a:	78 94       	sei

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    2f9c:	f0 cf       	rjmp	.-32     	; 0x2f7e <main+0x132>
    2f9e:	d9 01       	movw	r26, r18
    2fa0:	8c 91       	ld	r24, X
    2fa2:	f0 e0       	ldi	r31, 0x00	; 0
    2fa4:	e1 50       	subi	r30, 0x01	; 1
    2fa6:	f0 4e       	sbci	r31, 0xE0	; 224
    2fa8:	81 7f       	andi	r24, 0xF1	; 241
	sleep_enable();
    2faa:	90 81       	ld	r25, Z
    2fac:	89 2b       	or	r24, r25
    2fae:	8c 93       	st	X, r24

	cpu_irq_enable();
    2fb0:	8c 91       	ld	r24, X
	sleep_enter();
    2fb2:	81 60       	ori	r24, 0x01	; 1

	sleep_disable();
    2fb4:	8c 93       	st	X, r24
    2fb6:	78 94       	sei
    2fb8:	88 95       	sleep
    2fba:	f9 01       	movw	r30, r18
    2fbc:	80 81       	ld	r24, Z
    2fbe:	8e 7f       	andi	r24, 0xFE	; 254
    2fc0:	80 83       	st	Z, r24
    2fc2:	dd cf       	rjmp	.-70     	; 0x2f7e <main+0x132>

00002fc4 <__divsf3>:
    2fc4:	0c d0       	rcall	.+24     	; 0x2fde <__divsf3x>
    2fc6:	05 c1       	rjmp	.+522    	; 0x31d2 <__fp_round>
    2fc8:	fd d0       	rcall	.+506    	; 0x31c4 <__fp_pscB>
    2fca:	40 f0       	brcs	.+16     	; 0x2fdc <__divsf3+0x18>
    2fcc:	f4 d0       	rcall	.+488    	; 0x31b6 <__fp_pscA>
    2fce:	30 f0       	brcs	.+12     	; 0x2fdc <__divsf3+0x18>
    2fd0:	21 f4       	brne	.+8      	; 0x2fda <__divsf3+0x16>
    2fd2:	5f 3f       	cpi	r21, 0xFF	; 255
    2fd4:	19 f0       	breq	.+6      	; 0x2fdc <__divsf3+0x18>
    2fd6:	d6 c0       	rjmp	.+428    	; 0x3184 <__fp_inf>
    2fd8:	51 11       	cpse	r21, r1
    2fda:	2f c1       	rjmp	.+606    	; 0x323a <__fp_szero>
    2fdc:	d9 c0       	rjmp	.+434    	; 0x3190 <__fp_nan>

00002fde <__divsf3x>:
    2fde:	0a d1       	rcall	.+532    	; 0x31f4 <__fp_split3>
    2fe0:	98 f3       	brcs	.-26     	; 0x2fc8 <__divsf3+0x4>

00002fe2 <__divsf3_pse>:
    2fe2:	99 23       	and	r25, r25
    2fe4:	c9 f3       	breq	.-14     	; 0x2fd8 <__divsf3+0x14>
    2fe6:	55 23       	and	r21, r21
    2fe8:	b1 f3       	breq	.-20     	; 0x2fd6 <__divsf3+0x12>
    2fea:	95 1b       	sub	r25, r21
    2fec:	55 0b       	sbc	r21, r21
    2fee:	bb 27       	eor	r27, r27
    2ff0:	aa 27       	eor	r26, r26
    2ff2:	62 17       	cp	r22, r18
    2ff4:	73 07       	cpc	r23, r19
    2ff6:	84 07       	cpc	r24, r20
    2ff8:	38 f0       	brcs	.+14     	; 0x3008 <__divsf3_pse+0x26>
    2ffa:	9f 5f       	subi	r25, 0xFF	; 255
    2ffc:	5f 4f       	sbci	r21, 0xFF	; 255
    2ffe:	22 0f       	add	r18, r18
    3000:	33 1f       	adc	r19, r19
    3002:	44 1f       	adc	r20, r20
    3004:	aa 1f       	adc	r26, r26
    3006:	a9 f3       	breq	.-22     	; 0x2ff2 <__divsf3_pse+0x10>
    3008:	33 d0       	rcall	.+102    	; 0x3070 <__divsf3_pse+0x8e>
    300a:	0e 2e       	mov	r0, r30
    300c:	3a f0       	brmi	.+14     	; 0x301c <__divsf3_pse+0x3a>
    300e:	e0 e8       	ldi	r30, 0x80	; 128
    3010:	30 d0       	rcall	.+96     	; 0x3072 <__divsf3_pse+0x90>
    3012:	91 50       	subi	r25, 0x01	; 1
    3014:	50 40       	sbci	r21, 0x00	; 0
    3016:	e6 95       	lsr	r30
    3018:	00 1c       	adc	r0, r0
    301a:	ca f7       	brpl	.-14     	; 0x300e <__divsf3_pse+0x2c>
    301c:	29 d0       	rcall	.+82     	; 0x3070 <__divsf3_pse+0x8e>
    301e:	fe 2f       	mov	r31, r30
    3020:	27 d0       	rcall	.+78     	; 0x3070 <__divsf3_pse+0x8e>
    3022:	66 0f       	add	r22, r22
    3024:	77 1f       	adc	r23, r23
    3026:	88 1f       	adc	r24, r24
    3028:	bb 1f       	adc	r27, r27
    302a:	26 17       	cp	r18, r22
    302c:	37 07       	cpc	r19, r23
    302e:	48 07       	cpc	r20, r24
    3030:	ab 07       	cpc	r26, r27
    3032:	b0 e8       	ldi	r27, 0x80	; 128
    3034:	09 f0       	breq	.+2      	; 0x3038 <__divsf3_pse+0x56>
    3036:	bb 0b       	sbc	r27, r27
    3038:	80 2d       	mov	r24, r0
    303a:	bf 01       	movw	r22, r30
    303c:	ff 27       	eor	r31, r31
    303e:	93 58       	subi	r25, 0x83	; 131
    3040:	5f 4f       	sbci	r21, 0xFF	; 255
    3042:	2a f0       	brmi	.+10     	; 0x304e <__divsf3_pse+0x6c>
    3044:	9e 3f       	cpi	r25, 0xFE	; 254
    3046:	51 05       	cpc	r21, r1
    3048:	68 f0       	brcs	.+26     	; 0x3064 <__divsf3_pse+0x82>
    304a:	9c c0       	rjmp	.+312    	; 0x3184 <__fp_inf>
    304c:	f6 c0       	rjmp	.+492    	; 0x323a <__fp_szero>
    304e:	5f 3f       	cpi	r21, 0xFF	; 255
    3050:	ec f3       	brlt	.-6      	; 0x304c <__divsf3_pse+0x6a>
    3052:	98 3e       	cpi	r25, 0xE8	; 232
    3054:	dc f3       	brlt	.-10     	; 0x304c <__divsf3_pse+0x6a>
    3056:	86 95       	lsr	r24
    3058:	77 95       	ror	r23
    305a:	67 95       	ror	r22
    305c:	b7 95       	ror	r27
    305e:	f7 95       	ror	r31
    3060:	9f 5f       	subi	r25, 0xFF	; 255
    3062:	c9 f7       	brne	.-14     	; 0x3056 <__divsf3_pse+0x74>
    3064:	88 0f       	add	r24, r24
    3066:	91 1d       	adc	r25, r1
    3068:	96 95       	lsr	r25
    306a:	87 95       	ror	r24
    306c:	97 f9       	bld	r25, 7
    306e:	08 95       	ret
    3070:	e1 e0       	ldi	r30, 0x01	; 1
    3072:	66 0f       	add	r22, r22
    3074:	77 1f       	adc	r23, r23
    3076:	88 1f       	adc	r24, r24
    3078:	bb 1f       	adc	r27, r27
    307a:	62 17       	cp	r22, r18
    307c:	73 07       	cpc	r23, r19
    307e:	84 07       	cpc	r24, r20
    3080:	ba 07       	cpc	r27, r26
    3082:	20 f0       	brcs	.+8      	; 0x308c <__divsf3_pse+0xaa>
    3084:	62 1b       	sub	r22, r18
    3086:	73 0b       	sbc	r23, r19
    3088:	84 0b       	sbc	r24, r20
    308a:	ba 0b       	sbc	r27, r26
    308c:	ee 1f       	adc	r30, r30
    308e:	88 f7       	brcc	.-30     	; 0x3072 <__divsf3_pse+0x90>
    3090:	e0 95       	com	r30
    3092:	08 95       	ret

00003094 <__fixsfdi>:
    3094:	be e3       	ldi	r27, 0x3E	; 62
    3096:	04 d0       	rcall	.+8      	; 0x30a0 <__fixunssfdi+0x2>
    3098:	08 f4       	brcc	.+2      	; 0x309c <__fixsfdi+0x8>
    309a:	90 e8       	ldi	r25, 0x80	; 128
    309c:	08 95       	ret

0000309e <__fixunssfdi>:
    309e:	bf e3       	ldi	r27, 0x3F	; 63
    30a0:	22 27       	eor	r18, r18
    30a2:	33 27       	eor	r19, r19
    30a4:	a9 01       	movw	r20, r18
    30a6:	ae d0       	rcall	.+348    	; 0x3204 <__fp_splitA>
    30a8:	58 f1       	brcs	.+86     	; 0x3100 <__fixunssfdi+0x62>
    30aa:	9f 57       	subi	r25, 0x7F	; 127
    30ac:	40 f1       	brcs	.+80     	; 0x30fe <__fixunssfdi+0x60>
    30ae:	b9 17       	cp	r27, r25
    30b0:	38 f1       	brcs	.+78     	; 0x3100 <__fixunssfdi+0x62>
    30b2:	bf e3       	ldi	r27, 0x3F	; 63
    30b4:	b9 1b       	sub	r27, r25
    30b6:	99 27       	eor	r25, r25
    30b8:	b8 50       	subi	r27, 0x08	; 8
    30ba:	3a f4       	brpl	.+14     	; 0x30ca <__fixunssfdi+0x2c>
    30bc:	66 0f       	add	r22, r22
    30be:	77 1f       	adc	r23, r23
    30c0:	88 1f       	adc	r24, r24
    30c2:	99 1f       	adc	r25, r25
    30c4:	b3 95       	inc	r27
    30c6:	d2 f3       	brmi	.-12     	; 0x30bc <__fixunssfdi+0x1e>
    30c8:	16 c0       	rjmp	.+44     	; 0x30f6 <__fixunssfdi+0x58>
    30ca:	b8 50       	subi	r27, 0x08	; 8
    30cc:	4a f0       	brmi	.+18     	; 0x30e0 <__fixunssfdi+0x42>
    30ce:	23 2f       	mov	r18, r19
    30d0:	34 2f       	mov	r19, r20
    30d2:	45 2f       	mov	r20, r21
    30d4:	56 2f       	mov	r21, r22
    30d6:	67 2f       	mov	r22, r23
    30d8:	78 2f       	mov	r23, r24
    30da:	88 27       	eor	r24, r24
    30dc:	b8 50       	subi	r27, 0x08	; 8
    30de:	ba f7       	brpl	.-18     	; 0x30ce <__fixunssfdi+0x30>
    30e0:	b8 5f       	subi	r27, 0xF8	; 248
    30e2:	49 f0       	breq	.+18     	; 0x30f6 <__fixunssfdi+0x58>
    30e4:	86 95       	lsr	r24
    30e6:	77 95       	ror	r23
    30e8:	67 95       	ror	r22
    30ea:	57 95       	ror	r21
    30ec:	47 95       	ror	r20
    30ee:	37 95       	ror	r19
    30f0:	27 95       	ror	r18
    30f2:	ba 95       	dec	r27
    30f4:	b9 f7       	brne	.-18     	; 0x30e4 <__fixunssfdi+0x46>
    30f6:	0e f4       	brtc	.+2      	; 0x30fa <__fixunssfdi+0x5c>
    30f8:	4e d0       	rcall	.+156    	; 0x3196 <__fp_negdi>
    30fa:	88 94       	clc
    30fc:	08 95       	ret
    30fe:	88 94       	clc
    3100:	60 e0       	ldi	r22, 0x00	; 0
    3102:	70 e0       	ldi	r23, 0x00	; 0
    3104:	cb 01       	movw	r24, r22
    3106:	08 95       	ret

00003108 <__floatundisf>:
    3108:	e8 94       	clt

0000310a <__fp_di2sf>:
    310a:	f9 2f       	mov	r31, r25
    310c:	96 eb       	ldi	r25, 0xB6	; 182
    310e:	ff 23       	and	r31, r31
    3110:	81 f0       	breq	.+32     	; 0x3132 <__fp_di2sf+0x28>
    3112:	12 16       	cp	r1, r18
    3114:	13 06       	cpc	r1, r19
    3116:	14 06       	cpc	r1, r20
    3118:	44 0b       	sbc	r20, r20
    311a:	93 95       	inc	r25
    311c:	f6 95       	lsr	r31
    311e:	87 95       	ror	r24
    3120:	77 95       	ror	r23
    3122:	67 95       	ror	r22
    3124:	57 95       	ror	r21
    3126:	40 40       	sbci	r20, 0x00	; 0
    3128:	ff 23       	and	r31, r31
    312a:	b9 f7       	brne	.-18     	; 0x311a <__fp_di2sf+0x10>
    312c:	1b c0       	rjmp	.+54     	; 0x3164 <__fp_di2sf+0x5a>
    312e:	99 27       	eor	r25, r25
    3130:	08 95       	ret
    3132:	88 23       	and	r24, r24
    3134:	51 f4       	brne	.+20     	; 0x314a <__fp_di2sf+0x40>
    3136:	98 50       	subi	r25, 0x08	; 8
    3138:	d2 f7       	brpl	.-12     	; 0x312e <__fp_di2sf+0x24>
    313a:	87 2b       	or	r24, r23
    313c:	76 2f       	mov	r23, r22
    313e:	65 2f       	mov	r22, r21
    3140:	54 2f       	mov	r21, r20
    3142:	43 2f       	mov	r20, r19
    3144:	32 2f       	mov	r19, r18
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	b1 f3       	breq	.-20     	; 0x3136 <__fp_di2sf+0x2c>
    314a:	12 16       	cp	r1, r18
    314c:	13 06       	cpc	r1, r19
    314e:	14 06       	cpc	r1, r20
    3150:	44 0b       	sbc	r20, r20
    3152:	88 23       	and	r24, r24
    3154:	3a f0       	brmi	.+14     	; 0x3164 <__fp_di2sf+0x5a>
    3156:	9a 95       	dec	r25
    3158:	44 0f       	add	r20, r20
    315a:	55 1f       	adc	r21, r21
    315c:	66 1f       	adc	r22, r22
    315e:	77 1f       	adc	r23, r23
    3160:	88 1f       	adc	r24, r24
    3162:	ca f7       	brpl	.-14     	; 0x3156 <__fp_di2sf+0x4c>
    3164:	55 23       	and	r21, r21
    3166:	4a f4       	brpl	.+18     	; 0x317a <__fp_di2sf+0x70>
    3168:	44 0f       	add	r20, r20
    316a:	55 1f       	adc	r21, r21
    316c:	11 f4       	brne	.+4      	; 0x3172 <__fp_di2sf+0x68>
    316e:	60 ff       	sbrs	r22, 0
    3170:	04 c0       	rjmp	.+8      	; 0x317a <__fp_di2sf+0x70>
    3172:	6f 5f       	subi	r22, 0xFF	; 255
    3174:	7f 4f       	sbci	r23, 0xFF	; 255
    3176:	8f 4f       	sbci	r24, 0xFF	; 255
    3178:	9f 4f       	sbci	r25, 0xFF	; 255
    317a:	88 0f       	add	r24, r24
    317c:	96 95       	lsr	r25
    317e:	87 95       	ror	r24
    3180:	97 f9       	bld	r25, 7
    3182:	08 95       	ret

00003184 <__fp_inf>:
    3184:	97 f9       	bld	r25, 7
    3186:	9f 67       	ori	r25, 0x7F	; 127
    3188:	80 e8       	ldi	r24, 0x80	; 128
    318a:	70 e0       	ldi	r23, 0x00	; 0
    318c:	60 e0       	ldi	r22, 0x00	; 0
    318e:	08 95       	ret

00003190 <__fp_nan>:
    3190:	9f ef       	ldi	r25, 0xFF	; 255
    3192:	80 ec       	ldi	r24, 0xC0	; 192
    3194:	08 95       	ret

00003196 <__fp_negdi>:
    3196:	90 95       	com	r25
    3198:	80 95       	com	r24
    319a:	70 95       	com	r23
    319c:	60 95       	com	r22
    319e:	50 95       	com	r21
    31a0:	40 95       	com	r20
    31a2:	30 95       	com	r19
    31a4:	21 95       	neg	r18
    31a6:	3f 4f       	sbci	r19, 0xFF	; 255
    31a8:	4f 4f       	sbci	r20, 0xFF	; 255
    31aa:	5f 4f       	sbci	r21, 0xFF	; 255
    31ac:	6f 4f       	sbci	r22, 0xFF	; 255
    31ae:	7f 4f       	sbci	r23, 0xFF	; 255
    31b0:	8f 4f       	sbci	r24, 0xFF	; 255
    31b2:	9f 4f       	sbci	r25, 0xFF	; 255
    31b4:	08 95       	ret

000031b6 <__fp_pscA>:
    31b6:	00 24       	eor	r0, r0
    31b8:	0a 94       	dec	r0
    31ba:	16 16       	cp	r1, r22
    31bc:	17 06       	cpc	r1, r23
    31be:	18 06       	cpc	r1, r24
    31c0:	09 06       	cpc	r0, r25
    31c2:	08 95       	ret

000031c4 <__fp_pscB>:
    31c4:	00 24       	eor	r0, r0
    31c6:	0a 94       	dec	r0
    31c8:	12 16       	cp	r1, r18
    31ca:	13 06       	cpc	r1, r19
    31cc:	14 06       	cpc	r1, r20
    31ce:	05 06       	cpc	r0, r21
    31d0:	08 95       	ret

000031d2 <__fp_round>:
    31d2:	09 2e       	mov	r0, r25
    31d4:	03 94       	inc	r0
    31d6:	00 0c       	add	r0, r0
    31d8:	11 f4       	brne	.+4      	; 0x31de <__fp_round+0xc>
    31da:	88 23       	and	r24, r24
    31dc:	52 f0       	brmi	.+20     	; 0x31f2 <__fp_round+0x20>
    31de:	bb 0f       	add	r27, r27
    31e0:	40 f4       	brcc	.+16     	; 0x31f2 <__fp_round+0x20>
    31e2:	bf 2b       	or	r27, r31
    31e4:	11 f4       	brne	.+4      	; 0x31ea <__fp_round+0x18>
    31e6:	60 ff       	sbrs	r22, 0
    31e8:	04 c0       	rjmp	.+8      	; 0x31f2 <__fp_round+0x20>
    31ea:	6f 5f       	subi	r22, 0xFF	; 255
    31ec:	7f 4f       	sbci	r23, 0xFF	; 255
    31ee:	8f 4f       	sbci	r24, 0xFF	; 255
    31f0:	9f 4f       	sbci	r25, 0xFF	; 255
    31f2:	08 95       	ret

000031f4 <__fp_split3>:
    31f4:	57 fd       	sbrc	r21, 7
    31f6:	90 58       	subi	r25, 0x80	; 128
    31f8:	44 0f       	add	r20, r20
    31fa:	55 1f       	adc	r21, r21
    31fc:	59 f0       	breq	.+22     	; 0x3214 <__fp_splitA+0x10>
    31fe:	5f 3f       	cpi	r21, 0xFF	; 255
    3200:	71 f0       	breq	.+28     	; 0x321e <__fp_splitA+0x1a>
    3202:	47 95       	ror	r20

00003204 <__fp_splitA>:
    3204:	88 0f       	add	r24, r24
    3206:	97 fb       	bst	r25, 7
    3208:	99 1f       	adc	r25, r25
    320a:	61 f0       	breq	.+24     	; 0x3224 <__fp_splitA+0x20>
    320c:	9f 3f       	cpi	r25, 0xFF	; 255
    320e:	79 f0       	breq	.+30     	; 0x322e <__fp_splitA+0x2a>
    3210:	87 95       	ror	r24
    3212:	08 95       	ret
    3214:	12 16       	cp	r1, r18
    3216:	13 06       	cpc	r1, r19
    3218:	14 06       	cpc	r1, r20
    321a:	55 1f       	adc	r21, r21
    321c:	f2 cf       	rjmp	.-28     	; 0x3202 <__fp_split3+0xe>
    321e:	46 95       	lsr	r20
    3220:	f1 df       	rcall	.-30     	; 0x3204 <__fp_splitA>
    3222:	08 c0       	rjmp	.+16     	; 0x3234 <__fp_splitA+0x30>
    3224:	16 16       	cp	r1, r22
    3226:	17 06       	cpc	r1, r23
    3228:	18 06       	cpc	r1, r24
    322a:	99 1f       	adc	r25, r25
    322c:	f1 cf       	rjmp	.-30     	; 0x3210 <__fp_splitA+0xc>
    322e:	86 95       	lsr	r24
    3230:	71 05       	cpc	r23, r1
    3232:	61 05       	cpc	r22, r1
    3234:	08 94       	sec
    3236:	08 95       	ret

00003238 <__fp_zero>:
    3238:	e8 94       	clt

0000323a <__fp_szero>:
    323a:	bb 27       	eor	r27, r27
    323c:	66 27       	eor	r22, r22
    323e:	77 27       	eor	r23, r23
    3240:	cb 01       	movw	r24, r22
    3242:	97 f9       	bld	r25, 7
    3244:	08 95       	ret

00003246 <__udivmodhi4>:
    3246:	aa 1b       	sub	r26, r26
    3248:	bb 1b       	sub	r27, r27
    324a:	51 e1       	ldi	r21, 0x11	; 17
    324c:	07 c0       	rjmp	.+14     	; 0x325c <__udivmodhi4_ep>

0000324e <__udivmodhi4_loop>:
    324e:	aa 1f       	adc	r26, r26
    3250:	bb 1f       	adc	r27, r27
    3252:	a6 17       	cp	r26, r22
    3254:	b7 07       	cpc	r27, r23
    3256:	10 f0       	brcs	.+4      	; 0x325c <__udivmodhi4_ep>
    3258:	a6 1b       	sub	r26, r22
    325a:	b7 0b       	sbc	r27, r23

0000325c <__udivmodhi4_ep>:
    325c:	88 1f       	adc	r24, r24
    325e:	99 1f       	adc	r25, r25
    3260:	5a 95       	dec	r21
    3262:	a9 f7       	brne	.-22     	; 0x324e <__udivmodhi4_loop>
    3264:	80 95       	com	r24
    3266:	90 95       	com	r25
    3268:	bc 01       	movw	r22, r24
    326a:	cd 01       	movw	r24, r26
    326c:	08 95       	ret

0000326e <__udivmodsi4>:
    326e:	a1 e2       	ldi	r26, 0x21	; 33
    3270:	1a 2e       	mov	r1, r26
    3272:	aa 1b       	sub	r26, r26
    3274:	bb 1b       	sub	r27, r27
    3276:	fd 01       	movw	r30, r26
    3278:	0d c0       	rjmp	.+26     	; 0x3294 <__udivmodsi4_ep>

0000327a <__udivmodsi4_loop>:
    327a:	aa 1f       	adc	r26, r26
    327c:	bb 1f       	adc	r27, r27
    327e:	ee 1f       	adc	r30, r30
    3280:	ff 1f       	adc	r31, r31
    3282:	a2 17       	cp	r26, r18
    3284:	b3 07       	cpc	r27, r19
    3286:	e4 07       	cpc	r30, r20
    3288:	f5 07       	cpc	r31, r21
    328a:	20 f0       	brcs	.+8      	; 0x3294 <__udivmodsi4_ep>
    328c:	a2 1b       	sub	r26, r18
    328e:	b3 0b       	sbc	r27, r19
    3290:	e4 0b       	sbc	r30, r20
    3292:	f5 0b       	sbc	r31, r21

00003294 <__udivmodsi4_ep>:
    3294:	66 1f       	adc	r22, r22
    3296:	77 1f       	adc	r23, r23
    3298:	88 1f       	adc	r24, r24
    329a:	99 1f       	adc	r25, r25
    329c:	1a 94       	dec	r1
    329e:	69 f7       	brne	.-38     	; 0x327a <__udivmodsi4_loop>
    32a0:	60 95       	com	r22
    32a2:	70 95       	com	r23
    32a4:	80 95       	com	r24
    32a6:	90 95       	com	r25
    32a8:	9b 01       	movw	r18, r22
    32aa:	ac 01       	movw	r20, r24
    32ac:	bd 01       	movw	r22, r26
    32ae:	cf 01       	movw	r24, r30
    32b0:	08 95       	ret

000032b2 <__muldi3>:
    32b2:	df 93       	push	r29
    32b4:	cf 93       	push	r28
    32b6:	1f 93       	push	r17
    32b8:	0f 93       	push	r16
    32ba:	9a 9d       	mul	r25, r10
    32bc:	f0 2d       	mov	r31, r0
    32be:	21 9f       	mul	r18, r17
    32c0:	f0 0d       	add	r31, r0
    32c2:	8b 9d       	mul	r24, r11
    32c4:	f0 0d       	add	r31, r0
    32c6:	8a 9d       	mul	r24, r10
    32c8:	e0 2d       	mov	r30, r0
    32ca:	f1 0d       	add	r31, r1
    32cc:	03 9f       	mul	r16, r19
    32ce:	f0 0d       	add	r31, r0
    32d0:	02 9f       	mul	r16, r18
    32d2:	e0 0d       	add	r30, r0
    32d4:	f1 1d       	adc	r31, r1
    32d6:	4e 9d       	mul	r20, r14
    32d8:	e0 0d       	add	r30, r0
    32da:	f1 1d       	adc	r31, r1
    32dc:	5e 9d       	mul	r21, r14
    32de:	f0 0d       	add	r31, r0
    32e0:	4f 9d       	mul	r20, r15
    32e2:	f0 0d       	add	r31, r0
    32e4:	7f 93       	push	r23
    32e6:	6f 93       	push	r22
    32e8:	bf 92       	push	r11
    32ea:	af 92       	push	r10
    32ec:	5f 93       	push	r21
    32ee:	4f 93       	push	r20
    32f0:	d5 01       	movw	r26, r10
    32f2:	8e d0       	rcall	.+284    	; 0x3410 <__umulhisi3>
    32f4:	8b 01       	movw	r16, r22
    32f6:	ac 01       	movw	r20, r24
    32f8:	d7 01       	movw	r26, r14
    32fa:	8a d0       	rcall	.+276    	; 0x3410 <__umulhisi3>
    32fc:	eb 01       	movw	r28, r22
    32fe:	e8 0f       	add	r30, r24
    3300:	f9 1f       	adc	r31, r25
    3302:	d6 01       	movw	r26, r12
    3304:	1f d0       	rcall	.+62     	; 0x3344 <__muldi3_6>
    3306:	2f 91       	pop	r18
    3308:	3f 91       	pop	r19
    330a:	d6 01       	movw	r26, r12
    330c:	81 d0       	rcall	.+258    	; 0x3410 <__umulhisi3>
    330e:	c6 0f       	add	r28, r22
    3310:	d7 1f       	adc	r29, r23
    3312:	e8 1f       	adc	r30, r24
    3314:	f9 1f       	adc	r31, r25
    3316:	af 91       	pop	r26
    3318:	bf 91       	pop	r27
    331a:	14 d0       	rcall	.+40     	; 0x3344 <__muldi3_6>
    331c:	2f 91       	pop	r18
    331e:	3f 91       	pop	r19
    3320:	77 d0       	rcall	.+238    	; 0x3410 <__umulhisi3>
    3322:	c6 0f       	add	r28, r22
    3324:	d7 1f       	adc	r29, r23
    3326:	e8 1f       	adc	r30, r24
    3328:	f9 1f       	adc	r31, r25
    332a:	d6 01       	movw	r26, r12
    332c:	71 d0       	rcall	.+226    	; 0x3410 <__umulhisi3>
    332e:	e6 0f       	add	r30, r22
    3330:	f7 1f       	adc	r31, r23
    3332:	98 01       	movw	r18, r16
    3334:	be 01       	movw	r22, r28
    3336:	cf 01       	movw	r24, r30
    3338:	11 24       	eor	r1, r1
    333a:	0f 91       	pop	r16
    333c:	1f 91       	pop	r17
    333e:	cf 91       	pop	r28
    3340:	df 91       	pop	r29
    3342:	08 95       	ret

00003344 <__muldi3_6>:
    3344:	65 d0       	rcall	.+202    	; 0x3410 <__umulhisi3>
    3346:	46 0f       	add	r20, r22
    3348:	57 1f       	adc	r21, r23
    334a:	c8 1f       	adc	r28, r24
    334c:	d9 1f       	adc	r29, r25
    334e:	08 f4       	brcc	.+2      	; 0x3352 <__muldi3_6+0xe>
    3350:	31 96       	adiw	r30, 0x01	; 1
    3352:	08 95       	ret

00003354 <__umoddi3>:
    3354:	68 94       	set
    3356:	01 c0       	rjmp	.+2      	; 0x335a <__udivdi3_umoddi3>

00003358 <__udivdi3>:
    3358:	e8 94       	clt

0000335a <__udivdi3_umoddi3>:
    335a:	8f 92       	push	r8
    335c:	9f 92       	push	r9
    335e:	cf 93       	push	r28
    3360:	df 93       	push	r29
    3362:	05 d0       	rcall	.+10     	; 0x336e <__udivmod64>
    3364:	df 91       	pop	r29
    3366:	cf 91       	pop	r28
    3368:	9f 90       	pop	r9
    336a:	8f 90       	pop	r8
    336c:	08 95       	ret

0000336e <__udivmod64>:
    336e:	88 24       	eor	r8, r8
    3370:	99 24       	eor	r9, r9
    3372:	f4 01       	movw	r30, r8
    3374:	e4 01       	movw	r28, r8
    3376:	b0 e4       	ldi	r27, 0x40	; 64
    3378:	9f 93       	push	r25
    337a:	aa 27       	eor	r26, r26
    337c:	9a 15       	cp	r25, r10
    337e:	8b 04       	cpc	r8, r11
    3380:	9c 04       	cpc	r9, r12
    3382:	ed 05       	cpc	r30, r13
    3384:	fe 05       	cpc	r31, r14
    3386:	cf 05       	cpc	r28, r15
    3388:	d0 07       	cpc	r29, r16
    338a:	a1 07       	cpc	r26, r17
    338c:	98 f4       	brcc	.+38     	; 0x33b4 <__udivmod64+0x46>
    338e:	ad 2f       	mov	r26, r29
    3390:	dc 2f       	mov	r29, r28
    3392:	cf 2f       	mov	r28, r31
    3394:	fe 2f       	mov	r31, r30
    3396:	e9 2d       	mov	r30, r9
    3398:	98 2c       	mov	r9, r8
    339a:	89 2e       	mov	r8, r25
    339c:	98 2f       	mov	r25, r24
    339e:	87 2f       	mov	r24, r23
    33a0:	76 2f       	mov	r23, r22
    33a2:	65 2f       	mov	r22, r21
    33a4:	54 2f       	mov	r21, r20
    33a6:	43 2f       	mov	r20, r19
    33a8:	32 2f       	mov	r19, r18
    33aa:	22 27       	eor	r18, r18
    33ac:	b8 50       	subi	r27, 0x08	; 8
    33ae:	31 f7       	brne	.-52     	; 0x337c <__udivmod64+0xe>
    33b0:	bf 91       	pop	r27
    33b2:	27 c0       	rjmp	.+78     	; 0x3402 <__udivmod64+0x94>
    33b4:	1b 2e       	mov	r1, r27
    33b6:	bf 91       	pop	r27
    33b8:	bb 27       	eor	r27, r27
    33ba:	22 0f       	add	r18, r18
    33bc:	33 1f       	adc	r19, r19
    33be:	44 1f       	adc	r20, r20
    33c0:	55 1f       	adc	r21, r21
    33c2:	66 1f       	adc	r22, r22
    33c4:	77 1f       	adc	r23, r23
    33c6:	88 1f       	adc	r24, r24
    33c8:	99 1f       	adc	r25, r25
    33ca:	88 1c       	adc	r8, r8
    33cc:	99 1c       	adc	r9, r9
    33ce:	ee 1f       	adc	r30, r30
    33d0:	ff 1f       	adc	r31, r31
    33d2:	cc 1f       	adc	r28, r28
    33d4:	dd 1f       	adc	r29, r29
    33d6:	aa 1f       	adc	r26, r26
    33d8:	bb 1f       	adc	r27, r27
    33da:	8a 14       	cp	r8, r10
    33dc:	9b 04       	cpc	r9, r11
    33de:	ec 05       	cpc	r30, r12
    33e0:	fd 05       	cpc	r31, r13
    33e2:	ce 05       	cpc	r28, r14
    33e4:	df 05       	cpc	r29, r15
    33e6:	a0 07       	cpc	r26, r16
    33e8:	b1 07       	cpc	r27, r17
    33ea:	48 f0       	brcs	.+18     	; 0x33fe <__udivmod64+0x90>
    33ec:	8a 18       	sub	r8, r10
    33ee:	9b 08       	sbc	r9, r11
    33f0:	ec 09       	sbc	r30, r12
    33f2:	fd 09       	sbc	r31, r13
    33f4:	ce 09       	sbc	r28, r14
    33f6:	df 09       	sbc	r29, r15
    33f8:	a0 0b       	sbc	r26, r16
    33fa:	b1 0b       	sbc	r27, r17
    33fc:	21 60       	ori	r18, 0x01	; 1
    33fe:	1a 94       	dec	r1
    3400:	e1 f6       	brne	.-72     	; 0x33ba <__udivmod64+0x4c>
    3402:	2e f4       	brtc	.+10     	; 0x340e <__udivmod64+0xa0>
    3404:	94 01       	movw	r18, r8
    3406:	af 01       	movw	r20, r30
    3408:	be 01       	movw	r22, r28
    340a:	cd 01       	movw	r24, r26
    340c:	00 0c       	add	r0, r0
    340e:	08 95       	ret

00003410 <__umulhisi3>:
    3410:	a2 9f       	mul	r26, r18
    3412:	b0 01       	movw	r22, r0
    3414:	b3 9f       	mul	r27, r19
    3416:	c0 01       	movw	r24, r0
    3418:	a3 9f       	mul	r26, r19
    341a:	70 0d       	add	r23, r0
    341c:	81 1d       	adc	r24, r1
    341e:	11 24       	eor	r1, r1
    3420:	91 1d       	adc	r25, r1
    3422:	b2 9f       	mul	r27, r18
    3424:	70 0d       	add	r23, r0
    3426:	81 1d       	adc	r24, r1
    3428:	11 24       	eor	r1, r1
    342a:	91 1d       	adc	r25, r1
    342c:	08 95       	ret

0000342e <atoi>:
    342e:	fc 01       	movw	r30, r24
    3430:	88 27       	eor	r24, r24
    3432:	99 27       	eor	r25, r25
    3434:	e8 94       	clt
    3436:	21 91       	ld	r18, Z+
    3438:	20 32       	cpi	r18, 0x20	; 32
    343a:	e9 f3       	breq	.-6      	; 0x3436 <atoi+0x8>
    343c:	29 30       	cpi	r18, 0x09	; 9
    343e:	10 f0       	brcs	.+4      	; 0x3444 <atoi+0x16>
    3440:	2e 30       	cpi	r18, 0x0E	; 14
    3442:	c8 f3       	brcs	.-14     	; 0x3436 <atoi+0x8>
    3444:	2b 32       	cpi	r18, 0x2B	; 43
    3446:	39 f0       	breq	.+14     	; 0x3456 <atoi+0x28>
    3448:	2d 32       	cpi	r18, 0x2D	; 45
    344a:	31 f4       	brne	.+12     	; 0x3458 <atoi+0x2a>
    344c:	68 94       	set
    344e:	03 c0       	rjmp	.+6      	; 0x3456 <atoi+0x28>
    3450:	41 d0       	rcall	.+130    	; 0x34d4 <__mulhi_const_10>
    3452:	82 0f       	add	r24, r18
    3454:	91 1d       	adc	r25, r1
    3456:	21 91       	ld	r18, Z+
    3458:	20 53       	subi	r18, 0x30	; 48
    345a:	2a 30       	cpi	r18, 0x0A	; 10
    345c:	c8 f3       	brcs	.-14     	; 0x3450 <atoi+0x22>
    345e:	1e f4       	brtc	.+6      	; 0x3466 <atoi+0x38>
    3460:	90 95       	com	r25
    3462:	81 95       	neg	r24
    3464:	9f 4f       	sbci	r25, 0xFF	; 255
    3466:	08 95       	ret

00003468 <strcat>:
    3468:	fb 01       	movw	r30, r22
    346a:	dc 01       	movw	r26, r24
    346c:	0d 90       	ld	r0, X+
    346e:	00 20       	and	r0, r0
    3470:	e9 f7       	brne	.-6      	; 0x346c <strcat+0x4>
    3472:	11 97       	sbiw	r26, 0x01	; 1
    3474:	01 90       	ld	r0, Z+
    3476:	0d 92       	st	X+, r0
    3478:	00 20       	and	r0, r0
    347a:	e1 f7       	brne	.-8      	; 0x3474 <strcat+0xc>
    347c:	08 95       	ret

0000347e <strcpy>:
    347e:	fb 01       	movw	r30, r22
    3480:	dc 01       	movw	r26, r24
    3482:	01 90       	ld	r0, Z+
    3484:	0d 92       	st	X+, r0
    3486:	00 20       	and	r0, r0
    3488:	e1 f7       	brne	.-8      	; 0x3482 <strcpy+0x4>
    348a:	08 95       	ret

0000348c <strstr>:
    348c:	fb 01       	movw	r30, r22
    348e:	51 91       	ld	r21, Z+
    3490:	55 23       	and	r21, r21
    3492:	a9 f0       	breq	.+42     	; 0x34be <strstr+0x32>
    3494:	bf 01       	movw	r22, r30
    3496:	dc 01       	movw	r26, r24
    3498:	4d 91       	ld	r20, X+
    349a:	45 17       	cp	r20, r21
    349c:	41 11       	cpse	r20, r1
    349e:	e1 f7       	brne	.-8      	; 0x3498 <strstr+0xc>
    34a0:	59 f4       	brne	.+22     	; 0x34b8 <strstr+0x2c>
    34a2:	cd 01       	movw	r24, r26
    34a4:	01 90       	ld	r0, Z+
    34a6:	00 20       	and	r0, r0
    34a8:	49 f0       	breq	.+18     	; 0x34bc <strstr+0x30>
    34aa:	4d 91       	ld	r20, X+
    34ac:	40 15       	cp	r20, r0
    34ae:	41 11       	cpse	r20, r1
    34b0:	c9 f3       	breq	.-14     	; 0x34a4 <strstr+0x18>
    34b2:	fb 01       	movw	r30, r22
    34b4:	41 11       	cpse	r20, r1
    34b6:	ef cf       	rjmp	.-34     	; 0x3496 <strstr+0xa>
    34b8:	81 e0       	ldi	r24, 0x01	; 1
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	01 97       	sbiw	r24, 0x01	; 1
    34be:	08 95       	ret

000034c0 <__itoa_ncheck>:
    34c0:	bb 27       	eor	r27, r27
    34c2:	4a 30       	cpi	r20, 0x0A	; 10
    34c4:	31 f4       	brne	.+12     	; 0x34d2 <__itoa_ncheck+0x12>
    34c6:	99 23       	and	r25, r25
    34c8:	22 f4       	brpl	.+8      	; 0x34d2 <__itoa_ncheck+0x12>
    34ca:	bd e2       	ldi	r27, 0x2D	; 45
    34cc:	90 95       	com	r25
    34ce:	81 95       	neg	r24
    34d0:	9f 4f       	sbci	r25, 0xFF	; 255
    34d2:	09 c0       	rjmp	.+18     	; 0x34e6 <__utoa_common>

000034d4 <__mulhi_const_10>:
    34d4:	7a e0       	ldi	r23, 0x0A	; 10
    34d6:	97 9f       	mul	r25, r23
    34d8:	90 2d       	mov	r25, r0
    34da:	87 9f       	mul	r24, r23
    34dc:	80 2d       	mov	r24, r0
    34de:	91 0d       	add	r25, r1
    34e0:	11 24       	eor	r1, r1
    34e2:	08 95       	ret

000034e4 <__utoa_ncheck>:
    34e4:	bb 27       	eor	r27, r27

000034e6 <__utoa_common>:
    34e6:	fb 01       	movw	r30, r22
    34e8:	55 27       	eor	r21, r21
    34ea:	aa 27       	eor	r26, r26
    34ec:	88 0f       	add	r24, r24
    34ee:	99 1f       	adc	r25, r25
    34f0:	aa 1f       	adc	r26, r26
    34f2:	a4 17       	cp	r26, r20
    34f4:	10 f0       	brcs	.+4      	; 0x34fa <__utoa_common+0x14>
    34f6:	a4 1b       	sub	r26, r20
    34f8:	83 95       	inc	r24
    34fa:	50 51       	subi	r21, 0x10	; 16
    34fc:	b9 f7       	brne	.-18     	; 0x34ec <__utoa_common+0x6>
    34fe:	a0 5d       	subi	r26, 0xD0	; 208
    3500:	aa 33       	cpi	r26, 0x3A	; 58
    3502:	08 f0       	brcs	.+2      	; 0x3506 <__utoa_common+0x20>
    3504:	a9 5d       	subi	r26, 0xD9	; 217
    3506:	a1 93       	st	Z+, r26
    3508:	00 97       	sbiw	r24, 0x00	; 0
    350a:	79 f7       	brne	.-34     	; 0x34ea <__utoa_common+0x4>
    350c:	b1 11       	cpse	r27, r1
    350e:	b1 93       	st	Z+, r27
    3510:	11 92       	st	Z+, r1
    3512:	cb 01       	movw	r24, r22
    3514:	35 c2       	rjmp	.+1130   	; 0x3980 <strrev>

00003516 <sprintf>:
    3516:	0f 93       	push	r16
    3518:	1f 93       	push	r17
    351a:	cf 93       	push	r28
    351c:	df 93       	push	r29
    351e:	cd b7       	in	r28, 0x3d	; 61
    3520:	de b7       	in	r29, 0x3e	; 62
    3522:	2e 97       	sbiw	r28, 0x0e	; 14
    3524:	cd bf       	out	0x3d, r28	; 61
    3526:	de bf       	out	0x3e, r29	; 62
    3528:	0e 89       	ldd	r16, Y+22	; 0x16
    352a:	1f 89       	ldd	r17, Y+23	; 0x17
    352c:	86 e0       	ldi	r24, 0x06	; 6
    352e:	8c 83       	std	Y+4, r24	; 0x04
    3530:	09 83       	std	Y+1, r16	; 0x01
    3532:	1a 83       	std	Y+2, r17	; 0x02
    3534:	8f ef       	ldi	r24, 0xFF	; 255
    3536:	9f e7       	ldi	r25, 0x7F	; 127
    3538:	8d 83       	std	Y+5, r24	; 0x05
    353a:	9e 83       	std	Y+6, r25	; 0x06
    353c:	ae 01       	movw	r20, r28
    353e:	46 5e       	subi	r20, 0xE6	; 230
    3540:	5f 4f       	sbci	r21, 0xFF	; 255
    3542:	68 8d       	ldd	r22, Y+24	; 0x18
    3544:	79 8d       	ldd	r23, Y+25	; 0x19
    3546:	ce 01       	movw	r24, r28
    3548:	01 96       	adiw	r24, 0x01	; 1
    354a:	0d d0       	rcall	.+26     	; 0x3566 <vfprintf>
    354c:	ef 81       	ldd	r30, Y+7	; 0x07
    354e:	f8 85       	ldd	r31, Y+8	; 0x08
    3550:	e0 0f       	add	r30, r16
    3552:	f1 1f       	adc	r31, r17
    3554:	10 82       	st	Z, r1
    3556:	2e 96       	adiw	r28, 0x0e	; 14
    3558:	cd bf       	out	0x3d, r28	; 61
    355a:	de bf       	out	0x3e, r29	; 62
    355c:	df 91       	pop	r29
    355e:	cf 91       	pop	r28
    3560:	1f 91       	pop	r17
    3562:	0f 91       	pop	r16
    3564:	08 95       	ret

00003566 <vfprintf>:
    3566:	2f 92       	push	r2
    3568:	3f 92       	push	r3
    356a:	4f 92       	push	r4
    356c:	5f 92       	push	r5
    356e:	6f 92       	push	r6
    3570:	7f 92       	push	r7
    3572:	8f 92       	push	r8
    3574:	9f 92       	push	r9
    3576:	af 92       	push	r10
    3578:	bf 92       	push	r11
    357a:	cf 92       	push	r12
    357c:	df 92       	push	r13
    357e:	ef 92       	push	r14
    3580:	ff 92       	push	r15
    3582:	0f 93       	push	r16
    3584:	1f 93       	push	r17
    3586:	cf 93       	push	r28
    3588:	df 93       	push	r29
    358a:	cd b7       	in	r28, 0x3d	; 61
    358c:	de b7       	in	r29, 0x3e	; 62
    358e:	2b 97       	sbiw	r28, 0x0b	; 11
    3590:	cd bf       	out	0x3d, r28	; 61
    3592:	de bf       	out	0x3e, r29	; 62
    3594:	6c 01       	movw	r12, r24
    3596:	7b 01       	movw	r14, r22
    3598:	8a 01       	movw	r16, r20
    359a:	fc 01       	movw	r30, r24
    359c:	16 82       	std	Z+6, r1	; 0x06
    359e:	17 82       	std	Z+7, r1	; 0x07
    35a0:	83 81       	ldd	r24, Z+3	; 0x03
    35a2:	81 ff       	sbrs	r24, 1
    35a4:	bf c1       	rjmp	.+894    	; 0x3924 <vfprintf+0x3be>
    35a6:	ce 01       	movw	r24, r28
    35a8:	01 96       	adiw	r24, 0x01	; 1
    35aa:	3c 01       	movw	r6, r24
    35ac:	f6 01       	movw	r30, r12
    35ae:	93 81       	ldd	r25, Z+3	; 0x03
    35b0:	f7 01       	movw	r30, r14
    35b2:	93 fd       	sbrc	r25, 3
    35b4:	85 91       	lpm	r24, Z+
    35b6:	93 ff       	sbrs	r25, 3
    35b8:	81 91       	ld	r24, Z+
    35ba:	7f 01       	movw	r14, r30
    35bc:	88 23       	and	r24, r24
    35be:	09 f4       	brne	.+2      	; 0x35c2 <vfprintf+0x5c>
    35c0:	ad c1       	rjmp	.+858    	; 0x391c <vfprintf+0x3b6>
    35c2:	85 32       	cpi	r24, 0x25	; 37
    35c4:	39 f4       	brne	.+14     	; 0x35d4 <vfprintf+0x6e>
    35c6:	93 fd       	sbrc	r25, 3
    35c8:	85 91       	lpm	r24, Z+
    35ca:	93 ff       	sbrs	r25, 3
    35cc:	81 91       	ld	r24, Z+
    35ce:	7f 01       	movw	r14, r30
    35d0:	85 32       	cpi	r24, 0x25	; 37
    35d2:	21 f4       	brne	.+8      	; 0x35dc <vfprintf+0x76>
    35d4:	b6 01       	movw	r22, r12
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	e3 d1       	rcall	.+966    	; 0x39a0 <fputc>
    35da:	e8 cf       	rjmp	.-48     	; 0x35ac <vfprintf+0x46>
    35dc:	91 2c       	mov	r9, r1
    35de:	21 2c       	mov	r2, r1
    35e0:	31 2c       	mov	r3, r1
    35e2:	ff e1       	ldi	r31, 0x1F	; 31
    35e4:	f3 15       	cp	r31, r3
    35e6:	d8 f0       	brcs	.+54     	; 0x361e <vfprintf+0xb8>
    35e8:	8b 32       	cpi	r24, 0x2B	; 43
    35ea:	79 f0       	breq	.+30     	; 0x360a <vfprintf+0xa4>
    35ec:	38 f4       	brcc	.+14     	; 0x35fc <vfprintf+0x96>
    35ee:	80 32       	cpi	r24, 0x20	; 32
    35f0:	79 f0       	breq	.+30     	; 0x3610 <vfprintf+0xaa>
    35f2:	83 32       	cpi	r24, 0x23	; 35
    35f4:	a1 f4       	brne	.+40     	; 0x361e <vfprintf+0xb8>
    35f6:	23 2d       	mov	r18, r3
    35f8:	20 61       	ori	r18, 0x10	; 16
    35fa:	1d c0       	rjmp	.+58     	; 0x3636 <vfprintf+0xd0>
    35fc:	8d 32       	cpi	r24, 0x2D	; 45
    35fe:	61 f0       	breq	.+24     	; 0x3618 <vfprintf+0xb2>
    3600:	80 33       	cpi	r24, 0x30	; 48
    3602:	69 f4       	brne	.+26     	; 0x361e <vfprintf+0xb8>
    3604:	23 2d       	mov	r18, r3
    3606:	21 60       	ori	r18, 0x01	; 1
    3608:	16 c0       	rjmp	.+44     	; 0x3636 <vfprintf+0xd0>
    360a:	83 2d       	mov	r24, r3
    360c:	82 60       	ori	r24, 0x02	; 2
    360e:	38 2e       	mov	r3, r24
    3610:	e3 2d       	mov	r30, r3
    3612:	e4 60       	ori	r30, 0x04	; 4
    3614:	3e 2e       	mov	r3, r30
    3616:	2a c0       	rjmp	.+84     	; 0x366c <vfprintf+0x106>
    3618:	f3 2d       	mov	r31, r3
    361a:	f8 60       	ori	r31, 0x08	; 8
    361c:	1d c0       	rjmp	.+58     	; 0x3658 <vfprintf+0xf2>
    361e:	37 fc       	sbrc	r3, 7
    3620:	2d c0       	rjmp	.+90     	; 0x367c <vfprintf+0x116>
    3622:	20 ed       	ldi	r18, 0xD0	; 208
    3624:	28 0f       	add	r18, r24
    3626:	2a 30       	cpi	r18, 0x0A	; 10
    3628:	40 f0       	brcs	.+16     	; 0x363a <vfprintf+0xd4>
    362a:	8e 32       	cpi	r24, 0x2E	; 46
    362c:	b9 f4       	brne	.+46     	; 0x365c <vfprintf+0xf6>
    362e:	36 fc       	sbrc	r3, 6
    3630:	75 c1       	rjmp	.+746    	; 0x391c <vfprintf+0x3b6>
    3632:	23 2d       	mov	r18, r3
    3634:	20 64       	ori	r18, 0x40	; 64
    3636:	32 2e       	mov	r3, r18
    3638:	19 c0       	rjmp	.+50     	; 0x366c <vfprintf+0x106>
    363a:	36 fe       	sbrs	r3, 6
    363c:	06 c0       	rjmp	.+12     	; 0x364a <vfprintf+0xe4>
    363e:	8a e0       	ldi	r24, 0x0A	; 10
    3640:	98 9e       	mul	r9, r24
    3642:	20 0d       	add	r18, r0
    3644:	11 24       	eor	r1, r1
    3646:	92 2e       	mov	r9, r18
    3648:	11 c0       	rjmp	.+34     	; 0x366c <vfprintf+0x106>
    364a:	ea e0       	ldi	r30, 0x0A	; 10
    364c:	2e 9e       	mul	r2, r30
    364e:	20 0d       	add	r18, r0
    3650:	11 24       	eor	r1, r1
    3652:	22 2e       	mov	r2, r18
    3654:	f3 2d       	mov	r31, r3
    3656:	f0 62       	ori	r31, 0x20	; 32
    3658:	3f 2e       	mov	r3, r31
    365a:	08 c0       	rjmp	.+16     	; 0x366c <vfprintf+0x106>
    365c:	8c 36       	cpi	r24, 0x6C	; 108
    365e:	21 f4       	brne	.+8      	; 0x3668 <vfprintf+0x102>
    3660:	83 2d       	mov	r24, r3
    3662:	80 68       	ori	r24, 0x80	; 128
    3664:	38 2e       	mov	r3, r24
    3666:	02 c0       	rjmp	.+4      	; 0x366c <vfprintf+0x106>
    3668:	88 36       	cpi	r24, 0x68	; 104
    366a:	41 f4       	brne	.+16     	; 0x367c <vfprintf+0x116>
    366c:	f7 01       	movw	r30, r14
    366e:	93 fd       	sbrc	r25, 3
    3670:	85 91       	lpm	r24, Z+
    3672:	93 ff       	sbrs	r25, 3
    3674:	81 91       	ld	r24, Z+
    3676:	7f 01       	movw	r14, r30
    3678:	81 11       	cpse	r24, r1
    367a:	b3 cf       	rjmp	.-154    	; 0x35e2 <vfprintf+0x7c>
    367c:	98 2f       	mov	r25, r24
    367e:	9f 7d       	andi	r25, 0xDF	; 223
    3680:	95 54       	subi	r25, 0x45	; 69
    3682:	93 30       	cpi	r25, 0x03	; 3
    3684:	28 f4       	brcc	.+10     	; 0x3690 <vfprintf+0x12a>
    3686:	0c 5f       	subi	r16, 0xFC	; 252
    3688:	1f 4f       	sbci	r17, 0xFF	; 255
    368a:	9f e3       	ldi	r25, 0x3F	; 63
    368c:	99 83       	std	Y+1, r25	; 0x01
    368e:	0d c0       	rjmp	.+26     	; 0x36aa <vfprintf+0x144>
    3690:	83 36       	cpi	r24, 0x63	; 99
    3692:	31 f0       	breq	.+12     	; 0x36a0 <vfprintf+0x13a>
    3694:	83 37       	cpi	r24, 0x73	; 115
    3696:	71 f0       	breq	.+28     	; 0x36b4 <vfprintf+0x14e>
    3698:	83 35       	cpi	r24, 0x53	; 83
    369a:	09 f0       	breq	.+2      	; 0x369e <vfprintf+0x138>
    369c:	55 c0       	rjmp	.+170    	; 0x3748 <vfprintf+0x1e2>
    369e:	20 c0       	rjmp	.+64     	; 0x36e0 <vfprintf+0x17a>
    36a0:	f8 01       	movw	r30, r16
    36a2:	80 81       	ld	r24, Z
    36a4:	89 83       	std	Y+1, r24	; 0x01
    36a6:	0e 5f       	subi	r16, 0xFE	; 254
    36a8:	1f 4f       	sbci	r17, 0xFF	; 255
    36aa:	88 24       	eor	r8, r8
    36ac:	83 94       	inc	r8
    36ae:	91 2c       	mov	r9, r1
    36b0:	53 01       	movw	r10, r6
    36b2:	12 c0       	rjmp	.+36     	; 0x36d8 <vfprintf+0x172>
    36b4:	28 01       	movw	r4, r16
    36b6:	f2 e0       	ldi	r31, 0x02	; 2
    36b8:	4f 0e       	add	r4, r31
    36ba:	51 1c       	adc	r5, r1
    36bc:	f8 01       	movw	r30, r16
    36be:	a0 80       	ld	r10, Z
    36c0:	b1 80       	ldd	r11, Z+1	; 0x01
    36c2:	36 fe       	sbrs	r3, 6
    36c4:	03 c0       	rjmp	.+6      	; 0x36cc <vfprintf+0x166>
    36c6:	69 2d       	mov	r22, r9
    36c8:	70 e0       	ldi	r23, 0x00	; 0
    36ca:	02 c0       	rjmp	.+4      	; 0x36d0 <vfprintf+0x16a>
    36cc:	6f ef       	ldi	r22, 0xFF	; 255
    36ce:	7f ef       	ldi	r23, 0xFF	; 255
    36d0:	c5 01       	movw	r24, r10
    36d2:	4b d1       	rcall	.+662    	; 0x396a <strnlen>
    36d4:	4c 01       	movw	r8, r24
    36d6:	82 01       	movw	r16, r4
    36d8:	f3 2d       	mov	r31, r3
    36da:	ff 77       	andi	r31, 0x7F	; 127
    36dc:	3f 2e       	mov	r3, r31
    36de:	15 c0       	rjmp	.+42     	; 0x370a <vfprintf+0x1a4>
    36e0:	28 01       	movw	r4, r16
    36e2:	22 e0       	ldi	r18, 0x02	; 2
    36e4:	42 0e       	add	r4, r18
    36e6:	51 1c       	adc	r5, r1
    36e8:	f8 01       	movw	r30, r16
    36ea:	a0 80       	ld	r10, Z
    36ec:	b1 80       	ldd	r11, Z+1	; 0x01
    36ee:	36 fe       	sbrs	r3, 6
    36f0:	03 c0       	rjmp	.+6      	; 0x36f8 <vfprintf+0x192>
    36f2:	69 2d       	mov	r22, r9
    36f4:	70 e0       	ldi	r23, 0x00	; 0
    36f6:	02 c0       	rjmp	.+4      	; 0x36fc <vfprintf+0x196>
    36f8:	6f ef       	ldi	r22, 0xFF	; 255
    36fa:	7f ef       	ldi	r23, 0xFF	; 255
    36fc:	c5 01       	movw	r24, r10
    36fe:	2a d1       	rcall	.+596    	; 0x3954 <strnlen_P>
    3700:	4c 01       	movw	r8, r24
    3702:	f3 2d       	mov	r31, r3
    3704:	f0 68       	ori	r31, 0x80	; 128
    3706:	3f 2e       	mov	r3, r31
    3708:	82 01       	movw	r16, r4
    370a:	33 fc       	sbrc	r3, 3
    370c:	19 c0       	rjmp	.+50     	; 0x3740 <vfprintf+0x1da>
    370e:	82 2d       	mov	r24, r2
    3710:	90 e0       	ldi	r25, 0x00	; 0
    3712:	88 16       	cp	r8, r24
    3714:	99 06       	cpc	r9, r25
    3716:	a0 f4       	brcc	.+40     	; 0x3740 <vfprintf+0x1da>
    3718:	b6 01       	movw	r22, r12
    371a:	80 e2       	ldi	r24, 0x20	; 32
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	40 d1       	rcall	.+640    	; 0x39a0 <fputc>
    3720:	2a 94       	dec	r2
    3722:	f5 cf       	rjmp	.-22     	; 0x370e <vfprintf+0x1a8>
    3724:	f5 01       	movw	r30, r10
    3726:	37 fc       	sbrc	r3, 7
    3728:	85 91       	lpm	r24, Z+
    372a:	37 fe       	sbrs	r3, 7
    372c:	81 91       	ld	r24, Z+
    372e:	5f 01       	movw	r10, r30
    3730:	b6 01       	movw	r22, r12
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	35 d1       	rcall	.+618    	; 0x39a0 <fputc>
    3736:	21 10       	cpse	r2, r1
    3738:	2a 94       	dec	r2
    373a:	21 e0       	ldi	r18, 0x01	; 1
    373c:	82 1a       	sub	r8, r18
    373e:	91 08       	sbc	r9, r1
    3740:	81 14       	cp	r8, r1
    3742:	91 04       	cpc	r9, r1
    3744:	79 f7       	brne	.-34     	; 0x3724 <vfprintf+0x1be>
    3746:	e1 c0       	rjmp	.+450    	; 0x390a <vfprintf+0x3a4>
    3748:	84 36       	cpi	r24, 0x64	; 100
    374a:	11 f0       	breq	.+4      	; 0x3750 <vfprintf+0x1ea>
    374c:	89 36       	cpi	r24, 0x69	; 105
    374e:	39 f5       	brne	.+78     	; 0x379e <vfprintf+0x238>
    3750:	f8 01       	movw	r30, r16
    3752:	37 fe       	sbrs	r3, 7
    3754:	07 c0       	rjmp	.+14     	; 0x3764 <vfprintf+0x1fe>
    3756:	60 81       	ld	r22, Z
    3758:	71 81       	ldd	r23, Z+1	; 0x01
    375a:	82 81       	ldd	r24, Z+2	; 0x02
    375c:	93 81       	ldd	r25, Z+3	; 0x03
    375e:	0c 5f       	subi	r16, 0xFC	; 252
    3760:	1f 4f       	sbci	r17, 0xFF	; 255
    3762:	08 c0       	rjmp	.+16     	; 0x3774 <vfprintf+0x20e>
    3764:	60 81       	ld	r22, Z
    3766:	71 81       	ldd	r23, Z+1	; 0x01
    3768:	07 2e       	mov	r0, r23
    376a:	00 0c       	add	r0, r0
    376c:	88 0b       	sbc	r24, r24
    376e:	99 0b       	sbc	r25, r25
    3770:	0e 5f       	subi	r16, 0xFE	; 254
    3772:	1f 4f       	sbci	r17, 0xFF	; 255
    3774:	f3 2d       	mov	r31, r3
    3776:	ff 76       	andi	r31, 0x6F	; 111
    3778:	3f 2e       	mov	r3, r31
    377a:	97 ff       	sbrs	r25, 7
    377c:	09 c0       	rjmp	.+18     	; 0x3790 <vfprintf+0x22a>
    377e:	90 95       	com	r25
    3780:	80 95       	com	r24
    3782:	70 95       	com	r23
    3784:	61 95       	neg	r22
    3786:	7f 4f       	sbci	r23, 0xFF	; 255
    3788:	8f 4f       	sbci	r24, 0xFF	; 255
    378a:	9f 4f       	sbci	r25, 0xFF	; 255
    378c:	f0 68       	ori	r31, 0x80	; 128
    378e:	3f 2e       	mov	r3, r31
    3790:	2a e0       	ldi	r18, 0x0A	; 10
    3792:	30 e0       	ldi	r19, 0x00	; 0
    3794:	a3 01       	movw	r20, r6
    3796:	40 d1       	rcall	.+640    	; 0x3a18 <__ultoa_invert>
    3798:	88 2e       	mov	r8, r24
    379a:	86 18       	sub	r8, r6
    379c:	44 c0       	rjmp	.+136    	; 0x3826 <vfprintf+0x2c0>
    379e:	85 37       	cpi	r24, 0x75	; 117
    37a0:	31 f4       	brne	.+12     	; 0x37ae <vfprintf+0x248>
    37a2:	23 2d       	mov	r18, r3
    37a4:	2f 7e       	andi	r18, 0xEF	; 239
    37a6:	b2 2e       	mov	r11, r18
    37a8:	2a e0       	ldi	r18, 0x0A	; 10
    37aa:	30 e0       	ldi	r19, 0x00	; 0
    37ac:	25 c0       	rjmp	.+74     	; 0x37f8 <vfprintf+0x292>
    37ae:	93 2d       	mov	r25, r3
    37b0:	99 7f       	andi	r25, 0xF9	; 249
    37b2:	b9 2e       	mov	r11, r25
    37b4:	8f 36       	cpi	r24, 0x6F	; 111
    37b6:	c1 f0       	breq	.+48     	; 0x37e8 <vfprintf+0x282>
    37b8:	18 f4       	brcc	.+6      	; 0x37c0 <vfprintf+0x25a>
    37ba:	88 35       	cpi	r24, 0x58	; 88
    37bc:	79 f0       	breq	.+30     	; 0x37dc <vfprintf+0x276>
    37be:	ae c0       	rjmp	.+348    	; 0x391c <vfprintf+0x3b6>
    37c0:	80 37       	cpi	r24, 0x70	; 112
    37c2:	19 f0       	breq	.+6      	; 0x37ca <vfprintf+0x264>
    37c4:	88 37       	cpi	r24, 0x78	; 120
    37c6:	21 f0       	breq	.+8      	; 0x37d0 <vfprintf+0x26a>
    37c8:	a9 c0       	rjmp	.+338    	; 0x391c <vfprintf+0x3b6>
    37ca:	e9 2f       	mov	r30, r25
    37cc:	e0 61       	ori	r30, 0x10	; 16
    37ce:	be 2e       	mov	r11, r30
    37d0:	b4 fe       	sbrs	r11, 4
    37d2:	0d c0       	rjmp	.+26     	; 0x37ee <vfprintf+0x288>
    37d4:	fb 2d       	mov	r31, r11
    37d6:	f4 60       	ori	r31, 0x04	; 4
    37d8:	bf 2e       	mov	r11, r31
    37da:	09 c0       	rjmp	.+18     	; 0x37ee <vfprintf+0x288>
    37dc:	34 fe       	sbrs	r3, 4
    37de:	0a c0       	rjmp	.+20     	; 0x37f4 <vfprintf+0x28e>
    37e0:	29 2f       	mov	r18, r25
    37e2:	26 60       	ori	r18, 0x06	; 6
    37e4:	b2 2e       	mov	r11, r18
    37e6:	06 c0       	rjmp	.+12     	; 0x37f4 <vfprintf+0x28e>
    37e8:	28 e0       	ldi	r18, 0x08	; 8
    37ea:	30 e0       	ldi	r19, 0x00	; 0
    37ec:	05 c0       	rjmp	.+10     	; 0x37f8 <vfprintf+0x292>
    37ee:	20 e1       	ldi	r18, 0x10	; 16
    37f0:	30 e0       	ldi	r19, 0x00	; 0
    37f2:	02 c0       	rjmp	.+4      	; 0x37f8 <vfprintf+0x292>
    37f4:	20 e1       	ldi	r18, 0x10	; 16
    37f6:	32 e0       	ldi	r19, 0x02	; 2
    37f8:	f8 01       	movw	r30, r16
    37fa:	b7 fe       	sbrs	r11, 7
    37fc:	07 c0       	rjmp	.+14     	; 0x380c <vfprintf+0x2a6>
    37fe:	60 81       	ld	r22, Z
    3800:	71 81       	ldd	r23, Z+1	; 0x01
    3802:	82 81       	ldd	r24, Z+2	; 0x02
    3804:	93 81       	ldd	r25, Z+3	; 0x03
    3806:	0c 5f       	subi	r16, 0xFC	; 252
    3808:	1f 4f       	sbci	r17, 0xFF	; 255
    380a:	06 c0       	rjmp	.+12     	; 0x3818 <vfprintf+0x2b2>
    380c:	60 81       	ld	r22, Z
    380e:	71 81       	ldd	r23, Z+1	; 0x01
    3810:	80 e0       	ldi	r24, 0x00	; 0
    3812:	90 e0       	ldi	r25, 0x00	; 0
    3814:	0e 5f       	subi	r16, 0xFE	; 254
    3816:	1f 4f       	sbci	r17, 0xFF	; 255
    3818:	a3 01       	movw	r20, r6
    381a:	fe d0       	rcall	.+508    	; 0x3a18 <__ultoa_invert>
    381c:	88 2e       	mov	r8, r24
    381e:	86 18       	sub	r8, r6
    3820:	fb 2d       	mov	r31, r11
    3822:	ff 77       	andi	r31, 0x7F	; 127
    3824:	3f 2e       	mov	r3, r31
    3826:	36 fe       	sbrs	r3, 6
    3828:	0d c0       	rjmp	.+26     	; 0x3844 <vfprintf+0x2de>
    382a:	23 2d       	mov	r18, r3
    382c:	2e 7f       	andi	r18, 0xFE	; 254
    382e:	a2 2e       	mov	r10, r18
    3830:	89 14       	cp	r8, r9
    3832:	58 f4       	brcc	.+22     	; 0x384a <vfprintf+0x2e4>
    3834:	34 fe       	sbrs	r3, 4
    3836:	0b c0       	rjmp	.+22     	; 0x384e <vfprintf+0x2e8>
    3838:	32 fc       	sbrc	r3, 2
    383a:	09 c0       	rjmp	.+18     	; 0x384e <vfprintf+0x2e8>
    383c:	83 2d       	mov	r24, r3
    383e:	8e 7e       	andi	r24, 0xEE	; 238
    3840:	a8 2e       	mov	r10, r24
    3842:	05 c0       	rjmp	.+10     	; 0x384e <vfprintf+0x2e8>
    3844:	b8 2c       	mov	r11, r8
    3846:	a3 2c       	mov	r10, r3
    3848:	03 c0       	rjmp	.+6      	; 0x3850 <vfprintf+0x2ea>
    384a:	b8 2c       	mov	r11, r8
    384c:	01 c0       	rjmp	.+2      	; 0x3850 <vfprintf+0x2ea>
    384e:	b9 2c       	mov	r11, r9
    3850:	a4 fe       	sbrs	r10, 4
    3852:	0f c0       	rjmp	.+30     	; 0x3872 <vfprintf+0x30c>
    3854:	fe 01       	movw	r30, r28
    3856:	e8 0d       	add	r30, r8
    3858:	f1 1d       	adc	r31, r1
    385a:	80 81       	ld	r24, Z
    385c:	80 33       	cpi	r24, 0x30	; 48
    385e:	21 f4       	brne	.+8      	; 0x3868 <vfprintf+0x302>
    3860:	9a 2d       	mov	r25, r10
    3862:	99 7e       	andi	r25, 0xE9	; 233
    3864:	a9 2e       	mov	r10, r25
    3866:	09 c0       	rjmp	.+18     	; 0x387a <vfprintf+0x314>
    3868:	a2 fe       	sbrs	r10, 2
    386a:	06 c0       	rjmp	.+12     	; 0x3878 <vfprintf+0x312>
    386c:	b3 94       	inc	r11
    386e:	b3 94       	inc	r11
    3870:	04 c0       	rjmp	.+8      	; 0x387a <vfprintf+0x314>
    3872:	8a 2d       	mov	r24, r10
    3874:	86 78       	andi	r24, 0x86	; 134
    3876:	09 f0       	breq	.+2      	; 0x387a <vfprintf+0x314>
    3878:	b3 94       	inc	r11
    387a:	a3 fc       	sbrc	r10, 3
    387c:	10 c0       	rjmp	.+32     	; 0x389e <vfprintf+0x338>
    387e:	a0 fe       	sbrs	r10, 0
    3880:	06 c0       	rjmp	.+12     	; 0x388e <vfprintf+0x328>
    3882:	b2 14       	cp	r11, r2
    3884:	80 f4       	brcc	.+32     	; 0x38a6 <vfprintf+0x340>
    3886:	28 0c       	add	r2, r8
    3888:	92 2c       	mov	r9, r2
    388a:	9b 18       	sub	r9, r11
    388c:	0d c0       	rjmp	.+26     	; 0x38a8 <vfprintf+0x342>
    388e:	b2 14       	cp	r11, r2
    3890:	58 f4       	brcc	.+22     	; 0x38a8 <vfprintf+0x342>
    3892:	b6 01       	movw	r22, r12
    3894:	80 e2       	ldi	r24, 0x20	; 32
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	83 d0       	rcall	.+262    	; 0x39a0 <fputc>
    389a:	b3 94       	inc	r11
    389c:	f8 cf       	rjmp	.-16     	; 0x388e <vfprintf+0x328>
    389e:	b2 14       	cp	r11, r2
    38a0:	18 f4       	brcc	.+6      	; 0x38a8 <vfprintf+0x342>
    38a2:	2b 18       	sub	r2, r11
    38a4:	02 c0       	rjmp	.+4      	; 0x38aa <vfprintf+0x344>
    38a6:	98 2c       	mov	r9, r8
    38a8:	21 2c       	mov	r2, r1
    38aa:	a4 fe       	sbrs	r10, 4
    38ac:	0f c0       	rjmp	.+30     	; 0x38cc <vfprintf+0x366>
    38ae:	b6 01       	movw	r22, r12
    38b0:	80 e3       	ldi	r24, 0x30	; 48
    38b2:	90 e0       	ldi	r25, 0x00	; 0
    38b4:	75 d0       	rcall	.+234    	; 0x39a0 <fputc>
    38b6:	a2 fe       	sbrs	r10, 2
    38b8:	16 c0       	rjmp	.+44     	; 0x38e6 <vfprintf+0x380>
    38ba:	a1 fc       	sbrc	r10, 1
    38bc:	03 c0       	rjmp	.+6      	; 0x38c4 <vfprintf+0x35e>
    38be:	88 e7       	ldi	r24, 0x78	; 120
    38c0:	90 e0       	ldi	r25, 0x00	; 0
    38c2:	02 c0       	rjmp	.+4      	; 0x38c8 <vfprintf+0x362>
    38c4:	88 e5       	ldi	r24, 0x58	; 88
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	b6 01       	movw	r22, r12
    38ca:	0c c0       	rjmp	.+24     	; 0x38e4 <vfprintf+0x37e>
    38cc:	8a 2d       	mov	r24, r10
    38ce:	86 78       	andi	r24, 0x86	; 134
    38d0:	51 f0       	breq	.+20     	; 0x38e6 <vfprintf+0x380>
    38d2:	a1 fe       	sbrs	r10, 1
    38d4:	02 c0       	rjmp	.+4      	; 0x38da <vfprintf+0x374>
    38d6:	8b e2       	ldi	r24, 0x2B	; 43
    38d8:	01 c0       	rjmp	.+2      	; 0x38dc <vfprintf+0x376>
    38da:	80 e2       	ldi	r24, 0x20	; 32
    38dc:	a7 fc       	sbrc	r10, 7
    38de:	8d e2       	ldi	r24, 0x2D	; 45
    38e0:	b6 01       	movw	r22, r12
    38e2:	90 e0       	ldi	r25, 0x00	; 0
    38e4:	5d d0       	rcall	.+186    	; 0x39a0 <fputc>
    38e6:	89 14       	cp	r8, r9
    38e8:	30 f4       	brcc	.+12     	; 0x38f6 <vfprintf+0x390>
    38ea:	b6 01       	movw	r22, r12
    38ec:	80 e3       	ldi	r24, 0x30	; 48
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	57 d0       	rcall	.+174    	; 0x39a0 <fputc>
    38f2:	9a 94       	dec	r9
    38f4:	f8 cf       	rjmp	.-16     	; 0x38e6 <vfprintf+0x380>
    38f6:	8a 94       	dec	r8
    38f8:	f3 01       	movw	r30, r6
    38fa:	e8 0d       	add	r30, r8
    38fc:	f1 1d       	adc	r31, r1
    38fe:	80 81       	ld	r24, Z
    3900:	b6 01       	movw	r22, r12
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	4d d0       	rcall	.+154    	; 0x39a0 <fputc>
    3906:	81 10       	cpse	r8, r1
    3908:	f6 cf       	rjmp	.-20     	; 0x38f6 <vfprintf+0x390>
    390a:	22 20       	and	r2, r2
    390c:	09 f4       	brne	.+2      	; 0x3910 <vfprintf+0x3aa>
    390e:	4e ce       	rjmp	.-868    	; 0x35ac <vfprintf+0x46>
    3910:	b6 01       	movw	r22, r12
    3912:	80 e2       	ldi	r24, 0x20	; 32
    3914:	90 e0       	ldi	r25, 0x00	; 0
    3916:	44 d0       	rcall	.+136    	; 0x39a0 <fputc>
    3918:	2a 94       	dec	r2
    391a:	f7 cf       	rjmp	.-18     	; 0x390a <vfprintf+0x3a4>
    391c:	f6 01       	movw	r30, r12
    391e:	86 81       	ldd	r24, Z+6	; 0x06
    3920:	97 81       	ldd	r25, Z+7	; 0x07
    3922:	02 c0       	rjmp	.+4      	; 0x3928 <vfprintf+0x3c2>
    3924:	8f ef       	ldi	r24, 0xFF	; 255
    3926:	9f ef       	ldi	r25, 0xFF	; 255
    3928:	2b 96       	adiw	r28, 0x0b	; 11
    392a:	cd bf       	out	0x3d, r28	; 61
    392c:	de bf       	out	0x3e, r29	; 62
    392e:	df 91       	pop	r29
    3930:	cf 91       	pop	r28
    3932:	1f 91       	pop	r17
    3934:	0f 91       	pop	r16
    3936:	ff 90       	pop	r15
    3938:	ef 90       	pop	r14
    393a:	df 90       	pop	r13
    393c:	cf 90       	pop	r12
    393e:	bf 90       	pop	r11
    3940:	af 90       	pop	r10
    3942:	9f 90       	pop	r9
    3944:	8f 90       	pop	r8
    3946:	7f 90       	pop	r7
    3948:	6f 90       	pop	r6
    394a:	5f 90       	pop	r5
    394c:	4f 90       	pop	r4
    394e:	3f 90       	pop	r3
    3950:	2f 90       	pop	r2
    3952:	08 95       	ret

00003954 <strnlen_P>:
    3954:	fc 01       	movw	r30, r24
    3956:	05 90       	lpm	r0, Z+
    3958:	61 50       	subi	r22, 0x01	; 1
    395a:	70 40       	sbci	r23, 0x00	; 0
    395c:	01 10       	cpse	r0, r1
    395e:	d8 f7       	brcc	.-10     	; 0x3956 <strnlen_P+0x2>
    3960:	80 95       	com	r24
    3962:	90 95       	com	r25
    3964:	8e 0f       	add	r24, r30
    3966:	9f 1f       	adc	r25, r31
    3968:	08 95       	ret

0000396a <strnlen>:
    396a:	fc 01       	movw	r30, r24
    396c:	61 50       	subi	r22, 0x01	; 1
    396e:	70 40       	sbci	r23, 0x00	; 0
    3970:	01 90       	ld	r0, Z+
    3972:	01 10       	cpse	r0, r1
    3974:	d8 f7       	brcc	.-10     	; 0x396c <strnlen+0x2>
    3976:	80 95       	com	r24
    3978:	90 95       	com	r25
    397a:	8e 0f       	add	r24, r30
    397c:	9f 1f       	adc	r25, r31
    397e:	08 95       	ret

00003980 <strrev>:
    3980:	dc 01       	movw	r26, r24
    3982:	fc 01       	movw	r30, r24
    3984:	67 2f       	mov	r22, r23
    3986:	71 91       	ld	r23, Z+
    3988:	77 23       	and	r23, r23
    398a:	e1 f7       	brne	.-8      	; 0x3984 <strrev+0x4>
    398c:	32 97       	sbiw	r30, 0x02	; 2
    398e:	04 c0       	rjmp	.+8      	; 0x3998 <strrev+0x18>
    3990:	7c 91       	ld	r23, X
    3992:	6d 93       	st	X+, r22
    3994:	70 83       	st	Z, r23
    3996:	62 91       	ld	r22, -Z
    3998:	ae 17       	cp	r26, r30
    399a:	bf 07       	cpc	r27, r31
    399c:	c8 f3       	brcs	.-14     	; 0x3990 <strrev+0x10>
    399e:	08 95       	ret

000039a0 <fputc>:
    39a0:	0f 93       	push	r16
    39a2:	1f 93       	push	r17
    39a4:	cf 93       	push	r28
    39a6:	df 93       	push	r29
    39a8:	fb 01       	movw	r30, r22
    39aa:	23 81       	ldd	r18, Z+3	; 0x03
    39ac:	21 fd       	sbrc	r18, 1
    39ae:	03 c0       	rjmp	.+6      	; 0x39b6 <fputc+0x16>
    39b0:	8f ef       	ldi	r24, 0xFF	; 255
    39b2:	9f ef       	ldi	r25, 0xFF	; 255
    39b4:	2c c0       	rjmp	.+88     	; 0x3a0e <fputc+0x6e>
    39b6:	22 ff       	sbrs	r18, 2
    39b8:	16 c0       	rjmp	.+44     	; 0x39e6 <fputc+0x46>
    39ba:	46 81       	ldd	r20, Z+6	; 0x06
    39bc:	57 81       	ldd	r21, Z+7	; 0x07
    39be:	24 81       	ldd	r18, Z+4	; 0x04
    39c0:	35 81       	ldd	r19, Z+5	; 0x05
    39c2:	42 17       	cp	r20, r18
    39c4:	53 07       	cpc	r21, r19
    39c6:	44 f4       	brge	.+16     	; 0x39d8 <fputc+0x38>
    39c8:	a0 81       	ld	r26, Z
    39ca:	b1 81       	ldd	r27, Z+1	; 0x01
    39cc:	9d 01       	movw	r18, r26
    39ce:	2f 5f       	subi	r18, 0xFF	; 255
    39d0:	3f 4f       	sbci	r19, 0xFF	; 255
    39d2:	20 83       	st	Z, r18
    39d4:	31 83       	std	Z+1, r19	; 0x01
    39d6:	8c 93       	st	X, r24
    39d8:	26 81       	ldd	r18, Z+6	; 0x06
    39da:	37 81       	ldd	r19, Z+7	; 0x07
    39dc:	2f 5f       	subi	r18, 0xFF	; 255
    39de:	3f 4f       	sbci	r19, 0xFF	; 255
    39e0:	26 83       	std	Z+6, r18	; 0x06
    39e2:	37 83       	std	Z+7, r19	; 0x07
    39e4:	14 c0       	rjmp	.+40     	; 0x3a0e <fputc+0x6e>
    39e6:	8b 01       	movw	r16, r22
    39e8:	ec 01       	movw	r28, r24
    39ea:	fb 01       	movw	r30, r22
    39ec:	00 84       	ldd	r0, Z+8	; 0x08
    39ee:	f1 85       	ldd	r31, Z+9	; 0x09
    39f0:	e0 2d       	mov	r30, r0
    39f2:	19 95       	eicall
    39f4:	89 2b       	or	r24, r25
    39f6:	e1 f6       	brne	.-72     	; 0x39b0 <fputc+0x10>
    39f8:	d8 01       	movw	r26, r16
    39fa:	16 96       	adiw	r26, 0x06	; 6
    39fc:	8d 91       	ld	r24, X+
    39fe:	9c 91       	ld	r25, X
    3a00:	17 97       	sbiw	r26, 0x07	; 7
    3a02:	01 96       	adiw	r24, 0x01	; 1
    3a04:	16 96       	adiw	r26, 0x06	; 6
    3a06:	8d 93       	st	X+, r24
    3a08:	9c 93       	st	X, r25
    3a0a:	17 97       	sbiw	r26, 0x07	; 7
    3a0c:	ce 01       	movw	r24, r28
    3a0e:	df 91       	pop	r29
    3a10:	cf 91       	pop	r28
    3a12:	1f 91       	pop	r17
    3a14:	0f 91       	pop	r16
    3a16:	08 95       	ret

00003a18 <__ultoa_invert>:
    3a18:	fa 01       	movw	r30, r20
    3a1a:	aa 27       	eor	r26, r26
    3a1c:	28 30       	cpi	r18, 0x08	; 8
    3a1e:	51 f1       	breq	.+84     	; 0x3a74 <__ultoa_invert+0x5c>
    3a20:	20 31       	cpi	r18, 0x10	; 16
    3a22:	81 f1       	breq	.+96     	; 0x3a84 <__ultoa_invert+0x6c>
    3a24:	e8 94       	clt
    3a26:	6f 93       	push	r22
    3a28:	6e 7f       	andi	r22, 0xFE	; 254
    3a2a:	6e 5f       	subi	r22, 0xFE	; 254
    3a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    3a2e:	8f 4f       	sbci	r24, 0xFF	; 255
    3a30:	9f 4f       	sbci	r25, 0xFF	; 255
    3a32:	af 4f       	sbci	r26, 0xFF	; 255
    3a34:	b1 e0       	ldi	r27, 0x01	; 1
    3a36:	3e d0       	rcall	.+124    	; 0x3ab4 <__ultoa_invert+0x9c>
    3a38:	b4 e0       	ldi	r27, 0x04	; 4
    3a3a:	3c d0       	rcall	.+120    	; 0x3ab4 <__ultoa_invert+0x9c>
    3a3c:	67 0f       	add	r22, r23
    3a3e:	78 1f       	adc	r23, r24
    3a40:	89 1f       	adc	r24, r25
    3a42:	9a 1f       	adc	r25, r26
    3a44:	a1 1d       	adc	r26, r1
    3a46:	68 0f       	add	r22, r24
    3a48:	79 1f       	adc	r23, r25
    3a4a:	8a 1f       	adc	r24, r26
    3a4c:	91 1d       	adc	r25, r1
    3a4e:	a1 1d       	adc	r26, r1
    3a50:	6a 0f       	add	r22, r26
    3a52:	71 1d       	adc	r23, r1
    3a54:	81 1d       	adc	r24, r1
    3a56:	91 1d       	adc	r25, r1
    3a58:	a1 1d       	adc	r26, r1
    3a5a:	20 d0       	rcall	.+64     	; 0x3a9c <__ultoa_invert+0x84>
    3a5c:	09 f4       	brne	.+2      	; 0x3a60 <__ultoa_invert+0x48>
    3a5e:	68 94       	set
    3a60:	3f 91       	pop	r19
    3a62:	2a e0       	ldi	r18, 0x0A	; 10
    3a64:	26 9f       	mul	r18, r22
    3a66:	11 24       	eor	r1, r1
    3a68:	30 19       	sub	r19, r0
    3a6a:	30 5d       	subi	r19, 0xD0	; 208
    3a6c:	31 93       	st	Z+, r19
    3a6e:	de f6       	brtc	.-74     	; 0x3a26 <__ultoa_invert+0xe>
    3a70:	cf 01       	movw	r24, r30
    3a72:	08 95       	ret
    3a74:	46 2f       	mov	r20, r22
    3a76:	47 70       	andi	r20, 0x07	; 7
    3a78:	40 5d       	subi	r20, 0xD0	; 208
    3a7a:	41 93       	st	Z+, r20
    3a7c:	b3 e0       	ldi	r27, 0x03	; 3
    3a7e:	0f d0       	rcall	.+30     	; 0x3a9e <__ultoa_invert+0x86>
    3a80:	c9 f7       	brne	.-14     	; 0x3a74 <__ultoa_invert+0x5c>
    3a82:	f6 cf       	rjmp	.-20     	; 0x3a70 <__ultoa_invert+0x58>
    3a84:	46 2f       	mov	r20, r22
    3a86:	4f 70       	andi	r20, 0x0F	; 15
    3a88:	40 5d       	subi	r20, 0xD0	; 208
    3a8a:	4a 33       	cpi	r20, 0x3A	; 58
    3a8c:	18 f0       	brcs	.+6      	; 0x3a94 <__ultoa_invert+0x7c>
    3a8e:	49 5d       	subi	r20, 0xD9	; 217
    3a90:	31 fd       	sbrc	r19, 1
    3a92:	40 52       	subi	r20, 0x20	; 32
    3a94:	41 93       	st	Z+, r20
    3a96:	02 d0       	rcall	.+4      	; 0x3a9c <__ultoa_invert+0x84>
    3a98:	a9 f7       	brne	.-22     	; 0x3a84 <__ultoa_invert+0x6c>
    3a9a:	ea cf       	rjmp	.-44     	; 0x3a70 <__ultoa_invert+0x58>
    3a9c:	b4 e0       	ldi	r27, 0x04	; 4
    3a9e:	a6 95       	lsr	r26
    3aa0:	97 95       	ror	r25
    3aa2:	87 95       	ror	r24
    3aa4:	77 95       	ror	r23
    3aa6:	67 95       	ror	r22
    3aa8:	ba 95       	dec	r27
    3aaa:	c9 f7       	brne	.-14     	; 0x3a9e <__ultoa_invert+0x86>
    3aac:	00 97       	sbiw	r24, 0x00	; 0
    3aae:	61 05       	cpc	r22, r1
    3ab0:	71 05       	cpc	r23, r1
    3ab2:	08 95       	ret
    3ab4:	9b 01       	movw	r18, r22
    3ab6:	ac 01       	movw	r20, r24
    3ab8:	0a 2e       	mov	r0, r26
    3aba:	06 94       	lsr	r0
    3abc:	57 95       	ror	r21
    3abe:	47 95       	ror	r20
    3ac0:	37 95       	ror	r19
    3ac2:	27 95       	ror	r18
    3ac4:	ba 95       	dec	r27
    3ac6:	c9 f7       	brne	.-14     	; 0x3aba <__ultoa_invert+0xa2>
    3ac8:	62 0f       	add	r22, r18
    3aca:	73 1f       	adc	r23, r19
    3acc:	84 1f       	adc	r24, r20
    3ace:	95 1f       	adc	r25, r21
    3ad0:	a0 1d       	adc	r26, r0
    3ad2:	08 95       	ret

00003ad4 <_exit>:
    3ad4:	f8 94       	cli

00003ad6 <__stop_program>:
    3ad6:	ff cf       	rjmp	.-2      	; 0x3ad6 <__stop_program>
