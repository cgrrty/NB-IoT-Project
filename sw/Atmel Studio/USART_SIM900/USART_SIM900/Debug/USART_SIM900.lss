
USART_SIM900.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001bea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000090  00802000  00001bea  00001c7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000095  00802090  00802090  00001d0e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001d0e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  00001db0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d094  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004f37  00000000  00000000  0000f0dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004a34  00000000  00000000  00014013  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000aa8  00000000  00000000  00018a48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00035491  00000000  00000000  000194f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003663  00000000  00000000  0004e981  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d8  00000000  00000000  00051fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000bef6  00000000  00000000  000522c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	21 c1       	rjmp	.+578    	; 0x248 <__bad_interrupt>
       6:	00 00       	nop
       8:	1f c1       	rjmp	.+574    	; 0x248 <__bad_interrupt>
       a:	00 00       	nop
       c:	1d c1       	rjmp	.+570    	; 0x248 <__bad_interrupt>
       e:	00 00       	nop
      10:	1b c1       	rjmp	.+566    	; 0x248 <__bad_interrupt>
      12:	00 00       	nop
      14:	19 c1       	rjmp	.+562    	; 0x248 <__bad_interrupt>
      16:	00 00       	nop
      18:	17 c1       	rjmp	.+558    	; 0x248 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	15 c1       	rjmp	.+554    	; 0x248 <__bad_interrupt>
      1e:	00 00       	nop
      20:	13 c1       	rjmp	.+550    	; 0x248 <__bad_interrupt>
      22:	00 00       	nop
      24:	11 c1       	rjmp	.+546    	; 0x248 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 ac 09 	jmp	0x1358	; 0x1358 <__vector_10>
      2c:	0d c1       	rjmp	.+538    	; 0x248 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0b c1       	rjmp	.+534    	; 0x248 <__bad_interrupt>
      32:	00 00       	nop
      34:	09 c1       	rjmp	.+530    	; 0x248 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 77 09 	jmp	0x12ee	; 0x12ee <__vector_14>
      3c:	05 c1       	rjmp	.+522    	; 0x248 <__bad_interrupt>
      3e:	00 00       	nop
      40:	03 c1       	rjmp	.+518    	; 0x248 <__bad_interrupt>
      42:	00 00       	nop
      44:	01 c1       	rjmp	.+514    	; 0x248 <__bad_interrupt>
      46:	00 00       	nop
      48:	ff c0       	rjmp	.+510    	; 0x248 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fd c0       	rjmp	.+506    	; 0x248 <__bad_interrupt>
      4e:	00 00       	nop
      50:	fb c0       	rjmp	.+502    	; 0x248 <__bad_interrupt>
      52:	00 00       	nop
      54:	f9 c0       	rjmp	.+498    	; 0x248 <__bad_interrupt>
      56:	00 00       	nop
      58:	f7 c0       	rjmp	.+494    	; 0x248 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f5 c0       	rjmp	.+490    	; 0x248 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f3 c0       	rjmp	.+486    	; 0x248 <__bad_interrupt>
      62:	00 00       	nop
      64:	f1 c0       	rjmp	.+482    	; 0x248 <__bad_interrupt>
      66:	00 00       	nop
      68:	ef c0       	rjmp	.+478    	; 0x248 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ed c0       	rjmp	.+474    	; 0x248 <__bad_interrupt>
      6e:	00 00       	nop
      70:	eb c0       	rjmp	.+470    	; 0x248 <__bad_interrupt>
      72:	00 00       	nop
      74:	e9 c0       	rjmp	.+466    	; 0x248 <__bad_interrupt>
      76:	00 00       	nop
      78:	e7 c0       	rjmp	.+462    	; 0x248 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e5 c0       	rjmp	.+458    	; 0x248 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e3 c0       	rjmp	.+454    	; 0x248 <__bad_interrupt>
      82:	00 00       	nop
      84:	e1 c0       	rjmp	.+450    	; 0x248 <__bad_interrupt>
      86:	00 00       	nop
      88:	df c0       	rjmp	.+446    	; 0x248 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dd c0       	rjmp	.+442    	; 0x248 <__bad_interrupt>
      8e:	00 00       	nop
      90:	db c0       	rjmp	.+438    	; 0x248 <__bad_interrupt>
      92:	00 00       	nop
      94:	d9 c0       	rjmp	.+434    	; 0x248 <__bad_interrupt>
      96:	00 00       	nop
      98:	d7 c0       	rjmp	.+430    	; 0x248 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	32 c2       	rjmp	.+1124   	; 0x502 <__vector_39>
      9e:	00 00       	nop
      a0:	6d c2       	rjmp	.+1242   	; 0x57c <__vector_40>
      a2:	00 00       	nop
      a4:	a8 c2       	rjmp	.+1360   	; 0x5f6 <__vector_41>
      a6:	00 00       	nop
      a8:	e3 c2       	rjmp	.+1478   	; 0x670 <__vector_42>
      aa:	00 00       	nop
      ac:	cd c0       	rjmp	.+410    	; 0x248 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cb c0       	rjmp	.+406    	; 0x248 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c9 c0       	rjmp	.+402    	; 0x248 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c7 c0       	rjmp	.+398    	; 0x248 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c5 c0       	rjmp	.+394    	; 0x248 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c3 c0       	rjmp	.+390    	; 0x248 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c1 c0       	rjmp	.+386    	; 0x248 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	bf c0       	rjmp	.+382    	; 0x248 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bd c0       	rjmp	.+378    	; 0x248 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	bb c0       	rjmp	.+374    	; 0x248 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b9 c0       	rjmp	.+370    	; 0x248 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b7 c0       	rjmp	.+366    	; 0x248 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b5 c0       	rjmp	.+362    	; 0x248 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b3 c0       	rjmp	.+358    	; 0x248 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b1 c0       	rjmp	.+354    	; 0x248 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	af c0       	rjmp	.+350    	; 0x248 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ad c0       	rjmp	.+346    	; 0x248 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ab c0       	rjmp	.+342    	; 0x248 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a9 c0       	rjmp	.+338    	; 0x248 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a7 c0       	rjmp	.+334    	; 0x248 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a5 c0       	rjmp	.+330    	; 0x248 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a3 c0       	rjmp	.+326    	; 0x248 <__bad_interrupt>
     102:	00 00       	nop
     104:	a1 c0       	rjmp	.+322    	; 0x248 <__bad_interrupt>
     106:	00 00       	nop
     108:	9f c0       	rjmp	.+318    	; 0x248 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9d c0       	rjmp	.+314    	; 0x248 <__bad_interrupt>
     10e:	00 00       	nop
     110:	9b c0       	rjmp	.+310    	; 0x248 <__bad_interrupt>
     112:	00 00       	nop
     114:	99 c0       	rjmp	.+306    	; 0x248 <__bad_interrupt>
     116:	00 00       	nop
     118:	97 c0       	rjmp	.+302    	; 0x248 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	fe c0       	rjmp	.+508    	; 0x31a <__vector_71>
     11e:	00 00       	nop
     120:	39 c1       	rjmp	.+626    	; 0x394 <__vector_72>
     122:	00 00       	nop
     124:	74 c1       	rjmp	.+744    	; 0x40e <__vector_73>
     126:	00 00       	nop
     128:	af c1       	rjmp	.+862    	; 0x488 <__vector_74>
     12a:	00 00       	nop
     12c:	8d c0       	rjmp	.+282    	; 0x248 <__bad_interrupt>
     12e:	00 00       	nop
     130:	8b c0       	rjmp	.+278    	; 0x248 <__bad_interrupt>
     132:	00 00       	nop
     134:	89 c0       	rjmp	.+274    	; 0x248 <__bad_interrupt>
     136:	00 00       	nop
     138:	87 c0       	rjmp	.+270    	; 0x248 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	85 c0       	rjmp	.+266    	; 0x248 <__bad_interrupt>
     13e:	00 00       	nop
     140:	83 c0       	rjmp	.+262    	; 0x248 <__bad_interrupt>
     142:	00 00       	nop
     144:	81 c0       	rjmp	.+258    	; 0x248 <__bad_interrupt>
     146:	00 00       	nop
     148:	7f c0       	rjmp	.+254    	; 0x248 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7d c0       	rjmp	.+250    	; 0x248 <__bad_interrupt>
     14e:	00 00       	nop
     150:	7b c0       	rjmp	.+246    	; 0x248 <__bad_interrupt>
     152:	00 00       	nop
     154:	79 c0       	rjmp	.+242    	; 0x248 <__bad_interrupt>
     156:	00 00       	nop
     158:	77 c0       	rjmp	.+238    	; 0x248 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	75 c0       	rjmp	.+234    	; 0x248 <__bad_interrupt>
     15e:	00 00       	nop
     160:	73 c0       	rjmp	.+230    	; 0x248 <__bad_interrupt>
     162:	00 00       	nop
     164:	71 c0       	rjmp	.+226    	; 0x248 <__bad_interrupt>
     166:	00 00       	nop
     168:	6f c0       	rjmp	.+222    	; 0x248 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6d c0       	rjmp	.+218    	; 0x248 <__bad_interrupt>
     16e:	00 00       	nop
     170:	6b c0       	rjmp	.+214    	; 0x248 <__bad_interrupt>
     172:	00 00       	nop
     174:	69 c0       	rjmp	.+210    	; 0x248 <__bad_interrupt>
     176:	00 00       	nop
     178:	67 c0       	rjmp	.+206    	; 0x248 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	65 c0       	rjmp	.+202    	; 0x248 <__bad_interrupt>
     17e:	00 00       	nop
     180:	63 c0       	rjmp	.+198    	; 0x248 <__bad_interrupt>
     182:	00 00       	nop
     184:	61 c0       	rjmp	.+194    	; 0x248 <__bad_interrupt>
     186:	00 00       	nop
     188:	5f c0       	rjmp	.+190    	; 0x248 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5d c0       	rjmp	.+186    	; 0x248 <__bad_interrupt>
     18e:	00 00       	nop
     190:	5b c0       	rjmp	.+182    	; 0x248 <__bad_interrupt>
     192:	00 00       	nop
     194:	59 c0       	rjmp	.+178    	; 0x248 <__bad_interrupt>
     196:	00 00       	nop
     198:	57 c0       	rjmp	.+174    	; 0x248 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	55 c0       	rjmp	.+170    	; 0x248 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	53 c0       	rjmp	.+166    	; 0x248 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	51 c0       	rjmp	.+162    	; 0x248 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4f c0       	rjmp	.+158    	; 0x248 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4d c0       	rjmp	.+154    	; 0x248 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	4b c0       	rjmp	.+150    	; 0x248 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	49 c0       	rjmp	.+146    	; 0x248 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	47 c0       	rjmp	.+142    	; 0x248 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	45 c0       	rjmp	.+138    	; 0x248 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	43 c0       	rjmp	.+134    	; 0x248 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	41 c0       	rjmp	.+130    	; 0x248 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3f c0       	rjmp	.+126    	; 0x248 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3d c0       	rjmp	.+122    	; 0x248 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	3b c0       	rjmp	.+118    	; 0x248 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	39 c0       	rjmp	.+114    	; 0x248 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	37 c0       	rjmp	.+110    	; 0x248 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	35 c0       	rjmp	.+106    	; 0x248 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	33 c0       	rjmp	.+102    	; 0x248 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	31 c0       	rjmp	.+98     	; 0x248 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2f c0       	rjmp	.+94     	; 0x248 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2d c0       	rjmp	.+90     	; 0x248 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2b c0       	rjmp	.+86     	; 0x248 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	29 c0       	rjmp	.+82     	; 0x248 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	27 c0       	rjmp	.+78     	; 0x248 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	ea ee       	ldi	r30, 0xEA	; 234
     21c:	fb e1       	ldi	r31, 0x1B	; 27
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a0 39       	cpi	r26, 0x90	; 144
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	21 e2       	ldi	r18, 0x21	; 33
     232:	a0 e9       	ldi	r26, 0x90	; 144
     234:	b0 e2       	ldi	r27, 0x20	; 32
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	a5 32       	cpi	r26, 0x25	; 37
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	0e 94 3c 0a 	call	0x1478	; 0x1478 <main>
     244:	0c 94 f3 0d 	jmp	0x1be6	; 0x1be6 <_exit>

00000248 <__bad_interrupt>:
     248:	db ce       	rjmp	.-586    	; 0x0 <__vectors>

0000024a <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     24a:	81 15       	cp	r24, r1
     24c:	22 e0       	ldi	r18, 0x02	; 2
     24e:	92 07       	cpc	r25, r18
     250:	61 f4       	brne	.+24     	; 0x26a <adc_enable_clock+0x20>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     252:	80 91 91 20 	lds	r24, 0x2091	; 0x802091 <adca_enable_count>
     256:	91 e0       	ldi	r25, 0x01	; 1
     258:	98 0f       	add	r25, r24
     25a:	90 93 91 20 	sts	0x2091, r25	; 0x802091 <adca_enable_count>
     25e:	81 11       	cpse	r24, r1
     260:	12 c0       	rjmp	.+36     	; 0x286 <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     262:	62 e0       	ldi	r22, 0x02	; 2
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	89 c3       	rjmp	.+1810   	; 0x97a <sysclk_enable_module>
     268:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     26a:	80 34       	cpi	r24, 0x40	; 64
     26c:	92 40       	sbci	r25, 0x02	; 2
     26e:	59 f4       	brne	.+22     	; 0x286 <adc_enable_clock+0x3c>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     270:	80 91 90 20 	lds	r24, 0x2090	; 0x802090 <__data_end>
     274:	91 e0       	ldi	r25, 0x01	; 1
     276:	98 0f       	add	r25, r24
     278:	90 93 90 20 	sts	0x2090, r25	; 0x802090 <__data_end>
     27c:	81 11       	cpse	r24, r1
     27e:	03 c0       	rjmp	.+6      	; 0x286 <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     280:	62 e0       	ldi	r22, 0x02	; 2
     282:	82 e0       	ldi	r24, 0x02	; 2
     284:	7a c3       	rjmp	.+1780   	; 0x97a <sysclk_enable_module>
     286:	08 95       	ret

00000288 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     288:	81 15       	cp	r24, r1
     28a:	22 e0       	ldi	r18, 0x02	; 2
     28c:	92 07       	cpc	r25, r18
     28e:	59 f4       	brne	.+22     	; 0x2a6 <adc_disable_clock+0x1e>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     290:	80 91 91 20 	lds	r24, 0x2091	; 0x802091 <adca_enable_count>
     294:	81 50       	subi	r24, 0x01	; 1
     296:	80 93 91 20 	sts	0x2091, r24	; 0x802091 <adca_enable_count>
     29a:	81 11       	cpse	r24, r1
     29c:	11 c0       	rjmp	.+34     	; 0x2c0 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     29e:	62 e0       	ldi	r22, 0x02	; 2
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	81 c3       	rjmp	.+1794   	; 0x9a6 <sysclk_disable_module>
     2a4:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     2a6:	80 34       	cpi	r24, 0x40	; 64
     2a8:	92 40       	sbci	r25, 0x02	; 2
     2aa:	51 f4       	brne	.+20     	; 0x2c0 <adc_disable_clock+0x38>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     2ac:	80 91 90 20 	lds	r24, 0x2090	; 0x802090 <__data_end>
     2b0:	81 50       	subi	r24, 0x01	; 1
     2b2:	80 93 90 20 	sts	0x2090, r24	; 0x802090 <__data_end>
     2b6:	81 11       	cpse	r24, r1
     2b8:	03 c0       	rjmp	.+6      	; 0x2c0 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     2ba:	62 e0       	ldi	r22, 0x02	; 2
     2bc:	82 e0       	ldi	r24, 0x02	; 2
     2be:	73 c3       	rjmp	.+1766   	; 0x9a6 <sysclk_disable_module>
     2c0:	08 95       	ret

000002c2 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     2c2:	ef 92       	push	r14
     2c4:	ff 92       	push	r15
     2c6:	1f 93       	push	r17
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	1f 92       	push	r1
     2ce:	1f 92       	push	r1
     2d0:	cd b7       	in	r28, 0x3d	; 61
     2d2:	de b7       	in	r29, 0x3e	; 62
     2d4:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     2d6:	8f b7       	in	r24, 0x3f	; 63
     2d8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     2da:	f8 94       	cli
	return flags;
     2dc:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     2de:	c7 01       	movw	r24, r14
     2e0:	b4 df       	rcall	.-152    	; 0x24a <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     2e2:	f7 01       	movw	r30, r14
     2e4:	80 81       	ld	r24, Z
     2e6:	81 60       	ori	r24, 0x01	; 1
     2e8:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     2ea:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     2ec:	80 91 04 21 	lds	r24, 0x2104	; 0x802104 <sleepmgr_locks+0x1>
     2f0:	8f 3f       	cpi	r24, 0xFF	; 255
     2f2:	09 f4       	brne	.+2      	; 0x2f6 <adc_enable+0x34>
     2f4:	ff cf       	rjmp	.-2      	; 0x2f4 <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     2f6:	8f b7       	in	r24, 0x3f	; 63
     2f8:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     2fa:	f8 94       	cli
	return flags;
     2fc:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     2fe:	e3 e0       	ldi	r30, 0x03	; 3
     300:	f1 e2       	ldi	r31, 0x21	; 33
     302:	81 81       	ldd	r24, Z+1	; 0x01
     304:	8f 5f       	subi	r24, 0xFF	; 255
     306:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     308:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     30a:	0f 90       	pop	r0
     30c:	0f 90       	pop	r0
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	1f 91       	pop	r17
     314:	ff 90       	pop	r15
     316:	ef 90       	pop	r14
     318:	08 95       	ret

0000031a <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     31a:	1f 92       	push	r1
     31c:	0f 92       	push	r0
     31e:	0f b6       	in	r0, 0x3f	; 63
     320:	0f 92       	push	r0
     322:	11 24       	eor	r1, r1
     324:	08 b6       	in	r0, 0x38	; 56
     326:	0f 92       	push	r0
     328:	18 be       	out	0x38, r1	; 56
     32a:	09 b6       	in	r0, 0x39	; 57
     32c:	0f 92       	push	r0
     32e:	19 be       	out	0x39, r1	; 57
     330:	0b b6       	in	r0, 0x3b	; 59
     332:	0f 92       	push	r0
     334:	1b be       	out	0x3b, r1	; 59
     336:	2f 93       	push	r18
     338:	3f 93       	push	r19
     33a:	4f 93       	push	r20
     33c:	5f 93       	push	r21
     33e:	6f 93       	push	r22
     340:	7f 93       	push	r23
     342:	8f 93       	push	r24
     344:	9f 93       	push	r25
     346:	af 93       	push	r26
     348:	bf 93       	push	r27
     34a:	ef 93       	push	r30
     34c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     34e:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     352:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     356:	e0 91 0b 21 	lds	r30, 0x210B	; 0x80210b <adca_callback>
     35a:	f0 91 0c 21 	lds	r31, 0x210C	; 0x80210c <adca_callback+0x1>
     35e:	61 e0       	ldi	r22, 0x01	; 1
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	92 e0       	ldi	r25, 0x02	; 2
     364:	19 95       	eicall
}
     366:	ff 91       	pop	r31
     368:	ef 91       	pop	r30
     36a:	bf 91       	pop	r27
     36c:	af 91       	pop	r26
     36e:	9f 91       	pop	r25
     370:	8f 91       	pop	r24
     372:	7f 91       	pop	r23
     374:	6f 91       	pop	r22
     376:	5f 91       	pop	r21
     378:	4f 91       	pop	r20
     37a:	3f 91       	pop	r19
     37c:	2f 91       	pop	r18
     37e:	0f 90       	pop	r0
     380:	0b be       	out	0x3b, r0	; 59
     382:	0f 90       	pop	r0
     384:	09 be       	out	0x39, r0	; 57
     386:	0f 90       	pop	r0
     388:	08 be       	out	0x38, r0	; 56
     38a:	0f 90       	pop	r0
     38c:	0f be       	out	0x3f, r0	; 63
     38e:	0f 90       	pop	r0
     390:	1f 90       	pop	r1
     392:	18 95       	reti

00000394 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     394:	1f 92       	push	r1
     396:	0f 92       	push	r0
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	0f 92       	push	r0
     39c:	11 24       	eor	r1, r1
     39e:	08 b6       	in	r0, 0x38	; 56
     3a0:	0f 92       	push	r0
     3a2:	18 be       	out	0x38, r1	; 56
     3a4:	09 b6       	in	r0, 0x39	; 57
     3a6:	0f 92       	push	r0
     3a8:	19 be       	out	0x39, r1	; 57
     3aa:	0b b6       	in	r0, 0x3b	; 59
     3ac:	0f 92       	push	r0
     3ae:	1b be       	out	0x3b, r1	; 59
     3b0:	2f 93       	push	r18
     3b2:	3f 93       	push	r19
     3b4:	4f 93       	push	r20
     3b6:	5f 93       	push	r21
     3b8:	6f 93       	push	r22
     3ba:	7f 93       	push	r23
     3bc:	8f 93       	push	r24
     3be:	9f 93       	push	r25
     3c0:	af 93       	push	r26
     3c2:	bf 93       	push	r27
     3c4:	ef 93       	push	r30
     3c6:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     3c8:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     3cc:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     3d0:	e0 91 0b 21 	lds	r30, 0x210B	; 0x80210b <adca_callback>
     3d4:	f0 91 0c 21 	lds	r31, 0x210C	; 0x80210c <adca_callback+0x1>
     3d8:	62 e0       	ldi	r22, 0x02	; 2
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	92 e0       	ldi	r25, 0x02	; 2
     3de:	19 95       	eicall
}
     3e0:	ff 91       	pop	r31
     3e2:	ef 91       	pop	r30
     3e4:	bf 91       	pop	r27
     3e6:	af 91       	pop	r26
     3e8:	9f 91       	pop	r25
     3ea:	8f 91       	pop	r24
     3ec:	7f 91       	pop	r23
     3ee:	6f 91       	pop	r22
     3f0:	5f 91       	pop	r21
     3f2:	4f 91       	pop	r20
     3f4:	3f 91       	pop	r19
     3f6:	2f 91       	pop	r18
     3f8:	0f 90       	pop	r0
     3fa:	0b be       	out	0x3b, r0	; 59
     3fc:	0f 90       	pop	r0
     3fe:	09 be       	out	0x39, r0	; 57
     400:	0f 90       	pop	r0
     402:	08 be       	out	0x38, r0	; 56
     404:	0f 90       	pop	r0
     406:	0f be       	out	0x3f, r0	; 63
     408:	0f 90       	pop	r0
     40a:	1f 90       	pop	r1
     40c:	18 95       	reti

0000040e <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     40e:	1f 92       	push	r1
     410:	0f 92       	push	r0
     412:	0f b6       	in	r0, 0x3f	; 63
     414:	0f 92       	push	r0
     416:	11 24       	eor	r1, r1
     418:	08 b6       	in	r0, 0x38	; 56
     41a:	0f 92       	push	r0
     41c:	18 be       	out	0x38, r1	; 56
     41e:	09 b6       	in	r0, 0x39	; 57
     420:	0f 92       	push	r0
     422:	19 be       	out	0x39, r1	; 57
     424:	0b b6       	in	r0, 0x3b	; 59
     426:	0f 92       	push	r0
     428:	1b be       	out	0x3b, r1	; 59
     42a:	2f 93       	push	r18
     42c:	3f 93       	push	r19
     42e:	4f 93       	push	r20
     430:	5f 93       	push	r21
     432:	6f 93       	push	r22
     434:	7f 93       	push	r23
     436:	8f 93       	push	r24
     438:	9f 93       	push	r25
     43a:	af 93       	push	r26
     43c:	bf 93       	push	r27
     43e:	ef 93       	push	r30
     440:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     442:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     446:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     44a:	e0 91 0b 21 	lds	r30, 0x210B	; 0x80210b <adca_callback>
     44e:	f0 91 0c 21 	lds	r31, 0x210C	; 0x80210c <adca_callback+0x1>
     452:	64 e0       	ldi	r22, 0x04	; 4
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	92 e0       	ldi	r25, 0x02	; 2
     458:	19 95       	eicall
}
     45a:	ff 91       	pop	r31
     45c:	ef 91       	pop	r30
     45e:	bf 91       	pop	r27
     460:	af 91       	pop	r26
     462:	9f 91       	pop	r25
     464:	8f 91       	pop	r24
     466:	7f 91       	pop	r23
     468:	6f 91       	pop	r22
     46a:	5f 91       	pop	r21
     46c:	4f 91       	pop	r20
     46e:	3f 91       	pop	r19
     470:	2f 91       	pop	r18
     472:	0f 90       	pop	r0
     474:	0b be       	out	0x3b, r0	; 59
     476:	0f 90       	pop	r0
     478:	09 be       	out	0x39, r0	; 57
     47a:	0f 90       	pop	r0
     47c:	08 be       	out	0x38, r0	; 56
     47e:	0f 90       	pop	r0
     480:	0f be       	out	0x3f, r0	; 63
     482:	0f 90       	pop	r0
     484:	1f 90       	pop	r1
     486:	18 95       	reti

00000488 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     488:	1f 92       	push	r1
     48a:	0f 92       	push	r0
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	0f 92       	push	r0
     490:	11 24       	eor	r1, r1
     492:	08 b6       	in	r0, 0x38	; 56
     494:	0f 92       	push	r0
     496:	18 be       	out	0x38, r1	; 56
     498:	09 b6       	in	r0, 0x39	; 57
     49a:	0f 92       	push	r0
     49c:	19 be       	out	0x39, r1	; 57
     49e:	0b b6       	in	r0, 0x3b	; 59
     4a0:	0f 92       	push	r0
     4a2:	1b be       	out	0x3b, r1	; 59
     4a4:	2f 93       	push	r18
     4a6:	3f 93       	push	r19
     4a8:	4f 93       	push	r20
     4aa:	5f 93       	push	r21
     4ac:	6f 93       	push	r22
     4ae:	7f 93       	push	r23
     4b0:	8f 93       	push	r24
     4b2:	9f 93       	push	r25
     4b4:	af 93       	push	r26
     4b6:	bf 93       	push	r27
     4b8:	ef 93       	push	r30
     4ba:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     4bc:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     4c0:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     4c4:	e0 91 0b 21 	lds	r30, 0x210B	; 0x80210b <adca_callback>
     4c8:	f0 91 0c 21 	lds	r31, 0x210C	; 0x80210c <adca_callback+0x1>
     4cc:	68 e0       	ldi	r22, 0x08	; 8
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	92 e0       	ldi	r25, 0x02	; 2
     4d2:	19 95       	eicall
}
     4d4:	ff 91       	pop	r31
     4d6:	ef 91       	pop	r30
     4d8:	bf 91       	pop	r27
     4da:	af 91       	pop	r26
     4dc:	9f 91       	pop	r25
     4de:	8f 91       	pop	r24
     4e0:	7f 91       	pop	r23
     4e2:	6f 91       	pop	r22
     4e4:	5f 91       	pop	r21
     4e6:	4f 91       	pop	r20
     4e8:	3f 91       	pop	r19
     4ea:	2f 91       	pop	r18
     4ec:	0f 90       	pop	r0
     4ee:	0b be       	out	0x3b, r0	; 59
     4f0:	0f 90       	pop	r0
     4f2:	09 be       	out	0x39, r0	; 57
     4f4:	0f 90       	pop	r0
     4f6:	08 be       	out	0x38, r0	; 56
     4f8:	0f 90       	pop	r0
     4fa:	0f be       	out	0x3f, r0	; 63
     4fc:	0f 90       	pop	r0
     4fe:	1f 90       	pop	r1
     500:	18 95       	reti

00000502 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     502:	1f 92       	push	r1
     504:	0f 92       	push	r0
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	0f 92       	push	r0
     50a:	11 24       	eor	r1, r1
     50c:	08 b6       	in	r0, 0x38	; 56
     50e:	0f 92       	push	r0
     510:	18 be       	out	0x38, r1	; 56
     512:	09 b6       	in	r0, 0x39	; 57
     514:	0f 92       	push	r0
     516:	19 be       	out	0x39, r1	; 57
     518:	0b b6       	in	r0, 0x3b	; 59
     51a:	0f 92       	push	r0
     51c:	1b be       	out	0x3b, r1	; 59
     51e:	2f 93       	push	r18
     520:	3f 93       	push	r19
     522:	4f 93       	push	r20
     524:	5f 93       	push	r21
     526:	6f 93       	push	r22
     528:	7f 93       	push	r23
     52a:	8f 93       	push	r24
     52c:	9f 93       	push	r25
     52e:	af 93       	push	r26
     530:	bf 93       	push	r27
     532:	ef 93       	push	r30
     534:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     536:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     53a:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     53e:	e0 91 09 21 	lds	r30, 0x2109	; 0x802109 <adcb_callback>
     542:	f0 91 0a 21 	lds	r31, 0x210A	; 0x80210a <adcb_callback+0x1>
     546:	61 e0       	ldi	r22, 0x01	; 1
     548:	80 e4       	ldi	r24, 0x40	; 64
     54a:	92 e0       	ldi	r25, 0x02	; 2
     54c:	19 95       	eicall
}
     54e:	ff 91       	pop	r31
     550:	ef 91       	pop	r30
     552:	bf 91       	pop	r27
     554:	af 91       	pop	r26
     556:	9f 91       	pop	r25
     558:	8f 91       	pop	r24
     55a:	7f 91       	pop	r23
     55c:	6f 91       	pop	r22
     55e:	5f 91       	pop	r21
     560:	4f 91       	pop	r20
     562:	3f 91       	pop	r19
     564:	2f 91       	pop	r18
     566:	0f 90       	pop	r0
     568:	0b be       	out	0x3b, r0	; 59
     56a:	0f 90       	pop	r0
     56c:	09 be       	out	0x39, r0	; 57
     56e:	0f 90       	pop	r0
     570:	08 be       	out	0x38, r0	; 56
     572:	0f 90       	pop	r0
     574:	0f be       	out	0x3f, r0	; 63
     576:	0f 90       	pop	r0
     578:	1f 90       	pop	r1
     57a:	18 95       	reti

0000057c <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     57c:	1f 92       	push	r1
     57e:	0f 92       	push	r0
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	0f 92       	push	r0
     584:	11 24       	eor	r1, r1
     586:	08 b6       	in	r0, 0x38	; 56
     588:	0f 92       	push	r0
     58a:	18 be       	out	0x38, r1	; 56
     58c:	09 b6       	in	r0, 0x39	; 57
     58e:	0f 92       	push	r0
     590:	19 be       	out	0x39, r1	; 57
     592:	0b b6       	in	r0, 0x3b	; 59
     594:	0f 92       	push	r0
     596:	1b be       	out	0x3b, r1	; 59
     598:	2f 93       	push	r18
     59a:	3f 93       	push	r19
     59c:	4f 93       	push	r20
     59e:	5f 93       	push	r21
     5a0:	6f 93       	push	r22
     5a2:	7f 93       	push	r23
     5a4:	8f 93       	push	r24
     5a6:	9f 93       	push	r25
     5a8:	af 93       	push	r26
     5aa:	bf 93       	push	r27
     5ac:	ef 93       	push	r30
     5ae:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     5b0:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     5b4:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     5b8:	e0 91 09 21 	lds	r30, 0x2109	; 0x802109 <adcb_callback>
     5bc:	f0 91 0a 21 	lds	r31, 0x210A	; 0x80210a <adcb_callback+0x1>
     5c0:	62 e0       	ldi	r22, 0x02	; 2
     5c2:	80 e4       	ldi	r24, 0x40	; 64
     5c4:	92 e0       	ldi	r25, 0x02	; 2
     5c6:	19 95       	eicall
}
     5c8:	ff 91       	pop	r31
     5ca:	ef 91       	pop	r30
     5cc:	bf 91       	pop	r27
     5ce:	af 91       	pop	r26
     5d0:	9f 91       	pop	r25
     5d2:	8f 91       	pop	r24
     5d4:	7f 91       	pop	r23
     5d6:	6f 91       	pop	r22
     5d8:	5f 91       	pop	r21
     5da:	4f 91       	pop	r20
     5dc:	3f 91       	pop	r19
     5de:	2f 91       	pop	r18
     5e0:	0f 90       	pop	r0
     5e2:	0b be       	out	0x3b, r0	; 59
     5e4:	0f 90       	pop	r0
     5e6:	09 be       	out	0x39, r0	; 57
     5e8:	0f 90       	pop	r0
     5ea:	08 be       	out	0x38, r0	; 56
     5ec:	0f 90       	pop	r0
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	0f 90       	pop	r0
     5f2:	1f 90       	pop	r1
     5f4:	18 95       	reti

000005f6 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     5f6:	1f 92       	push	r1
     5f8:	0f 92       	push	r0
     5fa:	0f b6       	in	r0, 0x3f	; 63
     5fc:	0f 92       	push	r0
     5fe:	11 24       	eor	r1, r1
     600:	08 b6       	in	r0, 0x38	; 56
     602:	0f 92       	push	r0
     604:	18 be       	out	0x38, r1	; 56
     606:	09 b6       	in	r0, 0x39	; 57
     608:	0f 92       	push	r0
     60a:	19 be       	out	0x39, r1	; 57
     60c:	0b b6       	in	r0, 0x3b	; 59
     60e:	0f 92       	push	r0
     610:	1b be       	out	0x3b, r1	; 59
     612:	2f 93       	push	r18
     614:	3f 93       	push	r19
     616:	4f 93       	push	r20
     618:	5f 93       	push	r21
     61a:	6f 93       	push	r22
     61c:	7f 93       	push	r23
     61e:	8f 93       	push	r24
     620:	9f 93       	push	r25
     622:	af 93       	push	r26
     624:	bf 93       	push	r27
     626:	ef 93       	push	r30
     628:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     62a:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     62e:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     632:	e0 91 09 21 	lds	r30, 0x2109	; 0x802109 <adcb_callback>
     636:	f0 91 0a 21 	lds	r31, 0x210A	; 0x80210a <adcb_callback+0x1>
     63a:	64 e0       	ldi	r22, 0x04	; 4
     63c:	80 e4       	ldi	r24, 0x40	; 64
     63e:	92 e0       	ldi	r25, 0x02	; 2
     640:	19 95       	eicall
}
     642:	ff 91       	pop	r31
     644:	ef 91       	pop	r30
     646:	bf 91       	pop	r27
     648:	af 91       	pop	r26
     64a:	9f 91       	pop	r25
     64c:	8f 91       	pop	r24
     64e:	7f 91       	pop	r23
     650:	6f 91       	pop	r22
     652:	5f 91       	pop	r21
     654:	4f 91       	pop	r20
     656:	3f 91       	pop	r19
     658:	2f 91       	pop	r18
     65a:	0f 90       	pop	r0
     65c:	0b be       	out	0x3b, r0	; 59
     65e:	0f 90       	pop	r0
     660:	09 be       	out	0x39, r0	; 57
     662:	0f 90       	pop	r0
     664:	08 be       	out	0x38, r0	; 56
     666:	0f 90       	pop	r0
     668:	0f be       	out	0x3f, r0	; 63
     66a:	0f 90       	pop	r0
     66c:	1f 90       	pop	r1
     66e:	18 95       	reti

00000670 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     670:	1f 92       	push	r1
     672:	0f 92       	push	r0
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	0f 92       	push	r0
     678:	11 24       	eor	r1, r1
     67a:	08 b6       	in	r0, 0x38	; 56
     67c:	0f 92       	push	r0
     67e:	18 be       	out	0x38, r1	; 56
     680:	09 b6       	in	r0, 0x39	; 57
     682:	0f 92       	push	r0
     684:	19 be       	out	0x39, r1	; 57
     686:	0b b6       	in	r0, 0x3b	; 59
     688:	0f 92       	push	r0
     68a:	1b be       	out	0x3b, r1	; 59
     68c:	2f 93       	push	r18
     68e:	3f 93       	push	r19
     690:	4f 93       	push	r20
     692:	5f 93       	push	r21
     694:	6f 93       	push	r22
     696:	7f 93       	push	r23
     698:	8f 93       	push	r24
     69a:	9f 93       	push	r25
     69c:	af 93       	push	r26
     69e:	bf 93       	push	r27
     6a0:	ef 93       	push	r30
     6a2:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     6a4:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     6a8:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     6ac:	e0 91 09 21 	lds	r30, 0x2109	; 0x802109 <adcb_callback>
     6b0:	f0 91 0a 21 	lds	r31, 0x210A	; 0x80210a <adcb_callback+0x1>
     6b4:	68 e0       	ldi	r22, 0x08	; 8
     6b6:	80 e4       	ldi	r24, 0x40	; 64
     6b8:	92 e0       	ldi	r25, 0x02	; 2
     6ba:	19 95       	eicall
}
     6bc:	ff 91       	pop	r31
     6be:	ef 91       	pop	r30
     6c0:	bf 91       	pop	r27
     6c2:	af 91       	pop	r26
     6c4:	9f 91       	pop	r25
     6c6:	8f 91       	pop	r24
     6c8:	7f 91       	pop	r23
     6ca:	6f 91       	pop	r22
     6cc:	5f 91       	pop	r21
     6ce:	4f 91       	pop	r20
     6d0:	3f 91       	pop	r19
     6d2:	2f 91       	pop	r18
     6d4:	0f 90       	pop	r0
     6d6:	0b be       	out	0x3b, r0	; 59
     6d8:	0f 90       	pop	r0
     6da:	09 be       	out	0x39, r0	; 57
     6dc:	0f 90       	pop	r0
     6de:	08 be       	out	0x38, r0	; 56
     6e0:	0f 90       	pop	r0
     6e2:	0f be       	out	0x3f, r0	; 63
     6e4:	0f 90       	pop	r0
     6e6:	1f 90       	pop	r1
     6e8:	18 95       	reti

000006ea <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
     6ea:	bf 92       	push	r11
     6ec:	cf 92       	push	r12
     6ee:	df 92       	push	r13
     6f0:	ef 92       	push	r14
     6f2:	ff 92       	push	r15
     6f4:	0f 93       	push	r16
     6f6:	1f 93       	push	r17
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	1f 92       	push	r1
     6fe:	cd b7       	in	r28, 0x3d	; 61
     700:	de b7       	in	r29, 0x3e	; 62
     702:	8c 01       	movw	r16, r24
     704:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     706:	81 15       	cp	r24, r1
     708:	22 e0       	ldi	r18, 0x02	; 2
     70a:	92 07       	cpc	r25, r18
     70c:	71 f4       	brne	.+28     	; 0x72a <adc_write_configuration+0x40>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     70e:	61 e2       	ldi	r22, 0x21	; 33
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	82 e0       	ldi	r24, 0x02	; 2
     714:	a9 d1       	rcall	.+850    	; 0xa68 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     716:	c8 2e       	mov	r12, r24
     718:	d1 2c       	mov	r13, r1
     71a:	60 e2       	ldi	r22, 0x20	; 32
     71c:	70 e0       	ldi	r23, 0x00	; 0
     71e:	82 e0       	ldi	r24, 0x02	; 2
     720:	a3 d1       	rcall	.+838    	; 0xa68 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
     722:	dc 2c       	mov	r13, r12
     724:	cc 24       	eor	r12, r12
     726:	c8 2a       	or	r12, r24
     728:	10 c0       	rjmp	.+32     	; 0x74a <adc_write_configuration+0x60>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     72a:	80 34       	cpi	r24, 0x40	; 64
     72c:	92 40       	sbci	r25, 0x02	; 2
     72e:	c1 f5       	brne	.+112    	; 0x7a0 <adc_write_configuration+0xb6>
     730:	65 e2       	ldi	r22, 0x25	; 37
     732:	70 e0       	ldi	r23, 0x00	; 0
     734:	82 e0       	ldi	r24, 0x02	; 2
     736:	98 d1       	rcall	.+816    	; 0xa68 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
     738:	c8 2e       	mov	r12, r24
     73a:	d1 2c       	mov	r13, r1
     73c:	64 e2       	ldi	r22, 0x24	; 36
     73e:	70 e0       	ldi	r23, 0x00	; 0
     740:	82 e0       	ldi	r24, 0x02	; 2
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
     742:	92 d1       	rcall	.+804    	; 0xa68 <nvm_read_byte>
     744:	dc 2c       	mov	r13, r12
     746:	cc 24       	eor	r12, r12

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     748:	c8 2a       	or	r12, r24
	cpu_irq_disable();
     74a:	8f b7       	in	r24, 0x3f	; 63
	return flags;
     74c:	89 83       	std	Y+1, r24	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
     74e:	f8 94       	cli
     750:	b9 80       	ldd	r11, Y+1	; 0x01
     752:	c8 01       	movw	r24, r16
	enable = adc->CTRLA & ADC_ENABLE_bm;
     754:	7a dd       	rcall	.-1292   	; 0x24a <adc_enable_clock>
     756:	f8 01       	movw	r30, r16

	adc->CTRLA = ADC_FLUSH_bm;
     758:	80 81       	ld	r24, Z
     75a:	92 e0       	ldi	r25, 0x02	; 2
	adc->CAL = cal;
     75c:	90 83       	st	Z, r25
     75e:	c4 86       	std	Z+12, r12	; 0x0c
	adc->CMP = conf->cmp;
     760:	d5 86       	std	Z+13, r13	; 0x0d
     762:	f7 01       	movw	r30, r14
     764:	25 81       	ldd	r18, Z+5	; 0x05
     766:	36 81       	ldd	r19, Z+6	; 0x06
     768:	f8 01       	movw	r30, r16
     76a:	20 8f       	std	Z+24, r18	; 0x18
	adc->REFCTRL = conf->refctrl;
     76c:	31 8f       	std	Z+25, r19	; 0x19
     76e:	f7 01       	movw	r30, r14
     770:	92 81       	ldd	r25, Z+2	; 0x02
     772:	f8 01       	movw	r30, r16
	adc->PRESCALER = conf->prescaler;
     774:	92 83       	std	Z+2, r25	; 0x02
     776:	f7 01       	movw	r30, r14
     778:	94 81       	ldd	r25, Z+4	; 0x04
     77a:	f8 01       	movw	r30, r16
	adc->EVCTRL = conf->evctrl;
     77c:	94 83       	std	Z+4, r25	; 0x04
     77e:	f7 01       	movw	r30, r14
     780:	93 81       	ldd	r25, Z+3	; 0x03
     782:	f8 01       	movw	r30, r16
	adc->CTRLB = conf->ctrlb;
     784:	93 83       	std	Z+3, r25	; 0x03
     786:	f7 01       	movw	r30, r14
     788:	91 81       	ldd	r25, Z+1	; 0x01
     78a:	f8 01       	movw	r30, r16

	adc->CTRLA = enable | conf->ctrla;
     78c:	91 83       	std	Z+1, r25	; 0x01
     78e:	81 70       	andi	r24, 0x01	; 1
     790:	f7 01       	movw	r30, r14
     792:	90 81       	ld	r25, Z
     794:	89 2b       	or	r24, r25

	adc_disable_clock(adc);
     796:	f8 01       	movw	r30, r16
     798:	80 83       	st	Z, r24
     79a:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     79c:	75 dd       	rcall	.-1302   	; 0x288 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     79e:	bf be       	out	0x3f, r11	; 63
     7a0:	0f 90       	pop	r0
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
     7aa:	ff 90       	pop	r15
     7ac:	ef 90       	pop	r14
     7ae:	df 90       	pop	r13
     7b0:	cf 90       	pop	r12
     7b2:	bf 90       	pop	r11
     7b4:	08 95       	ret

000007b6 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
     7b6:	df 92       	push	r13
     7b8:	ef 92       	push	r14
     7ba:	ff 92       	push	r15
     7bc:	0f 93       	push	r16
     7be:	1f 93       	push	r17
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	1f 92       	push	r1
     7c6:	cd b7       	in	r28, 0x3d	; 61
     7c8:	de b7       	in	r29, 0x3e	; 62
     7ca:	8c 01       	movw	r16, r24
     7cc:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     7ce:	8f b7       	in	r24, 0x3f	; 63
     7d0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     7d2:	f8 94       	cli
	return flags;
     7d4:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
     7d6:	c8 01       	movw	r24, r16
     7d8:	38 dd       	rcall	.-1424   	; 0x24a <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
     7da:	f8 01       	movw	r30, r16
     7dc:	80 81       	ld	r24, Z
     7de:	80 7c       	andi	r24, 0xC0	; 192
     7e0:	f7 01       	movw	r30, r14
     7e2:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
     7e4:	f8 01       	movw	r30, r16
     7e6:	80 8d       	ldd	r24, Z+24	; 0x18
     7e8:	91 8d       	ldd	r25, Z+25	; 0x19
     7ea:	f7 01       	movw	r30, r14
     7ec:	85 83       	std	Z+5, r24	; 0x05
     7ee:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
     7f0:	f8 01       	movw	r30, r16
     7f2:	82 81       	ldd	r24, Z+2	; 0x02
     7f4:	f7 01       	movw	r30, r14
     7f6:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
     7f8:	f8 01       	movw	r30, r16
     7fa:	84 81       	ldd	r24, Z+4	; 0x04
     7fc:	f7 01       	movw	r30, r14
     7fe:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
     800:	f8 01       	movw	r30, r16
     802:	83 81       	ldd	r24, Z+3	; 0x03
     804:	f7 01       	movw	r30, r14
     806:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
     808:	f8 01       	movw	r30, r16
     80a:	81 81       	ldd	r24, Z+1	; 0x01
     80c:	f7 01       	movw	r30, r14

	adc_disable_clock(adc);
     80e:	81 83       	std	Z+1, r24	; 0x01
     810:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     812:	3a dd       	rcall	.-1420   	; 0x288 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     814:	df be       	out	0x3f, r13	; 63
     816:	0f 90       	pop	r0
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	1f 91       	pop	r17
     81e:	0f 91       	pop	r16
     820:	ff 90       	pop	r15
     822:	ef 90       	pop	r14
     824:	df 90       	pop	r13
     826:	08 95       	ret

00000828 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
     828:	af 92       	push	r10
     82a:	bf 92       	push	r11
     82c:	cf 92       	push	r12
     82e:	df 92       	push	r13
     830:	ef 92       	push	r14
     832:	ff 92       	push	r15
     834:	0f 93       	push	r16
     836:	1f 93       	push	r17
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
     83c:	1f 92       	push	r1
     83e:	cd b7       	in	r28, 0x3d	; 61
     840:	de b7       	in	r29, 0x3e	; 62
     842:	6c 01       	movw	r12, r24
     844:	b6 2e       	mov	r11, r22
     846:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     848:	86 2f       	mov	r24, r22
     84a:	83 70       	andi	r24, 0x03	; 3
     84c:	29 f4       	brne	.+10     	; 0x858 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     84e:	96 2f       	mov	r25, r22
     850:	96 95       	lsr	r25
     852:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     854:	82 e0       	ldi	r24, 0x02	; 2
     856:	02 c0       	rjmp	.+4      	; 0x85c <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     858:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     85a:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     85c:	90 ff       	sbrs	r25, 0
		index++;
     85e:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     860:	86 01       	movw	r16, r12
     862:	00 5e       	subi	r16, 0xE0	; 224
     864:	1f 4f       	sbci	r17, 0xFF	; 255
     866:	98 e0       	ldi	r25, 0x08	; 8
     868:	89 9f       	mul	r24, r25
     86a:	00 0d       	add	r16, r0
     86c:	11 1d       	adc	r17, r1
     86e:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     870:	8f b7       	in	r24, 0x3f	; 63
     872:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     874:	f8 94       	cli
	return flags;
     876:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
     878:	c6 01       	movw	r24, r12
     87a:	e7 dc       	rcall	.-1586   	; 0x24a <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
     87c:	f7 01       	movw	r30, r14
     87e:	80 81       	ld	r24, Z
     880:	f8 01       	movw	r30, r16
     882:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
     884:	f7 01       	movw	r30, r14
     886:	82 81       	ldd	r24, Z+2	; 0x02
     888:	f8 01       	movw	r30, r16
     88a:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
     88c:	f7 01       	movw	r30, r14
     88e:	81 81       	ldd	r24, Z+1	; 0x01
     890:	f8 01       	movw	r30, r16
     892:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     894:	b0 fe       	sbrs	r11, 0
     896:	04 c0       	rjmp	.+8      	; 0x8a0 <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
     898:	f7 01       	movw	r30, r14
     89a:	83 81       	ldd	r24, Z+3	; 0x03
     89c:	f8 01       	movw	r30, r16
	}
	adc_disable_clock(adc);
     89e:	86 83       	std	Z+6, r24	; 0x06
     8a0:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     8a2:	f2 dc       	rcall	.-1564   	; 0x288 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     8a4:	af be       	out	0x3f, r10	; 63
     8a6:	0f 90       	pop	r0
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	1f 91       	pop	r17
     8ae:	0f 91       	pop	r16
     8b0:	ff 90       	pop	r15
     8b2:	ef 90       	pop	r14
     8b4:	df 90       	pop	r13
     8b6:	cf 90       	pop	r12
     8b8:	bf 90       	pop	r11
     8ba:	af 90       	pop	r10
     8bc:	08 95       	ret

000008be <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
     8be:	af 92       	push	r10
     8c0:	bf 92       	push	r11
     8c2:	cf 92       	push	r12
     8c4:	df 92       	push	r13
     8c6:	ef 92       	push	r14
     8c8:	ff 92       	push	r15
     8ca:	0f 93       	push	r16
     8cc:	1f 93       	push	r17
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	1f 92       	push	r1
     8d4:	cd b7       	in	r28, 0x3d	; 61
     8d6:	de b7       	in	r29, 0x3e	; 62
     8d8:	6c 01       	movw	r12, r24
     8da:	b6 2e       	mov	r11, r22
     8dc:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     8de:	86 2f       	mov	r24, r22
     8e0:	83 70       	andi	r24, 0x03	; 3
     8e2:	29 f4       	brne	.+10     	; 0x8ee <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     8e4:	96 2f       	mov	r25, r22
     8e6:	96 95       	lsr	r25
     8e8:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     8ea:	82 e0       	ldi	r24, 0x02	; 2
     8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     8ee:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     8f0:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     8f2:	90 ff       	sbrs	r25, 0
		index++;
     8f4:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     8f6:	86 01       	movw	r16, r12
     8f8:	00 5e       	subi	r16, 0xE0	; 224
     8fa:	1f 4f       	sbci	r17, 0xFF	; 255
     8fc:	98 e0       	ldi	r25, 0x08	; 8
     8fe:	89 9f       	mul	r24, r25
     900:	00 0d       	add	r16, r0
     902:	11 1d       	adc	r17, r1
     904:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     906:	8f b7       	in	r24, 0x3f	; 63
     908:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     90a:	f8 94       	cli
	return flags;
     90c:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
     90e:	c6 01       	movw	r24, r12
     910:	9c dc       	rcall	.-1736   	; 0x24a <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
     912:	f8 01       	movw	r30, r16
     914:	80 81       	ld	r24, Z
     916:	f7 01       	movw	r30, r14
     918:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
     91a:	f8 01       	movw	r30, r16
     91c:	82 81       	ldd	r24, Z+2	; 0x02
     91e:	f7 01       	movw	r30, r14
     920:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
     922:	f8 01       	movw	r30, r16
     924:	81 81       	ldd	r24, Z+1	; 0x01
     926:	f7 01       	movw	r30, r14
     928:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     92a:	b0 fe       	sbrs	r11, 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
     92e:	f8 01       	movw	r30, r16
     930:	86 81       	ldd	r24, Z+6	; 0x06
     932:	f7 01       	movw	r30, r14
	}
	adc_disable_clock(adc);
     934:	83 83       	std	Z+3, r24	; 0x03
     936:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     938:	a7 dc       	rcall	.-1714   	; 0x288 <adc_disable_clock>

	cpu_irq_restore(flags);
}
     93a:	af be       	out	0x3f, r10	; 63
     93c:	0f 90       	pop	r0
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	1f 91       	pop	r17
     944:	0f 91       	pop	r16
     946:	ff 90       	pop	r15
     948:	ef 90       	pop	r14
     94a:	df 90       	pop	r13
     94c:	cf 90       	pop	r12
     94e:	bf 90       	pop	r11
     950:	af 90       	pop	r10
     952:	08 95       	ret

00000954 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     954:	8f ef       	ldi	r24, 0xFF	; 255
     956:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     95a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     95e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     962:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     966:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     96a:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     96e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
     978:	08 95       	ret

0000097a <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
     97e:	1f 92       	push	r1
     980:	cd b7       	in	r28, 0x3d	; 61
     982:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     984:	9f b7       	in	r25, 0x3f	; 63
     986:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     988:	f8 94       	cli
	return flags;
     98a:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     98c:	e8 2f       	mov	r30, r24
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	e0 59       	subi	r30, 0x90	; 144
     992:	ff 4f       	sbci	r31, 0xFF	; 255
     994:	60 95       	com	r22
     996:	80 81       	ld	r24, Z
     998:	68 23       	and	r22, r24
     99a:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     99c:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     99e:	0f 90       	pop	r0
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	08 95       	ret

000009a6 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	1f 92       	push	r1
     9ac:	cd b7       	in	r28, 0x3d	; 61
     9ae:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     9b0:	9f b7       	in	r25, 0x3f	; 63
     9b2:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     9b4:	f8 94       	cli
	return flags;
     9b6:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
     9b8:	e8 2f       	mov	r30, r24
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	e0 59       	subi	r30, 0x90	; 144
     9be:	ff 4f       	sbci	r31, 0xFF	; 255
     9c0:	80 81       	ld	r24, Z
     9c2:	68 2b       	or	r22, r24
     9c4:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     9c6:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     9c8:	0f 90       	pop	r0
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	08 95       	ret

000009d0 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     9da:	c6 2f       	mov	r28, r22
     9dc:	d0 e0       	ldi	r29, 0x00	; 0
     9de:	de 01       	movw	r26, r28
     9e0:	02 2e       	mov	r0, r18
     9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <ioport_configure_port_pin+0x18>
     9e4:	b5 95       	asr	r27
     9e6:	a7 95       	ror	r26
     9e8:	0a 94       	dec	r0
     9ea:	e2 f7       	brpl	.-8      	; 0x9e4 <ioport_configure_port_pin+0x14>
     9ec:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     9ee:	50 8b       	std	Z+16, r21	; 0x10
     9f0:	2f 5f       	subi	r18, 0xFF	; 255
     9f2:	3f 4f       	sbci	r19, 0xFF	; 255
     9f4:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     9f6:	28 30       	cpi	r18, 0x08	; 8
     9f8:	31 05       	cpc	r19, r1
     9fa:	89 f7       	brne	.-30     	; 0x9de <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     9fc:	40 ff       	sbrs	r20, 0
     9fe:	0a c0       	rjmp	.+20     	; 0xa14 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
     a00:	41 ff       	sbrs	r20, 1
     a02:	03 c0       	rjmp	.+6      	; 0xa0a <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     a04:	fc 01       	movw	r30, r24
     a06:	65 83       	std	Z+5, r22	; 0x05
     a08:	02 c0       	rjmp	.+4      	; 0xa0e <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     a0a:	fc 01       	movw	r30, r24
     a0c:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     a0e:	fc 01       	movw	r30, r24
     a10:	61 83       	std	Z+1, r22	; 0x01
     a12:	02 c0       	rjmp	.+4      	; 0xa18 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     a14:	fc 01       	movw	r30, r24
     a16:	62 83       	std	Z+2, r22	; 0x02
	}
}
     a18:	df 91       	pop	r29
     a1a:	cf 91       	pop	r28
     a1c:	08 95       	ret

00000a1e <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     a1e:	43 e0       	ldi	r20, 0x03	; 3
     a20:	50 e0       	ldi	r21, 0x00	; 0
     a22:	68 e0       	ldi	r22, 0x08	; 8
     a24:	80 ec       	ldi	r24, 0xC0	; 192
     a26:	97 e0       	ldi	r25, 0x07	; 7
     a28:	d3 df       	rcall	.-90     	; 0x9d0 <ioport_configure_port_pin>
     a2a:	40 e0       	ldi	r20, 0x00	; 0
     a2c:	58 e1       	ldi	r21, 0x18	; 24
     a2e:	64 e0       	ldi	r22, 0x04	; 4
     a30:	80 ec       	ldi	r24, 0xC0	; 192
     a32:	97 e0       	ldi	r25, 0x07	; 7
     a34:	cd df       	rcall	.-102    	; 0x9d0 <ioport_configure_port_pin>
     a36:	43 e0       	ldi	r20, 0x03	; 3
     a38:	50 e0       	ldi	r21, 0x00	; 0
     a3a:	68 e0       	ldi	r22, 0x08	; 8
     a3c:	80 e8       	ldi	r24, 0x80	; 128
     a3e:	96 e0       	ldi	r25, 0x06	; 6
     a40:	c7 df       	rcall	.-114    	; 0x9d0 <ioport_configure_port_pin>
     a42:	40 e0       	ldi	r20, 0x00	; 0
     a44:	50 e0       	ldi	r21, 0x00	; 0
     a46:	64 e0       	ldi	r22, 0x04	; 4
     a48:	80 e8       	ldi	r24, 0x80	; 128
     a4a:	96 e0       	ldi	r25, 0x06	; 6
     a4c:	c1 df       	rcall	.-126    	; 0x9d0 <ioport_configure_port_pin>
     a4e:	43 e0       	ldi	r20, 0x03	; 3
     a50:	50 e0       	ldi	r21, 0x00	; 0
     a52:	68 e0       	ldi	r22, 0x08	; 8
     a54:	80 e4       	ldi	r24, 0x40	; 64
     a56:	96 e0       	ldi	r25, 0x06	; 6
     a58:	bb df       	rcall	.-138    	; 0x9d0 <ioport_configure_port_pin>
     a5a:	40 e0       	ldi	r20, 0x00	; 0
     a5c:	50 e0       	ldi	r21, 0x00	; 0
     a5e:	64 e0       	ldi	r22, 0x04	; 4
     a60:	80 e4       	ldi	r24, 0x40	; 64
     a62:	96 e0       	ldi	r25, 0x06	; 6
     a64:	b5 cf       	rjmp	.-150    	; 0x9d0 <ioport_configure_port_pin>
     a66:	08 95       	ret

00000a68 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
     a68:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
     a6c:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
     a6e:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
     a70:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
     a74:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
     a76:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
     a7a:	08 95       	ret

00000a7c <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     a7c:	fc 01       	movw	r30, r24
     a7e:	91 81       	ldd	r25, Z+1	; 0x01
     a80:	95 ff       	sbrs	r25, 5
     a82:	fd cf       	rjmp	.-6      	; 0xa7e <usart_putchar+0x2>
     a84:	60 83       	st	Z, r22
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	08 95       	ret

00000a8c <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     a8c:	4f 92       	push	r4
     a8e:	5f 92       	push	r5
     a90:	6f 92       	push	r6
     a92:	7f 92       	push	r7
     a94:	8f 92       	push	r8
     a96:	9f 92       	push	r9
     a98:	af 92       	push	r10
     a9a:	bf 92       	push	r11
     a9c:	ef 92       	push	r14
     a9e:	ff 92       	push	r15
     aa0:	0f 93       	push	r16
     aa2:	1f 93       	push	r17
     aa4:	cf 93       	push	r28
     aa6:	7c 01       	movw	r14, r24
     aa8:	4a 01       	movw	r8, r20
     aaa:	5b 01       	movw	r10, r22
     aac:	28 01       	movw	r4, r16
     aae:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     ab0:	fc 01       	movw	r30, r24
     ab2:	84 81       	ldd	r24, Z+4	; 0x04
     ab4:	82 ff       	sbrs	r24, 2
     ab6:	16 c0       	rjmp	.+44     	; 0xae4 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     ab8:	d9 01       	movw	r26, r18
     aba:	c8 01       	movw	r24, r16
     abc:	68 94       	set
     abe:	12 f8       	bld	r1, 2
     ac0:	b6 95       	lsr	r27
     ac2:	a7 95       	ror	r26
     ac4:	97 95       	ror	r25
     ac6:	87 95       	ror	r24
     ac8:	16 94       	lsr	r1
     aca:	d1 f7       	brne	.-12     	; 0xac0 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     acc:	b9 01       	movw	r22, r18
     ace:	a8 01       	movw	r20, r16
     ad0:	03 2e       	mov	r0, r19
     ad2:	36 e1       	ldi	r19, 0x16	; 22
     ad4:	76 95       	lsr	r23
     ad6:	67 95       	ror	r22
     ad8:	57 95       	ror	r21
     ada:	47 95       	ror	r20
     adc:	3a 95       	dec	r19
     ade:	d1 f7       	brne	.-12     	; 0xad4 <usart_set_baudrate+0x48>
     ae0:	30 2d       	mov	r19, r0
     ae2:	15 c0       	rjmp	.+42     	; 0xb0e <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     ae4:	d9 01       	movw	r26, r18
     ae6:	c8 01       	movw	r24, r16
     ae8:	68 94       	set
     aea:	13 f8       	bld	r1, 3
     aec:	b6 95       	lsr	r27
     aee:	a7 95       	ror	r26
     af0:	97 95       	ror	r25
     af2:	87 95       	ror	r24
     af4:	16 94       	lsr	r1
     af6:	d1 f7       	brne	.-12     	; 0xaec <usart_set_baudrate+0x60>
		min_rate /= 2;
     af8:	b9 01       	movw	r22, r18
     afa:	a8 01       	movw	r20, r16
     afc:	03 2e       	mov	r0, r19
     afe:	37 e1       	ldi	r19, 0x17	; 23
     b00:	76 95       	lsr	r23
     b02:	67 95       	ror	r22
     b04:	57 95       	ror	r21
     b06:	47 95       	ror	r20
     b08:	3a 95       	dec	r19
     b0a:	d1 f7       	brne	.-12     	; 0xb00 <usart_set_baudrate+0x74>
     b0c:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     b0e:	88 15       	cp	r24, r8
     b10:	99 05       	cpc	r25, r9
     b12:	aa 05       	cpc	r26, r10
     b14:	bb 05       	cpc	r27, r11
     b16:	08 f4       	brcc	.+2      	; 0xb1a <usart_set_baudrate+0x8e>
     b18:	a2 c0       	rjmp	.+324    	; 0xc5e <usart_set_baudrate+0x1d2>
     b1a:	84 16       	cp	r8, r20
     b1c:	95 06       	cpc	r9, r21
     b1e:	a6 06       	cpc	r10, r22
     b20:	b7 06       	cpc	r11, r23
     b22:	08 f4       	brcc	.+2      	; 0xb26 <usart_set_baudrate+0x9a>
     b24:	9e c0       	rjmp	.+316    	; 0xc62 <usart_set_baudrate+0x1d6>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     b26:	f7 01       	movw	r30, r14
     b28:	84 81       	ldd	r24, Z+4	; 0x04
     b2a:	82 fd       	sbrc	r24, 2
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <usart_set_baudrate+0xaa>
		baud *= 2;
     b2e:	88 0c       	add	r8, r8
     b30:	99 1c       	adc	r9, r9
     b32:	aa 1c       	adc	r10, r10
     b34:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     b36:	c3 01       	movw	r24, r6
     b38:	b2 01       	movw	r22, r4
     b3a:	a5 01       	movw	r20, r10
     b3c:	94 01       	movw	r18, r8
     b3e:	1d d5       	rcall	.+2618   	; 0x157a <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     b40:	2f 3f       	cpi	r18, 0xFF	; 255
     b42:	31 05       	cpc	r19, r1
     b44:	41 05       	cpc	r20, r1
     b46:	51 05       	cpc	r21, r1
     b48:	08 f4       	brcc	.+2      	; 0xb4c <usart_set_baudrate+0xc0>
     b4a:	8d c0       	rjmp	.+282    	; 0xc66 <usart_set_baudrate+0x1da>
     b4c:	8f ef       	ldi	r24, 0xFF	; 255
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	a0 e0       	ldi	r26, 0x00	; 0
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	c9 ef       	ldi	r28, 0xF9	; 249
     b56:	05 c0       	rjmp	.+10     	; 0xb62 <usart_set_baudrate+0xd6>
     b58:	28 17       	cp	r18, r24
     b5a:	39 07       	cpc	r19, r25
     b5c:	4a 07       	cpc	r20, r26
     b5e:	5b 07       	cpc	r21, r27
     b60:	58 f0       	brcs	.+22     	; 0xb78 <usart_set_baudrate+0xec>
			break;
		}

		limit <<= 1;
     b62:	88 0f       	add	r24, r24
     b64:	99 1f       	adc	r25, r25
     b66:	aa 1f       	adc	r26, r26
     b68:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     b6a:	cd 3f       	cpi	r28, 0xFD	; 253
     b6c:	0c f4       	brge	.+2      	; 0xb70 <usart_set_baudrate+0xe4>
			limit |= 1;
     b6e:	81 60       	ori	r24, 0x01	; 1
     b70:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     b72:	c7 30       	cpi	r28, 0x07	; 7
     b74:	89 f7       	brne	.-30     	; 0xb58 <usart_set_baudrate+0xcc>
     b76:	4d c0       	rjmp	.+154    	; 0xc12 <usart_set_baudrate+0x186>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     b78:	cc 23       	and	r28, r28
     b7a:	0c f0       	brlt	.+2      	; 0xb7e <usart_set_baudrate+0xf2>
     b7c:	4a c0       	rjmp	.+148    	; 0xc12 <usart_set_baudrate+0x186>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     b7e:	d5 01       	movw	r26, r10
     b80:	c4 01       	movw	r24, r8
     b82:	88 0f       	add	r24, r24
     b84:	99 1f       	adc	r25, r25
     b86:	aa 1f       	adc	r26, r26
     b88:	bb 1f       	adc	r27, r27
     b8a:	88 0f       	add	r24, r24
     b8c:	99 1f       	adc	r25, r25
     b8e:	aa 1f       	adc	r26, r26
     b90:	bb 1f       	adc	r27, r27
     b92:	88 0f       	add	r24, r24
     b94:	99 1f       	adc	r25, r25
     b96:	aa 1f       	adc	r26, r26
     b98:	bb 1f       	adc	r27, r27
     b9a:	48 1a       	sub	r4, r24
     b9c:	59 0a       	sbc	r5, r25
     b9e:	6a 0a       	sbc	r6, r26
     ba0:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     ba2:	ce 3f       	cpi	r28, 0xFE	; 254
     ba4:	ec f4       	brge	.+58     	; 0xbe0 <usart_set_baudrate+0x154>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     ba6:	8d ef       	ldi	r24, 0xFD	; 253
     ba8:	9f ef       	ldi	r25, 0xFF	; 255
     baa:	8c 1b       	sub	r24, r28
     bac:	91 09       	sbc	r25, r1
     bae:	c7 fd       	sbrc	r28, 7
     bb0:	93 95       	inc	r25
     bb2:	04 c0       	rjmp	.+8      	; 0xbbc <usart_set_baudrate+0x130>
     bb4:	44 0c       	add	r4, r4
     bb6:	55 1c       	adc	r5, r5
     bb8:	66 1c       	adc	r6, r6
     bba:	77 1c       	adc	r7, r7
     bbc:	8a 95       	dec	r24
     bbe:	d2 f7       	brpl	.-12     	; 0xbb4 <usart_set_baudrate+0x128>
     bc0:	d5 01       	movw	r26, r10
     bc2:	c4 01       	movw	r24, r8
     bc4:	b6 95       	lsr	r27
     bc6:	a7 95       	ror	r26
     bc8:	97 95       	ror	r25
     bca:	87 95       	ror	r24
     bcc:	bc 01       	movw	r22, r24
     bce:	cd 01       	movw	r24, r26
     bd0:	64 0d       	add	r22, r4
     bd2:	75 1d       	adc	r23, r5
     bd4:	86 1d       	adc	r24, r6
     bd6:	97 1d       	adc	r25, r7
     bd8:	a5 01       	movw	r20, r10
     bda:	94 01       	movw	r18, r8
     bdc:	ce d4       	rcall	.+2460   	; 0x157a <__udivmodsi4>
     bde:	35 c0       	rjmp	.+106    	; 0xc4a <usart_set_baudrate+0x1be>
		} else {
			baud <<= exp + 3;
     be0:	83 e0       	ldi	r24, 0x03	; 3
     be2:	8c 0f       	add	r24, r28
     be4:	a5 01       	movw	r20, r10
     be6:	94 01       	movw	r18, r8
     be8:	04 c0       	rjmp	.+8      	; 0xbf2 <usart_set_baudrate+0x166>
     bea:	22 0f       	add	r18, r18
     bec:	33 1f       	adc	r19, r19
     bee:	44 1f       	adc	r20, r20
     bf0:	55 1f       	adc	r21, r21
     bf2:	8a 95       	dec	r24
     bf4:	d2 f7       	brpl	.-12     	; 0xbea <usart_set_baudrate+0x15e>
			div = (cpu_hz + baud / 2) / baud;
     bf6:	da 01       	movw	r26, r20
     bf8:	c9 01       	movw	r24, r18
     bfa:	b6 95       	lsr	r27
     bfc:	a7 95       	ror	r26
     bfe:	97 95       	ror	r25
     c00:	87 95       	ror	r24
     c02:	bc 01       	movw	r22, r24
     c04:	cd 01       	movw	r24, r26
     c06:	64 0d       	add	r22, r4
     c08:	75 1d       	adc	r23, r5
     c0a:	86 1d       	adc	r24, r6
     c0c:	97 1d       	adc	r25, r7
     c0e:	b5 d4       	rcall	.+2410   	; 0x157a <__udivmodsi4>
     c10:	1c c0       	rjmp	.+56     	; 0xc4a <usart_set_baudrate+0x1be>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     c12:	83 e0       	ldi	r24, 0x03	; 3
     c14:	8c 0f       	add	r24, r28
     c16:	a5 01       	movw	r20, r10
     c18:	94 01       	movw	r18, r8
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <usart_set_baudrate+0x198>
     c1c:	22 0f       	add	r18, r18
     c1e:	33 1f       	adc	r19, r19
     c20:	44 1f       	adc	r20, r20
     c22:	55 1f       	adc	r21, r21
     c24:	8a 95       	dec	r24
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <usart_set_baudrate+0x190>
		div = (cpu_hz + baud / 2) / baud - 1;
     c28:	da 01       	movw	r26, r20
     c2a:	c9 01       	movw	r24, r18
     c2c:	b6 95       	lsr	r27
     c2e:	a7 95       	ror	r26
     c30:	97 95       	ror	r25
     c32:	87 95       	ror	r24
     c34:	bc 01       	movw	r22, r24
     c36:	cd 01       	movw	r24, r26
     c38:	64 0d       	add	r22, r4
     c3a:	75 1d       	adc	r23, r5
     c3c:	86 1d       	adc	r24, r6
     c3e:	97 1d       	adc	r25, r7
     c40:	9c d4       	rcall	.+2360   	; 0x157a <__udivmodsi4>
     c42:	21 50       	subi	r18, 0x01	; 1
     c44:	31 09       	sbc	r19, r1
     c46:	41 09       	sbc	r20, r1
     c48:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     c4a:	83 2f       	mov	r24, r19
     c4c:	8f 70       	andi	r24, 0x0F	; 15
     c4e:	c2 95       	swap	r28
     c50:	c0 7f       	andi	r28, 0xF0	; 240
     c52:	c8 2b       	or	r28, r24
     c54:	f7 01       	movw	r30, r14
     c56:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     c58:	26 83       	std	Z+6, r18	; 0x06

	return true;
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	18 c0       	rjmp	.+48     	; 0xc8e <usart_set_baudrate+0x202>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	16 c0       	rjmp	.+44     	; 0xc8e <usart_set_baudrate+0x202>
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	14 c0       	rjmp	.+40     	; 0xc8e <usart_set_baudrate+0x202>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     c66:	d5 01       	movw	r26, r10
     c68:	c4 01       	movw	r24, r8
     c6a:	88 0f       	add	r24, r24
     c6c:	99 1f       	adc	r25, r25
     c6e:	aa 1f       	adc	r26, r26
     c70:	bb 1f       	adc	r27, r27
     c72:	88 0f       	add	r24, r24
     c74:	99 1f       	adc	r25, r25
     c76:	aa 1f       	adc	r26, r26
     c78:	bb 1f       	adc	r27, r27
     c7a:	88 0f       	add	r24, r24
     c7c:	99 1f       	adc	r25, r25
     c7e:	aa 1f       	adc	r26, r26
     c80:	bb 1f       	adc	r27, r27
     c82:	48 1a       	sub	r4, r24
     c84:	59 0a       	sbc	r5, r25
     c86:	6a 0a       	sbc	r6, r26
     c88:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     c8a:	c9 ef       	ldi	r28, 0xF9	; 249
     c8c:	8c cf       	rjmp	.-232    	; 0xba6 <usart_set_baudrate+0x11a>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     c8e:	cf 91       	pop	r28
     c90:	1f 91       	pop	r17
     c92:	0f 91       	pop	r16
     c94:	ff 90       	pop	r15
     c96:	ef 90       	pop	r14
     c98:	bf 90       	pop	r11
     c9a:	af 90       	pop	r10
     c9c:	9f 90       	pop	r9
     c9e:	8f 90       	pop	r8
     ca0:	7f 90       	pop	r7
     ca2:	6f 90       	pop	r6
     ca4:	5f 90       	pop	r5
     ca6:	4f 90       	pop	r4
     ca8:	08 95       	ret

00000caa <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     caa:	0f 93       	push	r16
     cac:	1f 93       	push	r17
     cae:	cf 93       	push	r28
     cb0:	df 93       	push	r29
     cb2:	ec 01       	movw	r28, r24
     cb4:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     cb6:	00 97       	sbiw	r24, 0x00	; 0
     cb8:	09 f4       	brne	.+2      	; 0xcbc <usart_init_rs232+0x12>
     cba:	36 c1       	rjmp	.+620    	; 0xf28 <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     cbc:	80 3c       	cpi	r24, 0xC0	; 192
     cbe:	91 05       	cpc	r25, r1
     cc0:	21 f4       	brne	.+8      	; 0xcca <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     cc2:	60 e1       	ldi	r22, 0x10	; 16
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	59 de       	rcall	.-846    	; 0x97a <sysclk_enable_module>
     cc8:	2f c1       	rjmp	.+606    	; 0xf28 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
     cca:	c0 34       	cpi	r28, 0x40	; 64
     ccc:	84 e0       	ldi	r24, 0x04	; 4
     cce:	d8 07       	cpc	r29, r24
     cd0:	21 f4       	brne	.+8      	; 0xcda <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
     cd2:	68 e0       	ldi	r22, 0x08	; 8
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	51 de       	rcall	.-862    	; 0x97a <sysclk_enable_module>
     cd8:	27 c1       	rjmp	.+590    	; 0xf28 <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     cda:	c1 15       	cp	r28, r1
     cdc:	e4 e0       	ldi	r30, 0x04	; 4
     cde:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     ce0:	21 f4       	brne	.+8      	; 0xcea <usart_init_rs232+0x40>
     ce2:	64 e0       	ldi	r22, 0x04	; 4
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	49 de       	rcall	.-878    	; 0x97a <sysclk_enable_module>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     ce8:	1f c1       	rjmp	.+574    	; 0xf28 <usart_init_rs232+0x27e>
     cea:	c0 38       	cpi	r28, 0x80	; 128
     cec:	f1 e0       	ldi	r31, 0x01	; 1
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     cee:	df 07       	cpc	r29, r31
     cf0:	21 f4       	brne	.+8      	; 0xcfa <usart_init_rs232+0x50>
     cf2:	62 e0       	ldi	r22, 0x02	; 2
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	41 de       	rcall	.-894    	; 0x97a <sysclk_enable_module>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     cf8:	17 c1       	rjmp	.+558    	; 0xf28 <usart_init_rs232+0x27e>
     cfa:	c1 15       	cp	r28, r1
     cfc:	81 e0       	ldi	r24, 0x01	; 1
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     cfe:	d8 07       	cpc	r29, r24
     d00:	21 f4       	brne	.+8      	; 0xd0a <usart_init_rs232+0x60>
     d02:	61 e0       	ldi	r22, 0x01	; 1
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	39 de       	rcall	.-910    	; 0x97a <sysclk_enable_module>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     d08:	0f c1       	rjmp	.+542    	; 0xf28 <usart_init_rs232+0x27e>
     d0a:	c0 38       	cpi	r28, 0x80	; 128
     d0c:	e3 e0       	ldi	r30, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     d0e:	de 07       	cpc	r29, r30
     d10:	21 f4       	brne	.+8      	; 0xd1a <usart_init_rs232+0x70>
     d12:	61 e0       	ldi	r22, 0x01	; 1
     d14:	81 e0       	ldi	r24, 0x01	; 1
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     d16:	31 de       	rcall	.-926    	; 0x97a <sysclk_enable_module>
     d18:	07 c1       	rjmp	.+526    	; 0xf28 <usart_init_rs232+0x27e>
     d1a:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     d1c:	f3 e0       	ldi	r31, 0x03	; 3
     d1e:	df 07       	cpc	r29, r31
     d20:	21 f4       	brne	.+8      	; 0xd2a <usart_init_rs232+0x80>
     d22:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     d24:	82 e0       	ldi	r24, 0x02	; 2
     d26:	29 de       	rcall	.-942    	; 0x97a <sysclk_enable_module>
     d28:	ff c0       	rjmp	.+510    	; 0xf28 <usart_init_rs232+0x27e>
     d2a:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     d2c:	82 e0       	ldi	r24, 0x02	; 2
     d2e:	d8 07       	cpc	r29, r24
     d30:	21 f4       	brne	.+8      	; 0xd3a <usart_init_rs232+0x90>
     d32:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	21 de       	rcall	.-958    	; 0x97a <sysclk_enable_module>
     d38:	f7 c0       	rjmp	.+494    	; 0xf28 <usart_init_rs232+0x27e>
     d3a:	c0 34       	cpi	r28, 0x40	; 64
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     d3c:	e2 e0       	ldi	r30, 0x02	; 2
     d3e:	de 07       	cpc	r29, r30
     d40:	21 f4       	brne	.+8      	; 0xd4a <usart_init_rs232+0xa0>
     d42:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
     d44:	82 e0       	ldi	r24, 0x02	; 2
     d46:	19 de       	rcall	.-974    	; 0x97a <sysclk_enable_module>
     d48:	ef c0       	rjmp	.+478    	; 0xf28 <usart_init_rs232+0x27e>
     d4a:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
     d4c:	f3 e0       	ldi	r31, 0x03	; 3
     d4e:	df 07       	cpc	r29, r31
     d50:	21 f4       	brne	.+8      	; 0xd5a <usart_init_rs232+0xb0>
     d52:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	11 de       	rcall	.-990    	; 0x97a <sysclk_enable_module>
     d58:	e7 c0       	rjmp	.+462    	; 0xf28 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     d5a:	c0 32       	cpi	r28, 0x20	; 32
     d5c:	83 e0       	ldi	r24, 0x03	; 3
     d5e:	d8 07       	cpc	r29, r24
     d60:	21 f4       	brne	.+8      	; 0xd6a <usart_init_rs232+0xc0>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     d62:	64 e0       	ldi	r22, 0x04	; 4
     d64:	82 e0       	ldi	r24, 0x02	; 2
     d66:	09 de       	rcall	.-1006   	; 0x97a <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     d68:	df c0       	rjmp	.+446    	; 0xf28 <usart_init_rs232+0x27e>
     d6a:	c1 15       	cp	r28, r1
     d6c:	e8 e0       	ldi	r30, 0x08	; 8
     d6e:	de 07       	cpc	r29, r30
     d70:	21 f4       	brne	.+8      	; 0xd7a <usart_init_rs232+0xd0>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     d72:	61 e0       	ldi	r22, 0x01	; 1
     d74:	83 e0       	ldi	r24, 0x03	; 3
     d76:	01 de       	rcall	.-1022   	; 0x97a <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     d78:	d7 c0       	rjmp	.+430    	; 0xf28 <usart_init_rs232+0x27e>
     d7a:	c1 15       	cp	r28, r1
     d7c:	f9 e0       	ldi	r31, 0x09	; 9
     d7e:	df 07       	cpc	r29, r31
     d80:	21 f4       	brne	.+8      	; 0xd8a <usart_init_rs232+0xe0>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     d82:	61 e0       	ldi	r22, 0x01	; 1
     d84:	84 e0       	ldi	r24, 0x04	; 4
     d86:	f9 dd       	rcall	.-1038   	; 0x97a <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     d88:	cf c0       	rjmp	.+414    	; 0xf28 <usart_init_rs232+0x27e>
     d8a:	c1 15       	cp	r28, r1
     d8c:	8a e0       	ldi	r24, 0x0A	; 10
     d8e:	d8 07       	cpc	r29, r24
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     d90:	21 f4       	brne	.+8      	; 0xd9a <usart_init_rs232+0xf0>
     d92:	61 e0       	ldi	r22, 0x01	; 1
     d94:	85 e0       	ldi	r24, 0x05	; 5
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     d96:	f1 dd       	rcall	.-1054   	; 0x97a <sysclk_enable_module>
     d98:	c7 c0       	rjmp	.+398    	; 0xf28 <usart_init_rs232+0x27e>
     d9a:	c1 15       	cp	r28, r1
     d9c:	eb e0       	ldi	r30, 0x0B	; 11
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     d9e:	de 07       	cpc	r29, r30
     da0:	21 f4       	brne	.+8      	; 0xdaa <usart_init_rs232+0x100>
     da2:	61 e0       	ldi	r22, 0x01	; 1
     da4:	86 e0       	ldi	r24, 0x06	; 6
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     da6:	e9 dd       	rcall	.-1070   	; 0x97a <sysclk_enable_module>
     da8:	bf c0       	rjmp	.+382    	; 0xf28 <usart_init_rs232+0x27e>
     daa:	c0 34       	cpi	r28, 0x40	; 64
     dac:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     dae:	df 07       	cpc	r29, r31
     db0:	21 f4       	brne	.+8      	; 0xdba <usart_init_rs232+0x110>
     db2:	62 e0       	ldi	r22, 0x02	; 2
     db4:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     db6:	e1 dd       	rcall	.-1086   	; 0x97a <sysclk_enable_module>
     db8:	b7 c0       	rjmp	.+366    	; 0xf28 <usart_init_rs232+0x27e>
     dba:	c0 34       	cpi	r28, 0x40	; 64
     dbc:	89 e0       	ldi	r24, 0x09	; 9
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     dbe:	d8 07       	cpc	r29, r24
     dc0:	21 f4       	brne	.+8      	; 0xdca <usart_init_rs232+0x120>
     dc2:	62 e0       	ldi	r22, 0x02	; 2
     dc4:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     dc6:	d9 dd       	rcall	.-1102   	; 0x97a <sysclk_enable_module>
     dc8:	af c0       	rjmp	.+350    	; 0xf28 <usart_init_rs232+0x27e>
     dca:	c0 34       	cpi	r28, 0x40	; 64
     dcc:	ea e0       	ldi	r30, 0x0A	; 10
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
     dce:	de 07       	cpc	r29, r30
     dd0:	21 f4       	brne	.+8      	; 0xdda <usart_init_rs232+0x130>
     dd2:	62 e0       	ldi	r22, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
     dd4:	85 e0       	ldi	r24, 0x05	; 5
     dd6:	d1 dd       	rcall	.-1118   	; 0x97a <sysclk_enable_module>
     dd8:	a7 c0       	rjmp	.+334    	; 0xf28 <usart_init_rs232+0x27e>
     dda:	c0 34       	cpi	r28, 0x40	; 64
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     ddc:	fb e0       	ldi	r31, 0x0B	; 11
     dde:	df 07       	cpc	r29, r31
     de0:	21 f4       	brne	.+8      	; 0xdea <usart_init_rs232+0x140>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     de2:	62 e0       	ldi	r22, 0x02	; 2
     de4:	86 e0       	ldi	r24, 0x06	; 6
     de6:	c9 dd       	rcall	.-1134   	; 0x97a <sysclk_enable_module>
     de8:	9f c0       	rjmp	.+318    	; 0xf28 <usart_init_rs232+0x27e>
     dea:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     dec:	88 e0       	ldi	r24, 0x08	; 8
     dee:	d8 07       	cpc	r29, r24
     df0:	21 f4       	brne	.+8      	; 0xdfa <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     df2:	64 e0       	ldi	r22, 0x04	; 4
     df4:	83 e0       	ldi	r24, 0x03	; 3
     df6:	c1 dd       	rcall	.-1150   	; 0x97a <sysclk_enable_module>
     df8:	97 c0       	rjmp	.+302    	; 0xf28 <usart_init_rs232+0x27e>
     dfa:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     dfc:	e9 e0       	ldi	r30, 0x09	; 9
     dfe:	de 07       	cpc	r29, r30
     e00:	21 f4       	brne	.+8      	; 0xe0a <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     e02:	64 e0       	ldi	r22, 0x04	; 4
     e04:	84 e0       	ldi	r24, 0x04	; 4
     e06:	b9 dd       	rcall	.-1166   	; 0x97a <sysclk_enable_module>
     e08:	8f c0       	rjmp	.+286    	; 0xf28 <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     e0a:	c0 39       	cpi	r28, 0x90	; 144
     e0c:	fa e0       	ldi	r31, 0x0A	; 10
     e0e:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     e10:	21 f4       	brne	.+8      	; 0xe1a <usart_init_rs232+0x170>
     e12:	64 e0       	ldi	r22, 0x04	; 4
     e14:	85 e0       	ldi	r24, 0x05	; 5
     e16:	b1 dd       	rcall	.-1182   	; 0x97a <sysclk_enable_module>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     e18:	87 c0       	rjmp	.+270    	; 0xf28 <usart_init_rs232+0x27e>
     e1a:	c0 39       	cpi	r28, 0x90	; 144
     e1c:	8b e0       	ldi	r24, 0x0B	; 11
     e1e:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     e20:	21 f4       	brne	.+8      	; 0xe2a <usart_init_rs232+0x180>
     e22:	64 e0       	ldi	r22, 0x04	; 4
     e24:	86 e0       	ldi	r24, 0x06	; 6
     e26:	a9 dd       	rcall	.-1198   	; 0x97a <sysclk_enable_module>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     e28:	7f c0       	rjmp	.+254    	; 0xf28 <usart_init_rs232+0x27e>
     e2a:	c0 3c       	cpi	r28, 0xC0	; 192
     e2c:	e8 e0       	ldi	r30, 0x08	; 8
     e2e:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     e30:	21 f4       	brne	.+8      	; 0xe3a <usart_init_rs232+0x190>
     e32:	68 e0       	ldi	r22, 0x08	; 8
     e34:	83 e0       	ldi	r24, 0x03	; 3
     e36:	a1 dd       	rcall	.-1214   	; 0x97a <sysclk_enable_module>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
     e38:	77 c0       	rjmp	.+238    	; 0xf28 <usart_init_rs232+0x27e>
     e3a:	c0 3c       	cpi	r28, 0xC0	; 192
     e3c:	f9 e0       	ldi	r31, 0x09	; 9
     e3e:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
     e40:	21 f4       	brne	.+8      	; 0xe4a <usart_init_rs232+0x1a0>
     e42:	68 e0       	ldi	r22, 0x08	; 8
     e44:	84 e0       	ldi	r24, 0x04	; 4
     e46:	99 dd       	rcall	.-1230   	; 0x97a <sysclk_enable_module>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
     e48:	6f c0       	rjmp	.+222    	; 0xf28 <usart_init_rs232+0x27e>
     e4a:	c0 3c       	cpi	r28, 0xC0	; 192
     e4c:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
     e4e:	d8 07       	cpc	r29, r24
     e50:	21 f4       	brne	.+8      	; 0xe5a <usart_init_rs232+0x1b0>
     e52:	68 e0       	ldi	r22, 0x08	; 8
     e54:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     e56:	91 dd       	rcall	.-1246   	; 0x97a <sysclk_enable_module>
     e58:	67 c0       	rjmp	.+206    	; 0xf28 <usart_init_rs232+0x27e>
     e5a:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     e5c:	eb e0       	ldi	r30, 0x0B	; 11
     e5e:	de 07       	cpc	r29, r30
     e60:	21 f4       	brne	.+8      	; 0xe6a <usart_init_rs232+0x1c0>
     e62:	68 e0       	ldi	r22, 0x08	; 8
     e64:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     e66:	89 dd       	rcall	.-1262   	; 0x97a <sysclk_enable_module>
     e68:	5f c0       	rjmp	.+190    	; 0xf28 <usart_init_rs232+0x27e>
     e6a:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     e6c:	f8 e0       	ldi	r31, 0x08	; 8
     e6e:	df 07       	cpc	r29, r31
     e70:	21 f4       	brne	.+8      	; 0xe7a <usart_init_rs232+0x1d0>
     e72:	60 e1       	ldi	r22, 0x10	; 16
     e74:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     e76:	81 dd       	rcall	.-1278   	; 0x97a <sysclk_enable_module>
     e78:	57 c0       	rjmp	.+174    	; 0xf28 <usart_init_rs232+0x27e>
     e7a:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     e7c:	89 e0       	ldi	r24, 0x09	; 9
     e7e:	d8 07       	cpc	r29, r24
     e80:	21 f4       	brne	.+8      	; 0xe8a <usart_init_rs232+0x1e0>
     e82:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     e84:	84 e0       	ldi	r24, 0x04	; 4
     e86:	79 dd       	rcall	.-1294   	; 0x97a <sysclk_enable_module>
     e88:	4f c0       	rjmp	.+158    	; 0xf28 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     e8a:	c0 3a       	cpi	r28, 0xA0	; 160
     e8c:	ea e0       	ldi	r30, 0x0A	; 10
     e8e:	de 07       	cpc	r29, r30
     e90:	21 f4       	brne	.+8      	; 0xe9a <usart_init_rs232+0x1f0>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     e92:	60 e1       	ldi	r22, 0x10	; 16
     e94:	85 e0       	ldi	r24, 0x05	; 5
     e96:	71 dd       	rcall	.-1310   	; 0x97a <sysclk_enable_module>
     e98:	47 c0       	rjmp	.+142    	; 0xf28 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     e9a:	c0 3a       	cpi	r28, 0xA0	; 160
     e9c:	fb e0       	ldi	r31, 0x0B	; 11
     e9e:	df 07       	cpc	r29, r31
     ea0:	21 f4       	brne	.+8      	; 0xeaa <usart_init_rs232+0x200>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     ea2:	60 e1       	ldi	r22, 0x10	; 16
     ea4:	86 e0       	ldi	r24, 0x06	; 6
     ea6:	69 dd       	rcall	.-1326   	; 0x97a <sysclk_enable_module>
     ea8:	3f c0       	rjmp	.+126    	; 0xf28 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     eaa:	c0 3b       	cpi	r28, 0xB0	; 176
     eac:	88 e0       	ldi	r24, 0x08	; 8
     eae:	d8 07       	cpc	r29, r24
     eb0:	21 f4       	brne	.+8      	; 0xeba <usart_init_rs232+0x210>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
     eb2:	60 e2       	ldi	r22, 0x20	; 32
     eb4:	83 e0       	ldi	r24, 0x03	; 3
     eb6:	61 dd       	rcall	.-1342   	; 0x97a <sysclk_enable_module>
     eb8:	37 c0       	rjmp	.+110    	; 0xf28 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
     eba:	c0 3b       	cpi	r28, 0xB0	; 176
     ebc:	e9 e0       	ldi	r30, 0x09	; 9
     ebe:	de 07       	cpc	r29, r30
     ec0:	21 f4       	brne	.+8      	; 0xeca <usart_init_rs232+0x220>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
     ec2:	60 e2       	ldi	r22, 0x20	; 32
     ec4:	84 e0       	ldi	r24, 0x04	; 4
     ec6:	59 dd       	rcall	.-1358   	; 0x97a <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
     ec8:	2f c0       	rjmp	.+94     	; 0xf28 <usart_init_rs232+0x27e>
     eca:	c0 3b       	cpi	r28, 0xB0	; 176
     ecc:	fa e0       	ldi	r31, 0x0A	; 10
     ece:	df 07       	cpc	r29, r31
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     ed0:	21 f4       	brne	.+8      	; 0xeda <usart_init_rs232+0x230>
     ed2:	60 e2       	ldi	r22, 0x20	; 32
     ed4:	85 e0       	ldi	r24, 0x05	; 5
     ed6:	51 dd       	rcall	.-1374   	; 0x97a <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     ed8:	27 c0       	rjmp	.+78     	; 0xf28 <usart_init_rs232+0x27e>
     eda:	c0 3b       	cpi	r28, 0xB0	; 176
     edc:	8b e0       	ldi	r24, 0x0B	; 11
     ede:	d8 07       	cpc	r29, r24
     ee0:	21 f4       	brne	.+8      	; 0xeea <usart_init_rs232+0x240>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
     ee2:	60 e2       	ldi	r22, 0x20	; 32
     ee4:	86 e0       	ldi	r24, 0x06	; 6
     ee6:	49 dd       	rcall	.-1390   	; 0x97a <sysclk_enable_module>
     ee8:	1f c0       	rjmp	.+62     	; 0xf28 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
     eea:	c0 38       	cpi	r28, 0x80	; 128
     eec:	e4 e0       	ldi	r30, 0x04	; 4
     eee:	de 07       	cpc	r29, r30
     ef0:	21 f4       	brne	.+8      	; 0xefa <usart_init_rs232+0x250>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     ef2:	60 e4       	ldi	r22, 0x40	; 64
     ef4:	83 e0       	ldi	r24, 0x03	; 3
     ef6:	41 dd       	rcall	.-1406   	; 0x97a <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     ef8:	17 c0       	rjmp	.+46     	; 0xf28 <usart_init_rs232+0x27e>
     efa:	c0 39       	cpi	r28, 0x90	; 144
     efc:	f4 e0       	ldi	r31, 0x04	; 4
     efe:	df 07       	cpc	r29, r31
     f00:	21 f4       	brne	.+8      	; 0xf0a <usart_init_rs232+0x260>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
     f02:	60 e4       	ldi	r22, 0x40	; 64
     f04:	84 e0       	ldi	r24, 0x04	; 4
     f06:	39 dd       	rcall	.-1422   	; 0x97a <sysclk_enable_module>
     f08:	0f c0       	rjmp	.+30     	; 0xf28 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
     f0a:	c0 3a       	cpi	r28, 0xA0	; 160
     f0c:	84 e0       	ldi	r24, 0x04	; 4
     f0e:	d8 07       	cpc	r29, r24
     f10:	21 f4       	brne	.+8      	; 0xf1a <usart_init_rs232+0x270>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     f12:	60 e4       	ldi	r22, 0x40	; 64
     f14:	85 e0       	ldi	r24, 0x05	; 5
     f16:	31 dd       	rcall	.-1438   	; 0x97a <sysclk_enable_module>
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     f18:	07 c0       	rjmp	.+14     	; 0xf28 <usart_init_rs232+0x27e>
     f1a:	c0 3b       	cpi	r28, 0xB0	; 176
     f1c:	e4 e0       	ldi	r30, 0x04	; 4
     f1e:	de 07       	cpc	r29, r30
     f20:	19 f4       	brne	.+6      	; 0xf28 <usart_init_rs232+0x27e>
     f22:	60 e4       	ldi	r22, 0x40	; 64
     f24:	86 e0       	ldi	r24, 0x06	; 6
     f26:	29 dd       	rcall	.-1454   	; 0x97a <sysclk_enable_module>
     f28:	8d 81       	ldd	r24, Y+5	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     f2a:	8f 73       	andi	r24, 0x3F	; 63
     f2c:	8d 83       	std	Y+5, r24	; 0x05
     f2e:	f8 01       	movw	r30, r16
     f30:	95 81       	ldd	r25, Z+5	; 0x05
     f32:	84 81       	ldd	r24, Z+4	; 0x04
     f34:	89 2b       	or	r24, r25
     f36:	96 81       	ldd	r25, Z+6	; 0x06
     f38:	91 11       	cpse	r25, r1
     f3a:	98 e0       	ldi	r25, 0x08	; 8
     f3c:	89 2b       	or	r24, r25
     f3e:	8d 83       	std	Y+5, r24	; 0x05
     f40:	f8 01       	movw	r30, r16
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     f42:	40 81       	ld	r20, Z
     f44:	51 81       	ldd	r21, Z+1	; 0x01
     f46:	62 81       	ldd	r22, Z+2	; 0x02
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     f48:	73 81       	ldd	r23, Z+3	; 0x03
     f4a:	00 e8       	ldi	r16, 0x80	; 128
     f4c:	14 e8       	ldi	r17, 0x84	; 132
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     f4e:	2e e1       	ldi	r18, 0x1E	; 30
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	ce 01       	movw	r24, r28
     f54:	9b dd       	rcall	.-1226   	; 0xa8c <usart_set_baudrate>
     f56:	9c 81       	ldd	r25, Y+4	; 0x04
     f58:	98 60       	ori	r25, 0x08	; 8
     f5a:	9c 83       	std	Y+4, r25	; 0x04
     f5c:	9c 81       	ldd	r25, Y+4	; 0x04
     f5e:	90 61       	ori	r25, 0x10	; 16
     f60:	9c 83       	std	Y+4, r25	; 0x04
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	1f 91       	pop	r17
     f68:	0f 91       	pop	r16
     f6a:	08 95       	ret

00000f6c <usart_tx_at>:
uint16_t controller_calc_avg(uint32_t data, uint16_t cnt) {
	 uint16_t avg = 0;
	 
	 avg = data/cnt;
	 return avg;
}
     f6c:	0f 93       	push	r16
     f6e:	1f 93       	push	r17
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	eb 01       	movw	r28, r22
     f76:	68 81       	ld	r22, Y
     f78:	66 23       	and	r22, r22
     f7a:	39 f0       	breq	.+14     	; 0xf8a <usart_tx_at+0x1e>
     f7c:	8c 01       	movw	r16, r24
     f7e:	21 96       	adiw	r28, 0x01	; 1
     f80:	c8 01       	movw	r24, r16
     f82:	7c dd       	rcall	.-1288   	; 0xa7c <usart_putchar>
     f84:	69 91       	ld	r22, Y+
     f86:	61 11       	cpse	r22, r1
     f88:	fb cf       	rjmp	.-10     	; 0xf80 <usart_tx_at+0x14>
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	1f 91       	pop	r17
     f90:	0f 91       	pop	r16
     f92:	08 95       	ret

00000f94 <rtc_init_period>:
     f94:	0f 93       	push	r16
     f96:	1f 93       	push	r17
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	1f 92       	push	r1
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	8c 01       	movw	r16, r24
     fa4:	64 e0       	ldi	r22, 0x04	; 4
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	e8 dc       	rcall	.-1584   	; 0x97a <sysclk_enable_module>
     faa:	e0 e0       	ldi	r30, 0x00	; 0
     fac:	f4 e0       	ldi	r31, 0x04	; 4
     fae:	02 87       	std	Z+10, r16	; 0x0a
     fb0:	13 87       	std	Z+11, r17	; 0x0b
     fb2:	10 86       	std	Z+8, r1	; 0x08
     fb4:	11 86       	std	Z+9, r1	; 0x09
     fb6:	80 91 06 21 	lds	r24, 0x2106	; 0x802106 <sleepmgr_locks+0x3>
     fba:	8f 3f       	cpi	r24, 0xFF	; 255
     fbc:	09 f4       	brne	.+2      	; 0xfc0 <rtc_init_period+0x2c>
     fbe:	ff cf       	rjmp	.-2      	; 0xfbe <rtc_init_period+0x2a>
     fc0:	8f b7       	in	r24, 0x3f	; 63
     fc2:	89 83       	std	Y+1, r24	; 0x01
     fc4:	f8 94       	cli
     fc6:	99 81       	ldd	r25, Y+1	; 0x01
     fc8:	e3 e0       	ldi	r30, 0x03	; 3
     fca:	f1 e2       	ldi	r31, 0x21	; 33
     fcc:	83 81       	ldd	r24, Z+3	; 0x03
     fce:	8f 5f       	subi	r24, 0xFF	; 255
     fd0:	83 83       	std	Z+3, r24	; 0x03
     fd2:	9f bf       	out	0x3f, r25	; 63
     fd4:	e0 e0       	ldi	r30, 0x00	; 0
     fd6:	f4 e0       	ldi	r31, 0x04	; 4
     fd8:	82 81       	ldd	r24, Z+2	; 0x02
     fda:	81 60       	ori	r24, 0x01	; 1
     fdc:	82 83       	std	Z+2, r24	; 0x02
     fde:	87 e0       	ldi	r24, 0x07	; 7
     fe0:	80 83       	st	Z, r24
     fe2:	0f 90       	pop	r0
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	1f 91       	pop	r17
     fea:	0f 91       	pop	r16
     fec:	08 95       	ret

00000fee <at_timeout_stop>:
     fee:	f8 94       	cli
     ff0:	e0 e0       	ldi	r30, 0x00	; 0
     ff2:	f8 e0       	ldi	r31, 0x08	; 8
     ff4:	84 85       	ldd	r24, Z+12	; 0x0c
     ff6:	81 60       	ori	r24, 0x01	; 1
     ff8:	84 87       	std	Z+12, r24	; 0x0c
     ffa:	08 95       	ret

00000ffc <at_command_timeout_setup>:
     ffc:	e0 e0       	ldi	r30, 0x00	; 0
     ffe:	f8 e0       	ldi	r31, 0x08	; 8
    1000:	86 81       	ldd	r24, Z+6	; 0x06
    1002:	81 60       	ori	r24, 0x01	; 1
    1004:	86 83       	std	Z+6, r24	; 0x06
    1006:	87 e0       	ldi	r24, 0x07	; 7
    1008:	80 83       	st	Z, r24
    100a:	81 81       	ldd	r24, Z+1	; 0x01
    100c:	81 83       	std	Z+1, r24	; 0x01
    100e:	80 e4       	ldi	r24, 0x40	; 64
    1010:	9f e1       	ldi	r25, 0x1F	; 31
    1012:	86 a3       	std	Z+38, r24	; 0x26
    1014:	97 a3       	std	Z+39, r25	; 0x27
    1016:	08 95       	ret

00001018 <adc_result_average>:
    1018:	cf 92       	push	r12
    101a:	df 92       	push	r13
    101c:	ef 92       	push	r14
    101e:	ff 92       	push	r15
    1020:	0f 93       	push	r16
    1022:	1f 93       	push	r17
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
    1028:	1f 92       	push	r1
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
    102e:	28 2f       	mov	r18, r24
    1030:	0d b7       	in	r16, 0x3d	; 61
    1032:	1e b7       	in	r17, 0x3e	; 62
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	4d b7       	in	r20, 0x3d	; 61
    103c:	5e b7       	in	r21, 0x3e	; 62
    103e:	48 1b       	sub	r20, r24
    1040:	59 0b       	sbc	r21, r25
    1042:	4d bf       	out	0x3d, r20	; 61
    1044:	5e bf       	out	0x3e, r21	; 62
    1046:	ad b7       	in	r26, 0x3d	; 61
    1048:	be b7       	in	r27, 0x3e	; 62
    104a:	11 96       	adiw	r26, 0x01	; 1
    104c:	22 23       	and	r18, r18
    104e:	f9 f0       	breq	.+62     	; 0x108e <adc_result_average+0x76>
    1050:	c1 2c       	mov	r12, r1
    1052:	d1 2c       	mov	r13, r1
    1054:	76 01       	movw	r14, r12
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	e0 e0       	ldi	r30, 0x00	; 0
    105a:	f2 e0       	ldi	r31, 0x02	; 2
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	9f b7       	in	r25, 0x3f	; 63
    1060:	99 83       	std	Y+1, r25	; 0x01
    1062:	f8 94       	cli
    1064:	49 81       	ldd	r20, Y+1	; 0x01
    1066:	90 81       	ld	r25, Z
    1068:	94 60       	ori	r25, 0x04	; 4
    106a:	90 83       	st	Z, r25
    106c:	4f bf       	out	0x3f, r20	; 63
    106e:	96 81       	ldd	r25, Z+6	; 0x06
    1070:	90 ff       	sbrs	r25, 0
    1072:	fd cf       	rjmp	.-6      	; 0x106e <adc_result_average+0x56>
    1074:	86 83       	std	Z+6, r24	; 0x06
    1076:	44 a1       	ldd	r20, Z+36	; 0x24
    1078:	55 a1       	ldd	r21, Z+37	; 0x25
    107a:	4d 93       	st	X+, r20
    107c:	5d 93       	st	X+, r21
    107e:	c4 0e       	add	r12, r20
    1080:	d5 1e       	adc	r13, r21
    1082:	e1 1c       	adc	r14, r1
    1084:	f1 1c       	adc	r15, r1
    1086:	3f 5f       	subi	r19, 0xFF	; 255
    1088:	23 13       	cpse	r18, r19
    108a:	e9 cf       	rjmp	.-46     	; 0x105e <adc_result_average+0x46>
    108c:	03 c0       	rjmp	.+6      	; 0x1094 <adc_result_average+0x7c>
    108e:	c1 2c       	mov	r12, r1
    1090:	d1 2c       	mov	r13, r1
    1092:	76 01       	movw	r14, r12
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	40 e0       	ldi	r20, 0x00	; 0
    1098:	50 e0       	ldi	r21, 0x00	; 0
    109a:	c7 01       	movw	r24, r14
    109c:	b6 01       	movw	r22, r12
    109e:	6d d2       	rcall	.+1242   	; 0x157a <__udivmodsi4>
    10a0:	c9 01       	movw	r24, r18
    10a2:	0d bf       	out	0x3d, r16	; 61
    10a4:	1e bf       	out	0x3e, r17	; 62
    10a6:	0f 90       	pop	r0
    10a8:	df 91       	pop	r29
    10aa:	cf 91       	pop	r28
    10ac:	1f 91       	pop	r17
    10ae:	0f 91       	pop	r16
    10b0:	ff 90       	pop	r15
    10b2:	ef 90       	pop	r14
    10b4:	df 90       	pop	r13
    10b6:	cf 90       	pop	r12
    10b8:	08 95       	ret

000010ba <controller_measure>:
    10ba:	0f 93       	push	r16
    10bc:	1f 93       	push	r17
    10be:	cf 93       	push	r28
    10c0:	df 93       	push	r29
    10c2:	8b 01       	movw	r16, r22
    10c4:	a9 df       	rcall	.-174    	; 0x1018 <adc_result_average>
    10c6:	ec 01       	movw	r28, r24
    10c8:	df 93       	push	r29
    10ca:	8f 93       	push	r24
    10cc:	8c e4       	ldi	r24, 0x4C	; 76
    10ce:	90 e2       	ldi	r25, 0x20	; 32
    10d0:	9f 93       	push	r25
    10d2:	8f 93       	push	r24
    10d4:	82 e9       	ldi	r24, 0x92	; 146
    10d6:	90 e2       	ldi	r25, 0x20	; 32
    10d8:	9f 93       	push	r25
    10da:	8f 93       	push	r24
    10dc:	a5 d2       	rcall	.+1354   	; 0x1628 <sprintf>
    10de:	62 e9       	ldi	r22, 0x92	; 146
    10e0:	70 e2       	ldi	r23, 0x20	; 32
    10e2:	80 ea       	ldi	r24, 0xA0	; 160
    10e4:	9a e0       	ldi	r25, 0x0A	; 10
    10e6:	42 df       	rcall	.-380    	; 0xf6c <usart_tx_at>
    10e8:	f8 01       	movw	r30, r16
    10ea:	80 81       	ld	r24, Z
    10ec:	91 81       	ldd	r25, Z+1	; 0x01
    10ee:	9e 01       	movw	r18, r28
    10f0:	28 1b       	sub	r18, r24
    10f2:	39 0b       	sbc	r19, r25
    10f4:	c9 01       	movw	r24, r18
    10f6:	b9 01       	movw	r22, r18
    10f8:	99 23       	and	r25, r25
    10fa:	24 f4       	brge	.+8      	; 0x1104 <controller_measure+0x4a>
    10fc:	66 27       	eor	r22, r22
    10fe:	77 27       	eor	r23, r23
    1100:	62 1b       	sub	r22, r18
    1102:	73 0b       	sbc	r23, r19
    1104:	f8 01       	movw	r30, r16
    1106:	24 81       	ldd	r18, Z+4	; 0x04
    1108:	35 81       	ldd	r19, Z+5	; 0x05
    110a:	33 23       	and	r19, r19
    110c:	1c f4       	brge	.+6      	; 0x1114 <controller_measure+0x5a>
    110e:	31 95       	neg	r19
    1110:	21 95       	neg	r18
    1112:	31 09       	sbc	r19, r1
    1114:	41 e0       	ldi	r20, 0x01	; 1
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	26 17       	cp	r18, r22
    1124:	37 07       	cpc	r19, r23
    1126:	0c f0       	brlt	.+2      	; 0x112a <controller_measure+0x70>
    1128:	40 e0       	ldi	r20, 0x00	; 0
    112a:	44 23       	and	r20, r20
    112c:	61 f0       	breq	.+24     	; 0x1146 <controller_measure+0x8c>
    112e:	21 e0       	ldi	r18, 0x01	; 1
    1130:	f8 01       	movw	r30, r16
    1132:	46 85       	ldd	r20, Z+14	; 0x0e
    1134:	57 85       	ldd	r21, Z+15	; 0x0f
    1136:	45 2b       	or	r20, r21
    1138:	09 f4       	brne	.+2      	; 0x113c <controller_measure+0x82>
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	22 23       	and	r18, r18
    113e:	19 f0       	breq	.+6      	; 0x1146 <controller_measure+0x8c>
    1140:	f8 01       	movw	r30, r16
    1142:	84 83       	std	Z+4, r24	; 0x04
    1144:	95 83       	std	Z+5, r25	; 0x05
    1146:	f8 01       	movw	r30, r16
    1148:	c0 83       	st	Z, r28
    114a:	d1 83       	std	Z+1, r29	; 0x01
    114c:	80 85       	ldd	r24, Z+8	; 0x08
    114e:	91 85       	ldd	r25, Z+9	; 0x09
    1150:	c8 17       	cp	r28, r24
    1152:	d9 07       	cpc	r29, r25
    1154:	10 f4       	brcc	.+4      	; 0x115a <controller_measure+0xa0>
    1156:	c0 87       	std	Z+8, r28	; 0x08
    1158:	d1 87       	std	Z+9, r29	; 0x09
    115a:	f8 01       	movw	r30, r16
    115c:	82 85       	ldd	r24, Z+10	; 0x0a
    115e:	93 85       	ldd	r25, Z+11	; 0x0b
    1160:	8c 17       	cp	r24, r28
    1162:	9d 07       	cpc	r25, r29
    1164:	10 f4       	brcc	.+4      	; 0x116a <controller_measure+0xb0>
    1166:	c2 87       	std	Z+10, r28	; 0x0a
    1168:	d3 87       	std	Z+11, r29	; 0x0b
    116a:	ce 01       	movw	r24, r28
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	1f 91       	pop	r17
    1172:	0f 91       	pop	r16
    1174:	08 95       	ret

00001176 <controller_tx>:

void controller_tx(uint16_t array[TX_DATA_SIZE]) {
    1176:	0f 93       	push	r16
    1178:	1f 93       	push	r17
    117a:	cf 93       	push	r28
    117c:	df 93       	push	r29
    117e:	ec 01       	movw	r28, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1180:	4a e0       	ldi	r20, 0x0A	; 10
    1182:	69 ef       	ldi	r22, 0xF9	; 249
    1184:	70 e2       	ldi	r23, 0x20	; 32
    1186:	8e 81       	ldd	r24, Y+6	; 0x06
    1188:	9f 81       	ldd	r25, Y+7	; 0x07
    118a:	2b d2       	rcall	.+1110   	; 0x15e2 <__itoa_ncheck>
    118c:	4a e0       	ldi	r20, 0x0A	; 10
    118e:	64 ef       	ldi	r22, 0xF4	; 244
    1190:	70 e2       	ldi	r23, 0x20	; 32
    1192:	88 85       	ldd	r24, Y+8	; 0x08
    1194:	99 85       	ldd	r25, Y+9	; 0x09
    1196:	25 d2       	rcall	.+1098   	; 0x15e2 <__itoa_ncheck>
    1198:	4a e0       	ldi	r20, 0x0A	; 10
    119a:	6f ee       	ldi	r22, 0xEF	; 239
    119c:	70 e2       	ldi	r23, 0x20	; 32
    119e:	8a 85       	ldd	r24, Y+10	; 0x0a
    11a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    11a2:	1f d2       	rcall	.+1086   	; 0x15e2 <__itoa_ncheck>
    11a4:	4a e0       	ldi	r20, 0x0A	; 10
    11a6:	6a ee       	ldi	r22, 0xEA	; 234
    11a8:	70 e2       	ldi	r23, 0x20	; 32
    11aa:	8c 81       	ldd	r24, Y+4	; 0x04
    11ac:	9d 81       	ldd	r25, Y+5	; 0x05
    11ae:	19 d2       	rcall	.+1074   	; 0x15e2 <__itoa_ncheck>
    itoa(array[POSITION_MIN], loadcell_adc_result_min_ascii, 10); //convert to hex to lower transferred bytes.
    itoa(array[POSITION_MAX], loadcell_adc_result_max_ascii, 10); //convert to hex to lower transferred bytes.
    itoa(array[POSITION_TRAN_MAX], loadcell_adc_result_tran_ascii, 10); //convert to hex to lower transferred bytes.
    
	//reset parameters
	array[0] = 0;
    11b0:	18 82       	st	Y, r1
    11b2:	19 82       	std	Y+1, r1	; 0x01
	array[1] = 0;
    11b4:	1a 82       	std	Y+2, r1	; 0x02
    11b6:	1b 82       	std	Y+3, r1	; 0x03
	array[2] = 0;
    11b8:	1c 82       	std	Y+4, r1	; 0x04
    11ba:	1d 82       	std	Y+5, r1	; 0x05
	array[3] = 0;
    11bc:	1e 82       	std	Y+6, r1	; 0x06
    11be:	1f 82       	std	Y+7, r1	; 0x07
	array[4] = 0;
    11c0:	18 86       	std	Y+8, r1	; 0x08
    11c2:	19 86       	std	Y+9, r1	; 0x09
	array[5] = 0;
    11c4:	1a 86       	std	Y+10, r1	; 0x0a
    11c6:	1b 86       	std	Y+11, r1	; 0x0b
           
                 
    year = 17;
    11c8:	81 e1       	ldi	r24, 0x11	; 17
    11ca:	80 93 e9 20 	sts	0x20E9, r24	; 0x8020e9 <year>
    11ce:	40 e1       	ldi	r20, 0x10	; 16
    11d0:	61 ee       	ldi	r22, 0xE1	; 225
    11d2:	70 e2       	ldi	r23, 0x20	; 32
    11d4:	81 e1       	ldi	r24, 0x11	; 17
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	04 d2       	rcall	.+1032   	; 0x15e2 <__itoa_ncheck>
    itoa(year, year_ascii,16);
    month = 6;
    11da:	86 e0       	ldi	r24, 0x06	; 6
    11dc:	80 93 e8 20 	sts	0x20E8, r24	; 0x8020e8 <month>
    11e0:	40 e1       	ldi	r20, 0x10	; 16
    11e2:	6e ed       	ldi	r22, 0xDE	; 222
    11e4:	70 e2       	ldi	r23, 0x20	; 32
    11e6:	86 e0       	ldi	r24, 0x06	; 6
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    itoa(month, month_ascii,16);
    day = 7;
    11ea:	fb d1       	rcall	.+1014   	; 0x15e2 <__itoa_ncheck>
    11ec:	87 e0       	ldi	r24, 0x07	; 7
    11ee:	80 93 e7 20 	sts	0x20E7, r24	; 0x8020e7 <day>
    11f2:	40 e1       	ldi	r20, 0x10	; 16
    11f4:	6b ed       	ldi	r22, 0xDB	; 219
    11f6:	70 e2       	ldi	r23, 0x20	; 32
    11f8:	87 e0       	ldi	r24, 0x07	; 7
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    itoa(day, day_ascii,16);
    hour = 13;
    11fc:	f2 d1       	rcall	.+996    	; 0x15e2 <__itoa_ncheck>
    11fe:	8d e0       	ldi	r24, 0x0D	; 13
    1200:	80 93 e6 20 	sts	0x20E6, r24	; 0x8020e6 <hour>
    1204:	40 e1       	ldi	r20, 0x10	; 16
    1206:	68 ed       	ldi	r22, 0xD8	; 216
    1208:	70 e2       	ldi	r23, 0x20	; 32
    120a:	8d e0       	ldi	r24, 0x0D	; 13
    120c:	90 e0       	ldi	r25, 0x00	; 0
    itoa(hour, hour_ascii,16);
    minute++;
    120e:	e9 d1       	rcall	.+978    	; 0x15e2 <__itoa_ncheck>
    1210:	80 91 e5 20 	lds	r24, 0x20E5	; 0x8020e5 <minute>
    1214:	8f 5f       	subi	r24, 0xFF	; 255
    1216:	80 93 e5 20 	sts	0x20E5, r24	; 0x8020e5 <minute>
    121a:	40 e1       	ldi	r20, 0x10	; 16
    121c:	65 ed       	ldi	r22, 0xD5	; 213
    121e:	70 e2       	ldi	r23, 0x20	; 32
    itoa(minute, minute_ascii, 16);
    second = 0;
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	df d1       	rcall	.+958    	; 0x15e2 <__itoa_ncheck>
    1224:	10 92 e4 20 	sts	0x20E4, r1	; 0x8020e4 <second>
    1228:	40 e1       	ldi	r20, 0x10	; 16
    122a:	62 ed       	ldi	r22, 0xD2	; 210
    122c:	70 e2       	ldi	r23, 0x20	; 32
    122e:	80 e0       	ldi	r24, 0x00	; 0
    itoa(second, second_ascii,16);
                 
    strcpy(transfer_data, loadcell_adc_result_ascii);
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	d7 d1       	rcall	.+942    	; 0x15e2 <__itoa_ncheck>
    1234:	69 ef       	ldi	r22, 0xF9	; 249
    1236:	70 e2       	ldi	r23, 0x20	; 32
    1238:	82 e9       	ldi	r24, 0x92	; 146
    123a:	90 e2       	ldi	r25, 0x20	; 32
    strcat(transfer_data, ",");
    123c:	cb d1       	rcall	.+918    	; 0x15d4 <strcpy>
    123e:	c2 e9       	ldi	r28, 0x92	; 146
    1240:	d0 e2       	ldi	r29, 0x20	; 32
    1242:	fe 01       	movw	r30, r28
    1244:	01 90       	ld	r0, Z+
    1246:	00 20       	and	r0, r0
    1248:	e9 f7       	brne	.-6      	; 0x1244 <controller_tx+0xce>
    124a:	31 97       	sbiw	r30, 0x01	; 1
    124c:	0c e2       	ldi	r16, 0x2C	; 44
    124e:	10 e0       	ldi	r17, 0x00	; 0
    strcat(transfer_data, loadcell_adc_result_min_ascii);
    1250:	00 83       	st	Z, r16
    1252:	11 83       	std	Z+1, r17	; 0x01
    1254:	64 ef       	ldi	r22, 0xF4	; 244
    1256:	70 e2       	ldi	r23, 0x20	; 32
    strcat(transfer_data, ",");
    1258:	ce 01       	movw	r24, r28
    125a:	b1 d1       	rcall	.+866    	; 0x15be <strcat>
    125c:	fe 01       	movw	r30, r28
    125e:	01 90       	ld	r0, Z+
    1260:	00 20       	and	r0, r0
    1262:	e9 f7       	brne	.-6      	; 0x125e <controller_tx+0xe8>
    1264:	31 97       	sbiw	r30, 0x01	; 1
    strcat(transfer_data, loadcell_adc_result_max_ascii);
    1266:	00 83       	st	Z, r16
    1268:	11 83       	std	Z+1, r17	; 0x01
    126a:	6f ee       	ldi	r22, 0xEF	; 239
    126c:	70 e2       	ldi	r23, 0x20	; 32
    strcat(transfer_data, ",");
    126e:	ce 01       	movw	r24, r28
    1270:	a6 d1       	rcall	.+844    	; 0x15be <strcat>
    1272:	fe 01       	movw	r30, r28
    1274:	01 90       	ld	r0, Z+
    1276:	00 20       	and	r0, r0
    1278:	e9 f7       	brne	.-6      	; 0x1274 <controller_tx+0xfe>
    127a:	31 97       	sbiw	r30, 0x01	; 1
    strcat(transfer_data, loadcell_adc_result_tran_ascii);
    127c:	00 83       	st	Z, r16
    127e:	11 83       	std	Z+1, r17	; 0x01
    1280:	6a ee       	ldi	r22, 0xEA	; 234
    1282:	70 e2       	ldi	r23, 0x20	; 32
	strcat(transfer_data, ",");
    1284:	ce 01       	movw	r24, r28
    1286:	9b d1       	rcall	.+822    	; 0x15be <strcat>
    1288:	fe 01       	movw	r30, r28
    128a:	01 90       	ld	r0, Z+
    128c:	00 20       	and	r0, r0
    128e:	e9 f7       	brne	.-6      	; 0x128a <controller_tx+0x114>
    strcat(transfer_data, hour_ascii);
    strcat(transfer_data, minute_ascii);
    strcat(transfer_data, second_ascii);
    */

    usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_HEADER);
    1290:	31 97       	sbiw	r30, 0x01	; 1
    1292:	00 83       	st	Z, r16
    1294:	11 83       	std	Z+1, r17	; 0x01
    1296:	69 e4       	ldi	r22, 0x49	; 73
    1298:	70 e2       	ldi	r23, 0x20	; 32
	int i=0;
	while(transfer_data[i] != 0x00) {
    129a:	80 ea       	ldi	r24, 0xA0	; 160
    129c:	9a e0       	ldi	r25, 0x0A	; 10
    129e:	66 de       	rcall	.-820    	; 0xf6c <usart_tx_at>
    12a0:	68 81       	ld	r22, Y
		usart_putchar(USART_SERIAL_EXAMPLE, transfer_data[i]);
    12a2:	66 23       	and	r22, r22
    12a4:	41 f0       	breq	.+16     	; 0x12b6 <controller_tx+0x140>
    12a6:	c3 e9       	ldi	r28, 0x93	; 147
    12a8:	d0 e2       	ldi	r29, 0x20	; 32
    strcat(transfer_data, second_ascii);
    */

    usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_HEADER);
	int i=0;
	while(transfer_data[i] != 0x00) {
    12aa:	80 ea       	ldi	r24, 0xA0	; 160
    12ac:	9a e0       	ldi	r25, 0x0A	; 10
    12ae:	e6 db       	rcall	.-2100   	; 0xa7c <usart_putchar>
		usart_putchar(USART_SERIAL_EXAMPLE, transfer_data[i]);
		i++;
	}
    //usart_tx_at(USART_SERIAL_EXAMPLE, transfer_data);
    usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_HEADER);
    12b0:	69 91       	ld	r22, Y+
    12b2:	61 11       	cpse	r22, r1
    12b4:	fa cf       	rjmp	.-12     	; 0x12aa <controller_tx+0x134>
    12b6:	69 e4       	ldi	r22, 0x49	; 73
    12b8:	70 e2       	ldi	r23, 0x20	; 32
    12ba:	80 ea       	ldi	r24, 0xA0	; 160
                
}
    12bc:	9a e0       	ldi	r25, 0x0A	; 10
    12be:	56 de       	rcall	.-852    	; 0xf6c <usart_tx_at>
    12c0:	df 91       	pop	r29
    12c2:	cf 91       	pop	r28
    12c4:	1f 91       	pop	r17
    12c6:	0f 91       	pop	r16
    12c8:	08 95       	ret

000012ca <reset_tx_data>:

void reset_tx_data(uint16_t array[TX_DATA_SIZE]) {
    12ca:	fc 01       	movw	r30, r24
	array[POSITION_PREV] = 0;
    12cc:	10 82       	st	Z, r1
    12ce:	11 82       	std	Z+1, r1	; 0x01
	array[POSITION_TRAN_PREV] = 0;
    12d0:	12 82       	std	Z+2, r1	; 0x02
    12d2:	13 82       	std	Z+3, r1	; 0x03
	array[POSITION_TRAN_MAX] = 0;
    12d4:	14 82       	std	Z+4, r1	; 0x04
    12d6:	15 82       	std	Z+5, r1	; 0x05
	array[POSITION_AVG] = 0;
    12d8:	16 82       	std	Z+6, r1	; 0x06
    12da:	17 82       	std	Z+7, r1	; 0x07
	array[POSITION_MIN] = MIN_DATA_RESET;
    12dc:	8f ef       	ldi	r24, 0xFF	; 255
    12de:	9f ef       	ldi	r25, 0xFF	; 255
    12e0:	80 87       	std	Z+8, r24	; 0x08
    12e2:	91 87       	std	Z+9, r25	; 0x09
	array[POSITION_MAX] = 0;
    12e4:	12 86       	std	Z+10, r1	; 0x0a
    12e6:	13 86       	std	Z+11, r1	; 0x0b
	array[POSITION_ACCU_CNT] = 0;
    12e8:	16 86       	std	Z+14, r1	; 0x0e
    12ea:	17 86       	std	Z+15, r1	; 0x0f
    12ec:	08 95       	ret

000012ee <__vector_14>:
	
}

ISR(TCC0_OVF_vect) {
    12ee:	1f 92       	push	r1
    12f0:	0f 92       	push	r0
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	0f 92       	push	r0
    12f6:	11 24       	eor	r1, r1
    12f8:	08 b6       	in	r0, 0x38	; 56
    12fa:	0f 92       	push	r0
    12fc:	18 be       	out	0x38, r1	; 56
    12fe:	09 b6       	in	r0, 0x39	; 57
    1300:	0f 92       	push	r0
    1302:	19 be       	out	0x39, r1	; 57
    1304:	0b b6       	in	r0, 0x3b	; 59
    1306:	0f 92       	push	r0
    1308:	1b be       	out	0x3b, r1	; 59
    130a:	2f 93       	push	r18
    130c:	3f 93       	push	r19
    130e:	4f 93       	push	r20
    1310:	5f 93       	push	r21
    1312:	6f 93       	push	r22
    1314:	7f 93       	push	r23
    1316:	8f 93       	push	r24
    1318:	9f 93       	push	r25
    131a:	af 93       	push	r26
    131c:	bf 93       	push	r27
    131e:	ef 93       	push	r30
	at_timeout_stop();
    1320:	ff 93       	push	r31
	status_at_timeout = 1;
    1322:	65 de       	rcall	.-822    	; 0xfee <at_timeout_stop>
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	80 93 fe 20 	sts	0x20FE, r24	; 0x8020fe <status_at_timeout>
}
    132a:	ff 91       	pop	r31
    132c:	ef 91       	pop	r30
    132e:	bf 91       	pop	r27
    1330:	af 91       	pop	r26
    1332:	9f 91       	pop	r25
    1334:	8f 91       	pop	r24
    1336:	7f 91       	pop	r23
    1338:	6f 91       	pop	r22
    133a:	5f 91       	pop	r21
    133c:	4f 91       	pop	r20
    133e:	3f 91       	pop	r19
    1340:	2f 91       	pop	r18
    1342:	0f 90       	pop	r0
    1344:	0b be       	out	0x3b, r0	; 59
    1346:	0f 90       	pop	r0
    1348:	09 be       	out	0x39, r0	; 57
    134a:	0f 90       	pop	r0
    134c:	08 be       	out	0x38, r0	; 56
    134e:	0f 90       	pop	r0
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	0f 90       	pop	r0
    1354:	1f 90       	pop	r1
    1356:	18 95       	reti

00001358 <__vector_10>:


ISR(RTC_OVF_vect)
{
    1358:	1f 92       	push	r1
    135a:	0f 92       	push	r0
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	0f 92       	push	r0
    1360:	11 24       	eor	r1, r1
    1362:	08 b6       	in	r0, 0x38	; 56
    1364:	0f 92       	push	r0
    1366:	18 be       	out	0x38, r1	; 56
    1368:	09 b6       	in	r0, 0x39	; 57
    136a:	0f 92       	push	r0
    136c:	19 be       	out	0x39, r1	; 57
    136e:	0a b6       	in	r0, 0x3a	; 58
    1370:	0f 92       	push	r0
    1372:	1a be       	out	0x3a, r1	; 58
    1374:	0b b6       	in	r0, 0x3b	; 59
    1376:	0f 92       	push	r0
    1378:	1b be       	out	0x3b, r1	; 59
    137a:	2f 93       	push	r18
    137c:	3f 93       	push	r19
    137e:	4f 93       	push	r20
    1380:	5f 93       	push	r21
    1382:	6f 93       	push	r22
    1384:	7f 93       	push	r23
    1386:	8f 93       	push	r24
    1388:	9f 93       	push	r25
    138a:	af 93       	push	r26
    138c:	bf 93       	push	r27
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	ef 93       	push	r30
    1394:	ff 93       	push	r31
	cli(); //disable interrupts. Other way of disabling and resetting?
    1396:	f8 94       	cli
	//rtc_data.counter_high++;
	
	//led_blink(1);
	
	
	if (controller_state == MEASURE)
    1398:	80 91 0d 20 	lds	r24, 0x200D	; 0x80200d <controller_state>
    139c:	81 30       	cpi	r24, 0x01	; 1
    139e:	c1 f4       	brne	.+48     	; 0x13d0 <__vector_10+0x78>
	{
		accu_data += controller_measure(9, &tx_data); //measure with averaging, and accumulate.
    13a0:	63 e1       	ldi	r22, 0x13	; 19
    13a2:	71 e2       	ldi	r23, 0x21	; 33
    13a4:	89 e0       	ldi	r24, 0x09	; 9
    13a6:	89 de       	rcall	.-750    	; 0x10ba <controller_measure>
    13a8:	40 91 ff 20 	lds	r20, 0x20FF	; 0x8020ff <accu_data>
    13ac:	50 91 00 21 	lds	r21, 0x2100	; 0x802100 <accu_data+0x1>
    13b0:	60 91 01 21 	lds	r22, 0x2101	; 0x802101 <accu_data+0x2>
    13b4:	70 91 02 21 	lds	r23, 0x2102	; 0x802102 <accu_data+0x3>
    13b8:	48 0f       	add	r20, r24
    13ba:	59 1f       	adc	r21, r25
    13bc:	61 1d       	adc	r22, r1
    13be:	71 1d       	adc	r23, r1
    13c0:	40 93 ff 20 	sts	0x20FF, r20	; 0x8020ff <accu_data>
    13c4:	50 93 00 21 	sts	0x2100, r21	; 0x802100 <accu_data+0x1>
    13c8:	60 93 01 21 	sts	0x2101, r22	; 0x802101 <accu_data+0x2>
    13cc:	70 93 02 21 	sts	0x2102, r23	; 0x802102 <accu_data+0x3>
	}
	
	tx_data[POSITION_ACCU_CNT]++; //increase accumulation counter.
    13d0:	e3 e1       	ldi	r30, 0x13	; 19
    13d2:	f1 e2       	ldi	r31, 0x21	; 33
    13d4:	26 85       	ldd	r18, Z+14	; 0x0e
    13d6:	37 85       	ldd	r19, Z+15	; 0x0f
    13d8:	2f 5f       	subi	r18, 0xFF	; 255
    13da:	3f 4f       	sbci	r19, 0xFF	; 255
    13dc:	26 87       	std	Z+14, r18	; 0x0e
    13de:	37 87       	std	Z+15, r19	; 0x0f
				
	if (tx_data[POSITION_ACCU_CNT] > (TAVG/TS)) //if accumulation limit is reached.
    13e0:	25 30       	cpi	r18, 0x05	; 5
    13e2:	31 05       	cpc	r19, r1
    13e4:	e0 f0       	brcs	.+56     	; 0x141e <__vector_10+0xc6>
	{
		tx_data[POSITION_AVG] = controller_calc_avg(accu_data, tx_data[POSITION_ACCU_CNT]); //calc and store average.
    13e6:	ef 01       	movw	r28, r30
    13e8:	40 e0       	ldi	r20, 0x00	; 0
    13ea:	50 e0       	ldi	r21, 0x00	; 0
    13ec:	60 91 ff 20 	lds	r22, 0x20FF	; 0x8020ff <accu_data>
    13f0:	70 91 00 21 	lds	r23, 0x2100	; 0x802100 <accu_data+0x1>
    13f4:	80 91 01 21 	lds	r24, 0x2101	; 0x802101 <accu_data+0x2>
    13f8:	90 91 02 21 	lds	r25, 0x2102	; 0x802102 <accu_data+0x3>
    13fc:	be d0       	rcall	.+380    	; 0x157a <__udivmodsi4>
    13fe:	2e 83       	std	Y+6, r18	; 0x06
    1400:	3f 83       	std	Y+7, r19	; 0x07
				
		//reset parameters
		accu_data = 0;
    1402:	10 92 ff 20 	sts	0x20FF, r1	; 0x8020ff <accu_data>
    1406:	10 92 00 21 	sts	0x2100, r1	; 0x802100 <accu_data+0x1>
    140a:	10 92 01 21 	sts	0x2101, r1	; 0x802101 <accu_data+0x2>
    140e:	10 92 02 21 	sts	0x2102, r1	; 0x802102 <accu_data+0x3>
		tx_data[POSITION_ACCU_CNT] = 0;
    1412:	1e 86       	std	Y+14, r1	; 0x0e
    1414:	1f 86       	std	Y+15, r1	; 0x0f
		
		controller_state = TX_DATA;
    1416:	84 e0       	ldi	r24, 0x04	; 4
    1418:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <controller_state>
    141c:	04 c0       	rjmp	.+8      	; 0x1426 <__vector_10+0xce>
		usart_tx_at(USART_SERIAL_EXAMPLE, transfer_data);
		usart_tx_at(USART_SERIAL_EXAMPLE, RESPONSE_HEADER);
		*/
	}
	
	if (controller_state == TX_DATA)
    141e:	80 91 0d 20 	lds	r24, 0x200D	; 0x80200d <controller_state>
    1422:	84 30       	cpi	r24, 0x04	; 4
	{
		controller_tx(&tx_data);
    1424:	49 f4       	brne	.+18     	; 0x1438 <__vector_10+0xe0>
    1426:	83 e1       	ldi	r24, 0x13	; 19
		reset_tx_data(&tx_data);
    1428:	91 e2       	ldi	r25, 0x21	; 33
    142a:	a5 de       	rcall	.-694    	; 0x1176 <controller_tx>
    142c:	83 e1       	ldi	r24, 0x13	; 19
    142e:	91 e2       	ldi	r25, 0x21	; 33
		
		controller_state = MEASURE;
    1430:	4c df       	rcall	.-360    	; 0x12ca <reset_tx_data>
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <controller_state>
		
	}
	
	//usart_putchar(USART_SERIAL_EXAMPLE, 0x30+accu_data_cnt);
	//WRITE RTC value = 0!
	RTC.CNT = 0;
    1438:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    143c:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
	sei(); //enable interrupt, go to sleep
}
    1440:	78 94       	sei
    1442:	ff 91       	pop	r31
    1444:	ef 91       	pop	r30
    1446:	df 91       	pop	r29
    1448:	cf 91       	pop	r28
    144a:	bf 91       	pop	r27
    144c:	af 91       	pop	r26
    144e:	9f 91       	pop	r25
    1450:	8f 91       	pop	r24
    1452:	7f 91       	pop	r23
    1454:	6f 91       	pop	r22
    1456:	5f 91       	pop	r21
    1458:	4f 91       	pop	r20
    145a:	3f 91       	pop	r19
    145c:	2f 91       	pop	r18
    145e:	0f 90       	pop	r0
    1460:	0b be       	out	0x3b, r0	; 59
    1462:	0f 90       	pop	r0
    1464:	0a be       	out	0x3a, r0	; 58
    1466:	0f 90       	pop	r0
    1468:	09 be       	out	0x39, r0	; 57
    146a:	0f 90       	pop	r0
    146c:	08 be       	out	0x38, r0	; 56
    146e:	0f 90       	pop	r0
    1470:	0f be       	out	0x3f, r0	; 63
    1472:	0f 90       	pop	r0
    1474:	1f 90       	pop	r1
    1476:	18 95       	reti

00001478 <main>:


/*! \brief Main function.
 */
int main(void)
{
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    1480:	2b 97       	sbiw	r28, 0x0b	; 11
    1482:	cd bf       	out	0x3d, r28	; 61
    1484:	de bf       	out	0x3e, r29	; 62
		
	/* Initialize the board.
	 * The board-specific conf_board.h file contains the configuration of
	 * the board initialization.
	 */
	board_init();
    1486:	f8 94       	cli
	//pmic_init(); //needed for TC ASF code. Check if needed in real implementation.
	PMIC.CTRL = 0x01; //low level interrupt
    1488:	ca da       	rcall	.-2668   	; 0xa1e <board_init>
    148a:	11 e0       	ldi	r17, 0x01	; 1
	sysclk_init();
    148c:	10 93 a2 00 	sts	0x00A2, r17	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	
	//LED setup
	PORTQ.DIR |= (1<<3);
    1490:	61 da       	rcall	.-2878   	; 0x954 <sysclk_init>
    1492:	e0 ec       	ldi	r30, 0xC0	; 192
    1494:	f7 e0       	ldi	r31, 0x07	; 7
    1496:	80 81       	ld	r24, Z
    1498:	88 60       	ori	r24, 0x08	; 8
	PORTQ.OUT |= (1<<3);
    149a:	80 83       	st	Z, r24
    149c:	84 81       	ldd	r24, Z+4	; 0x04
    149e:	88 60       	ori	r24, 0x08	; 8

static void adc_init(void)
{
	struct adc_config adc_conf;
	struct adc_channel_config adcch_conf;
	adc_read_configuration(&ADC_LC, &adc_conf);
    14a0:	84 83       	std	Z+4, r24	; 0x04
    14a2:	be 01       	movw	r22, r28
    14a4:	6f 5f       	subi	r22, 0xFF	; 255
    14a6:	7f 4f       	sbci	r23, 0xFF	; 255
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	92 e0       	ldi	r25, 0x02	; 2
	adcch_read_configuration(&ADC_LC, ADC_LC_CH, &adcch_conf);
    14ac:	84 d9       	rcall	.-3320   	; 0x7b6 <adc_read_configuration>
    14ae:	ae 01       	movw	r20, r28
    14b0:	48 5f       	subi	r20, 0xF8	; 248
    14b2:	5f 4f       	sbci	r21, 0xFF	; 255
    14b4:	61 e0       	ldi	r22, 0x01	; 1
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	92 e0       	ldi	r25, 0x02	; 2
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    14ba:	01 da       	rcall	.-3070   	; 0x8be <adcch_read_configuration>
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
	conf->refctrl |= ref;
    14bc:	9a 81       	ldd	r25, Y+2	; 0x02
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	8f 78       	andi	r24, 0x8F	; 143
    14c2:	80 61       	ori	r24, 0x10	; 16
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    14c4:	8b 83       	std	Y+3, r24	; 0x03
    14c6:	89 2f       	mov	r24, r25
    14c8:	81 7e       	andi	r24, 0xE1	; 225
		conf->evctrl = ADC_EVACT_NONE_gc;
    14ca:	8a 83       	std	Y+2, r24	; 0x02
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    14cc:	1c 82       	std	Y+4, r1	; 0x04
    14ce:	82 e0       	ldi	r24, 0x02	; 2
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    14d0:	8d 83       	std	Y+5, r24	; 0x05
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    14d2:	18 87       	std	Y+8, r17	; 0x08
	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_OFF, ADC_RES_12, ADC_REF_VCC); //vdd/1,6 ~ 2V @ 3,3V.
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
	adc_set_clock_rate(&adc_conf, 200000UL);
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN0, ADCCH_NEG_NONE, 1);
	//adcch_set_input(&adcch_conf, ADCCH_POS_SCALED_VCC, ADCCH_NEG_NONE, 1);
	adc_write_configuration(&ADC_LC, &adc_conf);
    14d4:	19 86       	std	Y+9, r1	; 0x09
    14d6:	be 01       	movw	r22, r28
    14d8:	6f 5f       	subi	r22, 0xFF	; 255
    14da:	7f 4f       	sbci	r23, 0xFF	; 255
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	92 e0       	ldi	r25, 0x02	; 2
	adcch_write_configuration(&ADC_LC, ADC_LC_CH, &adcch_conf);
    14e0:	04 d9       	rcall	.-3576   	; 0x6ea <adc_write_configuration>
    14e2:	ae 01       	movw	r20, r28
    14e4:	48 5f       	subi	r20, 0xF8	; 248
    14e6:	5f 4f       	sbci	r21, 0xFF	; 255
    14e8:	61 e0       	ldi	r22, 0x01	; 1
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	92 e0       	ldi	r25, 0x02	; 2
	PORTQ.DIR |= (1<<3);
	PORTQ.OUT |= (1<<3);
	
	//ADC setup
	adc_init();
	adc_enable(&ADC_LC); //Later??? By interrupt?
    14ee:	9c d9       	rcall	.-3272   	; 0x828 <adcch_write_configuration>
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	92 e0       	ldi	r25, 0x02	; 2
		.charlength = USART_SERIAL_CHAR_LENGTH,
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};
	
	usart_init_rs232(USART_SERIAL_EXAMPLE, &USART_SERIAL_OPTIONS);
    14f4:	0e 94 61 01 	call	0x2c2	; 0x2c2 <adc_enable>
    14f8:	66 e0       	ldi	r22, 0x06	; 6
    14fa:	70 e2       	ldi	r23, 0x20	; 32
	usart_init_rs232(USART_SERIAL_SIM900, &USART_SERIAL_OPTIONS);
    14fc:	80 ea       	ldi	r24, 0xA0	; 160
    14fe:	9a e0       	ldi	r25, 0x0A	; 10
    1500:	d4 db       	rcall	.-2136   	; 0xcaa <usart_init_rs232>
    1502:	66 e0       	ldi	r22, 0x06	; 6
    1504:	70 e2       	ldi	r23, 0x20	; 32
	
	at_command_timeout_setup();
    1506:	80 ea       	ldi	r24, 0xA0	; 160
    1508:	98 e0       	ldi	r25, 0x08	; 8
	
	//WDT setup
	
	
	//reset data
	reset_tx_data(&tx_data);
    150a:	cf db       	rcall	.-2146   	; 0xcaa <usart_init_rs232>
    150c:	77 dd       	rcall	.-1298   	; 0xffc <at_command_timeout_setup>
    150e:	83 e1       	ldi	r24, 0x13	; 19
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    1510:	91 e2       	ldi	r25, 0x21	; 33
    1512:	db de       	rcall	.-586    	; 0x12ca <reset_tx_data>
    1514:	e3 e0       	ldi	r30, 0x03	; 3
    1516:	f1 e2       	ldi	r31, 0x21	; 33
    1518:	10 82       	st	Z, r1
    151a:	11 82       	std	Z+1, r1	; 0x01
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    151c:	12 82       	std	Z+2, r1	; 0x02
	
	//RTC
	
	sleepmgr_init();
	rtc_init_period(TS); //using RTC as sampler timer.
    151e:	13 82       	std	Z+3, r1	; 0x03
    1520:	14 82       	std	Z+4, r1	; 0x04
    1522:	15 83       	std	Z+5, r17	; 0x05
    1524:	85 e0       	ldi	r24, 0x05	; 5
	cpu_irq_enable();
    1526:	90 e0       	ldi	r25, 0x00	; 0

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    1528:	35 dd       	rcall	.-1430   	; 0xf94 <rtc_init_period>
    152a:	78 94       	sei
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    152c:	43 e0       	ldi	r20, 0x03	; 3
    152e:	51 e2       	ldi	r21, 0x21	; 33
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    1530:	28 e4       	ldi	r18, 0x48	; 72

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	f8 94       	cli
    1536:	da 01       	movw	r26, r20
    1538:	8c 91       	ld	r24, X
    153a:	81 11       	cpse	r24, r1
    153c:	09 c0       	rjmp	.+18     	; 0x1550 <main+0xd8>
    153e:	a4 e0       	ldi	r26, 0x04	; 4
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    1540:	b1 e2       	ldi	r27, 0x21	; 33

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    1542:	e0 e0       	ldi	r30, 0x00	; 0
    1544:	ef 5f       	subi	r30, 0xFF	; 255
    1546:	8d 91       	ld	r24, X+
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    1548:	88 23       	and	r24, r24
    154a:	e1 f3       	breq	.-8      	; 0x1544 <main+0xcc>
		cpu_irq_enable();
    154c:	e1 11       	cpse	r30, r1
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <main+0xdc>
    1550:	78 94       	sei
    1552:	f0 cf       	rjmp	.-32     	; 0x1534 <main+0xbc>

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    1554:	d9 01       	movw	r26, r18
    1556:	8c 91       	ld	r24, X
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	e1 50       	subi	r30, 0x01	; 1
    155c:	f0 4e       	sbci	r31, 0xE0	; 224
    155e:	81 7f       	andi	r24, 0xF1	; 241
    1560:	90 81       	ld	r25, Z
	sleep_enable();
    1562:	89 2b       	or	r24, r25
    1564:	8c 93       	st	X, r24
    1566:	8c 91       	ld	r24, X

	cpu_irq_enable();
    1568:	81 60       	ori	r24, 0x01	; 1
	sleep_enter();
    156a:	8c 93       	st	X, r24

	sleep_disable();
    156c:	78 94       	sei
    156e:	88 95       	sleep
    1570:	f9 01       	movw	r30, r18
    1572:	80 81       	ld	r24, Z
    1574:	8e 7f       	andi	r24, 0xFE	; 254
    1576:	80 83       	st	Z, r24
    1578:	dd cf       	rjmp	.-70     	; 0x1534 <main+0xbc>

0000157a <__udivmodsi4>:
    157a:	a1 e2       	ldi	r26, 0x21	; 33
    157c:	1a 2e       	mov	r1, r26
    157e:	aa 1b       	sub	r26, r26
    1580:	bb 1b       	sub	r27, r27
    1582:	fd 01       	movw	r30, r26
    1584:	0d c0       	rjmp	.+26     	; 0x15a0 <__udivmodsi4_ep>

00001586 <__udivmodsi4_loop>:
    1586:	aa 1f       	adc	r26, r26
    1588:	bb 1f       	adc	r27, r27
    158a:	ee 1f       	adc	r30, r30
    158c:	ff 1f       	adc	r31, r31
    158e:	a2 17       	cp	r26, r18
    1590:	b3 07       	cpc	r27, r19
    1592:	e4 07       	cpc	r30, r20
    1594:	f5 07       	cpc	r31, r21
    1596:	20 f0       	brcs	.+8      	; 0x15a0 <__udivmodsi4_ep>
    1598:	a2 1b       	sub	r26, r18
    159a:	b3 0b       	sbc	r27, r19
    159c:	e4 0b       	sbc	r30, r20
    159e:	f5 0b       	sbc	r31, r21

000015a0 <__udivmodsi4_ep>:
    15a0:	66 1f       	adc	r22, r22
    15a2:	77 1f       	adc	r23, r23
    15a4:	88 1f       	adc	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	1a 94       	dec	r1
    15aa:	69 f7       	brne	.-38     	; 0x1586 <__udivmodsi4_loop>
    15ac:	60 95       	com	r22
    15ae:	70 95       	com	r23
    15b0:	80 95       	com	r24
    15b2:	90 95       	com	r25
    15b4:	9b 01       	movw	r18, r22
    15b6:	ac 01       	movw	r20, r24
    15b8:	bd 01       	movw	r22, r26
    15ba:	cf 01       	movw	r24, r30
    15bc:	08 95       	ret

000015be <strcat>:
    15be:	fb 01       	movw	r30, r22
    15c0:	dc 01       	movw	r26, r24
    15c2:	0d 90       	ld	r0, X+
    15c4:	00 20       	and	r0, r0
    15c6:	e9 f7       	brne	.-6      	; 0x15c2 <strcat+0x4>
    15c8:	11 97       	sbiw	r26, 0x01	; 1
    15ca:	01 90       	ld	r0, Z+
    15cc:	0d 92       	st	X+, r0
    15ce:	00 20       	and	r0, r0
    15d0:	e1 f7       	brne	.-8      	; 0x15ca <strcat+0xc>
    15d2:	08 95       	ret

000015d4 <strcpy>:
    15d4:	fb 01       	movw	r30, r22
    15d6:	dc 01       	movw	r26, r24
    15d8:	01 90       	ld	r0, Z+
    15da:	0d 92       	st	X+, r0
    15dc:	00 20       	and	r0, r0
    15de:	e1 f7       	brne	.-8      	; 0x15d8 <strcpy+0x4>
    15e0:	08 95       	ret

000015e2 <__itoa_ncheck>:
    15e2:	bb 27       	eor	r27, r27
    15e4:	4a 30       	cpi	r20, 0x0A	; 10
    15e6:	31 f4       	brne	.+12     	; 0x15f4 <__itoa_ncheck+0x12>
    15e8:	99 23       	and	r25, r25
    15ea:	22 f4       	brpl	.+8      	; 0x15f4 <__itoa_ncheck+0x12>
    15ec:	bd e2       	ldi	r27, 0x2D	; 45
    15ee:	90 95       	com	r25
    15f0:	81 95       	neg	r24
    15f2:	9f 4f       	sbci	r25, 0xFF	; 255
    15f4:	01 c0       	rjmp	.+2      	; 0x15f8 <__utoa_common>

000015f6 <__utoa_ncheck>:
    15f6:	bb 27       	eor	r27, r27

000015f8 <__utoa_common>:
    15f8:	fb 01       	movw	r30, r22
    15fa:	55 27       	eor	r21, r21
    15fc:	aa 27       	eor	r26, r26
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	aa 1f       	adc	r26, r26
    1604:	a4 17       	cp	r26, r20
    1606:	10 f0       	brcs	.+4      	; 0x160c <__utoa_common+0x14>
    1608:	a4 1b       	sub	r26, r20
    160a:	83 95       	inc	r24
    160c:	50 51       	subi	r21, 0x10	; 16
    160e:	b9 f7       	brne	.-18     	; 0x15fe <__utoa_common+0x6>
    1610:	a0 5d       	subi	r26, 0xD0	; 208
    1612:	aa 33       	cpi	r26, 0x3A	; 58
    1614:	08 f0       	brcs	.+2      	; 0x1618 <__utoa_common+0x20>
    1616:	a9 5d       	subi	r26, 0xD9	; 217
    1618:	a1 93       	st	Z+, r26
    161a:	00 97       	sbiw	r24, 0x00	; 0
    161c:	79 f7       	brne	.-34     	; 0x15fc <__utoa_common+0x4>
    161e:	b1 11       	cpse	r27, r1
    1620:	b1 93       	st	Z+, r27
    1622:	11 92       	st	Z+, r1
    1624:	cb 01       	movw	r24, r22
    1626:	35 c2       	rjmp	.+1130   	; 0x1a92 <strrev>

00001628 <sprintf>:
    1628:	0f 93       	push	r16
    162a:	1f 93       	push	r17
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	2e 97       	sbiw	r28, 0x0e	; 14
    1636:	cd bf       	out	0x3d, r28	; 61
    1638:	de bf       	out	0x3e, r29	; 62
    163a:	0e 89       	ldd	r16, Y+22	; 0x16
    163c:	1f 89       	ldd	r17, Y+23	; 0x17
    163e:	86 e0       	ldi	r24, 0x06	; 6
    1640:	8c 83       	std	Y+4, r24	; 0x04
    1642:	09 83       	std	Y+1, r16	; 0x01
    1644:	1a 83       	std	Y+2, r17	; 0x02
    1646:	8f ef       	ldi	r24, 0xFF	; 255
    1648:	9f e7       	ldi	r25, 0x7F	; 127
    164a:	8d 83       	std	Y+5, r24	; 0x05
    164c:	9e 83       	std	Y+6, r25	; 0x06
    164e:	ae 01       	movw	r20, r28
    1650:	46 5e       	subi	r20, 0xE6	; 230
    1652:	5f 4f       	sbci	r21, 0xFF	; 255
    1654:	68 8d       	ldd	r22, Y+24	; 0x18
    1656:	79 8d       	ldd	r23, Y+25	; 0x19
    1658:	ce 01       	movw	r24, r28
    165a:	01 96       	adiw	r24, 0x01	; 1
    165c:	0d d0       	rcall	.+26     	; 0x1678 <vfprintf>
    165e:	ef 81       	ldd	r30, Y+7	; 0x07
    1660:	f8 85       	ldd	r31, Y+8	; 0x08
    1662:	e0 0f       	add	r30, r16
    1664:	f1 1f       	adc	r31, r17
    1666:	10 82       	st	Z, r1
    1668:	2e 96       	adiw	r28, 0x0e	; 14
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	de bf       	out	0x3e, r29	; 62
    166e:	df 91       	pop	r29
    1670:	cf 91       	pop	r28
    1672:	1f 91       	pop	r17
    1674:	0f 91       	pop	r16
    1676:	08 95       	ret

00001678 <vfprintf>:
    1678:	2f 92       	push	r2
    167a:	3f 92       	push	r3
    167c:	4f 92       	push	r4
    167e:	5f 92       	push	r5
    1680:	6f 92       	push	r6
    1682:	7f 92       	push	r7
    1684:	8f 92       	push	r8
    1686:	9f 92       	push	r9
    1688:	af 92       	push	r10
    168a:	bf 92       	push	r11
    168c:	cf 92       	push	r12
    168e:	df 92       	push	r13
    1690:	ef 92       	push	r14
    1692:	ff 92       	push	r15
    1694:	0f 93       	push	r16
    1696:	1f 93       	push	r17
    1698:	cf 93       	push	r28
    169a:	df 93       	push	r29
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
    16a0:	2b 97       	sbiw	r28, 0x0b	; 11
    16a2:	cd bf       	out	0x3d, r28	; 61
    16a4:	de bf       	out	0x3e, r29	; 62
    16a6:	6c 01       	movw	r12, r24
    16a8:	7b 01       	movw	r14, r22
    16aa:	8a 01       	movw	r16, r20
    16ac:	fc 01       	movw	r30, r24
    16ae:	16 82       	std	Z+6, r1	; 0x06
    16b0:	17 82       	std	Z+7, r1	; 0x07
    16b2:	83 81       	ldd	r24, Z+3	; 0x03
    16b4:	81 ff       	sbrs	r24, 1
    16b6:	bf c1       	rjmp	.+894    	; 0x1a36 <vfprintf+0x3be>
    16b8:	ce 01       	movw	r24, r28
    16ba:	01 96       	adiw	r24, 0x01	; 1
    16bc:	3c 01       	movw	r6, r24
    16be:	f6 01       	movw	r30, r12
    16c0:	93 81       	ldd	r25, Z+3	; 0x03
    16c2:	f7 01       	movw	r30, r14
    16c4:	93 fd       	sbrc	r25, 3
    16c6:	85 91       	lpm	r24, Z+
    16c8:	93 ff       	sbrs	r25, 3
    16ca:	81 91       	ld	r24, Z+
    16cc:	7f 01       	movw	r14, r30
    16ce:	88 23       	and	r24, r24
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <vfprintf+0x5c>
    16d2:	ad c1       	rjmp	.+858    	; 0x1a2e <vfprintf+0x3b6>
    16d4:	85 32       	cpi	r24, 0x25	; 37
    16d6:	39 f4       	brne	.+14     	; 0x16e6 <vfprintf+0x6e>
    16d8:	93 fd       	sbrc	r25, 3
    16da:	85 91       	lpm	r24, Z+
    16dc:	93 ff       	sbrs	r25, 3
    16de:	81 91       	ld	r24, Z+
    16e0:	7f 01       	movw	r14, r30
    16e2:	85 32       	cpi	r24, 0x25	; 37
    16e4:	21 f4       	brne	.+8      	; 0x16ee <vfprintf+0x76>
    16e6:	b6 01       	movw	r22, r12
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	e3 d1       	rcall	.+966    	; 0x1ab2 <fputc>
    16ec:	e8 cf       	rjmp	.-48     	; 0x16be <vfprintf+0x46>
    16ee:	91 2c       	mov	r9, r1
    16f0:	21 2c       	mov	r2, r1
    16f2:	31 2c       	mov	r3, r1
    16f4:	ff e1       	ldi	r31, 0x1F	; 31
    16f6:	f3 15       	cp	r31, r3
    16f8:	d8 f0       	brcs	.+54     	; 0x1730 <vfprintf+0xb8>
    16fa:	8b 32       	cpi	r24, 0x2B	; 43
    16fc:	79 f0       	breq	.+30     	; 0x171c <vfprintf+0xa4>
    16fe:	38 f4       	brcc	.+14     	; 0x170e <vfprintf+0x96>
    1700:	80 32       	cpi	r24, 0x20	; 32
    1702:	79 f0       	breq	.+30     	; 0x1722 <vfprintf+0xaa>
    1704:	83 32       	cpi	r24, 0x23	; 35
    1706:	a1 f4       	brne	.+40     	; 0x1730 <vfprintf+0xb8>
    1708:	23 2d       	mov	r18, r3
    170a:	20 61       	ori	r18, 0x10	; 16
    170c:	1d c0       	rjmp	.+58     	; 0x1748 <vfprintf+0xd0>
    170e:	8d 32       	cpi	r24, 0x2D	; 45
    1710:	61 f0       	breq	.+24     	; 0x172a <vfprintf+0xb2>
    1712:	80 33       	cpi	r24, 0x30	; 48
    1714:	69 f4       	brne	.+26     	; 0x1730 <vfprintf+0xb8>
    1716:	23 2d       	mov	r18, r3
    1718:	21 60       	ori	r18, 0x01	; 1
    171a:	16 c0       	rjmp	.+44     	; 0x1748 <vfprintf+0xd0>
    171c:	83 2d       	mov	r24, r3
    171e:	82 60       	ori	r24, 0x02	; 2
    1720:	38 2e       	mov	r3, r24
    1722:	e3 2d       	mov	r30, r3
    1724:	e4 60       	ori	r30, 0x04	; 4
    1726:	3e 2e       	mov	r3, r30
    1728:	2a c0       	rjmp	.+84     	; 0x177e <vfprintf+0x106>
    172a:	f3 2d       	mov	r31, r3
    172c:	f8 60       	ori	r31, 0x08	; 8
    172e:	1d c0       	rjmp	.+58     	; 0x176a <vfprintf+0xf2>
    1730:	37 fc       	sbrc	r3, 7
    1732:	2d c0       	rjmp	.+90     	; 0x178e <vfprintf+0x116>
    1734:	20 ed       	ldi	r18, 0xD0	; 208
    1736:	28 0f       	add	r18, r24
    1738:	2a 30       	cpi	r18, 0x0A	; 10
    173a:	40 f0       	brcs	.+16     	; 0x174c <vfprintf+0xd4>
    173c:	8e 32       	cpi	r24, 0x2E	; 46
    173e:	b9 f4       	brne	.+46     	; 0x176e <vfprintf+0xf6>
    1740:	36 fc       	sbrc	r3, 6
    1742:	75 c1       	rjmp	.+746    	; 0x1a2e <vfprintf+0x3b6>
    1744:	23 2d       	mov	r18, r3
    1746:	20 64       	ori	r18, 0x40	; 64
    1748:	32 2e       	mov	r3, r18
    174a:	19 c0       	rjmp	.+50     	; 0x177e <vfprintf+0x106>
    174c:	36 fe       	sbrs	r3, 6
    174e:	06 c0       	rjmp	.+12     	; 0x175c <vfprintf+0xe4>
    1750:	8a e0       	ldi	r24, 0x0A	; 10
    1752:	98 9e       	mul	r9, r24
    1754:	20 0d       	add	r18, r0
    1756:	11 24       	eor	r1, r1
    1758:	92 2e       	mov	r9, r18
    175a:	11 c0       	rjmp	.+34     	; 0x177e <vfprintf+0x106>
    175c:	ea e0       	ldi	r30, 0x0A	; 10
    175e:	2e 9e       	mul	r2, r30
    1760:	20 0d       	add	r18, r0
    1762:	11 24       	eor	r1, r1
    1764:	22 2e       	mov	r2, r18
    1766:	f3 2d       	mov	r31, r3
    1768:	f0 62       	ori	r31, 0x20	; 32
    176a:	3f 2e       	mov	r3, r31
    176c:	08 c0       	rjmp	.+16     	; 0x177e <vfprintf+0x106>
    176e:	8c 36       	cpi	r24, 0x6C	; 108
    1770:	21 f4       	brne	.+8      	; 0x177a <vfprintf+0x102>
    1772:	83 2d       	mov	r24, r3
    1774:	80 68       	ori	r24, 0x80	; 128
    1776:	38 2e       	mov	r3, r24
    1778:	02 c0       	rjmp	.+4      	; 0x177e <vfprintf+0x106>
    177a:	88 36       	cpi	r24, 0x68	; 104
    177c:	41 f4       	brne	.+16     	; 0x178e <vfprintf+0x116>
    177e:	f7 01       	movw	r30, r14
    1780:	93 fd       	sbrc	r25, 3
    1782:	85 91       	lpm	r24, Z+
    1784:	93 ff       	sbrs	r25, 3
    1786:	81 91       	ld	r24, Z+
    1788:	7f 01       	movw	r14, r30
    178a:	81 11       	cpse	r24, r1
    178c:	b3 cf       	rjmp	.-154    	; 0x16f4 <vfprintf+0x7c>
    178e:	98 2f       	mov	r25, r24
    1790:	9f 7d       	andi	r25, 0xDF	; 223
    1792:	95 54       	subi	r25, 0x45	; 69
    1794:	93 30       	cpi	r25, 0x03	; 3
    1796:	28 f4       	brcc	.+10     	; 0x17a2 <vfprintf+0x12a>
    1798:	0c 5f       	subi	r16, 0xFC	; 252
    179a:	1f 4f       	sbci	r17, 0xFF	; 255
    179c:	9f e3       	ldi	r25, 0x3F	; 63
    179e:	99 83       	std	Y+1, r25	; 0x01
    17a0:	0d c0       	rjmp	.+26     	; 0x17bc <vfprintf+0x144>
    17a2:	83 36       	cpi	r24, 0x63	; 99
    17a4:	31 f0       	breq	.+12     	; 0x17b2 <vfprintf+0x13a>
    17a6:	83 37       	cpi	r24, 0x73	; 115
    17a8:	71 f0       	breq	.+28     	; 0x17c6 <vfprintf+0x14e>
    17aa:	83 35       	cpi	r24, 0x53	; 83
    17ac:	09 f0       	breq	.+2      	; 0x17b0 <vfprintf+0x138>
    17ae:	55 c0       	rjmp	.+170    	; 0x185a <vfprintf+0x1e2>
    17b0:	20 c0       	rjmp	.+64     	; 0x17f2 <vfprintf+0x17a>
    17b2:	f8 01       	movw	r30, r16
    17b4:	80 81       	ld	r24, Z
    17b6:	89 83       	std	Y+1, r24	; 0x01
    17b8:	0e 5f       	subi	r16, 0xFE	; 254
    17ba:	1f 4f       	sbci	r17, 0xFF	; 255
    17bc:	88 24       	eor	r8, r8
    17be:	83 94       	inc	r8
    17c0:	91 2c       	mov	r9, r1
    17c2:	53 01       	movw	r10, r6
    17c4:	12 c0       	rjmp	.+36     	; 0x17ea <vfprintf+0x172>
    17c6:	28 01       	movw	r4, r16
    17c8:	f2 e0       	ldi	r31, 0x02	; 2
    17ca:	4f 0e       	add	r4, r31
    17cc:	51 1c       	adc	r5, r1
    17ce:	f8 01       	movw	r30, r16
    17d0:	a0 80       	ld	r10, Z
    17d2:	b1 80       	ldd	r11, Z+1	; 0x01
    17d4:	36 fe       	sbrs	r3, 6
    17d6:	03 c0       	rjmp	.+6      	; 0x17de <vfprintf+0x166>
    17d8:	69 2d       	mov	r22, r9
    17da:	70 e0       	ldi	r23, 0x00	; 0
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <vfprintf+0x16a>
    17de:	6f ef       	ldi	r22, 0xFF	; 255
    17e0:	7f ef       	ldi	r23, 0xFF	; 255
    17e2:	c5 01       	movw	r24, r10
    17e4:	4b d1       	rcall	.+662    	; 0x1a7c <strnlen>
    17e6:	4c 01       	movw	r8, r24
    17e8:	82 01       	movw	r16, r4
    17ea:	f3 2d       	mov	r31, r3
    17ec:	ff 77       	andi	r31, 0x7F	; 127
    17ee:	3f 2e       	mov	r3, r31
    17f0:	15 c0       	rjmp	.+42     	; 0x181c <vfprintf+0x1a4>
    17f2:	28 01       	movw	r4, r16
    17f4:	22 e0       	ldi	r18, 0x02	; 2
    17f6:	42 0e       	add	r4, r18
    17f8:	51 1c       	adc	r5, r1
    17fa:	f8 01       	movw	r30, r16
    17fc:	a0 80       	ld	r10, Z
    17fe:	b1 80       	ldd	r11, Z+1	; 0x01
    1800:	36 fe       	sbrs	r3, 6
    1802:	03 c0       	rjmp	.+6      	; 0x180a <vfprintf+0x192>
    1804:	69 2d       	mov	r22, r9
    1806:	70 e0       	ldi	r23, 0x00	; 0
    1808:	02 c0       	rjmp	.+4      	; 0x180e <vfprintf+0x196>
    180a:	6f ef       	ldi	r22, 0xFF	; 255
    180c:	7f ef       	ldi	r23, 0xFF	; 255
    180e:	c5 01       	movw	r24, r10
    1810:	2a d1       	rcall	.+596    	; 0x1a66 <strnlen_P>
    1812:	4c 01       	movw	r8, r24
    1814:	f3 2d       	mov	r31, r3
    1816:	f0 68       	ori	r31, 0x80	; 128
    1818:	3f 2e       	mov	r3, r31
    181a:	82 01       	movw	r16, r4
    181c:	33 fc       	sbrc	r3, 3
    181e:	19 c0       	rjmp	.+50     	; 0x1852 <vfprintf+0x1da>
    1820:	82 2d       	mov	r24, r2
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	88 16       	cp	r8, r24
    1826:	99 06       	cpc	r9, r25
    1828:	a0 f4       	brcc	.+40     	; 0x1852 <vfprintf+0x1da>
    182a:	b6 01       	movw	r22, r12
    182c:	80 e2       	ldi	r24, 0x20	; 32
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	40 d1       	rcall	.+640    	; 0x1ab2 <fputc>
    1832:	2a 94       	dec	r2
    1834:	f5 cf       	rjmp	.-22     	; 0x1820 <vfprintf+0x1a8>
    1836:	f5 01       	movw	r30, r10
    1838:	37 fc       	sbrc	r3, 7
    183a:	85 91       	lpm	r24, Z+
    183c:	37 fe       	sbrs	r3, 7
    183e:	81 91       	ld	r24, Z+
    1840:	5f 01       	movw	r10, r30
    1842:	b6 01       	movw	r22, r12
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	35 d1       	rcall	.+618    	; 0x1ab2 <fputc>
    1848:	21 10       	cpse	r2, r1
    184a:	2a 94       	dec	r2
    184c:	21 e0       	ldi	r18, 0x01	; 1
    184e:	82 1a       	sub	r8, r18
    1850:	91 08       	sbc	r9, r1
    1852:	81 14       	cp	r8, r1
    1854:	91 04       	cpc	r9, r1
    1856:	79 f7       	brne	.-34     	; 0x1836 <vfprintf+0x1be>
    1858:	e1 c0       	rjmp	.+450    	; 0x1a1c <vfprintf+0x3a4>
    185a:	84 36       	cpi	r24, 0x64	; 100
    185c:	11 f0       	breq	.+4      	; 0x1862 <vfprintf+0x1ea>
    185e:	89 36       	cpi	r24, 0x69	; 105
    1860:	39 f5       	brne	.+78     	; 0x18b0 <vfprintf+0x238>
    1862:	f8 01       	movw	r30, r16
    1864:	37 fe       	sbrs	r3, 7
    1866:	07 c0       	rjmp	.+14     	; 0x1876 <vfprintf+0x1fe>
    1868:	60 81       	ld	r22, Z
    186a:	71 81       	ldd	r23, Z+1	; 0x01
    186c:	82 81       	ldd	r24, Z+2	; 0x02
    186e:	93 81       	ldd	r25, Z+3	; 0x03
    1870:	0c 5f       	subi	r16, 0xFC	; 252
    1872:	1f 4f       	sbci	r17, 0xFF	; 255
    1874:	08 c0       	rjmp	.+16     	; 0x1886 <vfprintf+0x20e>
    1876:	60 81       	ld	r22, Z
    1878:	71 81       	ldd	r23, Z+1	; 0x01
    187a:	07 2e       	mov	r0, r23
    187c:	00 0c       	add	r0, r0
    187e:	88 0b       	sbc	r24, r24
    1880:	99 0b       	sbc	r25, r25
    1882:	0e 5f       	subi	r16, 0xFE	; 254
    1884:	1f 4f       	sbci	r17, 0xFF	; 255
    1886:	f3 2d       	mov	r31, r3
    1888:	ff 76       	andi	r31, 0x6F	; 111
    188a:	3f 2e       	mov	r3, r31
    188c:	97 ff       	sbrs	r25, 7
    188e:	09 c0       	rjmp	.+18     	; 0x18a2 <vfprintf+0x22a>
    1890:	90 95       	com	r25
    1892:	80 95       	com	r24
    1894:	70 95       	com	r23
    1896:	61 95       	neg	r22
    1898:	7f 4f       	sbci	r23, 0xFF	; 255
    189a:	8f 4f       	sbci	r24, 0xFF	; 255
    189c:	9f 4f       	sbci	r25, 0xFF	; 255
    189e:	f0 68       	ori	r31, 0x80	; 128
    18a0:	3f 2e       	mov	r3, r31
    18a2:	2a e0       	ldi	r18, 0x0A	; 10
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	a3 01       	movw	r20, r6
    18a8:	40 d1       	rcall	.+640    	; 0x1b2a <__ultoa_invert>
    18aa:	88 2e       	mov	r8, r24
    18ac:	86 18       	sub	r8, r6
    18ae:	44 c0       	rjmp	.+136    	; 0x1938 <vfprintf+0x2c0>
    18b0:	85 37       	cpi	r24, 0x75	; 117
    18b2:	31 f4       	brne	.+12     	; 0x18c0 <vfprintf+0x248>
    18b4:	23 2d       	mov	r18, r3
    18b6:	2f 7e       	andi	r18, 0xEF	; 239
    18b8:	b2 2e       	mov	r11, r18
    18ba:	2a e0       	ldi	r18, 0x0A	; 10
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	25 c0       	rjmp	.+74     	; 0x190a <vfprintf+0x292>
    18c0:	93 2d       	mov	r25, r3
    18c2:	99 7f       	andi	r25, 0xF9	; 249
    18c4:	b9 2e       	mov	r11, r25
    18c6:	8f 36       	cpi	r24, 0x6F	; 111
    18c8:	c1 f0       	breq	.+48     	; 0x18fa <vfprintf+0x282>
    18ca:	18 f4       	brcc	.+6      	; 0x18d2 <vfprintf+0x25a>
    18cc:	88 35       	cpi	r24, 0x58	; 88
    18ce:	79 f0       	breq	.+30     	; 0x18ee <vfprintf+0x276>
    18d0:	ae c0       	rjmp	.+348    	; 0x1a2e <vfprintf+0x3b6>
    18d2:	80 37       	cpi	r24, 0x70	; 112
    18d4:	19 f0       	breq	.+6      	; 0x18dc <vfprintf+0x264>
    18d6:	88 37       	cpi	r24, 0x78	; 120
    18d8:	21 f0       	breq	.+8      	; 0x18e2 <vfprintf+0x26a>
    18da:	a9 c0       	rjmp	.+338    	; 0x1a2e <vfprintf+0x3b6>
    18dc:	e9 2f       	mov	r30, r25
    18de:	e0 61       	ori	r30, 0x10	; 16
    18e0:	be 2e       	mov	r11, r30
    18e2:	b4 fe       	sbrs	r11, 4
    18e4:	0d c0       	rjmp	.+26     	; 0x1900 <vfprintf+0x288>
    18e6:	fb 2d       	mov	r31, r11
    18e8:	f4 60       	ori	r31, 0x04	; 4
    18ea:	bf 2e       	mov	r11, r31
    18ec:	09 c0       	rjmp	.+18     	; 0x1900 <vfprintf+0x288>
    18ee:	34 fe       	sbrs	r3, 4
    18f0:	0a c0       	rjmp	.+20     	; 0x1906 <vfprintf+0x28e>
    18f2:	29 2f       	mov	r18, r25
    18f4:	26 60       	ori	r18, 0x06	; 6
    18f6:	b2 2e       	mov	r11, r18
    18f8:	06 c0       	rjmp	.+12     	; 0x1906 <vfprintf+0x28e>
    18fa:	28 e0       	ldi	r18, 0x08	; 8
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	05 c0       	rjmp	.+10     	; 0x190a <vfprintf+0x292>
    1900:	20 e1       	ldi	r18, 0x10	; 16
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	02 c0       	rjmp	.+4      	; 0x190a <vfprintf+0x292>
    1906:	20 e1       	ldi	r18, 0x10	; 16
    1908:	32 e0       	ldi	r19, 0x02	; 2
    190a:	f8 01       	movw	r30, r16
    190c:	b7 fe       	sbrs	r11, 7
    190e:	07 c0       	rjmp	.+14     	; 0x191e <vfprintf+0x2a6>
    1910:	60 81       	ld	r22, Z
    1912:	71 81       	ldd	r23, Z+1	; 0x01
    1914:	82 81       	ldd	r24, Z+2	; 0x02
    1916:	93 81       	ldd	r25, Z+3	; 0x03
    1918:	0c 5f       	subi	r16, 0xFC	; 252
    191a:	1f 4f       	sbci	r17, 0xFF	; 255
    191c:	06 c0       	rjmp	.+12     	; 0x192a <vfprintf+0x2b2>
    191e:	60 81       	ld	r22, Z
    1920:	71 81       	ldd	r23, Z+1	; 0x01
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	0e 5f       	subi	r16, 0xFE	; 254
    1928:	1f 4f       	sbci	r17, 0xFF	; 255
    192a:	a3 01       	movw	r20, r6
    192c:	fe d0       	rcall	.+508    	; 0x1b2a <__ultoa_invert>
    192e:	88 2e       	mov	r8, r24
    1930:	86 18       	sub	r8, r6
    1932:	fb 2d       	mov	r31, r11
    1934:	ff 77       	andi	r31, 0x7F	; 127
    1936:	3f 2e       	mov	r3, r31
    1938:	36 fe       	sbrs	r3, 6
    193a:	0d c0       	rjmp	.+26     	; 0x1956 <vfprintf+0x2de>
    193c:	23 2d       	mov	r18, r3
    193e:	2e 7f       	andi	r18, 0xFE	; 254
    1940:	a2 2e       	mov	r10, r18
    1942:	89 14       	cp	r8, r9
    1944:	58 f4       	brcc	.+22     	; 0x195c <vfprintf+0x2e4>
    1946:	34 fe       	sbrs	r3, 4
    1948:	0b c0       	rjmp	.+22     	; 0x1960 <vfprintf+0x2e8>
    194a:	32 fc       	sbrc	r3, 2
    194c:	09 c0       	rjmp	.+18     	; 0x1960 <vfprintf+0x2e8>
    194e:	83 2d       	mov	r24, r3
    1950:	8e 7e       	andi	r24, 0xEE	; 238
    1952:	a8 2e       	mov	r10, r24
    1954:	05 c0       	rjmp	.+10     	; 0x1960 <vfprintf+0x2e8>
    1956:	b8 2c       	mov	r11, r8
    1958:	a3 2c       	mov	r10, r3
    195a:	03 c0       	rjmp	.+6      	; 0x1962 <vfprintf+0x2ea>
    195c:	b8 2c       	mov	r11, r8
    195e:	01 c0       	rjmp	.+2      	; 0x1962 <vfprintf+0x2ea>
    1960:	b9 2c       	mov	r11, r9
    1962:	a4 fe       	sbrs	r10, 4
    1964:	0f c0       	rjmp	.+30     	; 0x1984 <vfprintf+0x30c>
    1966:	fe 01       	movw	r30, r28
    1968:	e8 0d       	add	r30, r8
    196a:	f1 1d       	adc	r31, r1
    196c:	80 81       	ld	r24, Z
    196e:	80 33       	cpi	r24, 0x30	; 48
    1970:	21 f4       	brne	.+8      	; 0x197a <vfprintf+0x302>
    1972:	9a 2d       	mov	r25, r10
    1974:	99 7e       	andi	r25, 0xE9	; 233
    1976:	a9 2e       	mov	r10, r25
    1978:	09 c0       	rjmp	.+18     	; 0x198c <vfprintf+0x314>
    197a:	a2 fe       	sbrs	r10, 2
    197c:	06 c0       	rjmp	.+12     	; 0x198a <vfprintf+0x312>
    197e:	b3 94       	inc	r11
    1980:	b3 94       	inc	r11
    1982:	04 c0       	rjmp	.+8      	; 0x198c <vfprintf+0x314>
    1984:	8a 2d       	mov	r24, r10
    1986:	86 78       	andi	r24, 0x86	; 134
    1988:	09 f0       	breq	.+2      	; 0x198c <vfprintf+0x314>
    198a:	b3 94       	inc	r11
    198c:	a3 fc       	sbrc	r10, 3
    198e:	10 c0       	rjmp	.+32     	; 0x19b0 <vfprintf+0x338>
    1990:	a0 fe       	sbrs	r10, 0
    1992:	06 c0       	rjmp	.+12     	; 0x19a0 <vfprintf+0x328>
    1994:	b2 14       	cp	r11, r2
    1996:	80 f4       	brcc	.+32     	; 0x19b8 <vfprintf+0x340>
    1998:	28 0c       	add	r2, r8
    199a:	92 2c       	mov	r9, r2
    199c:	9b 18       	sub	r9, r11
    199e:	0d c0       	rjmp	.+26     	; 0x19ba <vfprintf+0x342>
    19a0:	b2 14       	cp	r11, r2
    19a2:	58 f4       	brcc	.+22     	; 0x19ba <vfprintf+0x342>
    19a4:	b6 01       	movw	r22, r12
    19a6:	80 e2       	ldi	r24, 0x20	; 32
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	83 d0       	rcall	.+262    	; 0x1ab2 <fputc>
    19ac:	b3 94       	inc	r11
    19ae:	f8 cf       	rjmp	.-16     	; 0x19a0 <vfprintf+0x328>
    19b0:	b2 14       	cp	r11, r2
    19b2:	18 f4       	brcc	.+6      	; 0x19ba <vfprintf+0x342>
    19b4:	2b 18       	sub	r2, r11
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <vfprintf+0x344>
    19b8:	98 2c       	mov	r9, r8
    19ba:	21 2c       	mov	r2, r1
    19bc:	a4 fe       	sbrs	r10, 4
    19be:	0f c0       	rjmp	.+30     	; 0x19de <vfprintf+0x366>
    19c0:	b6 01       	movw	r22, r12
    19c2:	80 e3       	ldi	r24, 0x30	; 48
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	75 d0       	rcall	.+234    	; 0x1ab2 <fputc>
    19c8:	a2 fe       	sbrs	r10, 2
    19ca:	16 c0       	rjmp	.+44     	; 0x19f8 <vfprintf+0x380>
    19cc:	a1 fc       	sbrc	r10, 1
    19ce:	03 c0       	rjmp	.+6      	; 0x19d6 <vfprintf+0x35e>
    19d0:	88 e7       	ldi	r24, 0x78	; 120
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <vfprintf+0x362>
    19d6:	88 e5       	ldi	r24, 0x58	; 88
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	b6 01       	movw	r22, r12
    19dc:	0c c0       	rjmp	.+24     	; 0x19f6 <vfprintf+0x37e>
    19de:	8a 2d       	mov	r24, r10
    19e0:	86 78       	andi	r24, 0x86	; 134
    19e2:	51 f0       	breq	.+20     	; 0x19f8 <vfprintf+0x380>
    19e4:	a1 fe       	sbrs	r10, 1
    19e6:	02 c0       	rjmp	.+4      	; 0x19ec <vfprintf+0x374>
    19e8:	8b e2       	ldi	r24, 0x2B	; 43
    19ea:	01 c0       	rjmp	.+2      	; 0x19ee <vfprintf+0x376>
    19ec:	80 e2       	ldi	r24, 0x20	; 32
    19ee:	a7 fc       	sbrc	r10, 7
    19f0:	8d e2       	ldi	r24, 0x2D	; 45
    19f2:	b6 01       	movw	r22, r12
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	5d d0       	rcall	.+186    	; 0x1ab2 <fputc>
    19f8:	89 14       	cp	r8, r9
    19fa:	30 f4       	brcc	.+12     	; 0x1a08 <vfprintf+0x390>
    19fc:	b6 01       	movw	r22, r12
    19fe:	80 e3       	ldi	r24, 0x30	; 48
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	57 d0       	rcall	.+174    	; 0x1ab2 <fputc>
    1a04:	9a 94       	dec	r9
    1a06:	f8 cf       	rjmp	.-16     	; 0x19f8 <vfprintf+0x380>
    1a08:	8a 94       	dec	r8
    1a0a:	f3 01       	movw	r30, r6
    1a0c:	e8 0d       	add	r30, r8
    1a0e:	f1 1d       	adc	r31, r1
    1a10:	80 81       	ld	r24, Z
    1a12:	b6 01       	movw	r22, r12
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	4d d0       	rcall	.+154    	; 0x1ab2 <fputc>
    1a18:	81 10       	cpse	r8, r1
    1a1a:	f6 cf       	rjmp	.-20     	; 0x1a08 <vfprintf+0x390>
    1a1c:	22 20       	and	r2, r2
    1a1e:	09 f4       	brne	.+2      	; 0x1a22 <vfprintf+0x3aa>
    1a20:	4e ce       	rjmp	.-868    	; 0x16be <vfprintf+0x46>
    1a22:	b6 01       	movw	r22, r12
    1a24:	80 e2       	ldi	r24, 0x20	; 32
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	44 d0       	rcall	.+136    	; 0x1ab2 <fputc>
    1a2a:	2a 94       	dec	r2
    1a2c:	f7 cf       	rjmp	.-18     	; 0x1a1c <vfprintf+0x3a4>
    1a2e:	f6 01       	movw	r30, r12
    1a30:	86 81       	ldd	r24, Z+6	; 0x06
    1a32:	97 81       	ldd	r25, Z+7	; 0x07
    1a34:	02 c0       	rjmp	.+4      	; 0x1a3a <vfprintf+0x3c2>
    1a36:	8f ef       	ldi	r24, 0xFF	; 255
    1a38:	9f ef       	ldi	r25, 0xFF	; 255
    1a3a:	2b 96       	adiw	r28, 0x0b	; 11
    1a3c:	cd bf       	out	0x3d, r28	; 61
    1a3e:	de bf       	out	0x3e, r29	; 62
    1a40:	df 91       	pop	r29
    1a42:	cf 91       	pop	r28
    1a44:	1f 91       	pop	r17
    1a46:	0f 91       	pop	r16
    1a48:	ff 90       	pop	r15
    1a4a:	ef 90       	pop	r14
    1a4c:	df 90       	pop	r13
    1a4e:	cf 90       	pop	r12
    1a50:	bf 90       	pop	r11
    1a52:	af 90       	pop	r10
    1a54:	9f 90       	pop	r9
    1a56:	8f 90       	pop	r8
    1a58:	7f 90       	pop	r7
    1a5a:	6f 90       	pop	r6
    1a5c:	5f 90       	pop	r5
    1a5e:	4f 90       	pop	r4
    1a60:	3f 90       	pop	r3
    1a62:	2f 90       	pop	r2
    1a64:	08 95       	ret

00001a66 <strnlen_P>:
    1a66:	fc 01       	movw	r30, r24
    1a68:	05 90       	lpm	r0, Z+
    1a6a:	61 50       	subi	r22, 0x01	; 1
    1a6c:	70 40       	sbci	r23, 0x00	; 0
    1a6e:	01 10       	cpse	r0, r1
    1a70:	d8 f7       	brcc	.-10     	; 0x1a68 <strnlen_P+0x2>
    1a72:	80 95       	com	r24
    1a74:	90 95       	com	r25
    1a76:	8e 0f       	add	r24, r30
    1a78:	9f 1f       	adc	r25, r31
    1a7a:	08 95       	ret

00001a7c <strnlen>:
    1a7c:	fc 01       	movw	r30, r24
    1a7e:	61 50       	subi	r22, 0x01	; 1
    1a80:	70 40       	sbci	r23, 0x00	; 0
    1a82:	01 90       	ld	r0, Z+
    1a84:	01 10       	cpse	r0, r1
    1a86:	d8 f7       	brcc	.-10     	; 0x1a7e <strnlen+0x2>
    1a88:	80 95       	com	r24
    1a8a:	90 95       	com	r25
    1a8c:	8e 0f       	add	r24, r30
    1a8e:	9f 1f       	adc	r25, r31
    1a90:	08 95       	ret

00001a92 <strrev>:
    1a92:	dc 01       	movw	r26, r24
    1a94:	fc 01       	movw	r30, r24
    1a96:	67 2f       	mov	r22, r23
    1a98:	71 91       	ld	r23, Z+
    1a9a:	77 23       	and	r23, r23
    1a9c:	e1 f7       	brne	.-8      	; 0x1a96 <strrev+0x4>
    1a9e:	32 97       	sbiw	r30, 0x02	; 2
    1aa0:	04 c0       	rjmp	.+8      	; 0x1aaa <strrev+0x18>
    1aa2:	7c 91       	ld	r23, X
    1aa4:	6d 93       	st	X+, r22
    1aa6:	70 83       	st	Z, r23
    1aa8:	62 91       	ld	r22, -Z
    1aaa:	ae 17       	cp	r26, r30
    1aac:	bf 07       	cpc	r27, r31
    1aae:	c8 f3       	brcs	.-14     	; 0x1aa2 <strrev+0x10>
    1ab0:	08 95       	ret

00001ab2 <fputc>:
    1ab2:	0f 93       	push	r16
    1ab4:	1f 93       	push	r17
    1ab6:	cf 93       	push	r28
    1ab8:	df 93       	push	r29
    1aba:	fb 01       	movw	r30, r22
    1abc:	23 81       	ldd	r18, Z+3	; 0x03
    1abe:	21 fd       	sbrc	r18, 1
    1ac0:	03 c0       	rjmp	.+6      	; 0x1ac8 <fputc+0x16>
    1ac2:	8f ef       	ldi	r24, 0xFF	; 255
    1ac4:	9f ef       	ldi	r25, 0xFF	; 255
    1ac6:	2c c0       	rjmp	.+88     	; 0x1b20 <fputc+0x6e>
    1ac8:	22 ff       	sbrs	r18, 2
    1aca:	16 c0       	rjmp	.+44     	; 0x1af8 <fputc+0x46>
    1acc:	46 81       	ldd	r20, Z+6	; 0x06
    1ace:	57 81       	ldd	r21, Z+7	; 0x07
    1ad0:	24 81       	ldd	r18, Z+4	; 0x04
    1ad2:	35 81       	ldd	r19, Z+5	; 0x05
    1ad4:	42 17       	cp	r20, r18
    1ad6:	53 07       	cpc	r21, r19
    1ad8:	44 f4       	brge	.+16     	; 0x1aea <fputc+0x38>
    1ada:	a0 81       	ld	r26, Z
    1adc:	b1 81       	ldd	r27, Z+1	; 0x01
    1ade:	9d 01       	movw	r18, r26
    1ae0:	2f 5f       	subi	r18, 0xFF	; 255
    1ae2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae4:	20 83       	st	Z, r18
    1ae6:	31 83       	std	Z+1, r19	; 0x01
    1ae8:	8c 93       	st	X, r24
    1aea:	26 81       	ldd	r18, Z+6	; 0x06
    1aec:	37 81       	ldd	r19, Z+7	; 0x07
    1aee:	2f 5f       	subi	r18, 0xFF	; 255
    1af0:	3f 4f       	sbci	r19, 0xFF	; 255
    1af2:	26 83       	std	Z+6, r18	; 0x06
    1af4:	37 83       	std	Z+7, r19	; 0x07
    1af6:	14 c0       	rjmp	.+40     	; 0x1b20 <fputc+0x6e>
    1af8:	8b 01       	movw	r16, r22
    1afa:	ec 01       	movw	r28, r24
    1afc:	fb 01       	movw	r30, r22
    1afe:	00 84       	ldd	r0, Z+8	; 0x08
    1b00:	f1 85       	ldd	r31, Z+9	; 0x09
    1b02:	e0 2d       	mov	r30, r0
    1b04:	19 95       	eicall
    1b06:	89 2b       	or	r24, r25
    1b08:	e1 f6       	brne	.-72     	; 0x1ac2 <fputc+0x10>
    1b0a:	d8 01       	movw	r26, r16
    1b0c:	16 96       	adiw	r26, 0x06	; 6
    1b0e:	8d 91       	ld	r24, X+
    1b10:	9c 91       	ld	r25, X
    1b12:	17 97       	sbiw	r26, 0x07	; 7
    1b14:	01 96       	adiw	r24, 0x01	; 1
    1b16:	16 96       	adiw	r26, 0x06	; 6
    1b18:	8d 93       	st	X+, r24
    1b1a:	9c 93       	st	X, r25
    1b1c:	17 97       	sbiw	r26, 0x07	; 7
    1b1e:	ce 01       	movw	r24, r28
    1b20:	df 91       	pop	r29
    1b22:	cf 91       	pop	r28
    1b24:	1f 91       	pop	r17
    1b26:	0f 91       	pop	r16
    1b28:	08 95       	ret

00001b2a <__ultoa_invert>:
    1b2a:	fa 01       	movw	r30, r20
    1b2c:	aa 27       	eor	r26, r26
    1b2e:	28 30       	cpi	r18, 0x08	; 8
    1b30:	51 f1       	breq	.+84     	; 0x1b86 <__ultoa_invert+0x5c>
    1b32:	20 31       	cpi	r18, 0x10	; 16
    1b34:	81 f1       	breq	.+96     	; 0x1b96 <__ultoa_invert+0x6c>
    1b36:	e8 94       	clt
    1b38:	6f 93       	push	r22
    1b3a:	6e 7f       	andi	r22, 0xFE	; 254
    1b3c:	6e 5f       	subi	r22, 0xFE	; 254
    1b3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b40:	8f 4f       	sbci	r24, 0xFF	; 255
    1b42:	9f 4f       	sbci	r25, 0xFF	; 255
    1b44:	af 4f       	sbci	r26, 0xFF	; 255
    1b46:	b1 e0       	ldi	r27, 0x01	; 1
    1b48:	3e d0       	rcall	.+124    	; 0x1bc6 <__ultoa_invert+0x9c>
    1b4a:	b4 e0       	ldi	r27, 0x04	; 4
    1b4c:	3c d0       	rcall	.+120    	; 0x1bc6 <__ultoa_invert+0x9c>
    1b4e:	67 0f       	add	r22, r23
    1b50:	78 1f       	adc	r23, r24
    1b52:	89 1f       	adc	r24, r25
    1b54:	9a 1f       	adc	r25, r26
    1b56:	a1 1d       	adc	r26, r1
    1b58:	68 0f       	add	r22, r24
    1b5a:	79 1f       	adc	r23, r25
    1b5c:	8a 1f       	adc	r24, r26
    1b5e:	91 1d       	adc	r25, r1
    1b60:	a1 1d       	adc	r26, r1
    1b62:	6a 0f       	add	r22, r26
    1b64:	71 1d       	adc	r23, r1
    1b66:	81 1d       	adc	r24, r1
    1b68:	91 1d       	adc	r25, r1
    1b6a:	a1 1d       	adc	r26, r1
    1b6c:	20 d0       	rcall	.+64     	; 0x1bae <__ultoa_invert+0x84>
    1b6e:	09 f4       	brne	.+2      	; 0x1b72 <__ultoa_invert+0x48>
    1b70:	68 94       	set
    1b72:	3f 91       	pop	r19
    1b74:	2a e0       	ldi	r18, 0x0A	; 10
    1b76:	26 9f       	mul	r18, r22
    1b78:	11 24       	eor	r1, r1
    1b7a:	30 19       	sub	r19, r0
    1b7c:	30 5d       	subi	r19, 0xD0	; 208
    1b7e:	31 93       	st	Z+, r19
    1b80:	de f6       	brtc	.-74     	; 0x1b38 <__ultoa_invert+0xe>
    1b82:	cf 01       	movw	r24, r30
    1b84:	08 95       	ret
    1b86:	46 2f       	mov	r20, r22
    1b88:	47 70       	andi	r20, 0x07	; 7
    1b8a:	40 5d       	subi	r20, 0xD0	; 208
    1b8c:	41 93       	st	Z+, r20
    1b8e:	b3 e0       	ldi	r27, 0x03	; 3
    1b90:	0f d0       	rcall	.+30     	; 0x1bb0 <__ultoa_invert+0x86>
    1b92:	c9 f7       	brne	.-14     	; 0x1b86 <__ultoa_invert+0x5c>
    1b94:	f6 cf       	rjmp	.-20     	; 0x1b82 <__ultoa_invert+0x58>
    1b96:	46 2f       	mov	r20, r22
    1b98:	4f 70       	andi	r20, 0x0F	; 15
    1b9a:	40 5d       	subi	r20, 0xD0	; 208
    1b9c:	4a 33       	cpi	r20, 0x3A	; 58
    1b9e:	18 f0       	brcs	.+6      	; 0x1ba6 <__ultoa_invert+0x7c>
    1ba0:	49 5d       	subi	r20, 0xD9	; 217
    1ba2:	31 fd       	sbrc	r19, 1
    1ba4:	40 52       	subi	r20, 0x20	; 32
    1ba6:	41 93       	st	Z+, r20
    1ba8:	02 d0       	rcall	.+4      	; 0x1bae <__ultoa_invert+0x84>
    1baa:	a9 f7       	brne	.-22     	; 0x1b96 <__ultoa_invert+0x6c>
    1bac:	ea cf       	rjmp	.-44     	; 0x1b82 <__ultoa_invert+0x58>
    1bae:	b4 e0       	ldi	r27, 0x04	; 4
    1bb0:	a6 95       	lsr	r26
    1bb2:	97 95       	ror	r25
    1bb4:	87 95       	ror	r24
    1bb6:	77 95       	ror	r23
    1bb8:	67 95       	ror	r22
    1bba:	ba 95       	dec	r27
    1bbc:	c9 f7       	brne	.-14     	; 0x1bb0 <__ultoa_invert+0x86>
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	61 05       	cpc	r22, r1
    1bc2:	71 05       	cpc	r23, r1
    1bc4:	08 95       	ret
    1bc6:	9b 01       	movw	r18, r22
    1bc8:	ac 01       	movw	r20, r24
    1bca:	0a 2e       	mov	r0, r26
    1bcc:	06 94       	lsr	r0
    1bce:	57 95       	ror	r21
    1bd0:	47 95       	ror	r20
    1bd2:	37 95       	ror	r19
    1bd4:	27 95       	ror	r18
    1bd6:	ba 95       	dec	r27
    1bd8:	c9 f7       	brne	.-14     	; 0x1bcc <__ultoa_invert+0xa2>
    1bda:	62 0f       	add	r22, r18
    1bdc:	73 1f       	adc	r23, r19
    1bde:	84 1f       	adc	r24, r20
    1be0:	95 1f       	adc	r25, r21
    1be2:	a0 1d       	adc	r26, r0
    1be4:	08 95       	ret

00001be6 <_exit>:
    1be6:	f8 94       	cli

00001be8 <__stop_program>:
    1be8:	ff cf       	rjmp	.-2      	; 0x1be8 <__stop_program>
