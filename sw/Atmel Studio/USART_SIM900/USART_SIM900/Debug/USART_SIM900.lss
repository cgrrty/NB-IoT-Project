
USART_SIM900.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001782  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000182  00802000  00001782  00001816  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00802182  00802182  00001998  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001998  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00001a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a8df  00000000  00000000  00001c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004d2a  00000000  00000000  0000c563  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000038ed  00000000  00000000  0001128d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007fc  00000000  00000000  00014b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00033262  00000000  00000000  00015378  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000354b  00000000  00000000  000485da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  0004bb25  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b9ea  00000000  00000000  0004bd45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	20 c1       	rjmp	.+576    	; 0x246 <__bad_interrupt>
       6:	00 00       	nop
       8:	1e c1       	rjmp	.+572    	; 0x246 <__bad_interrupt>
       a:	00 00       	nop
       c:	1c c1       	rjmp	.+568    	; 0x246 <__bad_interrupt>
       e:	00 00       	nop
      10:	1a c1       	rjmp	.+564    	; 0x246 <__bad_interrupt>
      12:	00 00       	nop
      14:	18 c1       	rjmp	.+560    	; 0x246 <__bad_interrupt>
      16:	00 00       	nop
      18:	16 c1       	rjmp	.+556    	; 0x246 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	14 c1       	rjmp	.+552    	; 0x246 <__bad_interrupt>
      1e:	00 00       	nop
      20:	12 c1       	rjmp	.+548    	; 0x246 <__bad_interrupt>
      22:	00 00       	nop
      24:	10 c1       	rjmp	.+544    	; 0x246 <__bad_interrupt>
      26:	00 00       	nop
      28:	0e c1       	rjmp	.+540    	; 0x246 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c c1       	rjmp	.+536    	; 0x246 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0a c1       	rjmp	.+532    	; 0x246 <__bad_interrupt>
      32:	00 00       	nop
      34:	08 c1       	rjmp	.+528    	; 0x246 <__bad_interrupt>
      36:	00 00       	nop
      38:	06 c1       	rjmp	.+524    	; 0x246 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	04 c1       	rjmp	.+520    	; 0x246 <__bad_interrupt>
      3e:	00 00       	nop
      40:	02 c1       	rjmp	.+516    	; 0x246 <__bad_interrupt>
      42:	00 00       	nop
      44:	00 c1       	rjmp	.+512    	; 0x246 <__bad_interrupt>
      46:	00 00       	nop
      48:	fe c0       	rjmp	.+508    	; 0x246 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fc c0       	rjmp	.+504    	; 0x246 <__bad_interrupt>
      4e:	00 00       	nop
      50:	fa c0       	rjmp	.+500    	; 0x246 <__bad_interrupt>
      52:	00 00       	nop
      54:	f8 c0       	rjmp	.+496    	; 0x246 <__bad_interrupt>
      56:	00 00       	nop
      58:	f6 c0       	rjmp	.+492    	; 0x246 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f4 c0       	rjmp	.+488    	; 0x246 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f2 c0       	rjmp	.+484    	; 0x246 <__bad_interrupt>
      62:	00 00       	nop
      64:	f0 c0       	rjmp	.+480    	; 0x246 <__bad_interrupt>
      66:	00 00       	nop
      68:	ee c0       	rjmp	.+476    	; 0x246 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ec c0       	rjmp	.+472    	; 0x246 <__bad_interrupt>
      6e:	00 00       	nop
      70:	ea c0       	rjmp	.+468    	; 0x246 <__bad_interrupt>
      72:	00 00       	nop
      74:	e8 c0       	rjmp	.+464    	; 0x246 <__bad_interrupt>
      76:	00 00       	nop
      78:	e6 c0       	rjmp	.+460    	; 0x246 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e4 c0       	rjmp	.+456    	; 0x246 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e2 c0       	rjmp	.+452    	; 0x246 <__bad_interrupt>
      82:	00 00       	nop
      84:	e0 c0       	rjmp	.+448    	; 0x246 <__bad_interrupt>
      86:	00 00       	nop
      88:	de c0       	rjmp	.+444    	; 0x246 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dc c0       	rjmp	.+440    	; 0x246 <__bad_interrupt>
      8e:	00 00       	nop
      90:	da c0       	rjmp	.+436    	; 0x246 <__bad_interrupt>
      92:	00 00       	nop
      94:	d8 c0       	rjmp	.+432    	; 0x246 <__bad_interrupt>
      96:	00 00       	nop
      98:	d6 c0       	rjmp	.+428    	; 0x246 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d4 c0       	rjmp	.+424    	; 0x246 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d2 c0       	rjmp	.+420    	; 0x246 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d0 c0       	rjmp	.+416    	; 0x246 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ce c0       	rjmp	.+412    	; 0x246 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cc c0       	rjmp	.+408    	; 0x246 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ca c0       	rjmp	.+404    	; 0x246 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c8 c0       	rjmp	.+400    	; 0x246 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c6 c0       	rjmp	.+396    	; 0x246 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c4 c0       	rjmp	.+392    	; 0x246 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c2 c0       	rjmp	.+388    	; 0x246 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c0 c0       	rjmp	.+384    	; 0x246 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	be c0       	rjmp	.+380    	; 0x246 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bc c0       	rjmp	.+376    	; 0x246 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ba c0       	rjmp	.+372    	; 0x246 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b8 c0       	rjmp	.+368    	; 0x246 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b6 c0       	rjmp	.+364    	; 0x246 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b4 c0       	rjmp	.+360    	; 0x246 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b2 c0       	rjmp	.+356    	; 0x246 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b0 c0       	rjmp	.+352    	; 0x246 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ae c0       	rjmp	.+348    	; 0x246 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ac c0       	rjmp	.+344    	; 0x246 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	aa c0       	rjmp	.+340    	; 0x246 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a8 c0       	rjmp	.+336    	; 0x246 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a6 c0       	rjmp	.+332    	; 0x246 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a4 c0       	rjmp	.+328    	; 0x246 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a2 c0       	rjmp	.+324    	; 0x246 <__bad_interrupt>
     102:	00 00       	nop
     104:	a0 c0       	rjmp	.+320    	; 0x246 <__bad_interrupt>
     106:	00 00       	nop
     108:	9e c0       	rjmp	.+316    	; 0x246 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9c c0       	rjmp	.+312    	; 0x246 <__bad_interrupt>
     10e:	00 00       	nop
     110:	9a c0       	rjmp	.+308    	; 0x246 <__bad_interrupt>
     112:	00 00       	nop
     114:	98 c0       	rjmp	.+304    	; 0x246 <__bad_interrupt>
     116:	00 00       	nop
     118:	96 c0       	rjmp	.+300    	; 0x246 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	94 c0       	rjmp	.+296    	; 0x246 <__bad_interrupt>
     11e:	00 00       	nop
     120:	92 c0       	rjmp	.+292    	; 0x246 <__bad_interrupt>
     122:	00 00       	nop
     124:	90 c0       	rjmp	.+288    	; 0x246 <__bad_interrupt>
     126:	00 00       	nop
     128:	8e c0       	rjmp	.+284    	; 0x246 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8c c0       	rjmp	.+280    	; 0x246 <__bad_interrupt>
     12e:	00 00       	nop
     130:	8a c0       	rjmp	.+276    	; 0x246 <__bad_interrupt>
     132:	00 00       	nop
     134:	88 c0       	rjmp	.+272    	; 0x246 <__bad_interrupt>
     136:	00 00       	nop
     138:	86 c0       	rjmp	.+268    	; 0x246 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	84 c0       	rjmp	.+264    	; 0x246 <__bad_interrupt>
     13e:	00 00       	nop
     140:	82 c0       	rjmp	.+260    	; 0x246 <__bad_interrupt>
     142:	00 00       	nop
     144:	80 c0       	rjmp	.+256    	; 0x246 <__bad_interrupt>
     146:	00 00       	nop
     148:	7e c0       	rjmp	.+252    	; 0x246 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7c c0       	rjmp	.+248    	; 0x246 <__bad_interrupt>
     14e:	00 00       	nop
     150:	7a c0       	rjmp	.+244    	; 0x246 <__bad_interrupt>
     152:	00 00       	nop
     154:	78 c0       	rjmp	.+240    	; 0x246 <__bad_interrupt>
     156:	00 00       	nop
     158:	76 c0       	rjmp	.+236    	; 0x246 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	74 c0       	rjmp	.+232    	; 0x246 <__bad_interrupt>
     15e:	00 00       	nop
     160:	72 c0       	rjmp	.+228    	; 0x246 <__bad_interrupt>
     162:	00 00       	nop
     164:	70 c0       	rjmp	.+224    	; 0x246 <__bad_interrupt>
     166:	00 00       	nop
     168:	6e c0       	rjmp	.+220    	; 0x246 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6c c0       	rjmp	.+216    	; 0x246 <__bad_interrupt>
     16e:	00 00       	nop
     170:	6a c0       	rjmp	.+212    	; 0x246 <__bad_interrupt>
     172:	00 00       	nop
     174:	68 c0       	rjmp	.+208    	; 0x246 <__bad_interrupt>
     176:	00 00       	nop
     178:	66 c0       	rjmp	.+204    	; 0x246 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	64 c0       	rjmp	.+200    	; 0x246 <__bad_interrupt>
     17e:	00 00       	nop
     180:	62 c0       	rjmp	.+196    	; 0x246 <__bad_interrupt>
     182:	00 00       	nop
     184:	60 c0       	rjmp	.+192    	; 0x246 <__bad_interrupt>
     186:	00 00       	nop
     188:	5e c0       	rjmp	.+188    	; 0x246 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5c c0       	rjmp	.+184    	; 0x246 <__bad_interrupt>
     18e:	00 00       	nop
     190:	5a c0       	rjmp	.+180    	; 0x246 <__bad_interrupt>
     192:	00 00       	nop
     194:	58 c0       	rjmp	.+176    	; 0x246 <__bad_interrupt>
     196:	00 00       	nop
     198:	56 c0       	rjmp	.+172    	; 0x246 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	54 c0       	rjmp	.+168    	; 0x246 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	52 c0       	rjmp	.+164    	; 0x246 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	50 c0       	rjmp	.+160    	; 0x246 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4e c0       	rjmp	.+156    	; 0x246 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4c c0       	rjmp	.+152    	; 0x246 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	4a c0       	rjmp	.+148    	; 0x246 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	48 c0       	rjmp	.+144    	; 0x246 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	46 c0       	rjmp	.+140    	; 0x246 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	44 c0       	rjmp	.+136    	; 0x246 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	42 c0       	rjmp	.+132    	; 0x246 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	40 c0       	rjmp	.+128    	; 0x246 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3e c0       	rjmp	.+124    	; 0x246 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3c c0       	rjmp	.+120    	; 0x246 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	3a c0       	rjmp	.+116    	; 0x246 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	38 c0       	rjmp	.+112    	; 0x246 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	36 c0       	rjmp	.+108    	; 0x246 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	34 c0       	rjmp	.+104    	; 0x246 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	32 c0       	rjmp	.+100    	; 0x246 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	30 c0       	rjmp	.+96     	; 0x246 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2e c0       	rjmp	.+92     	; 0x246 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2c c0       	rjmp	.+88     	; 0x246 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2a c0       	rjmp	.+84     	; 0x246 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	28 c0       	rjmp	.+80     	; 0x246 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	26 c0       	rjmp	.+76     	; 0x246 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	11 e2       	ldi	r17, 0x21	; 33
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	e2 e8       	ldi	r30, 0x82	; 130
     21c:	f7 e1       	ldi	r31, 0x17	; 23
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a2 38       	cpi	r26, 0x82	; 130
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	21 e2       	ldi	r18, 0x21	; 33
     232:	a2 e8       	ldi	r26, 0x82	; 130
     234:	b1 e2       	ldi	r27, 0x21	; 33
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	a8 38       	cpi	r26, 0x88	; 136
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	d2 d6       	rcall	.+3492   	; 0xfe6 <main>
     242:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <_exit>

00000246 <__bad_interrupt>:
     246:	dc ce       	rjmp	.-584    	; 0x0 <__vectors>

00000248 <MQTTSerialize_connectLength>:

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
     248:	ef 92       	push	r14
     24a:	ff 92       	push	r15
     24c:	0f 93       	push	r16
     24e:	1f 93       	push	r17
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	ec 01       	movw	r28, r24
     256:	8e 81       	ldd	r24, Y+6	; 0x06
     258:	83 30       	cpi	r24, 0x03	; 3
     25a:	29 f0       	breq	.+10     	; 0x266 <MQTTSerialize_connectLength+0x1e>
     25c:	84 30       	cpi	r24, 0x04	; 4
     25e:	31 f4       	brne	.+12     	; 0x26c <MQTTSerialize_connectLength+0x24>
     260:	0a e0       	ldi	r16, 0x0A	; 10
     262:	10 e0       	ldi	r17, 0x00	; 0
     264:	05 c0       	rjmp	.+10     	; 0x270 <MQTTSerialize_connectLength+0x28>
     266:	0c e0       	ldi	r16, 0x0C	; 12
     268:	10 e0       	ldi	r17, 0x00	; 0
     26a:	02 c0       	rjmp	.+4      	; 0x270 <MQTTSerialize_connectLength+0x28>
     26c:	00 e0       	ldi	r16, 0x00	; 0
     26e:	10 e0       	ldi	r17, 0x00	; 0
     270:	4f 81       	ldd	r20, Y+7	; 0x07
     272:	58 85       	ldd	r21, Y+8	; 0x08
     274:	69 85       	ldd	r22, Y+9	; 0x09
     276:	7a 85       	ldd	r23, Y+10	; 0x0a
     278:	8b 85       	ldd	r24, Y+11	; 0x0b
     27a:	9c 85       	ldd	r25, Y+12	; 0x0c
     27c:	f9 d1       	rcall	.+1010   	; 0x670 <MQTTstrlen>
     27e:	02 96       	adiw	r24, 0x02	; 2
     280:	08 0f       	add	r16, r24
     282:	19 1f       	adc	r17, r25
     284:	88 89       	ldd	r24, Y+16	; 0x10
     286:	88 23       	and	r24, r24
     288:	a1 f0       	breq	.+40     	; 0x2b2 <MQTTSerialize_connectLength+0x6a>
     28a:	4f 89       	ldd	r20, Y+23	; 0x17
     28c:	58 8d       	ldd	r21, Y+24	; 0x18
     28e:	69 8d       	ldd	r22, Y+25	; 0x19
     290:	7a 8d       	ldd	r23, Y+26	; 0x1a
     292:	8b 8d       	ldd	r24, Y+27	; 0x1b
     294:	9c 8d       	ldd	r25, Y+28	; 0x1c
     296:	ec d1       	rcall	.+984    	; 0x670 <MQTTstrlen>
     298:	7c 01       	movw	r14, r24
     29a:	4d 8d       	ldd	r20, Y+29	; 0x1d
     29c:	5e 8d       	ldd	r21, Y+30	; 0x1e
     29e:	6f 8d       	ldd	r22, Y+31	; 0x1f
     2a0:	78 a1       	ldd	r23, Y+32	; 0x20
     2a2:	89 a1       	ldd	r24, Y+33	; 0x21
     2a4:	9a a1       	ldd	r25, Y+34	; 0x22
     2a6:	e4 d1       	rcall	.+968    	; 0x670 <MQTTstrlen>
     2a8:	8e 0d       	add	r24, r14
     2aa:	9f 1d       	adc	r25, r15
     2ac:	04 96       	adiw	r24, 0x04	; 4
     2ae:	08 0f       	add	r16, r24
     2b0:	19 1f       	adc	r17, r25
     2b2:	8d a1       	ldd	r24, Y+37	; 0x25
     2b4:	9e a1       	ldd	r25, Y+38	; 0x26
     2b6:	89 2b       	or	r24, r25
     2b8:	21 f4       	brne	.+8      	; 0x2c2 <MQTTSerialize_connectLength+0x7a>
     2ba:	89 a5       	ldd	r24, Y+41	; 0x29
     2bc:	9a a5       	ldd	r25, Y+42	; 0x2a
     2be:	89 2b       	or	r24, r25
     2c0:	51 f0       	breq	.+20     	; 0x2d6 <MQTTSerialize_connectLength+0x8e>
     2c2:	4d a1       	ldd	r20, Y+37	; 0x25
     2c4:	5e a1       	ldd	r21, Y+38	; 0x26
     2c6:	6f a1       	ldd	r22, Y+39	; 0x27
     2c8:	78 a5       	ldd	r23, Y+40	; 0x28
     2ca:	89 a5       	ldd	r24, Y+41	; 0x29
     2cc:	9a a5       	ldd	r25, Y+42	; 0x2a
     2ce:	d0 d1       	rcall	.+928    	; 0x670 <MQTTstrlen>
     2d0:	02 96       	adiw	r24, 0x02	; 2
     2d2:	08 0f       	add	r16, r24
     2d4:	19 1f       	adc	r17, r25
     2d6:	8b a5       	ldd	r24, Y+43	; 0x2b
     2d8:	9c a5       	ldd	r25, Y+44	; 0x2c
     2da:	89 2b       	or	r24, r25
     2dc:	21 f4       	brne	.+8      	; 0x2e6 <MQTTSerialize_connectLength+0x9e>
     2de:	8f a5       	ldd	r24, Y+47	; 0x2f
     2e0:	98 a9       	ldd	r25, Y+48	; 0x30
     2e2:	89 2b       	or	r24, r25
     2e4:	51 f0       	breq	.+20     	; 0x2fa <MQTTSerialize_connectLength+0xb2>
     2e6:	4b a5       	ldd	r20, Y+43	; 0x2b
     2e8:	5c a5       	ldd	r21, Y+44	; 0x2c
     2ea:	6d a5       	ldd	r22, Y+45	; 0x2d
     2ec:	7e a5       	ldd	r23, Y+46	; 0x2e
     2ee:	8f a5       	ldd	r24, Y+47	; 0x2f
     2f0:	98 a9       	ldd	r25, Y+48	; 0x30
     2f2:	be d1       	rcall	.+892    	; 0x670 <MQTTstrlen>
     2f4:	02 96       	adiw	r24, 0x02	; 2
     2f6:	08 0f       	add	r16, r24
     2f8:	19 1f       	adc	r17, r25
     2fa:	c8 01       	movw	r24, r16
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	1f 91       	pop	r17
     302:	0f 91       	pop	r16
     304:	ff 90       	pop	r15
     306:	ef 90       	pop	r14
     308:	08 95       	ret

0000030a <MQTTSerialize_connect>:
     30a:	af 92       	push	r10
     30c:	bf 92       	push	r11
     30e:	cf 92       	push	r12
     310:	df 92       	push	r13
     312:	ef 92       	push	r14
     314:	ff 92       	push	r15
     316:	0f 93       	push	r16
     318:	1f 93       	push	r17
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	1f 92       	push	r1
     320:	1f 92       	push	r1
     322:	cd b7       	in	r28, 0x3d	; 61
     324:	de b7       	in	r29, 0x3e	; 62
     326:	6c 01       	movw	r12, r24
     328:	5b 01       	movw	r10, r22
     32a:	8a 01       	movw	r16, r20
     32c:	89 83       	std	Y+1, r24	; 0x01
     32e:	9a 83       	std	Y+2, r25	; 0x02
     330:	ca 01       	movw	r24, r20
     332:	8a df       	rcall	.-236    	; 0x248 <MQTTSerialize_connectLength>
     334:	7c 01       	movw	r14, r24
     336:	04 d1       	rcall	.+520    	; 0x540 <MQTTPacket_len>
     338:	a8 16       	cp	r10, r24
     33a:	b9 06       	cpc	r11, r25
     33c:	0c f4       	brge	.+2      	; 0x340 <MQTTSerialize_connect+0x36>
     33e:	9f c0       	rjmp	.+318    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     340:	60 e1       	ldi	r22, 0x10	; 16
     342:	ce 01       	movw	r24, r28
     344:	01 96       	adiw	r24, 0x01	; 1
     346:	0b d1       	rcall	.+534    	; 0x55e <writeChar>
     348:	b7 01       	movw	r22, r14
     34a:	89 81       	ldd	r24, Y+1	; 0x01
     34c:	9a 81       	ldd	r25, Y+2	; 0x02
     34e:	d2 d0       	rcall	.+420    	; 0x4f4 <MQTTPacket_encode>
     350:	29 81       	ldd	r18, Y+1	; 0x01
     352:	3a 81       	ldd	r19, Y+2	; 0x02
     354:	82 0f       	add	r24, r18
     356:	93 1f       	adc	r25, r19
     358:	89 83       	std	Y+1, r24	; 0x01
     35a:	9a 83       	std	Y+2, r25	; 0x02
     35c:	f8 01       	movw	r30, r16
     35e:	86 81       	ldd	r24, Z+6	; 0x06
     360:	84 30       	cpi	r24, 0x04	; 4
     362:	51 f4       	brne	.+20     	; 0x378 <MQTTSerialize_connect+0x6e>
     364:	63 e6       	ldi	r22, 0x63	; 99
     366:	70 e2       	ldi	r23, 0x20	; 32
     368:	ce 01       	movw	r24, r28
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	21 d1       	rcall	.+578    	; 0x5b0 <writeCString>
     36e:	64 e0       	ldi	r22, 0x04	; 4
     370:	ce 01       	movw	r24, r28
     372:	01 96       	adiw	r24, 0x01	; 1
     374:	f4 d0       	rcall	.+488    	; 0x55e <writeChar>
     376:	09 c0       	rjmp	.+18     	; 0x38a <MQTTSerialize_connect+0x80>
     378:	68 e6       	ldi	r22, 0x68	; 104
     37a:	70 e2       	ldi	r23, 0x20	; 32
     37c:	ce 01       	movw	r24, r28
     37e:	01 96       	adiw	r24, 0x01	; 1
     380:	17 d1       	rcall	.+558    	; 0x5b0 <writeCString>
     382:	63 e0       	ldi	r22, 0x03	; 3
     384:	ce 01       	movw	r24, r28
     386:	01 96       	adiw	r24, 0x01	; 1
     388:	ea d0       	rcall	.+468    	; 0x55e <writeChar>
     38a:	f1 2c       	mov	r15, r1
     38c:	f8 01       	movw	r30, r16
     38e:	87 85       	ldd	r24, Z+15	; 0x0f
     390:	80 fb       	bst	r24, 0
     392:	f1 f8       	bld	r15, 1
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	90 89       	ldd	r25, Z+16	; 0x10
     398:	91 11       	cpse	r25, r1
     39a:	01 c0       	rjmp	.+2      	; 0x39e <MQTTSerialize_connect+0x94>
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	80 fb       	bst	r24, 0
     3a0:	f2 f8       	bld	r15, 2
     3a2:	f2 fe       	sbrs	r15, 2
     3a4:	0d c0       	rjmp	.+26     	; 0x3c0 <MQTTSerialize_connect+0xb6>
     3a6:	f8 01       	movw	r30, r16
     3a8:	84 a1       	ldd	r24, Z+36	; 0x24
     3aa:	83 70       	andi	r24, 0x03	; 3
     3ac:	88 0f       	add	r24, r24
     3ae:	88 0f       	add	r24, r24
     3b0:	88 0f       	add	r24, r24
     3b2:	9f 2d       	mov	r25, r15
     3b4:	97 7e       	andi	r25, 0xE7	; 231
     3b6:	f9 2e       	mov	r15, r25
     3b8:	f8 2a       	or	r15, r24
     3ba:	83 a1       	ldd	r24, Z+35	; 0x23
     3bc:	80 fb       	bst	r24, 0
     3be:	f5 f8       	bld	r15, 5
     3c0:	f8 01       	movw	r30, r16
     3c2:	85 a1       	ldd	r24, Z+37	; 0x25
     3c4:	96 a1       	ldd	r25, Z+38	; 0x26
     3c6:	89 2b       	or	r24, r25
     3c8:	21 f4       	brne	.+8      	; 0x3d2 <MQTTSerialize_connect+0xc8>
     3ca:	81 a5       	ldd	r24, Z+41	; 0x29
     3cc:	92 a5       	ldd	r25, Z+42	; 0x2a
     3ce:	89 2b       	or	r24, r25
     3d0:	11 f0       	breq	.+4      	; 0x3d6 <MQTTSerialize_connect+0xcc>
     3d2:	68 94       	set
     3d4:	f7 f8       	bld	r15, 7
     3d6:	f8 01       	movw	r30, r16
     3d8:	83 a5       	ldd	r24, Z+43	; 0x2b
     3da:	94 a5       	ldd	r25, Z+44	; 0x2c
     3dc:	89 2b       	or	r24, r25
     3de:	21 f4       	brne	.+8      	; 0x3e8 <MQTTSerialize_connect+0xde>
     3e0:	87 a5       	ldd	r24, Z+47	; 0x2f
     3e2:	90 a9       	ldd	r25, Z+48	; 0x30
     3e4:	89 2b       	or	r24, r25
     3e6:	11 f0       	breq	.+4      	; 0x3ec <MQTTSerialize_connect+0xe2>
     3e8:	68 94       	set
     3ea:	f6 f8       	bld	r15, 6
     3ec:	6f 2d       	mov	r22, r15
     3ee:	ce 01       	movw	r24, r28
     3f0:	01 96       	adiw	r24, 0x01	; 1
     3f2:	b5 d0       	rcall	.+362    	; 0x55e <writeChar>
     3f4:	f8 01       	movw	r30, r16
     3f6:	65 85       	ldd	r22, Z+13	; 0x0d
     3f8:	76 85       	ldd	r23, Z+14	; 0x0e
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b9 d0       	rcall	.+370    	; 0x572 <writeInt>
     400:	f8 01       	movw	r30, r16
     402:	27 81       	ldd	r18, Z+7	; 0x07
     404:	30 85       	ldd	r19, Z+8	; 0x08
     406:	41 85       	ldd	r20, Z+9	; 0x09
     408:	52 85       	ldd	r21, Z+10	; 0x0a
     40a:	63 85       	ldd	r22, Z+11	; 0x0b
     40c:	74 85       	ldd	r23, Z+12	; 0x0c
     40e:	ce 01       	movw	r24, r28
     410:	01 96       	adiw	r24, 0x01	; 1
     412:	f3 d0       	rcall	.+486    	; 0x5fa <writeMQTTString>
     414:	f8 01       	movw	r30, r16
     416:	80 89       	ldd	r24, Z+16	; 0x10
     418:	88 23       	and	r24, r24
     41a:	99 f0       	breq	.+38     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     41c:	27 89       	ldd	r18, Z+23	; 0x17
     41e:	30 8d       	ldd	r19, Z+24	; 0x18
     420:	41 8d       	ldd	r20, Z+25	; 0x19
     422:	52 8d       	ldd	r21, Z+26	; 0x1a
     424:	63 8d       	ldd	r22, Z+27	; 0x1b
     426:	74 8d       	ldd	r23, Z+28	; 0x1c
     428:	ce 01       	movw	r24, r28
     42a:	01 96       	adiw	r24, 0x01	; 1
     42c:	e6 d0       	rcall	.+460    	; 0x5fa <writeMQTTString>
     42e:	f8 01       	movw	r30, r16
     430:	25 8d       	ldd	r18, Z+29	; 0x1d
     432:	36 8d       	ldd	r19, Z+30	; 0x1e
     434:	47 8d       	ldd	r20, Z+31	; 0x1f
     436:	50 a1       	ldd	r21, Z+32	; 0x20
     438:	61 a1       	ldd	r22, Z+33	; 0x21
     43a:	72 a1       	ldd	r23, Z+34	; 0x22
     43c:	ce 01       	movw	r24, r28
     43e:	01 96       	adiw	r24, 0x01	; 1
     440:	dc d0       	rcall	.+440    	; 0x5fa <writeMQTTString>
     442:	ef 2c       	mov	r14, r15
     444:	ff 20       	and	r15, r15
     446:	54 f4       	brge	.+20     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     448:	f8 01       	movw	r30, r16
     44a:	25 a1       	ldd	r18, Z+37	; 0x25
     44c:	36 a1       	ldd	r19, Z+38	; 0x26
     44e:	47 a1       	ldd	r20, Z+39	; 0x27
     450:	50 a5       	ldd	r21, Z+40	; 0x28
     452:	61 a5       	ldd	r22, Z+41	; 0x29
     454:	72 a5       	ldd	r23, Z+42	; 0x2a
     456:	ce 01       	movw	r24, r28
     458:	01 96       	adiw	r24, 0x01	; 1
     45a:	cf d0       	rcall	.+414    	; 0x5fa <writeMQTTString>
     45c:	e6 fe       	sbrs	r14, 6
     45e:	0a c0       	rjmp	.+20     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     460:	f8 01       	movw	r30, r16
     462:	23 a5       	ldd	r18, Z+43	; 0x2b
     464:	34 a5       	ldd	r19, Z+44	; 0x2c
     466:	45 a5       	ldd	r20, Z+45	; 0x2d
     468:	56 a5       	ldd	r21, Z+46	; 0x2e
     46a:	67 a5       	ldd	r22, Z+47	; 0x2f
     46c:	70 a9       	ldd	r23, Z+48	; 0x30
     46e:	ce 01       	movw	r24, r28
     470:	01 96       	adiw	r24, 0x01	; 1
     472:	c3 d0       	rcall	.+390    	; 0x5fa <writeMQTTString>
     474:	89 81       	ldd	r24, Y+1	; 0x01
     476:	9a 81       	ldd	r25, Y+2	; 0x02
     478:	8c 19       	sub	r24, r12
     47a:	9d 09       	sbc	r25, r13
     47c:	02 c0       	rjmp	.+4      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     47e:	8e ef       	ldi	r24, 0xFE	; 254
     480:	9f ef       	ldi	r25, 0xFF	; 255
     482:	0f 90       	pop	r0
     484:	0f 90       	pop	r0
     486:	df 91       	pop	r29
     488:	cf 91       	pop	r28
     48a:	1f 91       	pop	r17
     48c:	0f 91       	pop	r16
     48e:	ff 90       	pop	r15
     490:	ef 90       	pop	r14
     492:	df 90       	pop	r13
     494:	cf 90       	pop	r12
     496:	bf 90       	pop	r11
     498:	af 90       	pop	r10
     49a:	08 95       	ret

0000049c <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
     49c:	0f 93       	push	r16
     49e:	1f 93       	push	r17
     4a0:	cf 93       	push	r28
     4a2:	df 93       	push	r29
     4a4:	1f 92       	push	r1
     4a6:	1f 92       	push	r1
     4a8:	cd b7       	in	r28, 0x3d	; 61
     4aa:	de b7       	in	r29, 0x3e	; 62
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
     4ac:	89 83       	std	Y+1, r24	; 0x01
     4ae:	9a 83       	std	Y+2, r25	; 0x02

	FUNC_ENTRY;
	if (buflen < 2)
     4b0:	62 30       	cpi	r22, 0x02	; 2
     4b2:	71 05       	cpc	r23, r1
     4b4:	9c f0       	brlt	.+38     	; 0x4dc <MQTTSerialize_zero+0x40>
     4b6:	8c 01       	movw	r16, r24
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
     4b8:	64 2f       	mov	r22, r20
     4ba:	62 95       	swap	r22
     4bc:	60 7f       	andi	r22, 0xF0	; 240
	writeChar(&ptr, header.byte); /* write header */
     4be:	ce 01       	movw	r24, r28
     4c0:	01 96       	adiw	r24, 0x01	; 1
     4c2:	4d d0       	rcall	.+154    	; 0x55e <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
     4c4:	60 e0       	ldi	r22, 0x00	; 0
     4c6:	70 e0       	ldi	r23, 0x00	; 0
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
     4ca:	9a 81       	ldd	r25, Y+2	; 0x02
     4cc:	13 d0       	rcall	.+38     	; 0x4f4 <MQTTPacket_encode>
	rc = ptr - buf;
     4ce:	29 81       	ldd	r18, Y+1	; 0x01
     4d0:	3a 81       	ldd	r19, Y+2	; 0x02
     4d2:	82 0f       	add	r24, r18
     4d4:	93 1f       	adc	r25, r19
     4d6:	80 1b       	sub	r24, r16
     4d8:	91 0b       	sbc	r25, r17
     4da:	02 c0       	rjmp	.+4      	; 0x4e0 <MQTTSerialize_zero+0x44>
	unsigned char *ptr = buf;

	FUNC_ENTRY;
	if (buflen < 2)
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
     4dc:	8e ef       	ldi	r24, 0xFE	; 254
     4de:	9f ef       	ldi	r25, 0xFF	; 255
	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
	rc = ptr - buf;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
     4e0:	0f 90       	pop	r0
     4e2:	0f 90       	pop	r0
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	1f 91       	pop	r17
     4ea:	0f 91       	pop	r16
     4ec:	08 95       	ret

000004ee <MQTTSerialize_disconnect>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
     4ee:	4e e0       	ldi	r20, 0x0E	; 14
     4f0:	d5 cf       	rjmp	.-86     	; 0x49c <MQTTSerialize_zero>
}
     4f2:	08 95       	ret

000004f4 <MQTTPacket_encode>:
		}
	}
	mqttstring->cstring = NULL;
	FUNC_EXIT_RC(rc);
	return rc;
}
     4f4:	dc 01       	movw	r26, r24
     4f6:	e0 e0       	ldi	r30, 0x00	; 0
     4f8:	f0 e0       	ldi	r31, 0x00	; 0
     4fa:	9b 01       	movw	r18, r22
     4fc:	2f 77       	andi	r18, 0x7F	; 127
     4fe:	30 78       	andi	r19, 0x80	; 128
     500:	33 23       	and	r19, r19
     502:	34 f4       	brge	.+12     	; 0x510 <MQTTPacket_encode+0x1c>
     504:	21 50       	subi	r18, 0x01	; 1
     506:	31 09       	sbc	r19, r1
     508:	20 68       	ori	r18, 0x80	; 128
     50a:	3f 6f       	ori	r19, 0xFF	; 255
     50c:	2f 5f       	subi	r18, 0xFF	; 255
     50e:	3f 4f       	sbci	r19, 0xFF	; 255
     510:	ab 01       	movw	r20, r22
     512:	77 23       	and	r23, r23
     514:	14 f4       	brge	.+4      	; 0x51a <MQTTPacket_encode+0x26>
     516:	41 58       	subi	r20, 0x81	; 129
     518:	5f 4f       	sbci	r21, 0xFF	; 255
     51a:	ba 01       	movw	r22, r20
     51c:	66 0f       	add	r22, r22
     51e:	67 2f       	mov	r22, r23
     520:	66 1f       	adc	r22, r22
     522:	77 0b       	sbc	r23, r23
     524:	16 16       	cp	r1, r22
     526:	17 06       	cpc	r1, r23
     528:	24 f4       	brge	.+8      	; 0x532 <MQTTPacket_encode+0x3e>
     52a:	31 96       	adiw	r30, 0x01	; 1
     52c:	20 68       	ori	r18, 0x80	; 128
     52e:	2d 93       	st	X+, r18
     530:	e4 cf       	rjmp	.-56     	; 0x4fa <MQTTPacket_encode+0x6>
     532:	dc 01       	movw	r26, r24
     534:	ae 0f       	add	r26, r30
     536:	bf 1f       	adc	r27, r31
     538:	2c 93       	st	X, r18
     53a:	cf 01       	movw	r24, r30
     53c:	01 96       	adiw	r24, 0x01	; 1
     53e:	08 95       	ret

00000540 <MQTTPacket_len>:
     540:	9c 01       	movw	r18, r24
     542:	2f 5f       	subi	r18, 0xFF	; 255
     544:	3f 4f       	sbci	r19, 0xFF	; 255
     546:	20 38       	cpi	r18, 0x80	; 128
     548:	31 05       	cpc	r19, r1
     54a:	14 f4       	brge	.+4      	; 0x550 <MQTTPacket_len+0x10>
     54c:	02 96       	adiw	r24, 0x02	; 2
     54e:	08 95       	ret
     550:	21 15       	cp	r18, r1
     552:	30 44       	sbci	r19, 0x40	; 64
     554:	14 f4       	brge	.+4      	; 0x55a <MQTTPacket_len+0x1a>
     556:	03 96       	adiw	r24, 0x03	; 3
     558:	08 95       	ret
     55a:	04 96       	adiw	r24, 0x04	; 4
     55c:	08 95       	ret

0000055e <writeChar>:
     55e:	fc 01       	movw	r30, r24
     560:	a0 81       	ld	r26, Z
     562:	b1 81       	ldd	r27, Z+1	; 0x01
     564:	6c 93       	st	X, r22
     566:	80 81       	ld	r24, Z
     568:	91 81       	ldd	r25, Z+1	; 0x01
     56a:	01 96       	adiw	r24, 0x01	; 1
     56c:	80 83       	st	Z, r24
     56e:	91 83       	std	Z+1, r25	; 0x01
     570:	08 95       	ret

00000572 <writeInt>:
     572:	fc 01       	movw	r30, r24
     574:	a0 81       	ld	r26, Z
     576:	b1 81       	ldd	r27, Z+1	; 0x01
     578:	cb 01       	movw	r24, r22
     57a:	77 23       	and	r23, r23
     57c:	14 f4       	brge	.+4      	; 0x582 <writeInt+0x10>
     57e:	81 50       	subi	r24, 0x01	; 1
     580:	9f 4f       	sbci	r25, 0xFF	; 255
     582:	9c 93       	st	X, r25
     584:	a0 81       	ld	r26, Z
     586:	b1 81       	ldd	r27, Z+1	; 0x01
     588:	cd 01       	movw	r24, r26
     58a:	01 96       	adiw	r24, 0x01	; 1
     58c:	80 83       	st	Z, r24
     58e:	91 83       	std	Z+1, r25	; 0x01
     590:	70 78       	andi	r23, 0x80	; 128
     592:	77 23       	and	r23, r23
     594:	2c f4       	brge	.+10     	; 0x5a0 <writeInt+0x2e>
     596:	61 50       	subi	r22, 0x01	; 1
     598:	71 09       	sbc	r23, r1
     59a:	7f 6f       	ori	r23, 0xFF	; 255
     59c:	6f 5f       	subi	r22, 0xFF	; 255
     59e:	7f 4f       	sbci	r23, 0xFF	; 255
     5a0:	11 96       	adiw	r26, 0x01	; 1
     5a2:	6c 93       	st	X, r22
     5a4:	80 81       	ld	r24, Z
     5a6:	91 81       	ldd	r25, Z+1	; 0x01
     5a8:	01 96       	adiw	r24, 0x01	; 1
     5aa:	80 83       	st	Z, r24
     5ac:	91 83       	std	Z+1, r25	; 0x01
     5ae:	08 95       	ret

000005b0 <writeCString>:
     5b0:	ef 92       	push	r14
     5b2:	ff 92       	push	r15
     5b4:	0f 93       	push	r16
     5b6:	1f 93       	push	r17
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	8c 01       	movw	r16, r24
     5be:	7b 01       	movw	r14, r22
     5c0:	eb 01       	movw	r28, r22
     5c2:	09 90       	ld	r0, Y+
     5c4:	00 20       	and	r0, r0
     5c6:	e9 f7       	brne	.-6      	; 0x5c2 <writeCString+0x12>
     5c8:	21 97       	sbiw	r28, 0x01	; 1
     5ca:	c6 1b       	sub	r28, r22
     5cc:	d7 0b       	sbc	r29, r23
     5ce:	be 01       	movw	r22, r28
     5d0:	d0 df       	rcall	.-96     	; 0x572 <writeInt>
     5d2:	ae 01       	movw	r20, r28
     5d4:	b7 01       	movw	r22, r14
     5d6:	f8 01       	movw	r30, r16
     5d8:	80 81       	ld	r24, Z
     5da:	91 81       	ldd	r25, Z+1	; 0x01
     5dc:	d5 d5       	rcall	.+2986   	; 0x1188 <memcpy>
     5de:	f8 01       	movw	r30, r16
     5e0:	80 81       	ld	r24, Z
     5e2:	91 81       	ldd	r25, Z+1	; 0x01
     5e4:	c8 0f       	add	r28, r24
     5e6:	d9 1f       	adc	r29, r25
     5e8:	c0 83       	st	Z, r28
     5ea:	d1 83       	std	Z+1, r29	; 0x01
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
     5f0:	1f 91       	pop	r17
     5f2:	0f 91       	pop	r16
     5f4:	ff 90       	pop	r15
     5f6:	ef 90       	pop	r14
     5f8:	08 95       	ret

000005fa <writeMQTTString>:
     5fa:	ef 92       	push	r14
     5fc:	ff 92       	push	r15
     5fe:	0f 93       	push	r16
     600:	1f 93       	push	r17
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	00 d0       	rcall	.+0      	; 0x608 <writeMQTTString+0xe>
     608:	00 d0       	rcall	.+0      	; 0x60a <writeMQTTString+0x10>
     60a:	cd b7       	in	r28, 0x3d	; 61
     60c:	de b7       	in	r29, 0x3e	; 62
     60e:	7c 01       	movw	r14, r24
     610:	29 83       	std	Y+1, r18	; 0x01
     612:	3a 83       	std	Y+2, r19	; 0x02
     614:	4b 83       	std	Y+3, r20	; 0x03
     616:	5c 83       	std	Y+4, r21	; 0x04
     618:	6d 83       	std	Y+5, r22	; 0x05
     61a:	7e 83       	std	Y+6, r23	; 0x06
     61c:	0b 81       	ldd	r16, Y+3	; 0x03
     61e:	1c 81       	ldd	r17, Y+4	; 0x04
     620:	10 16       	cp	r1, r16
     622:	11 06       	cpc	r1, r17
     624:	8c f4       	brge	.+34     	; 0x648 <writeMQTTString+0x4e>
     626:	b8 01       	movw	r22, r16
     628:	a4 df       	rcall	.-184    	; 0x572 <writeInt>
     62a:	6d 81       	ldd	r22, Y+5	; 0x05
     62c:	7e 81       	ldd	r23, Y+6	; 0x06
     62e:	a8 01       	movw	r20, r16
     630:	f7 01       	movw	r30, r14
     632:	80 81       	ld	r24, Z
     634:	91 81       	ldd	r25, Z+1	; 0x01
     636:	a8 d5       	rcall	.+2896   	; 0x1188 <memcpy>
     638:	f7 01       	movw	r30, r14
     63a:	80 81       	ld	r24, Z
     63c:	91 81       	ldd	r25, Z+1	; 0x01
     63e:	08 0f       	add	r16, r24
     640:	19 1f       	adc	r17, r25
     642:	00 83       	st	Z, r16
     644:	11 83       	std	Z+1, r17	; 0x01
     646:	0a c0       	rjmp	.+20     	; 0x65c <writeMQTTString+0x62>
     648:	69 81       	ldd	r22, Y+1	; 0x01
     64a:	7a 81       	ldd	r23, Y+2	; 0x02
     64c:	61 15       	cp	r22, r1
     64e:	71 05       	cpc	r23, r1
     650:	11 f0       	breq	.+4      	; 0x656 <writeMQTTString+0x5c>
     652:	ae df       	rcall	.-164    	; 0x5b0 <writeCString>
     654:	03 c0       	rjmp	.+6      	; 0x65c <writeMQTTString+0x62>
     656:	60 e0       	ldi	r22, 0x00	; 0
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	8b df       	rcall	.-234    	; 0x572 <writeInt>
     65c:	26 96       	adiw	r28, 0x06	; 6
     65e:	cd bf       	out	0x3d, r28	; 61
     660:	de bf       	out	0x3e, r29	; 62
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	1f 91       	pop	r17
     668:	0f 91       	pop	r16
     66a:	ff 90       	pop	r15
     66c:	ef 90       	pop	r14
     66e:	08 95       	ret

00000670 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
     674:	00 d0       	rcall	.+0      	; 0x676 <MQTTstrlen+0x6>
     676:	00 d0       	rcall	.+0      	; 0x678 <MQTTstrlen+0x8>
     678:	cd b7       	in	r28, 0x3d	; 61
     67a:	de b7       	in	r29, 0x3e	; 62
     67c:	49 83       	std	Y+1, r20	; 0x01
     67e:	5a 83       	std	Y+2, r21	; 0x02
     680:	6b 83       	std	Y+3, r22	; 0x03
     682:	7c 83       	std	Y+4, r23	; 0x04
     684:	8d 83       	std	Y+5, r24	; 0x05
     686:	9e 83       	std	Y+6, r25	; 0x06
     688:	a9 81       	ldd	r26, Y+1	; 0x01
     68a:	ba 81       	ldd	r27, Y+2	; 0x02
	int rc = 0;

	if (mqttstring.cstring)
     68c:	10 97       	sbiw	r26, 0x00	; 0
     68e:	49 f0       	breq	.+18     	; 0x6a2 <MQTTstrlen+0x32>
		rc = strlen(mqttstring.cstring);
     690:	fd 01       	movw	r30, r26
     692:	01 90       	ld	r0, Z+
     694:	00 20       	and	r0, r0
     696:	e9 f7       	brne	.-6      	; 0x692 <MQTTstrlen+0x22>
     698:	31 97       	sbiw	r30, 0x01	; 1
     69a:	cf 01       	movw	r24, r30
     69c:	8a 1b       	sub	r24, r26
     69e:	9b 0b       	sbc	r25, r27
     6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <MQTTstrlen+0x36>
	else
		rc = mqttstring.lenstring.len;
     6a2:	8b 81       	ldd	r24, Y+3	; 0x03
     6a4:	9c 81       	ldd	r25, Y+4	; 0x04
	return rc;
}
     6a6:	26 96       	adiw	r28, 0x06	; 6
     6a8:	cd bf       	out	0x3d, r28	; 61
     6aa:	de bf       	out	0x3e, r29	; 62
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	08 95       	ret

000006b2 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
     6b2:	ef 92       	push	r14
     6b4:	ff 92       	push	r15
     6b6:	0f 93       	push	r16
     6b8:	1f 93       	push	r17
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
     6be:	00 d0       	rcall	.+0      	; 0x6c0 <MQTTSerialize_publishLength+0xe>
     6c0:	00 d0       	rcall	.+0      	; 0x6c2 <MQTTSerialize_publishLength+0x10>
     6c2:	cd b7       	in	r28, 0x3d	; 61
     6c4:	de b7       	in	r29, 0x3e	; 62
     6c6:	7c 01       	movw	r14, r24
     6c8:	f4 2f       	mov	r31, r20
     6ca:	e5 2f       	mov	r30, r21
     6cc:	86 2f       	mov	r24, r22
     6ce:	97 2f       	mov	r25, r23
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
     6d0:	42 2f       	mov	r20, r18
     6d2:	53 2f       	mov	r21, r19
     6d4:	6f 2f       	mov	r22, r31
     6d6:	7e 2f       	mov	r23, r30
     6d8:	cb df       	rcall	.-106    	; 0x670 <MQTTstrlen>
     6da:	02 96       	adiw	r24, 0x02	; 2
     6dc:	80 0f       	add	r24, r16
     6de:	91 1f       	adc	r25, r17
	if (qos > 0)
     6e0:	1e 14       	cp	r1, r14
     6e2:	1f 04       	cpc	r1, r15
     6e4:	0c f4       	brge	.+2      	; 0x6e8 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
     6e6:	02 96       	adiw	r24, 0x02	; 2
	return len;
}
     6e8:	26 96       	adiw	r28, 0x06	; 6
     6ea:	cd bf       	out	0x3d, r28	; 61
     6ec:	de bf       	out	0x3e, r29	; 62
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	1f 91       	pop	r17
     6f4:	0f 91       	pop	r16
     6f6:	ff 90       	pop	r15
     6f8:	ef 90       	pop	r14
     6fa:	08 95       	ret

000006fc <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
     6fc:	2f 92       	push	r2
     6fe:	3f 92       	push	r3
     700:	4f 92       	push	r4
     702:	5f 92       	push	r5
     704:	6f 92       	push	r6
     706:	7f 92       	push	r7
     708:	8f 92       	push	r8
     70a:	9f 92       	push	r9
     70c:	af 92       	push	r10
     70e:	bf 92       	push	r11
     710:	cf 92       	push	r12
     712:	df 92       	push	r13
     714:	ef 92       	push	r14
     716:	ff 92       	push	r15
     718:	0f 93       	push	r16
     71a:	1f 93       	push	r17
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	cd b7       	in	r28, 0x3d	; 61
     722:	de b7       	in	r29, 0x3e	; 62
     724:	2a 97       	sbiw	r28, 0x0a	; 10
     726:	cd bf       	out	0x3d, r28	; 61
     728:	de bf       	out	0x3e, r29	; 62
     72a:	2c 01       	movw	r4, r24
     72c:	1b 01       	movw	r2, r22
     72e:	49 87       	std	Y+9, r20	; 0x09
     730:	39 01       	movw	r6, r18
     732:	0a 87       	std	Y+10, r16	; 0x0a
     734:	28 2d       	mov	r18, r8
     736:	8b 82       	std	Y+3, r8	; 0x03
     738:	39 2d       	mov	r19, r9
     73a:	9c 82       	std	Y+4, r9	; 0x04
     73c:	4a 2d       	mov	r20, r10
     73e:	ad 82       	std	Y+5, r10	; 0x05
     740:	5b 2d       	mov	r21, r11
     742:	be 82       	std	Y+6, r11	; 0x06
     744:	6c 2d       	mov	r22, r12
     746:	cf 82       	std	Y+7, r12	; 0x07
     748:	7d 2d       	mov	r23, r13
     74a:	d8 86       	std	Y+8, r13	; 0x08
     74c:	ca a0       	ldd	r12, Y+34	; 0x22
     74e:	db a0       	ldd	r13, Y+35	; 0x23
	unsigned char *ptr = buf;
     750:	89 83       	std	Y+1, r24	; 0x01
     752:	9a 83       	std	Y+2, r25	; 0x02
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
     754:	86 01       	movw	r16, r12
     756:	c3 01       	movw	r24, r6
     758:	ac df       	rcall	.-168    	; 0x6b2 <MQTTSerialize_publishLength>
     75a:	8c 01       	movw	r16, r24
     75c:	f1 de       	rcall	.-542    	; 0x540 <MQTTPacket_len>
     75e:	28 16       	cp	r2, r24
     760:	39 06       	cpc	r3, r25
     762:	b4 f1       	brlt	.+108    	; 0x7d0 <MQTTSerialize_publish+0xd4>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
     764:	60 e3       	ldi	r22, 0x30	; 48
	header.bits.dup = dup;
     766:	89 85       	ldd	r24, Y+9	; 0x09
     768:	80 fb       	bst	r24, 0
     76a:	63 f9       	bld	r22, 3
	header.bits.qos = qos;
     76c:	86 2d       	mov	r24, r6
     76e:	83 70       	andi	r24, 0x03	; 3
     770:	88 0f       	add	r24, r24
     772:	69 7f       	andi	r22, 0xF9	; 249
     774:	68 2b       	or	r22, r24
	header.bits.retain = retained;
     776:	8a 85       	ldd	r24, Y+10	; 0x0a
     778:	80 fb       	bst	r24, 0
	writeChar(&ptr, header.byte); /* write header */
     77a:	60 f9       	bld	r22, 0
     77c:	ce 01       	movw	r24, r28

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
     77e:	01 96       	adiw	r24, 0x01	; 1
     780:	ee de       	rcall	.-548    	; 0x55e <writeChar>
     782:	b8 01       	movw	r22, r16
     784:	89 81       	ldd	r24, Y+1	; 0x01
     786:	9a 81       	ldd	r25, Y+2	; 0x02
     788:	b5 de       	rcall	.-662    	; 0x4f4 <MQTTPacket_encode>
     78a:	29 81       	ldd	r18, Y+1	; 0x01
     78c:	3a 81       	ldd	r19, Y+2	; 0x02
     78e:	82 0f       	add	r24, r18
     790:	93 1f       	adc	r25, r19

	writeMQTTString(&ptr, topicName);
     792:	89 83       	std	Y+1, r24	; 0x01
     794:	9a 83       	std	Y+2, r25	; 0x02
     796:	2b 81       	ldd	r18, Y+3	; 0x03
     798:	3c 81       	ldd	r19, Y+4	; 0x04
     79a:	4d 81       	ldd	r20, Y+5	; 0x05
     79c:	5e 81       	ldd	r21, Y+6	; 0x06
     79e:	6f 81       	ldd	r22, Y+7	; 0x07
     7a0:	78 85       	ldd	r23, Y+8	; 0x08
     7a2:	ce 01       	movw	r24, r28

	if (qos > 0)
     7a4:	01 96       	adiw	r24, 0x01	; 1
     7a6:	29 df       	rcall	.-430    	; 0x5fa <writeMQTTString>
		writeInt(&ptr, packetid);
     7a8:	16 14       	cp	r1, r6
     7aa:	17 04       	cpc	r1, r7
     7ac:	24 f4       	brge	.+8      	; 0x7b6 <MQTTSerialize_publish+0xba>
     7ae:	b7 01       	movw	r22, r14

	memcpy(ptr, payload, payloadlen);
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	de de       	rcall	.-580    	; 0x572 <writeInt>
     7b6:	a6 01       	movw	r20, r12
     7b8:	68 a1       	ldd	r22, Y+32	; 0x20
     7ba:	79 a1       	ldd	r23, Y+33	; 0x21
     7bc:	89 81       	ldd	r24, Y+1	; 0x01
	ptr += payloadlen;

	rc = ptr - buf;
     7be:	9a 81       	ldd	r25, Y+2	; 0x02
     7c0:	e3 d4       	rcall	.+2502   	; 0x1188 <memcpy>
     7c2:	89 81       	ldd	r24, Y+1	; 0x01
     7c4:	9a 81       	ldd	r25, Y+2	; 0x02
     7c6:	8c 0d       	add	r24, r12
     7c8:	9d 1d       	adc	r25, r13
     7ca:	84 19       	sub	r24, r4
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
     7cc:	95 09       	sbc	r25, r5
     7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <MQTTSerialize_publish+0xd8>
	rc = ptr - buf;

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
     7d0:	8e ef       	ldi	r24, 0xFE	; 254
     7d2:	9f ef       	ldi	r25, 0xFF	; 255
     7d4:	2a 96       	adiw	r28, 0x0a	; 10
     7d6:	cd bf       	out	0x3d, r28	; 61
     7d8:	de bf       	out	0x3e, r29	; 62
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	1f 91       	pop	r17
     7e0:	0f 91       	pop	r16
     7e2:	ff 90       	pop	r15
     7e4:	ef 90       	pop	r14
     7e6:	df 90       	pop	r13
     7e8:	cf 90       	pop	r12
     7ea:	bf 90       	pop	r11
     7ec:	af 90       	pop	r10
     7ee:	9f 90       	pop	r9
     7f0:	8f 90       	pop	r8
     7f2:	7f 90       	pop	r7
     7f4:	6f 90       	pop	r6
     7f6:	5f 90       	pop	r5
     7f8:	4f 90       	pop	r4
     7fa:	3f 90       	pop	r3
     7fc:	2f 90       	pop	r2
     7fe:	08 95       	ret

00000800 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     800:	8f ef       	ldi	r24, 0xFF	; 255
     802:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     806:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     80a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     80e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     812:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     816:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     81a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
     81e:	08 95       	ret

00000820 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	1f 92       	push	r1
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     82a:	9f b7       	in	r25, 0x3f	; 63
     82c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     82e:	f8 94       	cli
	return flags;
     830:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     832:	e8 2f       	mov	r30, r24
     834:	f0 e0       	ldi	r31, 0x00	; 0
     836:	e0 59       	subi	r30, 0x90	; 144
     838:	ff 4f       	sbci	r31, 0xFF	; 255
     83a:	60 95       	com	r22
     83c:	80 81       	ld	r24, Z
     83e:	68 23       	and	r22, r24
     840:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     842:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     844:	0f 90       	pop	r0
     846:	df 91       	pop	r29
     848:	cf 91       	pop	r28
     84a:	08 95       	ret

0000084c <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     84c:	cf 93       	push	r28
     84e:	df 93       	push	r29
     850:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     856:	c6 2f       	mov	r28, r22
     858:	d0 e0       	ldi	r29, 0x00	; 0
     85a:	de 01       	movw	r26, r28
     85c:	02 2e       	mov	r0, r18
     85e:	02 c0       	rjmp	.+4      	; 0x864 <ioport_configure_port_pin+0x18>
     860:	b5 95       	asr	r27
     862:	a7 95       	ror	r26
     864:	0a 94       	dec	r0
     866:	e2 f7       	brpl	.-8      	; 0x860 <ioport_configure_port_pin+0x14>
     868:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     86a:	50 8b       	std	Z+16, r21	; 0x10
     86c:	2f 5f       	subi	r18, 0xFF	; 255
     86e:	3f 4f       	sbci	r19, 0xFF	; 255
     870:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     872:	28 30       	cpi	r18, 0x08	; 8
     874:	31 05       	cpc	r19, r1
     876:	89 f7       	brne	.-30     	; 0x85a <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     878:	40 ff       	sbrs	r20, 0
     87a:	0a c0       	rjmp	.+20     	; 0x890 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
     87c:	41 ff       	sbrs	r20, 1
     87e:	03 c0       	rjmp	.+6      	; 0x886 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     880:	fc 01       	movw	r30, r24
     882:	65 83       	std	Z+5, r22	; 0x05
     884:	02 c0       	rjmp	.+4      	; 0x88a <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     886:	fc 01       	movw	r30, r24
     888:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     88a:	fc 01       	movw	r30, r24
     88c:	61 83       	std	Z+1, r22	; 0x01
     88e:	02 c0       	rjmp	.+4      	; 0x894 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     890:	fc 01       	movw	r30, r24
     892:	62 83       	std	Z+2, r22	; 0x02
	}
}
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	08 95       	ret

0000089a <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     89a:	43 e0       	ldi	r20, 0x03	; 3
     89c:	50 e0       	ldi	r21, 0x00	; 0
     89e:	68 e0       	ldi	r22, 0x08	; 8
     8a0:	80 ec       	ldi	r24, 0xC0	; 192
     8a2:	97 e0       	ldi	r25, 0x07	; 7
     8a4:	d3 df       	rcall	.-90     	; 0x84c <ioport_configure_port_pin>
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	58 e1       	ldi	r21, 0x18	; 24
     8aa:	64 e0       	ldi	r22, 0x04	; 4
     8ac:	80 ec       	ldi	r24, 0xC0	; 192
     8ae:	97 e0       	ldi	r25, 0x07	; 7
     8b0:	cd df       	rcall	.-102    	; 0x84c <ioport_configure_port_pin>
     8b2:	43 e0       	ldi	r20, 0x03	; 3
     8b4:	50 e0       	ldi	r21, 0x00	; 0
     8b6:	68 e0       	ldi	r22, 0x08	; 8
     8b8:	80 e8       	ldi	r24, 0x80	; 128
     8ba:	96 e0       	ldi	r25, 0x06	; 6
     8bc:	c7 df       	rcall	.-114    	; 0x84c <ioport_configure_port_pin>
     8be:	40 e0       	ldi	r20, 0x00	; 0
     8c0:	50 e0       	ldi	r21, 0x00	; 0
     8c2:	64 e0       	ldi	r22, 0x04	; 4
     8c4:	80 e8       	ldi	r24, 0x80	; 128
     8c6:	96 e0       	ldi	r25, 0x06	; 6
     8c8:	c1 df       	rcall	.-126    	; 0x84c <ioport_configure_port_pin>
     8ca:	43 e0       	ldi	r20, 0x03	; 3
     8cc:	50 e0       	ldi	r21, 0x00	; 0
     8ce:	68 e0       	ldi	r22, 0x08	; 8
     8d0:	80 e4       	ldi	r24, 0x40	; 64
     8d2:	96 e0       	ldi	r25, 0x06	; 6
     8d4:	bb df       	rcall	.-138    	; 0x84c <ioport_configure_port_pin>
     8d6:	40 e0       	ldi	r20, 0x00	; 0
     8d8:	50 e0       	ldi	r21, 0x00	; 0
     8da:	64 e0       	ldi	r22, 0x04	; 4
     8dc:	80 e4       	ldi	r24, 0x40	; 64
     8de:	96 e0       	ldi	r25, 0x06	; 6
     8e0:	b5 cf       	rjmp	.-150    	; 0x84c <ioport_configure_port_pin>
     8e2:	08 95       	ret

000008e4 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     8e4:	fc 01       	movw	r30, r24
     8e6:	91 81       	ldd	r25, Z+1	; 0x01
     8e8:	95 ff       	sbrs	r25, 5
     8ea:	fd cf       	rjmp	.-6      	; 0x8e6 <usart_putchar+0x2>
     8ec:	60 83       	st	Z, r22
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	08 95       	ret

000008f4 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     8f4:	4f 92       	push	r4
     8f6:	5f 92       	push	r5
     8f8:	6f 92       	push	r6
     8fa:	7f 92       	push	r7
     8fc:	8f 92       	push	r8
     8fe:	9f 92       	push	r9
     900:	af 92       	push	r10
     902:	bf 92       	push	r11
     904:	ef 92       	push	r14
     906:	ff 92       	push	r15
     908:	0f 93       	push	r16
     90a:	1f 93       	push	r17
     90c:	cf 93       	push	r28
     90e:	7c 01       	movw	r14, r24
     910:	4a 01       	movw	r8, r20
     912:	5b 01       	movw	r10, r22
     914:	28 01       	movw	r4, r16
     916:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     918:	fc 01       	movw	r30, r24
     91a:	84 81       	ldd	r24, Z+4	; 0x04
     91c:	82 ff       	sbrs	r24, 2
     91e:	16 c0       	rjmp	.+44     	; 0x94c <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     920:	d9 01       	movw	r26, r18
     922:	c8 01       	movw	r24, r16
     924:	68 94       	set
     926:	12 f8       	bld	r1, 2
     928:	b6 95       	lsr	r27
     92a:	a7 95       	ror	r26
     92c:	97 95       	ror	r25
     92e:	87 95       	ror	r24
     930:	16 94       	lsr	r1
     932:	d1 f7       	brne	.-12     	; 0x928 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     934:	b9 01       	movw	r22, r18
     936:	a8 01       	movw	r20, r16
     938:	03 2e       	mov	r0, r19
     93a:	36 e1       	ldi	r19, 0x16	; 22
     93c:	76 95       	lsr	r23
     93e:	67 95       	ror	r22
     940:	57 95       	ror	r21
     942:	47 95       	ror	r20
     944:	3a 95       	dec	r19
     946:	d1 f7       	brne	.-12     	; 0x93c <usart_set_baudrate+0x48>
     948:	30 2d       	mov	r19, r0
     94a:	15 c0       	rjmp	.+42     	; 0x976 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     94c:	d9 01       	movw	r26, r18
     94e:	c8 01       	movw	r24, r16
     950:	68 94       	set
     952:	13 f8       	bld	r1, 3
     954:	b6 95       	lsr	r27
     956:	a7 95       	ror	r26
     958:	97 95       	ror	r25
     95a:	87 95       	ror	r24
     95c:	16 94       	lsr	r1
     95e:	d1 f7       	brne	.-12     	; 0x954 <usart_set_baudrate+0x60>
		min_rate /= 2;
     960:	b9 01       	movw	r22, r18
     962:	a8 01       	movw	r20, r16
     964:	03 2e       	mov	r0, r19
     966:	37 e1       	ldi	r19, 0x17	; 23
     968:	76 95       	lsr	r23
     96a:	67 95       	ror	r22
     96c:	57 95       	ror	r21
     96e:	47 95       	ror	r20
     970:	3a 95       	dec	r19
     972:	d1 f7       	brne	.-12     	; 0x968 <usart_set_baudrate+0x74>
     974:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     976:	88 15       	cp	r24, r8
     978:	99 05       	cpc	r25, r9
     97a:	aa 05       	cpc	r26, r10
     97c:	bb 05       	cpc	r27, r11
     97e:	08 f4       	brcc	.+2      	; 0x982 <usart_set_baudrate+0x8e>
     980:	a2 c0       	rjmp	.+324    	; 0xac6 <usart_set_baudrate+0x1d2>
     982:	84 16       	cp	r8, r20
     984:	95 06       	cpc	r9, r21
     986:	a6 06       	cpc	r10, r22
     988:	b7 06       	cpc	r11, r23
     98a:	08 f4       	brcc	.+2      	; 0x98e <usart_set_baudrate+0x9a>
     98c:	9e c0       	rjmp	.+316    	; 0xaca <usart_set_baudrate+0x1d6>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     98e:	f7 01       	movw	r30, r14
     990:	84 81       	ldd	r24, Z+4	; 0x04
     992:	82 fd       	sbrc	r24, 2
     994:	04 c0       	rjmp	.+8      	; 0x99e <usart_set_baudrate+0xaa>
		baud *= 2;
     996:	88 0c       	add	r8, r8
     998:	99 1c       	adc	r9, r9
     99a:	aa 1c       	adc	r10, r10
     99c:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     99e:	c3 01       	movw	r24, r6
     9a0:	b2 01       	movw	r22, r4
     9a2:	a5 01       	movw	r20, r10
     9a4:	94 01       	movw	r18, r8
     9a6:	b1 d3       	rcall	.+1890   	; 0x110a <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     9a8:	2f 3f       	cpi	r18, 0xFF	; 255
     9aa:	31 05       	cpc	r19, r1
     9ac:	41 05       	cpc	r20, r1
     9ae:	51 05       	cpc	r21, r1
     9b0:	08 f4       	brcc	.+2      	; 0x9b4 <usart_set_baudrate+0xc0>
     9b2:	8d c0       	rjmp	.+282    	; 0xace <usart_set_baudrate+0x1da>
     9b4:	8f ef       	ldi	r24, 0xFF	; 255
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	a0 e0       	ldi	r26, 0x00	; 0
     9ba:	b0 e0       	ldi	r27, 0x00	; 0
     9bc:	c9 ef       	ldi	r28, 0xF9	; 249
     9be:	05 c0       	rjmp	.+10     	; 0x9ca <usart_set_baudrate+0xd6>
     9c0:	28 17       	cp	r18, r24
     9c2:	39 07       	cpc	r19, r25
     9c4:	4a 07       	cpc	r20, r26
     9c6:	5b 07       	cpc	r21, r27
     9c8:	58 f0       	brcs	.+22     	; 0x9e0 <usart_set_baudrate+0xec>
			break;
		}

		limit <<= 1;
     9ca:	88 0f       	add	r24, r24
     9cc:	99 1f       	adc	r25, r25
     9ce:	aa 1f       	adc	r26, r26
     9d0:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     9d2:	cd 3f       	cpi	r28, 0xFD	; 253
     9d4:	0c f4       	brge	.+2      	; 0x9d8 <usart_set_baudrate+0xe4>
			limit |= 1;
     9d6:	81 60       	ori	r24, 0x01	; 1
     9d8:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     9da:	c7 30       	cpi	r28, 0x07	; 7
     9dc:	89 f7       	brne	.-30     	; 0x9c0 <usart_set_baudrate+0xcc>
     9de:	4d c0       	rjmp	.+154    	; 0xa7a <usart_set_baudrate+0x186>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     9e0:	cc 23       	and	r28, r28
     9e2:	0c f0       	brlt	.+2      	; 0x9e6 <usart_set_baudrate+0xf2>
     9e4:	4a c0       	rjmp	.+148    	; 0xa7a <usart_set_baudrate+0x186>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     9e6:	d5 01       	movw	r26, r10
     9e8:	c4 01       	movw	r24, r8
     9ea:	88 0f       	add	r24, r24
     9ec:	99 1f       	adc	r25, r25
     9ee:	aa 1f       	adc	r26, r26
     9f0:	bb 1f       	adc	r27, r27
     9f2:	88 0f       	add	r24, r24
     9f4:	99 1f       	adc	r25, r25
     9f6:	aa 1f       	adc	r26, r26
     9f8:	bb 1f       	adc	r27, r27
     9fa:	88 0f       	add	r24, r24
     9fc:	99 1f       	adc	r25, r25
     9fe:	aa 1f       	adc	r26, r26
     a00:	bb 1f       	adc	r27, r27
     a02:	48 1a       	sub	r4, r24
     a04:	59 0a       	sbc	r5, r25
     a06:	6a 0a       	sbc	r6, r26
     a08:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     a0a:	ce 3f       	cpi	r28, 0xFE	; 254
     a0c:	ec f4       	brge	.+58     	; 0xa48 <usart_set_baudrate+0x154>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     a0e:	8d ef       	ldi	r24, 0xFD	; 253
     a10:	9f ef       	ldi	r25, 0xFF	; 255
     a12:	8c 1b       	sub	r24, r28
     a14:	91 09       	sbc	r25, r1
     a16:	c7 fd       	sbrc	r28, 7
     a18:	93 95       	inc	r25
     a1a:	04 c0       	rjmp	.+8      	; 0xa24 <usart_set_baudrate+0x130>
     a1c:	44 0c       	add	r4, r4
     a1e:	55 1c       	adc	r5, r5
     a20:	66 1c       	adc	r6, r6
     a22:	77 1c       	adc	r7, r7
     a24:	8a 95       	dec	r24
     a26:	d2 f7       	brpl	.-12     	; 0xa1c <usart_set_baudrate+0x128>
     a28:	d5 01       	movw	r26, r10
     a2a:	c4 01       	movw	r24, r8
     a2c:	b6 95       	lsr	r27
     a2e:	a7 95       	ror	r26
     a30:	97 95       	ror	r25
     a32:	87 95       	ror	r24
     a34:	bc 01       	movw	r22, r24
     a36:	cd 01       	movw	r24, r26
     a38:	64 0d       	add	r22, r4
     a3a:	75 1d       	adc	r23, r5
     a3c:	86 1d       	adc	r24, r6
     a3e:	97 1d       	adc	r25, r7
     a40:	a5 01       	movw	r20, r10
     a42:	94 01       	movw	r18, r8
     a44:	62 d3       	rcall	.+1732   	; 0x110a <__udivmodsi4>
     a46:	35 c0       	rjmp	.+106    	; 0xab2 <usart_set_baudrate+0x1be>
		} else {
			baud <<= exp + 3;
     a48:	83 e0       	ldi	r24, 0x03	; 3
     a4a:	8c 0f       	add	r24, r28
     a4c:	a5 01       	movw	r20, r10
     a4e:	94 01       	movw	r18, r8
     a50:	04 c0       	rjmp	.+8      	; 0xa5a <usart_set_baudrate+0x166>
     a52:	22 0f       	add	r18, r18
     a54:	33 1f       	adc	r19, r19
     a56:	44 1f       	adc	r20, r20
     a58:	55 1f       	adc	r21, r21
     a5a:	8a 95       	dec	r24
     a5c:	d2 f7       	brpl	.-12     	; 0xa52 <usart_set_baudrate+0x15e>
			div = (cpu_hz + baud / 2) / baud;
     a5e:	da 01       	movw	r26, r20
     a60:	c9 01       	movw	r24, r18
     a62:	b6 95       	lsr	r27
     a64:	a7 95       	ror	r26
     a66:	97 95       	ror	r25
     a68:	87 95       	ror	r24
     a6a:	bc 01       	movw	r22, r24
     a6c:	cd 01       	movw	r24, r26
     a6e:	64 0d       	add	r22, r4
     a70:	75 1d       	adc	r23, r5
     a72:	86 1d       	adc	r24, r6
     a74:	97 1d       	adc	r25, r7
     a76:	49 d3       	rcall	.+1682   	; 0x110a <__udivmodsi4>
     a78:	1c c0       	rjmp	.+56     	; 0xab2 <usart_set_baudrate+0x1be>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     a7a:	83 e0       	ldi	r24, 0x03	; 3
     a7c:	8c 0f       	add	r24, r28
     a7e:	a5 01       	movw	r20, r10
     a80:	94 01       	movw	r18, r8
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <usart_set_baudrate+0x198>
     a84:	22 0f       	add	r18, r18
     a86:	33 1f       	adc	r19, r19
     a88:	44 1f       	adc	r20, r20
     a8a:	55 1f       	adc	r21, r21
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <usart_set_baudrate+0x190>
		div = (cpu_hz + baud / 2) / baud - 1;
     a90:	da 01       	movw	r26, r20
     a92:	c9 01       	movw	r24, r18
     a94:	b6 95       	lsr	r27
     a96:	a7 95       	ror	r26
     a98:	97 95       	ror	r25
     a9a:	87 95       	ror	r24
     a9c:	bc 01       	movw	r22, r24
     a9e:	cd 01       	movw	r24, r26
     aa0:	64 0d       	add	r22, r4
     aa2:	75 1d       	adc	r23, r5
     aa4:	86 1d       	adc	r24, r6
     aa6:	97 1d       	adc	r25, r7
     aa8:	30 d3       	rcall	.+1632   	; 0x110a <__udivmodsi4>
     aaa:	21 50       	subi	r18, 0x01	; 1
     aac:	31 09       	sbc	r19, r1
     aae:	41 09       	sbc	r20, r1
     ab0:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     ab2:	83 2f       	mov	r24, r19
     ab4:	8f 70       	andi	r24, 0x0F	; 15
     ab6:	c2 95       	swap	r28
     ab8:	c0 7f       	andi	r28, 0xF0	; 240
     aba:	c8 2b       	or	r28, r24
     abc:	f7 01       	movw	r30, r14
     abe:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     ac0:	26 83       	std	Z+6, r18	; 0x06

	return true;
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	18 c0       	rjmp	.+48     	; 0xaf6 <usart_set_baudrate+0x202>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	16 c0       	rjmp	.+44     	; 0xaf6 <usart_set_baudrate+0x202>
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	14 c0       	rjmp	.+40     	; 0xaf6 <usart_set_baudrate+0x202>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     ace:	d5 01       	movw	r26, r10
     ad0:	c4 01       	movw	r24, r8
     ad2:	88 0f       	add	r24, r24
     ad4:	99 1f       	adc	r25, r25
     ad6:	aa 1f       	adc	r26, r26
     ad8:	bb 1f       	adc	r27, r27
     ada:	88 0f       	add	r24, r24
     adc:	99 1f       	adc	r25, r25
     ade:	aa 1f       	adc	r26, r26
     ae0:	bb 1f       	adc	r27, r27
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	48 1a       	sub	r4, r24
     aec:	59 0a       	sbc	r5, r25
     aee:	6a 0a       	sbc	r6, r26
     af0:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     af2:	c9 ef       	ldi	r28, 0xF9	; 249
     af4:	8c cf       	rjmp	.-232    	; 0xa0e <usart_set_baudrate+0x11a>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     af6:	cf 91       	pop	r28
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
     afc:	ff 90       	pop	r15
     afe:	ef 90       	pop	r14
     b00:	bf 90       	pop	r11
     b02:	af 90       	pop	r10
     b04:	9f 90       	pop	r9
     b06:	8f 90       	pop	r8
     b08:	7f 90       	pop	r7
     b0a:	6f 90       	pop	r6
     b0c:	5f 90       	pop	r5
     b0e:	4f 90       	pop	r4
     b10:	08 95       	ret

00000b12 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     b12:	0f 93       	push	r16
     b14:	1f 93       	push	r17
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
     b1a:	ec 01       	movw	r28, r24
     b1c:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     b1e:	00 97       	sbiw	r24, 0x00	; 0
     b20:	09 f4       	brne	.+2      	; 0xb24 <usart_init_rs232+0x12>
     b22:	36 c1       	rjmp	.+620    	; 0xd90 <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     b24:	80 3c       	cpi	r24, 0xC0	; 192
     b26:	91 05       	cpc	r25, r1
     b28:	21 f4       	brne	.+8      	; 0xb32 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     b2a:	60 e1       	ldi	r22, 0x10	; 16
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	78 de       	rcall	.-784    	; 0x820 <sysclk_enable_module>
     b30:	2f c1       	rjmp	.+606    	; 0xd90 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
     b32:	c0 34       	cpi	r28, 0x40	; 64
     b34:	84 e0       	ldi	r24, 0x04	; 4
     b36:	d8 07       	cpc	r29, r24
     b38:	21 f4       	brne	.+8      	; 0xb42 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
     b3a:	68 e0       	ldi	r22, 0x08	; 8
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	70 de       	rcall	.-800    	; 0x820 <sysclk_enable_module>
     b40:	27 c1       	rjmp	.+590    	; 0xd90 <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     b42:	c1 15       	cp	r28, r1
     b44:	e4 e0       	ldi	r30, 0x04	; 4
     b46:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     b48:	21 f4       	brne	.+8      	; 0xb52 <usart_init_rs232+0x40>
     b4a:	64 e0       	ldi	r22, 0x04	; 4
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	68 de       	rcall	.-816    	; 0x820 <sysclk_enable_module>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     b50:	1f c1       	rjmp	.+574    	; 0xd90 <usart_init_rs232+0x27e>
     b52:	c0 38       	cpi	r28, 0x80	; 128
     b54:	f1 e0       	ldi	r31, 0x01	; 1
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     b56:	df 07       	cpc	r29, r31
     b58:	21 f4       	brne	.+8      	; 0xb62 <usart_init_rs232+0x50>
     b5a:	62 e0       	ldi	r22, 0x02	; 2
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	60 de       	rcall	.-832    	; 0x820 <sysclk_enable_module>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     b60:	17 c1       	rjmp	.+558    	; 0xd90 <usart_init_rs232+0x27e>
     b62:	c1 15       	cp	r28, r1
     b64:	81 e0       	ldi	r24, 0x01	; 1
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     b66:	d8 07       	cpc	r29, r24
     b68:	21 f4       	brne	.+8      	; 0xb72 <usart_init_rs232+0x60>
     b6a:	61 e0       	ldi	r22, 0x01	; 1
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	58 de       	rcall	.-848    	; 0x820 <sysclk_enable_module>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     b70:	0f c1       	rjmp	.+542    	; 0xd90 <usart_init_rs232+0x27e>
     b72:	c0 38       	cpi	r28, 0x80	; 128
     b74:	e3 e0       	ldi	r30, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     b76:	de 07       	cpc	r29, r30
     b78:	21 f4       	brne	.+8      	; 0xb82 <usart_init_rs232+0x70>
     b7a:	61 e0       	ldi	r22, 0x01	; 1
     b7c:	81 e0       	ldi	r24, 0x01	; 1
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     b7e:	50 de       	rcall	.-864    	; 0x820 <sysclk_enable_module>
     b80:	07 c1       	rjmp	.+526    	; 0xd90 <usart_init_rs232+0x27e>
     b82:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     b84:	f3 e0       	ldi	r31, 0x03	; 3
     b86:	df 07       	cpc	r29, r31
     b88:	21 f4       	brne	.+8      	; 0xb92 <usart_init_rs232+0x80>
     b8a:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     b8c:	82 e0       	ldi	r24, 0x02	; 2
     b8e:	48 de       	rcall	.-880    	; 0x820 <sysclk_enable_module>
     b90:	ff c0       	rjmp	.+510    	; 0xd90 <usart_init_rs232+0x27e>
     b92:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     b94:	82 e0       	ldi	r24, 0x02	; 2
     b96:	d8 07       	cpc	r29, r24
     b98:	21 f4       	brne	.+8      	; 0xba2 <usart_init_rs232+0x90>
     b9a:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	40 de       	rcall	.-896    	; 0x820 <sysclk_enable_module>
     ba0:	f7 c0       	rjmp	.+494    	; 0xd90 <usart_init_rs232+0x27e>
     ba2:	c0 34       	cpi	r28, 0x40	; 64
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     ba4:	e2 e0       	ldi	r30, 0x02	; 2
     ba6:	de 07       	cpc	r29, r30
     ba8:	21 f4       	brne	.+8      	; 0xbb2 <usart_init_rs232+0xa0>
     baa:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
     bac:	82 e0       	ldi	r24, 0x02	; 2
     bae:	38 de       	rcall	.-912    	; 0x820 <sysclk_enable_module>
     bb0:	ef c0       	rjmp	.+478    	; 0xd90 <usart_init_rs232+0x27e>
     bb2:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
     bb4:	f3 e0       	ldi	r31, 0x03	; 3
     bb6:	df 07       	cpc	r29, r31
     bb8:	21 f4       	brne	.+8      	; 0xbc2 <usart_init_rs232+0xb0>
     bba:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	30 de       	rcall	.-928    	; 0x820 <sysclk_enable_module>
     bc0:	e7 c0       	rjmp	.+462    	; 0xd90 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     bc2:	c0 32       	cpi	r28, 0x20	; 32
     bc4:	83 e0       	ldi	r24, 0x03	; 3
     bc6:	d8 07       	cpc	r29, r24
     bc8:	21 f4       	brne	.+8      	; 0xbd2 <usart_init_rs232+0xc0>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     bca:	64 e0       	ldi	r22, 0x04	; 4
     bcc:	82 e0       	ldi	r24, 0x02	; 2
     bce:	28 de       	rcall	.-944    	; 0x820 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     bd0:	df c0       	rjmp	.+446    	; 0xd90 <usart_init_rs232+0x27e>
     bd2:	c1 15       	cp	r28, r1
     bd4:	e8 e0       	ldi	r30, 0x08	; 8
     bd6:	de 07       	cpc	r29, r30
     bd8:	21 f4       	brne	.+8      	; 0xbe2 <usart_init_rs232+0xd0>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     bda:	61 e0       	ldi	r22, 0x01	; 1
     bdc:	83 e0       	ldi	r24, 0x03	; 3
     bde:	20 de       	rcall	.-960    	; 0x820 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     be0:	d7 c0       	rjmp	.+430    	; 0xd90 <usart_init_rs232+0x27e>
     be2:	c1 15       	cp	r28, r1
     be4:	f9 e0       	ldi	r31, 0x09	; 9
     be6:	df 07       	cpc	r29, r31
     be8:	21 f4       	brne	.+8      	; 0xbf2 <usart_init_rs232+0xe0>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     bea:	61 e0       	ldi	r22, 0x01	; 1
     bec:	84 e0       	ldi	r24, 0x04	; 4
     bee:	18 de       	rcall	.-976    	; 0x820 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     bf0:	cf c0       	rjmp	.+414    	; 0xd90 <usart_init_rs232+0x27e>
     bf2:	c1 15       	cp	r28, r1
     bf4:	8a e0       	ldi	r24, 0x0A	; 10
     bf6:	d8 07       	cpc	r29, r24
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     bf8:	21 f4       	brne	.+8      	; 0xc02 <usart_init_rs232+0xf0>
     bfa:	61 e0       	ldi	r22, 0x01	; 1
     bfc:	85 e0       	ldi	r24, 0x05	; 5
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     bfe:	10 de       	rcall	.-992    	; 0x820 <sysclk_enable_module>
     c00:	c7 c0       	rjmp	.+398    	; 0xd90 <usart_init_rs232+0x27e>
     c02:	c1 15       	cp	r28, r1
     c04:	eb e0       	ldi	r30, 0x0B	; 11
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     c06:	de 07       	cpc	r29, r30
     c08:	21 f4       	brne	.+8      	; 0xc12 <usart_init_rs232+0x100>
     c0a:	61 e0       	ldi	r22, 0x01	; 1
     c0c:	86 e0       	ldi	r24, 0x06	; 6
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     c0e:	08 de       	rcall	.-1008   	; 0x820 <sysclk_enable_module>
     c10:	bf c0       	rjmp	.+382    	; 0xd90 <usart_init_rs232+0x27e>
     c12:	c0 34       	cpi	r28, 0x40	; 64
     c14:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     c16:	df 07       	cpc	r29, r31
     c18:	21 f4       	brne	.+8      	; 0xc22 <usart_init_rs232+0x110>
     c1a:	62 e0       	ldi	r22, 0x02	; 2
     c1c:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     c1e:	00 de       	rcall	.-1024   	; 0x820 <sysclk_enable_module>
     c20:	b7 c0       	rjmp	.+366    	; 0xd90 <usart_init_rs232+0x27e>
     c22:	c0 34       	cpi	r28, 0x40	; 64
     c24:	89 e0       	ldi	r24, 0x09	; 9
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     c26:	d8 07       	cpc	r29, r24
     c28:	21 f4       	brne	.+8      	; 0xc32 <usart_init_rs232+0x120>
     c2a:	62 e0       	ldi	r22, 0x02	; 2
     c2c:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     c2e:	f8 dd       	rcall	.-1040   	; 0x820 <sysclk_enable_module>
     c30:	af c0       	rjmp	.+350    	; 0xd90 <usart_init_rs232+0x27e>
     c32:	c0 34       	cpi	r28, 0x40	; 64
     c34:	ea e0       	ldi	r30, 0x0A	; 10
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
     c36:	de 07       	cpc	r29, r30
     c38:	21 f4       	brne	.+8      	; 0xc42 <usart_init_rs232+0x130>
     c3a:	62 e0       	ldi	r22, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
     c3c:	85 e0       	ldi	r24, 0x05	; 5
     c3e:	f0 dd       	rcall	.-1056   	; 0x820 <sysclk_enable_module>
     c40:	a7 c0       	rjmp	.+334    	; 0xd90 <usart_init_rs232+0x27e>
     c42:	c0 34       	cpi	r28, 0x40	; 64
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     c44:	fb e0       	ldi	r31, 0x0B	; 11
     c46:	df 07       	cpc	r29, r31
     c48:	21 f4       	brne	.+8      	; 0xc52 <usart_init_rs232+0x140>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     c4a:	62 e0       	ldi	r22, 0x02	; 2
     c4c:	86 e0       	ldi	r24, 0x06	; 6
     c4e:	e8 dd       	rcall	.-1072   	; 0x820 <sysclk_enable_module>
     c50:	9f c0       	rjmp	.+318    	; 0xd90 <usart_init_rs232+0x27e>
     c52:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     c54:	88 e0       	ldi	r24, 0x08	; 8
     c56:	d8 07       	cpc	r29, r24
     c58:	21 f4       	brne	.+8      	; 0xc62 <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     c5a:	64 e0       	ldi	r22, 0x04	; 4
     c5c:	83 e0       	ldi	r24, 0x03	; 3
     c5e:	e0 dd       	rcall	.-1088   	; 0x820 <sysclk_enable_module>
     c60:	97 c0       	rjmp	.+302    	; 0xd90 <usart_init_rs232+0x27e>
     c62:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     c64:	e9 e0       	ldi	r30, 0x09	; 9
     c66:	de 07       	cpc	r29, r30
     c68:	21 f4       	brne	.+8      	; 0xc72 <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     c6a:	64 e0       	ldi	r22, 0x04	; 4
     c6c:	84 e0       	ldi	r24, 0x04	; 4
     c6e:	d8 dd       	rcall	.-1104   	; 0x820 <sysclk_enable_module>
     c70:	8f c0       	rjmp	.+286    	; 0xd90 <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     c72:	c0 39       	cpi	r28, 0x90	; 144
     c74:	fa e0       	ldi	r31, 0x0A	; 10
     c76:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     c78:	21 f4       	brne	.+8      	; 0xc82 <usart_init_rs232+0x170>
     c7a:	64 e0       	ldi	r22, 0x04	; 4
     c7c:	85 e0       	ldi	r24, 0x05	; 5
     c7e:	d0 dd       	rcall	.-1120   	; 0x820 <sysclk_enable_module>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     c80:	87 c0       	rjmp	.+270    	; 0xd90 <usart_init_rs232+0x27e>
     c82:	c0 39       	cpi	r28, 0x90	; 144
     c84:	8b e0       	ldi	r24, 0x0B	; 11
     c86:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     c88:	21 f4       	brne	.+8      	; 0xc92 <usart_init_rs232+0x180>
     c8a:	64 e0       	ldi	r22, 0x04	; 4
     c8c:	86 e0       	ldi	r24, 0x06	; 6
     c8e:	c8 dd       	rcall	.-1136   	; 0x820 <sysclk_enable_module>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     c90:	7f c0       	rjmp	.+254    	; 0xd90 <usart_init_rs232+0x27e>
     c92:	c0 3c       	cpi	r28, 0xC0	; 192
     c94:	e8 e0       	ldi	r30, 0x08	; 8
     c96:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     c98:	21 f4       	brne	.+8      	; 0xca2 <usart_init_rs232+0x190>
     c9a:	68 e0       	ldi	r22, 0x08	; 8
     c9c:	83 e0       	ldi	r24, 0x03	; 3
     c9e:	c0 dd       	rcall	.-1152   	; 0x820 <sysclk_enable_module>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
     ca0:	77 c0       	rjmp	.+238    	; 0xd90 <usart_init_rs232+0x27e>
     ca2:	c0 3c       	cpi	r28, 0xC0	; 192
     ca4:	f9 e0       	ldi	r31, 0x09	; 9
     ca6:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
     ca8:	21 f4       	brne	.+8      	; 0xcb2 <usart_init_rs232+0x1a0>
     caa:	68 e0       	ldi	r22, 0x08	; 8
     cac:	84 e0       	ldi	r24, 0x04	; 4
     cae:	b8 dd       	rcall	.-1168   	; 0x820 <sysclk_enable_module>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
     cb0:	6f c0       	rjmp	.+222    	; 0xd90 <usart_init_rs232+0x27e>
     cb2:	c0 3c       	cpi	r28, 0xC0	; 192
     cb4:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
     cb6:	d8 07       	cpc	r29, r24
     cb8:	21 f4       	brne	.+8      	; 0xcc2 <usart_init_rs232+0x1b0>
     cba:	68 e0       	ldi	r22, 0x08	; 8
     cbc:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     cbe:	b0 dd       	rcall	.-1184   	; 0x820 <sysclk_enable_module>
     cc0:	67 c0       	rjmp	.+206    	; 0xd90 <usart_init_rs232+0x27e>
     cc2:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     cc4:	eb e0       	ldi	r30, 0x0B	; 11
     cc6:	de 07       	cpc	r29, r30
     cc8:	21 f4       	brne	.+8      	; 0xcd2 <usart_init_rs232+0x1c0>
     cca:	68 e0       	ldi	r22, 0x08	; 8
     ccc:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     cce:	a8 dd       	rcall	.-1200   	; 0x820 <sysclk_enable_module>
     cd0:	5f c0       	rjmp	.+190    	; 0xd90 <usart_init_rs232+0x27e>
     cd2:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     cd4:	f8 e0       	ldi	r31, 0x08	; 8
     cd6:	df 07       	cpc	r29, r31
     cd8:	21 f4       	brne	.+8      	; 0xce2 <usart_init_rs232+0x1d0>
     cda:	60 e1       	ldi	r22, 0x10	; 16
     cdc:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     cde:	a0 dd       	rcall	.-1216   	; 0x820 <sysclk_enable_module>
     ce0:	57 c0       	rjmp	.+174    	; 0xd90 <usart_init_rs232+0x27e>
     ce2:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     ce4:	89 e0       	ldi	r24, 0x09	; 9
     ce6:	d8 07       	cpc	r29, r24
     ce8:	21 f4       	brne	.+8      	; 0xcf2 <usart_init_rs232+0x1e0>
     cea:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     cec:	84 e0       	ldi	r24, 0x04	; 4
     cee:	98 dd       	rcall	.-1232   	; 0x820 <sysclk_enable_module>
     cf0:	4f c0       	rjmp	.+158    	; 0xd90 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     cf2:	c0 3a       	cpi	r28, 0xA0	; 160
     cf4:	ea e0       	ldi	r30, 0x0A	; 10
     cf6:	de 07       	cpc	r29, r30
     cf8:	21 f4       	brne	.+8      	; 0xd02 <usart_init_rs232+0x1f0>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     cfa:	60 e1       	ldi	r22, 0x10	; 16
     cfc:	85 e0       	ldi	r24, 0x05	; 5
     cfe:	90 dd       	rcall	.-1248   	; 0x820 <sysclk_enable_module>
     d00:	47 c0       	rjmp	.+142    	; 0xd90 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     d02:	c0 3a       	cpi	r28, 0xA0	; 160
     d04:	fb e0       	ldi	r31, 0x0B	; 11
     d06:	df 07       	cpc	r29, r31
     d08:	21 f4       	brne	.+8      	; 0xd12 <usart_init_rs232+0x200>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     d0a:	60 e1       	ldi	r22, 0x10	; 16
     d0c:	86 e0       	ldi	r24, 0x06	; 6
     d0e:	88 dd       	rcall	.-1264   	; 0x820 <sysclk_enable_module>
     d10:	3f c0       	rjmp	.+126    	; 0xd90 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     d12:	c0 3b       	cpi	r28, 0xB0	; 176
     d14:	88 e0       	ldi	r24, 0x08	; 8
     d16:	d8 07       	cpc	r29, r24
     d18:	21 f4       	brne	.+8      	; 0xd22 <usart_init_rs232+0x210>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
     d1a:	60 e2       	ldi	r22, 0x20	; 32
     d1c:	83 e0       	ldi	r24, 0x03	; 3
     d1e:	80 dd       	rcall	.-1280   	; 0x820 <sysclk_enable_module>
     d20:	37 c0       	rjmp	.+110    	; 0xd90 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
     d22:	c0 3b       	cpi	r28, 0xB0	; 176
     d24:	e9 e0       	ldi	r30, 0x09	; 9
     d26:	de 07       	cpc	r29, r30
     d28:	21 f4       	brne	.+8      	; 0xd32 <usart_init_rs232+0x220>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
     d2a:	60 e2       	ldi	r22, 0x20	; 32
     d2c:	84 e0       	ldi	r24, 0x04	; 4
     d2e:	78 dd       	rcall	.-1296   	; 0x820 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
     d30:	2f c0       	rjmp	.+94     	; 0xd90 <usart_init_rs232+0x27e>
     d32:	c0 3b       	cpi	r28, 0xB0	; 176
     d34:	fa e0       	ldi	r31, 0x0A	; 10
     d36:	df 07       	cpc	r29, r31
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     d38:	21 f4       	brne	.+8      	; 0xd42 <usart_init_rs232+0x230>
     d3a:	60 e2       	ldi	r22, 0x20	; 32
     d3c:	85 e0       	ldi	r24, 0x05	; 5
     d3e:	70 dd       	rcall	.-1312   	; 0x820 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     d40:	27 c0       	rjmp	.+78     	; 0xd90 <usart_init_rs232+0x27e>
     d42:	c0 3b       	cpi	r28, 0xB0	; 176
     d44:	8b e0       	ldi	r24, 0x0B	; 11
     d46:	d8 07       	cpc	r29, r24
     d48:	21 f4       	brne	.+8      	; 0xd52 <usart_init_rs232+0x240>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
     d4a:	60 e2       	ldi	r22, 0x20	; 32
     d4c:	86 e0       	ldi	r24, 0x06	; 6
     d4e:	68 dd       	rcall	.-1328   	; 0x820 <sysclk_enable_module>
     d50:	1f c0       	rjmp	.+62     	; 0xd90 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
     d52:	c0 38       	cpi	r28, 0x80	; 128
     d54:	e4 e0       	ldi	r30, 0x04	; 4
     d56:	de 07       	cpc	r29, r30
     d58:	21 f4       	brne	.+8      	; 0xd62 <usart_init_rs232+0x250>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     d5a:	60 e4       	ldi	r22, 0x40	; 64
     d5c:	83 e0       	ldi	r24, 0x03	; 3
     d5e:	60 dd       	rcall	.-1344   	; 0x820 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     d60:	17 c0       	rjmp	.+46     	; 0xd90 <usart_init_rs232+0x27e>
     d62:	c0 39       	cpi	r28, 0x90	; 144
     d64:	f4 e0       	ldi	r31, 0x04	; 4
     d66:	df 07       	cpc	r29, r31
     d68:	21 f4       	brne	.+8      	; 0xd72 <usart_init_rs232+0x260>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
     d6a:	60 e4       	ldi	r22, 0x40	; 64
     d6c:	84 e0       	ldi	r24, 0x04	; 4
     d6e:	58 dd       	rcall	.-1360   	; 0x820 <sysclk_enable_module>
     d70:	0f c0       	rjmp	.+30     	; 0xd90 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
     d72:	c0 3a       	cpi	r28, 0xA0	; 160
     d74:	84 e0       	ldi	r24, 0x04	; 4
     d76:	d8 07       	cpc	r29, r24
     d78:	21 f4       	brne	.+8      	; 0xd82 <usart_init_rs232+0x270>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     d7a:	60 e4       	ldi	r22, 0x40	; 64
     d7c:	85 e0       	ldi	r24, 0x05	; 5
     d7e:	50 dd       	rcall	.-1376   	; 0x820 <sysclk_enable_module>
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     d80:	07 c0       	rjmp	.+14     	; 0xd90 <usart_init_rs232+0x27e>
     d82:	c0 3b       	cpi	r28, 0xB0	; 176
     d84:	e4 e0       	ldi	r30, 0x04	; 4
     d86:	de 07       	cpc	r29, r30
     d88:	19 f4       	brne	.+6      	; 0xd90 <usart_init_rs232+0x27e>
     d8a:	60 e4       	ldi	r22, 0x40	; 64
     d8c:	86 e0       	ldi	r24, 0x06	; 6
     d8e:	48 dd       	rcall	.-1392   	; 0x820 <sysclk_enable_module>
     d90:	8d 81       	ldd	r24, Y+5	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     d92:	8f 73       	andi	r24, 0x3F	; 63
     d94:	8d 83       	std	Y+5, r24	; 0x05
     d96:	f8 01       	movw	r30, r16
     d98:	95 81       	ldd	r25, Z+5	; 0x05
     d9a:	84 81       	ldd	r24, Z+4	; 0x04
     d9c:	89 2b       	or	r24, r25
     d9e:	96 81       	ldd	r25, Z+6	; 0x06
     da0:	91 11       	cpse	r25, r1
     da2:	98 e0       	ldi	r25, 0x08	; 8
     da4:	89 2b       	or	r24, r25
     da6:	8d 83       	std	Y+5, r24	; 0x05
     da8:	f8 01       	movw	r30, r16
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     daa:	40 81       	ld	r20, Z
     dac:	51 81       	ldd	r21, Z+1	; 0x01
     dae:	62 81       	ldd	r22, Z+2	; 0x02
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     db0:	73 81       	ldd	r23, Z+3	; 0x03
     db2:	00 e8       	ldi	r16, 0x80	; 128
     db4:	14 e8       	ldi	r17, 0x84	; 132
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     db6:	2e e1       	ldi	r18, 0x1E	; 30
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	ce 01       	movw	r24, r28
     dbc:	9b dd       	rcall	.-1226   	; 0x8f4 <usart_set_baudrate>
     dbe:	9c 81       	ldd	r25, Y+4	; 0x04
     dc0:	98 60       	ori	r25, 0x08	; 8
     dc2:	9c 83       	std	Y+4, r25	; 0x04
     dc4:	9c 81       	ldd	r25, Y+4	; 0x04
     dc6:	90 61       	ori	r25, 0x10	; 16
     dc8:	9c 83       	std	Y+4, r25	; 0x04
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	1f 91       	pop	r17
     dd0:	0f 91       	pop	r16
     dd2:	08 95       	ret

00000dd4 <__portable_avr_delay_cycles>:
	
	PORTQ.OUT &= ~(1<<3);
	delay_s(on_time);
	PORTQ.OUT |= (1<<3);
	delay_s(on_time);
}
     dd4:	04 c0       	rjmp	.+8      	; 0xdde <__portable_avr_delay_cycles+0xa>
     dd6:	61 50       	subi	r22, 0x01	; 1
     dd8:	71 09       	sbc	r23, r1
     dda:	81 09       	sbc	r24, r1
     ddc:	91 09       	sbc	r25, r1
     dde:	61 15       	cp	r22, r1
     de0:	71 05       	cpc	r23, r1
     de2:	81 05       	cpc	r24, r1
     de4:	91 05       	cpc	r25, r1
     de6:	b9 f7       	brne	.-18     	; 0xdd6 <__portable_avr_delay_cycles+0x2>
     de8:	08 95       	ret

00000dea <usart_tx_at>:
     dea:	0f 93       	push	r16
     dec:	1f 93       	push	r17
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	eb 01       	movw	r28, r22
     df4:	68 81       	ld	r22, Y
     df6:	66 23       	and	r22, r22
     df8:	39 f0       	breq	.+14     	; 0xe08 <usart_tx_at+0x1e>
     dfa:	8c 01       	movw	r16, r24
     dfc:	21 96       	adiw	r28, 0x01	; 1
     dfe:	c8 01       	movw	r24, r16
     e00:	71 dd       	rcall	.-1310   	; 0x8e4 <usart_putchar>
     e02:	69 91       	ld	r22, Y+
     e04:	61 11       	cpse	r22, r1
     e06:	fb cf       	rjmp	.-10     	; 0xdfe <usart_tx_at+0x14>
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	1f 91       	pop	r17
     e0e:	0f 91       	pop	r16
     e10:	08 95       	ret

00000e12 <mqtt_packet>:

/////////////MQTT////////////////////
int mqtt_packet(int argc, char *argv[])
{
     e12:	4f 92       	push	r4
     e14:	5f 92       	push	r5
     e16:	6f 92       	push	r6
     e18:	7f 92       	push	r7
     e1a:	8f 92       	push	r8
     e1c:	9f 92       	push	r9
     e1e:	af 92       	push	r10
     e20:	bf 92       	push	r11
     e22:	cf 92       	push	r12
     e24:	df 92       	push	r13
     e26:	ef 92       	push	r14
     e28:	ff 92       	push	r15
     e2a:	0f 93       	push	r16
     e2c:	1f 93       	push	r17
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	cf 5f       	subi	r28, 0xFF	; 255
     e38:	d1 09       	sbc	r29, r1
     e3a:	cd bf       	out	0x3d, r28	; 61
     e3c:	de bf       	out	0x3e, r29	; 62
	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
     e3e:	21 e3       	ldi	r18, 0x31	; 49
     e40:	e2 e3       	ldi	r30, 0x32	; 50
     e42:	f0 e2       	ldi	r31, 0x20	; 32
     e44:	de 01       	movw	r26, r28
     e46:	11 96       	adiw	r26, 0x01	; 1
     e48:	01 90       	ld	r0, Z+
     e4a:	0d 92       	st	X+, r0
     e4c:	2a 95       	dec	r18
     e4e:	e1 f7       	brne	.-8      	; 0xe48 <mqtt_packet+0x36>
	int rc = 0;
	char buf[200];
	int buflen = sizeof(buf);
	int mysock = 0;
	MQTTString topicString = MQTTString_initializer;
     e50:	c4 50       	subi	r28, 0x04	; 4
     e52:	df 4f       	sbci	r29, 0xFF	; 255
     e54:	18 82       	st	Y, r1
     e56:	19 82       	std	Y+1, r1	; 0x01
     e58:	cc 5f       	subi	r28, 0xFC	; 252
     e5a:	d0 40       	sbci	r29, 0x00	; 0
     e5c:	c2 50       	subi	r28, 0x02	; 2
     e5e:	df 4f       	sbci	r29, 0xFF	; 255
     e60:	18 82       	st	Y, r1
     e62:	19 82       	std	Y+1, r1	; 0x01
     e64:	ce 5f       	subi	r28, 0xFE	; 254
     e66:	d0 40       	sbci	r29, 0x00	; 0
	int payloadlen = strlen(payload);
	int len = 0;
	char *host = "m2m.eclipse.org";
	int port = 1883;

	if (argc > 1)
     e68:	82 30       	cpi	r24, 0x02	; 2
     e6a:	91 05       	cpc	r25, r1
     e6c:	24 f0       	brlt	.+8      	; 0xe76 <mqtt_packet+0x64>
	host = argv[1];
     e6e:	fb 01       	movw	r30, r22
     e70:	02 81       	ldd	r16, Z+2	; 0x02
     e72:	13 81       	ldd	r17, Z+3	; 0x03
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <mqtt_packet+0x68>
	int mysock = 0;
	MQTTString topicString = MQTTString_initializer;
	char* payload = "mypayload";
	int payloadlen = strlen(payload);
	int len = 0;
	char *host = "m2m.eclipse.org";
     e76:	0f e6       	ldi	r16, 0x6F	; 111
     e78:	10 e2       	ldi	r17, 0x20	; 32
	int port = 1883;

	if (argc > 1)
	host = argv[1];

	if (argc > 2)
     e7a:	03 97       	sbiw	r24, 0x03	; 3
     e7c:	2c f0       	brlt	.+10     	; 0xe88 <mqtt_packet+0x76>
	port = atoi(argv[2]);
     e7e:	fb 01       	movw	r30, r22
     e80:	84 81       	ldd	r24, Z+4	; 0x04
     e82:	95 81       	ldd	r25, Z+5	; 0x05
     e84:	64 d1       	rcall	.+712    	; 0x114e <atoi>
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <mqtt_packet+0x7a>
	MQTTString topicString = MQTTString_initializer;
	char* payload = "mypayload";
	int payloadlen = strlen(payload);
	int len = 0;
	char *host = "m2m.eclipse.org";
	int port = 1883;
     e88:	8b e5       	ldi	r24, 0x5B	; 91
     e8a:	97 e0       	ldi	r25, 0x07	; 7

	//mysock = transport_open(host,port);
	if(mysock < 0)
	return mysock;

	printf("Sending to hostname %s port %d\n", host, port);
     e8c:	9f 93       	push	r25
     e8e:	8f 93       	push	r24
     e90:	1f 93       	push	r17
     e92:	0f 93       	push	r16
     e94:	8f e7       	ldi	r24, 0x7F	; 127
     e96:	90 e2       	ldi	r25, 0x20	; 32
     e98:	9f 93       	push	r25
     e9a:	8f 93       	push	r24
     e9c:	86 d1       	rcall	.+780    	; 0x11aa <printf>

	data.clientID.cstring = "SIM900";
     e9e:	8f e9       	ldi	r24, 0x9F	; 159
     ea0:	90 e2       	ldi	r25, 0x20	; 32
     ea2:	88 87       	std	Y+8, r24	; 0x08
     ea4:	99 87       	std	Y+9, r25	; 0x09
	data.keepAliveInterval = 20;
     ea6:	84 e1       	ldi	r24, 0x14	; 20
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	8e 87       	std	Y+14, r24	; 0x0e
     eac:	9f 87       	std	Y+15, r25	; 0x0f
	data.cleansession = 1;
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	88 8b       	std	Y+16, r24	; 0x10
	data.username.cstring = "";
     eb2:	8e e9       	ldi	r24, 0x9E	; 158
     eb4:	90 e2       	ldi	r25, 0x20	; 32
     eb6:	8e a3       	std	Y+38, r24	; 0x26
     eb8:	9f a3       	std	Y+39, r25	; 0x27
	data.password.cstring = "";
     eba:	8c a7       	std	Y+44, r24	; 0x2c
     ebc:	9d a7       	std	Y+45, r25	; 0x2d
	data.MQTTVersion = 4;
     ebe:	84 e0       	ldi	r24, 0x04	; 4
     ec0:	8f 83       	std	Y+7, r24	; 0x07

	len = MQTTSerialize_connect((unsigned char *)buf, buflen, &data);
     ec2:	ae 01       	movw	r20, r28
     ec4:	4f 5f       	subi	r20, 0xFF	; 255
     ec6:	5f 4f       	sbci	r21, 0xFF	; 255
     ec8:	68 ec       	ldi	r22, 0xC8	; 200
     eca:	70 e0       	ldi	r23, 0x00	; 0
     ecc:	ce 01       	movw	r24, r28
     ece:	c2 96       	adiw	r24, 0x32	; 50
     ed0:	1c da       	rcall	.-3016   	; 0x30a <MQTTSerialize_connect>
     ed2:	3c 01       	movw	r6, r24

	topicString.cstring = "home/garden/fountain";
     ed4:	86 ea       	ldi	r24, 0xA6	; 166
     ed6:	90 e2       	ldi	r25, 0x20	; 32
     ed8:	c6 50       	subi	r28, 0x06	; 6
     eda:	df 4f       	sbci	r29, 0xFF	; 255
     edc:	88 83       	st	Y, r24
     ede:	99 83       	std	Y+1, r25	; 0x01
     ee0:	ca 5f       	subi	r28, 0xFA	; 250
     ee2:	d0 40       	sbci	r29, 0x00	; 0
	len += MQTTSerialize_publish((unsigned char *)(buf + len), buflen - len, 0, 0, 0, 0, topicString, (unsigned char *)payload, payloadlen);
     ee4:	0f 2e       	mov	r0, r31
     ee6:	f8 ec       	ldi	r31, 0xC8	; 200
     ee8:	4f 2e       	mov	r4, r31
     eea:	51 2c       	mov	r5, r1
     eec:	f0 2d       	mov	r31, r0
     eee:	b2 01       	movw	r22, r4
     ef0:	66 19       	sub	r22, r6
     ef2:	77 09       	sbc	r23, r7
     ef4:	1f 92       	push	r1
     ef6:	89 e0       	ldi	r24, 0x09	; 9
     ef8:	8f 93       	push	r24
     efa:	8b eb       	ldi	r24, 0xBB	; 187
     efc:	90 e2       	ldi	r25, 0x20	; 32
     efe:	9f 93       	push	r25
     f00:	8f 93       	push	r24
     f02:	c6 50       	subi	r28, 0x06	; 6
     f04:	df 4f       	sbci	r29, 0xFF	; 255
     f06:	88 80       	ld	r8, Y
     f08:	ca 5f       	subi	r28, 0xFA	; 250
     f0a:	d0 40       	sbci	r29, 0x00	; 0
     f0c:	c5 50       	subi	r28, 0x05	; 5
     f0e:	df 4f       	sbci	r29, 0xFF	; 255
     f10:	98 80       	ld	r9, Y
     f12:	cb 5f       	subi	r28, 0xFB	; 251
     f14:	d0 40       	sbci	r29, 0x00	; 0
     f16:	c4 50       	subi	r28, 0x04	; 4
     f18:	df 4f       	sbci	r29, 0xFF	; 255
     f1a:	a8 80       	ld	r10, Y
     f1c:	cc 5f       	subi	r28, 0xFC	; 252
     f1e:	d0 40       	sbci	r29, 0x00	; 0
     f20:	c3 50       	subi	r28, 0x03	; 3
     f22:	df 4f       	sbci	r29, 0xFF	; 255
     f24:	b8 80       	ld	r11, Y
     f26:	cd 5f       	subi	r28, 0xFD	; 253
     f28:	d0 40       	sbci	r29, 0x00	; 0
     f2a:	c2 50       	subi	r28, 0x02	; 2
     f2c:	df 4f       	sbci	r29, 0xFF	; 255
     f2e:	c8 80       	ld	r12, Y
     f30:	ce 5f       	subi	r28, 0xFE	; 254
     f32:	d0 40       	sbci	r29, 0x00	; 0
     f34:	c1 50       	subi	r28, 0x01	; 1
     f36:	df 4f       	sbci	r29, 0xFF	; 255
     f38:	d8 80       	ld	r13, Y
     f3a:	cf 5f       	subi	r28, 0xFF	; 255
     f3c:	d0 40       	sbci	r29, 0x00	; 0
     f3e:	e1 2c       	mov	r14, r1
     f40:	f1 2c       	mov	r15, r1
     f42:	00 e0       	ldi	r16, 0x00	; 0
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	40 e0       	ldi	r20, 0x00	; 0
     f4a:	82 e3       	ldi	r24, 0x32	; 50
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	8c 0f       	add	r24, r28
     f50:	9d 1f       	adc	r25, r29
     f52:	86 0d       	add	r24, r6
     f54:	97 1d       	adc	r25, r7
     f56:	d2 db       	rcall	.-2140   	; 0x6fc <MQTTSerialize_publish>
     f58:	68 0e       	add	r6, r24
     f5a:	79 1e       	adc	r7, r25

	len += MQTTSerialize_disconnect((unsigned char *)(buf + len), buflen - len);
     f5c:	b2 01       	movw	r22, r4
     f5e:	66 19       	sub	r22, r6
     f60:	77 09       	sbc	r23, r7
     f62:	82 e3       	ldi	r24, 0x32	; 50
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	8c 0f       	add	r24, r28
     f68:	9d 1f       	adc	r25, r29
     f6a:	86 0d       	add	r24, r6
     f6c:	97 1d       	adc	r25, r7
     f6e:	bf da       	rcall	.-2690   	; 0x4ee <MQTTSerialize_disconnect>
     f70:	68 0e       	add	r6, r24
     f72:	79 1e       	adc	r7, r25

	//rc = transport_sendPacketBuffer(mysock, buf, len);
	int i = 0;
	while (i<len)
     f74:	cd bf       	out	0x3d, r28	; 61
     f76:	de bf       	out	0x3e, r29	; 62
     f78:	16 14       	cp	r1, r6
     f7a:	17 04       	cpc	r1, r7
     f7c:	7c f4       	brge	.+30     	; 0xf9c <mqtt_packet+0x18a>
     f7e:	8e 01       	movw	r16, r28
     f80:	0e 5c       	subi	r16, 0xCE	; 206
     f82:	1f 4f       	sbci	r17, 0xFF	; 255
     f84:	78 01       	movw	r14, r16
     f86:	e6 0c       	add	r14, r6
	{
		usart_putchar(USART_SERIAL_SIM900, buf[i]);
     f88:	f7 1c       	adc	r15, r7
     f8a:	f8 01       	movw	r30, r16
     f8c:	61 91       	ld	r22, Z+
     f8e:	8f 01       	movw	r16, r30
     f90:	80 ea       	ldi	r24, 0xA0	; 160
     f92:	98 e0       	ldi	r25, 0x08	; 8

	len += MQTTSerialize_disconnect((unsigned char *)(buf + len), buflen - len);

	//rc = transport_sendPacketBuffer(mysock, buf, len);
	int i = 0;
	while (i<len)
     f94:	a7 dc       	rcall	.-1714   	; 0x8e4 <usart_putchar>
     f96:	0e 15       	cp	r16, r14
	{
		usart_putchar(USART_SERIAL_SIM900, buf[i]);
		i++;
	}
	usart_putchar(USART_SERIAL_SIM900, CR); //end package (SIM900 requirement in send mode)
     f98:	1f 05       	cpc	r17, r15
     f9a:	b9 f7       	brne	.-18     	; 0xf8a <mqtt_packet+0x178>
     f9c:	60 e1       	ldi	r22, 0x10	; 16
     f9e:	71 e2       	ldi	r23, 0x21	; 33
     fa0:	80 ea       	ldi	r24, 0xA0	; 160
	
	
	if (rc == len)
     fa2:	98 e0       	ldi	r25, 0x08	; 8
	printf("Successfully published\n");
     fa4:	9f dc       	rcall	.-1730   	; 0x8e4 <usart_putchar>
     fa6:	67 28       	or	r6, r7
     fa8:	21 f4       	brne	.+8      	; 0xfb2 <mqtt_packet+0x1a0>
     faa:	85 ec       	ldi	r24, 0xC5	; 197
     fac:	90 e2       	ldi	r25, 0x20	; 32
	else
	printf("Publish failed\n");
     fae:	10 d1       	rcall	.+544    	; 0x11d0 <puts>
     fb0:	03 c0       	rjmp	.+6      	; 0xfb8 <mqtt_packet+0x1a6>
     fb2:	8c ed       	ldi	r24, 0xDC	; 220
     fb4:	90 e2       	ldi	r25, 0x20	; 32

	exit:
	//transport_close(mysock);
	return 0;
}
     fb6:	0c d1       	rcall	.+536    	; 0x11d0 <puts>
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	c1 50       	subi	r28, 0x01	; 1
     fbe:	df 4f       	sbci	r29, 0xFF	; 255
     fc0:	cd bf       	out	0x3d, r28	; 61
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	1f 91       	pop	r17
     fca:	0f 91       	pop	r16
     fcc:	ff 90       	pop	r15
     fce:	ef 90       	pop	r14
     fd0:	df 90       	pop	r13
     fd2:	cf 90       	pop	r12
     fd4:	bf 90       	pop	r11
     fd6:	af 90       	pop	r10
     fd8:	9f 90       	pop	r9
     fda:	8f 90       	pop	r8
     fdc:	7f 90       	pop	r7
     fde:	6f 90       	pop	r6
     fe0:	5f 90       	pop	r5
     fe2:	4f 90       	pop	r4
     fe4:	08 95       	ret

00000fe6 <main>:
	/* Initialize the board.
	 * The board-specific conf_board.h file contains the configuration of
	 * the board initialization.
	 */
	board_init();
	sysclk_init();
     fe6:	59 dc       	rcall	.-1870   	; 0x89a <board_init>
     fe8:	0b dc       	rcall	.-2026   	; 0x800 <sysclk_init>
	
	//LED setup
	PORTQ.DIR |= (1<<3);
     fea:	e0 ec       	ldi	r30, 0xC0	; 192
     fec:	f7 e0       	ldi	r31, 0x07	; 7
     fee:	80 81       	ld	r24, Z
     ff0:	88 60       	ori	r24, 0x08	; 8
     ff2:	80 83       	st	Z, r24
	PORTQ.OUT |= (1<<3);
     ff4:	84 81       	ldd	r24, Z+4	; 0x04
     ff6:	88 60       	ori	r24, 0x08	; 8
     ff8:	84 83       	std	Z+4, r24	; 0x04
		.paritytype = USART_SERIAL_SIM900_PARITY,
		.stopbits = USART_SERIAL_SIM900_STOP_BIT
	};

	// Initialize usart driver in RS232 mode
	usart_init_rs232(USART_SERIAL_EXAMPLE, &USART_SERIAL_OPTIONS);
     ffa:	67 e0       	ldi	r22, 0x07	; 7
     ffc:	70 e2       	ldi	r23, 0x20	; 32
     ffe:	80 ea       	ldi	r24, 0xA0	; 160
    1000:	9a e0       	ldi	r25, 0x0A	; 10
    1002:	87 dd       	rcall	.-1266   	; 0xb12 <usart_init_rs232>
	usart_init_rs232(USART_SERIAL_SIM900, &USART_SERIAL_SIM900_OPTIONS);
    1004:	60 e0       	ldi	r22, 0x00	; 0
    1006:	70 e2       	ldi	r23, 0x20	; 32
    1008:	80 ea       	ldi	r24, 0xA0	; 160
    100a:	98 e0       	ldi	r25, 0x08	; 8
	

	

	//usart_tx_at(USART_SERIAL_SIM900, AT);
	usart_tx_at(USART_SERIAL_SIM900, AT_CIPSHUT);
    100c:	82 dd       	rcall	.-1276   	; 0xb12 <usart_init_rs232>
    100e:	6b ee       	ldi	r22, 0xEB	; 235
    1010:	70 e2       	ldi	r23, 0x20	; 32
    1012:	80 ea       	ldi	r24, 0xA0	; 160
	delay_s(1);
    1014:	98 e0       	ldi	r25, 0x08	; 8
    1016:	e9 de       	rcall	.-558    	; 0xdea <usart_tx_at>
    1018:	66 e1       	ldi	r22, 0x16	; 22
    101a:	76 e1       	ldi	r23, 0x16	; 22
    101c:	85 e0       	ldi	r24, 0x05	; 5
	usart_tx_at(USART_SERIAL_SIM900, AT_CIPSTATUS);
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	d9 de       	rcall	.-590    	; 0xdd4 <__portable_avr_delay_cycles>
    1022:	67 ef       	ldi	r22, 0xF7	; 247
    1024:	70 e2       	ldi	r23, 0x20	; 32
    1026:	80 ea       	ldi	r24, 0xA0	; 160
	delay_s(1);
    1028:	98 e0       	ldi	r25, 0x08	; 8
    102a:	df de       	rcall	.-578    	; 0xdea <usart_tx_at>
    102c:	66 e1       	ldi	r22, 0x16	; 22
    102e:	76 e1       	ldi	r23, 0x16	; 22
    1030:	85 e0       	ldi	r24, 0x05	; 5
	usart_tx_at(USART_SERIAL_SIM900, AT_CIPMUX);
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	cf de       	rcall	.-610    	; 0xdd4 <__portable_avr_delay_cycles>
    1036:	65 e0       	ldi	r22, 0x05	; 5
    1038:	71 e2       	ldi	r23, 0x21	; 33
    103a:	80 ea       	ldi	r24, 0xA0	; 160
	delay_s(1);
    103c:	98 e0       	ldi	r25, 0x08	; 8
    103e:	d5 de       	rcall	.-598    	; 0xdea <usart_tx_at>
    1040:	66 e1       	ldi	r22, 0x16	; 22
    1042:	76 e1       	ldi	r23, 0x16	; 22
    1044:	85 e0       	ldi	r24, 0x05	; 5
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	c5 de       	rcall	.-630    	; 0xdd4 <__portable_avr_delay_cycles>
    104a:	c0 e2       	ldi	r28, 0x20	; 32
    104c:	d0 e2       	ldi	r29, 0x20	; 32
	
	int i = 0;
	while (i < LEN_CSTT)
	{
		usart_tx_at(USART_SERIAL_SIM900, AT_CSTT[i]);
    104e:	02 e3       	ldi	r16, 0x32	; 50
    1050:	10 e2       	ldi	r17, 0x20	; 32
    1052:	69 91       	ld	r22, Y+
    1054:	79 91       	ld	r23, Y+
    1056:	80 ea       	ldi	r24, 0xA0	; 160
	delay_s(1);
	usart_tx_at(USART_SERIAL_SIM900, AT_CIPMUX);
	delay_s(1);
	
	int i = 0;
	while (i < LEN_CSTT)
    1058:	98 e0       	ldi	r25, 0x08	; 8
    105a:	c7 de       	rcall	.-626    	; 0xdea <usart_tx_at>
	{
		usart_tx_at(USART_SERIAL_SIM900, AT_CSTT[i]);
		i++;
	}
	delay_s(1);
    105c:	c0 17       	cp	r28, r16
    105e:	d1 07       	cpc	r29, r17
    1060:	c1 f7       	brne	.-16     	; 0x1052 <main+0x6c>
    1062:	66 e1       	ldi	r22, 0x16	; 22
    1064:	76 e1       	ldi	r23, 0x16	; 22
	
	usart_tx_at(USART_SERIAL_SIM900, AT_CIICR);
    1066:	85 e0       	ldi	r24, 0x05	; 5
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	b4 de       	rcall	.-664    	; 0xdd4 <__portable_avr_delay_cycles>
    106c:	62 e1       	ldi	r22, 0x12	; 18
    106e:	71 e2       	ldi	r23, 0x21	; 33
	delay_s(3);
    1070:	80 ea       	ldi	r24, 0xA0	; 160
    1072:	98 e0       	ldi	r25, 0x08	; 8
    1074:	ba de       	rcall	.-652    	; 0xdea <usart_tx_at>
    1076:	61 e4       	ldi	r22, 0x41	; 65
    1078:	72 e4       	ldi	r23, 0x42	; 66
	usart_tx_at(USART_SERIAL_SIM900, AT_CIFSR);
    107a:	8f e0       	ldi	r24, 0x0F	; 15
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	aa de       	rcall	.-684    	; 0xdd4 <__portable_avr_delay_cycles>
    1080:	6c e1       	ldi	r22, 0x1C	; 28
    1082:	71 e2       	ldi	r23, 0x21	; 33
	delay_s(1);
    1084:	80 ea       	ldi	r24, 0xA0	; 160
    1086:	98 e0       	ldi	r25, 0x08	; 8
    1088:	b0 de       	rcall	.-672    	; 0xdea <usart_tx_at>
    108a:	66 e1       	ldi	r22, 0x16	; 22
    108c:	76 e1       	ldi	r23, 0x16	; 22
    108e:	85 e0       	ldi	r24, 0x05	; 5
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	a0 de       	rcall	.-704    	; 0xdd4 <__portable_avr_delay_cycles>
    1094:	ce e0       	ldi	r28, 0x0E	; 14
	
	i = 0;
	while (i < LEN_CIPSTART)
	{
		usart_tx_at(USART_SERIAL_SIM900, AT_CIPSTART[i]);
    1096:	d0 e2       	ldi	r29, 0x20	; 32
    1098:	00 e2       	ldi	r16, 0x20	; 32
    109a:	10 e2       	ldi	r17, 0x20	; 32
    109c:	69 91       	ld	r22, Y+
	delay_s(3);
	usart_tx_at(USART_SERIAL_SIM900, AT_CIFSR);
	delay_s(1);
	
	i = 0;
	while (i < LEN_CIPSTART)
    109e:	79 91       	ld	r23, Y+
    10a0:	80 ea       	ldi	r24, 0xA0	; 160
	{
		usart_tx_at(USART_SERIAL_SIM900, AT_CIPSTART[i]);
		i++;
	}
	delay_s(3);
    10a2:	98 e0       	ldi	r25, 0x08	; 8
    10a4:	a2 de       	rcall	.-700    	; 0xdea <usart_tx_at>
    10a6:	c0 17       	cp	r28, r16
    10a8:	d1 07       	cpc	r29, r17
    10aa:	c1 f7       	brne	.-16     	; 0x109c <main+0xb6>
	
	usart_tx_at(USART_SERIAL_SIM900, AT_CIPSEND);
    10ac:	61 e4       	ldi	r22, 0x41	; 65
    10ae:	72 e4       	ldi	r23, 0x42	; 66
    10b0:	8f e0       	ldi	r24, 0x0F	; 15
    10b2:	90 e0       	ldi	r25, 0x00	; 0
	delay_s(1);
    10b4:	8f de       	rcall	.-738    	; 0xdd4 <__portable_avr_delay_cycles>
    10b6:	66 e2       	ldi	r22, 0x26	; 38
    10b8:	71 e2       	ldi	r23, 0x21	; 33
    10ba:	80 ea       	ldi	r24, 0xA0	; 160
	char AT_MESSAGE2 = "\0x40\r";
	//usart_tx_at(USART_SERIAL_SIM900, AT_MESSAGE2);
	//void mqtt_connect();
	mqtt_packet(1, "10.8.10.136");
    10bc:	98 e0       	ldi	r25, 0x08	; 8
    10be:	95 de       	rcall	.-726    	; 0xdea <usart_tx_at>
    10c0:	66 e1       	ldi	r22, 0x16	; 22
    10c2:	76 e1       	ldi	r23, 0x16	; 22
    10c4:	85 e0       	ldi	r24, 0x05	; 5
	delay_s(1);
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	85 de       	rcall	.-758    	; 0xdd4 <__portable_avr_delay_cycles>
    10ca:	62 e3       	ldi	r22, 0x32	; 50
    10cc:	71 e2       	ldi	r23, 0x21	; 33
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
	usart_tx_at(USART_SERIAL_SIM900, CTRL_Z);
    10d2:	9f de       	rcall	.-706    	; 0xe12 <mqtt_packet>
    10d4:	66 e1       	ldi	r22, 0x16	; 22
    10d6:	76 e1       	ldi	r23, 0x16	; 22
    10d8:	85 e0       	ldi	r24, 0x05	; 5
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	7b de       	rcall	.-778    	; 0xdd4 <__portable_avr_delay_cycles>
	delay_s(1);
    10de:	6e e3       	ldi	r22, 0x3E	; 62
    10e0:	71 e2       	ldi	r23, 0x21	; 33
    10e2:	80 ea       	ldi	r24, 0xA0	; 160
    10e4:	98 e0       	ldi	r25, 0x08	; 8
    10e6:	81 de       	rcall	.-766    	; 0xdea <usart_tx_at>
    10e8:	66 e1       	ldi	r22, 0x16	; 22
	usart_tx_at(USART_SERIAL_SIM900, AT_CIPSHUT);
    10ea:	76 e1       	ldi	r23, 0x16	; 22
    10ec:	85 e0       	ldi	r24, 0x05	; 5
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	71 de       	rcall	.-798    	; 0xdd4 <__portable_avr_delay_cycles>
    10f2:	6b ee       	ldi	r22, 0xEB	; 235
    10f4:	70 e2       	ldi	r23, 0x20	; 32
	
	
	/////////////////////
	
	
	gprs_states_t state = CIPSHUT;
    10f6:	80 ea       	ldi	r24, 0xA0	; 160
	while (true) {
		
		switch(state)
		{
			case CIPSHUT:
				next_state = CIPSTATUS;
    10f8:	98 e0       	ldi	r25, 0x08	; 8
    10fa:	77 de       	rcall	.-786    	; 0xdea <usart_tx_at>
    10fc:	80 e0       	ldi	r24, 0x00	; 0
	gprs_states_t state = CIPSHUT;
	gprs_states_t next_state = state;
	
	while (true) {
		
		switch(state)
    10fe:	91 e0       	ldi	r25, 0x01	; 1
    1100:	01 c0       	rjmp	.+2      	; 0x1104 <main+0x11e>
    1102:	89 2f       	mov	r24, r25
    1104:	81 11       	cpse	r24, r1
    1106:	fe cf       	rjmp	.-4      	; 0x1104 <main+0x11e>
    1108:	fc cf       	rjmp	.-8      	; 0x1102 <main+0x11c>

0000110a <__udivmodsi4>:
    110a:	a1 e2       	ldi	r26, 0x21	; 33
    110c:	1a 2e       	mov	r1, r26
    110e:	aa 1b       	sub	r26, r26
    1110:	bb 1b       	sub	r27, r27
    1112:	fd 01       	movw	r30, r26
    1114:	0d c0       	rjmp	.+26     	; 0x1130 <__udivmodsi4_ep>

00001116 <__udivmodsi4_loop>:
    1116:	aa 1f       	adc	r26, r26
    1118:	bb 1f       	adc	r27, r27
    111a:	ee 1f       	adc	r30, r30
    111c:	ff 1f       	adc	r31, r31
    111e:	a2 17       	cp	r26, r18
    1120:	b3 07       	cpc	r27, r19
    1122:	e4 07       	cpc	r30, r20
    1124:	f5 07       	cpc	r31, r21
    1126:	20 f0       	brcs	.+8      	; 0x1130 <__udivmodsi4_ep>
    1128:	a2 1b       	sub	r26, r18
    112a:	b3 0b       	sbc	r27, r19
    112c:	e4 0b       	sbc	r30, r20
    112e:	f5 0b       	sbc	r31, r21

00001130 <__udivmodsi4_ep>:
    1130:	66 1f       	adc	r22, r22
    1132:	77 1f       	adc	r23, r23
    1134:	88 1f       	adc	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	1a 94       	dec	r1
    113a:	69 f7       	brne	.-38     	; 0x1116 <__udivmodsi4_loop>
    113c:	60 95       	com	r22
    113e:	70 95       	com	r23
    1140:	80 95       	com	r24
    1142:	90 95       	com	r25
    1144:	9b 01       	movw	r18, r22
    1146:	ac 01       	movw	r20, r24
    1148:	bd 01       	movw	r22, r26
    114a:	cf 01       	movw	r24, r30
    114c:	08 95       	ret

0000114e <atoi>:
    114e:	fc 01       	movw	r30, r24
    1150:	88 27       	eor	r24, r24
    1152:	99 27       	eor	r25, r25
    1154:	e8 94       	clt
    1156:	21 91       	ld	r18, Z+
    1158:	20 32       	cpi	r18, 0x20	; 32
    115a:	e9 f3       	breq	.-6      	; 0x1156 <atoi+0x8>
    115c:	29 30       	cpi	r18, 0x09	; 9
    115e:	10 f0       	brcs	.+4      	; 0x1164 <atoi+0x16>
    1160:	2e 30       	cpi	r18, 0x0E	; 14
    1162:	c8 f3       	brcs	.-14     	; 0x1156 <atoi+0x8>
    1164:	2b 32       	cpi	r18, 0x2B	; 43
    1166:	39 f0       	breq	.+14     	; 0x1176 <atoi+0x28>
    1168:	2d 32       	cpi	r18, 0x2D	; 45
    116a:	31 f4       	brne	.+12     	; 0x1178 <atoi+0x2a>
    116c:	68 94       	set
    116e:	03 c0       	rjmp	.+6      	; 0x1176 <atoi+0x28>
    1170:	14 d0       	rcall	.+40     	; 0x119a <__mulhi_const_10>
    1172:	82 0f       	add	r24, r18
    1174:	91 1d       	adc	r25, r1
    1176:	21 91       	ld	r18, Z+
    1178:	20 53       	subi	r18, 0x30	; 48
    117a:	2a 30       	cpi	r18, 0x0A	; 10
    117c:	c8 f3       	brcs	.-14     	; 0x1170 <atoi+0x22>
    117e:	1e f4       	brtc	.+6      	; 0x1186 <atoi+0x38>
    1180:	90 95       	com	r25
    1182:	81 95       	neg	r24
    1184:	9f 4f       	sbci	r25, 0xFF	; 255
    1186:	08 95       	ret

00001188 <memcpy>:
    1188:	fb 01       	movw	r30, r22
    118a:	dc 01       	movw	r26, r24
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <memcpy+0xa>
    118e:	01 90       	ld	r0, Z+
    1190:	0d 92       	st	X+, r0
    1192:	41 50       	subi	r20, 0x01	; 1
    1194:	50 40       	sbci	r21, 0x00	; 0
    1196:	d8 f7       	brcc	.-10     	; 0x118e <memcpy+0x6>
    1198:	08 95       	ret

0000119a <__mulhi_const_10>:
    119a:	7a e0       	ldi	r23, 0x0A	; 10
    119c:	97 9f       	mul	r25, r23
    119e:	90 2d       	mov	r25, r0
    11a0:	87 9f       	mul	r24, r23
    11a2:	80 2d       	mov	r24, r0
    11a4:	91 0d       	add	r25, r1
    11a6:	11 24       	eor	r1, r1
    11a8:	08 95       	ret

000011aa <printf>:
    11aa:	cf 93       	push	r28
    11ac:	df 93       	push	r29
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
    11b2:	ae 01       	movw	r20, r28
    11b4:	4a 5f       	subi	r20, 0xFA	; 250
    11b6:	5f 4f       	sbci	r21, 0xFF	; 255
    11b8:	fa 01       	movw	r30, r20
    11ba:	61 91       	ld	r22, Z+
    11bc:	71 91       	ld	r23, Z+
    11be:	af 01       	movw	r20, r30
    11c0:	80 91 84 21 	lds	r24, 0x2184	; 0x802184 <__data_end+0x2>
    11c4:	90 91 85 21 	lds	r25, 0x2185	; 0x802185 <__data_end+0x3>
    11c8:	33 d0       	rcall	.+102    	; 0x1230 <vfprintf>
    11ca:	df 91       	pop	r29
    11cc:	cf 91       	pop	r28
    11ce:	08 95       	ret

000011d0 <puts>:
    11d0:	0f 93       	push	r16
    11d2:	1f 93       	push	r17
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	e0 91 84 21 	lds	r30, 0x2184	; 0x802184 <__data_end+0x2>
    11dc:	f0 91 85 21 	lds	r31, 0x2185	; 0x802185 <__data_end+0x3>
    11e0:	23 81       	ldd	r18, Z+3	; 0x03
    11e2:	21 ff       	sbrs	r18, 1
    11e4:	1b c0       	rjmp	.+54     	; 0x121c <puts+0x4c>
    11e6:	8c 01       	movw	r16, r24
    11e8:	d0 e0       	ldi	r29, 0x00	; 0
    11ea:	c0 e0       	ldi	r28, 0x00	; 0
    11ec:	f8 01       	movw	r30, r16
    11ee:	81 91       	ld	r24, Z+
    11f0:	8f 01       	movw	r16, r30
    11f2:	60 91 84 21 	lds	r22, 0x2184	; 0x802184 <__data_end+0x2>
    11f6:	70 91 85 21 	lds	r23, 0x2185	; 0x802185 <__data_end+0x3>
    11fa:	db 01       	movw	r26, r22
    11fc:	18 96       	adiw	r26, 0x08	; 8
    11fe:	ed 91       	ld	r30, X+
    1200:	fc 91       	ld	r31, X
    1202:	19 97       	sbiw	r26, 0x09	; 9
    1204:	88 23       	and	r24, r24
    1206:	31 f0       	breq	.+12     	; 0x1214 <puts+0x44>
    1208:	19 95       	eicall
    120a:	89 2b       	or	r24, r25
    120c:	79 f3       	breq	.-34     	; 0x11ec <puts+0x1c>
    120e:	df ef       	ldi	r29, 0xFF	; 255
    1210:	cf ef       	ldi	r28, 0xFF	; 255
    1212:	ec cf       	rjmp	.-40     	; 0x11ec <puts+0x1c>
    1214:	8a e0       	ldi	r24, 0x0A	; 10
    1216:	19 95       	eicall
    1218:	89 2b       	or	r24, r25
    121a:	19 f0       	breq	.+6      	; 0x1222 <puts+0x52>
    121c:	8f ef       	ldi	r24, 0xFF	; 255
    121e:	9f ef       	ldi	r25, 0xFF	; 255
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <puts+0x56>
    1222:	8d 2f       	mov	r24, r29
    1224:	9c 2f       	mov	r25, r28
    1226:	df 91       	pop	r29
    1228:	cf 91       	pop	r28
    122a:	1f 91       	pop	r17
    122c:	0f 91       	pop	r16
    122e:	08 95       	ret

00001230 <vfprintf>:
    1230:	2f 92       	push	r2
    1232:	3f 92       	push	r3
    1234:	4f 92       	push	r4
    1236:	5f 92       	push	r5
    1238:	6f 92       	push	r6
    123a:	7f 92       	push	r7
    123c:	8f 92       	push	r8
    123e:	9f 92       	push	r9
    1240:	af 92       	push	r10
    1242:	bf 92       	push	r11
    1244:	cf 92       	push	r12
    1246:	df 92       	push	r13
    1248:	ef 92       	push	r14
    124a:	ff 92       	push	r15
    124c:	0f 93       	push	r16
    124e:	1f 93       	push	r17
    1250:	cf 93       	push	r28
    1252:	df 93       	push	r29
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
    1258:	2b 97       	sbiw	r28, 0x0b	; 11
    125a:	cd bf       	out	0x3d, r28	; 61
    125c:	de bf       	out	0x3e, r29	; 62
    125e:	6c 01       	movw	r12, r24
    1260:	7b 01       	movw	r14, r22
    1262:	8a 01       	movw	r16, r20
    1264:	fc 01       	movw	r30, r24
    1266:	16 82       	std	Z+6, r1	; 0x06
    1268:	17 82       	std	Z+7, r1	; 0x07
    126a:	83 81       	ldd	r24, Z+3	; 0x03
    126c:	81 ff       	sbrs	r24, 1
    126e:	bf c1       	rjmp	.+894    	; 0x15ee <vfprintf+0x3be>
    1270:	ce 01       	movw	r24, r28
    1272:	01 96       	adiw	r24, 0x01	; 1
    1274:	3c 01       	movw	r6, r24
    1276:	f6 01       	movw	r30, r12
    1278:	93 81       	ldd	r25, Z+3	; 0x03
    127a:	f7 01       	movw	r30, r14
    127c:	93 fd       	sbrc	r25, 3
    127e:	85 91       	lpm	r24, Z+
    1280:	93 ff       	sbrs	r25, 3
    1282:	81 91       	ld	r24, Z+
    1284:	7f 01       	movw	r14, r30
    1286:	88 23       	and	r24, r24
    1288:	09 f4       	brne	.+2      	; 0x128c <vfprintf+0x5c>
    128a:	ad c1       	rjmp	.+858    	; 0x15e6 <vfprintf+0x3b6>
    128c:	85 32       	cpi	r24, 0x25	; 37
    128e:	39 f4       	brne	.+14     	; 0x129e <vfprintf+0x6e>
    1290:	93 fd       	sbrc	r25, 3
    1292:	85 91       	lpm	r24, Z+
    1294:	93 ff       	sbrs	r25, 3
    1296:	81 91       	ld	r24, Z+
    1298:	7f 01       	movw	r14, r30
    129a:	85 32       	cpi	r24, 0x25	; 37
    129c:	21 f4       	brne	.+8      	; 0x12a6 <vfprintf+0x76>
    129e:	b6 01       	movw	r22, r12
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	d3 d1       	rcall	.+934    	; 0x164a <fputc>
    12a4:	e8 cf       	rjmp	.-48     	; 0x1276 <vfprintf+0x46>
    12a6:	91 2c       	mov	r9, r1
    12a8:	21 2c       	mov	r2, r1
    12aa:	31 2c       	mov	r3, r1
    12ac:	ff e1       	ldi	r31, 0x1F	; 31
    12ae:	f3 15       	cp	r31, r3
    12b0:	d8 f0       	brcs	.+54     	; 0x12e8 <vfprintf+0xb8>
    12b2:	8b 32       	cpi	r24, 0x2B	; 43
    12b4:	79 f0       	breq	.+30     	; 0x12d4 <vfprintf+0xa4>
    12b6:	38 f4       	brcc	.+14     	; 0x12c6 <vfprintf+0x96>
    12b8:	80 32       	cpi	r24, 0x20	; 32
    12ba:	79 f0       	breq	.+30     	; 0x12da <vfprintf+0xaa>
    12bc:	83 32       	cpi	r24, 0x23	; 35
    12be:	a1 f4       	brne	.+40     	; 0x12e8 <vfprintf+0xb8>
    12c0:	23 2d       	mov	r18, r3
    12c2:	20 61       	ori	r18, 0x10	; 16
    12c4:	1d c0       	rjmp	.+58     	; 0x1300 <vfprintf+0xd0>
    12c6:	8d 32       	cpi	r24, 0x2D	; 45
    12c8:	61 f0       	breq	.+24     	; 0x12e2 <vfprintf+0xb2>
    12ca:	80 33       	cpi	r24, 0x30	; 48
    12cc:	69 f4       	brne	.+26     	; 0x12e8 <vfprintf+0xb8>
    12ce:	23 2d       	mov	r18, r3
    12d0:	21 60       	ori	r18, 0x01	; 1
    12d2:	16 c0       	rjmp	.+44     	; 0x1300 <vfprintf+0xd0>
    12d4:	83 2d       	mov	r24, r3
    12d6:	82 60       	ori	r24, 0x02	; 2
    12d8:	38 2e       	mov	r3, r24
    12da:	e3 2d       	mov	r30, r3
    12dc:	e4 60       	ori	r30, 0x04	; 4
    12de:	3e 2e       	mov	r3, r30
    12e0:	2a c0       	rjmp	.+84     	; 0x1336 <vfprintf+0x106>
    12e2:	f3 2d       	mov	r31, r3
    12e4:	f8 60       	ori	r31, 0x08	; 8
    12e6:	1d c0       	rjmp	.+58     	; 0x1322 <vfprintf+0xf2>
    12e8:	37 fc       	sbrc	r3, 7
    12ea:	2d c0       	rjmp	.+90     	; 0x1346 <vfprintf+0x116>
    12ec:	20 ed       	ldi	r18, 0xD0	; 208
    12ee:	28 0f       	add	r18, r24
    12f0:	2a 30       	cpi	r18, 0x0A	; 10
    12f2:	40 f0       	brcs	.+16     	; 0x1304 <vfprintf+0xd4>
    12f4:	8e 32       	cpi	r24, 0x2E	; 46
    12f6:	b9 f4       	brne	.+46     	; 0x1326 <vfprintf+0xf6>
    12f8:	36 fc       	sbrc	r3, 6
    12fa:	75 c1       	rjmp	.+746    	; 0x15e6 <vfprintf+0x3b6>
    12fc:	23 2d       	mov	r18, r3
    12fe:	20 64       	ori	r18, 0x40	; 64
    1300:	32 2e       	mov	r3, r18
    1302:	19 c0       	rjmp	.+50     	; 0x1336 <vfprintf+0x106>
    1304:	36 fe       	sbrs	r3, 6
    1306:	06 c0       	rjmp	.+12     	; 0x1314 <vfprintf+0xe4>
    1308:	8a e0       	ldi	r24, 0x0A	; 10
    130a:	98 9e       	mul	r9, r24
    130c:	20 0d       	add	r18, r0
    130e:	11 24       	eor	r1, r1
    1310:	92 2e       	mov	r9, r18
    1312:	11 c0       	rjmp	.+34     	; 0x1336 <vfprintf+0x106>
    1314:	ea e0       	ldi	r30, 0x0A	; 10
    1316:	2e 9e       	mul	r2, r30
    1318:	20 0d       	add	r18, r0
    131a:	11 24       	eor	r1, r1
    131c:	22 2e       	mov	r2, r18
    131e:	f3 2d       	mov	r31, r3
    1320:	f0 62       	ori	r31, 0x20	; 32
    1322:	3f 2e       	mov	r3, r31
    1324:	08 c0       	rjmp	.+16     	; 0x1336 <vfprintf+0x106>
    1326:	8c 36       	cpi	r24, 0x6C	; 108
    1328:	21 f4       	brne	.+8      	; 0x1332 <vfprintf+0x102>
    132a:	83 2d       	mov	r24, r3
    132c:	80 68       	ori	r24, 0x80	; 128
    132e:	38 2e       	mov	r3, r24
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <vfprintf+0x106>
    1332:	88 36       	cpi	r24, 0x68	; 104
    1334:	41 f4       	brne	.+16     	; 0x1346 <vfprintf+0x116>
    1336:	f7 01       	movw	r30, r14
    1338:	93 fd       	sbrc	r25, 3
    133a:	85 91       	lpm	r24, Z+
    133c:	93 ff       	sbrs	r25, 3
    133e:	81 91       	ld	r24, Z+
    1340:	7f 01       	movw	r14, r30
    1342:	81 11       	cpse	r24, r1
    1344:	b3 cf       	rjmp	.-154    	; 0x12ac <vfprintf+0x7c>
    1346:	98 2f       	mov	r25, r24
    1348:	9f 7d       	andi	r25, 0xDF	; 223
    134a:	95 54       	subi	r25, 0x45	; 69
    134c:	93 30       	cpi	r25, 0x03	; 3
    134e:	28 f4       	brcc	.+10     	; 0x135a <vfprintf+0x12a>
    1350:	0c 5f       	subi	r16, 0xFC	; 252
    1352:	1f 4f       	sbci	r17, 0xFF	; 255
    1354:	9f e3       	ldi	r25, 0x3F	; 63
    1356:	99 83       	std	Y+1, r25	; 0x01
    1358:	0d c0       	rjmp	.+26     	; 0x1374 <vfprintf+0x144>
    135a:	83 36       	cpi	r24, 0x63	; 99
    135c:	31 f0       	breq	.+12     	; 0x136a <vfprintf+0x13a>
    135e:	83 37       	cpi	r24, 0x73	; 115
    1360:	71 f0       	breq	.+28     	; 0x137e <vfprintf+0x14e>
    1362:	83 35       	cpi	r24, 0x53	; 83
    1364:	09 f0       	breq	.+2      	; 0x1368 <vfprintf+0x138>
    1366:	55 c0       	rjmp	.+170    	; 0x1412 <vfprintf+0x1e2>
    1368:	20 c0       	rjmp	.+64     	; 0x13aa <vfprintf+0x17a>
    136a:	f8 01       	movw	r30, r16
    136c:	80 81       	ld	r24, Z
    136e:	89 83       	std	Y+1, r24	; 0x01
    1370:	0e 5f       	subi	r16, 0xFE	; 254
    1372:	1f 4f       	sbci	r17, 0xFF	; 255
    1374:	88 24       	eor	r8, r8
    1376:	83 94       	inc	r8
    1378:	91 2c       	mov	r9, r1
    137a:	53 01       	movw	r10, r6
    137c:	12 c0       	rjmp	.+36     	; 0x13a2 <vfprintf+0x172>
    137e:	28 01       	movw	r4, r16
    1380:	f2 e0       	ldi	r31, 0x02	; 2
    1382:	4f 0e       	add	r4, r31
    1384:	51 1c       	adc	r5, r1
    1386:	f8 01       	movw	r30, r16
    1388:	a0 80       	ld	r10, Z
    138a:	b1 80       	ldd	r11, Z+1	; 0x01
    138c:	36 fe       	sbrs	r3, 6
    138e:	03 c0       	rjmp	.+6      	; 0x1396 <vfprintf+0x166>
    1390:	69 2d       	mov	r22, r9
    1392:	70 e0       	ldi	r23, 0x00	; 0
    1394:	02 c0       	rjmp	.+4      	; 0x139a <vfprintf+0x16a>
    1396:	6f ef       	ldi	r22, 0xFF	; 255
    1398:	7f ef       	ldi	r23, 0xFF	; 255
    139a:	c5 01       	movw	r24, r10
    139c:	4b d1       	rcall	.+662    	; 0x1634 <strnlen>
    139e:	4c 01       	movw	r8, r24
    13a0:	82 01       	movw	r16, r4
    13a2:	f3 2d       	mov	r31, r3
    13a4:	ff 77       	andi	r31, 0x7F	; 127
    13a6:	3f 2e       	mov	r3, r31
    13a8:	15 c0       	rjmp	.+42     	; 0x13d4 <vfprintf+0x1a4>
    13aa:	28 01       	movw	r4, r16
    13ac:	22 e0       	ldi	r18, 0x02	; 2
    13ae:	42 0e       	add	r4, r18
    13b0:	51 1c       	adc	r5, r1
    13b2:	f8 01       	movw	r30, r16
    13b4:	a0 80       	ld	r10, Z
    13b6:	b1 80       	ldd	r11, Z+1	; 0x01
    13b8:	36 fe       	sbrs	r3, 6
    13ba:	03 c0       	rjmp	.+6      	; 0x13c2 <vfprintf+0x192>
    13bc:	69 2d       	mov	r22, r9
    13be:	70 e0       	ldi	r23, 0x00	; 0
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <vfprintf+0x196>
    13c2:	6f ef       	ldi	r22, 0xFF	; 255
    13c4:	7f ef       	ldi	r23, 0xFF	; 255
    13c6:	c5 01       	movw	r24, r10
    13c8:	2a d1       	rcall	.+596    	; 0x161e <strnlen_P>
    13ca:	4c 01       	movw	r8, r24
    13cc:	f3 2d       	mov	r31, r3
    13ce:	f0 68       	ori	r31, 0x80	; 128
    13d0:	3f 2e       	mov	r3, r31
    13d2:	82 01       	movw	r16, r4
    13d4:	33 fc       	sbrc	r3, 3
    13d6:	19 c0       	rjmp	.+50     	; 0x140a <vfprintf+0x1da>
    13d8:	82 2d       	mov	r24, r2
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	88 16       	cp	r8, r24
    13de:	99 06       	cpc	r9, r25
    13e0:	a0 f4       	brcc	.+40     	; 0x140a <vfprintf+0x1da>
    13e2:	b6 01       	movw	r22, r12
    13e4:	80 e2       	ldi	r24, 0x20	; 32
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	30 d1       	rcall	.+608    	; 0x164a <fputc>
    13ea:	2a 94       	dec	r2
    13ec:	f5 cf       	rjmp	.-22     	; 0x13d8 <vfprintf+0x1a8>
    13ee:	f5 01       	movw	r30, r10
    13f0:	37 fc       	sbrc	r3, 7
    13f2:	85 91       	lpm	r24, Z+
    13f4:	37 fe       	sbrs	r3, 7
    13f6:	81 91       	ld	r24, Z+
    13f8:	5f 01       	movw	r10, r30
    13fa:	b6 01       	movw	r22, r12
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	25 d1       	rcall	.+586    	; 0x164a <fputc>
    1400:	21 10       	cpse	r2, r1
    1402:	2a 94       	dec	r2
    1404:	21 e0       	ldi	r18, 0x01	; 1
    1406:	82 1a       	sub	r8, r18
    1408:	91 08       	sbc	r9, r1
    140a:	81 14       	cp	r8, r1
    140c:	91 04       	cpc	r9, r1
    140e:	79 f7       	brne	.-34     	; 0x13ee <vfprintf+0x1be>
    1410:	e1 c0       	rjmp	.+450    	; 0x15d4 <vfprintf+0x3a4>
    1412:	84 36       	cpi	r24, 0x64	; 100
    1414:	11 f0       	breq	.+4      	; 0x141a <vfprintf+0x1ea>
    1416:	89 36       	cpi	r24, 0x69	; 105
    1418:	39 f5       	brne	.+78     	; 0x1468 <vfprintf+0x238>
    141a:	f8 01       	movw	r30, r16
    141c:	37 fe       	sbrs	r3, 7
    141e:	07 c0       	rjmp	.+14     	; 0x142e <vfprintf+0x1fe>
    1420:	60 81       	ld	r22, Z
    1422:	71 81       	ldd	r23, Z+1	; 0x01
    1424:	82 81       	ldd	r24, Z+2	; 0x02
    1426:	93 81       	ldd	r25, Z+3	; 0x03
    1428:	0c 5f       	subi	r16, 0xFC	; 252
    142a:	1f 4f       	sbci	r17, 0xFF	; 255
    142c:	08 c0       	rjmp	.+16     	; 0x143e <vfprintf+0x20e>
    142e:	60 81       	ld	r22, Z
    1430:	71 81       	ldd	r23, Z+1	; 0x01
    1432:	07 2e       	mov	r0, r23
    1434:	00 0c       	add	r0, r0
    1436:	88 0b       	sbc	r24, r24
    1438:	99 0b       	sbc	r25, r25
    143a:	0e 5f       	subi	r16, 0xFE	; 254
    143c:	1f 4f       	sbci	r17, 0xFF	; 255
    143e:	f3 2d       	mov	r31, r3
    1440:	ff 76       	andi	r31, 0x6F	; 111
    1442:	3f 2e       	mov	r3, r31
    1444:	97 ff       	sbrs	r25, 7
    1446:	09 c0       	rjmp	.+18     	; 0x145a <vfprintf+0x22a>
    1448:	90 95       	com	r25
    144a:	80 95       	com	r24
    144c:	70 95       	com	r23
    144e:	61 95       	neg	r22
    1450:	7f 4f       	sbci	r23, 0xFF	; 255
    1452:	8f 4f       	sbci	r24, 0xFF	; 255
    1454:	9f 4f       	sbci	r25, 0xFF	; 255
    1456:	f0 68       	ori	r31, 0x80	; 128
    1458:	3f 2e       	mov	r3, r31
    145a:	2a e0       	ldi	r18, 0x0A	; 10
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	a3 01       	movw	r20, r6
    1460:	30 d1       	rcall	.+608    	; 0x16c2 <__ultoa_invert>
    1462:	88 2e       	mov	r8, r24
    1464:	86 18       	sub	r8, r6
    1466:	44 c0       	rjmp	.+136    	; 0x14f0 <vfprintf+0x2c0>
    1468:	85 37       	cpi	r24, 0x75	; 117
    146a:	31 f4       	brne	.+12     	; 0x1478 <vfprintf+0x248>
    146c:	23 2d       	mov	r18, r3
    146e:	2f 7e       	andi	r18, 0xEF	; 239
    1470:	b2 2e       	mov	r11, r18
    1472:	2a e0       	ldi	r18, 0x0A	; 10
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	25 c0       	rjmp	.+74     	; 0x14c2 <vfprintf+0x292>
    1478:	93 2d       	mov	r25, r3
    147a:	99 7f       	andi	r25, 0xF9	; 249
    147c:	b9 2e       	mov	r11, r25
    147e:	8f 36       	cpi	r24, 0x6F	; 111
    1480:	c1 f0       	breq	.+48     	; 0x14b2 <vfprintf+0x282>
    1482:	18 f4       	brcc	.+6      	; 0x148a <vfprintf+0x25a>
    1484:	88 35       	cpi	r24, 0x58	; 88
    1486:	79 f0       	breq	.+30     	; 0x14a6 <vfprintf+0x276>
    1488:	ae c0       	rjmp	.+348    	; 0x15e6 <vfprintf+0x3b6>
    148a:	80 37       	cpi	r24, 0x70	; 112
    148c:	19 f0       	breq	.+6      	; 0x1494 <vfprintf+0x264>
    148e:	88 37       	cpi	r24, 0x78	; 120
    1490:	21 f0       	breq	.+8      	; 0x149a <vfprintf+0x26a>
    1492:	a9 c0       	rjmp	.+338    	; 0x15e6 <vfprintf+0x3b6>
    1494:	e9 2f       	mov	r30, r25
    1496:	e0 61       	ori	r30, 0x10	; 16
    1498:	be 2e       	mov	r11, r30
    149a:	b4 fe       	sbrs	r11, 4
    149c:	0d c0       	rjmp	.+26     	; 0x14b8 <vfprintf+0x288>
    149e:	fb 2d       	mov	r31, r11
    14a0:	f4 60       	ori	r31, 0x04	; 4
    14a2:	bf 2e       	mov	r11, r31
    14a4:	09 c0       	rjmp	.+18     	; 0x14b8 <vfprintf+0x288>
    14a6:	34 fe       	sbrs	r3, 4
    14a8:	0a c0       	rjmp	.+20     	; 0x14be <vfprintf+0x28e>
    14aa:	29 2f       	mov	r18, r25
    14ac:	26 60       	ori	r18, 0x06	; 6
    14ae:	b2 2e       	mov	r11, r18
    14b0:	06 c0       	rjmp	.+12     	; 0x14be <vfprintf+0x28e>
    14b2:	28 e0       	ldi	r18, 0x08	; 8
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	05 c0       	rjmp	.+10     	; 0x14c2 <vfprintf+0x292>
    14b8:	20 e1       	ldi	r18, 0x10	; 16
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <vfprintf+0x292>
    14be:	20 e1       	ldi	r18, 0x10	; 16
    14c0:	32 e0       	ldi	r19, 0x02	; 2
    14c2:	f8 01       	movw	r30, r16
    14c4:	b7 fe       	sbrs	r11, 7
    14c6:	07 c0       	rjmp	.+14     	; 0x14d6 <vfprintf+0x2a6>
    14c8:	60 81       	ld	r22, Z
    14ca:	71 81       	ldd	r23, Z+1	; 0x01
    14cc:	82 81       	ldd	r24, Z+2	; 0x02
    14ce:	93 81       	ldd	r25, Z+3	; 0x03
    14d0:	0c 5f       	subi	r16, 0xFC	; 252
    14d2:	1f 4f       	sbci	r17, 0xFF	; 255
    14d4:	06 c0       	rjmp	.+12     	; 0x14e2 <vfprintf+0x2b2>
    14d6:	60 81       	ld	r22, Z
    14d8:	71 81       	ldd	r23, Z+1	; 0x01
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	0e 5f       	subi	r16, 0xFE	; 254
    14e0:	1f 4f       	sbci	r17, 0xFF	; 255
    14e2:	a3 01       	movw	r20, r6
    14e4:	ee d0       	rcall	.+476    	; 0x16c2 <__ultoa_invert>
    14e6:	88 2e       	mov	r8, r24
    14e8:	86 18       	sub	r8, r6
    14ea:	fb 2d       	mov	r31, r11
    14ec:	ff 77       	andi	r31, 0x7F	; 127
    14ee:	3f 2e       	mov	r3, r31
    14f0:	36 fe       	sbrs	r3, 6
    14f2:	0d c0       	rjmp	.+26     	; 0x150e <vfprintf+0x2de>
    14f4:	23 2d       	mov	r18, r3
    14f6:	2e 7f       	andi	r18, 0xFE	; 254
    14f8:	a2 2e       	mov	r10, r18
    14fa:	89 14       	cp	r8, r9
    14fc:	58 f4       	brcc	.+22     	; 0x1514 <vfprintf+0x2e4>
    14fe:	34 fe       	sbrs	r3, 4
    1500:	0b c0       	rjmp	.+22     	; 0x1518 <vfprintf+0x2e8>
    1502:	32 fc       	sbrc	r3, 2
    1504:	09 c0       	rjmp	.+18     	; 0x1518 <vfprintf+0x2e8>
    1506:	83 2d       	mov	r24, r3
    1508:	8e 7e       	andi	r24, 0xEE	; 238
    150a:	a8 2e       	mov	r10, r24
    150c:	05 c0       	rjmp	.+10     	; 0x1518 <vfprintf+0x2e8>
    150e:	b8 2c       	mov	r11, r8
    1510:	a3 2c       	mov	r10, r3
    1512:	03 c0       	rjmp	.+6      	; 0x151a <vfprintf+0x2ea>
    1514:	b8 2c       	mov	r11, r8
    1516:	01 c0       	rjmp	.+2      	; 0x151a <vfprintf+0x2ea>
    1518:	b9 2c       	mov	r11, r9
    151a:	a4 fe       	sbrs	r10, 4
    151c:	0f c0       	rjmp	.+30     	; 0x153c <vfprintf+0x30c>
    151e:	fe 01       	movw	r30, r28
    1520:	e8 0d       	add	r30, r8
    1522:	f1 1d       	adc	r31, r1
    1524:	80 81       	ld	r24, Z
    1526:	80 33       	cpi	r24, 0x30	; 48
    1528:	21 f4       	brne	.+8      	; 0x1532 <vfprintf+0x302>
    152a:	9a 2d       	mov	r25, r10
    152c:	99 7e       	andi	r25, 0xE9	; 233
    152e:	a9 2e       	mov	r10, r25
    1530:	09 c0       	rjmp	.+18     	; 0x1544 <vfprintf+0x314>
    1532:	a2 fe       	sbrs	r10, 2
    1534:	06 c0       	rjmp	.+12     	; 0x1542 <vfprintf+0x312>
    1536:	b3 94       	inc	r11
    1538:	b3 94       	inc	r11
    153a:	04 c0       	rjmp	.+8      	; 0x1544 <vfprintf+0x314>
    153c:	8a 2d       	mov	r24, r10
    153e:	86 78       	andi	r24, 0x86	; 134
    1540:	09 f0       	breq	.+2      	; 0x1544 <vfprintf+0x314>
    1542:	b3 94       	inc	r11
    1544:	a3 fc       	sbrc	r10, 3
    1546:	10 c0       	rjmp	.+32     	; 0x1568 <vfprintf+0x338>
    1548:	a0 fe       	sbrs	r10, 0
    154a:	06 c0       	rjmp	.+12     	; 0x1558 <vfprintf+0x328>
    154c:	b2 14       	cp	r11, r2
    154e:	80 f4       	brcc	.+32     	; 0x1570 <vfprintf+0x340>
    1550:	28 0c       	add	r2, r8
    1552:	92 2c       	mov	r9, r2
    1554:	9b 18       	sub	r9, r11
    1556:	0d c0       	rjmp	.+26     	; 0x1572 <vfprintf+0x342>
    1558:	b2 14       	cp	r11, r2
    155a:	58 f4       	brcc	.+22     	; 0x1572 <vfprintf+0x342>
    155c:	b6 01       	movw	r22, r12
    155e:	80 e2       	ldi	r24, 0x20	; 32
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	73 d0       	rcall	.+230    	; 0x164a <fputc>
    1564:	b3 94       	inc	r11
    1566:	f8 cf       	rjmp	.-16     	; 0x1558 <vfprintf+0x328>
    1568:	b2 14       	cp	r11, r2
    156a:	18 f4       	brcc	.+6      	; 0x1572 <vfprintf+0x342>
    156c:	2b 18       	sub	r2, r11
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <vfprintf+0x344>
    1570:	98 2c       	mov	r9, r8
    1572:	21 2c       	mov	r2, r1
    1574:	a4 fe       	sbrs	r10, 4
    1576:	0f c0       	rjmp	.+30     	; 0x1596 <vfprintf+0x366>
    1578:	b6 01       	movw	r22, r12
    157a:	80 e3       	ldi	r24, 0x30	; 48
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	65 d0       	rcall	.+202    	; 0x164a <fputc>
    1580:	a2 fe       	sbrs	r10, 2
    1582:	16 c0       	rjmp	.+44     	; 0x15b0 <vfprintf+0x380>
    1584:	a1 fc       	sbrc	r10, 1
    1586:	03 c0       	rjmp	.+6      	; 0x158e <vfprintf+0x35e>
    1588:	88 e7       	ldi	r24, 0x78	; 120
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <vfprintf+0x362>
    158e:	88 e5       	ldi	r24, 0x58	; 88
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	b6 01       	movw	r22, r12
    1594:	0c c0       	rjmp	.+24     	; 0x15ae <vfprintf+0x37e>
    1596:	8a 2d       	mov	r24, r10
    1598:	86 78       	andi	r24, 0x86	; 134
    159a:	51 f0       	breq	.+20     	; 0x15b0 <vfprintf+0x380>
    159c:	a1 fe       	sbrs	r10, 1
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <vfprintf+0x374>
    15a0:	8b e2       	ldi	r24, 0x2B	; 43
    15a2:	01 c0       	rjmp	.+2      	; 0x15a6 <vfprintf+0x376>
    15a4:	80 e2       	ldi	r24, 0x20	; 32
    15a6:	a7 fc       	sbrc	r10, 7
    15a8:	8d e2       	ldi	r24, 0x2D	; 45
    15aa:	b6 01       	movw	r22, r12
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	4d d0       	rcall	.+154    	; 0x164a <fputc>
    15b0:	89 14       	cp	r8, r9
    15b2:	30 f4       	brcc	.+12     	; 0x15c0 <vfprintf+0x390>
    15b4:	b6 01       	movw	r22, r12
    15b6:	80 e3       	ldi	r24, 0x30	; 48
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	47 d0       	rcall	.+142    	; 0x164a <fputc>
    15bc:	9a 94       	dec	r9
    15be:	f8 cf       	rjmp	.-16     	; 0x15b0 <vfprintf+0x380>
    15c0:	8a 94       	dec	r8
    15c2:	f3 01       	movw	r30, r6
    15c4:	e8 0d       	add	r30, r8
    15c6:	f1 1d       	adc	r31, r1
    15c8:	80 81       	ld	r24, Z
    15ca:	b6 01       	movw	r22, r12
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	3d d0       	rcall	.+122    	; 0x164a <fputc>
    15d0:	81 10       	cpse	r8, r1
    15d2:	f6 cf       	rjmp	.-20     	; 0x15c0 <vfprintf+0x390>
    15d4:	22 20       	and	r2, r2
    15d6:	09 f4       	brne	.+2      	; 0x15da <vfprintf+0x3aa>
    15d8:	4e ce       	rjmp	.-868    	; 0x1276 <vfprintf+0x46>
    15da:	b6 01       	movw	r22, r12
    15dc:	80 e2       	ldi	r24, 0x20	; 32
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	34 d0       	rcall	.+104    	; 0x164a <fputc>
    15e2:	2a 94       	dec	r2
    15e4:	f7 cf       	rjmp	.-18     	; 0x15d4 <vfprintf+0x3a4>
    15e6:	f6 01       	movw	r30, r12
    15e8:	86 81       	ldd	r24, Z+6	; 0x06
    15ea:	97 81       	ldd	r25, Z+7	; 0x07
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <vfprintf+0x3c2>
    15ee:	8f ef       	ldi	r24, 0xFF	; 255
    15f0:	9f ef       	ldi	r25, 0xFF	; 255
    15f2:	2b 96       	adiw	r28, 0x0b	; 11
    15f4:	cd bf       	out	0x3d, r28	; 61
    15f6:	de bf       	out	0x3e, r29	; 62
    15f8:	df 91       	pop	r29
    15fa:	cf 91       	pop	r28
    15fc:	1f 91       	pop	r17
    15fe:	0f 91       	pop	r16
    1600:	ff 90       	pop	r15
    1602:	ef 90       	pop	r14
    1604:	df 90       	pop	r13
    1606:	cf 90       	pop	r12
    1608:	bf 90       	pop	r11
    160a:	af 90       	pop	r10
    160c:	9f 90       	pop	r9
    160e:	8f 90       	pop	r8
    1610:	7f 90       	pop	r7
    1612:	6f 90       	pop	r6
    1614:	5f 90       	pop	r5
    1616:	4f 90       	pop	r4
    1618:	3f 90       	pop	r3
    161a:	2f 90       	pop	r2
    161c:	08 95       	ret

0000161e <strnlen_P>:
    161e:	fc 01       	movw	r30, r24
    1620:	05 90       	lpm	r0, Z+
    1622:	61 50       	subi	r22, 0x01	; 1
    1624:	70 40       	sbci	r23, 0x00	; 0
    1626:	01 10       	cpse	r0, r1
    1628:	d8 f7       	brcc	.-10     	; 0x1620 <strnlen_P+0x2>
    162a:	80 95       	com	r24
    162c:	90 95       	com	r25
    162e:	8e 0f       	add	r24, r30
    1630:	9f 1f       	adc	r25, r31
    1632:	08 95       	ret

00001634 <strnlen>:
    1634:	fc 01       	movw	r30, r24
    1636:	61 50       	subi	r22, 0x01	; 1
    1638:	70 40       	sbci	r23, 0x00	; 0
    163a:	01 90       	ld	r0, Z+
    163c:	01 10       	cpse	r0, r1
    163e:	d8 f7       	brcc	.-10     	; 0x1636 <strnlen+0x2>
    1640:	80 95       	com	r24
    1642:	90 95       	com	r25
    1644:	8e 0f       	add	r24, r30
    1646:	9f 1f       	adc	r25, r31
    1648:	08 95       	ret

0000164a <fputc>:
    164a:	0f 93       	push	r16
    164c:	1f 93       	push	r17
    164e:	cf 93       	push	r28
    1650:	df 93       	push	r29
    1652:	fb 01       	movw	r30, r22
    1654:	23 81       	ldd	r18, Z+3	; 0x03
    1656:	21 fd       	sbrc	r18, 1
    1658:	03 c0       	rjmp	.+6      	; 0x1660 <fputc+0x16>
    165a:	8f ef       	ldi	r24, 0xFF	; 255
    165c:	9f ef       	ldi	r25, 0xFF	; 255
    165e:	2c c0       	rjmp	.+88     	; 0x16b8 <fputc+0x6e>
    1660:	22 ff       	sbrs	r18, 2
    1662:	16 c0       	rjmp	.+44     	; 0x1690 <fputc+0x46>
    1664:	46 81       	ldd	r20, Z+6	; 0x06
    1666:	57 81       	ldd	r21, Z+7	; 0x07
    1668:	24 81       	ldd	r18, Z+4	; 0x04
    166a:	35 81       	ldd	r19, Z+5	; 0x05
    166c:	42 17       	cp	r20, r18
    166e:	53 07       	cpc	r21, r19
    1670:	44 f4       	brge	.+16     	; 0x1682 <fputc+0x38>
    1672:	a0 81       	ld	r26, Z
    1674:	b1 81       	ldd	r27, Z+1	; 0x01
    1676:	9d 01       	movw	r18, r26
    1678:	2f 5f       	subi	r18, 0xFF	; 255
    167a:	3f 4f       	sbci	r19, 0xFF	; 255
    167c:	20 83       	st	Z, r18
    167e:	31 83       	std	Z+1, r19	; 0x01
    1680:	8c 93       	st	X, r24
    1682:	26 81       	ldd	r18, Z+6	; 0x06
    1684:	37 81       	ldd	r19, Z+7	; 0x07
    1686:	2f 5f       	subi	r18, 0xFF	; 255
    1688:	3f 4f       	sbci	r19, 0xFF	; 255
    168a:	26 83       	std	Z+6, r18	; 0x06
    168c:	37 83       	std	Z+7, r19	; 0x07
    168e:	14 c0       	rjmp	.+40     	; 0x16b8 <fputc+0x6e>
    1690:	8b 01       	movw	r16, r22
    1692:	ec 01       	movw	r28, r24
    1694:	fb 01       	movw	r30, r22
    1696:	00 84       	ldd	r0, Z+8	; 0x08
    1698:	f1 85       	ldd	r31, Z+9	; 0x09
    169a:	e0 2d       	mov	r30, r0
    169c:	19 95       	eicall
    169e:	89 2b       	or	r24, r25
    16a0:	e1 f6       	brne	.-72     	; 0x165a <fputc+0x10>
    16a2:	d8 01       	movw	r26, r16
    16a4:	16 96       	adiw	r26, 0x06	; 6
    16a6:	8d 91       	ld	r24, X+
    16a8:	9c 91       	ld	r25, X
    16aa:	17 97       	sbiw	r26, 0x07	; 7
    16ac:	01 96       	adiw	r24, 0x01	; 1
    16ae:	16 96       	adiw	r26, 0x06	; 6
    16b0:	8d 93       	st	X+, r24
    16b2:	9c 93       	st	X, r25
    16b4:	17 97       	sbiw	r26, 0x07	; 7
    16b6:	ce 01       	movw	r24, r28
    16b8:	df 91       	pop	r29
    16ba:	cf 91       	pop	r28
    16bc:	1f 91       	pop	r17
    16be:	0f 91       	pop	r16
    16c0:	08 95       	ret

000016c2 <__ultoa_invert>:
    16c2:	fa 01       	movw	r30, r20
    16c4:	aa 27       	eor	r26, r26
    16c6:	28 30       	cpi	r18, 0x08	; 8
    16c8:	51 f1       	breq	.+84     	; 0x171e <__ultoa_invert+0x5c>
    16ca:	20 31       	cpi	r18, 0x10	; 16
    16cc:	81 f1       	breq	.+96     	; 0x172e <__ultoa_invert+0x6c>
    16ce:	e8 94       	clt
    16d0:	6f 93       	push	r22
    16d2:	6e 7f       	andi	r22, 0xFE	; 254
    16d4:	6e 5f       	subi	r22, 0xFE	; 254
    16d6:	7f 4f       	sbci	r23, 0xFF	; 255
    16d8:	8f 4f       	sbci	r24, 0xFF	; 255
    16da:	9f 4f       	sbci	r25, 0xFF	; 255
    16dc:	af 4f       	sbci	r26, 0xFF	; 255
    16de:	b1 e0       	ldi	r27, 0x01	; 1
    16e0:	3e d0       	rcall	.+124    	; 0x175e <__ultoa_invert+0x9c>
    16e2:	b4 e0       	ldi	r27, 0x04	; 4
    16e4:	3c d0       	rcall	.+120    	; 0x175e <__ultoa_invert+0x9c>
    16e6:	67 0f       	add	r22, r23
    16e8:	78 1f       	adc	r23, r24
    16ea:	89 1f       	adc	r24, r25
    16ec:	9a 1f       	adc	r25, r26
    16ee:	a1 1d       	adc	r26, r1
    16f0:	68 0f       	add	r22, r24
    16f2:	79 1f       	adc	r23, r25
    16f4:	8a 1f       	adc	r24, r26
    16f6:	91 1d       	adc	r25, r1
    16f8:	a1 1d       	adc	r26, r1
    16fa:	6a 0f       	add	r22, r26
    16fc:	71 1d       	adc	r23, r1
    16fe:	81 1d       	adc	r24, r1
    1700:	91 1d       	adc	r25, r1
    1702:	a1 1d       	adc	r26, r1
    1704:	20 d0       	rcall	.+64     	; 0x1746 <__ultoa_invert+0x84>
    1706:	09 f4       	brne	.+2      	; 0x170a <__ultoa_invert+0x48>
    1708:	68 94       	set
    170a:	3f 91       	pop	r19
    170c:	2a e0       	ldi	r18, 0x0A	; 10
    170e:	26 9f       	mul	r18, r22
    1710:	11 24       	eor	r1, r1
    1712:	30 19       	sub	r19, r0
    1714:	30 5d       	subi	r19, 0xD0	; 208
    1716:	31 93       	st	Z+, r19
    1718:	de f6       	brtc	.-74     	; 0x16d0 <__ultoa_invert+0xe>
    171a:	cf 01       	movw	r24, r30
    171c:	08 95       	ret
    171e:	46 2f       	mov	r20, r22
    1720:	47 70       	andi	r20, 0x07	; 7
    1722:	40 5d       	subi	r20, 0xD0	; 208
    1724:	41 93       	st	Z+, r20
    1726:	b3 e0       	ldi	r27, 0x03	; 3
    1728:	0f d0       	rcall	.+30     	; 0x1748 <__ultoa_invert+0x86>
    172a:	c9 f7       	brne	.-14     	; 0x171e <__ultoa_invert+0x5c>
    172c:	f6 cf       	rjmp	.-20     	; 0x171a <__ultoa_invert+0x58>
    172e:	46 2f       	mov	r20, r22
    1730:	4f 70       	andi	r20, 0x0F	; 15
    1732:	40 5d       	subi	r20, 0xD0	; 208
    1734:	4a 33       	cpi	r20, 0x3A	; 58
    1736:	18 f0       	brcs	.+6      	; 0x173e <__ultoa_invert+0x7c>
    1738:	49 5d       	subi	r20, 0xD9	; 217
    173a:	31 fd       	sbrc	r19, 1
    173c:	40 52       	subi	r20, 0x20	; 32
    173e:	41 93       	st	Z+, r20
    1740:	02 d0       	rcall	.+4      	; 0x1746 <__ultoa_invert+0x84>
    1742:	a9 f7       	brne	.-22     	; 0x172e <__ultoa_invert+0x6c>
    1744:	ea cf       	rjmp	.-44     	; 0x171a <__ultoa_invert+0x58>
    1746:	b4 e0       	ldi	r27, 0x04	; 4
    1748:	a6 95       	lsr	r26
    174a:	97 95       	ror	r25
    174c:	87 95       	ror	r24
    174e:	77 95       	ror	r23
    1750:	67 95       	ror	r22
    1752:	ba 95       	dec	r27
    1754:	c9 f7       	brne	.-14     	; 0x1748 <__ultoa_invert+0x86>
    1756:	00 97       	sbiw	r24, 0x00	; 0
    1758:	61 05       	cpc	r22, r1
    175a:	71 05       	cpc	r23, r1
    175c:	08 95       	ret
    175e:	9b 01       	movw	r18, r22
    1760:	ac 01       	movw	r20, r24
    1762:	0a 2e       	mov	r0, r26
    1764:	06 94       	lsr	r0
    1766:	57 95       	ror	r21
    1768:	47 95       	ror	r20
    176a:	37 95       	ror	r19
    176c:	27 95       	ror	r18
    176e:	ba 95       	dec	r27
    1770:	c9 f7       	brne	.-14     	; 0x1764 <__ultoa_invert+0xa2>
    1772:	62 0f       	add	r22, r18
    1774:	73 1f       	adc	r23, r19
    1776:	84 1f       	adc	r24, r20
    1778:	95 1f       	adc	r25, r21
    177a:	a0 1d       	adc	r26, r0
    177c:	08 95       	ret

0000177e <_exit>:
    177e:	f8 94       	cli

00001780 <__stop_program>:
    1780:	ff cf       	rjmp	.-2      	; 0x1780 <__stop_program>
